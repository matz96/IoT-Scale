
Pro3E_RT_Mikrocontroller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000952c  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b4c  080095ec  080095ec  000195ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b138  0800b138  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  0800b138  0800b138  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b138  0800b138  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b138  0800b138  0001b138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b13c  0800b13c  0001b13c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800b140  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002398  20000088  0800b1c8  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002420  0800b1c8  00022420  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d90f  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ef4  00000000  00000000  0003d9bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001690  00000000  00000000  000418b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014b0  00000000  00000000  00042f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000146fb  00000000  00000000  000443f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a8e0  00000000  00000000  00058af3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00073ccd  00000000  00000000  000733d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e70a0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005658  00000000  00000000  000e70f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000088 	.word	0x20000088
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080095d4 	.word	0x080095d4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000008c 	.word	0x2000008c
 8000104:	080095d4 	.word	0x080095d4

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_cfrcmple>:
 8000234:	4684      	mov	ip, r0
 8000236:	1c08      	adds	r0, r1, #0
 8000238:	4661      	mov	r1, ip
 800023a:	e7ff      	b.n	800023c <__aeabi_cfcmpeq>

0800023c <__aeabi_cfcmpeq>:
 800023c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800023e:	f000 fb67 	bl	8000910 <__lesf2>
 8000242:	2800      	cmp	r0, #0
 8000244:	d401      	bmi.n	800024a <__aeabi_cfcmpeq+0xe>
 8000246:	2100      	movs	r1, #0
 8000248:	42c8      	cmn	r0, r1
 800024a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800024c <__aeabi_fcmpeq>:
 800024c:	b510      	push	{r4, lr}
 800024e:	f000 faeb 	bl	8000828 <__eqsf2>
 8000252:	4240      	negs	r0, r0
 8000254:	3001      	adds	r0, #1
 8000256:	bd10      	pop	{r4, pc}

08000258 <__aeabi_fcmplt>:
 8000258:	b510      	push	{r4, lr}
 800025a:	f000 fb59 	bl	8000910 <__lesf2>
 800025e:	2800      	cmp	r0, #0
 8000260:	db01      	blt.n	8000266 <__aeabi_fcmplt+0xe>
 8000262:	2000      	movs	r0, #0
 8000264:	bd10      	pop	{r4, pc}
 8000266:	2001      	movs	r0, #1
 8000268:	bd10      	pop	{r4, pc}
 800026a:	46c0      	nop			; (mov r8, r8)

0800026c <__aeabi_fcmple>:
 800026c:	b510      	push	{r4, lr}
 800026e:	f000 fb4f 	bl	8000910 <__lesf2>
 8000272:	2800      	cmp	r0, #0
 8000274:	dd01      	ble.n	800027a <__aeabi_fcmple+0xe>
 8000276:	2000      	movs	r0, #0
 8000278:	bd10      	pop	{r4, pc}
 800027a:	2001      	movs	r0, #1
 800027c:	bd10      	pop	{r4, pc}
 800027e:	46c0      	nop			; (mov r8, r8)

08000280 <__aeabi_fcmpgt>:
 8000280:	b510      	push	{r4, lr}
 8000282:	f000 faf9 	bl	8000878 <__gesf2>
 8000286:	2800      	cmp	r0, #0
 8000288:	dc01      	bgt.n	800028e <__aeabi_fcmpgt+0xe>
 800028a:	2000      	movs	r0, #0
 800028c:	bd10      	pop	{r4, pc}
 800028e:	2001      	movs	r0, #1
 8000290:	bd10      	pop	{r4, pc}
 8000292:	46c0      	nop			; (mov r8, r8)

08000294 <__aeabi_fcmpge>:
 8000294:	b510      	push	{r4, lr}
 8000296:	f000 faef 	bl	8000878 <__gesf2>
 800029a:	2800      	cmp	r0, #0
 800029c:	da01      	bge.n	80002a2 <__aeabi_fcmpge+0xe>
 800029e:	2000      	movs	r0, #0
 80002a0:	bd10      	pop	{r4, pc}
 80002a2:	2001      	movs	r0, #1
 80002a4:	bd10      	pop	{r4, pc}
 80002a6:	46c0      	nop			; (mov r8, r8)

080002a8 <__aeabi_f2uiz>:
 80002a8:	219e      	movs	r1, #158	; 0x9e
 80002aa:	b510      	push	{r4, lr}
 80002ac:	05c9      	lsls	r1, r1, #23
 80002ae:	1c04      	adds	r4, r0, #0
 80002b0:	f7ff fff0 	bl	8000294 <__aeabi_fcmpge>
 80002b4:	2800      	cmp	r0, #0
 80002b6:	d103      	bne.n	80002c0 <__aeabi_f2uiz+0x18>
 80002b8:	1c20      	adds	r0, r4, #0
 80002ba:	f000 fe55 	bl	8000f68 <__aeabi_f2iz>
 80002be:	bd10      	pop	{r4, pc}
 80002c0:	219e      	movs	r1, #158	; 0x9e
 80002c2:	1c20      	adds	r0, r4, #0
 80002c4:	05c9      	lsls	r1, r1, #23
 80002c6:	f000 fc87 	bl	8000bd8 <__aeabi_fsub>
 80002ca:	f000 fe4d 	bl	8000f68 <__aeabi_f2iz>
 80002ce:	2380      	movs	r3, #128	; 0x80
 80002d0:	061b      	lsls	r3, r3, #24
 80002d2:	469c      	mov	ip, r3
 80002d4:	4460      	add	r0, ip
 80002d6:	e7f2      	b.n	80002be <__aeabi_f2uiz+0x16>

080002d8 <__aeabi_fadd>:
 80002d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002da:	4646      	mov	r6, r8
 80002dc:	46d6      	mov	lr, sl
 80002de:	464f      	mov	r7, r9
 80002e0:	024d      	lsls	r5, r1, #9
 80002e2:	0242      	lsls	r2, r0, #9
 80002e4:	b5c0      	push	{r6, r7, lr}
 80002e6:	0a52      	lsrs	r2, r2, #9
 80002e8:	0a6e      	lsrs	r6, r5, #9
 80002ea:	0047      	lsls	r7, r0, #1
 80002ec:	46b0      	mov	r8, r6
 80002ee:	0e3f      	lsrs	r7, r7, #24
 80002f0:	004e      	lsls	r6, r1, #1
 80002f2:	0fc4      	lsrs	r4, r0, #31
 80002f4:	00d0      	lsls	r0, r2, #3
 80002f6:	4694      	mov	ip, r2
 80002f8:	003b      	movs	r3, r7
 80002fa:	4682      	mov	sl, r0
 80002fc:	0e36      	lsrs	r6, r6, #24
 80002fe:	0fc9      	lsrs	r1, r1, #31
 8000300:	09ad      	lsrs	r5, r5, #6
 8000302:	428c      	cmp	r4, r1
 8000304:	d06d      	beq.n	80003e2 <__aeabi_fadd+0x10a>
 8000306:	1bb8      	subs	r0, r7, r6
 8000308:	4681      	mov	r9, r0
 800030a:	2800      	cmp	r0, #0
 800030c:	dd4d      	ble.n	80003aa <__aeabi_fadd+0xd2>
 800030e:	2e00      	cmp	r6, #0
 8000310:	d100      	bne.n	8000314 <__aeabi_fadd+0x3c>
 8000312:	e088      	b.n	8000426 <__aeabi_fadd+0x14e>
 8000314:	2fff      	cmp	r7, #255	; 0xff
 8000316:	d05a      	beq.n	80003ce <__aeabi_fadd+0xf6>
 8000318:	2380      	movs	r3, #128	; 0x80
 800031a:	04db      	lsls	r3, r3, #19
 800031c:	431d      	orrs	r5, r3
 800031e:	464b      	mov	r3, r9
 8000320:	2201      	movs	r2, #1
 8000322:	2b1b      	cmp	r3, #27
 8000324:	dc0a      	bgt.n	800033c <__aeabi_fadd+0x64>
 8000326:	002b      	movs	r3, r5
 8000328:	464a      	mov	r2, r9
 800032a:	4649      	mov	r1, r9
 800032c:	40d3      	lsrs	r3, r2
 800032e:	2220      	movs	r2, #32
 8000330:	1a52      	subs	r2, r2, r1
 8000332:	4095      	lsls	r5, r2
 8000334:	002a      	movs	r2, r5
 8000336:	1e55      	subs	r5, r2, #1
 8000338:	41aa      	sbcs	r2, r5
 800033a:	431a      	orrs	r2, r3
 800033c:	4653      	mov	r3, sl
 800033e:	1a9a      	subs	r2, r3, r2
 8000340:	0153      	lsls	r3, r2, #5
 8000342:	d400      	bmi.n	8000346 <__aeabi_fadd+0x6e>
 8000344:	e0b9      	b.n	80004ba <__aeabi_fadd+0x1e2>
 8000346:	0192      	lsls	r2, r2, #6
 8000348:	0996      	lsrs	r6, r2, #6
 800034a:	0030      	movs	r0, r6
 800034c:	f000 feae 	bl	80010ac <__clzsi2>
 8000350:	3805      	subs	r0, #5
 8000352:	4086      	lsls	r6, r0
 8000354:	4287      	cmp	r7, r0
 8000356:	dd00      	ble.n	800035a <__aeabi_fadd+0x82>
 8000358:	e0d4      	b.n	8000504 <__aeabi_fadd+0x22c>
 800035a:	0033      	movs	r3, r6
 800035c:	1bc7      	subs	r7, r0, r7
 800035e:	2020      	movs	r0, #32
 8000360:	3701      	adds	r7, #1
 8000362:	40fb      	lsrs	r3, r7
 8000364:	1bc7      	subs	r7, r0, r7
 8000366:	40be      	lsls	r6, r7
 8000368:	0032      	movs	r2, r6
 800036a:	1e56      	subs	r6, r2, #1
 800036c:	41b2      	sbcs	r2, r6
 800036e:	2700      	movs	r7, #0
 8000370:	431a      	orrs	r2, r3
 8000372:	0753      	lsls	r3, r2, #29
 8000374:	d004      	beq.n	8000380 <__aeabi_fadd+0xa8>
 8000376:	230f      	movs	r3, #15
 8000378:	4013      	ands	r3, r2
 800037a:	2b04      	cmp	r3, #4
 800037c:	d000      	beq.n	8000380 <__aeabi_fadd+0xa8>
 800037e:	3204      	adds	r2, #4
 8000380:	0153      	lsls	r3, r2, #5
 8000382:	d400      	bmi.n	8000386 <__aeabi_fadd+0xae>
 8000384:	e09c      	b.n	80004c0 <__aeabi_fadd+0x1e8>
 8000386:	1c7b      	adds	r3, r7, #1
 8000388:	2ffe      	cmp	r7, #254	; 0xfe
 800038a:	d100      	bne.n	800038e <__aeabi_fadd+0xb6>
 800038c:	e09a      	b.n	80004c4 <__aeabi_fadd+0x1ec>
 800038e:	0192      	lsls	r2, r2, #6
 8000390:	0a52      	lsrs	r2, r2, #9
 8000392:	4694      	mov	ip, r2
 8000394:	b2db      	uxtb	r3, r3
 8000396:	05d8      	lsls	r0, r3, #23
 8000398:	4663      	mov	r3, ip
 800039a:	07e4      	lsls	r4, r4, #31
 800039c:	4318      	orrs	r0, r3
 800039e:	4320      	orrs	r0, r4
 80003a0:	bce0      	pop	{r5, r6, r7}
 80003a2:	46ba      	mov	sl, r7
 80003a4:	46b1      	mov	r9, r6
 80003a6:	46a8      	mov	r8, r5
 80003a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003aa:	2800      	cmp	r0, #0
 80003ac:	d049      	beq.n	8000442 <__aeabi_fadd+0x16a>
 80003ae:	1bf3      	subs	r3, r6, r7
 80003b0:	2f00      	cmp	r7, #0
 80003b2:	d000      	beq.n	80003b6 <__aeabi_fadd+0xde>
 80003b4:	e0b6      	b.n	8000524 <__aeabi_fadd+0x24c>
 80003b6:	4652      	mov	r2, sl
 80003b8:	2a00      	cmp	r2, #0
 80003ba:	d060      	beq.n	800047e <__aeabi_fadd+0x1a6>
 80003bc:	3b01      	subs	r3, #1
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d100      	bne.n	80003c4 <__aeabi_fadd+0xec>
 80003c2:	e0fc      	b.n	80005be <__aeabi_fadd+0x2e6>
 80003c4:	2eff      	cmp	r6, #255	; 0xff
 80003c6:	d000      	beq.n	80003ca <__aeabi_fadd+0xf2>
 80003c8:	e0b4      	b.n	8000534 <__aeabi_fadd+0x25c>
 80003ca:	000c      	movs	r4, r1
 80003cc:	4642      	mov	r2, r8
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d078      	beq.n	80004c4 <__aeabi_fadd+0x1ec>
 80003d2:	2080      	movs	r0, #128	; 0x80
 80003d4:	03c0      	lsls	r0, r0, #15
 80003d6:	4310      	orrs	r0, r2
 80003d8:	0242      	lsls	r2, r0, #9
 80003da:	0a53      	lsrs	r3, r2, #9
 80003dc:	469c      	mov	ip, r3
 80003de:	23ff      	movs	r3, #255	; 0xff
 80003e0:	e7d9      	b.n	8000396 <__aeabi_fadd+0xbe>
 80003e2:	1bb9      	subs	r1, r7, r6
 80003e4:	2900      	cmp	r1, #0
 80003e6:	dd71      	ble.n	80004cc <__aeabi_fadd+0x1f4>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d03f      	beq.n	800046c <__aeabi_fadd+0x194>
 80003ec:	2fff      	cmp	r7, #255	; 0xff
 80003ee:	d0ee      	beq.n	80003ce <__aeabi_fadd+0xf6>
 80003f0:	2380      	movs	r3, #128	; 0x80
 80003f2:	04db      	lsls	r3, r3, #19
 80003f4:	431d      	orrs	r5, r3
 80003f6:	2201      	movs	r2, #1
 80003f8:	291b      	cmp	r1, #27
 80003fa:	dc07      	bgt.n	800040c <__aeabi_fadd+0x134>
 80003fc:	002a      	movs	r2, r5
 80003fe:	2320      	movs	r3, #32
 8000400:	40ca      	lsrs	r2, r1
 8000402:	1a59      	subs	r1, r3, r1
 8000404:	408d      	lsls	r5, r1
 8000406:	1e6b      	subs	r3, r5, #1
 8000408:	419d      	sbcs	r5, r3
 800040a:	432a      	orrs	r2, r5
 800040c:	4452      	add	r2, sl
 800040e:	0153      	lsls	r3, r2, #5
 8000410:	d553      	bpl.n	80004ba <__aeabi_fadd+0x1e2>
 8000412:	3701      	adds	r7, #1
 8000414:	2fff      	cmp	r7, #255	; 0xff
 8000416:	d055      	beq.n	80004c4 <__aeabi_fadd+0x1ec>
 8000418:	2301      	movs	r3, #1
 800041a:	497b      	ldr	r1, [pc, #492]	; (8000608 <__aeabi_fadd+0x330>)
 800041c:	4013      	ands	r3, r2
 800041e:	0852      	lsrs	r2, r2, #1
 8000420:	400a      	ands	r2, r1
 8000422:	431a      	orrs	r2, r3
 8000424:	e7a5      	b.n	8000372 <__aeabi_fadd+0x9a>
 8000426:	2d00      	cmp	r5, #0
 8000428:	d02c      	beq.n	8000484 <__aeabi_fadd+0x1ac>
 800042a:	2301      	movs	r3, #1
 800042c:	425b      	negs	r3, r3
 800042e:	469c      	mov	ip, r3
 8000430:	44e1      	add	r9, ip
 8000432:	464b      	mov	r3, r9
 8000434:	2b00      	cmp	r3, #0
 8000436:	d100      	bne.n	800043a <__aeabi_fadd+0x162>
 8000438:	e0ad      	b.n	8000596 <__aeabi_fadd+0x2be>
 800043a:	2fff      	cmp	r7, #255	; 0xff
 800043c:	d000      	beq.n	8000440 <__aeabi_fadd+0x168>
 800043e:	e76e      	b.n	800031e <__aeabi_fadd+0x46>
 8000440:	e7c5      	b.n	80003ce <__aeabi_fadd+0xf6>
 8000442:	20fe      	movs	r0, #254	; 0xfe
 8000444:	1c7e      	adds	r6, r7, #1
 8000446:	4230      	tst	r0, r6
 8000448:	d160      	bne.n	800050c <__aeabi_fadd+0x234>
 800044a:	2f00      	cmp	r7, #0
 800044c:	d000      	beq.n	8000450 <__aeabi_fadd+0x178>
 800044e:	e093      	b.n	8000578 <__aeabi_fadd+0x2a0>
 8000450:	4652      	mov	r2, sl
 8000452:	2a00      	cmp	r2, #0
 8000454:	d100      	bne.n	8000458 <__aeabi_fadd+0x180>
 8000456:	e0b6      	b.n	80005c6 <__aeabi_fadd+0x2ee>
 8000458:	2d00      	cmp	r5, #0
 800045a:	d09c      	beq.n	8000396 <__aeabi_fadd+0xbe>
 800045c:	1b52      	subs	r2, r2, r5
 800045e:	0150      	lsls	r0, r2, #5
 8000460:	d400      	bmi.n	8000464 <__aeabi_fadd+0x18c>
 8000462:	e0c3      	b.n	80005ec <__aeabi_fadd+0x314>
 8000464:	4653      	mov	r3, sl
 8000466:	000c      	movs	r4, r1
 8000468:	1aea      	subs	r2, r5, r3
 800046a:	e782      	b.n	8000372 <__aeabi_fadd+0x9a>
 800046c:	2d00      	cmp	r5, #0
 800046e:	d009      	beq.n	8000484 <__aeabi_fadd+0x1ac>
 8000470:	3901      	subs	r1, #1
 8000472:	2900      	cmp	r1, #0
 8000474:	d100      	bne.n	8000478 <__aeabi_fadd+0x1a0>
 8000476:	e08b      	b.n	8000590 <__aeabi_fadd+0x2b8>
 8000478:	2fff      	cmp	r7, #255	; 0xff
 800047a:	d1bc      	bne.n	80003f6 <__aeabi_fadd+0x11e>
 800047c:	e7a7      	b.n	80003ce <__aeabi_fadd+0xf6>
 800047e:	000c      	movs	r4, r1
 8000480:	4642      	mov	r2, r8
 8000482:	0037      	movs	r7, r6
 8000484:	2fff      	cmp	r7, #255	; 0xff
 8000486:	d0a2      	beq.n	80003ce <__aeabi_fadd+0xf6>
 8000488:	0252      	lsls	r2, r2, #9
 800048a:	0a53      	lsrs	r3, r2, #9
 800048c:	469c      	mov	ip, r3
 800048e:	b2fb      	uxtb	r3, r7
 8000490:	e781      	b.n	8000396 <__aeabi_fadd+0xbe>
 8000492:	21fe      	movs	r1, #254	; 0xfe
 8000494:	3701      	adds	r7, #1
 8000496:	4239      	tst	r1, r7
 8000498:	d165      	bne.n	8000566 <__aeabi_fadd+0x28e>
 800049a:	2b00      	cmp	r3, #0
 800049c:	d17e      	bne.n	800059c <__aeabi_fadd+0x2c4>
 800049e:	2800      	cmp	r0, #0
 80004a0:	d100      	bne.n	80004a4 <__aeabi_fadd+0x1cc>
 80004a2:	e0aa      	b.n	80005fa <__aeabi_fadd+0x322>
 80004a4:	2d00      	cmp	r5, #0
 80004a6:	d100      	bne.n	80004aa <__aeabi_fadd+0x1d2>
 80004a8:	e775      	b.n	8000396 <__aeabi_fadd+0xbe>
 80004aa:	002a      	movs	r2, r5
 80004ac:	4452      	add	r2, sl
 80004ae:	2700      	movs	r7, #0
 80004b0:	0153      	lsls	r3, r2, #5
 80004b2:	d502      	bpl.n	80004ba <__aeabi_fadd+0x1e2>
 80004b4:	4b55      	ldr	r3, [pc, #340]	; (800060c <__aeabi_fadd+0x334>)
 80004b6:	3701      	adds	r7, #1
 80004b8:	401a      	ands	r2, r3
 80004ba:	0753      	lsls	r3, r2, #29
 80004bc:	d000      	beq.n	80004c0 <__aeabi_fadd+0x1e8>
 80004be:	e75a      	b.n	8000376 <__aeabi_fadd+0x9e>
 80004c0:	08d2      	lsrs	r2, r2, #3
 80004c2:	e7df      	b.n	8000484 <__aeabi_fadd+0x1ac>
 80004c4:	2200      	movs	r2, #0
 80004c6:	23ff      	movs	r3, #255	; 0xff
 80004c8:	4694      	mov	ip, r2
 80004ca:	e764      	b.n	8000396 <__aeabi_fadd+0xbe>
 80004cc:	2900      	cmp	r1, #0
 80004ce:	d0e0      	beq.n	8000492 <__aeabi_fadd+0x1ba>
 80004d0:	1bf3      	subs	r3, r6, r7
 80004d2:	2f00      	cmp	r7, #0
 80004d4:	d03e      	beq.n	8000554 <__aeabi_fadd+0x27c>
 80004d6:	2eff      	cmp	r6, #255	; 0xff
 80004d8:	d100      	bne.n	80004dc <__aeabi_fadd+0x204>
 80004da:	e777      	b.n	80003cc <__aeabi_fadd+0xf4>
 80004dc:	2280      	movs	r2, #128	; 0x80
 80004de:	0001      	movs	r1, r0
 80004e0:	04d2      	lsls	r2, r2, #19
 80004e2:	4311      	orrs	r1, r2
 80004e4:	468a      	mov	sl, r1
 80004e6:	2201      	movs	r2, #1
 80004e8:	2b1b      	cmp	r3, #27
 80004ea:	dc08      	bgt.n	80004fe <__aeabi_fadd+0x226>
 80004ec:	4652      	mov	r2, sl
 80004ee:	2120      	movs	r1, #32
 80004f0:	4650      	mov	r0, sl
 80004f2:	40da      	lsrs	r2, r3
 80004f4:	1acb      	subs	r3, r1, r3
 80004f6:	4098      	lsls	r0, r3
 80004f8:	1e43      	subs	r3, r0, #1
 80004fa:	4198      	sbcs	r0, r3
 80004fc:	4302      	orrs	r2, r0
 80004fe:	0037      	movs	r7, r6
 8000500:	1952      	adds	r2, r2, r5
 8000502:	e784      	b.n	800040e <__aeabi_fadd+0x136>
 8000504:	4a41      	ldr	r2, [pc, #260]	; (800060c <__aeabi_fadd+0x334>)
 8000506:	1a3f      	subs	r7, r7, r0
 8000508:	4032      	ands	r2, r6
 800050a:	e732      	b.n	8000372 <__aeabi_fadd+0x9a>
 800050c:	4653      	mov	r3, sl
 800050e:	1b5e      	subs	r6, r3, r5
 8000510:	0173      	lsls	r3, r6, #5
 8000512:	d42d      	bmi.n	8000570 <__aeabi_fadd+0x298>
 8000514:	2e00      	cmp	r6, #0
 8000516:	d000      	beq.n	800051a <__aeabi_fadd+0x242>
 8000518:	e717      	b.n	800034a <__aeabi_fadd+0x72>
 800051a:	2200      	movs	r2, #0
 800051c:	2400      	movs	r4, #0
 800051e:	2300      	movs	r3, #0
 8000520:	4694      	mov	ip, r2
 8000522:	e738      	b.n	8000396 <__aeabi_fadd+0xbe>
 8000524:	2eff      	cmp	r6, #255	; 0xff
 8000526:	d100      	bne.n	800052a <__aeabi_fadd+0x252>
 8000528:	e74f      	b.n	80003ca <__aeabi_fadd+0xf2>
 800052a:	2280      	movs	r2, #128	; 0x80
 800052c:	4650      	mov	r0, sl
 800052e:	04d2      	lsls	r2, r2, #19
 8000530:	4310      	orrs	r0, r2
 8000532:	4682      	mov	sl, r0
 8000534:	2201      	movs	r2, #1
 8000536:	2b1b      	cmp	r3, #27
 8000538:	dc08      	bgt.n	800054c <__aeabi_fadd+0x274>
 800053a:	4652      	mov	r2, sl
 800053c:	2420      	movs	r4, #32
 800053e:	4650      	mov	r0, sl
 8000540:	40da      	lsrs	r2, r3
 8000542:	1ae3      	subs	r3, r4, r3
 8000544:	4098      	lsls	r0, r3
 8000546:	1e43      	subs	r3, r0, #1
 8000548:	4198      	sbcs	r0, r3
 800054a:	4302      	orrs	r2, r0
 800054c:	000c      	movs	r4, r1
 800054e:	0037      	movs	r7, r6
 8000550:	1aaa      	subs	r2, r5, r2
 8000552:	e6f5      	b.n	8000340 <__aeabi_fadd+0x68>
 8000554:	2800      	cmp	r0, #0
 8000556:	d093      	beq.n	8000480 <__aeabi_fadd+0x1a8>
 8000558:	3b01      	subs	r3, #1
 800055a:	2b00      	cmp	r3, #0
 800055c:	d04f      	beq.n	80005fe <__aeabi_fadd+0x326>
 800055e:	2eff      	cmp	r6, #255	; 0xff
 8000560:	d1c1      	bne.n	80004e6 <__aeabi_fadd+0x20e>
 8000562:	4642      	mov	r2, r8
 8000564:	e733      	b.n	80003ce <__aeabi_fadd+0xf6>
 8000566:	2fff      	cmp	r7, #255	; 0xff
 8000568:	d0ac      	beq.n	80004c4 <__aeabi_fadd+0x1ec>
 800056a:	4455      	add	r5, sl
 800056c:	086a      	lsrs	r2, r5, #1
 800056e:	e7a4      	b.n	80004ba <__aeabi_fadd+0x1e2>
 8000570:	4653      	mov	r3, sl
 8000572:	000c      	movs	r4, r1
 8000574:	1aee      	subs	r6, r5, r3
 8000576:	e6e8      	b.n	800034a <__aeabi_fadd+0x72>
 8000578:	4653      	mov	r3, sl
 800057a:	2b00      	cmp	r3, #0
 800057c:	d128      	bne.n	80005d0 <__aeabi_fadd+0x2f8>
 800057e:	2d00      	cmp	r5, #0
 8000580:	d000      	beq.n	8000584 <__aeabi_fadd+0x2ac>
 8000582:	e722      	b.n	80003ca <__aeabi_fadd+0xf2>
 8000584:	2380      	movs	r3, #128	; 0x80
 8000586:	03db      	lsls	r3, r3, #15
 8000588:	469c      	mov	ip, r3
 800058a:	2400      	movs	r4, #0
 800058c:	23ff      	movs	r3, #255	; 0xff
 800058e:	e702      	b.n	8000396 <__aeabi_fadd+0xbe>
 8000590:	002a      	movs	r2, r5
 8000592:	4452      	add	r2, sl
 8000594:	e73b      	b.n	800040e <__aeabi_fadd+0x136>
 8000596:	4653      	mov	r3, sl
 8000598:	1b5a      	subs	r2, r3, r5
 800059a:	e6d1      	b.n	8000340 <__aeabi_fadd+0x68>
 800059c:	2800      	cmp	r0, #0
 800059e:	d100      	bne.n	80005a2 <__aeabi_fadd+0x2ca>
 80005a0:	e714      	b.n	80003cc <__aeabi_fadd+0xf4>
 80005a2:	2d00      	cmp	r5, #0
 80005a4:	d100      	bne.n	80005a8 <__aeabi_fadd+0x2d0>
 80005a6:	e712      	b.n	80003ce <__aeabi_fadd+0xf6>
 80005a8:	2380      	movs	r3, #128	; 0x80
 80005aa:	03db      	lsls	r3, r3, #15
 80005ac:	421a      	tst	r2, r3
 80005ae:	d100      	bne.n	80005b2 <__aeabi_fadd+0x2da>
 80005b0:	e70d      	b.n	80003ce <__aeabi_fadd+0xf6>
 80005b2:	4641      	mov	r1, r8
 80005b4:	4219      	tst	r1, r3
 80005b6:	d000      	beq.n	80005ba <__aeabi_fadd+0x2e2>
 80005b8:	e709      	b.n	80003ce <__aeabi_fadd+0xf6>
 80005ba:	4642      	mov	r2, r8
 80005bc:	e707      	b.n	80003ce <__aeabi_fadd+0xf6>
 80005be:	000c      	movs	r4, r1
 80005c0:	0037      	movs	r7, r6
 80005c2:	1aaa      	subs	r2, r5, r2
 80005c4:	e6bc      	b.n	8000340 <__aeabi_fadd+0x68>
 80005c6:	2d00      	cmp	r5, #0
 80005c8:	d013      	beq.n	80005f2 <__aeabi_fadd+0x31a>
 80005ca:	000c      	movs	r4, r1
 80005cc:	46c4      	mov	ip, r8
 80005ce:	e6e2      	b.n	8000396 <__aeabi_fadd+0xbe>
 80005d0:	2d00      	cmp	r5, #0
 80005d2:	d100      	bne.n	80005d6 <__aeabi_fadd+0x2fe>
 80005d4:	e6fb      	b.n	80003ce <__aeabi_fadd+0xf6>
 80005d6:	2380      	movs	r3, #128	; 0x80
 80005d8:	03db      	lsls	r3, r3, #15
 80005da:	421a      	tst	r2, r3
 80005dc:	d100      	bne.n	80005e0 <__aeabi_fadd+0x308>
 80005de:	e6f6      	b.n	80003ce <__aeabi_fadd+0xf6>
 80005e0:	4640      	mov	r0, r8
 80005e2:	4218      	tst	r0, r3
 80005e4:	d000      	beq.n	80005e8 <__aeabi_fadd+0x310>
 80005e6:	e6f2      	b.n	80003ce <__aeabi_fadd+0xf6>
 80005e8:	000c      	movs	r4, r1
 80005ea:	e6ef      	b.n	80003cc <__aeabi_fadd+0xf4>
 80005ec:	2a00      	cmp	r2, #0
 80005ee:	d000      	beq.n	80005f2 <__aeabi_fadd+0x31a>
 80005f0:	e763      	b.n	80004ba <__aeabi_fadd+0x1e2>
 80005f2:	2200      	movs	r2, #0
 80005f4:	2400      	movs	r4, #0
 80005f6:	4694      	mov	ip, r2
 80005f8:	e6cd      	b.n	8000396 <__aeabi_fadd+0xbe>
 80005fa:	46c4      	mov	ip, r8
 80005fc:	e6cb      	b.n	8000396 <__aeabi_fadd+0xbe>
 80005fe:	002a      	movs	r2, r5
 8000600:	0037      	movs	r7, r6
 8000602:	4452      	add	r2, sl
 8000604:	e703      	b.n	800040e <__aeabi_fadd+0x136>
 8000606:	46c0      	nop			; (mov r8, r8)
 8000608:	7dffffff 	.word	0x7dffffff
 800060c:	fbffffff 	.word	0xfbffffff

08000610 <__aeabi_fdiv>:
 8000610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000612:	464f      	mov	r7, r9
 8000614:	4646      	mov	r6, r8
 8000616:	46d6      	mov	lr, sl
 8000618:	0245      	lsls	r5, r0, #9
 800061a:	b5c0      	push	{r6, r7, lr}
 800061c:	0047      	lsls	r7, r0, #1
 800061e:	1c0c      	adds	r4, r1, #0
 8000620:	0a6d      	lsrs	r5, r5, #9
 8000622:	0e3f      	lsrs	r7, r7, #24
 8000624:	0fc6      	lsrs	r6, r0, #31
 8000626:	2f00      	cmp	r7, #0
 8000628:	d066      	beq.n	80006f8 <__aeabi_fdiv+0xe8>
 800062a:	2fff      	cmp	r7, #255	; 0xff
 800062c:	d06c      	beq.n	8000708 <__aeabi_fdiv+0xf8>
 800062e:	2300      	movs	r3, #0
 8000630:	00ea      	lsls	r2, r5, #3
 8000632:	2580      	movs	r5, #128	; 0x80
 8000634:	4699      	mov	r9, r3
 8000636:	469a      	mov	sl, r3
 8000638:	04ed      	lsls	r5, r5, #19
 800063a:	4315      	orrs	r5, r2
 800063c:	3f7f      	subs	r7, #127	; 0x7f
 800063e:	0260      	lsls	r0, r4, #9
 8000640:	0061      	lsls	r1, r4, #1
 8000642:	0a43      	lsrs	r3, r0, #9
 8000644:	4698      	mov	r8, r3
 8000646:	0e09      	lsrs	r1, r1, #24
 8000648:	0fe4      	lsrs	r4, r4, #31
 800064a:	2900      	cmp	r1, #0
 800064c:	d048      	beq.n	80006e0 <__aeabi_fdiv+0xd0>
 800064e:	29ff      	cmp	r1, #255	; 0xff
 8000650:	d010      	beq.n	8000674 <__aeabi_fdiv+0x64>
 8000652:	2280      	movs	r2, #128	; 0x80
 8000654:	00d8      	lsls	r0, r3, #3
 8000656:	04d2      	lsls	r2, r2, #19
 8000658:	4302      	orrs	r2, r0
 800065a:	4690      	mov	r8, r2
 800065c:	2000      	movs	r0, #0
 800065e:	397f      	subs	r1, #127	; 0x7f
 8000660:	464a      	mov	r2, r9
 8000662:	0033      	movs	r3, r6
 8000664:	1a7f      	subs	r7, r7, r1
 8000666:	4302      	orrs	r2, r0
 8000668:	496c      	ldr	r1, [pc, #432]	; (800081c <__aeabi_fdiv+0x20c>)
 800066a:	0092      	lsls	r2, r2, #2
 800066c:	588a      	ldr	r2, [r1, r2]
 800066e:	4063      	eors	r3, r4
 8000670:	b2db      	uxtb	r3, r3
 8000672:	4697      	mov	pc, r2
 8000674:	2b00      	cmp	r3, #0
 8000676:	d16d      	bne.n	8000754 <__aeabi_fdiv+0x144>
 8000678:	2002      	movs	r0, #2
 800067a:	3fff      	subs	r7, #255	; 0xff
 800067c:	e033      	b.n	80006e6 <__aeabi_fdiv+0xd6>
 800067e:	2300      	movs	r3, #0
 8000680:	4698      	mov	r8, r3
 8000682:	0026      	movs	r6, r4
 8000684:	4645      	mov	r5, r8
 8000686:	4682      	mov	sl, r0
 8000688:	4653      	mov	r3, sl
 800068a:	2b02      	cmp	r3, #2
 800068c:	d100      	bne.n	8000690 <__aeabi_fdiv+0x80>
 800068e:	e07f      	b.n	8000790 <__aeabi_fdiv+0x180>
 8000690:	2b03      	cmp	r3, #3
 8000692:	d100      	bne.n	8000696 <__aeabi_fdiv+0x86>
 8000694:	e094      	b.n	80007c0 <__aeabi_fdiv+0x1b0>
 8000696:	2b01      	cmp	r3, #1
 8000698:	d017      	beq.n	80006ca <__aeabi_fdiv+0xba>
 800069a:	0038      	movs	r0, r7
 800069c:	307f      	adds	r0, #127	; 0x7f
 800069e:	2800      	cmp	r0, #0
 80006a0:	dd5f      	ble.n	8000762 <__aeabi_fdiv+0x152>
 80006a2:	076b      	lsls	r3, r5, #29
 80006a4:	d004      	beq.n	80006b0 <__aeabi_fdiv+0xa0>
 80006a6:	230f      	movs	r3, #15
 80006a8:	402b      	ands	r3, r5
 80006aa:	2b04      	cmp	r3, #4
 80006ac:	d000      	beq.n	80006b0 <__aeabi_fdiv+0xa0>
 80006ae:	3504      	adds	r5, #4
 80006b0:	012b      	lsls	r3, r5, #4
 80006b2:	d503      	bpl.n	80006bc <__aeabi_fdiv+0xac>
 80006b4:	0038      	movs	r0, r7
 80006b6:	4b5a      	ldr	r3, [pc, #360]	; (8000820 <__aeabi_fdiv+0x210>)
 80006b8:	3080      	adds	r0, #128	; 0x80
 80006ba:	401d      	ands	r5, r3
 80006bc:	28fe      	cmp	r0, #254	; 0xfe
 80006be:	dc67      	bgt.n	8000790 <__aeabi_fdiv+0x180>
 80006c0:	01ad      	lsls	r5, r5, #6
 80006c2:	0a6d      	lsrs	r5, r5, #9
 80006c4:	b2c0      	uxtb	r0, r0
 80006c6:	e002      	b.n	80006ce <__aeabi_fdiv+0xbe>
 80006c8:	001e      	movs	r6, r3
 80006ca:	2000      	movs	r0, #0
 80006cc:	2500      	movs	r5, #0
 80006ce:	05c0      	lsls	r0, r0, #23
 80006d0:	4328      	orrs	r0, r5
 80006d2:	07f6      	lsls	r6, r6, #31
 80006d4:	4330      	orrs	r0, r6
 80006d6:	bce0      	pop	{r5, r6, r7}
 80006d8:	46ba      	mov	sl, r7
 80006da:	46b1      	mov	r9, r6
 80006dc:	46a8      	mov	r8, r5
 80006de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d12b      	bne.n	800073c <__aeabi_fdiv+0x12c>
 80006e4:	2001      	movs	r0, #1
 80006e6:	464a      	mov	r2, r9
 80006e8:	0033      	movs	r3, r6
 80006ea:	494e      	ldr	r1, [pc, #312]	; (8000824 <__aeabi_fdiv+0x214>)
 80006ec:	4302      	orrs	r2, r0
 80006ee:	0092      	lsls	r2, r2, #2
 80006f0:	588a      	ldr	r2, [r1, r2]
 80006f2:	4063      	eors	r3, r4
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	4697      	mov	pc, r2
 80006f8:	2d00      	cmp	r5, #0
 80006fa:	d113      	bne.n	8000724 <__aeabi_fdiv+0x114>
 80006fc:	2304      	movs	r3, #4
 80006fe:	4699      	mov	r9, r3
 8000700:	3b03      	subs	r3, #3
 8000702:	2700      	movs	r7, #0
 8000704:	469a      	mov	sl, r3
 8000706:	e79a      	b.n	800063e <__aeabi_fdiv+0x2e>
 8000708:	2d00      	cmp	r5, #0
 800070a:	d105      	bne.n	8000718 <__aeabi_fdiv+0x108>
 800070c:	2308      	movs	r3, #8
 800070e:	4699      	mov	r9, r3
 8000710:	3b06      	subs	r3, #6
 8000712:	27ff      	movs	r7, #255	; 0xff
 8000714:	469a      	mov	sl, r3
 8000716:	e792      	b.n	800063e <__aeabi_fdiv+0x2e>
 8000718:	230c      	movs	r3, #12
 800071a:	4699      	mov	r9, r3
 800071c:	3b09      	subs	r3, #9
 800071e:	27ff      	movs	r7, #255	; 0xff
 8000720:	469a      	mov	sl, r3
 8000722:	e78c      	b.n	800063e <__aeabi_fdiv+0x2e>
 8000724:	0028      	movs	r0, r5
 8000726:	f000 fcc1 	bl	80010ac <__clzsi2>
 800072a:	2776      	movs	r7, #118	; 0x76
 800072c:	1f43      	subs	r3, r0, #5
 800072e:	409d      	lsls	r5, r3
 8000730:	2300      	movs	r3, #0
 8000732:	427f      	negs	r7, r7
 8000734:	4699      	mov	r9, r3
 8000736:	469a      	mov	sl, r3
 8000738:	1a3f      	subs	r7, r7, r0
 800073a:	e780      	b.n	800063e <__aeabi_fdiv+0x2e>
 800073c:	0018      	movs	r0, r3
 800073e:	f000 fcb5 	bl	80010ac <__clzsi2>
 8000742:	4642      	mov	r2, r8
 8000744:	1f43      	subs	r3, r0, #5
 8000746:	2176      	movs	r1, #118	; 0x76
 8000748:	409a      	lsls	r2, r3
 800074a:	4249      	negs	r1, r1
 800074c:	1a09      	subs	r1, r1, r0
 800074e:	4690      	mov	r8, r2
 8000750:	2000      	movs	r0, #0
 8000752:	e785      	b.n	8000660 <__aeabi_fdiv+0x50>
 8000754:	21ff      	movs	r1, #255	; 0xff
 8000756:	2003      	movs	r0, #3
 8000758:	e782      	b.n	8000660 <__aeabi_fdiv+0x50>
 800075a:	001e      	movs	r6, r3
 800075c:	20ff      	movs	r0, #255	; 0xff
 800075e:	2500      	movs	r5, #0
 8000760:	e7b5      	b.n	80006ce <__aeabi_fdiv+0xbe>
 8000762:	2301      	movs	r3, #1
 8000764:	1a1b      	subs	r3, r3, r0
 8000766:	2b1b      	cmp	r3, #27
 8000768:	dcaf      	bgt.n	80006ca <__aeabi_fdiv+0xba>
 800076a:	379e      	adds	r7, #158	; 0x9e
 800076c:	0029      	movs	r1, r5
 800076e:	40bd      	lsls	r5, r7
 8000770:	40d9      	lsrs	r1, r3
 8000772:	1e6a      	subs	r2, r5, #1
 8000774:	4195      	sbcs	r5, r2
 8000776:	430d      	orrs	r5, r1
 8000778:	076b      	lsls	r3, r5, #29
 800077a:	d004      	beq.n	8000786 <__aeabi_fdiv+0x176>
 800077c:	230f      	movs	r3, #15
 800077e:	402b      	ands	r3, r5
 8000780:	2b04      	cmp	r3, #4
 8000782:	d000      	beq.n	8000786 <__aeabi_fdiv+0x176>
 8000784:	3504      	adds	r5, #4
 8000786:	016b      	lsls	r3, r5, #5
 8000788:	d544      	bpl.n	8000814 <__aeabi_fdiv+0x204>
 800078a:	2001      	movs	r0, #1
 800078c:	2500      	movs	r5, #0
 800078e:	e79e      	b.n	80006ce <__aeabi_fdiv+0xbe>
 8000790:	20ff      	movs	r0, #255	; 0xff
 8000792:	2500      	movs	r5, #0
 8000794:	e79b      	b.n	80006ce <__aeabi_fdiv+0xbe>
 8000796:	2580      	movs	r5, #128	; 0x80
 8000798:	2600      	movs	r6, #0
 800079a:	20ff      	movs	r0, #255	; 0xff
 800079c:	03ed      	lsls	r5, r5, #15
 800079e:	e796      	b.n	80006ce <__aeabi_fdiv+0xbe>
 80007a0:	2300      	movs	r3, #0
 80007a2:	4698      	mov	r8, r3
 80007a4:	2080      	movs	r0, #128	; 0x80
 80007a6:	03c0      	lsls	r0, r0, #15
 80007a8:	4205      	tst	r5, r0
 80007aa:	d009      	beq.n	80007c0 <__aeabi_fdiv+0x1b0>
 80007ac:	4643      	mov	r3, r8
 80007ae:	4203      	tst	r3, r0
 80007b0:	d106      	bne.n	80007c0 <__aeabi_fdiv+0x1b0>
 80007b2:	4645      	mov	r5, r8
 80007b4:	4305      	orrs	r5, r0
 80007b6:	026d      	lsls	r5, r5, #9
 80007b8:	0026      	movs	r6, r4
 80007ba:	20ff      	movs	r0, #255	; 0xff
 80007bc:	0a6d      	lsrs	r5, r5, #9
 80007be:	e786      	b.n	80006ce <__aeabi_fdiv+0xbe>
 80007c0:	2080      	movs	r0, #128	; 0x80
 80007c2:	03c0      	lsls	r0, r0, #15
 80007c4:	4305      	orrs	r5, r0
 80007c6:	026d      	lsls	r5, r5, #9
 80007c8:	20ff      	movs	r0, #255	; 0xff
 80007ca:	0a6d      	lsrs	r5, r5, #9
 80007cc:	e77f      	b.n	80006ce <__aeabi_fdiv+0xbe>
 80007ce:	4641      	mov	r1, r8
 80007d0:	016a      	lsls	r2, r5, #5
 80007d2:	0148      	lsls	r0, r1, #5
 80007d4:	4282      	cmp	r2, r0
 80007d6:	d219      	bcs.n	800080c <__aeabi_fdiv+0x1fc>
 80007d8:	211b      	movs	r1, #27
 80007da:	2500      	movs	r5, #0
 80007dc:	3f01      	subs	r7, #1
 80007de:	2601      	movs	r6, #1
 80007e0:	0014      	movs	r4, r2
 80007e2:	006d      	lsls	r5, r5, #1
 80007e4:	0052      	lsls	r2, r2, #1
 80007e6:	2c00      	cmp	r4, #0
 80007e8:	db01      	blt.n	80007ee <__aeabi_fdiv+0x1de>
 80007ea:	4290      	cmp	r0, r2
 80007ec:	d801      	bhi.n	80007f2 <__aeabi_fdiv+0x1e2>
 80007ee:	1a12      	subs	r2, r2, r0
 80007f0:	4335      	orrs	r5, r6
 80007f2:	3901      	subs	r1, #1
 80007f4:	2900      	cmp	r1, #0
 80007f6:	d1f3      	bne.n	80007e0 <__aeabi_fdiv+0x1d0>
 80007f8:	1e50      	subs	r0, r2, #1
 80007fa:	4182      	sbcs	r2, r0
 80007fc:	0038      	movs	r0, r7
 80007fe:	307f      	adds	r0, #127	; 0x7f
 8000800:	001e      	movs	r6, r3
 8000802:	4315      	orrs	r5, r2
 8000804:	2800      	cmp	r0, #0
 8000806:	dd00      	ble.n	800080a <__aeabi_fdiv+0x1fa>
 8000808:	e74b      	b.n	80006a2 <__aeabi_fdiv+0x92>
 800080a:	e7aa      	b.n	8000762 <__aeabi_fdiv+0x152>
 800080c:	211a      	movs	r1, #26
 800080e:	2501      	movs	r5, #1
 8000810:	1a12      	subs	r2, r2, r0
 8000812:	e7e4      	b.n	80007de <__aeabi_fdiv+0x1ce>
 8000814:	01ad      	lsls	r5, r5, #6
 8000816:	2000      	movs	r0, #0
 8000818:	0a6d      	lsrs	r5, r5, #9
 800081a:	e758      	b.n	80006ce <__aeabi_fdiv+0xbe>
 800081c:	0800969c 	.word	0x0800969c
 8000820:	f7ffffff 	.word	0xf7ffffff
 8000824:	080096dc 	.word	0x080096dc

08000828 <__eqsf2>:
 8000828:	b570      	push	{r4, r5, r6, lr}
 800082a:	0042      	lsls	r2, r0, #1
 800082c:	024e      	lsls	r6, r1, #9
 800082e:	004c      	lsls	r4, r1, #1
 8000830:	0245      	lsls	r5, r0, #9
 8000832:	0a6d      	lsrs	r5, r5, #9
 8000834:	0e12      	lsrs	r2, r2, #24
 8000836:	0fc3      	lsrs	r3, r0, #31
 8000838:	0a76      	lsrs	r6, r6, #9
 800083a:	0e24      	lsrs	r4, r4, #24
 800083c:	0fc9      	lsrs	r1, r1, #31
 800083e:	2aff      	cmp	r2, #255	; 0xff
 8000840:	d00f      	beq.n	8000862 <__eqsf2+0x3a>
 8000842:	2cff      	cmp	r4, #255	; 0xff
 8000844:	d011      	beq.n	800086a <__eqsf2+0x42>
 8000846:	2001      	movs	r0, #1
 8000848:	42a2      	cmp	r2, r4
 800084a:	d000      	beq.n	800084e <__eqsf2+0x26>
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	42b5      	cmp	r5, r6
 8000850:	d1fc      	bne.n	800084c <__eqsf2+0x24>
 8000852:	428b      	cmp	r3, r1
 8000854:	d00d      	beq.n	8000872 <__eqsf2+0x4a>
 8000856:	2a00      	cmp	r2, #0
 8000858:	d1f8      	bne.n	800084c <__eqsf2+0x24>
 800085a:	0028      	movs	r0, r5
 800085c:	1e45      	subs	r5, r0, #1
 800085e:	41a8      	sbcs	r0, r5
 8000860:	e7f4      	b.n	800084c <__eqsf2+0x24>
 8000862:	2001      	movs	r0, #1
 8000864:	2d00      	cmp	r5, #0
 8000866:	d1f1      	bne.n	800084c <__eqsf2+0x24>
 8000868:	e7eb      	b.n	8000842 <__eqsf2+0x1a>
 800086a:	2001      	movs	r0, #1
 800086c:	2e00      	cmp	r6, #0
 800086e:	d1ed      	bne.n	800084c <__eqsf2+0x24>
 8000870:	e7e9      	b.n	8000846 <__eqsf2+0x1e>
 8000872:	2000      	movs	r0, #0
 8000874:	e7ea      	b.n	800084c <__eqsf2+0x24>
 8000876:	46c0      	nop			; (mov r8, r8)

08000878 <__gesf2>:
 8000878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800087a:	0042      	lsls	r2, r0, #1
 800087c:	0246      	lsls	r6, r0, #9
 800087e:	024d      	lsls	r5, r1, #9
 8000880:	004c      	lsls	r4, r1, #1
 8000882:	0fc3      	lsrs	r3, r0, #31
 8000884:	0a76      	lsrs	r6, r6, #9
 8000886:	0e12      	lsrs	r2, r2, #24
 8000888:	0a6d      	lsrs	r5, r5, #9
 800088a:	0e24      	lsrs	r4, r4, #24
 800088c:	0fc8      	lsrs	r0, r1, #31
 800088e:	2aff      	cmp	r2, #255	; 0xff
 8000890:	d01f      	beq.n	80008d2 <__gesf2+0x5a>
 8000892:	2cff      	cmp	r4, #255	; 0xff
 8000894:	d010      	beq.n	80008b8 <__gesf2+0x40>
 8000896:	2a00      	cmp	r2, #0
 8000898:	d11f      	bne.n	80008da <__gesf2+0x62>
 800089a:	4271      	negs	r1, r6
 800089c:	4171      	adcs	r1, r6
 800089e:	2c00      	cmp	r4, #0
 80008a0:	d101      	bne.n	80008a6 <__gesf2+0x2e>
 80008a2:	2d00      	cmp	r5, #0
 80008a4:	d01e      	beq.n	80008e4 <__gesf2+0x6c>
 80008a6:	2900      	cmp	r1, #0
 80008a8:	d10e      	bne.n	80008c8 <__gesf2+0x50>
 80008aa:	4283      	cmp	r3, r0
 80008ac:	d01e      	beq.n	80008ec <__gesf2+0x74>
 80008ae:	2102      	movs	r1, #2
 80008b0:	1e58      	subs	r0, r3, #1
 80008b2:	4008      	ands	r0, r1
 80008b4:	3801      	subs	r0, #1
 80008b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008b8:	2d00      	cmp	r5, #0
 80008ba:	d126      	bne.n	800090a <__gesf2+0x92>
 80008bc:	2a00      	cmp	r2, #0
 80008be:	d1f4      	bne.n	80008aa <__gesf2+0x32>
 80008c0:	4271      	negs	r1, r6
 80008c2:	4171      	adcs	r1, r6
 80008c4:	2900      	cmp	r1, #0
 80008c6:	d0f0      	beq.n	80008aa <__gesf2+0x32>
 80008c8:	2800      	cmp	r0, #0
 80008ca:	d1f4      	bne.n	80008b6 <__gesf2+0x3e>
 80008cc:	2001      	movs	r0, #1
 80008ce:	4240      	negs	r0, r0
 80008d0:	e7f1      	b.n	80008b6 <__gesf2+0x3e>
 80008d2:	2e00      	cmp	r6, #0
 80008d4:	d119      	bne.n	800090a <__gesf2+0x92>
 80008d6:	2cff      	cmp	r4, #255	; 0xff
 80008d8:	d0ee      	beq.n	80008b8 <__gesf2+0x40>
 80008da:	2c00      	cmp	r4, #0
 80008dc:	d1e5      	bne.n	80008aa <__gesf2+0x32>
 80008de:	2d00      	cmp	r5, #0
 80008e0:	d1e3      	bne.n	80008aa <__gesf2+0x32>
 80008e2:	e7e4      	b.n	80008ae <__gesf2+0x36>
 80008e4:	2000      	movs	r0, #0
 80008e6:	2e00      	cmp	r6, #0
 80008e8:	d0e5      	beq.n	80008b6 <__gesf2+0x3e>
 80008ea:	e7e0      	b.n	80008ae <__gesf2+0x36>
 80008ec:	42a2      	cmp	r2, r4
 80008ee:	dc05      	bgt.n	80008fc <__gesf2+0x84>
 80008f0:	dbea      	blt.n	80008c8 <__gesf2+0x50>
 80008f2:	42ae      	cmp	r6, r5
 80008f4:	d802      	bhi.n	80008fc <__gesf2+0x84>
 80008f6:	d3e7      	bcc.n	80008c8 <__gesf2+0x50>
 80008f8:	2000      	movs	r0, #0
 80008fa:	e7dc      	b.n	80008b6 <__gesf2+0x3e>
 80008fc:	4241      	negs	r1, r0
 80008fe:	4141      	adcs	r1, r0
 8000900:	4248      	negs	r0, r1
 8000902:	2102      	movs	r1, #2
 8000904:	4008      	ands	r0, r1
 8000906:	3801      	subs	r0, #1
 8000908:	e7d5      	b.n	80008b6 <__gesf2+0x3e>
 800090a:	2002      	movs	r0, #2
 800090c:	4240      	negs	r0, r0
 800090e:	e7d2      	b.n	80008b6 <__gesf2+0x3e>

08000910 <__lesf2>:
 8000910:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000912:	0042      	lsls	r2, r0, #1
 8000914:	0246      	lsls	r6, r0, #9
 8000916:	024d      	lsls	r5, r1, #9
 8000918:	004c      	lsls	r4, r1, #1
 800091a:	0fc3      	lsrs	r3, r0, #31
 800091c:	0a76      	lsrs	r6, r6, #9
 800091e:	0e12      	lsrs	r2, r2, #24
 8000920:	0a6d      	lsrs	r5, r5, #9
 8000922:	0e24      	lsrs	r4, r4, #24
 8000924:	0fc8      	lsrs	r0, r1, #31
 8000926:	2aff      	cmp	r2, #255	; 0xff
 8000928:	d00d      	beq.n	8000946 <__lesf2+0x36>
 800092a:	2cff      	cmp	r4, #255	; 0xff
 800092c:	d00f      	beq.n	800094e <__lesf2+0x3e>
 800092e:	2a00      	cmp	r2, #0
 8000930:	d123      	bne.n	800097a <__lesf2+0x6a>
 8000932:	4271      	negs	r1, r6
 8000934:	4171      	adcs	r1, r6
 8000936:	2c00      	cmp	r4, #0
 8000938:	d10f      	bne.n	800095a <__lesf2+0x4a>
 800093a:	2d00      	cmp	r5, #0
 800093c:	d10d      	bne.n	800095a <__lesf2+0x4a>
 800093e:	2000      	movs	r0, #0
 8000940:	2e00      	cmp	r6, #0
 8000942:	d014      	beq.n	800096e <__lesf2+0x5e>
 8000944:	e00d      	b.n	8000962 <__lesf2+0x52>
 8000946:	2e00      	cmp	r6, #0
 8000948:	d110      	bne.n	800096c <__lesf2+0x5c>
 800094a:	2cff      	cmp	r4, #255	; 0xff
 800094c:	d115      	bne.n	800097a <__lesf2+0x6a>
 800094e:	2d00      	cmp	r5, #0
 8000950:	d10c      	bne.n	800096c <__lesf2+0x5c>
 8000952:	2a00      	cmp	r2, #0
 8000954:	d103      	bne.n	800095e <__lesf2+0x4e>
 8000956:	4271      	negs	r1, r6
 8000958:	4171      	adcs	r1, r6
 800095a:	2900      	cmp	r1, #0
 800095c:	d108      	bne.n	8000970 <__lesf2+0x60>
 800095e:	4283      	cmp	r3, r0
 8000960:	d010      	beq.n	8000984 <__lesf2+0x74>
 8000962:	2102      	movs	r1, #2
 8000964:	1e58      	subs	r0, r3, #1
 8000966:	4008      	ands	r0, r1
 8000968:	3801      	subs	r0, #1
 800096a:	e000      	b.n	800096e <__lesf2+0x5e>
 800096c:	2002      	movs	r0, #2
 800096e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000970:	2800      	cmp	r0, #0
 8000972:	d1fc      	bne.n	800096e <__lesf2+0x5e>
 8000974:	2001      	movs	r0, #1
 8000976:	4240      	negs	r0, r0
 8000978:	e7f9      	b.n	800096e <__lesf2+0x5e>
 800097a:	2c00      	cmp	r4, #0
 800097c:	d1ef      	bne.n	800095e <__lesf2+0x4e>
 800097e:	2d00      	cmp	r5, #0
 8000980:	d1ed      	bne.n	800095e <__lesf2+0x4e>
 8000982:	e7ee      	b.n	8000962 <__lesf2+0x52>
 8000984:	42a2      	cmp	r2, r4
 8000986:	dc05      	bgt.n	8000994 <__lesf2+0x84>
 8000988:	dbf2      	blt.n	8000970 <__lesf2+0x60>
 800098a:	42ae      	cmp	r6, r5
 800098c:	d802      	bhi.n	8000994 <__lesf2+0x84>
 800098e:	d3ef      	bcc.n	8000970 <__lesf2+0x60>
 8000990:	2000      	movs	r0, #0
 8000992:	e7ec      	b.n	800096e <__lesf2+0x5e>
 8000994:	4241      	negs	r1, r0
 8000996:	4141      	adcs	r1, r0
 8000998:	4248      	negs	r0, r1
 800099a:	2102      	movs	r1, #2
 800099c:	4008      	ands	r0, r1
 800099e:	3801      	subs	r0, #1
 80009a0:	e7e5      	b.n	800096e <__lesf2+0x5e>
 80009a2:	46c0      	nop			; (mov r8, r8)

080009a4 <__aeabi_fmul>:
 80009a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009a6:	4657      	mov	r7, sl
 80009a8:	464e      	mov	r6, r9
 80009aa:	4645      	mov	r5, r8
 80009ac:	46de      	mov	lr, fp
 80009ae:	0244      	lsls	r4, r0, #9
 80009b0:	b5e0      	push	{r5, r6, r7, lr}
 80009b2:	0045      	lsls	r5, r0, #1
 80009b4:	1c0f      	adds	r7, r1, #0
 80009b6:	0a64      	lsrs	r4, r4, #9
 80009b8:	0e2d      	lsrs	r5, r5, #24
 80009ba:	0fc6      	lsrs	r6, r0, #31
 80009bc:	2d00      	cmp	r5, #0
 80009be:	d047      	beq.n	8000a50 <__aeabi_fmul+0xac>
 80009c0:	2dff      	cmp	r5, #255	; 0xff
 80009c2:	d04d      	beq.n	8000a60 <__aeabi_fmul+0xbc>
 80009c4:	2300      	movs	r3, #0
 80009c6:	2080      	movs	r0, #128	; 0x80
 80009c8:	469a      	mov	sl, r3
 80009ca:	469b      	mov	fp, r3
 80009cc:	00e4      	lsls	r4, r4, #3
 80009ce:	04c0      	lsls	r0, r0, #19
 80009d0:	4304      	orrs	r4, r0
 80009d2:	3d7f      	subs	r5, #127	; 0x7f
 80009d4:	0278      	lsls	r0, r7, #9
 80009d6:	0a43      	lsrs	r3, r0, #9
 80009d8:	4699      	mov	r9, r3
 80009da:	007a      	lsls	r2, r7, #1
 80009dc:	0ffb      	lsrs	r3, r7, #31
 80009de:	4698      	mov	r8, r3
 80009e0:	0e12      	lsrs	r2, r2, #24
 80009e2:	464b      	mov	r3, r9
 80009e4:	d044      	beq.n	8000a70 <__aeabi_fmul+0xcc>
 80009e6:	2aff      	cmp	r2, #255	; 0xff
 80009e8:	d011      	beq.n	8000a0e <__aeabi_fmul+0x6a>
 80009ea:	00d8      	lsls	r0, r3, #3
 80009ec:	2380      	movs	r3, #128	; 0x80
 80009ee:	04db      	lsls	r3, r3, #19
 80009f0:	4303      	orrs	r3, r0
 80009f2:	4699      	mov	r9, r3
 80009f4:	2000      	movs	r0, #0
 80009f6:	3a7f      	subs	r2, #127	; 0x7f
 80009f8:	18ad      	adds	r5, r5, r2
 80009fa:	4647      	mov	r7, r8
 80009fc:	4653      	mov	r3, sl
 80009fe:	4077      	eors	r7, r6
 8000a00:	1c69      	adds	r1, r5, #1
 8000a02:	2b0f      	cmp	r3, #15
 8000a04:	d83f      	bhi.n	8000a86 <__aeabi_fmul+0xe2>
 8000a06:	4a72      	ldr	r2, [pc, #456]	; (8000bd0 <__aeabi_fmul+0x22c>)
 8000a08:	009b      	lsls	r3, r3, #2
 8000a0a:	58d3      	ldr	r3, [r2, r3]
 8000a0c:	469f      	mov	pc, r3
 8000a0e:	35ff      	adds	r5, #255	; 0xff
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d000      	beq.n	8000a16 <__aeabi_fmul+0x72>
 8000a14:	e079      	b.n	8000b0a <__aeabi_fmul+0x166>
 8000a16:	4652      	mov	r2, sl
 8000a18:	2302      	movs	r3, #2
 8000a1a:	431a      	orrs	r2, r3
 8000a1c:	4692      	mov	sl, r2
 8000a1e:	2002      	movs	r0, #2
 8000a20:	e7eb      	b.n	80009fa <__aeabi_fmul+0x56>
 8000a22:	4647      	mov	r7, r8
 8000a24:	464c      	mov	r4, r9
 8000a26:	4683      	mov	fp, r0
 8000a28:	465b      	mov	r3, fp
 8000a2a:	2b02      	cmp	r3, #2
 8000a2c:	d028      	beq.n	8000a80 <__aeabi_fmul+0xdc>
 8000a2e:	2b03      	cmp	r3, #3
 8000a30:	d100      	bne.n	8000a34 <__aeabi_fmul+0x90>
 8000a32:	e0c6      	b.n	8000bc2 <__aeabi_fmul+0x21e>
 8000a34:	2b01      	cmp	r3, #1
 8000a36:	d14f      	bne.n	8000ad8 <__aeabi_fmul+0x134>
 8000a38:	2000      	movs	r0, #0
 8000a3a:	2400      	movs	r4, #0
 8000a3c:	05c0      	lsls	r0, r0, #23
 8000a3e:	07ff      	lsls	r7, r7, #31
 8000a40:	4320      	orrs	r0, r4
 8000a42:	4338      	orrs	r0, r7
 8000a44:	bcf0      	pop	{r4, r5, r6, r7}
 8000a46:	46bb      	mov	fp, r7
 8000a48:	46b2      	mov	sl, r6
 8000a4a:	46a9      	mov	r9, r5
 8000a4c:	46a0      	mov	r8, r4
 8000a4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a50:	2c00      	cmp	r4, #0
 8000a52:	d171      	bne.n	8000b38 <__aeabi_fmul+0x194>
 8000a54:	2304      	movs	r3, #4
 8000a56:	469a      	mov	sl, r3
 8000a58:	3b03      	subs	r3, #3
 8000a5a:	2500      	movs	r5, #0
 8000a5c:	469b      	mov	fp, r3
 8000a5e:	e7b9      	b.n	80009d4 <__aeabi_fmul+0x30>
 8000a60:	2c00      	cmp	r4, #0
 8000a62:	d163      	bne.n	8000b2c <__aeabi_fmul+0x188>
 8000a64:	2308      	movs	r3, #8
 8000a66:	469a      	mov	sl, r3
 8000a68:	3b06      	subs	r3, #6
 8000a6a:	25ff      	movs	r5, #255	; 0xff
 8000a6c:	469b      	mov	fp, r3
 8000a6e:	e7b1      	b.n	80009d4 <__aeabi_fmul+0x30>
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d150      	bne.n	8000b16 <__aeabi_fmul+0x172>
 8000a74:	4652      	mov	r2, sl
 8000a76:	3301      	adds	r3, #1
 8000a78:	431a      	orrs	r2, r3
 8000a7a:	4692      	mov	sl, r2
 8000a7c:	2001      	movs	r0, #1
 8000a7e:	e7bc      	b.n	80009fa <__aeabi_fmul+0x56>
 8000a80:	20ff      	movs	r0, #255	; 0xff
 8000a82:	2400      	movs	r4, #0
 8000a84:	e7da      	b.n	8000a3c <__aeabi_fmul+0x98>
 8000a86:	4648      	mov	r0, r9
 8000a88:	0c26      	lsrs	r6, r4, #16
 8000a8a:	0424      	lsls	r4, r4, #16
 8000a8c:	0c22      	lsrs	r2, r4, #16
 8000a8e:	0404      	lsls	r4, r0, #16
 8000a90:	0c24      	lsrs	r4, r4, #16
 8000a92:	464b      	mov	r3, r9
 8000a94:	0020      	movs	r0, r4
 8000a96:	0c1b      	lsrs	r3, r3, #16
 8000a98:	4350      	muls	r0, r2
 8000a9a:	4374      	muls	r4, r6
 8000a9c:	435a      	muls	r2, r3
 8000a9e:	435e      	muls	r6, r3
 8000aa0:	1912      	adds	r2, r2, r4
 8000aa2:	0c03      	lsrs	r3, r0, #16
 8000aa4:	189b      	adds	r3, r3, r2
 8000aa6:	429c      	cmp	r4, r3
 8000aa8:	d903      	bls.n	8000ab2 <__aeabi_fmul+0x10e>
 8000aaa:	2280      	movs	r2, #128	; 0x80
 8000aac:	0252      	lsls	r2, r2, #9
 8000aae:	4694      	mov	ip, r2
 8000ab0:	4466      	add	r6, ip
 8000ab2:	0400      	lsls	r0, r0, #16
 8000ab4:	041a      	lsls	r2, r3, #16
 8000ab6:	0c00      	lsrs	r0, r0, #16
 8000ab8:	1812      	adds	r2, r2, r0
 8000aba:	0194      	lsls	r4, r2, #6
 8000abc:	1e60      	subs	r0, r4, #1
 8000abe:	4184      	sbcs	r4, r0
 8000ac0:	0c1b      	lsrs	r3, r3, #16
 8000ac2:	0e92      	lsrs	r2, r2, #26
 8000ac4:	199b      	adds	r3, r3, r6
 8000ac6:	4314      	orrs	r4, r2
 8000ac8:	019b      	lsls	r3, r3, #6
 8000aca:	431c      	orrs	r4, r3
 8000acc:	011b      	lsls	r3, r3, #4
 8000ace:	d572      	bpl.n	8000bb6 <__aeabi_fmul+0x212>
 8000ad0:	2001      	movs	r0, #1
 8000ad2:	0863      	lsrs	r3, r4, #1
 8000ad4:	4004      	ands	r4, r0
 8000ad6:	431c      	orrs	r4, r3
 8000ad8:	0008      	movs	r0, r1
 8000ada:	307f      	adds	r0, #127	; 0x7f
 8000adc:	2800      	cmp	r0, #0
 8000ade:	dd3c      	ble.n	8000b5a <__aeabi_fmul+0x1b6>
 8000ae0:	0763      	lsls	r3, r4, #29
 8000ae2:	d004      	beq.n	8000aee <__aeabi_fmul+0x14a>
 8000ae4:	230f      	movs	r3, #15
 8000ae6:	4023      	ands	r3, r4
 8000ae8:	2b04      	cmp	r3, #4
 8000aea:	d000      	beq.n	8000aee <__aeabi_fmul+0x14a>
 8000aec:	3404      	adds	r4, #4
 8000aee:	0123      	lsls	r3, r4, #4
 8000af0:	d503      	bpl.n	8000afa <__aeabi_fmul+0x156>
 8000af2:	3180      	adds	r1, #128	; 0x80
 8000af4:	0008      	movs	r0, r1
 8000af6:	4b37      	ldr	r3, [pc, #220]	; (8000bd4 <__aeabi_fmul+0x230>)
 8000af8:	401c      	ands	r4, r3
 8000afa:	28fe      	cmp	r0, #254	; 0xfe
 8000afc:	dcc0      	bgt.n	8000a80 <__aeabi_fmul+0xdc>
 8000afe:	01a4      	lsls	r4, r4, #6
 8000b00:	0a64      	lsrs	r4, r4, #9
 8000b02:	b2c0      	uxtb	r0, r0
 8000b04:	e79a      	b.n	8000a3c <__aeabi_fmul+0x98>
 8000b06:	0037      	movs	r7, r6
 8000b08:	e78e      	b.n	8000a28 <__aeabi_fmul+0x84>
 8000b0a:	4652      	mov	r2, sl
 8000b0c:	2303      	movs	r3, #3
 8000b0e:	431a      	orrs	r2, r3
 8000b10:	4692      	mov	sl, r2
 8000b12:	2003      	movs	r0, #3
 8000b14:	e771      	b.n	80009fa <__aeabi_fmul+0x56>
 8000b16:	4648      	mov	r0, r9
 8000b18:	f000 fac8 	bl	80010ac <__clzsi2>
 8000b1c:	464a      	mov	r2, r9
 8000b1e:	1f43      	subs	r3, r0, #5
 8000b20:	409a      	lsls	r2, r3
 8000b22:	1a2d      	subs	r5, r5, r0
 8000b24:	4691      	mov	r9, r2
 8000b26:	2000      	movs	r0, #0
 8000b28:	3d76      	subs	r5, #118	; 0x76
 8000b2a:	e766      	b.n	80009fa <__aeabi_fmul+0x56>
 8000b2c:	230c      	movs	r3, #12
 8000b2e:	469a      	mov	sl, r3
 8000b30:	3b09      	subs	r3, #9
 8000b32:	25ff      	movs	r5, #255	; 0xff
 8000b34:	469b      	mov	fp, r3
 8000b36:	e74d      	b.n	80009d4 <__aeabi_fmul+0x30>
 8000b38:	0020      	movs	r0, r4
 8000b3a:	f000 fab7 	bl	80010ac <__clzsi2>
 8000b3e:	2576      	movs	r5, #118	; 0x76
 8000b40:	1f43      	subs	r3, r0, #5
 8000b42:	409c      	lsls	r4, r3
 8000b44:	2300      	movs	r3, #0
 8000b46:	426d      	negs	r5, r5
 8000b48:	469a      	mov	sl, r3
 8000b4a:	469b      	mov	fp, r3
 8000b4c:	1a2d      	subs	r5, r5, r0
 8000b4e:	e741      	b.n	80009d4 <__aeabi_fmul+0x30>
 8000b50:	2480      	movs	r4, #128	; 0x80
 8000b52:	2700      	movs	r7, #0
 8000b54:	20ff      	movs	r0, #255	; 0xff
 8000b56:	03e4      	lsls	r4, r4, #15
 8000b58:	e770      	b.n	8000a3c <__aeabi_fmul+0x98>
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	1a1b      	subs	r3, r3, r0
 8000b5e:	2b1b      	cmp	r3, #27
 8000b60:	dd00      	ble.n	8000b64 <__aeabi_fmul+0x1c0>
 8000b62:	e769      	b.n	8000a38 <__aeabi_fmul+0x94>
 8000b64:	319e      	adds	r1, #158	; 0x9e
 8000b66:	0020      	movs	r0, r4
 8000b68:	408c      	lsls	r4, r1
 8000b6a:	40d8      	lsrs	r0, r3
 8000b6c:	1e63      	subs	r3, r4, #1
 8000b6e:	419c      	sbcs	r4, r3
 8000b70:	4304      	orrs	r4, r0
 8000b72:	0763      	lsls	r3, r4, #29
 8000b74:	d004      	beq.n	8000b80 <__aeabi_fmul+0x1dc>
 8000b76:	230f      	movs	r3, #15
 8000b78:	4023      	ands	r3, r4
 8000b7a:	2b04      	cmp	r3, #4
 8000b7c:	d000      	beq.n	8000b80 <__aeabi_fmul+0x1dc>
 8000b7e:	3404      	adds	r4, #4
 8000b80:	0163      	lsls	r3, r4, #5
 8000b82:	d51a      	bpl.n	8000bba <__aeabi_fmul+0x216>
 8000b84:	2001      	movs	r0, #1
 8000b86:	2400      	movs	r4, #0
 8000b88:	e758      	b.n	8000a3c <__aeabi_fmul+0x98>
 8000b8a:	2080      	movs	r0, #128	; 0x80
 8000b8c:	03c0      	lsls	r0, r0, #15
 8000b8e:	4204      	tst	r4, r0
 8000b90:	d009      	beq.n	8000ba6 <__aeabi_fmul+0x202>
 8000b92:	464b      	mov	r3, r9
 8000b94:	4203      	tst	r3, r0
 8000b96:	d106      	bne.n	8000ba6 <__aeabi_fmul+0x202>
 8000b98:	464c      	mov	r4, r9
 8000b9a:	4304      	orrs	r4, r0
 8000b9c:	0264      	lsls	r4, r4, #9
 8000b9e:	4647      	mov	r7, r8
 8000ba0:	20ff      	movs	r0, #255	; 0xff
 8000ba2:	0a64      	lsrs	r4, r4, #9
 8000ba4:	e74a      	b.n	8000a3c <__aeabi_fmul+0x98>
 8000ba6:	2080      	movs	r0, #128	; 0x80
 8000ba8:	03c0      	lsls	r0, r0, #15
 8000baa:	4304      	orrs	r4, r0
 8000bac:	0264      	lsls	r4, r4, #9
 8000bae:	0037      	movs	r7, r6
 8000bb0:	20ff      	movs	r0, #255	; 0xff
 8000bb2:	0a64      	lsrs	r4, r4, #9
 8000bb4:	e742      	b.n	8000a3c <__aeabi_fmul+0x98>
 8000bb6:	0029      	movs	r1, r5
 8000bb8:	e78e      	b.n	8000ad8 <__aeabi_fmul+0x134>
 8000bba:	01a4      	lsls	r4, r4, #6
 8000bbc:	2000      	movs	r0, #0
 8000bbe:	0a64      	lsrs	r4, r4, #9
 8000bc0:	e73c      	b.n	8000a3c <__aeabi_fmul+0x98>
 8000bc2:	2080      	movs	r0, #128	; 0x80
 8000bc4:	03c0      	lsls	r0, r0, #15
 8000bc6:	4304      	orrs	r4, r0
 8000bc8:	0264      	lsls	r4, r4, #9
 8000bca:	20ff      	movs	r0, #255	; 0xff
 8000bcc:	0a64      	lsrs	r4, r4, #9
 8000bce:	e735      	b.n	8000a3c <__aeabi_fmul+0x98>
 8000bd0:	0800971c 	.word	0x0800971c
 8000bd4:	f7ffffff 	.word	0xf7ffffff

08000bd8 <__aeabi_fsub>:
 8000bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bda:	4646      	mov	r6, r8
 8000bdc:	46d6      	mov	lr, sl
 8000bde:	464f      	mov	r7, r9
 8000be0:	0243      	lsls	r3, r0, #9
 8000be2:	0a5b      	lsrs	r3, r3, #9
 8000be4:	00da      	lsls	r2, r3, #3
 8000be6:	4694      	mov	ip, r2
 8000be8:	024a      	lsls	r2, r1, #9
 8000bea:	b5c0      	push	{r6, r7, lr}
 8000bec:	0044      	lsls	r4, r0, #1
 8000bee:	0a56      	lsrs	r6, r2, #9
 8000bf0:	1c05      	adds	r5, r0, #0
 8000bf2:	46b0      	mov	r8, r6
 8000bf4:	0e24      	lsrs	r4, r4, #24
 8000bf6:	004e      	lsls	r6, r1, #1
 8000bf8:	0992      	lsrs	r2, r2, #6
 8000bfa:	001f      	movs	r7, r3
 8000bfc:	0020      	movs	r0, r4
 8000bfe:	4692      	mov	sl, r2
 8000c00:	0fed      	lsrs	r5, r5, #31
 8000c02:	0e36      	lsrs	r6, r6, #24
 8000c04:	0fc9      	lsrs	r1, r1, #31
 8000c06:	2eff      	cmp	r6, #255	; 0xff
 8000c08:	d100      	bne.n	8000c0c <__aeabi_fsub+0x34>
 8000c0a:	e07f      	b.n	8000d0c <__aeabi_fsub+0x134>
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	4051      	eors	r1, r2
 8000c10:	428d      	cmp	r5, r1
 8000c12:	d051      	beq.n	8000cb8 <__aeabi_fsub+0xe0>
 8000c14:	1ba2      	subs	r2, r4, r6
 8000c16:	4691      	mov	r9, r2
 8000c18:	2a00      	cmp	r2, #0
 8000c1a:	dc00      	bgt.n	8000c1e <__aeabi_fsub+0x46>
 8000c1c:	e07e      	b.n	8000d1c <__aeabi_fsub+0x144>
 8000c1e:	2e00      	cmp	r6, #0
 8000c20:	d100      	bne.n	8000c24 <__aeabi_fsub+0x4c>
 8000c22:	e099      	b.n	8000d58 <__aeabi_fsub+0x180>
 8000c24:	2cff      	cmp	r4, #255	; 0xff
 8000c26:	d100      	bne.n	8000c2a <__aeabi_fsub+0x52>
 8000c28:	e08c      	b.n	8000d44 <__aeabi_fsub+0x16c>
 8000c2a:	2380      	movs	r3, #128	; 0x80
 8000c2c:	4652      	mov	r2, sl
 8000c2e:	04db      	lsls	r3, r3, #19
 8000c30:	431a      	orrs	r2, r3
 8000c32:	4692      	mov	sl, r2
 8000c34:	464a      	mov	r2, r9
 8000c36:	2301      	movs	r3, #1
 8000c38:	2a1b      	cmp	r2, #27
 8000c3a:	dc08      	bgt.n	8000c4e <__aeabi_fsub+0x76>
 8000c3c:	4653      	mov	r3, sl
 8000c3e:	2120      	movs	r1, #32
 8000c40:	40d3      	lsrs	r3, r2
 8000c42:	1a89      	subs	r1, r1, r2
 8000c44:	4652      	mov	r2, sl
 8000c46:	408a      	lsls	r2, r1
 8000c48:	1e51      	subs	r1, r2, #1
 8000c4a:	418a      	sbcs	r2, r1
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	4662      	mov	r2, ip
 8000c50:	1ad3      	subs	r3, r2, r3
 8000c52:	015a      	lsls	r2, r3, #5
 8000c54:	d400      	bmi.n	8000c58 <__aeabi_fsub+0x80>
 8000c56:	e0f3      	b.n	8000e40 <__aeabi_fsub+0x268>
 8000c58:	019b      	lsls	r3, r3, #6
 8000c5a:	099e      	lsrs	r6, r3, #6
 8000c5c:	0030      	movs	r0, r6
 8000c5e:	f000 fa25 	bl	80010ac <__clzsi2>
 8000c62:	3805      	subs	r0, #5
 8000c64:	4086      	lsls	r6, r0
 8000c66:	4284      	cmp	r4, r0
 8000c68:	dd00      	ble.n	8000c6c <__aeabi_fsub+0x94>
 8000c6a:	e0f7      	b.n	8000e5c <__aeabi_fsub+0x284>
 8000c6c:	0032      	movs	r2, r6
 8000c6e:	1b04      	subs	r4, r0, r4
 8000c70:	2020      	movs	r0, #32
 8000c72:	3401      	adds	r4, #1
 8000c74:	40e2      	lsrs	r2, r4
 8000c76:	1b04      	subs	r4, r0, r4
 8000c78:	40a6      	lsls	r6, r4
 8000c7a:	0033      	movs	r3, r6
 8000c7c:	1e5e      	subs	r6, r3, #1
 8000c7e:	41b3      	sbcs	r3, r6
 8000c80:	2400      	movs	r4, #0
 8000c82:	4313      	orrs	r3, r2
 8000c84:	075a      	lsls	r2, r3, #29
 8000c86:	d004      	beq.n	8000c92 <__aeabi_fsub+0xba>
 8000c88:	220f      	movs	r2, #15
 8000c8a:	401a      	ands	r2, r3
 8000c8c:	2a04      	cmp	r2, #4
 8000c8e:	d000      	beq.n	8000c92 <__aeabi_fsub+0xba>
 8000c90:	3304      	adds	r3, #4
 8000c92:	015a      	lsls	r2, r3, #5
 8000c94:	d400      	bmi.n	8000c98 <__aeabi_fsub+0xc0>
 8000c96:	e0d6      	b.n	8000e46 <__aeabi_fsub+0x26e>
 8000c98:	1c62      	adds	r2, r4, #1
 8000c9a:	2cfe      	cmp	r4, #254	; 0xfe
 8000c9c:	d100      	bne.n	8000ca0 <__aeabi_fsub+0xc8>
 8000c9e:	e0da      	b.n	8000e56 <__aeabi_fsub+0x27e>
 8000ca0:	019b      	lsls	r3, r3, #6
 8000ca2:	0a5f      	lsrs	r7, r3, #9
 8000ca4:	b2d0      	uxtb	r0, r2
 8000ca6:	05c0      	lsls	r0, r0, #23
 8000ca8:	4338      	orrs	r0, r7
 8000caa:	07ed      	lsls	r5, r5, #31
 8000cac:	4328      	orrs	r0, r5
 8000cae:	bce0      	pop	{r5, r6, r7}
 8000cb0:	46ba      	mov	sl, r7
 8000cb2:	46b1      	mov	r9, r6
 8000cb4:	46a8      	mov	r8, r5
 8000cb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cb8:	1ba2      	subs	r2, r4, r6
 8000cba:	4691      	mov	r9, r2
 8000cbc:	2a00      	cmp	r2, #0
 8000cbe:	dd63      	ble.n	8000d88 <__aeabi_fsub+0x1b0>
 8000cc0:	2e00      	cmp	r6, #0
 8000cc2:	d100      	bne.n	8000cc6 <__aeabi_fsub+0xee>
 8000cc4:	e099      	b.n	8000dfa <__aeabi_fsub+0x222>
 8000cc6:	2cff      	cmp	r4, #255	; 0xff
 8000cc8:	d03c      	beq.n	8000d44 <__aeabi_fsub+0x16c>
 8000cca:	2380      	movs	r3, #128	; 0x80
 8000ccc:	4652      	mov	r2, sl
 8000cce:	04db      	lsls	r3, r3, #19
 8000cd0:	431a      	orrs	r2, r3
 8000cd2:	4692      	mov	sl, r2
 8000cd4:	464a      	mov	r2, r9
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	2a1b      	cmp	r2, #27
 8000cda:	dc08      	bgt.n	8000cee <__aeabi_fsub+0x116>
 8000cdc:	4653      	mov	r3, sl
 8000cde:	2120      	movs	r1, #32
 8000ce0:	40d3      	lsrs	r3, r2
 8000ce2:	1a89      	subs	r1, r1, r2
 8000ce4:	4652      	mov	r2, sl
 8000ce6:	408a      	lsls	r2, r1
 8000ce8:	1e51      	subs	r1, r2, #1
 8000cea:	418a      	sbcs	r2, r1
 8000cec:	4313      	orrs	r3, r2
 8000cee:	4463      	add	r3, ip
 8000cf0:	015a      	lsls	r2, r3, #5
 8000cf2:	d400      	bmi.n	8000cf6 <__aeabi_fsub+0x11e>
 8000cf4:	e0a4      	b.n	8000e40 <__aeabi_fsub+0x268>
 8000cf6:	3401      	adds	r4, #1
 8000cf8:	2cff      	cmp	r4, #255	; 0xff
 8000cfa:	d100      	bne.n	8000cfe <__aeabi_fsub+0x126>
 8000cfc:	e0ab      	b.n	8000e56 <__aeabi_fsub+0x27e>
 8000cfe:	2201      	movs	r2, #1
 8000d00:	4997      	ldr	r1, [pc, #604]	; (8000f60 <__aeabi_fsub+0x388>)
 8000d02:	401a      	ands	r2, r3
 8000d04:	085b      	lsrs	r3, r3, #1
 8000d06:	400b      	ands	r3, r1
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	e7bb      	b.n	8000c84 <__aeabi_fsub+0xac>
 8000d0c:	2a00      	cmp	r2, #0
 8000d0e:	d032      	beq.n	8000d76 <__aeabi_fsub+0x19e>
 8000d10:	428d      	cmp	r5, r1
 8000d12:	d035      	beq.n	8000d80 <__aeabi_fsub+0x1a8>
 8000d14:	22ff      	movs	r2, #255	; 0xff
 8000d16:	4252      	negs	r2, r2
 8000d18:	4691      	mov	r9, r2
 8000d1a:	44a1      	add	r9, r4
 8000d1c:	464a      	mov	r2, r9
 8000d1e:	2a00      	cmp	r2, #0
 8000d20:	d051      	beq.n	8000dc6 <__aeabi_fsub+0x1ee>
 8000d22:	1b30      	subs	r0, r6, r4
 8000d24:	2c00      	cmp	r4, #0
 8000d26:	d000      	beq.n	8000d2a <__aeabi_fsub+0x152>
 8000d28:	e09c      	b.n	8000e64 <__aeabi_fsub+0x28c>
 8000d2a:	4663      	mov	r3, ip
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d100      	bne.n	8000d32 <__aeabi_fsub+0x15a>
 8000d30:	e0df      	b.n	8000ef2 <__aeabi_fsub+0x31a>
 8000d32:	3801      	subs	r0, #1
 8000d34:	2800      	cmp	r0, #0
 8000d36:	d100      	bne.n	8000d3a <__aeabi_fsub+0x162>
 8000d38:	e0f7      	b.n	8000f2a <__aeabi_fsub+0x352>
 8000d3a:	2eff      	cmp	r6, #255	; 0xff
 8000d3c:	d000      	beq.n	8000d40 <__aeabi_fsub+0x168>
 8000d3e:	e099      	b.n	8000e74 <__aeabi_fsub+0x29c>
 8000d40:	000d      	movs	r5, r1
 8000d42:	4643      	mov	r3, r8
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d100      	bne.n	8000d4a <__aeabi_fsub+0x172>
 8000d48:	e085      	b.n	8000e56 <__aeabi_fsub+0x27e>
 8000d4a:	2780      	movs	r7, #128	; 0x80
 8000d4c:	03ff      	lsls	r7, r7, #15
 8000d4e:	431f      	orrs	r7, r3
 8000d50:	027f      	lsls	r7, r7, #9
 8000d52:	20ff      	movs	r0, #255	; 0xff
 8000d54:	0a7f      	lsrs	r7, r7, #9
 8000d56:	e7a6      	b.n	8000ca6 <__aeabi_fsub+0xce>
 8000d58:	4652      	mov	r2, sl
 8000d5a:	2a00      	cmp	r2, #0
 8000d5c:	d074      	beq.n	8000e48 <__aeabi_fsub+0x270>
 8000d5e:	2201      	movs	r2, #1
 8000d60:	4252      	negs	r2, r2
 8000d62:	4690      	mov	r8, r2
 8000d64:	44c1      	add	r9, r8
 8000d66:	464a      	mov	r2, r9
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	d100      	bne.n	8000d6e <__aeabi_fsub+0x196>
 8000d6c:	e0c8      	b.n	8000f00 <__aeabi_fsub+0x328>
 8000d6e:	2cff      	cmp	r4, #255	; 0xff
 8000d70:	d000      	beq.n	8000d74 <__aeabi_fsub+0x19c>
 8000d72:	e75f      	b.n	8000c34 <__aeabi_fsub+0x5c>
 8000d74:	e7e6      	b.n	8000d44 <__aeabi_fsub+0x16c>
 8000d76:	2201      	movs	r2, #1
 8000d78:	4051      	eors	r1, r2
 8000d7a:	42a9      	cmp	r1, r5
 8000d7c:	d000      	beq.n	8000d80 <__aeabi_fsub+0x1a8>
 8000d7e:	e749      	b.n	8000c14 <__aeabi_fsub+0x3c>
 8000d80:	22ff      	movs	r2, #255	; 0xff
 8000d82:	4252      	negs	r2, r2
 8000d84:	4691      	mov	r9, r2
 8000d86:	44a1      	add	r9, r4
 8000d88:	464a      	mov	r2, r9
 8000d8a:	2a00      	cmp	r2, #0
 8000d8c:	d043      	beq.n	8000e16 <__aeabi_fsub+0x23e>
 8000d8e:	1b31      	subs	r1, r6, r4
 8000d90:	2c00      	cmp	r4, #0
 8000d92:	d100      	bne.n	8000d96 <__aeabi_fsub+0x1be>
 8000d94:	e08c      	b.n	8000eb0 <__aeabi_fsub+0x2d8>
 8000d96:	2eff      	cmp	r6, #255	; 0xff
 8000d98:	d100      	bne.n	8000d9c <__aeabi_fsub+0x1c4>
 8000d9a:	e092      	b.n	8000ec2 <__aeabi_fsub+0x2ea>
 8000d9c:	2380      	movs	r3, #128	; 0x80
 8000d9e:	4662      	mov	r2, ip
 8000da0:	04db      	lsls	r3, r3, #19
 8000da2:	431a      	orrs	r2, r3
 8000da4:	4694      	mov	ip, r2
 8000da6:	2301      	movs	r3, #1
 8000da8:	291b      	cmp	r1, #27
 8000daa:	dc09      	bgt.n	8000dc0 <__aeabi_fsub+0x1e8>
 8000dac:	2020      	movs	r0, #32
 8000dae:	4663      	mov	r3, ip
 8000db0:	4662      	mov	r2, ip
 8000db2:	40cb      	lsrs	r3, r1
 8000db4:	1a41      	subs	r1, r0, r1
 8000db6:	408a      	lsls	r2, r1
 8000db8:	0011      	movs	r1, r2
 8000dba:	1e48      	subs	r0, r1, #1
 8000dbc:	4181      	sbcs	r1, r0
 8000dbe:	430b      	orrs	r3, r1
 8000dc0:	0034      	movs	r4, r6
 8000dc2:	4453      	add	r3, sl
 8000dc4:	e794      	b.n	8000cf0 <__aeabi_fsub+0x118>
 8000dc6:	22fe      	movs	r2, #254	; 0xfe
 8000dc8:	1c66      	adds	r6, r4, #1
 8000dca:	4232      	tst	r2, r6
 8000dcc:	d164      	bne.n	8000e98 <__aeabi_fsub+0x2c0>
 8000dce:	2c00      	cmp	r4, #0
 8000dd0:	d000      	beq.n	8000dd4 <__aeabi_fsub+0x1fc>
 8000dd2:	e082      	b.n	8000eda <__aeabi_fsub+0x302>
 8000dd4:	4663      	mov	r3, ip
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d100      	bne.n	8000ddc <__aeabi_fsub+0x204>
 8000dda:	e0ab      	b.n	8000f34 <__aeabi_fsub+0x35c>
 8000ddc:	4653      	mov	r3, sl
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d100      	bne.n	8000de4 <__aeabi_fsub+0x20c>
 8000de2:	e760      	b.n	8000ca6 <__aeabi_fsub+0xce>
 8000de4:	4663      	mov	r3, ip
 8000de6:	4652      	mov	r2, sl
 8000de8:	1a9b      	subs	r3, r3, r2
 8000dea:	015a      	lsls	r2, r3, #5
 8000dec:	d400      	bmi.n	8000df0 <__aeabi_fsub+0x218>
 8000dee:	e0aa      	b.n	8000f46 <__aeabi_fsub+0x36e>
 8000df0:	4663      	mov	r3, ip
 8000df2:	4652      	mov	r2, sl
 8000df4:	000d      	movs	r5, r1
 8000df6:	1ad3      	subs	r3, r2, r3
 8000df8:	e744      	b.n	8000c84 <__aeabi_fsub+0xac>
 8000dfa:	4652      	mov	r2, sl
 8000dfc:	2a00      	cmp	r2, #0
 8000dfe:	d023      	beq.n	8000e48 <__aeabi_fsub+0x270>
 8000e00:	2201      	movs	r2, #1
 8000e02:	4252      	negs	r2, r2
 8000e04:	4690      	mov	r8, r2
 8000e06:	44c1      	add	r9, r8
 8000e08:	464a      	mov	r2, r9
 8000e0a:	2a00      	cmp	r2, #0
 8000e0c:	d075      	beq.n	8000efa <__aeabi_fsub+0x322>
 8000e0e:	2cff      	cmp	r4, #255	; 0xff
 8000e10:	d000      	beq.n	8000e14 <__aeabi_fsub+0x23c>
 8000e12:	e75f      	b.n	8000cd4 <__aeabi_fsub+0xfc>
 8000e14:	e796      	b.n	8000d44 <__aeabi_fsub+0x16c>
 8000e16:	26fe      	movs	r6, #254	; 0xfe
 8000e18:	3401      	adds	r4, #1
 8000e1a:	4226      	tst	r6, r4
 8000e1c:	d153      	bne.n	8000ec6 <__aeabi_fsub+0x2ee>
 8000e1e:	2800      	cmp	r0, #0
 8000e20:	d172      	bne.n	8000f08 <__aeabi_fsub+0x330>
 8000e22:	4663      	mov	r3, ip
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d100      	bne.n	8000e2a <__aeabi_fsub+0x252>
 8000e28:	e093      	b.n	8000f52 <__aeabi_fsub+0x37a>
 8000e2a:	4653      	mov	r3, sl
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d100      	bne.n	8000e32 <__aeabi_fsub+0x25a>
 8000e30:	e739      	b.n	8000ca6 <__aeabi_fsub+0xce>
 8000e32:	4463      	add	r3, ip
 8000e34:	2400      	movs	r4, #0
 8000e36:	015a      	lsls	r2, r3, #5
 8000e38:	d502      	bpl.n	8000e40 <__aeabi_fsub+0x268>
 8000e3a:	4a4a      	ldr	r2, [pc, #296]	; (8000f64 <__aeabi_fsub+0x38c>)
 8000e3c:	3401      	adds	r4, #1
 8000e3e:	4013      	ands	r3, r2
 8000e40:	075a      	lsls	r2, r3, #29
 8000e42:	d000      	beq.n	8000e46 <__aeabi_fsub+0x26e>
 8000e44:	e720      	b.n	8000c88 <__aeabi_fsub+0xb0>
 8000e46:	08db      	lsrs	r3, r3, #3
 8000e48:	2cff      	cmp	r4, #255	; 0xff
 8000e4a:	d100      	bne.n	8000e4e <__aeabi_fsub+0x276>
 8000e4c:	e77a      	b.n	8000d44 <__aeabi_fsub+0x16c>
 8000e4e:	025b      	lsls	r3, r3, #9
 8000e50:	0a5f      	lsrs	r7, r3, #9
 8000e52:	b2e0      	uxtb	r0, r4
 8000e54:	e727      	b.n	8000ca6 <__aeabi_fsub+0xce>
 8000e56:	20ff      	movs	r0, #255	; 0xff
 8000e58:	2700      	movs	r7, #0
 8000e5a:	e724      	b.n	8000ca6 <__aeabi_fsub+0xce>
 8000e5c:	4b41      	ldr	r3, [pc, #260]	; (8000f64 <__aeabi_fsub+0x38c>)
 8000e5e:	1a24      	subs	r4, r4, r0
 8000e60:	4033      	ands	r3, r6
 8000e62:	e70f      	b.n	8000c84 <__aeabi_fsub+0xac>
 8000e64:	2eff      	cmp	r6, #255	; 0xff
 8000e66:	d100      	bne.n	8000e6a <__aeabi_fsub+0x292>
 8000e68:	e76a      	b.n	8000d40 <__aeabi_fsub+0x168>
 8000e6a:	2380      	movs	r3, #128	; 0x80
 8000e6c:	4662      	mov	r2, ip
 8000e6e:	04db      	lsls	r3, r3, #19
 8000e70:	431a      	orrs	r2, r3
 8000e72:	4694      	mov	ip, r2
 8000e74:	2301      	movs	r3, #1
 8000e76:	281b      	cmp	r0, #27
 8000e78:	dc09      	bgt.n	8000e8e <__aeabi_fsub+0x2b6>
 8000e7a:	2420      	movs	r4, #32
 8000e7c:	4663      	mov	r3, ip
 8000e7e:	4662      	mov	r2, ip
 8000e80:	40c3      	lsrs	r3, r0
 8000e82:	1a20      	subs	r0, r4, r0
 8000e84:	4082      	lsls	r2, r0
 8000e86:	0010      	movs	r0, r2
 8000e88:	1e44      	subs	r4, r0, #1
 8000e8a:	41a0      	sbcs	r0, r4
 8000e8c:	4303      	orrs	r3, r0
 8000e8e:	4652      	mov	r2, sl
 8000e90:	000d      	movs	r5, r1
 8000e92:	0034      	movs	r4, r6
 8000e94:	1ad3      	subs	r3, r2, r3
 8000e96:	e6dc      	b.n	8000c52 <__aeabi_fsub+0x7a>
 8000e98:	4663      	mov	r3, ip
 8000e9a:	4652      	mov	r2, sl
 8000e9c:	1a9e      	subs	r6, r3, r2
 8000e9e:	0173      	lsls	r3, r6, #5
 8000ea0:	d417      	bmi.n	8000ed2 <__aeabi_fsub+0x2fa>
 8000ea2:	2e00      	cmp	r6, #0
 8000ea4:	d000      	beq.n	8000ea8 <__aeabi_fsub+0x2d0>
 8000ea6:	e6d9      	b.n	8000c5c <__aeabi_fsub+0x84>
 8000ea8:	2500      	movs	r5, #0
 8000eaa:	2000      	movs	r0, #0
 8000eac:	2700      	movs	r7, #0
 8000eae:	e6fa      	b.n	8000ca6 <__aeabi_fsub+0xce>
 8000eb0:	4663      	mov	r3, ip
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d044      	beq.n	8000f40 <__aeabi_fsub+0x368>
 8000eb6:	3901      	subs	r1, #1
 8000eb8:	2900      	cmp	r1, #0
 8000eba:	d04c      	beq.n	8000f56 <__aeabi_fsub+0x37e>
 8000ebc:	2eff      	cmp	r6, #255	; 0xff
 8000ebe:	d000      	beq.n	8000ec2 <__aeabi_fsub+0x2ea>
 8000ec0:	e771      	b.n	8000da6 <__aeabi_fsub+0x1ce>
 8000ec2:	4643      	mov	r3, r8
 8000ec4:	e73e      	b.n	8000d44 <__aeabi_fsub+0x16c>
 8000ec6:	2cff      	cmp	r4, #255	; 0xff
 8000ec8:	d0c5      	beq.n	8000e56 <__aeabi_fsub+0x27e>
 8000eca:	4652      	mov	r2, sl
 8000ecc:	4462      	add	r2, ip
 8000ece:	0853      	lsrs	r3, r2, #1
 8000ed0:	e7b6      	b.n	8000e40 <__aeabi_fsub+0x268>
 8000ed2:	4663      	mov	r3, ip
 8000ed4:	000d      	movs	r5, r1
 8000ed6:	1ad6      	subs	r6, r2, r3
 8000ed8:	e6c0      	b.n	8000c5c <__aeabi_fsub+0x84>
 8000eda:	4662      	mov	r2, ip
 8000edc:	2a00      	cmp	r2, #0
 8000ede:	d116      	bne.n	8000f0e <__aeabi_fsub+0x336>
 8000ee0:	4653      	mov	r3, sl
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d000      	beq.n	8000ee8 <__aeabi_fsub+0x310>
 8000ee6:	e72b      	b.n	8000d40 <__aeabi_fsub+0x168>
 8000ee8:	2780      	movs	r7, #128	; 0x80
 8000eea:	2500      	movs	r5, #0
 8000eec:	20ff      	movs	r0, #255	; 0xff
 8000eee:	03ff      	lsls	r7, r7, #15
 8000ef0:	e6d9      	b.n	8000ca6 <__aeabi_fsub+0xce>
 8000ef2:	000d      	movs	r5, r1
 8000ef4:	4643      	mov	r3, r8
 8000ef6:	0034      	movs	r4, r6
 8000ef8:	e7a6      	b.n	8000e48 <__aeabi_fsub+0x270>
 8000efa:	4653      	mov	r3, sl
 8000efc:	4463      	add	r3, ip
 8000efe:	e6f7      	b.n	8000cf0 <__aeabi_fsub+0x118>
 8000f00:	4663      	mov	r3, ip
 8000f02:	4652      	mov	r2, sl
 8000f04:	1a9b      	subs	r3, r3, r2
 8000f06:	e6a4      	b.n	8000c52 <__aeabi_fsub+0x7a>
 8000f08:	4662      	mov	r2, ip
 8000f0a:	2a00      	cmp	r2, #0
 8000f0c:	d0d9      	beq.n	8000ec2 <__aeabi_fsub+0x2ea>
 8000f0e:	4652      	mov	r2, sl
 8000f10:	2a00      	cmp	r2, #0
 8000f12:	d100      	bne.n	8000f16 <__aeabi_fsub+0x33e>
 8000f14:	e716      	b.n	8000d44 <__aeabi_fsub+0x16c>
 8000f16:	2280      	movs	r2, #128	; 0x80
 8000f18:	03d2      	lsls	r2, r2, #15
 8000f1a:	4213      	tst	r3, r2
 8000f1c:	d100      	bne.n	8000f20 <__aeabi_fsub+0x348>
 8000f1e:	e711      	b.n	8000d44 <__aeabi_fsub+0x16c>
 8000f20:	4640      	mov	r0, r8
 8000f22:	4210      	tst	r0, r2
 8000f24:	d000      	beq.n	8000f28 <__aeabi_fsub+0x350>
 8000f26:	e70d      	b.n	8000d44 <__aeabi_fsub+0x16c>
 8000f28:	e70a      	b.n	8000d40 <__aeabi_fsub+0x168>
 8000f2a:	4652      	mov	r2, sl
 8000f2c:	000d      	movs	r5, r1
 8000f2e:	0034      	movs	r4, r6
 8000f30:	1ad3      	subs	r3, r2, r3
 8000f32:	e68e      	b.n	8000c52 <__aeabi_fsub+0x7a>
 8000f34:	4653      	mov	r3, sl
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d008      	beq.n	8000f4c <__aeabi_fsub+0x374>
 8000f3a:	000d      	movs	r5, r1
 8000f3c:	4647      	mov	r7, r8
 8000f3e:	e6b2      	b.n	8000ca6 <__aeabi_fsub+0xce>
 8000f40:	4643      	mov	r3, r8
 8000f42:	0034      	movs	r4, r6
 8000f44:	e780      	b.n	8000e48 <__aeabi_fsub+0x270>
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d000      	beq.n	8000f4c <__aeabi_fsub+0x374>
 8000f4a:	e779      	b.n	8000e40 <__aeabi_fsub+0x268>
 8000f4c:	2500      	movs	r5, #0
 8000f4e:	2700      	movs	r7, #0
 8000f50:	e6a9      	b.n	8000ca6 <__aeabi_fsub+0xce>
 8000f52:	4647      	mov	r7, r8
 8000f54:	e6a7      	b.n	8000ca6 <__aeabi_fsub+0xce>
 8000f56:	4653      	mov	r3, sl
 8000f58:	0034      	movs	r4, r6
 8000f5a:	4463      	add	r3, ip
 8000f5c:	e6c8      	b.n	8000cf0 <__aeabi_fsub+0x118>
 8000f5e:	46c0      	nop			; (mov r8, r8)
 8000f60:	7dffffff 	.word	0x7dffffff
 8000f64:	fbffffff 	.word	0xfbffffff

08000f68 <__aeabi_f2iz>:
 8000f68:	0241      	lsls	r1, r0, #9
 8000f6a:	0042      	lsls	r2, r0, #1
 8000f6c:	0fc3      	lsrs	r3, r0, #31
 8000f6e:	0a49      	lsrs	r1, r1, #9
 8000f70:	2000      	movs	r0, #0
 8000f72:	0e12      	lsrs	r2, r2, #24
 8000f74:	2a7e      	cmp	r2, #126	; 0x7e
 8000f76:	d903      	bls.n	8000f80 <__aeabi_f2iz+0x18>
 8000f78:	2a9d      	cmp	r2, #157	; 0x9d
 8000f7a:	d902      	bls.n	8000f82 <__aeabi_f2iz+0x1a>
 8000f7c:	4a09      	ldr	r2, [pc, #36]	; (8000fa4 <__aeabi_f2iz+0x3c>)
 8000f7e:	1898      	adds	r0, r3, r2
 8000f80:	4770      	bx	lr
 8000f82:	2080      	movs	r0, #128	; 0x80
 8000f84:	0400      	lsls	r0, r0, #16
 8000f86:	4301      	orrs	r1, r0
 8000f88:	2a95      	cmp	r2, #149	; 0x95
 8000f8a:	dc07      	bgt.n	8000f9c <__aeabi_f2iz+0x34>
 8000f8c:	2096      	movs	r0, #150	; 0x96
 8000f8e:	1a82      	subs	r2, r0, r2
 8000f90:	40d1      	lsrs	r1, r2
 8000f92:	4248      	negs	r0, r1
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d1f3      	bne.n	8000f80 <__aeabi_f2iz+0x18>
 8000f98:	0008      	movs	r0, r1
 8000f9a:	e7f1      	b.n	8000f80 <__aeabi_f2iz+0x18>
 8000f9c:	3a96      	subs	r2, #150	; 0x96
 8000f9e:	4091      	lsls	r1, r2
 8000fa0:	e7f7      	b.n	8000f92 <__aeabi_f2iz+0x2a>
 8000fa2:	46c0      	nop			; (mov r8, r8)
 8000fa4:	7fffffff 	.word	0x7fffffff

08000fa8 <__aeabi_i2f>:
 8000fa8:	b570      	push	{r4, r5, r6, lr}
 8000faa:	2800      	cmp	r0, #0
 8000fac:	d013      	beq.n	8000fd6 <__aeabi_i2f+0x2e>
 8000fae:	17c3      	asrs	r3, r0, #31
 8000fb0:	18c5      	adds	r5, r0, r3
 8000fb2:	405d      	eors	r5, r3
 8000fb4:	0fc4      	lsrs	r4, r0, #31
 8000fb6:	0028      	movs	r0, r5
 8000fb8:	f000 f878 	bl	80010ac <__clzsi2>
 8000fbc:	239e      	movs	r3, #158	; 0x9e
 8000fbe:	0001      	movs	r1, r0
 8000fc0:	1a1b      	subs	r3, r3, r0
 8000fc2:	2b96      	cmp	r3, #150	; 0x96
 8000fc4:	dc0f      	bgt.n	8000fe6 <__aeabi_i2f+0x3e>
 8000fc6:	2808      	cmp	r0, #8
 8000fc8:	dd01      	ble.n	8000fce <__aeabi_i2f+0x26>
 8000fca:	3908      	subs	r1, #8
 8000fcc:	408d      	lsls	r5, r1
 8000fce:	026d      	lsls	r5, r5, #9
 8000fd0:	0a6d      	lsrs	r5, r5, #9
 8000fd2:	b2d8      	uxtb	r0, r3
 8000fd4:	e002      	b.n	8000fdc <__aeabi_i2f+0x34>
 8000fd6:	2400      	movs	r4, #0
 8000fd8:	2000      	movs	r0, #0
 8000fda:	2500      	movs	r5, #0
 8000fdc:	05c0      	lsls	r0, r0, #23
 8000fde:	4328      	orrs	r0, r5
 8000fe0:	07e4      	lsls	r4, r4, #31
 8000fe2:	4320      	orrs	r0, r4
 8000fe4:	bd70      	pop	{r4, r5, r6, pc}
 8000fe6:	2b99      	cmp	r3, #153	; 0x99
 8000fe8:	dd0b      	ble.n	8001002 <__aeabi_i2f+0x5a>
 8000fea:	2205      	movs	r2, #5
 8000fec:	002e      	movs	r6, r5
 8000fee:	1a12      	subs	r2, r2, r0
 8000ff0:	40d6      	lsrs	r6, r2
 8000ff2:	0002      	movs	r2, r0
 8000ff4:	321b      	adds	r2, #27
 8000ff6:	4095      	lsls	r5, r2
 8000ff8:	0028      	movs	r0, r5
 8000ffa:	1e45      	subs	r5, r0, #1
 8000ffc:	41a8      	sbcs	r0, r5
 8000ffe:	0035      	movs	r5, r6
 8001000:	4305      	orrs	r5, r0
 8001002:	2905      	cmp	r1, #5
 8001004:	dd01      	ble.n	800100a <__aeabi_i2f+0x62>
 8001006:	1f4a      	subs	r2, r1, #5
 8001008:	4095      	lsls	r5, r2
 800100a:	002a      	movs	r2, r5
 800100c:	4e08      	ldr	r6, [pc, #32]	; (8001030 <__aeabi_i2f+0x88>)
 800100e:	4032      	ands	r2, r6
 8001010:	0768      	lsls	r0, r5, #29
 8001012:	d009      	beq.n	8001028 <__aeabi_i2f+0x80>
 8001014:	200f      	movs	r0, #15
 8001016:	4028      	ands	r0, r5
 8001018:	2804      	cmp	r0, #4
 800101a:	d005      	beq.n	8001028 <__aeabi_i2f+0x80>
 800101c:	3204      	adds	r2, #4
 800101e:	0150      	lsls	r0, r2, #5
 8001020:	d502      	bpl.n	8001028 <__aeabi_i2f+0x80>
 8001022:	239f      	movs	r3, #159	; 0x9f
 8001024:	4032      	ands	r2, r6
 8001026:	1a5b      	subs	r3, r3, r1
 8001028:	0192      	lsls	r2, r2, #6
 800102a:	0a55      	lsrs	r5, r2, #9
 800102c:	b2d8      	uxtb	r0, r3
 800102e:	e7d5      	b.n	8000fdc <__aeabi_i2f+0x34>
 8001030:	fbffffff 	.word	0xfbffffff

08001034 <__aeabi_ui2f>:
 8001034:	b570      	push	{r4, r5, r6, lr}
 8001036:	1e05      	subs	r5, r0, #0
 8001038:	d00e      	beq.n	8001058 <__aeabi_ui2f+0x24>
 800103a:	f000 f837 	bl	80010ac <__clzsi2>
 800103e:	239e      	movs	r3, #158	; 0x9e
 8001040:	0004      	movs	r4, r0
 8001042:	1a1b      	subs	r3, r3, r0
 8001044:	2b96      	cmp	r3, #150	; 0x96
 8001046:	dc0c      	bgt.n	8001062 <__aeabi_ui2f+0x2e>
 8001048:	2808      	cmp	r0, #8
 800104a:	dd01      	ble.n	8001050 <__aeabi_ui2f+0x1c>
 800104c:	3c08      	subs	r4, #8
 800104e:	40a5      	lsls	r5, r4
 8001050:	026d      	lsls	r5, r5, #9
 8001052:	0a6d      	lsrs	r5, r5, #9
 8001054:	b2d8      	uxtb	r0, r3
 8001056:	e001      	b.n	800105c <__aeabi_ui2f+0x28>
 8001058:	2000      	movs	r0, #0
 800105a:	2500      	movs	r5, #0
 800105c:	05c0      	lsls	r0, r0, #23
 800105e:	4328      	orrs	r0, r5
 8001060:	bd70      	pop	{r4, r5, r6, pc}
 8001062:	2b99      	cmp	r3, #153	; 0x99
 8001064:	dd09      	ble.n	800107a <__aeabi_ui2f+0x46>
 8001066:	0002      	movs	r2, r0
 8001068:	0029      	movs	r1, r5
 800106a:	321b      	adds	r2, #27
 800106c:	4091      	lsls	r1, r2
 800106e:	1e4a      	subs	r2, r1, #1
 8001070:	4191      	sbcs	r1, r2
 8001072:	2205      	movs	r2, #5
 8001074:	1a12      	subs	r2, r2, r0
 8001076:	40d5      	lsrs	r5, r2
 8001078:	430d      	orrs	r5, r1
 800107a:	2c05      	cmp	r4, #5
 800107c:	dd01      	ble.n	8001082 <__aeabi_ui2f+0x4e>
 800107e:	1f62      	subs	r2, r4, #5
 8001080:	4095      	lsls	r5, r2
 8001082:	0029      	movs	r1, r5
 8001084:	4e08      	ldr	r6, [pc, #32]	; (80010a8 <__aeabi_ui2f+0x74>)
 8001086:	4031      	ands	r1, r6
 8001088:	076a      	lsls	r2, r5, #29
 800108a:	d009      	beq.n	80010a0 <__aeabi_ui2f+0x6c>
 800108c:	200f      	movs	r0, #15
 800108e:	4028      	ands	r0, r5
 8001090:	2804      	cmp	r0, #4
 8001092:	d005      	beq.n	80010a0 <__aeabi_ui2f+0x6c>
 8001094:	3104      	adds	r1, #4
 8001096:	014a      	lsls	r2, r1, #5
 8001098:	d502      	bpl.n	80010a0 <__aeabi_ui2f+0x6c>
 800109a:	239f      	movs	r3, #159	; 0x9f
 800109c:	4031      	ands	r1, r6
 800109e:	1b1b      	subs	r3, r3, r4
 80010a0:	0189      	lsls	r1, r1, #6
 80010a2:	0a4d      	lsrs	r5, r1, #9
 80010a4:	b2d8      	uxtb	r0, r3
 80010a6:	e7d9      	b.n	800105c <__aeabi_ui2f+0x28>
 80010a8:	fbffffff 	.word	0xfbffffff

080010ac <__clzsi2>:
 80010ac:	211c      	movs	r1, #28
 80010ae:	2301      	movs	r3, #1
 80010b0:	041b      	lsls	r3, r3, #16
 80010b2:	4298      	cmp	r0, r3
 80010b4:	d301      	bcc.n	80010ba <__clzsi2+0xe>
 80010b6:	0c00      	lsrs	r0, r0, #16
 80010b8:	3910      	subs	r1, #16
 80010ba:	0a1b      	lsrs	r3, r3, #8
 80010bc:	4298      	cmp	r0, r3
 80010be:	d301      	bcc.n	80010c4 <__clzsi2+0x18>
 80010c0:	0a00      	lsrs	r0, r0, #8
 80010c2:	3908      	subs	r1, #8
 80010c4:	091b      	lsrs	r3, r3, #4
 80010c6:	4298      	cmp	r0, r3
 80010c8:	d301      	bcc.n	80010ce <__clzsi2+0x22>
 80010ca:	0900      	lsrs	r0, r0, #4
 80010cc:	3904      	subs	r1, #4
 80010ce:	a202      	add	r2, pc, #8	; (adr r2, 80010d8 <__clzsi2+0x2c>)
 80010d0:	5c10      	ldrb	r0, [r2, r0]
 80010d2:	1840      	adds	r0, r0, r1
 80010d4:	4770      	bx	lr
 80010d6:	46c0      	nop			; (mov r8, r8)
 80010d8:	02020304 	.word	0x02020304
 80010dc:	01010101 	.word	0x01010101
	...

080010e8 <app_main>:

bool unit_oz = false;
uint32_t tara = 0;
uint32_t weight = 0;

void app_main(void) {	I2CSemaphore = xSemaphoreCreateMutex();
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af02      	add	r7, sp, #8
 80010ee:	2001      	movs	r0, #1
 80010f0:	f005 f98f 	bl	8006412 <xQueueCreateMutex>
 80010f4:	0002      	movs	r2, r0
 80010f6:	4b23      	ldr	r3, [pc, #140]	; (8001184 <app_main+0x9c>)
 80010f8:	601a      	str	r2, [r3, #0]
	ReglerSemaphore = xSemaphoreCreateBinary();
 80010fa:	2203      	movs	r2, #3
 80010fc:	2100      	movs	r1, #0
 80010fe:	2001      	movs	r0, #1
 8001100:	f005 f910 	bl	8006324 <xQueueGenericCreate>
 8001104:	0002      	movs	r2, r0
 8001106:	4b20      	ldr	r3, [pc, #128]	; (8001188 <app_main+0xa0>)
 8001108:	601a      	str	r2, [r3, #0]
	DisplaySemaphore = xSemaphoreCreateBinary();
 800110a:	2203      	movs	r2, #3
 800110c:	2100      	movs	r1, #0
 800110e:	2001      	movs	r0, #1
 8001110:	f005 f908 	bl	8006324 <xQueueGenericCreate>
 8001114:	0002      	movs	r2, r0
 8001116:	4b1d      	ldr	r3, [pc, #116]	; (800118c <app_main+0xa4>)
 8001118:	601a      	str	r2, [r3, #0]
	RPSemaphore = xSemaphoreCreateBinary();
 800111a:	2203      	movs	r2, #3
 800111c:	2100      	movs	r1, #0
 800111e:	2001      	movs	r0, #1
 8001120:	f005 f900 	bl	8006324 <xQueueGenericCreate>
 8001124:	0002      	movs	r2, r0
 8001126:	4b1a      	ldr	r3, [pc, #104]	; (8001190 <app_main+0xa8>)
 8001128:	601a      	str	r2, [r3, #0]
	xSemaphoreGive(ReglerSemaphore);
 800112a:	4b17      	ldr	r3, [pc, #92]	; (8001188 <app_main+0xa0>)
 800112c:	6818      	ldr	r0, [r3, #0]
 800112e:	2300      	movs	r3, #0
 8001130:	2200      	movs	r2, #0
 8001132:	2100      	movs	r1, #0
 8001134:	f005 f989 	bl	800644a <xQueueGenericSend>
	xSemaphoreGive(I2CSemaphore);
 8001138:	4b12      	ldr	r3, [pc, #72]	; (8001184 <app_main+0x9c>)
 800113a:	6818      	ldr	r0, [r3, #0]
 800113c:	2300      	movs	r3, #0
 800113e:	2200      	movs	r2, #0
 8001140:	2100      	movs	r1, #0
 8001142:	f005 f982 	bl	800644a <xQueueGenericSend>
	xSemaphoreGive(RPSemaphore);
 8001146:	4b12      	ldr	r3, [pc, #72]	; (8001190 <app_main+0xa8>)
 8001148:	6818      	ldr	r0, [r3, #0]
 800114a:	2300      	movs	r3, #0
 800114c:	2200      	movs	r2, #0
 800114e:	2100      	movs	r1, #0
 8001150:	f005 f97b 	bl	800644a <xQueueGenericSend>
	//xTaskCreate(I2C2Task, "I2C2-Task", (configMINIMAL_STACK_SIZE + 80), NULL, (tskIDLE_PRIORITY + 1), NULL);
	xTaskCreate(MainTask, "Main-Task", (configMINIMAL_STACK_SIZE + 80), NULL,(tskIDLE_PRIORITY + 1), NULL);
 8001154:	490f      	ldr	r1, [pc, #60]	; (8001194 <app_main+0xac>)
 8001156:	4810      	ldr	r0, [pc, #64]	; (8001198 <app_main+0xb0>)
 8001158:	2300      	movs	r3, #0
 800115a:	9301      	str	r3, [sp, #4]
 800115c:	2301      	movs	r3, #1
 800115e:	9300      	str	r3, [sp, #0]
 8001160:	2300      	movs	r3, #0
 8001162:	22d0      	movs	r2, #208	; 0xd0
 8001164:	f005 fe6c 	bl	8006e40 <xTaskCreate>
	xTaskCreate(ReglerISTTask, "Regler-Task", (configMINIMAL_STACK_SIZE + 80),
 8001168:	490c      	ldr	r1, [pc, #48]	; (800119c <app_main+0xb4>)
 800116a:	480d      	ldr	r0, [pc, #52]	; (80011a0 <app_main+0xb8>)
 800116c:	2300      	movs	r3, #0
 800116e:	9301      	str	r3, [sp, #4]
 8001170:	2302      	movs	r3, #2
 8001172:	9300      	str	r3, [sp, #0]
 8001174:	2300      	movs	r3, #0
 8001176:	22d0      	movs	r2, #208	; 0xd0
 8001178:	f005 fe62 	bl	8006e40 <xTaskCreate>
	NULL, (tskIDLE_PRIORITY + 2), NULL);
	vTaskStartScheduler();
 800117c:	f005 ffbc 	bl	80070f8 <vTaskStartScheduler>
	/* The FreeRTOS scheduler should never return to here, except on out of memory at creating the idle task! */
	for (;;)
 8001180:	e7fe      	b.n	8001180 <app_main+0x98>
 8001182:	46c0      	nop			; (mov r8, r8)
 8001184:	20002210 	.word	0x20002210
 8001188:	200021e4 	.word	0x200021e4
 800118c:	20002214 	.word	0x20002214
 8001190:	200021e0 	.word	0x200021e0
 8001194:	080095ec 	.word	0x080095ec
 8001198:	0800123d 	.word	0x0800123d
 800119c:	080095f8 	.word	0x080095f8
 80011a0:	08001355 	.word	0x08001355

080011a4 <TIM7_IRQHandler>:
}

/*
 * Timer for PI-Controller
 */
void TIM7_IRQHandler(void) {
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
	portBASE_TYPE higherPriorityTaskWoken = 0;
 80011aa:	2300      	movs	r3, #0
 80011ac:	607b      	str	r3, [r7, #4]
	if (ReglerSemaphore != NULL) {
 80011ae:	4b0c      	ldr	r3, [pc, #48]	; (80011e0 <TIM7_IRQHandler+0x3c>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d006      	beq.n	80011c4 <TIM7_IRQHandler+0x20>
		xSemaphoreGiveFromISR(ReglerSemaphore, &higherPriorityTaskWoken);
 80011b6:	4b0a      	ldr	r3, [pc, #40]	; (80011e0 <TIM7_IRQHandler+0x3c>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	1d3a      	adds	r2, r7, #4
 80011bc:	0011      	movs	r1, r2
 80011be:	0018      	movs	r0, r3
 80011c0:	f005 fa78 	bl	80066b4 <xQueueGiveFromISR>
	}
	if (higherPriorityTaskWoken != 0) {
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <TIM7_IRQHandler+0x2a>
		taskYIELD();
 80011ca:	f007 f889 	bl	80082e0 <vPortYield>
	}
	//Clear TIM7 Update Event Flag
	TIM7->SR = ~TIM_IT_UPDATE;
 80011ce:	4b05      	ldr	r3, [pc, #20]	; (80011e4 <TIM7_IRQHandler+0x40>)
 80011d0:	2202      	movs	r2, #2
 80011d2:	4252      	negs	r2, r2
 80011d4:	611a      	str	r2, [r3, #16]
}
 80011d6:	46c0      	nop			; (mov r8, r8)
 80011d8:	46bd      	mov	sp, r7
 80011da:	b002      	add	sp, #8
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	46c0      	nop			; (mov r8, r8)
 80011e0:	200021e4 	.word	0x200021e4
 80011e4:	40001400 	.word	0x40001400

080011e8 <HAL_GPIO_EXTI_Callback>:

/*
 * Read the button
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	0002      	movs	r2, r0
 80011f0:	1dbb      	adds	r3, r7, #6
 80011f2:	801a      	strh	r2, [r3, #0]
	if (GPIO_Pin == BTN_TARA) {
 80011f4:	1dbb      	adds	r3, r7, #6
 80011f6:	881b      	ldrh	r3, [r3, #0]
 80011f8:	2b08      	cmp	r3, #8
 80011fa:	d103      	bne.n	8001204 <HAL_GPIO_EXTI_Callback+0x1c>
		tara = weight;
 80011fc:	4b0c      	ldr	r3, [pc, #48]	; (8001230 <HAL_GPIO_EXTI_Callback+0x48>)
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	4b0c      	ldr	r3, [pc, #48]	; (8001234 <HAL_GPIO_EXTI_Callback+0x4c>)
 8001202:	601a      	str	r2, [r3, #0]
	}
	if (GPIO_Pin == BTN_UINT) {
 8001204:	1dbb      	adds	r3, r7, #6
 8001206:	881b      	ldrh	r3, [r3, #0]
 8001208:	2b04      	cmp	r3, #4
 800120a:	d10d      	bne.n	8001228 <HAL_GPIO_EXTI_Callback+0x40>
		unit_oz = !unit_oz;
 800120c:	4b0a      	ldr	r3, [pc, #40]	; (8001238 <HAL_GPIO_EXTI_Callback+0x50>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	1e5a      	subs	r2, r3, #1
 8001212:	4193      	sbcs	r3, r2
 8001214:	b2db      	uxtb	r3, r3
 8001216:	2201      	movs	r2, #1
 8001218:	4053      	eors	r3, r2
 800121a:	b2db      	uxtb	r3, r3
 800121c:	1c1a      	adds	r2, r3, #0
 800121e:	2301      	movs	r3, #1
 8001220:	4013      	ands	r3, r2
 8001222:	b2da      	uxtb	r2, r3
 8001224:	4b04      	ldr	r3, [pc, #16]	; (8001238 <HAL_GPIO_EXTI_Callback+0x50>)
 8001226:	701a      	strb	r2, [r3, #0]
	}
}
 8001228:	46c0      	nop			; (mov r8, r8)
 800122a:	46bd      	mov	sp, r7
 800122c:	b002      	add	sp, #8
 800122e:	bd80      	pop	{r7, pc}
 8001230:	200000ac 	.word	0x200000ac
 8001234:	200000a8 	.word	0x200000a8
 8001238:	200000a4 	.word	0x200000a4

0800123c <MainTask>:

/*
 * MainTask for Display weight and read out current and temperature
 */
static void MainTask(__attribute__ ((unused)) void *pvParameters) {
 800123c:	b580      	push	{r7, lr}
 800123e:	b08a      	sub	sp, #40	; 0x28
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
	HAL_Delay(DISPLAY_START_DELAY);
 8001244:	20c8      	movs	r0, #200	; 0xc8
 8001246:	f001 fa71 	bl	800272c <HAL_Delay>
	oled_init();
 800124a:	f000 fa0f 	bl	800166c <oled_init>
	char text[DISPLAY_TEXT_LENGTH];
	uint32_t current = 0;
 800124e:	2300      	movs	r3, #0
 8001250:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t temp = 0;
 8001252:	2300      	movs	r3, #0
 8001254:	623b      	str	r3, [r7, #32]
	while (1) {
		if (xSemaphoreTake(DisplaySemaphore,
 8001256:	4b34      	ldr	r3, [pc, #208]	; (8001328 <MainTask+0xec>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	21c8      	movs	r1, #200	; 0xc8
 800125c:	0018      	movs	r0, r3
 800125e:	f005 fb43 	bl	80068e8 <xQueueSemaphoreTake>
 8001262:	0003      	movs	r3, r0
 8001264:	2b01      	cmp	r3, #1
 8001266:	d1f6      	bne.n	8001256 <MainTask+0x1a>
				MAX_DELAY_DISPLAY_SEMAPHORE) == pdTRUE) {

			current = readCurrent();
 8001268:	f000 f906 	bl	8001478 <readCurrent>
 800126c:	0003      	movs	r3, r0
 800126e:	627b      	str	r3, [r7, #36]	; 0x24
			temp = readTemp();
 8001270:	f000 f93e 	bl	80014f0 <readTemp>
 8001274:	0003      	movs	r3, r0
 8001276:	623b      	str	r3, [r7, #32]
			calc_weight(current_average(current));
 8001278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127a:	0018      	movs	r0, r3
 800127c:	f000 f9b8 	bl	80015f0 <current_average>
 8001280:	0003      	movs	r3, r0
 8001282:	b29b      	uxth	r3, r3
 8001284:	0018      	movs	r0, r3
 8001286:	f000 f95f 	bl	8001548 <calc_weight>

			if(temp > MAX_TEMP_VALUE){
 800128a:	6a3a      	ldr	r2, [r7, #32]
 800128c:	23af      	movs	r3, #175	; 0xaf
 800128e:	00db      	lsls	r3, r3, #3
 8001290:	429a      	cmp	r2, r3
 8001292:	d90b      	bls.n	80012ac <MainTask+0x70>
				oled_printf(3, Black, "Remove weight");
 8001294:	4b25      	ldr	r3, [pc, #148]	; (800132c <MainTask+0xf0>)
 8001296:	001a      	movs	r2, r3
 8001298:	2100      	movs	r1, #0
 800129a:	2003      	movs	r0, #3
 800129c:	f000 fa1e 	bl	80016dc <oled_printf>
				oled_printf(4, Black, "Overheat!");
 80012a0:	4b23      	ldr	r3, [pc, #140]	; (8001330 <MainTask+0xf4>)
 80012a2:	001a      	movs	r2, r3
 80012a4:	2100      	movs	r1, #0
 80012a6:	2004      	movs	r0, #4
 80012a8:	f000 fa18 	bl	80016dc <oled_printf>
			}

			if (unit_oz) {
 80012ac:	4b21      	ldr	r3, [pc, #132]	; (8001334 <MainTask+0xf8>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d01c      	beq.n	80012ee <MainTask+0xb2>
				static int32_t ounce = 0;
				ounce = ((int32_t) weight - tara) * CONVERSION_GR_OZ;
 80012b4:	4b20      	ldr	r3, [pc, #128]	; (8001338 <MainTask+0xfc>)
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	4b20      	ldr	r3, [pc, #128]	; (800133c <MainTask+0x100>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	0018      	movs	r0, r3
 80012c0:	f7ff feb8 	bl	8001034 <__aeabi_ui2f>
 80012c4:	1c03      	adds	r3, r0, #0
 80012c6:	491e      	ldr	r1, [pc, #120]	; (8001340 <MainTask+0x104>)
 80012c8:	1c18      	adds	r0, r3, #0
 80012ca:	f7ff fb6b 	bl	80009a4 <__aeabi_fmul>
 80012ce:	1c03      	adds	r3, r0, #0
 80012d0:	1c18      	adds	r0, r3, #0
 80012d2:	f7ff fe49 	bl	8000f68 <__aeabi_f2iz>
 80012d6:	0002      	movs	r2, r0
 80012d8:	4b1a      	ldr	r3, [pc, #104]	; (8001344 <MainTask+0x108>)
 80012da:	601a      	str	r2, [r3, #0]
				snprintf(text, sizeof(text), "%0.3doz", (int) ounce);
 80012dc:	4b19      	ldr	r3, [pc, #100]	; (8001344 <MainTask+0x108>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a19      	ldr	r2, [pc, #100]	; (8001348 <MainTask+0x10c>)
 80012e2:	210c      	movs	r1, #12
 80012e4:	1878      	adds	r0, r7, r1
 80012e6:	2114      	movs	r1, #20
 80012e8:	f007 fd1e 	bl	8008d28 <sniprintf>
 80012ec:	e00a      	b.n	8001304 <MainTask+0xc8>
			} else {
				snprintf(text, sizeof(text), "%0.4dg", (int) (weight - tara));
 80012ee:	4b12      	ldr	r3, [pc, #72]	; (8001338 <MainTask+0xfc>)
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	4b12      	ldr	r3, [pc, #72]	; (800133c <MainTask+0x100>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	4a14      	ldr	r2, [pc, #80]	; (800134c <MainTask+0x110>)
 80012fa:	210c      	movs	r1, #12
 80012fc:	1878      	adds	r0, r7, r1
 80012fe:	2114      	movs	r1, #20
 8001300:	f007 fd12 	bl	8008d28 <sniprintf>
			}

			oled_print_weight(Black, text);
 8001304:	230c      	movs	r3, #12
 8001306:	18fb      	adds	r3, r7, r3
 8001308:	0019      	movs	r1, r3
 800130a:	2000      	movs	r0, #0
 800130c:	f000 fa44 	bl	8001798 <oled_print_weight>
			xSemaphoreGive(RPSemaphore);
 8001310:	4b0f      	ldr	r3, [pc, #60]	; (8001350 <MainTask+0x114>)
 8001312:	6818      	ldr	r0, [r3, #0]
 8001314:	2300      	movs	r3, #0
 8001316:	2200      	movs	r2, #0
 8001318:	2100      	movs	r1, #0
 800131a:	f005 f896 	bl	800644a <xQueueGenericSend>
			HAL_Delay(DISPLAY_REFRESH_TIMEOUT);
 800131e:	20c8      	movs	r0, #200	; 0xc8
 8001320:	f001 fa04 	bl	800272c <HAL_Delay>
		if (xSemaphoreTake(DisplaySemaphore,
 8001324:	e797      	b.n	8001256 <MainTask+0x1a>
 8001326:	46c0      	nop			; (mov r8, r8)
 8001328:	20002214 	.word	0x20002214
 800132c:	08009604 	.word	0x08009604
 8001330:	08009614 	.word	0x08009614
 8001334:	200000a4 	.word	0x200000a4
 8001338:	200000ac 	.word	0x200000ac
 800133c:	200000a8 	.word	0x200000a8
 8001340:	3d107b78 	.word	0x3d107b78
 8001344:	200000b0 	.word	0x200000b0
 8001348:	08009620 	.word	0x08009620
 800134c:	08009628 	.word	0x08009628
 8001350:	200021e0 	.word	0x200021e0

08001354 <ReglerISTTask>:
}

/*
 * Interupt service task for PI-Controller
 */
static void ReglerISTTask(__attribute__ ((unused)) void *pvParameters) {
 8001354:	b590      	push	{r4, r7, lr}
 8001356:	b08b      	sub	sp, #44	; 0x2c
 8001358:	af06      	add	r7, sp, #24
 800135a:	6078      	str	r0, [r7, #4]
	int32_t dist = 0;
 800135c:	2300      	movs	r3, #0
 800135e:	60fb      	str	r3, [r7, #12]
	initVCNL4040(VCNL4040_ADDR); //Wegmesssensor initialisieren
 8001360:	20c0      	movs	r0, #192	; 0xc0
 8001362:	f000 fb36 	bl	80019d2 <initVCNL4040>
	//int32_t idle_value = (DISTANCE_SCALER*readVCNL4040(VCNL4040_ADDR, (VCNL4040_PS_DATA)))
		//	- START_DIST_OFFSET; //Read start distance
	piregler_init(&piregler, IDLE_VALUE, 0, KP, 0, KI, LOW, HIGH, TS); //PIRegler initialisieren
 8001366:	4c1e      	ldr	r4, [pc, #120]	; (80013e0 <ReglerISTTask+0x8c>)
 8001368:	2200      	movs	r2, #0
 800136a:	491e      	ldr	r1, [pc, #120]	; (80013e4 <ReglerISTTask+0x90>)
 800136c:	481e      	ldr	r0, [pc, #120]	; (80013e8 <ReglerISTTask+0x94>)
 800136e:	4b1f      	ldr	r3, [pc, #124]	; (80013ec <ReglerISTTask+0x98>)
 8001370:	9304      	str	r3, [sp, #16]
 8001372:	4b1f      	ldr	r3, [pc, #124]	; (80013f0 <ReglerISTTask+0x9c>)
 8001374:	9303      	str	r3, [sp, #12]
 8001376:	4b1f      	ldr	r3, [pc, #124]	; (80013f4 <ReglerISTTask+0xa0>)
 8001378:	9302      	str	r3, [sp, #8]
 800137a:	2381      	movs	r3, #129	; 0x81
 800137c:	05db      	lsls	r3, r3, #23
 800137e:	9301      	str	r3, [sp, #4]
 8001380:	2300      	movs	r3, #0
 8001382:	9300      	str	r3, [sp, #0]
 8001384:	1c23      	adds	r3, r4, #0
 8001386:	f000 fa77 	bl	8001878 <piregler_init>
	while (1) {
		if (xSemaphoreTake(ReglerSemaphore,MAX_DELAY_REGLER_SEMAPHORE) == pdTRUE) {
 800138a:	4b1b      	ldr	r3, [pc, #108]	; (80013f8 <ReglerISTTask+0xa4>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	2164      	movs	r1, #100	; 0x64
 8001390:	0018      	movs	r0, r3
 8001392:	f005 faa9 	bl	80068e8 <xQueueSemaphoreTake>
 8001396:	0003      	movs	r3, r0
 8001398:	2b01      	cmp	r3, #1
 800139a:	d1f6      	bne.n	800138a <ReglerISTTask+0x36>
			dist = readVCNL4040(VCNL4040_ADDR, (VCNL4040_PS_DATA)); //Read distance of sensor
 800139c:	2108      	movs	r1, #8
 800139e:	20c0      	movs	r0, #192	; 0xc0
 80013a0:	f000 fb82 	bl	8001aa8 <readVCNL4040>
 80013a4:	0003      	movs	r3, r0
 80013a6:	60fb      	str	r3, [r7, #12]
			piregler.val = (float) dist*DISTANCE_SCALER; //Set value to the piregler
 80013a8:	68f8      	ldr	r0, [r7, #12]
 80013aa:	f7ff fdfd 	bl	8000fa8 <__aeabi_i2f>
 80013ae:	1c03      	adds	r3, r0, #0
 80013b0:	4912      	ldr	r1, [pc, #72]	; (80013fc <ReglerISTTask+0xa8>)
 80013b2:	1c18      	adds	r0, r3, #0
 80013b4:	f7ff faf6 	bl	80009a4 <__aeabi_fmul>
 80013b8:	1c03      	adds	r3, r0, #0
 80013ba:	1c1a      	adds	r2, r3, #0
 80013bc:	4b0a      	ldr	r3, [pc, #40]	; (80013e8 <ReglerISTTask+0x94>)
 80013be:	605a      	str	r2, [r3, #4]
			user_pwm_setvalue(ctl_pi(&piregler)); //Run piregler and set the new pwm duty-cycle
 80013c0:	4b09      	ldr	r3, [pc, #36]	; (80013e8 <ReglerISTTask+0x94>)
 80013c2:	0018      	movs	r0, r3
 80013c4:	f000 fadd 	bl	8001982 <ctl_pi>
 80013c8:	1c03      	adds	r3, r0, #0
 80013ca:	1c18      	adds	r0, r3, #0
 80013cc:	f000 f81a 	bl	8001404 <user_pwm_setvalue>
			xSemaphoreGive(DisplaySemaphore);
 80013d0:	4b0b      	ldr	r3, [pc, #44]	; (8001400 <ReglerISTTask+0xac>)
 80013d2:	6818      	ldr	r0, [r3, #0]
 80013d4:	2300      	movs	r3, #0
 80013d6:	2200      	movs	r2, #0
 80013d8:	2100      	movs	r1, #0
 80013da:	f005 f836 	bl	800644a <xQueueGenericSend>
		if (xSemaphoreTake(ReglerSemaphore,MAX_DELAY_REGLER_SEMAPHORE) == pdTRUE) {
 80013de:	e7d4      	b.n	800138a <ReglerISTTask+0x36>
 80013e0:	41080000 	.word	0x41080000
 80013e4:	45d9d000 	.word	0x45d9d000
 80013e8:	200021e8 	.word	0x200021e8
 80013ec:	3ba3d70a 	.word	0x3ba3d70a
 80013f0:	447a0000 	.word	0x447a0000
 80013f4:	c47a0000 	.word	0xc47a0000
 80013f8:	200021e4 	.word	0x200021e4
 80013fc:	40400000 	.word	0x40400000
 8001400:	20002214 	.word	0x20002214

08001404 <user_pwm_setvalue>:

/**
 * Set dutycyle of PWM-Output
 * Note: Value must be between PWM_MAX_VAL and PWM_MIN_VAL
 */
static void user_pwm_setvalue(float value) {
 8001404:	b590      	push	{r4, r7, lr}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
	static int32_t pwmvalue = PWM_START_VALUE;
	pwmvalue = pwmvalue - (value / PWM_SCALER);
 800140c:	4b17      	ldr	r3, [pc, #92]	; (800146c <user_pwm_setvalue+0x68>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	0018      	movs	r0, r3
 8001412:	f7ff fdc9 	bl	8000fa8 <__aeabi_i2f>
 8001416:	1c04      	adds	r4, r0, #0
 8001418:	4915      	ldr	r1, [pc, #84]	; (8001470 <user_pwm_setvalue+0x6c>)
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f7ff f8f8 	bl	8000610 <__aeabi_fdiv>
 8001420:	1c03      	adds	r3, r0, #0
 8001422:	1c19      	adds	r1, r3, #0
 8001424:	1c20      	adds	r0, r4, #0
 8001426:	f7ff fbd7 	bl	8000bd8 <__aeabi_fsub>
 800142a:	1c03      	adds	r3, r0, #0
 800142c:	1c18      	adds	r0, r3, #0
 800142e:	f7ff fd9b 	bl	8000f68 <__aeabi_f2iz>
 8001432:	0002      	movs	r2, r0
 8001434:	4b0d      	ldr	r3, [pc, #52]	; (800146c <user_pwm_setvalue+0x68>)
 8001436:	601a      	str	r2, [r3, #0]
	//Limit output of PWM
	if (pwmvalue > PWM_MAX_VAL) {
 8001438:	4b0c      	ldr	r3, [pc, #48]	; (800146c <user_pwm_setvalue+0x68>)
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	23e1      	movs	r3, #225	; 0xe1
 800143e:	00db      	lsls	r3, r3, #3
 8001440:	429a      	cmp	r2, r3
 8001442:	dd03      	ble.n	800144c <user_pwm_setvalue+0x48>
		pwmvalue = PWM_MAX_VAL;
 8001444:	4b09      	ldr	r3, [pc, #36]	; (800146c <user_pwm_setvalue+0x68>)
 8001446:	22e1      	movs	r2, #225	; 0xe1
 8001448:	00d2      	lsls	r2, r2, #3
 800144a:	601a      	str	r2, [r3, #0]
	}
	if (pwmvalue <= PWM_MIN_VAL) {
 800144c:	4b07      	ldr	r3, [pc, #28]	; (800146c <user_pwm_setvalue+0x68>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2b00      	cmp	r3, #0
 8001452:	dc02      	bgt.n	800145a <user_pwm_setvalue+0x56>
		pwmvalue = PWM_MIN_VAL;
 8001454:	4b05      	ldr	r3, [pc, #20]	; (800146c <user_pwm_setvalue+0x68>)
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
	}
	TIM1->CCR4 = pwmvalue; //Set DutyCylcle in timer-register
 800145a:	4b04      	ldr	r3, [pc, #16]	; (800146c <user_pwm_setvalue+0x68>)
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	4b05      	ldr	r3, [pc, #20]	; (8001474 <user_pwm_setvalue+0x70>)
 8001460:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001462:	46c0      	nop			; (mov r8, r8)
 8001464:	46bd      	mov	sp, r7
 8001466:	b003      	add	sp, #12
 8001468:	bd90      	pop	{r4, r7, pc}
 800146a:	46c0      	nop			; (mov r8, r8)
 800146c:	20000000 	.word	0x20000000
 8001470:	44960000 	.word	0x44960000
 8001474:	40012c00 	.word	0x40012c00

08001478 <readCurrent>:

/**
 * Read out ADC with the current value trough the FET
 */
static uint32_t readCurrent(void) {
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
	ADC_Select_CH0();
 800147e:	f000 fe93 	bl	80021a8 <ADC_Select_CH0>
	HAL_ADC_Start(&hadc);
 8001482:	4b19      	ldr	r3, [pc, #100]	; (80014e8 <readCurrent+0x70>)
 8001484:	0018      	movs	r0, r3
 8001486:	f001 fab5 	bl	80029f4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, MAX_ADC_TIMEOUT);
 800148a:	23fa      	movs	r3, #250	; 0xfa
 800148c:	009a      	lsls	r2, r3, #2
 800148e:	4b16      	ldr	r3, [pc, #88]	; (80014e8 <readCurrent+0x70>)
 8001490:	0011      	movs	r1, r2
 8001492:	0018      	movs	r0, r3
 8001494:	f001 fb42 	bl	8002b1c <HAL_ADC_PollForConversion>
	uint32_t current = HAL_ADC_GetValue(&hadc);
 8001498:	4b13      	ldr	r3, [pc, #76]	; (80014e8 <readCurrent+0x70>)
 800149a:	0018      	movs	r0, r3
 800149c:	f001 fbd6 	bl	8002c4c <HAL_ADC_GetValue>
 80014a0:	0003      	movs	r3, r0
 80014a2:	607b      	str	r3, [r7, #4]
	HAL_ADC_Stop(&hadc);
 80014a4:	4b10      	ldr	r3, [pc, #64]	; (80014e8 <readCurrent+0x70>)
 80014a6:	0018      	movs	r0, r3
 80014a8:	f001 faf8 	bl	8002a9c <HAL_ADC_Stop>
	//Calculate the current trough the Magnet in [mA]
	current = (COVERTION_A_TO_MA * (float) current) / ADC_MAX_VALUE;
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f7ff fdc1 	bl	8001034 <__aeabi_ui2f>
 80014b2:	1c03      	adds	r3, r0, #0
 80014b4:	490d      	ldr	r1, [pc, #52]	; (80014ec <readCurrent+0x74>)
 80014b6:	1c18      	adds	r0, r3, #0
 80014b8:	f7ff fa74 	bl	80009a4 <__aeabi_fmul>
 80014bc:	1c03      	adds	r3, r0, #0
 80014be:	218b      	movs	r1, #139	; 0x8b
 80014c0:	05c9      	lsls	r1, r1, #23
 80014c2:	1c18      	adds	r0, r3, #0
 80014c4:	f7ff f8a4 	bl	8000610 <__aeabi_fdiv>
 80014c8:	1c03      	adds	r3, r0, #0
 80014ca:	1c18      	adds	r0, r3, #0
 80014cc:	f7fe feec 	bl	80002a8 <__aeabi_f2uiz>
 80014d0:	0003      	movs	r3, r0
 80014d2:	607b      	str	r3, [r7, #4]
	current = current ^ 0b11;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2203      	movs	r2, #3
 80014d8:	4053      	eors	r3, r2
 80014da:	607b      	str	r3, [r7, #4]
	return (current);
 80014dc:	687b      	ldr	r3, [r7, #4]
}
 80014de:	0018      	movs	r0, r3
 80014e0:	46bd      	mov	sp, r7
 80014e2:	b002      	add	sp, #8
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	46c0      	nop			; (mov r8, r8)
 80014e8:	20002344 	.word	0x20002344
 80014ec:	447a0000 	.word	0x447a0000

080014f0 <readTemp>:

/**
 * Read out ADC with the current temperature from the magnet
 */
static uint32_t readTemp(void) {
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
	ADC_Select_CH3();
 80014f6:	f000 fe7b 	bl	80021f0 <ADC_Select_CH3>
	HAL_ADC_Start(&hadc);
 80014fa:	4b12      	ldr	r3, [pc, #72]	; (8001544 <readTemp+0x54>)
 80014fc:	0018      	movs	r0, r3
 80014fe:	f001 fa79 	bl	80029f4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, MAX_ADC_TIMEOUT);
 8001502:	23fa      	movs	r3, #250	; 0xfa
 8001504:	009a      	lsls	r2, r3, #2
 8001506:	4b0f      	ldr	r3, [pc, #60]	; (8001544 <readTemp+0x54>)
 8001508:	0011      	movs	r1, r2
 800150a:	0018      	movs	r0, r3
 800150c:	f001 fb06 	bl	8002b1c <HAL_ADC_PollForConversion>
	uint32_t temp = HAL_ADC_GetValue(&hadc);
 8001510:	4b0c      	ldr	r3, [pc, #48]	; (8001544 <readTemp+0x54>)
 8001512:	0018      	movs	r0, r3
 8001514:	f001 fb9a 	bl	8002c4c <HAL_ADC_GetValue>
 8001518:	0003      	movs	r3, r0
 800151a:	607b      	str	r3, [r7, #4]
	temp = HAL_ADC_GetValue(&hadc);
 800151c:	4b09      	ldr	r3, [pc, #36]	; (8001544 <readTemp+0x54>)
 800151e:	0018      	movs	r0, r3
 8001520:	f001 fb94 	bl	8002c4c <HAL_ADC_GetValue>
 8001524:	0003      	movs	r3, r0
 8001526:	607b      	str	r3, [r7, #4]
	HAL_ADC_Stop(&hadc);
 8001528:	4b06      	ldr	r3, [pc, #24]	; (8001544 <readTemp+0x54>)
 800152a:	0018      	movs	r0, r3
 800152c:	f001 fab6 	bl	8002a9c <HAL_ADC_Stop>
	temp = temp ^ 0b11;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2203      	movs	r2, #3
 8001534:	4053      	eors	r3, r2
 8001536:	607b      	str	r3, [r7, #4]
	//temp = (COVERTION_A_TO_MA * (float) temp) / ADC_MAX_VALUE;
	return (temp);
 8001538:	687b      	ldr	r3, [r7, #4]
}
 800153a:	0018      	movs	r0, r3
 800153c:	46bd      	mov	sp, r7
 800153e:	b002      	add	sp, #8
 8001540:	bd80      	pop	{r7, pc}
 8001542:	46c0      	nop			; (mov r8, r8)
 8001544:	20002344 	.word	0x20002344

08001548 <calc_weight>:

/**
 * Calculation weight
 */
static void calc_weight(uint16_t current) {
 8001548:	b590      	push	{r4, r7, lr}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	0002      	movs	r2, r0
 8001550:	1dbb      	adds	r3, r7, #6
 8001552:	801a      	strh	r2, [r3, #0]
	//static const float a3 = -0.000001443;
	//weight = a0+(current*a1)+((uint32_t)current*current)*a2+((uint32_t)current*current*current)*a3;
	static const float a1 = 0.328283;
	static const float a2 = 0.00115748;
	static const float a3 = -0.00000018519;
	weight = +(current*a1)+((uint32_t)current*current)*a2+((uint32_t)current*current*current)*a3;
 8001554:	1dbb      	adds	r3, r7, #6
 8001556:	881b      	ldrh	r3, [r3, #0]
 8001558:	0018      	movs	r0, r3
 800155a:	f7ff fd25 	bl	8000fa8 <__aeabi_i2f>
 800155e:	1c02      	adds	r2, r0, #0
 8001560:	4b1f      	ldr	r3, [pc, #124]	; (80015e0 <calc_weight+0x98>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	1c19      	adds	r1, r3, #0
 8001566:	1c10      	adds	r0, r2, #0
 8001568:	f7ff fa1c 	bl	80009a4 <__aeabi_fmul>
 800156c:	1c03      	adds	r3, r0, #0
 800156e:	1c1c      	adds	r4, r3, #0
 8001570:	1dbb      	adds	r3, r7, #6
 8001572:	881b      	ldrh	r3, [r3, #0]
 8001574:	1dba      	adds	r2, r7, #6
 8001576:	8812      	ldrh	r2, [r2, #0]
 8001578:	4353      	muls	r3, r2
 800157a:	0018      	movs	r0, r3
 800157c:	f7ff fd5a 	bl	8001034 <__aeabi_ui2f>
 8001580:	1c02      	adds	r2, r0, #0
 8001582:	4b18      	ldr	r3, [pc, #96]	; (80015e4 <calc_weight+0x9c>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	1c19      	adds	r1, r3, #0
 8001588:	1c10      	adds	r0, r2, #0
 800158a:	f7ff fa0b 	bl	80009a4 <__aeabi_fmul>
 800158e:	1c03      	adds	r3, r0, #0
 8001590:	1c19      	adds	r1, r3, #0
 8001592:	1c20      	adds	r0, r4, #0
 8001594:	f7fe fea0 	bl	80002d8 <__aeabi_fadd>
 8001598:	1c03      	adds	r3, r0, #0
 800159a:	1c1c      	adds	r4, r3, #0
 800159c:	1dbb      	adds	r3, r7, #6
 800159e:	881b      	ldrh	r3, [r3, #0]
 80015a0:	1dba      	adds	r2, r7, #6
 80015a2:	8812      	ldrh	r2, [r2, #0]
 80015a4:	4353      	muls	r3, r2
 80015a6:	1dba      	adds	r2, r7, #6
 80015a8:	8812      	ldrh	r2, [r2, #0]
 80015aa:	4353      	muls	r3, r2
 80015ac:	0018      	movs	r0, r3
 80015ae:	f7ff fd41 	bl	8001034 <__aeabi_ui2f>
 80015b2:	1c02      	adds	r2, r0, #0
 80015b4:	4b0c      	ldr	r3, [pc, #48]	; (80015e8 <calc_weight+0xa0>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	1c19      	adds	r1, r3, #0
 80015ba:	1c10      	adds	r0, r2, #0
 80015bc:	f7ff f9f2 	bl	80009a4 <__aeabi_fmul>
 80015c0:	1c03      	adds	r3, r0, #0
 80015c2:	1c19      	adds	r1, r3, #0
 80015c4:	1c20      	adds	r0, r4, #0
 80015c6:	f7fe fe87 	bl	80002d8 <__aeabi_fadd>
 80015ca:	1c03      	adds	r3, r0, #0
 80015cc:	1c18      	adds	r0, r3, #0
 80015ce:	f7fe fe6b 	bl	80002a8 <__aeabi_f2uiz>
 80015d2:	0002      	movs	r2, r0
 80015d4:	4b05      	ldr	r3, [pc, #20]	; (80015ec <calc_weight+0xa4>)
 80015d6:	601a      	str	r2, [r3, #0]
}
 80015d8:	46c0      	nop			; (mov r8, r8)
 80015da:	46bd      	mov	sp, r7
 80015dc:	b003      	add	sp, #12
 80015de:	bd90      	pop	{r4, r7, pc}
 80015e0:	0800975c 	.word	0x0800975c
 80015e4:	08009760 	.word	0x08009760
 80015e8:	08009764 	.word	0x08009764
 80015ec:	200000ac 	.word	0x200000ac

080015f0 <current_average>:

static uint32_t current_average(uint32_t current){
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
	static uint32_t n = 0;
	static const uint16_t num_sample = 3;
	static uint32_t sample_current[3] = {0,0,0};
	uint32_t avg_current = 0;
 80015f8:	2300      	movs	r3, #0
 80015fa:	60fb      	str	r3, [r7, #12]
	sample_current[n] = current;
 80015fc:	4b18      	ldr	r3, [pc, #96]	; (8001660 <current_average+0x70>)
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	4b18      	ldr	r3, [pc, #96]	; (8001664 <current_average+0x74>)
 8001602:	0092      	lsls	r2, r2, #2
 8001604:	6879      	ldr	r1, [r7, #4]
 8001606:	50d1      	str	r1, [r2, r3]
	if(++n == num_sample){
 8001608:	4b15      	ldr	r3, [pc, #84]	; (8001660 <current_average+0x70>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	1c5a      	adds	r2, r3, #1
 800160e:	4b14      	ldr	r3, [pc, #80]	; (8001660 <current_average+0x70>)
 8001610:	601a      	str	r2, [r3, #0]
 8001612:	4b13      	ldr	r3, [pc, #76]	; (8001660 <current_average+0x70>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a14      	ldr	r2, [pc, #80]	; (8001668 <current_average+0x78>)
 8001618:	8812      	ldrh	r2, [r2, #0]
 800161a:	4293      	cmp	r3, r2
 800161c:	d102      	bne.n	8001624 <current_average+0x34>
		n = 0;
 800161e:	4b10      	ldr	r3, [pc, #64]	; (8001660 <current_average+0x70>)
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
	}
	for(int i = 0; i < num_sample; i++){
 8001624:	2300      	movs	r3, #0
 8001626:	60bb      	str	r3, [r7, #8]
 8001628:	e009      	b.n	800163e <current_average+0x4e>
		avg_current += sample_current[i];
 800162a:	4b0e      	ldr	r3, [pc, #56]	; (8001664 <current_average+0x74>)
 800162c:	68ba      	ldr	r2, [r7, #8]
 800162e:	0092      	lsls	r2, r2, #2
 8001630:	58d3      	ldr	r3, [r2, r3]
 8001632:	68fa      	ldr	r2, [r7, #12]
 8001634:	18d3      	adds	r3, r2, r3
 8001636:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < num_sample; i++){
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	3301      	adds	r3, #1
 800163c:	60bb      	str	r3, [r7, #8]
 800163e:	4b0a      	ldr	r3, [pc, #40]	; (8001668 <current_average+0x78>)
 8001640:	881b      	ldrh	r3, [r3, #0]
 8001642:	001a      	movs	r2, r3
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	4293      	cmp	r3, r2
 8001648:	dbef      	blt.n	800162a <current_average+0x3a>
	}
	return(avg_current/num_sample);
 800164a:	4b07      	ldr	r3, [pc, #28]	; (8001668 <current_average+0x78>)
 800164c:	881b      	ldrh	r3, [r3, #0]
 800164e:	0019      	movs	r1, r3
 8001650:	68f8      	ldr	r0, [r7, #12]
 8001652:	f7fe fd63 	bl	800011c <__udivsi3>
 8001656:	0003      	movs	r3, r0
}
 8001658:	0018      	movs	r0, r3
 800165a:	46bd      	mov	sp, r7
 800165c:	b004      	add	sp, #16
 800165e:	bd80      	pop	{r7, pc}
 8001660:	200000b4 	.word	0x200000b4
 8001664:	200000b8 	.word	0x200000b8
 8001668:	08009768 	.word	0x08009768

0800166c <oled_init>:
extern SemaphoreHandle_t I2CSemaphore;

/*
 * Init for display
 */
void oled_init() {
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
	OLEDSemaphore = xSemaphoreCreateMutex();
 8001670:	2001      	movs	r0, #1
 8001672:	f004 fece 	bl	8006412 <xQueueCreateMutex>
 8001676:	0002      	movs	r2, r0
 8001678:	4b15      	ldr	r3, [pc, #84]	; (80016d0 <oled_init+0x64>)
 800167a:	601a      	str	r2, [r3, #0]
	xSemaphoreGive(OLEDSemaphore);
 800167c:	4b14      	ldr	r3, [pc, #80]	; (80016d0 <oled_init+0x64>)
 800167e:	6818      	ldr	r0, [r3, #0]
 8001680:	2300      	movs	r3, #0
 8001682:	2200      	movs	r2, #0
 8001684:	2100      	movs	r1, #0
 8001686:	f004 fee0 	bl	800644a <xQueueGenericSend>
	HAL_GPIO_WritePin(GPIOB, OLED_RST_PIN, GPIO_PIN_SET); // Set LCD-Reset-Pin
 800168a:	4b12      	ldr	r3, [pc, #72]	; (80016d4 <oled_init+0x68>)
 800168c:	2201      	movs	r2, #1
 800168e:	2104      	movs	r1, #4
 8001690:	0018      	movs	r0, r3
 8001692:	f002 f815 	bl	80036c0 <HAL_GPIO_WritePin>
	if (xSemaphoreTake(I2CSemaphore,DELAY_MAX_I2C_SEMAPHORE) == pdTRUE) {
 8001696:	4b10      	ldr	r3, [pc, #64]	; (80016d8 <oled_init+0x6c>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	22fa      	movs	r2, #250	; 0xfa
 800169c:	0092      	lsls	r2, r2, #2
 800169e:	0011      	movs	r1, r2
 80016a0:	0018      	movs	r0, r3
 80016a2:	f005 f921 	bl	80068e8 <xQueueSemaphoreTake>
 80016a6:	0003      	movs	r3, r0
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d10e      	bne.n	80016ca <oled_init+0x5e>
		ssd1306_Init();
 80016ac:	f007 f8a0 	bl	80087f0 <ssd1306_Init>
		ssd1306_SetDisplayOn(OLED_ON);
 80016b0:	2001      	movs	r0, #1
 80016b2:	f007 fac5 	bl	8008c40 <ssd1306_SetDisplayOn>
		ssd1306_Fill(White);
 80016b6:	2001      	movs	r0, #1
 80016b8:	f007 f906 	bl	80088c8 <ssd1306_Fill>
		xSemaphoreGive(I2CSemaphore);
 80016bc:	4b06      	ldr	r3, [pc, #24]	; (80016d8 <oled_init+0x6c>)
 80016be:	6818      	ldr	r0, [r3, #0]
 80016c0:	2300      	movs	r3, #0
 80016c2:	2200      	movs	r2, #0
 80016c4:	2100      	movs	r1, #0
 80016c6:	f004 fec0 	bl	800644a <xQueueGenericSend>
	}
}
 80016ca:	46c0      	nop			; (mov r8, r8)
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	2000220c 	.word	0x2000220c
 80016d4:	48000400 	.word	0x48000400
 80016d8:	20002210 	.word	0x20002210

080016dc <oled_printf>:

/*
 * Print one line of text on the display
 */
int oled_printf(uint32_t line, SSD1306_COLOR color, const char *fmt, ...) {
 80016dc:	b40c      	push	{r2, r3}
 80016de:	b590      	push	{r4, r7, lr}
 80016e0:	b08b      	sub	sp, #44	; 0x2c
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
 80016e6:	000a      	movs	r2, r1
 80016e8:	1cfb      	adds	r3, r7, #3
 80016ea:	701a      	strb	r2, [r3, #0]
	char s[22];
	va_list ap;
	if (xSemaphoreTake(OLEDSemaphore,DELAY_MAX_I2C_SEMAPHORE) == pdTRUE) {
 80016ec:	4b27      	ldr	r3, [pc, #156]	; (800178c <oled_printf+0xb0>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	22fa      	movs	r2, #250	; 0xfa
 80016f2:	0092      	lsls	r2, r2, #2
 80016f4:	0011      	movs	r1, r2
 80016f6:	0018      	movs	r0, r3
 80016f8:	f005 f8f6 	bl	80068e8 <xQueueSemaphoreTake>
 80016fc:	0003      	movs	r3, r0
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d13c      	bne.n	800177c <oled_printf+0xa0>
		va_start(ap, fmt);
 8001702:	2334      	movs	r3, #52	; 0x34
 8001704:	2208      	movs	r2, #8
 8001706:	4694      	mov	ip, r2
 8001708:	44bc      	add	ip, r7
 800170a:	4463      	add	r3, ip
 800170c:	60fb      	str	r3, [r7, #12]
		vsnprintf(s, sizeof(s), fmt, ap);
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001712:	2410      	movs	r4, #16
 8001714:	1938      	adds	r0, r7, r4
 8001716:	2116      	movs	r1, #22
 8001718:	f007 fb66 	bl	8008de8 <vsniprintf>
		va_end(ap);
		if (xSemaphoreTake(I2CSemaphore,DELAY_MAX_I2C_SEMAPHORE) == pdTRUE) {
 800171c:	4b1c      	ldr	r3, [pc, #112]	; (8001790 <oled_printf+0xb4>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	22fa      	movs	r2, #250	; 0xfa
 8001722:	0092      	lsls	r2, r2, #2
 8001724:	0011      	movs	r1, r2
 8001726:	0018      	movs	r0, r3
 8001728:	f005 f8de 	bl	80068e8 <xQueueSemaphoreTake>
 800172c:	0003      	movs	r3, r0
 800172e:	2b01      	cmp	r3, #1
 8001730:	d11d      	bne.n	800176e <oled_printf+0x92>
			ssd1306_SetCursor(OLED_BORDER_OFFSET,
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	b2db      	uxtb	r3, r3
 8001736:	1c1a      	adds	r2, r3, #0
 8001738:	0112      	lsls	r2, r2, #4
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	18db      	adds	r3, r3, r3
 800173e:	b2db      	uxtb	r3, r3
 8001740:	3b0f      	subs	r3, #15
 8001742:	b2db      	uxtb	r3, r3
 8001744:	0019      	movs	r1, r3
 8001746:	200f      	movs	r0, #15
 8001748:	f007 fa48 	bl	8008bdc <ssd1306_SetCursor>
					(line - 1) * OLED_LINE_HEIGHT + OLED_BORDER_OFFSET);
			ssd1306_WriteString(s, Font_6x8, color);
 800174c:	1cfb      	adds	r3, r7, #3
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	4a10      	ldr	r2, [pc, #64]	; (8001794 <oled_printf+0xb8>)
 8001752:	1938      	adds	r0, r7, r4
 8001754:	6811      	ldr	r1, [r2, #0]
 8001756:	6852      	ldr	r2, [r2, #4]
 8001758:	f007 fa16 	bl	8008b88 <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 800175c:	f007 f8d8 	bl	8008910 <ssd1306_UpdateScreen>
			xSemaphoreGive(I2CSemaphore);
 8001760:	4b0b      	ldr	r3, [pc, #44]	; (8001790 <oled_printf+0xb4>)
 8001762:	6818      	ldr	r0, [r3, #0]
 8001764:	2300      	movs	r3, #0
 8001766:	2200      	movs	r2, #0
 8001768:	2100      	movs	r1, #0
 800176a:	f004 fe6e 	bl	800644a <xQueueGenericSend>
		}
		xSemaphoreGive(OLEDSemaphore);
 800176e:	4b07      	ldr	r3, [pc, #28]	; (800178c <oled_printf+0xb0>)
 8001770:	6818      	ldr	r0, [r3, #0]
 8001772:	2300      	movs	r3, #0
 8001774:	2200      	movs	r2, #0
 8001776:	2100      	movs	r1, #0
 8001778:	f004 fe67 	bl	800644a <xQueueGenericSend>
	}
	return 0;
 800177c:	2300      	movs	r3, #0
}
 800177e:	0018      	movs	r0, r3
 8001780:	46bd      	mov	sp, r7
 8001782:	b00b      	add	sp, #44	; 0x2c
 8001784:	bc90      	pop	{r4, r7}
 8001786:	bc08      	pop	{r3}
 8001788:	b002      	add	sp, #8
 800178a:	4718      	bx	r3
 800178c:	2000220c 	.word	0x2000220c
 8001790:	20002210 	.word	0x20002210
 8001794:	20000014 	.word	0x20000014

08001798 <oled_print_weight>:

/*
 * Print weight with the legend of the buttons on the display
 */
int oled_print_weight(SSD1306_COLOR color,const char *fmt, ...) {
 8001798:	b40e      	push	{r1, r2, r3}
 800179a:	b590      	push	{r4, r7, lr}
 800179c:	b08a      	sub	sp, #40	; 0x28
 800179e:	af00      	add	r7, sp, #0
 80017a0:	0002      	movs	r2, r0
 80017a2:	1dfb      	adds	r3, r7, #7
 80017a4:	701a      	strb	r2, [r3, #0]
	char s[22];
	va_list ap;
	if (xSemaphoreTake(OLEDSemaphore,DELAY_MAX_I2C_SEMAPHORE) == pdTRUE) {
 80017a6:	4b2e      	ldr	r3, [pc, #184]	; (8001860 <oled_print_weight+0xc8>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	22fa      	movs	r2, #250	; 0xfa
 80017ac:	0092      	lsls	r2, r2, #2
 80017ae:	0011      	movs	r1, r2
 80017b0:	0018      	movs	r0, r3
 80017b2:	f005 f899 	bl	80068e8 <xQueueSemaphoreTake>
 80017b6:	0003      	movs	r3, r0
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d148      	bne.n	800184e <oled_print_weight+0xb6>
		va_start(ap, fmt);
 80017bc:	2338      	movs	r3, #56	; 0x38
 80017be:	18fb      	adds	r3, r7, r3
 80017c0:	60fb      	str	r3, [r7, #12]
		vsnprintf(s, sizeof(s), fmt, ap);
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80017c6:	2410      	movs	r4, #16
 80017c8:	1938      	adds	r0, r7, r4
 80017ca:	2116      	movs	r1, #22
 80017cc:	f007 fb0c 	bl	8008de8 <vsniprintf>
		va_end(ap);
		if (xSemaphoreTake(I2CSemaphore,DELAY_MAX_I2C_SEMAPHORE) == pdTRUE) {
 80017d0:	4b24      	ldr	r3, [pc, #144]	; (8001864 <oled_print_weight+0xcc>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	22fa      	movs	r2, #250	; 0xfa
 80017d6:	0092      	lsls	r2, r2, #2
 80017d8:	0011      	movs	r1, r2
 80017da:	0018      	movs	r0, r3
 80017dc:	f005 f884 	bl	80068e8 <xQueueSemaphoreTake>
 80017e0:	0003      	movs	r3, r0
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d12c      	bne.n	8001840 <oled_print_weight+0xa8>
			//Legend of the buttons
			ssd1306_SetCursor(LEGEND_X_OFFSET, LEGEND_Y_BOTTOM_LINE);
 80017e6:	213c      	movs	r1, #60	; 0x3c
 80017e8:	2068      	movs	r0, #104	; 0x68
 80017ea:	f007 f9f7 	bl	8008bdc <ssd1306_SetCursor>
			ssd1306_WriteString("Tara",  Font_6x8, color);
 80017ee:	1dfb      	adds	r3, r7, #7
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	4a1d      	ldr	r2, [pc, #116]	; (8001868 <oled_print_weight+0xd0>)
 80017f4:	481d      	ldr	r0, [pc, #116]	; (800186c <oled_print_weight+0xd4>)
 80017f6:	6811      	ldr	r1, [r2, #0]
 80017f8:	6852      	ldr	r2, [r2, #4]
 80017fa:	f007 f9c5 	bl	8008b88 <ssd1306_WriteString>
			ssd1306_SetCursor(LEGEND_X_OFFSET, LEGEND_Y_TOP_LINE);
 80017fe:	210a      	movs	r1, #10
 8001800:	2068      	movs	r0, #104	; 0x68
 8001802:	f007 f9eb 	bl	8008bdc <ssd1306_SetCursor>
			ssd1306_WriteString("g/oz",  Font_6x8, color);
 8001806:	1dfb      	adds	r3, r7, #7
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	4a17      	ldr	r2, [pc, #92]	; (8001868 <oled_print_weight+0xd0>)
 800180c:	4818      	ldr	r0, [pc, #96]	; (8001870 <oled_print_weight+0xd8>)
 800180e:	6811      	ldr	r1, [r2, #0]
 8001810:	6852      	ldr	r2, [r2, #4]
 8001812:	f007 f9b9 	bl	8008b88 <ssd1306_WriteString>

			//Print out weight
			ssd1306_SetCursor(OLED_BORDER_OFFSET, OLED_WEIGHT_LINE_POSITION);
 8001816:	2128      	movs	r1, #40	; 0x28
 8001818:	200f      	movs	r0, #15
 800181a:	f007 f9df 	bl	8008bdc <ssd1306_SetCursor>
			ssd1306_WriteString(s,  Font_16x26, color);
 800181e:	1dfb      	adds	r3, r7, #7
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	4a14      	ldr	r2, [pc, #80]	; (8001874 <oled_print_weight+0xdc>)
 8001824:	1938      	adds	r0, r7, r4
 8001826:	6811      	ldr	r1, [r2, #0]
 8001828:	6852      	ldr	r2, [r2, #4]
 800182a:	f007 f9ad 	bl	8008b88 <ssd1306_WriteString>

			//Update screen with the new values
			ssd1306_UpdateScreen();
 800182e:	f007 f86f 	bl	8008910 <ssd1306_UpdateScreen>
			xSemaphoreGive(I2CSemaphore);
 8001832:	4b0c      	ldr	r3, [pc, #48]	; (8001864 <oled_print_weight+0xcc>)
 8001834:	6818      	ldr	r0, [r3, #0]
 8001836:	2300      	movs	r3, #0
 8001838:	2200      	movs	r2, #0
 800183a:	2100      	movs	r1, #0
 800183c:	f004 fe05 	bl	800644a <xQueueGenericSend>
		}
		xSemaphoreGive(OLEDSemaphore);
 8001840:	4b07      	ldr	r3, [pc, #28]	; (8001860 <oled_print_weight+0xc8>)
 8001842:	6818      	ldr	r0, [r3, #0]
 8001844:	2300      	movs	r3, #0
 8001846:	2200      	movs	r2, #0
 8001848:	2100      	movs	r1, #0
 800184a:	f004 fdfe 	bl	800644a <xQueueGenericSend>
	}
	return 0;
 800184e:	2300      	movs	r3, #0
}
 8001850:	0018      	movs	r0, r3
 8001852:	46bd      	mov	sp, r7
 8001854:	b00a      	add	sp, #40	; 0x28
 8001856:	bc90      	pop	{r4, r7}
 8001858:	bc08      	pop	{r3}
 800185a:	b003      	add	sp, #12
 800185c:	4718      	bx	r3
 800185e:	46c0      	nop			; (mov r8, r8)
 8001860:	2000220c 	.word	0x2000220c
 8001864:	20002210 	.word	0x20002210
 8001868:	20000014 	.word	0x20000014
 800186c:	08009648 	.word	0x08009648
 8001870:	08009650 	.word	0x08009650
 8001874:	2000001c 	.word	0x2000001c

08001878 <piregler_init>:

/*
 * Initialisation of the controller
 */
void piregler_init(S_piregler *me, float idlevalue, float val, float kp,
		float mem, float ki, float low, float high, float ts) {
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	60b9      	str	r1, [r7, #8]
 8001882:	607a      	str	r2, [r7, #4]
 8001884:	603b      	str	r3, [r7, #0]
	me->idlevalue = idlevalue;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	68ba      	ldr	r2, [r7, #8]
 800188a:	601a      	str	r2, [r3, #0]
	me->val = val;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	605a      	str	r2, [r3, #4]
	me->kp = kp;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	683a      	ldr	r2, [r7, #0]
 8001896:	609a      	str	r2, [r3, #8]
	me->mem = mem;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	69ba      	ldr	r2, [r7, #24]
 800189c:	60da      	str	r2, [r3, #12]
	me->ki = ki;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	69fa      	ldr	r2, [r7, #28]
 80018a2:	611a      	str	r2, [r3, #16]
	me->low = low;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	6a3a      	ldr	r2, [r7, #32]
 80018a8:	615a      	str	r2, [r3, #20]
	me->high = high;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018ae:	619a      	str	r2, [r3, #24]
	me->ts = ts;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80018b4:	61da      	str	r2, [r3, #28]
}
 80018b6:	46c0      	nop			; (mov r8, r8)
 80018b8:	46bd      	mov	sp, r7
 80018ba:	b004      	add	sp, #16
 80018bc:	bd80      	pop	{r7, pc}
	...

080018c0 <integrate>:

/*
 * Integration
 */
static float integrate(S_piregler *me) {
 80018c0:	b590      	push	{r4, r7, lr}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
	static float integral = 0;
	integral  += me->ki*(((me->mem + me->error)/2)*me->ts);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	691c      	ldr	r4, [r3, #16]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	68da      	ldr	r2, [r3, #12]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6a1b      	ldr	r3, [r3, #32]
 80018d4:	1c19      	adds	r1, r3, #0
 80018d6:	1c10      	adds	r0, r2, #0
 80018d8:	f7fe fcfe 	bl	80002d8 <__aeabi_fadd>
 80018dc:	1c03      	adds	r3, r0, #0
 80018de:	2180      	movs	r1, #128	; 0x80
 80018e0:	05c9      	lsls	r1, r1, #23
 80018e2:	1c18      	adds	r0, r3, #0
 80018e4:	f7fe fe94 	bl	8000610 <__aeabi_fdiv>
 80018e8:	1c03      	adds	r3, r0, #0
 80018ea:	1c1a      	adds	r2, r3, #0
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	69db      	ldr	r3, [r3, #28]
 80018f0:	1c19      	adds	r1, r3, #0
 80018f2:	1c10      	adds	r0, r2, #0
 80018f4:	f7ff f856 	bl	80009a4 <__aeabi_fmul>
 80018f8:	1c03      	adds	r3, r0, #0
 80018fa:	1c19      	adds	r1, r3, #0
 80018fc:	1c20      	adds	r0, r4, #0
 80018fe:	f7ff f851 	bl	80009a4 <__aeabi_fmul>
 8001902:	1c03      	adds	r3, r0, #0
 8001904:	1c1a      	adds	r2, r3, #0
 8001906:	4b10      	ldr	r3, [pc, #64]	; (8001948 <integrate+0x88>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	1c19      	adds	r1, r3, #0
 800190c:	1c10      	adds	r0, r2, #0
 800190e:	f7fe fce3 	bl	80002d8 <__aeabi_fadd>
 8001912:	1c03      	adds	r3, r0, #0
 8001914:	1c1a      	adds	r2, r3, #0
 8001916:	4b0c      	ldr	r3, [pc, #48]	; (8001948 <integrate+0x88>)
 8001918:	601a      	str	r2, [r3, #0]
	integral = limit(integral,me->high,me->low);
 800191a:	4b0b      	ldr	r3, [pc, #44]	; (8001948 <integrate+0x88>)
 800191c:	6818      	ldr	r0, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6999      	ldr	r1, [r3, #24]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	695b      	ldr	r3, [r3, #20]
 8001926:	1c1a      	adds	r2, r3, #0
 8001928:	f000 f810 	bl	800194c <limit>
 800192c:	1c02      	adds	r2, r0, #0
 800192e:	4b06      	ldr	r3, [pc, #24]	; (8001948 <integrate+0x88>)
 8001930:	601a      	str	r2, [r3, #0]
	me->mem = me->error;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6a1a      	ldr	r2, [r3, #32]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	60da      	str	r2, [r3, #12]
	return integral;
 800193a:	4b03      	ldr	r3, [pc, #12]	; (8001948 <integrate+0x88>)
 800193c:	681b      	ldr	r3, [r3, #0]

}
 800193e:	1c18      	adds	r0, r3, #0
 8001940:	46bd      	mov	sp, r7
 8001942:	b003      	add	sp, #12
 8001944:	bd90      	pop	{r4, r7, pc}
 8001946:	46c0      	nop			; (mov r8, r8)
 8001948:	200000c4 	.word	0x200000c4

0800194c <limit>:

/*
 * Limit for Regler
 */
static float limit(float val, float highlim, float lowlim) {
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	60b9      	str	r1, [r7, #8]
 8001956:	607a      	str	r2, [r7, #4]
	if (val < lowlim)
 8001958:	6879      	ldr	r1, [r7, #4]
 800195a:	68f8      	ldr	r0, [r7, #12]
 800195c:	f7fe fc7c 	bl	8000258 <__aeabi_fcmplt>
 8001960:	1e03      	subs	r3, r0, #0
 8001962:	d001      	beq.n	8001968 <limit+0x1c>
		return lowlim;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	e008      	b.n	800197a <limit+0x2e>
	if (val > highlim)
 8001968:	68b9      	ldr	r1, [r7, #8]
 800196a:	68f8      	ldr	r0, [r7, #12]
 800196c:	f7fe fc88 	bl	8000280 <__aeabi_fcmpgt>
 8001970:	1e03      	subs	r3, r0, #0
 8001972:	d001      	beq.n	8001978 <limit+0x2c>
		return highlim;
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	e000      	b.n	800197a <limit+0x2e>
	return (val);
 8001978:	68fb      	ldr	r3, [r7, #12]
}
 800197a:	1c18      	adds	r0, r3, #0
 800197c:	46bd      	mov	sp, r7
 800197e:	b004      	add	sp, #16
 8001980:	bd80      	pop	{r7, pc}

08001982 <ctl_pi>:

/*
 * calc regler
 */
float ctl_pi(S_piregler *me) {
 8001982:	b590      	push	{r4, r7, lr}
 8001984:	b083      	sub	sp, #12
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
	me->error = me->idlevalue - me->val;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	1c19      	adds	r1, r3, #0
 8001994:	1c10      	adds	r0, r2, #0
 8001996:	f7ff f91f 	bl	8000bd8 <__aeabi_fsub>
 800199a:	1c03      	adds	r3, r0, #0
 800199c:	1c1a      	adds	r2, r3, #0
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	621a      	str	r2, [r3, #32]
	return (me->error*me->kp+integrate(me));
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6a1a      	ldr	r2, [r3, #32]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	1c19      	adds	r1, r3, #0
 80019ac:	1c10      	adds	r0, r2, #0
 80019ae:	f7fe fff9 	bl	80009a4 <__aeabi_fmul>
 80019b2:	1c03      	adds	r3, r0, #0
 80019b4:	1c1c      	adds	r4, r3, #0
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	0018      	movs	r0, r3
 80019ba:	f7ff ff81 	bl	80018c0 <integrate>
 80019be:	1c03      	adds	r3, r0, #0
 80019c0:	1c19      	adds	r1, r3, #0
 80019c2:	1c20      	adds	r0, r4, #0
 80019c4:	f7fe fc88 	bl	80002d8 <__aeabi_fadd>
 80019c8:	1c03      	adds	r3, r0, #0
}
 80019ca:	1c18      	adds	r0, r3, #0
 80019cc:	46bd      	mov	sp, r7
 80019ce:	b003      	add	sp, #12
 80019d0:	bd90      	pop	{r4, r7, pc}

080019d2 <initVCNL4040>:
#include "semphr.h"

extern I2C_HandleTypeDef hi2c1;
extern SemaphoreHandle_t I2CSemaphore;

void initVCNL4040(uint8_t addr){
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b082      	sub	sp, #8
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	0002      	movs	r2, r0
 80019da:	1dfb      	adds	r3, r7, #7
 80019dc:	701a      	strb	r2, [r3, #0]
	writeVCNL4040(addr,VCNL4040_PS_CONF3, 0b00010011, 0b00000111); // PS_CONF3_L & PS_MS
 80019de:	1dfb      	adds	r3, r7, #7
 80019e0:	7818      	ldrb	r0, [r3, #0]
 80019e2:	2307      	movs	r3, #7
 80019e4:	2213      	movs	r2, #19
 80019e6:	2104      	movs	r1, #4
 80019e8:	f000 f80c 	bl	8001a04 <writeVCNL4040>
	writeVCNL4040(addr,VCNL4040_PS_CONF1, 0b11001110, 0b00001000); // PS_CONF1_L & PS_CONF2_H
 80019ec:	1dfb      	adds	r3, r7, #7
 80019ee:	7818      	ldrb	r0, [r3, #0]
 80019f0:	2308      	movs	r3, #8
 80019f2:	22ce      	movs	r2, #206	; 0xce
 80019f4:	2103      	movs	r1, #3
 80019f6:	f000 f805 	bl	8001a04 <writeVCNL4040>
}
 80019fa:	46c0      	nop			; (mov r8, r8)
 80019fc:	46bd      	mov	sp, r7
 80019fe:	b002      	add	sp, #8
 8001a00:	bd80      	pop	{r7, pc}
	...

08001a04 <writeVCNL4040>:

bool writeVCNL4040(uint8_t addr, uint8_t command, uint8_t lowbyte, uint8_t highbyte){
 8001a04:	b5b0      	push	{r4, r5, r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af02      	add	r7, sp, #8
 8001a0a:	0005      	movs	r5, r0
 8001a0c:	000c      	movs	r4, r1
 8001a0e:	0010      	movs	r0, r2
 8001a10:	0019      	movs	r1, r3
 8001a12:	1dfb      	adds	r3, r7, #7
 8001a14:	1c2a      	adds	r2, r5, #0
 8001a16:	701a      	strb	r2, [r3, #0]
 8001a18:	1dbb      	adds	r3, r7, #6
 8001a1a:	1c22      	adds	r2, r4, #0
 8001a1c:	701a      	strb	r2, [r3, #0]
 8001a1e:	1d7b      	adds	r3, r7, #5
 8001a20:	1c02      	adds	r2, r0, #0
 8001a22:	701a      	strb	r2, [r3, #0]
 8001a24:	1d3b      	adds	r3, r7, #4
 8001a26:	1c0a      	adds	r2, r1, #0
 8001a28:	701a      	strb	r2, [r3, #0]
	static HAL_StatusTypeDef ret;
	static uint8_t data[3];
	data[0] = command;
 8001a2a:	4b1b      	ldr	r3, [pc, #108]	; (8001a98 <writeVCNL4040+0x94>)
 8001a2c:	1dba      	adds	r2, r7, #6
 8001a2e:	7812      	ldrb	r2, [r2, #0]
 8001a30:	701a      	strb	r2, [r3, #0]
	data[1] = lowbyte;
 8001a32:	4b19      	ldr	r3, [pc, #100]	; (8001a98 <writeVCNL4040+0x94>)
 8001a34:	1d7a      	adds	r2, r7, #5
 8001a36:	7812      	ldrb	r2, [r2, #0]
 8001a38:	705a      	strb	r2, [r3, #1]
	data[2] = highbyte;
 8001a3a:	4b17      	ldr	r3, [pc, #92]	; (8001a98 <writeVCNL4040+0x94>)
 8001a3c:	1d3a      	adds	r2, r7, #4
 8001a3e:	7812      	ldrb	r2, [r2, #0]
 8001a40:	709a      	strb	r2, [r3, #2]
	if(xSemaphoreTake(I2CSemaphore,DELAY_MAX_I2C_VCNL4040) == pdTRUE){
 8001a42:	4b16      	ldr	r3, [pc, #88]	; (8001a9c <writeVCNL4040+0x98>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	21c8      	movs	r1, #200	; 0xc8
 8001a48:	0018      	movs	r0, r3
 8001a4a:	f004 ff4d 	bl	80068e8 <xQueueSemaphoreTake>
 8001a4e:	0003      	movs	r3, r0
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d115      	bne.n	8001a80 <writeVCNL4040+0x7c>
		ret = HAL_I2C_Master_Transmit(&hi2c1, addr, data, 3, HAL_MAX_DELAY);
 8001a54:	1dfb      	adds	r3, r7, #7
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	b299      	uxth	r1, r3
 8001a5a:	4a0f      	ldr	r2, [pc, #60]	; (8001a98 <writeVCNL4040+0x94>)
 8001a5c:	4810      	ldr	r0, [pc, #64]	; (8001aa0 <writeVCNL4040+0x9c>)
 8001a5e:	2301      	movs	r3, #1
 8001a60:	425b      	negs	r3, r3
 8001a62:	9300      	str	r3, [sp, #0]
 8001a64:	2303      	movs	r3, #3
 8001a66:	f001 fefb 	bl	8003860 <HAL_I2C_Master_Transmit>
 8001a6a:	0003      	movs	r3, r0
 8001a6c:	001a      	movs	r2, r3
 8001a6e:	4b0d      	ldr	r3, [pc, #52]	; (8001aa4 <writeVCNL4040+0xa0>)
 8001a70:	701a      	strb	r2, [r3, #0]
		xSemaphoreGive(I2CSemaphore);
 8001a72:	4b0a      	ldr	r3, [pc, #40]	; (8001a9c <writeVCNL4040+0x98>)
 8001a74:	6818      	ldr	r0, [r3, #0]
 8001a76:	2300      	movs	r3, #0
 8001a78:	2200      	movs	r2, #0
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	f004 fce5 	bl	800644a <xQueueGenericSend>
	}
    if(ret != HAL_OK){
 8001a80:	4b08      	ldr	r3, [pc, #32]	; (8001aa4 <writeVCNL4040+0xa0>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <writeVCNL4040+0x88>
	   return (false); //Sensor did not ACK
 8001a88:	2300      	movs	r3, #0
 8001a8a:	e000      	b.n	8001a8e <writeVCNL4040+0x8a>
    }
    return true;
 8001a8c:	2301      	movs	r3, #1
}
 8001a8e:	0018      	movs	r0, r3
 8001a90:	46bd      	mov	sp, r7
 8001a92:	b002      	add	sp, #8
 8001a94:	bdb0      	pop	{r4, r5, r7, pc}
 8001a96:	46c0      	nop			; (mov r8, r8)
 8001a98:	200000c8 	.word	0x200000c8
 8001a9c:	20002210 	.word	0x20002210
 8001aa0:	2000221c 	.word	0x2000221c
 8001aa4:	200000cb 	.word	0x200000cb

08001aa8 <readVCNL4040>:

int32_t readVCNL4040(uint8_t addr, uint8_t command){
 8001aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001aaa:	b089      	sub	sp, #36	; 0x24
 8001aac:	af04      	add	r7, sp, #16
 8001aae:	0002      	movs	r2, r0
 8001ab0:	1dfb      	adds	r3, r7, #7
 8001ab2:	701a      	strb	r2, [r3, #0]
 8001ab4:	1dbb      	adds	r3, r7, #6
 8001ab6:	1c0a      	adds	r2, r1, #0
 8001ab8:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef ret;
	uint16_t MemoryAdresse = (command<<8) + (addr+1);
 8001aba:	1dbb      	adds	r3, r7, #6
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	021b      	lsls	r3, r3, #8
 8001ac2:	b29a      	uxth	r2, r3
 8001ac4:	1dfb      	adds	r3, r7, #7
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	18d3      	adds	r3, r2, r3
 8001acc:	b29a      	uxth	r2, r3
 8001ace:	250c      	movs	r5, #12
 8001ad0:	197b      	adds	r3, r7, r5
 8001ad2:	3201      	adds	r2, #1
 8001ad4:	801a      	strh	r2, [r3, #0]
	uint8_t databuf[2] = {0x00, 0x00};
 8001ad6:	2608      	movs	r6, #8
 8001ad8:	19bb      	adds	r3, r7, r6
 8001ada:	2200      	movs	r2, #0
 8001adc:	801a      	strh	r2, [r3, #0]
	if(xSemaphoreTake(I2CSemaphore,DELAY_MAX_I2C_VCNL4040) == pdTRUE){
 8001ade:	4b1f      	ldr	r3, [pc, #124]	; (8001b5c <readVCNL4040+0xb4>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	21c8      	movs	r1, #200	; 0xc8
 8001ae4:	0018      	movs	r0, r3
 8001ae6:	f004 feff 	bl	80068e8 <xQueueSemaphoreTake>
 8001aea:	0003      	movs	r3, r0
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d11a      	bne.n	8001b26 <readVCNL4040+0x7e>
		ret = HAL_I2C_Mem_Read(&hi2c1, addr, MemoryAdresse, 2, databuf, 2, HAL_MAX_DELAY);
 8001af0:	1dfb      	adds	r3, r7, #7
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	b299      	uxth	r1, r3
 8001af6:	230f      	movs	r3, #15
 8001af8:	18fc      	adds	r4, r7, r3
 8001afa:	197b      	adds	r3, r7, r5
 8001afc:	881a      	ldrh	r2, [r3, #0]
 8001afe:	4818      	ldr	r0, [pc, #96]	; (8001b60 <readVCNL4040+0xb8>)
 8001b00:	2301      	movs	r3, #1
 8001b02:	425b      	negs	r3, r3
 8001b04:	9302      	str	r3, [sp, #8]
 8001b06:	2302      	movs	r3, #2
 8001b08:	9301      	str	r3, [sp, #4]
 8001b0a:	19bb      	adds	r3, r7, r6
 8001b0c:	9300      	str	r3, [sp, #0]
 8001b0e:	2302      	movs	r3, #2
 8001b10:	f002 f8dc 	bl	8003ccc <HAL_I2C_Mem_Read>
 8001b14:	0003      	movs	r3, r0
 8001b16:	7023      	strb	r3, [r4, #0]
		xSemaphoreGive(I2CSemaphore);
 8001b18:	4b10      	ldr	r3, [pc, #64]	; (8001b5c <readVCNL4040+0xb4>)
 8001b1a:	6818      	ldr	r0, [r3, #0]
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	2200      	movs	r2, #0
 8001b20:	2100      	movs	r1, #0
 8001b22:	f004 fc92 	bl	800644a <xQueueGenericSend>
	}
    if (ret != HAL_OK) //Send a restart command. Do not release bus.
 8001b26:	230f      	movs	r3, #15
 8001b28:	18fb      	adds	r3, r7, r3
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d002      	beq.n	8001b36 <readVCNL4040+0x8e>
    {
      return (-1); //Sensor did not ACK
 8001b30:	2301      	movs	r3, #1
 8001b32:	425b      	negs	r3, r3
 8001b34:	e00e      	b.n	8001b54 <readVCNL4040+0xac>
    }
    if(ret == HAL_OK)
 8001b36:	230f      	movs	r3, #15
 8001b38:	18fb      	adds	r3, r7, r3
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d107      	bne.n	8001b50 <readVCNL4040+0xa8>
    {
    	return((databuf[1]<<8) + databuf[0]);
 8001b40:	2208      	movs	r2, #8
 8001b42:	18bb      	adds	r3, r7, r2
 8001b44:	785b      	ldrb	r3, [r3, #1]
 8001b46:	021b      	lsls	r3, r3, #8
 8001b48:	18ba      	adds	r2, r7, r2
 8001b4a:	7812      	ldrb	r2, [r2, #0]
 8001b4c:	189b      	adds	r3, r3, r2
 8001b4e:	e001      	b.n	8001b54 <readVCNL4040+0xac>
    }
     return (-1); //Sensor did not respond
 8001b50:	2301      	movs	r3, #1
 8001b52:	425b      	negs	r3, r3
}
 8001b54:	0018      	movs	r0, r3
 8001b56:	46bd      	mov	sp, r7
 8001b58:	b005      	add	sp, #20
 8001b5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b5c:	20002210 	.word	0x20002210
 8001b60:	2000221c 	.word	0x2000221c

08001b64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b68:	f000 fd7c 	bl	8002664 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b6c:	f000 f842 	bl	8001bf4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b70:	f000 fa9e 	bl	80020b0 <MX_GPIO_Init>
  MX_ADC_Init();
 8001b74:	f000 f8bc 	bl	8001cf0 <MX_ADC_Init>
  MX_TIM1_Init();
 8001b78:	f000 f9a4 	bl	8001ec4 <MX_TIM1_Init>
  MX_I2C2_Init();
 8001b7c:	f000 f962 	bl	8001e44 <MX_I2C2_Init>
  MX_TIM6_Init();
 8001b80:	f000 fa52 	bl	8002028 <MX_TIM6_Init>
  MX_TIM7_Init();
 8001b84:	f000 fa72 	bl	800206c <MX_TIM7_Init>
  MX_I2C1_Init();
 8001b88:	f000 f91a 	bl	8001dc0 <MX_I2C1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001b8c:	f000 f89a 	bl	8001cc4 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001b90:	4b11      	ldr	r3, [pc, #68]	; (8001bd8 <main+0x74>)
 8001b92:	210c      	movs	r1, #12
 8001b94:	0018      	movs	r0, r3
 8001b96:	f003 fb1f 	bl	80051d8 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start(&htim6);
 8001b9a:	4b10      	ldr	r3, [pc, #64]	; (8001bdc <main+0x78>)
 8001b9c:	0018      	movs	r0, r3
 8001b9e:	f003 fa33 	bl	8005008 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim7);
 8001ba2:	4b0f      	ldr	r3, [pc, #60]	; (8001be0 <main+0x7c>)
 8001ba4:	0018      	movs	r0, r3
 8001ba6:	f003 fa73 	bl	8005090 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Init(&hadc);
 8001baa:	4b0e      	ldr	r3, [pc, #56]	; (8001be4 <main+0x80>)
 8001bac:	0018      	movs	r0, r3
 8001bae:	f000 fde1 	bl	8002774 <HAL_ADC_Init>
  HAL_ADCEx_Calibration_Start(&hadc);
 8001bb2:	4b0c      	ldr	r3, [pc, #48]	; (8001be4 <main+0x80>)
 8001bb4:	0018      	movs	r0, r3
 8001bb6:	f001 fa8d 	bl	80030d4 <HAL_ADCEx_Calibration_Start>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001bba:	f004 f93f 	bl	8005e3c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001bbe:	4a0a      	ldr	r2, [pc, #40]	; (8001be8 <main+0x84>)
 8001bc0:	4b0a      	ldr	r3, [pc, #40]	; (8001bec <main+0x88>)
 8001bc2:	2100      	movs	r1, #0
 8001bc4:	0018      	movs	r0, r3
 8001bc6:	f004 f965 	bl	8005e94 <osThreadNew>
 8001bca:	0002      	movs	r2, r0
 8001bcc:	4b08      	ldr	r3, [pc, #32]	; (8001bf0 <main+0x8c>)
 8001bce:	601a      	str	r2, [r3, #0]
  osKernelStart();

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  app_main();
 8001bd0:	f7ff fa8a 	bl	80010e8 <app_main>
  while (1)
 8001bd4:	e7fe      	b.n	8001bd4 <main+0x70>
 8001bd6:	46c0      	nop			; (mov r8, r8)
 8001bd8:	200022fc 	.word	0x200022fc
 8001bdc:	200022b4 	.word	0x200022b4
 8001be0:	20002384 	.word	0x20002384
 8001be4:	20002344 	.word	0x20002344
 8001be8:	0800976c 	.word	0x0800976c
 8001bec:	08002239 	.word	0x08002239
 8001bf0:	20002218 	.word	0x20002218

08001bf4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bf4:	b590      	push	{r4, r7, lr}
 8001bf6:	b097      	sub	sp, #92	; 0x5c
 8001bf8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bfa:	2428      	movs	r4, #40	; 0x28
 8001bfc:	193b      	adds	r3, r7, r4
 8001bfe:	0018      	movs	r0, r3
 8001c00:	2330      	movs	r3, #48	; 0x30
 8001c02:	001a      	movs	r2, r3
 8001c04:	2100      	movs	r1, #0
 8001c06:	f007 f887 	bl	8008d18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c0a:	2318      	movs	r3, #24
 8001c0c:	18fb      	adds	r3, r7, r3
 8001c0e:	0018      	movs	r0, r3
 8001c10:	2310      	movs	r3, #16
 8001c12:	001a      	movs	r2, r3
 8001c14:	2100      	movs	r1, #0
 8001c16:	f007 f87f 	bl	8008d18 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c1a:	1d3b      	adds	r3, r7, #4
 8001c1c:	0018      	movs	r0, r3
 8001c1e:	2314      	movs	r3, #20
 8001c20:	001a      	movs	r2, r3
 8001c22:	2100      	movs	r1, #0
 8001c24:	f007 f878 	bl	8008d18 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8001c28:	0021      	movs	r1, r4
 8001c2a:	187b      	adds	r3, r7, r1
 8001c2c:	2212      	movs	r2, #18
 8001c2e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c30:	187b      	adds	r3, r7, r1
 8001c32:	2201      	movs	r2, #1
 8001c34:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8001c36:	187b      	adds	r3, r7, r1
 8001c38:	2201      	movs	r2, #1
 8001c3a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c3c:	187b      	adds	r3, r7, r1
 8001c3e:	2210      	movs	r2, #16
 8001c40:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8001c42:	187b      	adds	r3, r7, r1
 8001c44:	2210      	movs	r2, #16
 8001c46:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c48:	187b      	adds	r3, r7, r1
 8001c4a:	2202      	movs	r2, #2
 8001c4c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c4e:	187b      	adds	r3, r7, r1
 8001c50:	2280      	movs	r2, #128	; 0x80
 8001c52:	0212      	lsls	r2, r2, #8
 8001c54:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001c56:	187b      	adds	r3, r7, r1
 8001c58:	2280      	movs	r2, #128	; 0x80
 8001c5a:	0352      	lsls	r2, r2, #13
 8001c5c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001c5e:	187b      	adds	r3, r7, r1
 8001c60:	2200      	movs	r2, #0
 8001c62:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c64:	187b      	adds	r3, r7, r1
 8001c66:	0018      	movs	r0, r3
 8001c68:	f002 fc4e 	bl	8004508 <HAL_RCC_OscConfig>
 8001c6c:	1e03      	subs	r3, r0, #0
 8001c6e:	d001      	beq.n	8001c74 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001c70:	f000 faea 	bl	8002248 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c74:	2118      	movs	r1, #24
 8001c76:	187b      	adds	r3, r7, r1
 8001c78:	2207      	movs	r2, #7
 8001c7a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c7c:	187b      	adds	r3, r7, r1
 8001c7e:	2202      	movs	r2, #2
 8001c80:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c82:	187b      	adds	r3, r7, r1
 8001c84:	2200      	movs	r2, #0
 8001c86:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c88:	187b      	adds	r3, r7, r1
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001c8e:	187b      	adds	r3, r7, r1
 8001c90:	2101      	movs	r1, #1
 8001c92:	0018      	movs	r0, r3
 8001c94:	f002 ff56 	bl	8004b44 <HAL_RCC_ClockConfig>
 8001c98:	1e03      	subs	r3, r0, #0
 8001c9a:	d001      	beq.n	8001ca0 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001c9c:	f000 fad4 	bl	8002248 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001ca0:	1d3b      	adds	r3, r7, #4
 8001ca2:	2220      	movs	r2, #32
 8001ca4:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 8001ca6:	1d3b      	adds	r3, r7, #4
 8001ca8:	2210      	movs	r2, #16
 8001caa:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cac:	1d3b      	adds	r3, r7, #4
 8001cae:	0018      	movs	r0, r3
 8001cb0:	f003 f87c 	bl	8004dac <HAL_RCCEx_PeriphCLKConfig>
 8001cb4:	1e03      	subs	r3, r0, #0
 8001cb6:	d001      	beq.n	8001cbc <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001cb8:	f000 fac6 	bl	8002248 <Error_Handler>
  }
}
 8001cbc:	46c0      	nop			; (mov r8, r8)
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	b017      	add	sp, #92	; 0x5c
 8001cc2:	bd90      	pop	{r4, r7, pc}

08001cc4 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  /* TIM7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM7_IRQn, 3, 0);
 8001cc8:	2200      	movs	r2, #0
 8001cca:	2103      	movs	r1, #3
 8001ccc:	2012      	movs	r0, #18
 8001cce:	f001 fb55 	bl	800337c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001cd2:	2012      	movs	r0, #18
 8001cd4:	f001 fb67 	bl	80033a6 <HAL_NVIC_EnableIRQ>
  /* EXTI2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 3, 0);
 8001cd8:	2200      	movs	r2, #0
 8001cda:	2103      	movs	r1, #3
 8001cdc:	2006      	movs	r0, #6
 8001cde:	f001 fb4d 	bl	800337c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8001ce2:	2006      	movs	r0, #6
 8001ce4:	f001 fb5f 	bl	80033a6 <HAL_NVIC_EnableIRQ>
}
 8001ce8:	46c0      	nop			; (mov r8, r8)
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
	...

08001cf0 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001cf6:	1d3b      	adds	r3, r7, #4
 8001cf8:	0018      	movs	r0, r3
 8001cfa:	230c      	movs	r3, #12
 8001cfc:	001a      	movs	r2, r3
 8001cfe:	2100      	movs	r1, #0
 8001d00:	f007 f80a 	bl	8008d18 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8001d04:	4b2c      	ldr	r3, [pc, #176]	; (8001db8 <MX_ADC_Init+0xc8>)
 8001d06:	4a2d      	ldr	r2, [pc, #180]	; (8001dbc <MX_ADC_Init+0xcc>)
 8001d08:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001d0a:	4b2b      	ldr	r3, [pc, #172]	; (8001db8 <MX_ADC_Init+0xc8>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001d10:	4b29      	ldr	r3, [pc, #164]	; (8001db8 <MX_ADC_Init+0xc8>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d16:	4b28      	ldr	r3, [pc, #160]	; (8001db8 <MX_ADC_Init+0xc8>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001d1c:	4b26      	ldr	r3, [pc, #152]	; (8001db8 <MX_ADC_Init+0xc8>)
 8001d1e:	2201      	movs	r2, #1
 8001d20:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d22:	4b25      	ldr	r3, [pc, #148]	; (8001db8 <MX_ADC_Init+0xc8>)
 8001d24:	2204      	movs	r2, #4
 8001d26:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001d28:	4b23      	ldr	r3, [pc, #140]	; (8001db8 <MX_ADC_Init+0xc8>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001d2e:	4b22      	ldr	r3, [pc, #136]	; (8001db8 <MX_ADC_Init+0xc8>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8001d34:	4b20      	ldr	r3, [pc, #128]	; (8001db8 <MX_ADC_Init+0xc8>)
 8001d36:	2201      	movs	r2, #1
 8001d38:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001d3a:	4b1f      	ldr	r3, [pc, #124]	; (8001db8 <MX_ADC_Init+0xc8>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d40:	4b1d      	ldr	r3, [pc, #116]	; (8001db8 <MX_ADC_Init+0xc8>)
 8001d42:	22c2      	movs	r2, #194	; 0xc2
 8001d44:	32ff      	adds	r2, #255	; 0xff
 8001d46:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d48:	4b1b      	ldr	r3, [pc, #108]	; (8001db8 <MX_ADC_Init+0xc8>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001d4e:	4b1a      	ldr	r3, [pc, #104]	; (8001db8 <MX_ADC_Init+0xc8>)
 8001d50:	2224      	movs	r2, #36	; 0x24
 8001d52:	2100      	movs	r1, #0
 8001d54:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001d56:	4b18      	ldr	r3, [pc, #96]	; (8001db8 <MX_ADC_Init+0xc8>)
 8001d58:	2201      	movs	r2, #1
 8001d5a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001d5c:	4b16      	ldr	r3, [pc, #88]	; (8001db8 <MX_ADC_Init+0xc8>)
 8001d5e:	0018      	movs	r0, r3
 8001d60:	f000 fd08 	bl	8002774 <HAL_ADC_Init>
 8001d64:	1e03      	subs	r3, r0, #0
 8001d66:	d001      	beq.n	8001d6c <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8001d68:	f000 fa6e 	bl	8002248 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001d6c:	1d3b      	adds	r3, r7, #4
 8001d6e:	2200      	movs	r2, #0
 8001d70:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001d72:	1d3b      	adds	r3, r7, #4
 8001d74:	2280      	movs	r2, #128	; 0x80
 8001d76:	0152      	lsls	r2, r2, #5
 8001d78:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001d7a:	1d3b      	adds	r3, r7, #4
 8001d7c:	2280      	movs	r2, #128	; 0x80
 8001d7e:	0552      	lsls	r2, r2, #21
 8001d80:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001d82:	1d3a      	adds	r2, r7, #4
 8001d84:	4b0c      	ldr	r3, [pc, #48]	; (8001db8 <MX_ADC_Init+0xc8>)
 8001d86:	0011      	movs	r1, r2
 8001d88:	0018      	movs	r0, r3
 8001d8a:	f000 ff6b 	bl	8002c64 <HAL_ADC_ConfigChannel>
 8001d8e:	1e03      	subs	r3, r0, #0
 8001d90:	d001      	beq.n	8001d96 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8001d92:	f000 fa59 	bl	8002248 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001d96:	1d3b      	adds	r3, r7, #4
 8001d98:	2203      	movs	r2, #3
 8001d9a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001d9c:	1d3a      	adds	r2, r7, #4
 8001d9e:	4b06      	ldr	r3, [pc, #24]	; (8001db8 <MX_ADC_Init+0xc8>)
 8001da0:	0011      	movs	r1, r2
 8001da2:	0018      	movs	r0, r3
 8001da4:	f000 ff5e 	bl	8002c64 <HAL_ADC_ConfigChannel>
 8001da8:	1e03      	subs	r3, r0, #0
 8001daa:	d001      	beq.n	8001db0 <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 8001dac:	f000 fa4c 	bl	8002248 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001db0:	46c0      	nop			; (mov r8, r8)
 8001db2:	46bd      	mov	sp, r7
 8001db4:	b004      	add	sp, #16
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	20002344 	.word	0x20002344
 8001dbc:	40012400 	.word	0x40012400

08001dc0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001dc4:	4b1c      	ldr	r3, [pc, #112]	; (8001e38 <MX_I2C1_Init+0x78>)
 8001dc6:	4a1d      	ldr	r2, [pc, #116]	; (8001e3c <MX_I2C1_Init+0x7c>)
 8001dc8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00401A58;
 8001dca:	4b1b      	ldr	r3, [pc, #108]	; (8001e38 <MX_I2C1_Init+0x78>)
 8001dcc:	4a1c      	ldr	r2, [pc, #112]	; (8001e40 <MX_I2C1_Init+0x80>)
 8001dce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001dd0:	4b19      	ldr	r3, [pc, #100]	; (8001e38 <MX_I2C1_Init+0x78>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001dd6:	4b18      	ldr	r3, [pc, #96]	; (8001e38 <MX_I2C1_Init+0x78>)
 8001dd8:	2201      	movs	r2, #1
 8001dda:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ddc:	4b16      	ldr	r3, [pc, #88]	; (8001e38 <MX_I2C1_Init+0x78>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001de2:	4b15      	ldr	r3, [pc, #84]	; (8001e38 <MX_I2C1_Init+0x78>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001de8:	4b13      	ldr	r3, [pc, #76]	; (8001e38 <MX_I2C1_Init+0x78>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001dee:	4b12      	ldr	r3, [pc, #72]	; (8001e38 <MX_I2C1_Init+0x78>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001df4:	4b10      	ldr	r3, [pc, #64]	; (8001e38 <MX_I2C1_Init+0x78>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001dfa:	4b0f      	ldr	r3, [pc, #60]	; (8001e38 <MX_I2C1_Init+0x78>)
 8001dfc:	0018      	movs	r0, r3
 8001dfe:	f001 fc99 	bl	8003734 <HAL_I2C_Init>
 8001e02:	1e03      	subs	r3, r0, #0
 8001e04:	d001      	beq.n	8001e0a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001e06:	f000 fa1f 	bl	8002248 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 8001e0a:	2380      	movs	r3, #128	; 0x80
 8001e0c:	015a      	lsls	r2, r3, #5
 8001e0e:	4b0a      	ldr	r3, [pc, #40]	; (8001e38 <MX_I2C1_Init+0x78>)
 8001e10:	0011      	movs	r1, r2
 8001e12:	0018      	movs	r0, r3
 8001e14:	f002 fae0 	bl	80043d8 <HAL_I2CEx_ConfigAnalogFilter>
 8001e18:	1e03      	subs	r3, r0, #0
 8001e1a:	d001      	beq.n	8001e20 <MX_I2C1_Init+0x60>
  {
    Error_Handler();
 8001e1c:	f000 fa14 	bl	8002248 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001e20:	4b05      	ldr	r3, [pc, #20]	; (8001e38 <MX_I2C1_Init+0x78>)
 8001e22:	2100      	movs	r1, #0
 8001e24:	0018      	movs	r0, r3
 8001e26:	f002 fb23 	bl	8004470 <HAL_I2CEx_ConfigDigitalFilter>
 8001e2a:	1e03      	subs	r3, r0, #0
 8001e2c:	d001      	beq.n	8001e32 <MX_I2C1_Init+0x72>
  {
    Error_Handler();
 8001e2e:	f000 fa0b 	bl	8002248 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001e32:	46c0      	nop			; (mov r8, r8)
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	2000221c 	.word	0x2000221c
 8001e3c:	40005400 	.word	0x40005400
 8001e40:	00401a58 	.word	0x00401a58

08001e44 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001e48:	4b1b      	ldr	r3, [pc, #108]	; (8001eb8 <MX_I2C2_Init+0x74>)
 8001e4a:	4a1c      	ldr	r2, [pc, #112]	; (8001ebc <MX_I2C2_Init+0x78>)
 8001e4c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x2010091A;
 8001e4e:	4b1a      	ldr	r3, [pc, #104]	; (8001eb8 <MX_I2C2_Init+0x74>)
 8001e50:	4a1b      	ldr	r2, [pc, #108]	; (8001ec0 <MX_I2C2_Init+0x7c>)
 8001e52:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001e54:	4b18      	ldr	r3, [pc, #96]	; (8001eb8 <MX_I2C2_Init+0x74>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e5a:	4b17      	ldr	r3, [pc, #92]	; (8001eb8 <MX_I2C2_Init+0x74>)
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e60:	4b15      	ldr	r3, [pc, #84]	; (8001eb8 <MX_I2C2_Init+0x74>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001e66:	4b14      	ldr	r3, [pc, #80]	; (8001eb8 <MX_I2C2_Init+0x74>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001e6c:	4b12      	ldr	r3, [pc, #72]	; (8001eb8 <MX_I2C2_Init+0x74>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e72:	4b11      	ldr	r3, [pc, #68]	; (8001eb8 <MX_I2C2_Init+0x74>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e78:	4b0f      	ldr	r3, [pc, #60]	; (8001eb8 <MX_I2C2_Init+0x74>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001e7e:	4b0e      	ldr	r3, [pc, #56]	; (8001eb8 <MX_I2C2_Init+0x74>)
 8001e80:	0018      	movs	r0, r3
 8001e82:	f001 fc57 	bl	8003734 <HAL_I2C_Init>
 8001e86:	1e03      	subs	r3, r0, #0
 8001e88:	d001      	beq.n	8001e8e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001e8a:	f000 f9dd 	bl	8002248 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001e8e:	4b0a      	ldr	r3, [pc, #40]	; (8001eb8 <MX_I2C2_Init+0x74>)
 8001e90:	2100      	movs	r1, #0
 8001e92:	0018      	movs	r0, r3
 8001e94:	f002 faa0 	bl	80043d8 <HAL_I2CEx_ConfigAnalogFilter>
 8001e98:	1e03      	subs	r3, r0, #0
 8001e9a:	d001      	beq.n	8001ea0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001e9c:	f000 f9d4 	bl	8002248 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001ea0:	4b05      	ldr	r3, [pc, #20]	; (8001eb8 <MX_I2C2_Init+0x74>)
 8001ea2:	2100      	movs	r1, #0
 8001ea4:	0018      	movs	r0, r3
 8001ea6:	f002 fae3 	bl	8004470 <HAL_I2CEx_ConfigDigitalFilter>
 8001eaa:	1e03      	subs	r3, r0, #0
 8001eac:	d001      	beq.n	8001eb2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001eae:	f000 f9cb 	bl	8002248 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001eb2:	46c0      	nop			; (mov r8, r8)
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	20002268 	.word	0x20002268
 8001ebc:	40005800 	.word	0x40005800
 8001ec0:	2010091a 	.word	0x2010091a

08001ec4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b096      	sub	sp, #88	; 0x58
 8001ec8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001eca:	2348      	movs	r3, #72	; 0x48
 8001ecc:	18fb      	adds	r3, r7, r3
 8001ece:	0018      	movs	r0, r3
 8001ed0:	2310      	movs	r3, #16
 8001ed2:	001a      	movs	r2, r3
 8001ed4:	2100      	movs	r1, #0
 8001ed6:	f006 ff1f 	bl	8008d18 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001eda:	2340      	movs	r3, #64	; 0x40
 8001edc:	18fb      	adds	r3, r7, r3
 8001ede:	0018      	movs	r0, r3
 8001ee0:	2308      	movs	r3, #8
 8001ee2:	001a      	movs	r2, r3
 8001ee4:	2100      	movs	r1, #0
 8001ee6:	f006 ff17 	bl	8008d18 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001eea:	2324      	movs	r3, #36	; 0x24
 8001eec:	18fb      	adds	r3, r7, r3
 8001eee:	0018      	movs	r0, r3
 8001ef0:	231c      	movs	r3, #28
 8001ef2:	001a      	movs	r2, r3
 8001ef4:	2100      	movs	r1, #0
 8001ef6:	f006 ff0f 	bl	8008d18 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001efa:	1d3b      	adds	r3, r7, #4
 8001efc:	0018      	movs	r0, r3
 8001efe:	2320      	movs	r3, #32
 8001f00:	001a      	movs	r2, r3
 8001f02:	2100      	movs	r1, #0
 8001f04:	f006 ff08 	bl	8008d18 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001f08:	4b45      	ldr	r3, [pc, #276]	; (8002020 <MX_TIM1_Init+0x15c>)
 8001f0a:	4a46      	ldr	r2, [pc, #280]	; (8002024 <MX_TIM1_Init+0x160>)
 8001f0c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001f0e:	4b44      	ldr	r3, [pc, #272]	; (8002020 <MX_TIM1_Init+0x15c>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f14:	4b42      	ldr	r3, [pc, #264]	; (8002020 <MX_TIM1_Init+0x15c>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000;
 8001f1a:	4b41      	ldr	r3, [pc, #260]	; (8002020 <MX_TIM1_Init+0x15c>)
 8001f1c:	22fa      	movs	r2, #250	; 0xfa
 8001f1e:	00d2      	lsls	r2, r2, #3
 8001f20:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f22:	4b3f      	ldr	r3, [pc, #252]	; (8002020 <MX_TIM1_Init+0x15c>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001f28:	4b3d      	ldr	r3, [pc, #244]	; (8002020 <MX_TIM1_Init+0x15c>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001f2e:	4b3c      	ldr	r3, [pc, #240]	; (8002020 <MX_TIM1_Init+0x15c>)
 8001f30:	2280      	movs	r2, #128	; 0x80
 8001f32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001f34:	4b3a      	ldr	r3, [pc, #232]	; (8002020 <MX_TIM1_Init+0x15c>)
 8001f36:	0018      	movs	r0, r3
 8001f38:	f003 f816 	bl	8004f68 <HAL_TIM_Base_Init>
 8001f3c:	1e03      	subs	r3, r0, #0
 8001f3e:	d001      	beq.n	8001f44 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 8001f40:	f000 f982 	bl	8002248 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f44:	2148      	movs	r1, #72	; 0x48
 8001f46:	187b      	adds	r3, r7, r1
 8001f48:	2280      	movs	r2, #128	; 0x80
 8001f4a:	0152      	lsls	r2, r2, #5
 8001f4c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001f4e:	187a      	adds	r2, r7, r1
 8001f50:	4b33      	ldr	r3, [pc, #204]	; (8002020 <MX_TIM1_Init+0x15c>)
 8001f52:	0011      	movs	r1, r2
 8001f54:	0018      	movs	r0, r3
 8001f56:	f003 fab7 	bl	80054c8 <HAL_TIM_ConfigClockSource>
 8001f5a:	1e03      	subs	r3, r0, #0
 8001f5c:	d001      	beq.n	8001f62 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001f5e:	f000 f973 	bl	8002248 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001f62:	4b2f      	ldr	r3, [pc, #188]	; (8002020 <MX_TIM1_Init+0x15c>)
 8001f64:	0018      	movs	r0, r3
 8001f66:	f003 f8df 	bl	8005128 <HAL_TIM_PWM_Init>
 8001f6a:	1e03      	subs	r3, r0, #0
 8001f6c:	d001      	beq.n	8001f72 <MX_TIM1_Init+0xae>
  {
    Error_Handler();
 8001f6e:	f000 f96b 	bl	8002248 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f72:	2140      	movs	r1, #64	; 0x40
 8001f74:	187b      	adds	r3, r7, r1
 8001f76:	2200      	movs	r2, #0
 8001f78:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f7a:	187b      	adds	r3, r7, r1
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f80:	187a      	adds	r2, r7, r1
 8001f82:	4b27      	ldr	r3, [pc, #156]	; (8002020 <MX_TIM1_Init+0x15c>)
 8001f84:	0011      	movs	r1, r2
 8001f86:	0018      	movs	r0, r3
 8001f88:	f003 fea2 	bl	8005cd0 <HAL_TIMEx_MasterConfigSynchronization>
 8001f8c:	1e03      	subs	r3, r0, #0
 8001f8e:	d001      	beq.n	8001f94 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8001f90:	f000 f95a 	bl	8002248 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f94:	2124      	movs	r1, #36	; 0x24
 8001f96:	187b      	adds	r3, r7, r1
 8001f98:	2260      	movs	r2, #96	; 0x60
 8001f9a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001f9c:	187b      	adds	r3, r7, r1
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fa2:	187b      	adds	r3, r7, r1
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fa8:	187b      	adds	r3, r7, r1
 8001faa:	2200      	movs	r2, #0
 8001fac:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001fae:	187b      	adds	r3, r7, r1
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001fb4:	187b      	adds	r3, r7, r1
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001fba:	1879      	adds	r1, r7, r1
 8001fbc:	4b18      	ldr	r3, [pc, #96]	; (8002020 <MX_TIM1_Init+0x15c>)
 8001fbe:	220c      	movs	r2, #12
 8001fc0:	0018      	movs	r0, r3
 8001fc2:	f003 f9bb 	bl	800533c <HAL_TIM_PWM_ConfigChannel>
 8001fc6:	1e03      	subs	r3, r0, #0
 8001fc8:	d001      	beq.n	8001fce <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 8001fca:	f000 f93d 	bl	8002248 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001fce:	1d3b      	adds	r3, r7, #4
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001fd4:	1d3b      	adds	r3, r7, #4
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001fda:	1d3b      	adds	r3, r7, #4
 8001fdc:	2200      	movs	r2, #0
 8001fde:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001fe0:	1d3b      	adds	r3, r7, #4
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001fe6:	1d3b      	adds	r3, r7, #4
 8001fe8:	2200      	movs	r2, #0
 8001fea:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001fec:	1d3b      	adds	r3, r7, #4
 8001fee:	2280      	movs	r2, #128	; 0x80
 8001ff0:	0192      	lsls	r2, r2, #6
 8001ff2:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ff4:	1d3b      	adds	r3, r7, #4
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001ffa:	1d3a      	adds	r2, r7, #4
 8001ffc:	4b08      	ldr	r3, [pc, #32]	; (8002020 <MX_TIM1_Init+0x15c>)
 8001ffe:	0011      	movs	r1, r2
 8002000:	0018      	movs	r0, r3
 8002002:	f003 febd 	bl	8005d80 <HAL_TIMEx_ConfigBreakDeadTime>
 8002006:	1e03      	subs	r3, r0, #0
 8002008:	d001      	beq.n	800200e <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 800200a:	f000 f91d 	bl	8002248 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800200e:	4b04      	ldr	r3, [pc, #16]	; (8002020 <MX_TIM1_Init+0x15c>)
 8002010:	0018      	movs	r0, r3
 8002012:	f000 fa61 	bl	80024d8 <HAL_TIM_MspPostInit>

}
 8002016:	46c0      	nop			; (mov r8, r8)
 8002018:	46bd      	mov	sp, r7
 800201a:	b016      	add	sp, #88	; 0x58
 800201c:	bd80      	pop	{r7, pc}
 800201e:	46c0      	nop			; (mov r8, r8)
 8002020:	200022fc 	.word	0x200022fc
 8002024:	40012c00 	.word	0x40012c00

08002028 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM6_Init 0 */

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800202c:	4b0c      	ldr	r3, [pc, #48]	; (8002060 <MX_TIM6_Init+0x38>)
 800202e:	4a0d      	ldr	r2, [pc, #52]	; (8002064 <MX_TIM6_Init+0x3c>)
 8002030:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 48-1;
 8002032:	4b0b      	ldr	r3, [pc, #44]	; (8002060 <MX_TIM6_Init+0x38>)
 8002034:	222f      	movs	r2, #47	; 0x2f
 8002036:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002038:	4b09      	ldr	r3, [pc, #36]	; (8002060 <MX_TIM6_Init+0x38>)
 800203a:	2200      	movs	r2, #0
 800203c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800203e:	4b08      	ldr	r3, [pc, #32]	; (8002060 <MX_TIM6_Init+0x38>)
 8002040:	4a09      	ldr	r2, [pc, #36]	; (8002068 <MX_TIM6_Init+0x40>)
 8002042:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002044:	4b06      	ldr	r3, [pc, #24]	; (8002060 <MX_TIM6_Init+0x38>)
 8002046:	2200      	movs	r2, #0
 8002048:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800204a:	4b05      	ldr	r3, [pc, #20]	; (8002060 <MX_TIM6_Init+0x38>)
 800204c:	0018      	movs	r0, r3
 800204e:	f002 ff8b 	bl	8004f68 <HAL_TIM_Base_Init>
 8002052:	1e03      	subs	r3, r0, #0
 8002054:	d001      	beq.n	800205a <MX_TIM6_Init+0x32>
  {
    Error_Handler();
 8002056:	f000 f8f7 	bl	8002248 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800205a:	46c0      	nop			; (mov r8, r8)
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	200022b4 	.word	0x200022b4
 8002064:	40001000 	.word	0x40001000
 8002068:	0000ffff 	.word	0x0000ffff

0800206c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM7_Init 0 */

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002070:	4b0d      	ldr	r3, [pc, #52]	; (80020a8 <MX_TIM7_Init+0x3c>)
 8002072:	4a0e      	ldr	r2, [pc, #56]	; (80020ac <MX_TIM7_Init+0x40>)
 8002074:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 240;
 8002076:	4b0c      	ldr	r3, [pc, #48]	; (80020a8 <MX_TIM7_Init+0x3c>)
 8002078:	22f0      	movs	r2, #240	; 0xf0
 800207a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800207c:	4b0a      	ldr	r3, [pc, #40]	; (80020a8 <MX_TIM7_Init+0x3c>)
 800207e:	2200      	movs	r2, #0
 8002080:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000;
 8002082:	4b09      	ldr	r3, [pc, #36]	; (80020a8 <MX_TIM7_Init+0x3c>)
 8002084:	22fa      	movs	r2, #250	; 0xfa
 8002086:	0092      	lsls	r2, r2, #2
 8002088:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800208a:	4b07      	ldr	r3, [pc, #28]	; (80020a8 <MX_TIM7_Init+0x3c>)
 800208c:	2200      	movs	r2, #0
 800208e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002090:	4b05      	ldr	r3, [pc, #20]	; (80020a8 <MX_TIM7_Init+0x3c>)
 8002092:	0018      	movs	r0, r3
 8002094:	f002 ff68 	bl	8004f68 <HAL_TIM_Base_Init>
 8002098:	1e03      	subs	r3, r0, #0
 800209a:	d001      	beq.n	80020a0 <MX_TIM7_Init+0x34>
  {
    Error_Handler();
 800209c:	f000 f8d4 	bl	8002248 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80020a0:	46c0      	nop			; (mov r8, r8)
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	46c0      	nop			; (mov r8, r8)
 80020a8:	20002384 	.word	0x20002384
 80020ac:	40001400 	.word	0x40001400

080020b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020b0:	b590      	push	{r4, r7, lr}
 80020b2:	b089      	sub	sp, #36	; 0x24
 80020b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b6:	240c      	movs	r4, #12
 80020b8:	193b      	adds	r3, r7, r4
 80020ba:	0018      	movs	r0, r3
 80020bc:	2314      	movs	r3, #20
 80020be:	001a      	movs	r2, r3
 80020c0:	2100      	movs	r1, #0
 80020c2:	f006 fe29 	bl	8008d18 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020c6:	4b34      	ldr	r3, [pc, #208]	; (8002198 <MX_GPIO_Init+0xe8>)
 80020c8:	695a      	ldr	r2, [r3, #20]
 80020ca:	4b33      	ldr	r3, [pc, #204]	; (8002198 <MX_GPIO_Init+0xe8>)
 80020cc:	2180      	movs	r1, #128	; 0x80
 80020ce:	0309      	lsls	r1, r1, #12
 80020d0:	430a      	orrs	r2, r1
 80020d2:	615a      	str	r2, [r3, #20]
 80020d4:	4b30      	ldr	r3, [pc, #192]	; (8002198 <MX_GPIO_Init+0xe8>)
 80020d6:	695a      	ldr	r2, [r3, #20]
 80020d8:	2380      	movs	r3, #128	; 0x80
 80020da:	031b      	lsls	r3, r3, #12
 80020dc:	4013      	ands	r3, r2
 80020de:	60bb      	str	r3, [r7, #8]
 80020e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020e2:	4b2d      	ldr	r3, [pc, #180]	; (8002198 <MX_GPIO_Init+0xe8>)
 80020e4:	695a      	ldr	r2, [r3, #20]
 80020e6:	4b2c      	ldr	r3, [pc, #176]	; (8002198 <MX_GPIO_Init+0xe8>)
 80020e8:	2180      	movs	r1, #128	; 0x80
 80020ea:	0289      	lsls	r1, r1, #10
 80020ec:	430a      	orrs	r2, r1
 80020ee:	615a      	str	r2, [r3, #20]
 80020f0:	4b29      	ldr	r3, [pc, #164]	; (8002198 <MX_GPIO_Init+0xe8>)
 80020f2:	695a      	ldr	r2, [r3, #20]
 80020f4:	2380      	movs	r3, #128	; 0x80
 80020f6:	029b      	lsls	r3, r3, #10
 80020f8:	4013      	ands	r3, r2
 80020fa:	607b      	str	r3, [r7, #4]
 80020fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020fe:	4b26      	ldr	r3, [pc, #152]	; (8002198 <MX_GPIO_Init+0xe8>)
 8002100:	695a      	ldr	r2, [r3, #20]
 8002102:	4b25      	ldr	r3, [pc, #148]	; (8002198 <MX_GPIO_Init+0xe8>)
 8002104:	2180      	movs	r1, #128	; 0x80
 8002106:	02c9      	lsls	r1, r1, #11
 8002108:	430a      	orrs	r2, r1
 800210a:	615a      	str	r2, [r3, #20]
 800210c:	4b22      	ldr	r3, [pc, #136]	; (8002198 <MX_GPIO_Init+0xe8>)
 800210e:	695a      	ldr	r2, [r3, #20]
 8002110:	2380      	movs	r3, #128	; 0x80
 8002112:	02db      	lsls	r3, r3, #11
 8002114:	4013      	ands	r3, r2
 8002116:	603b      	str	r3, [r7, #0]
 8002118:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_11, GPIO_PIN_RESET);
 800211a:	4920      	ldr	r1, [pc, #128]	; (800219c <MX_GPIO_Init+0xec>)
 800211c:	4b20      	ldr	r3, [pc, #128]	; (80021a0 <MX_GPIO_Init+0xf0>)
 800211e:	2200      	movs	r2, #0
 8002120:	0018      	movs	r0, r3
 8002122:	f001 facd 	bl	80036c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002126:	193b      	adds	r3, r7, r4
 8002128:	2203      	movs	r2, #3
 800212a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800212c:	193b      	adds	r3, r7, r4
 800212e:	2200      	movs	r2, #0
 8002130:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002132:	193b      	adds	r3, r7, r4
 8002134:	2200      	movs	r2, #0
 8002136:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002138:	193b      	adds	r3, r7, r4
 800213a:	4a1a      	ldr	r2, [pc, #104]	; (80021a4 <MX_GPIO_Init+0xf4>)
 800213c:	0019      	movs	r1, r3
 800213e:	0010      	movs	r0, r2
 8002140:	f001 f94e 	bl	80033e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002144:	0021      	movs	r1, r4
 8002146:	187b      	adds	r3, r7, r1
 8002148:	220c      	movs	r2, #12
 800214a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800214c:	187b      	adds	r3, r7, r1
 800214e:	2288      	movs	r2, #136	; 0x88
 8002150:	0352      	lsls	r2, r2, #13
 8002152:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002154:	187b      	adds	r3, r7, r1
 8002156:	2200      	movs	r2, #0
 8002158:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800215a:	000c      	movs	r4, r1
 800215c:	187b      	adds	r3, r7, r1
 800215e:	4a11      	ldr	r2, [pc, #68]	; (80021a4 <MX_GPIO_Init+0xf4>)
 8002160:	0019      	movs	r1, r3
 8002162:	0010      	movs	r0, r2
 8002164:	f001 f93c 	bl	80033e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_11;
 8002168:	0021      	movs	r1, r4
 800216a:	187b      	adds	r3, r7, r1
 800216c:	4a0b      	ldr	r2, [pc, #44]	; (800219c <MX_GPIO_Init+0xec>)
 800216e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002170:	187b      	adds	r3, r7, r1
 8002172:	2201      	movs	r2, #1
 8002174:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002176:	187b      	adds	r3, r7, r1
 8002178:	2200      	movs	r2, #0
 800217a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800217c:	187b      	adds	r3, r7, r1
 800217e:	2200      	movs	r2, #0
 8002180:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002182:	187b      	adds	r3, r7, r1
 8002184:	4a06      	ldr	r2, [pc, #24]	; (80021a0 <MX_GPIO_Init+0xf0>)
 8002186:	0019      	movs	r1, r3
 8002188:	0010      	movs	r0, r2
 800218a:	f001 f929 	bl	80033e0 <HAL_GPIO_Init>

}
 800218e:	46c0      	nop			; (mov r8, r8)
 8002190:	46bd      	mov	sp, r7
 8002192:	b009      	add	sp, #36	; 0x24
 8002194:	bd90      	pop	{r4, r7, pc}
 8002196:	46c0      	nop			; (mov r8, r8)
 8002198:	40021000 	.word	0x40021000
 800219c:	00000807 	.word	0x00000807
 80021a0:	48000400 	.word	0x48000400
 80021a4:	48000800 	.word	0x48000800

080021a8 <ADC_Select_CH0>:

/* USER CODE BEGIN 4 */

void ADC_Select_CH0 (void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80021ae:	1d3b      	adds	r3, r7, #4
 80021b0:	0018      	movs	r0, r3
 80021b2:	230c      	movs	r3, #12
 80021b4:	001a      	movs	r2, r3
 80021b6:	2100      	movs	r1, #0
 80021b8:	f006 fdae 	bl	8008d18 <memset>
	sConfig.Channel = ADC_CHANNEL_0;
 80021bc:	1d3b      	adds	r3, r7, #4
 80021be:	2200      	movs	r2, #0
 80021c0:	601a      	str	r2, [r3, #0]
	sConfig.Rank = 1;
 80021c2:	1d3b      	adds	r3, r7, #4
 80021c4:	2201      	movs	r2, #1
 80021c6:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80021c8:	1d3b      	adds	r3, r7, #4
 80021ca:	2280      	movs	r2, #128	; 0x80
 80021cc:	0552      	lsls	r2, r2, #21
 80021ce:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80021d0:	1d3a      	adds	r2, r7, #4
 80021d2:	4b06      	ldr	r3, [pc, #24]	; (80021ec <ADC_Select_CH0+0x44>)
 80021d4:	0011      	movs	r1, r2
 80021d6:	0018      	movs	r0, r3
 80021d8:	f000 fd44 	bl	8002c64 <HAL_ADC_ConfigChannel>
 80021dc:	1e03      	subs	r3, r0, #0
 80021de:	d001      	beq.n	80021e4 <ADC_Select_CH0+0x3c>
	{
		Error_Handler();
 80021e0:	f000 f832 	bl	8002248 <Error_Handler>
	}
}
 80021e4:	46c0      	nop			; (mov r8, r8)
 80021e6:	46bd      	mov	sp, r7
 80021e8:	b004      	add	sp, #16
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	20002344 	.word	0x20002344

080021f0 <ADC_Select_CH3>:

void ADC_Select_CH3 (void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80021f6:	1d3b      	adds	r3, r7, #4
 80021f8:	0018      	movs	r0, r3
 80021fa:	230c      	movs	r3, #12
 80021fc:	001a      	movs	r2, r3
 80021fe:	2100      	movs	r1, #0
 8002200:	f006 fd8a 	bl	8008d18 <memset>
	sConfig.Channel = ADC_CHANNEL_3;
 8002204:	1d3b      	adds	r3, r7, #4
 8002206:	2203      	movs	r2, #3
 8002208:	601a      	str	r2, [r3, #0]
	sConfig.Rank = 1;
 800220a:	1d3b      	adds	r3, r7, #4
 800220c:	2201      	movs	r2, #1
 800220e:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002210:	1d3b      	adds	r3, r7, #4
 8002212:	2280      	movs	r2, #128	; 0x80
 8002214:	0552      	lsls	r2, r2, #21
 8002216:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002218:	1d3a      	adds	r2, r7, #4
 800221a:	4b06      	ldr	r3, [pc, #24]	; (8002234 <ADC_Select_CH3+0x44>)
 800221c:	0011      	movs	r1, r2
 800221e:	0018      	movs	r0, r3
 8002220:	f000 fd20 	bl	8002c64 <HAL_ADC_ConfigChannel>
 8002224:	1e03      	subs	r3, r0, #0
 8002226:	d001      	beq.n	800222c <ADC_Select_CH3+0x3c>
	{
		Error_Handler();
 8002228:	f000 f80e 	bl	8002248 <Error_Handler>
	}
}
 800222c:	46c0      	nop			; (mov r8, r8)
 800222e:	46bd      	mov	sp, r7
 8002230:	b004      	add	sp, #16
 8002232:	bd80      	pop	{r7, pc}
 8002234:	20002344 	.word	0x20002344

08002238 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002240:	2001      	movs	r0, #1
 8002242:	f003 fecf 	bl	8005fe4 <osDelay>
 8002246:	e7fb      	b.n	8002240 <StartDefaultTask+0x8>

08002248 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800224c:	b672      	cpsid	i
}
 800224e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002250:	e7fe      	b.n	8002250 <Error_Handler+0x8>
	...

08002254 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800225a:	4b12      	ldr	r3, [pc, #72]	; (80022a4 <HAL_MspInit+0x50>)
 800225c:	699a      	ldr	r2, [r3, #24]
 800225e:	4b11      	ldr	r3, [pc, #68]	; (80022a4 <HAL_MspInit+0x50>)
 8002260:	2101      	movs	r1, #1
 8002262:	430a      	orrs	r2, r1
 8002264:	619a      	str	r2, [r3, #24]
 8002266:	4b0f      	ldr	r3, [pc, #60]	; (80022a4 <HAL_MspInit+0x50>)
 8002268:	699b      	ldr	r3, [r3, #24]
 800226a:	2201      	movs	r2, #1
 800226c:	4013      	ands	r3, r2
 800226e:	607b      	str	r3, [r7, #4]
 8002270:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002272:	4b0c      	ldr	r3, [pc, #48]	; (80022a4 <HAL_MspInit+0x50>)
 8002274:	69da      	ldr	r2, [r3, #28]
 8002276:	4b0b      	ldr	r3, [pc, #44]	; (80022a4 <HAL_MspInit+0x50>)
 8002278:	2180      	movs	r1, #128	; 0x80
 800227a:	0549      	lsls	r1, r1, #21
 800227c:	430a      	orrs	r2, r1
 800227e:	61da      	str	r2, [r3, #28]
 8002280:	4b08      	ldr	r3, [pc, #32]	; (80022a4 <HAL_MspInit+0x50>)
 8002282:	69da      	ldr	r2, [r3, #28]
 8002284:	2380      	movs	r3, #128	; 0x80
 8002286:	055b      	lsls	r3, r3, #21
 8002288:	4013      	ands	r3, r2
 800228a:	603b      	str	r3, [r7, #0]
 800228c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 800228e:	2302      	movs	r3, #2
 8002290:	425b      	negs	r3, r3
 8002292:	2200      	movs	r2, #0
 8002294:	2103      	movs	r1, #3
 8002296:	0018      	movs	r0, r3
 8002298:	f001 f870 	bl	800337c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800229c:	46c0      	nop			; (mov r8, r8)
 800229e:	46bd      	mov	sp, r7
 80022a0:	b002      	add	sp, #8
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	40021000 	.word	0x40021000

080022a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80022a8:	b590      	push	{r4, r7, lr}
 80022aa:	b08b      	sub	sp, #44	; 0x2c
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b0:	2414      	movs	r4, #20
 80022b2:	193b      	adds	r3, r7, r4
 80022b4:	0018      	movs	r0, r3
 80022b6:	2314      	movs	r3, #20
 80022b8:	001a      	movs	r2, r3
 80022ba:	2100      	movs	r1, #0
 80022bc:	f006 fd2c 	bl	8008d18 <memset>
  if(hadc->Instance==ADC1)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a19      	ldr	r2, [pc, #100]	; (800232c <HAL_ADC_MspInit+0x84>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d12b      	bne.n	8002322 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80022ca:	4b19      	ldr	r3, [pc, #100]	; (8002330 <HAL_ADC_MspInit+0x88>)
 80022cc:	699a      	ldr	r2, [r3, #24]
 80022ce:	4b18      	ldr	r3, [pc, #96]	; (8002330 <HAL_ADC_MspInit+0x88>)
 80022d0:	2180      	movs	r1, #128	; 0x80
 80022d2:	0089      	lsls	r1, r1, #2
 80022d4:	430a      	orrs	r2, r1
 80022d6:	619a      	str	r2, [r3, #24]
 80022d8:	4b15      	ldr	r3, [pc, #84]	; (8002330 <HAL_ADC_MspInit+0x88>)
 80022da:	699a      	ldr	r2, [r3, #24]
 80022dc:	2380      	movs	r3, #128	; 0x80
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	4013      	ands	r3, r2
 80022e2:	613b      	str	r3, [r7, #16]
 80022e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022e6:	4b12      	ldr	r3, [pc, #72]	; (8002330 <HAL_ADC_MspInit+0x88>)
 80022e8:	695a      	ldr	r2, [r3, #20]
 80022ea:	4b11      	ldr	r3, [pc, #68]	; (8002330 <HAL_ADC_MspInit+0x88>)
 80022ec:	2180      	movs	r1, #128	; 0x80
 80022ee:	0289      	lsls	r1, r1, #10
 80022f0:	430a      	orrs	r2, r1
 80022f2:	615a      	str	r2, [r3, #20]
 80022f4:	4b0e      	ldr	r3, [pc, #56]	; (8002330 <HAL_ADC_MspInit+0x88>)
 80022f6:	695a      	ldr	r2, [r3, #20]
 80022f8:	2380      	movs	r3, #128	; 0x80
 80022fa:	029b      	lsls	r3, r3, #10
 80022fc:	4013      	ands	r3, r2
 80022fe:	60fb      	str	r3, [r7, #12]
 8002300:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    PA3     ------> ADC_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8002302:	193b      	adds	r3, r7, r4
 8002304:	2209      	movs	r2, #9
 8002306:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002308:	193b      	adds	r3, r7, r4
 800230a:	2203      	movs	r2, #3
 800230c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230e:	193b      	adds	r3, r7, r4
 8002310:	2200      	movs	r2, #0
 8002312:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002314:	193a      	adds	r2, r7, r4
 8002316:	2390      	movs	r3, #144	; 0x90
 8002318:	05db      	lsls	r3, r3, #23
 800231a:	0011      	movs	r1, r2
 800231c:	0018      	movs	r0, r3
 800231e:	f001 f85f 	bl	80033e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002322:	46c0      	nop			; (mov r8, r8)
 8002324:	46bd      	mov	sp, r7
 8002326:	b00b      	add	sp, #44	; 0x2c
 8002328:	bd90      	pop	{r4, r7, pc}
 800232a:	46c0      	nop			; (mov r8, r8)
 800232c:	40012400 	.word	0x40012400
 8002330:	40021000 	.word	0x40021000

08002334 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002334:	b590      	push	{r4, r7, lr}
 8002336:	b08d      	sub	sp, #52	; 0x34
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800233c:	241c      	movs	r4, #28
 800233e:	193b      	adds	r3, r7, r4
 8002340:	0018      	movs	r0, r3
 8002342:	2314      	movs	r3, #20
 8002344:	001a      	movs	r2, r3
 8002346:	2100      	movs	r1, #0
 8002348:	f006 fce6 	bl	8008d18 <memset>
  if(hi2c->Instance==I2C1)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a39      	ldr	r2, [pc, #228]	; (8002438 <HAL_I2C_MspInit+0x104>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d133      	bne.n	80023be <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002356:	4b39      	ldr	r3, [pc, #228]	; (800243c <HAL_I2C_MspInit+0x108>)
 8002358:	695a      	ldr	r2, [r3, #20]
 800235a:	4b38      	ldr	r3, [pc, #224]	; (800243c <HAL_I2C_MspInit+0x108>)
 800235c:	2180      	movs	r1, #128	; 0x80
 800235e:	02c9      	lsls	r1, r1, #11
 8002360:	430a      	orrs	r2, r1
 8002362:	615a      	str	r2, [r3, #20]
 8002364:	4b35      	ldr	r3, [pc, #212]	; (800243c <HAL_I2C_MspInit+0x108>)
 8002366:	695a      	ldr	r2, [r3, #20]
 8002368:	2380      	movs	r3, #128	; 0x80
 800236a:	02db      	lsls	r3, r3, #11
 800236c:	4013      	ands	r3, r2
 800236e:	61bb      	str	r3, [r7, #24]
 8002370:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002372:	193b      	adds	r3, r7, r4
 8002374:	22c0      	movs	r2, #192	; 0xc0
 8002376:	0092      	lsls	r2, r2, #2
 8002378:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800237a:	0021      	movs	r1, r4
 800237c:	187b      	adds	r3, r7, r1
 800237e:	2212      	movs	r2, #18
 8002380:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002382:	187b      	adds	r3, r7, r1
 8002384:	2200      	movs	r2, #0
 8002386:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002388:	187b      	adds	r3, r7, r1
 800238a:	2203      	movs	r2, #3
 800238c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800238e:	187b      	adds	r3, r7, r1
 8002390:	2201      	movs	r2, #1
 8002392:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002394:	187b      	adds	r3, r7, r1
 8002396:	4a2a      	ldr	r2, [pc, #168]	; (8002440 <HAL_I2C_MspInit+0x10c>)
 8002398:	0019      	movs	r1, r3
 800239a:	0010      	movs	r0, r2
 800239c:	f001 f820 	bl	80033e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80023a0:	4b26      	ldr	r3, [pc, #152]	; (800243c <HAL_I2C_MspInit+0x108>)
 80023a2:	69da      	ldr	r2, [r3, #28]
 80023a4:	4b25      	ldr	r3, [pc, #148]	; (800243c <HAL_I2C_MspInit+0x108>)
 80023a6:	2180      	movs	r1, #128	; 0x80
 80023a8:	0389      	lsls	r1, r1, #14
 80023aa:	430a      	orrs	r2, r1
 80023ac:	61da      	str	r2, [r3, #28]
 80023ae:	4b23      	ldr	r3, [pc, #140]	; (800243c <HAL_I2C_MspInit+0x108>)
 80023b0:	69da      	ldr	r2, [r3, #28]
 80023b2:	2380      	movs	r3, #128	; 0x80
 80023b4:	039b      	lsls	r3, r3, #14
 80023b6:	4013      	ands	r3, r2
 80023b8:	617b      	str	r3, [r7, #20]
 80023ba:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80023bc:	e037      	b.n	800242e <HAL_I2C_MspInit+0xfa>
  else if(hi2c->Instance==I2C2)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a20      	ldr	r2, [pc, #128]	; (8002444 <HAL_I2C_MspInit+0x110>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d132      	bne.n	800242e <HAL_I2C_MspInit+0xfa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023c8:	4b1c      	ldr	r3, [pc, #112]	; (800243c <HAL_I2C_MspInit+0x108>)
 80023ca:	695a      	ldr	r2, [r3, #20]
 80023cc:	4b1b      	ldr	r3, [pc, #108]	; (800243c <HAL_I2C_MspInit+0x108>)
 80023ce:	2180      	movs	r1, #128	; 0x80
 80023d0:	02c9      	lsls	r1, r1, #11
 80023d2:	430a      	orrs	r2, r1
 80023d4:	615a      	str	r2, [r3, #20]
 80023d6:	4b19      	ldr	r3, [pc, #100]	; (800243c <HAL_I2C_MspInit+0x108>)
 80023d8:	695a      	ldr	r2, [r3, #20]
 80023da:	2380      	movs	r3, #128	; 0x80
 80023dc:	02db      	lsls	r3, r3, #11
 80023de:	4013      	ands	r3, r2
 80023e0:	613b      	str	r3, [r7, #16]
 80023e2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80023e4:	211c      	movs	r1, #28
 80023e6:	187b      	adds	r3, r7, r1
 80023e8:	22c0      	movs	r2, #192	; 0xc0
 80023ea:	01d2      	lsls	r2, r2, #7
 80023ec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023ee:	187b      	adds	r3, r7, r1
 80023f0:	2212      	movs	r2, #18
 80023f2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023f4:	187b      	adds	r3, r7, r1
 80023f6:	2201      	movs	r2, #1
 80023f8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023fa:	187b      	adds	r3, r7, r1
 80023fc:	2203      	movs	r2, #3
 80023fe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_I2C2;
 8002400:	187b      	adds	r3, r7, r1
 8002402:	2205      	movs	r2, #5
 8002404:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002406:	187b      	adds	r3, r7, r1
 8002408:	4a0d      	ldr	r2, [pc, #52]	; (8002440 <HAL_I2C_MspInit+0x10c>)
 800240a:	0019      	movs	r1, r3
 800240c:	0010      	movs	r0, r2
 800240e:	f000 ffe7 	bl	80033e0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002412:	4b0a      	ldr	r3, [pc, #40]	; (800243c <HAL_I2C_MspInit+0x108>)
 8002414:	69da      	ldr	r2, [r3, #28]
 8002416:	4b09      	ldr	r3, [pc, #36]	; (800243c <HAL_I2C_MspInit+0x108>)
 8002418:	2180      	movs	r1, #128	; 0x80
 800241a:	03c9      	lsls	r1, r1, #15
 800241c:	430a      	orrs	r2, r1
 800241e:	61da      	str	r2, [r3, #28]
 8002420:	4b06      	ldr	r3, [pc, #24]	; (800243c <HAL_I2C_MspInit+0x108>)
 8002422:	69da      	ldr	r2, [r3, #28]
 8002424:	2380      	movs	r3, #128	; 0x80
 8002426:	03db      	lsls	r3, r3, #15
 8002428:	4013      	ands	r3, r2
 800242a:	60fb      	str	r3, [r7, #12]
 800242c:	68fb      	ldr	r3, [r7, #12]
}
 800242e:	46c0      	nop			; (mov r8, r8)
 8002430:	46bd      	mov	sp, r7
 8002432:	b00d      	add	sp, #52	; 0x34
 8002434:	bd90      	pop	{r4, r7, pc}
 8002436:	46c0      	nop			; (mov r8, r8)
 8002438:	40005400 	.word	0x40005400
 800243c:	40021000 	.word	0x40021000
 8002440:	48000400 	.word	0x48000400
 8002444:	40005800 	.word	0x40005800

08002448 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b086      	sub	sp, #24
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a1c      	ldr	r2, [pc, #112]	; (80024c8 <HAL_TIM_Base_MspInit+0x80>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d10e      	bne.n	8002478 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800245a:	4b1c      	ldr	r3, [pc, #112]	; (80024cc <HAL_TIM_Base_MspInit+0x84>)
 800245c:	699a      	ldr	r2, [r3, #24]
 800245e:	4b1b      	ldr	r3, [pc, #108]	; (80024cc <HAL_TIM_Base_MspInit+0x84>)
 8002460:	2180      	movs	r1, #128	; 0x80
 8002462:	0109      	lsls	r1, r1, #4
 8002464:	430a      	orrs	r2, r1
 8002466:	619a      	str	r2, [r3, #24]
 8002468:	4b18      	ldr	r3, [pc, #96]	; (80024cc <HAL_TIM_Base_MspInit+0x84>)
 800246a:	699a      	ldr	r2, [r3, #24]
 800246c:	2380      	movs	r3, #128	; 0x80
 800246e:	011b      	lsls	r3, r3, #4
 8002470:	4013      	ands	r3, r2
 8002472:	617b      	str	r3, [r7, #20]
 8002474:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002476:	e022      	b.n	80024be <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM6)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a14      	ldr	r2, [pc, #80]	; (80024d0 <HAL_TIM_Base_MspInit+0x88>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d10c      	bne.n	800249c <HAL_TIM_Base_MspInit+0x54>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002482:	4b12      	ldr	r3, [pc, #72]	; (80024cc <HAL_TIM_Base_MspInit+0x84>)
 8002484:	69da      	ldr	r2, [r3, #28]
 8002486:	4b11      	ldr	r3, [pc, #68]	; (80024cc <HAL_TIM_Base_MspInit+0x84>)
 8002488:	2110      	movs	r1, #16
 800248a:	430a      	orrs	r2, r1
 800248c:	61da      	str	r2, [r3, #28]
 800248e:	4b0f      	ldr	r3, [pc, #60]	; (80024cc <HAL_TIM_Base_MspInit+0x84>)
 8002490:	69db      	ldr	r3, [r3, #28]
 8002492:	2210      	movs	r2, #16
 8002494:	4013      	ands	r3, r2
 8002496:	613b      	str	r3, [r7, #16]
 8002498:	693b      	ldr	r3, [r7, #16]
}
 800249a:	e010      	b.n	80024be <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM7)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a0c      	ldr	r2, [pc, #48]	; (80024d4 <HAL_TIM_Base_MspInit+0x8c>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d10b      	bne.n	80024be <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80024a6:	4b09      	ldr	r3, [pc, #36]	; (80024cc <HAL_TIM_Base_MspInit+0x84>)
 80024a8:	69da      	ldr	r2, [r3, #28]
 80024aa:	4b08      	ldr	r3, [pc, #32]	; (80024cc <HAL_TIM_Base_MspInit+0x84>)
 80024ac:	2120      	movs	r1, #32
 80024ae:	430a      	orrs	r2, r1
 80024b0:	61da      	str	r2, [r3, #28]
 80024b2:	4b06      	ldr	r3, [pc, #24]	; (80024cc <HAL_TIM_Base_MspInit+0x84>)
 80024b4:	69db      	ldr	r3, [r3, #28]
 80024b6:	2220      	movs	r2, #32
 80024b8:	4013      	ands	r3, r2
 80024ba:	60fb      	str	r3, [r7, #12]
 80024bc:	68fb      	ldr	r3, [r7, #12]
}
 80024be:	46c0      	nop			; (mov r8, r8)
 80024c0:	46bd      	mov	sp, r7
 80024c2:	b006      	add	sp, #24
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	46c0      	nop			; (mov r8, r8)
 80024c8:	40012c00 	.word	0x40012c00
 80024cc:	40021000 	.word	0x40021000
 80024d0:	40001000 	.word	0x40001000
 80024d4:	40001400 	.word	0x40001400

080024d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80024d8:	b590      	push	{r4, r7, lr}
 80024da:	b089      	sub	sp, #36	; 0x24
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024e0:	240c      	movs	r4, #12
 80024e2:	193b      	adds	r3, r7, r4
 80024e4:	0018      	movs	r0, r3
 80024e6:	2314      	movs	r3, #20
 80024e8:	001a      	movs	r2, r3
 80024ea:	2100      	movs	r1, #0
 80024ec:	f006 fc14 	bl	8008d18 <memset>
  if(htim->Instance==TIM1)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a16      	ldr	r2, [pc, #88]	; (8002550 <HAL_TIM_MspPostInit+0x78>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d125      	bne.n	8002546 <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024fa:	4b16      	ldr	r3, [pc, #88]	; (8002554 <HAL_TIM_MspPostInit+0x7c>)
 80024fc:	695a      	ldr	r2, [r3, #20]
 80024fe:	4b15      	ldr	r3, [pc, #84]	; (8002554 <HAL_TIM_MspPostInit+0x7c>)
 8002500:	2180      	movs	r1, #128	; 0x80
 8002502:	0289      	lsls	r1, r1, #10
 8002504:	430a      	orrs	r2, r1
 8002506:	615a      	str	r2, [r3, #20]
 8002508:	4b12      	ldr	r3, [pc, #72]	; (8002554 <HAL_TIM_MspPostInit+0x7c>)
 800250a:	695a      	ldr	r2, [r3, #20]
 800250c:	2380      	movs	r3, #128	; 0x80
 800250e:	029b      	lsls	r3, r3, #10
 8002510:	4013      	ands	r3, r2
 8002512:	60bb      	str	r3, [r7, #8]
 8002514:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002516:	193b      	adds	r3, r7, r4
 8002518:	2280      	movs	r2, #128	; 0x80
 800251a:	0112      	lsls	r2, r2, #4
 800251c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800251e:	0021      	movs	r1, r4
 8002520:	187b      	adds	r3, r7, r1
 8002522:	2202      	movs	r2, #2
 8002524:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002526:	187b      	adds	r3, r7, r1
 8002528:	2200      	movs	r2, #0
 800252a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800252c:	187b      	adds	r3, r7, r1
 800252e:	2200      	movs	r2, #0
 8002530:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002532:	187b      	adds	r3, r7, r1
 8002534:	2202      	movs	r2, #2
 8002536:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002538:	187a      	adds	r2, r7, r1
 800253a:	2390      	movs	r3, #144	; 0x90
 800253c:	05db      	lsls	r3, r3, #23
 800253e:	0011      	movs	r1, r2
 8002540:	0018      	movs	r0, r3
 8002542:	f000 ff4d 	bl	80033e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002546:	46c0      	nop			; (mov r8, r8)
 8002548:	46bd      	mov	sp, r7
 800254a:	b009      	add	sp, #36	; 0x24
 800254c:	bd90      	pop	{r4, r7, pc}
 800254e:	46c0      	nop			; (mov r8, r8)
 8002550:	40012c00 	.word	0x40012c00
 8002554:	40021000 	.word	0x40021000

08002558 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800255c:	e7fe      	b.n	800255c <NMI_Handler+0x4>

0800255e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800255e:	b580      	push	{r7, lr}
 8002560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002562:	e7fe      	b.n	8002562 <HardFault_Handler+0x4>

08002564 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002568:	f000 f8c4 	bl	80026f4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800256c:	f005 f9a0 	bl	80078b0 <xTaskGetSchedulerState>
 8002570:	0003      	movs	r3, r0
 8002572:	2b01      	cmp	r3, #1
 8002574:	d001      	beq.n	800257a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002576:	f005 ff1f 	bl	80083b8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800257a:	46c0      	nop			; (mov r8, r8)
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002584:	2004      	movs	r0, #4
 8002586:	f001 f8b9 	bl	80036fc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800258a:	2008      	movs	r0, #8
 800258c:	f001 f8b6 	bl	80036fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8002590:	46c0      	nop			; (mov r8, r8)
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
	...

08002598 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b086      	sub	sp, #24
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025a0:	4a14      	ldr	r2, [pc, #80]	; (80025f4 <_sbrk+0x5c>)
 80025a2:	4b15      	ldr	r3, [pc, #84]	; (80025f8 <_sbrk+0x60>)
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025ac:	4b13      	ldr	r3, [pc, #76]	; (80025fc <_sbrk+0x64>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d102      	bne.n	80025ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025b4:	4b11      	ldr	r3, [pc, #68]	; (80025fc <_sbrk+0x64>)
 80025b6:	4a12      	ldr	r2, [pc, #72]	; (8002600 <_sbrk+0x68>)
 80025b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025ba:	4b10      	ldr	r3, [pc, #64]	; (80025fc <_sbrk+0x64>)
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	18d3      	adds	r3, r2, r3
 80025c2:	693a      	ldr	r2, [r7, #16]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d207      	bcs.n	80025d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025c8:	f006 fb60 	bl	8008c8c <__errno>
 80025cc:	0003      	movs	r3, r0
 80025ce:	220c      	movs	r2, #12
 80025d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025d2:	2301      	movs	r3, #1
 80025d4:	425b      	negs	r3, r3
 80025d6:	e009      	b.n	80025ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025d8:	4b08      	ldr	r3, [pc, #32]	; (80025fc <_sbrk+0x64>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025de:	4b07      	ldr	r3, [pc, #28]	; (80025fc <_sbrk+0x64>)
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	18d2      	adds	r2, r2, r3
 80025e6:	4b05      	ldr	r3, [pc, #20]	; (80025fc <_sbrk+0x64>)
 80025e8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80025ea:	68fb      	ldr	r3, [r7, #12]
}
 80025ec:	0018      	movs	r0, r3
 80025ee:	46bd      	mov	sp, r7
 80025f0:	b006      	add	sp, #24
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	20004000 	.word	0x20004000
 80025f8:	00000400 	.word	0x00000400
 80025fc:	200000cc 	.word	0x200000cc
 8002600:	20002420 	.word	0x20002420

08002604 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002608:	46c0      	nop			; (mov r8, r8)
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
	...

08002610 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002610:	480d      	ldr	r0, [pc, #52]	; (8002648 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002612:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002614:	480d      	ldr	r0, [pc, #52]	; (800264c <LoopForever+0x6>)
  ldr r1, =_edata
 8002616:	490e      	ldr	r1, [pc, #56]	; (8002650 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002618:	4a0e      	ldr	r2, [pc, #56]	; (8002654 <LoopForever+0xe>)
  movs r3, #0
 800261a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800261c:	e002      	b.n	8002624 <LoopCopyDataInit>

0800261e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800261e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002620:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002622:	3304      	adds	r3, #4

08002624 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002624:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002626:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002628:	d3f9      	bcc.n	800261e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800262a:	4a0b      	ldr	r2, [pc, #44]	; (8002658 <LoopForever+0x12>)
  ldr r4, =_ebss
 800262c:	4c0b      	ldr	r4, [pc, #44]	; (800265c <LoopForever+0x16>)
  movs r3, #0
 800262e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002630:	e001      	b.n	8002636 <LoopFillZerobss>

08002632 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002632:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002634:	3204      	adds	r2, #4

08002636 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002636:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002638:	d3fb      	bcc.n	8002632 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800263a:	f7ff ffe3 	bl	8002604 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800263e:	f006 fb2b 	bl	8008c98 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002642:	f7ff fa8f 	bl	8001b64 <main>

08002646 <LoopForever>:

LoopForever:
    b LoopForever
 8002646:	e7fe      	b.n	8002646 <LoopForever>
  ldr   r0, =_estack
 8002648:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800264c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002650:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8002654:	0800b140 	.word	0x0800b140
  ldr r2, =_sbss
 8002658:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 800265c:	20002420 	.word	0x20002420

08002660 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002660:	e7fe      	b.n	8002660 <ADC1_IRQHandler>
	...

08002664 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002668:	4b07      	ldr	r3, [pc, #28]	; (8002688 <HAL_Init+0x24>)
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	4b06      	ldr	r3, [pc, #24]	; (8002688 <HAL_Init+0x24>)
 800266e:	2110      	movs	r1, #16
 8002670:	430a      	orrs	r2, r1
 8002672:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002674:	2003      	movs	r0, #3
 8002676:	f000 f809 	bl	800268c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800267a:	f7ff fdeb 	bl	8002254 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800267e:	2300      	movs	r3, #0
}
 8002680:	0018      	movs	r0, r3
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	46c0      	nop			; (mov r8, r8)
 8002688:	40022000 	.word	0x40022000

0800268c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800268c:	b590      	push	{r4, r7, lr}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002694:	4b14      	ldr	r3, [pc, #80]	; (80026e8 <HAL_InitTick+0x5c>)
 8002696:	681c      	ldr	r4, [r3, #0]
 8002698:	4b14      	ldr	r3, [pc, #80]	; (80026ec <HAL_InitTick+0x60>)
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	0019      	movs	r1, r3
 800269e:	23fa      	movs	r3, #250	; 0xfa
 80026a0:	0098      	lsls	r0, r3, #2
 80026a2:	f7fd fd3b 	bl	800011c <__udivsi3>
 80026a6:	0003      	movs	r3, r0
 80026a8:	0019      	movs	r1, r3
 80026aa:	0020      	movs	r0, r4
 80026ac:	f7fd fd36 	bl	800011c <__udivsi3>
 80026b0:	0003      	movs	r3, r0
 80026b2:	0018      	movs	r0, r3
 80026b4:	f000 fe87 	bl	80033c6 <HAL_SYSTICK_Config>
 80026b8:	1e03      	subs	r3, r0, #0
 80026ba:	d001      	beq.n	80026c0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e00f      	b.n	80026e0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2b03      	cmp	r3, #3
 80026c4:	d80b      	bhi.n	80026de <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026c6:	6879      	ldr	r1, [r7, #4]
 80026c8:	2301      	movs	r3, #1
 80026ca:	425b      	negs	r3, r3
 80026cc:	2200      	movs	r2, #0
 80026ce:	0018      	movs	r0, r3
 80026d0:	f000 fe54 	bl	800337c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026d4:	4b06      	ldr	r3, [pc, #24]	; (80026f0 <HAL_InitTick+0x64>)
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80026da:	2300      	movs	r3, #0
 80026dc:	e000      	b.n	80026e0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
}
 80026e0:	0018      	movs	r0, r3
 80026e2:	46bd      	mov	sp, r7
 80026e4:	b003      	add	sp, #12
 80026e6:	bd90      	pop	{r4, r7, pc}
 80026e8:	20000004 	.word	0x20000004
 80026ec:	2000000c 	.word	0x2000000c
 80026f0:	20000008 	.word	0x20000008

080026f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026f8:	4b05      	ldr	r3, [pc, #20]	; (8002710 <HAL_IncTick+0x1c>)
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	001a      	movs	r2, r3
 80026fe:	4b05      	ldr	r3, [pc, #20]	; (8002714 <HAL_IncTick+0x20>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	18d2      	adds	r2, r2, r3
 8002704:	4b03      	ldr	r3, [pc, #12]	; (8002714 <HAL_IncTick+0x20>)
 8002706:	601a      	str	r2, [r3, #0]
}
 8002708:	46c0      	nop			; (mov r8, r8)
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	46c0      	nop			; (mov r8, r8)
 8002710:	2000000c 	.word	0x2000000c
 8002714:	200023cc 	.word	0x200023cc

08002718 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
  return uwTick;
 800271c:	4b02      	ldr	r3, [pc, #8]	; (8002728 <HAL_GetTick+0x10>)
 800271e:	681b      	ldr	r3, [r3, #0]
}
 8002720:	0018      	movs	r0, r3
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	46c0      	nop			; (mov r8, r8)
 8002728:	200023cc 	.word	0x200023cc

0800272c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002734:	f7ff fff0 	bl	8002718 <HAL_GetTick>
 8002738:	0003      	movs	r3, r0
 800273a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	3301      	adds	r3, #1
 8002744:	d005      	beq.n	8002752 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002746:	4b0a      	ldr	r3, [pc, #40]	; (8002770 <HAL_Delay+0x44>)
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	001a      	movs	r2, r3
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	189b      	adds	r3, r3, r2
 8002750:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002752:	46c0      	nop			; (mov r8, r8)
 8002754:	f7ff ffe0 	bl	8002718 <HAL_GetTick>
 8002758:	0002      	movs	r2, r0
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	68fa      	ldr	r2, [r7, #12]
 8002760:	429a      	cmp	r2, r3
 8002762:	d8f7      	bhi.n	8002754 <HAL_Delay+0x28>
  {
  }
}
 8002764:	46c0      	nop			; (mov r8, r8)
 8002766:	46c0      	nop			; (mov r8, r8)
 8002768:	46bd      	mov	sp, r7
 800276a:	b004      	add	sp, #16
 800276c:	bd80      	pop	{r7, pc}
 800276e:	46c0      	nop			; (mov r8, r8)
 8002770:	2000000c 	.word	0x2000000c

08002774 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800277c:	230f      	movs	r3, #15
 800277e:	18fb      	adds	r3, r7, r3
 8002780:	2200      	movs	r2, #0
 8002782:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8002784:	2300      	movs	r3, #0
 8002786:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d101      	bne.n	8002792 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e125      	b.n	80029de <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002796:	2b00      	cmp	r3, #0
 8002798:	d10a      	bne.n	80027b0 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2234      	movs	r2, #52	; 0x34
 80027a4:	2100      	movs	r1, #0
 80027a6:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	0018      	movs	r0, r3
 80027ac:	f7ff fd7c 	bl	80022a8 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027b4:	2210      	movs	r2, #16
 80027b6:	4013      	ands	r3, r2
 80027b8:	d000      	beq.n	80027bc <HAL_ADC_Init+0x48>
 80027ba:	e103      	b.n	80029c4 <HAL_ADC_Init+0x250>
 80027bc:	230f      	movs	r3, #15
 80027be:	18fb      	adds	r3, r7, r3
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d000      	beq.n	80027c8 <HAL_ADC_Init+0x54>
 80027c6:	e0fd      	b.n	80029c4 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	2204      	movs	r2, #4
 80027d0:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80027d2:	d000      	beq.n	80027d6 <HAL_ADC_Init+0x62>
 80027d4:	e0f6      	b.n	80029c4 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027da:	4a83      	ldr	r2, [pc, #524]	; (80029e8 <HAL_ADC_Init+0x274>)
 80027dc:	4013      	ands	r3, r2
 80027de:	2202      	movs	r2, #2
 80027e0:	431a      	orrs	r2, r3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	2203      	movs	r2, #3
 80027ee:	4013      	ands	r3, r2
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d112      	bne.n	800281a <HAL_ADC_Init+0xa6>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2201      	movs	r2, #1
 80027fc:	4013      	ands	r3, r2
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d009      	beq.n	8002816 <HAL_ADC_Init+0xa2>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	68da      	ldr	r2, [r3, #12]
 8002808:	2380      	movs	r3, #128	; 0x80
 800280a:	021b      	lsls	r3, r3, #8
 800280c:	401a      	ands	r2, r3
 800280e:	2380      	movs	r3, #128	; 0x80
 8002810:	021b      	lsls	r3, r3, #8
 8002812:	429a      	cmp	r2, r3
 8002814:	d101      	bne.n	800281a <HAL_ADC_Init+0xa6>
 8002816:	2301      	movs	r3, #1
 8002818:	e000      	b.n	800281c <HAL_ADC_Init+0xa8>
 800281a:	2300      	movs	r3, #0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d116      	bne.n	800284e <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	2218      	movs	r2, #24
 8002828:	4393      	bics	r3, r2
 800282a:	0019      	movs	r1, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	689a      	ldr	r2, [r3, #8]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	430a      	orrs	r2, r1
 8002836:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	691b      	ldr	r3, [r3, #16]
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	0899      	lsrs	r1, r3, #2
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685a      	ldr	r2, [r3, #4]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	430a      	orrs	r2, r1
 800284c:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	68da      	ldr	r2, [r3, #12]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4964      	ldr	r1, [pc, #400]	; (80029ec <HAL_ADC_Init+0x278>)
 800285a:	400a      	ands	r2, r1
 800285c:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	7e1b      	ldrb	r3, [r3, #24]
 8002862:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	7e5b      	ldrb	r3, [r3, #25]
 8002868:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800286a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	7e9b      	ldrb	r3, [r3, #26]
 8002870:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002872:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002878:	2b01      	cmp	r3, #1
 800287a:	d002      	beq.n	8002882 <HAL_ADC_Init+0x10e>
 800287c:	2380      	movs	r3, #128	; 0x80
 800287e:	015b      	lsls	r3, r3, #5
 8002880:	e000      	b.n	8002884 <HAL_ADC_Init+0x110>
 8002882:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002884:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800288a:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	691b      	ldr	r3, [r3, #16]
 8002890:	2b02      	cmp	r3, #2
 8002892:	d101      	bne.n	8002898 <HAL_ADC_Init+0x124>
 8002894:	2304      	movs	r3, #4
 8002896:	e000      	b.n	800289a <HAL_ADC_Init+0x126>
 8002898:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 800289a:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2124      	movs	r1, #36	; 0x24
 80028a0:	5c5b      	ldrb	r3, [r3, r1]
 80028a2:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80028a4:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80028a6:	68ba      	ldr	r2, [r7, #8]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	7edb      	ldrb	r3, [r3, #27]
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d115      	bne.n	80028e0 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	7e9b      	ldrb	r3, [r3, #26]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d105      	bne.n	80028c8 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	2280      	movs	r2, #128	; 0x80
 80028c0:	0252      	lsls	r2, r2, #9
 80028c2:	4313      	orrs	r3, r2
 80028c4:	60bb      	str	r3, [r7, #8]
 80028c6:	e00b      	b.n	80028e0 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028cc:	2220      	movs	r2, #32
 80028ce:	431a      	orrs	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028d8:	2201      	movs	r2, #1
 80028da:	431a      	orrs	r2, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	69da      	ldr	r2, [r3, #28]
 80028e4:	23c2      	movs	r3, #194	; 0xc2
 80028e6:	33ff      	adds	r3, #255	; 0xff
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d007      	beq.n	80028fc <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80028f4:	4313      	orrs	r3, r2
 80028f6:	68ba      	ldr	r2, [r7, #8]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	68d9      	ldr	r1, [r3, #12]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	68ba      	ldr	r2, [r7, #8]
 8002908:	430a      	orrs	r2, r1
 800290a:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002910:	2380      	movs	r3, #128	; 0x80
 8002912:	055b      	lsls	r3, r3, #21
 8002914:	429a      	cmp	r2, r3
 8002916:	d01b      	beq.n	8002950 <HAL_ADC_Init+0x1dc>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800291c:	2b01      	cmp	r3, #1
 800291e:	d017      	beq.n	8002950 <HAL_ADC_Init+0x1dc>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002924:	2b02      	cmp	r3, #2
 8002926:	d013      	beq.n	8002950 <HAL_ADC_Init+0x1dc>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800292c:	2b03      	cmp	r3, #3
 800292e:	d00f      	beq.n	8002950 <HAL_ADC_Init+0x1dc>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002934:	2b04      	cmp	r3, #4
 8002936:	d00b      	beq.n	8002950 <HAL_ADC_Init+0x1dc>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800293c:	2b05      	cmp	r3, #5
 800293e:	d007      	beq.n	8002950 <HAL_ADC_Init+0x1dc>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002944:	2b06      	cmp	r3, #6
 8002946:	d003      	beq.n	8002950 <HAL_ADC_Init+0x1dc>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800294c:	2b07      	cmp	r3, #7
 800294e:	d112      	bne.n	8002976 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	695a      	ldr	r2, [r3, #20]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	2107      	movs	r1, #7
 800295c:	438a      	bics	r2, r1
 800295e:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	6959      	ldr	r1, [r3, #20]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800296a:	2207      	movs	r2, #7
 800296c:	401a      	ands	r2, r3
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	430a      	orrs	r2, r1
 8002974:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	4a1c      	ldr	r2, [pc, #112]	; (80029f0 <HAL_ADC_Init+0x27c>)
 800297e:	4013      	ands	r3, r2
 8002980:	68ba      	ldr	r2, [r7, #8]
 8002982:	429a      	cmp	r2, r3
 8002984:	d10b      	bne.n	800299e <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002990:	2203      	movs	r2, #3
 8002992:	4393      	bics	r3, r2
 8002994:	2201      	movs	r2, #1
 8002996:	431a      	orrs	r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800299c:	e01c      	b.n	80029d8 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029a2:	2212      	movs	r2, #18
 80029a4:	4393      	bics	r3, r2
 80029a6:	2210      	movs	r2, #16
 80029a8:	431a      	orrs	r2, r3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029b2:	2201      	movs	r2, #1
 80029b4:	431a      	orrs	r2, r3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80029ba:	230f      	movs	r3, #15
 80029bc:	18fb      	adds	r3, r7, r3
 80029be:	2201      	movs	r2, #1
 80029c0:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80029c2:	e009      	b.n	80029d8 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029c8:	2210      	movs	r2, #16
 80029ca:	431a      	orrs	r2, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 80029d0:	230f      	movs	r3, #15
 80029d2:	18fb      	adds	r3, r7, r3
 80029d4:	2201      	movs	r2, #1
 80029d6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80029d8:	230f      	movs	r3, #15
 80029da:	18fb      	adds	r3, r7, r3
 80029dc:	781b      	ldrb	r3, [r3, #0]
}
 80029de:	0018      	movs	r0, r3
 80029e0:	46bd      	mov	sp, r7
 80029e2:	b004      	add	sp, #16
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	46c0      	nop			; (mov r8, r8)
 80029e8:	fffffefd 	.word	0xfffffefd
 80029ec:	fffe0219 	.word	0xfffe0219
 80029f0:	833fffe7 	.word	0x833fffe7

080029f4 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80029f4:	b590      	push	{r4, r7, lr}
 80029f6:	b085      	sub	sp, #20
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029fc:	230f      	movs	r3, #15
 80029fe:	18fb      	adds	r3, r7, r3
 8002a00:	2200      	movs	r2, #0
 8002a02:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	2204      	movs	r2, #4
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	d138      	bne.n	8002a82 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2234      	movs	r2, #52	; 0x34
 8002a14:	5c9b      	ldrb	r3, [r3, r2]
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d101      	bne.n	8002a1e <HAL_ADC_Start+0x2a>
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	e038      	b.n	8002a90 <HAL_ADC_Start+0x9c>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2234      	movs	r2, #52	; 0x34
 8002a22:	2101      	movs	r1, #1
 8002a24:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	7e5b      	ldrb	r3, [r3, #25]
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d007      	beq.n	8002a3e <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8002a2e:	230f      	movs	r3, #15
 8002a30:	18fc      	adds	r4, r7, r3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	0018      	movs	r0, r3
 8002a36:	f000 fa0b 	bl	8002e50 <ADC_Enable>
 8002a3a:	0003      	movs	r3, r0
 8002a3c:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002a3e:	230f      	movs	r3, #15
 8002a40:	18fb      	adds	r3, r7, r3
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d120      	bne.n	8002a8a <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a4c:	4a12      	ldr	r2, [pc, #72]	; (8002a98 <HAL_ADC_Start+0xa4>)
 8002a4e:	4013      	ands	r3, r2
 8002a50:	2280      	movs	r2, #128	; 0x80
 8002a52:	0052      	lsls	r2, r2, #1
 8002a54:	431a      	orrs	r2, r3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2234      	movs	r2, #52	; 0x34
 8002a64:	2100      	movs	r1, #0
 8002a66:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	221c      	movs	r2, #28
 8002a6e:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	689a      	ldr	r2, [r3, #8]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	2104      	movs	r1, #4
 8002a7c:	430a      	orrs	r2, r1
 8002a7e:	609a      	str	r2, [r3, #8]
 8002a80:	e003      	b.n	8002a8a <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002a82:	230f      	movs	r3, #15
 8002a84:	18fb      	adds	r3, r7, r3
 8002a86:	2202      	movs	r2, #2
 8002a88:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002a8a:	230f      	movs	r3, #15
 8002a8c:	18fb      	adds	r3, r7, r3
 8002a8e:	781b      	ldrb	r3, [r3, #0]
}
 8002a90:	0018      	movs	r0, r3
 8002a92:	46bd      	mov	sp, r7
 8002a94:	b005      	add	sp, #20
 8002a96:	bd90      	pop	{r4, r7, pc}
 8002a98:	fffff0fe 	.word	0xfffff0fe

08002a9c <HAL_ADC_Stop>:
  * @brief  Stop ADC conversion of regular group, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{ 
 8002a9c:	b5b0      	push	{r4, r5, r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002aa4:	230f      	movs	r3, #15
 8002aa6:	18fb      	adds	r3, r7, r3
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2234      	movs	r2, #52	; 0x34
 8002ab0:	5c9b      	ldrb	r3, [r3, r2]
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d101      	bne.n	8002aba <HAL_ADC_Stop+0x1e>
 8002ab6:	2302      	movs	r3, #2
 8002ab8:	e029      	b.n	8002b0e <HAL_ADC_Stop+0x72>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2234      	movs	r2, #52	; 0x34
 8002abe:	2101      	movs	r1, #1
 8002ac0:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8002ac2:	250f      	movs	r5, #15
 8002ac4:	197c      	adds	r4, r7, r5
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	0018      	movs	r0, r3
 8002aca:	f000 fab6 	bl	800303a <ADC_ConversionStop>
 8002ace:	0003      	movs	r3, r0
 8002ad0:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002ad2:	197b      	adds	r3, r7, r5
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d112      	bne.n	8002b00 <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002ada:	197c      	adds	r4, r7, r5
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	0018      	movs	r0, r3
 8002ae0:	f000 fa3a 	bl	8002f58 <ADC_Disable>
 8002ae4:	0003      	movs	r3, r0
 8002ae6:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002ae8:	197b      	adds	r3, r7, r5
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d107      	bne.n	8002b00 <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af4:	4a08      	ldr	r2, [pc, #32]	; (8002b18 <HAL_ADC_Stop+0x7c>)
 8002af6:	4013      	ands	r3, r2
 8002af8:	2201      	movs	r2, #1
 8002afa:	431a      	orrs	r2, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2234      	movs	r2, #52	; 0x34
 8002b04:	2100      	movs	r1, #0
 8002b06:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002b08:	230f      	movs	r3, #15
 8002b0a:	18fb      	adds	r3, r7, r3
 8002b0c:	781b      	ldrb	r3, [r3, #0]
}
 8002b0e:	0018      	movs	r0, r3
 8002b10:	46bd      	mov	sp, r7
 8002b12:	b004      	add	sp, #16
 8002b14:	bdb0      	pop	{r4, r5, r7, pc}
 8002b16:	46c0      	nop			; (mov r8, r8)
 8002b18:	fffffefe 	.word	0xfffffefe

08002b1c <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	695b      	ldr	r3, [r3, #20]
 8002b2a:	2b08      	cmp	r3, #8
 8002b2c:	d102      	bne.n	8002b34 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8002b2e:	2308      	movs	r3, #8
 8002b30:	60fb      	str	r3, [r7, #12]
 8002b32:	e014      	b.n	8002b5e <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d10b      	bne.n	8002b5a <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b46:	2220      	movs	r2, #32
 8002b48:	431a      	orrs	r2, r3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2234      	movs	r2, #52	; 0x34
 8002b52:	2100      	movs	r1, #0
 8002b54:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e071      	b.n	8002c3e <HAL_ADC_PollForConversion+0x122>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8002b5a:	230c      	movs	r3, #12
 8002b5c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002b5e:	f7ff fddb 	bl	8002718 <HAL_GetTick>
 8002b62:	0003      	movs	r3, r0
 8002b64:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002b66:	e01f      	b.n	8002ba8 <HAL_ADC_PollForConversion+0x8c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	3301      	adds	r3, #1
 8002b6c:	d01c      	beq.n	8002ba8 <HAL_ADC_PollForConversion+0x8c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d007      	beq.n	8002b84 <HAL_ADC_PollForConversion+0x68>
 8002b74:	f7ff fdd0 	bl	8002718 <HAL_GetTick>
 8002b78:	0002      	movs	r2, r0
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	683a      	ldr	r2, [r7, #0]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d211      	bcs.n	8002ba8 <HAL_ADC_PollForConversion+0x8c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	68fa      	ldr	r2, [r7, #12]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	d10b      	bne.n	8002ba8 <HAL_ADC_PollForConversion+0x8c>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b94:	2204      	movs	r2, #4
 8002b96:	431a      	orrs	r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	639a      	str	r2, [r3, #56]	; 0x38

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2234      	movs	r2, #52	; 0x34
 8002ba0:	2100      	movs	r1, #0
 8002ba2:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	e04a      	b.n	8002c3e <HAL_ADC_PollForConversion+0x122>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	68fa      	ldr	r2, [r7, #12]
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	d0d9      	beq.n	8002b68 <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bb8:	2280      	movs	r2, #128	; 0x80
 8002bba:	0092      	lsls	r2, r2, #2
 8002bbc:	431a      	orrs	r2, r3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	68da      	ldr	r2, [r3, #12]
 8002bc8:	23c0      	movs	r3, #192	; 0xc0
 8002bca:	011b      	lsls	r3, r3, #4
 8002bcc:	4013      	ands	r3, r2
 8002bce:	d12d      	bne.n	8002c2c <HAL_ADC_PollForConversion+0x110>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d129      	bne.n	8002c2c <HAL_ADC_PollForConversion+0x110>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2208      	movs	r2, #8
 8002be0:	4013      	ands	r3, r2
 8002be2:	2b08      	cmp	r3, #8
 8002be4:	d122      	bne.n	8002c2c <HAL_ADC_PollForConversion+0x110>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	2204      	movs	r2, #4
 8002bee:	4013      	ands	r3, r2
 8002bf0:	d110      	bne.n	8002c14 <HAL_ADC_PollForConversion+0xf8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	685a      	ldr	r2, [r3, #4]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	210c      	movs	r1, #12
 8002bfe:	438a      	bics	r2, r1
 8002c00:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c06:	4a10      	ldr	r2, [pc, #64]	; (8002c48 <HAL_ADC_PollForConversion+0x12c>)
 8002c08:	4013      	ands	r3, r2
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	431a      	orrs	r2, r3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	639a      	str	r2, [r3, #56]	; 0x38
 8002c12:	e00b      	b.n	8002c2c <HAL_ADC_PollForConversion+0x110>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c18:	2220      	movs	r2, #32
 8002c1a:	431a      	orrs	r2, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c24:	2201      	movs	r2, #1
 8002c26:	431a      	orrs	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	7e1b      	ldrb	r3, [r3, #24]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d103      	bne.n	8002c3c <HAL_ADC_PollForConversion+0x120>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	220c      	movs	r2, #12
 8002c3a:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	0018      	movs	r0, r3
 8002c40:	46bd      	mov	sp, r7
 8002c42:	b004      	add	sp, #16
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	46c0      	nop			; (mov r8, r8)
 8002c48:	fffffefe 	.word	0xfffffefe

08002c4c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002c5a:	0018      	movs	r0, r3
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	b002      	add	sp, #8
 8002c60:	bd80      	pop	{r7, pc}
	...

08002c64 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c6e:	230f      	movs	r3, #15
 8002c70:	18fb      	adds	r3, r7, r3
 8002c72:	2200      	movs	r2, #0
 8002c74:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8002c76:	2300      	movs	r3, #0
 8002c78:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c7e:	2380      	movs	r3, #128	; 0x80
 8002c80:	055b      	lsls	r3, r3, #21
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d011      	beq.n	8002caa <HAL_ADC_ConfigChannel+0x46>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d00d      	beq.n	8002caa <HAL_ADC_ConfigChannel+0x46>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d009      	beq.n	8002caa <HAL_ADC_ConfigChannel+0x46>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c9a:	2b03      	cmp	r3, #3
 8002c9c:	d005      	beq.n	8002caa <HAL_ADC_ConfigChannel+0x46>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca2:	2b04      	cmp	r3, #4
 8002ca4:	d001      	beq.n	8002caa <HAL_ADC_ConfigChannel+0x46>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2234      	movs	r2, #52	; 0x34
 8002cae:	5c9b      	ldrb	r3, [r3, r2]
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d101      	bne.n	8002cb8 <HAL_ADC_ConfigChannel+0x54>
 8002cb4:	2302      	movs	r3, #2
 8002cb6:	e0bb      	b.n	8002e30 <HAL_ADC_ConfigChannel+0x1cc>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2234      	movs	r2, #52	; 0x34
 8002cbc:	2101      	movs	r1, #1
 8002cbe:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	2204      	movs	r2, #4
 8002cc8:	4013      	ands	r3, r2
 8002cca:	d000      	beq.n	8002cce <HAL_ADC_ConfigChannel+0x6a>
 8002ccc:	e09f      	b.n	8002e0e <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	4a59      	ldr	r2, [pc, #356]	; (8002e38 <HAL_ADC_ConfigChannel+0x1d4>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d100      	bne.n	8002cda <HAL_ADC_ConfigChannel+0x76>
 8002cd8:	e077      	b.n	8002dca <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	409a      	lsls	r2, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	430a      	orrs	r2, r1
 8002cee:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cf4:	2380      	movs	r3, #128	; 0x80
 8002cf6:	055b      	lsls	r3, r3, #21
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d037      	beq.n	8002d6c <HAL_ADC_ConfigChannel+0x108>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d033      	beq.n	8002d6c <HAL_ADC_ConfigChannel+0x108>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d02f      	beq.n	8002d6c <HAL_ADC_ConfigChannel+0x108>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d10:	2b03      	cmp	r3, #3
 8002d12:	d02b      	beq.n	8002d6c <HAL_ADC_ConfigChannel+0x108>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d18:	2b04      	cmp	r3, #4
 8002d1a:	d027      	beq.n	8002d6c <HAL_ADC_ConfigChannel+0x108>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d20:	2b05      	cmp	r3, #5
 8002d22:	d023      	beq.n	8002d6c <HAL_ADC_ConfigChannel+0x108>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d28:	2b06      	cmp	r3, #6
 8002d2a:	d01f      	beq.n	8002d6c <HAL_ADC_ConfigChannel+0x108>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d30:	2b07      	cmp	r3, #7
 8002d32:	d01b      	beq.n	8002d6c <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	689a      	ldr	r2, [r3, #8]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	2107      	movs	r1, #7
 8002d40:	400b      	ands	r3, r1
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d012      	beq.n	8002d6c <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	695a      	ldr	r2, [r3, #20]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2107      	movs	r1, #7
 8002d52:	438a      	bics	r2, r1
 8002d54:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	6959      	ldr	r1, [r3, #20]
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	2207      	movs	r2, #7
 8002d62:	401a      	ands	r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	430a      	orrs	r2, r1
 8002d6a:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2b10      	cmp	r3, #16
 8002d72:	d003      	beq.n	8002d7c <HAL_ADC_ConfigChannel+0x118>
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2b11      	cmp	r3, #17
 8002d7a:	d152      	bne.n	8002e22 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002d7c:	4b2f      	ldr	r3, [pc, #188]	; (8002e3c <HAL_ADC_ConfigChannel+0x1d8>)
 8002d7e:	6819      	ldr	r1, [r3, #0]
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2b10      	cmp	r3, #16
 8002d86:	d102      	bne.n	8002d8e <HAL_ADC_ConfigChannel+0x12a>
 8002d88:	2380      	movs	r3, #128	; 0x80
 8002d8a:	041b      	lsls	r3, r3, #16
 8002d8c:	e001      	b.n	8002d92 <HAL_ADC_ConfigChannel+0x12e>
 8002d8e:	2380      	movs	r3, #128	; 0x80
 8002d90:	03db      	lsls	r3, r3, #15
 8002d92:	4a2a      	ldr	r2, [pc, #168]	; (8002e3c <HAL_ADC_ConfigChannel+0x1d8>)
 8002d94:	430b      	orrs	r3, r1
 8002d96:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2b10      	cmp	r3, #16
 8002d9e:	d140      	bne.n	8002e22 <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002da0:	4b27      	ldr	r3, [pc, #156]	; (8002e40 <HAL_ADC_ConfigChannel+0x1dc>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4927      	ldr	r1, [pc, #156]	; (8002e44 <HAL_ADC_ConfigChannel+0x1e0>)
 8002da6:	0018      	movs	r0, r3
 8002da8:	f7fd f9b8 	bl	800011c <__udivsi3>
 8002dac:	0003      	movs	r3, r0
 8002dae:	001a      	movs	r2, r3
 8002db0:	0013      	movs	r3, r2
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	189b      	adds	r3, r3, r2
 8002db6:	005b      	lsls	r3, r3, #1
 8002db8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002dba:	e002      	b.n	8002dc2 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	3b01      	subs	r3, #1
 8002dc0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d1f9      	bne.n	8002dbc <HAL_ADC_ConfigChannel+0x158>
 8002dc8:	e02b      	b.n	8002e22 <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2101      	movs	r1, #1
 8002dd6:	4099      	lsls	r1, r3
 8002dd8:	000b      	movs	r3, r1
 8002dda:	43d9      	mvns	r1, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	400a      	ands	r2, r1
 8002de2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2b10      	cmp	r3, #16
 8002dea:	d003      	beq.n	8002df4 <HAL_ADC_ConfigChannel+0x190>
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2b11      	cmp	r3, #17
 8002df2:	d116      	bne.n	8002e22 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002df4:	4b11      	ldr	r3, [pc, #68]	; (8002e3c <HAL_ADC_ConfigChannel+0x1d8>)
 8002df6:	6819      	ldr	r1, [r3, #0]
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2b10      	cmp	r3, #16
 8002dfe:	d101      	bne.n	8002e04 <HAL_ADC_ConfigChannel+0x1a0>
 8002e00:	4a11      	ldr	r2, [pc, #68]	; (8002e48 <HAL_ADC_ConfigChannel+0x1e4>)
 8002e02:	e000      	b.n	8002e06 <HAL_ADC_ConfigChannel+0x1a2>
 8002e04:	4a11      	ldr	r2, [pc, #68]	; (8002e4c <HAL_ADC_ConfigChannel+0x1e8>)
 8002e06:	4b0d      	ldr	r3, [pc, #52]	; (8002e3c <HAL_ADC_ConfigChannel+0x1d8>)
 8002e08:	400a      	ands	r2, r1
 8002e0a:	601a      	str	r2, [r3, #0]
 8002e0c:	e009      	b.n	8002e22 <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e12:	2220      	movs	r2, #32
 8002e14:	431a      	orrs	r2, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8002e1a:	230f      	movs	r3, #15
 8002e1c:	18fb      	adds	r3, r7, r3
 8002e1e:	2201      	movs	r2, #1
 8002e20:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2234      	movs	r2, #52	; 0x34
 8002e26:	2100      	movs	r1, #0
 8002e28:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002e2a:	230f      	movs	r3, #15
 8002e2c:	18fb      	adds	r3, r7, r3
 8002e2e:	781b      	ldrb	r3, [r3, #0]
}
 8002e30:	0018      	movs	r0, r3
 8002e32:	46bd      	mov	sp, r7
 8002e34:	b004      	add	sp, #16
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	00001001 	.word	0x00001001
 8002e3c:	40012708 	.word	0x40012708
 8002e40:	20000004 	.word	0x20000004
 8002e44:	000f4240 	.word	0x000f4240
 8002e48:	ff7fffff 	.word	0xff7fffff
 8002e4c:	ffbfffff 	.word	0xffbfffff

08002e50 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	2203      	movs	r2, #3
 8002e68:	4013      	ands	r3, r2
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d112      	bne.n	8002e94 <ADC_Enable+0x44>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2201      	movs	r2, #1
 8002e76:	4013      	ands	r3, r2
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d009      	beq.n	8002e90 <ADC_Enable+0x40>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	68da      	ldr	r2, [r3, #12]
 8002e82:	2380      	movs	r3, #128	; 0x80
 8002e84:	021b      	lsls	r3, r3, #8
 8002e86:	401a      	ands	r2, r3
 8002e88:	2380      	movs	r3, #128	; 0x80
 8002e8a:	021b      	lsls	r3, r3, #8
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d101      	bne.n	8002e94 <ADC_Enable+0x44>
 8002e90:	2301      	movs	r3, #1
 8002e92:	e000      	b.n	8002e96 <ADC_Enable+0x46>
 8002e94:	2300      	movs	r3, #0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d152      	bne.n	8002f40 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	4a2a      	ldr	r2, [pc, #168]	; (8002f4c <ADC_Enable+0xfc>)
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	d00d      	beq.n	8002ec2 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eaa:	2210      	movs	r2, #16
 8002eac:	431a      	orrs	r2, r3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	431a      	orrs	r2, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e03f      	b.n	8002f42 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	689a      	ldr	r2, [r3, #8]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2101      	movs	r1, #1
 8002ece:	430a      	orrs	r2, r1
 8002ed0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002ed2:	4b1f      	ldr	r3, [pc, #124]	; (8002f50 <ADC_Enable+0x100>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	491f      	ldr	r1, [pc, #124]	; (8002f54 <ADC_Enable+0x104>)
 8002ed8:	0018      	movs	r0, r3
 8002eda:	f7fd f91f 	bl	800011c <__udivsi3>
 8002ede:	0003      	movs	r3, r0
 8002ee0:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002ee2:	e002      	b.n	8002eea <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	3b01      	subs	r3, #1
 8002ee8:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d1f9      	bne.n	8002ee4 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8002ef0:	f7ff fc12 	bl	8002718 <HAL_GetTick>
 8002ef4:	0003      	movs	r3, r0
 8002ef6:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002ef8:	e01b      	b.n	8002f32 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002efa:	f7ff fc0d 	bl	8002718 <HAL_GetTick>
 8002efe:	0002      	movs	r2, r0
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d914      	bls.n	8002f32 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	4013      	ands	r3, r2
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d00d      	beq.n	8002f32 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f1a:	2210      	movs	r2, #16
 8002f1c:	431a      	orrs	r2, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f26:	2201      	movs	r2, #1
 8002f28:	431a      	orrs	r2, r3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e007      	b.n	8002f42 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	2201      	movs	r2, #1
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d1dc      	bne.n	8002efa <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	0018      	movs	r0, r3
 8002f44:	46bd      	mov	sp, r7
 8002f46:	b004      	add	sp, #16
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	46c0      	nop			; (mov r8, r8)
 8002f4c:	80000017 	.word	0x80000017
 8002f50:	20000004 	.word	0x20000004
 8002f54:	000f4240 	.word	0x000f4240

08002f58 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f60:	2300      	movs	r3, #0
 8002f62:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	2203      	movs	r2, #3
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d112      	bne.n	8002f98 <ADC_Disable+0x40>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d009      	beq.n	8002f94 <ADC_Disable+0x3c>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	68da      	ldr	r2, [r3, #12]
 8002f86:	2380      	movs	r3, #128	; 0x80
 8002f88:	021b      	lsls	r3, r3, #8
 8002f8a:	401a      	ands	r2, r3
 8002f8c:	2380      	movs	r3, #128	; 0x80
 8002f8e:	021b      	lsls	r3, r3, #8
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d101      	bne.n	8002f98 <ADC_Disable+0x40>
 8002f94:	2301      	movs	r3, #1
 8002f96:	e000      	b.n	8002f9a <ADC_Disable+0x42>
 8002f98:	2300      	movs	r3, #0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d048      	beq.n	8003030 <ADC_Disable+0xd8>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	2205      	movs	r2, #5
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d110      	bne.n	8002fce <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	689a      	ldr	r2, [r3, #8]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	2102      	movs	r1, #2
 8002fb8:	430a      	orrs	r2, r1
 8002fba:	609a      	str	r2, [r3, #8]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2203      	movs	r2, #3
 8002fc2:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002fc4:	f7ff fba8 	bl	8002718 <HAL_GetTick>
 8002fc8:	0003      	movs	r3, r0
 8002fca:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002fcc:	e029      	b.n	8003022 <ADC_Disable+0xca>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd2:	2210      	movs	r2, #16
 8002fd4:	431a      	orrs	r2, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	639a      	str	r2, [r3, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fde:	2201      	movs	r2, #1
 8002fe0:	431a      	orrs	r2, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	63da      	str	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e023      	b.n	8003032 <ADC_Disable+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002fea:	f7ff fb95 	bl	8002718 <HAL_GetTick>
 8002fee:	0002      	movs	r2, r0
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d914      	bls.n	8003022 <ADC_Disable+0xca>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	2201      	movs	r2, #1
 8003000:	4013      	ands	r3, r2
 8003002:	2b01      	cmp	r3, #1
 8003004:	d10d      	bne.n	8003022 <ADC_Disable+0xca>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800300a:	2210      	movs	r2, #16
 800300c:	431a      	orrs	r2, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003016:	2201      	movs	r2, #1
 8003018:	431a      	orrs	r2, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e007      	b.n	8003032 <ADC_Disable+0xda>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	2201      	movs	r2, #1
 800302a:	4013      	ands	r3, r2
 800302c:	2b01      	cmp	r3, #1
 800302e:	d0dc      	beq.n	8002fea <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003030:	2300      	movs	r3, #0
}
 8003032:	0018      	movs	r0, r3
 8003034:	46bd      	mov	sp, r7
 8003036:	b004      	add	sp, #16
 8003038:	bd80      	pop	{r7, pc}

0800303a <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 800303a:	b580      	push	{r7, lr}
 800303c:	b084      	sub	sp, #16
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003042:	2300      	movs	r3, #0
 8003044:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	2204      	movs	r2, #4
 800304e:	4013      	ands	r3, r2
 8003050:	d03a      	beq.n	80030c8 <ADC_ConversionStop+0x8e>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	2204      	movs	r2, #4
 800305a:	4013      	ands	r3, r2
 800305c:	2b04      	cmp	r3, #4
 800305e:	d10d      	bne.n	800307c <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	2202      	movs	r2, #2
 8003068:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800306a:	d107      	bne.n	800307c <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	689a      	ldr	r2, [r3, #8]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2110      	movs	r1, #16
 8003078:	430a      	orrs	r2, r1
 800307a:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800307c:	f7ff fb4c 	bl	8002718 <HAL_GetTick>
 8003080:	0003      	movs	r3, r0
 8003082:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8003084:	e01a      	b.n	80030bc <ADC_ConversionStop+0x82>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003086:	f7ff fb47 	bl	8002718 <HAL_GetTick>
 800308a:	0002      	movs	r2, r0
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	2b02      	cmp	r3, #2
 8003092:	d913      	bls.n	80030bc <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	2204      	movs	r2, #4
 800309c:	4013      	ands	r3, r2
 800309e:	d00d      	beq.n	80030bc <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030a4:	2210      	movs	r2, #16
 80030a6:	431a      	orrs	r2, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030b0:	2201      	movs	r2, #1
 80030b2:	431a      	orrs	r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e006      	b.n	80030ca <ADC_ConversionStop+0x90>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	2204      	movs	r2, #4
 80030c4:	4013      	ands	r3, r2
 80030c6:	d1de      	bne.n	8003086 <ADC_ConversionStop+0x4c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	0018      	movs	r0, r3
 80030cc:	46bd      	mov	sp, r7
 80030ce:	b004      	add	sp, #16
 80030d0:	bd80      	pop	{r7, pc}
	...

080030d4 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b086      	sub	sp, #24
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030dc:	2317      	movs	r3, #23
 80030de:	18fb      	adds	r3, r7, r3
 80030e0:	2200      	movs	r2, #0
 80030e2:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 80030e4:	2300      	movs	r3, #0
 80030e6:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 80030e8:	2300      	movs	r3, #0
 80030ea:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2234      	movs	r2, #52	; 0x34
 80030f0:	5c9b      	ldrb	r3, [r3, r2]
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d101      	bne.n	80030fa <HAL_ADCEx_Calibration_Start+0x26>
 80030f6:	2302      	movs	r3, #2
 80030f8:	e08d      	b.n	8003216 <HAL_ADCEx_Calibration_Start+0x142>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2234      	movs	r2, #52	; 0x34
 80030fe:	2101      	movs	r1, #1
 8003100:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	2203      	movs	r2, #3
 800310a:	4013      	ands	r3, r2
 800310c:	2b01      	cmp	r3, #1
 800310e:	d112      	bne.n	8003136 <HAL_ADCEx_Calibration_Start+0x62>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	2201      	movs	r2, #1
 8003118:	4013      	ands	r3, r2
 800311a:	2b01      	cmp	r3, #1
 800311c:	d009      	beq.n	8003132 <HAL_ADCEx_Calibration_Start+0x5e>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	68da      	ldr	r2, [r3, #12]
 8003124:	2380      	movs	r3, #128	; 0x80
 8003126:	021b      	lsls	r3, r3, #8
 8003128:	401a      	ands	r2, r3
 800312a:	2380      	movs	r3, #128	; 0x80
 800312c:	021b      	lsls	r3, r3, #8
 800312e:	429a      	cmp	r2, r3
 8003130:	d101      	bne.n	8003136 <HAL_ADCEx_Calibration_Start+0x62>
 8003132:	2301      	movs	r3, #1
 8003134:	e000      	b.n	8003138 <HAL_ADCEx_Calibration_Start+0x64>
 8003136:	2300      	movs	r3, #0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d15b      	bne.n	80031f4 <HAL_ADCEx_Calibration_Start+0x120>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003140:	4a37      	ldr	r2, [pc, #220]	; (8003220 <HAL_ADCEx_Calibration_Start+0x14c>)
 8003142:	4013      	ands	r3, r2
 8003144:	2202      	movs	r2, #2
 8003146:	431a      	orrs	r2, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	639a      	str	r2, [r3, #56]	; 0x38
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	2203      	movs	r2, #3
 8003154:	4013      	ands	r3, r2
 8003156:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	68da      	ldr	r2, [r3, #12]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	2103      	movs	r1, #3
 8003164:	438a      	bics	r2, r1
 8003166:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	689a      	ldr	r2, [r3, #8]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	2180      	movs	r1, #128	; 0x80
 8003174:	0609      	lsls	r1, r1, #24
 8003176:	430a      	orrs	r2, r1
 8003178:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 800317a:	f7ff facd 	bl	8002718 <HAL_GetTick>
 800317e:	0003      	movs	r3, r0
 8003180:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003182:	e01d      	b.n	80031c0 <HAL_ADCEx_Calibration_Start+0xec>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003184:	f7ff fac8 	bl	8002718 <HAL_GetTick>
 8003188:	0002      	movs	r2, r0
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	2b02      	cmp	r3, #2
 8003190:	d916      	bls.n	80031c0 <HAL_ADCEx_Calibration_Start+0xec>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	0fdb      	lsrs	r3, r3, #31
 800319a:	07da      	lsls	r2, r3, #31
 800319c:	2380      	movs	r3, #128	; 0x80
 800319e:	061b      	lsls	r3, r3, #24
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d10d      	bne.n	80031c0 <HAL_ADCEx_Calibration_Start+0xec>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a8:	2212      	movs	r2, #18
 80031aa:	4393      	bics	r3, r2
 80031ac:	2210      	movs	r2, #16
 80031ae:	431a      	orrs	r2, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	639a      	str	r2, [r3, #56]	; 0x38
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2234      	movs	r2, #52	; 0x34
 80031b8:	2100      	movs	r1, #0
 80031ba:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e02a      	b.n	8003216 <HAL_ADCEx_Calibration_Start+0x142>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	0fdb      	lsrs	r3, r3, #31
 80031c8:	07da      	lsls	r2, r3, #31
 80031ca:	2380      	movs	r3, #128	; 0x80
 80031cc:	061b      	lsls	r3, r3, #24
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d0d8      	beq.n	8003184 <HAL_ADCEx_Calibration_Start+0xb0>
        }
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	68d9      	ldr	r1, [r3, #12]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	68fa      	ldr	r2, [r7, #12]
 80031de:	430a      	orrs	r2, r1
 80031e0:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e6:	2203      	movs	r2, #3
 80031e8:	4393      	bics	r3, r2
 80031ea:	2201      	movs	r2, #1
 80031ec:	431a      	orrs	r2, r3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	639a      	str	r2, [r3, #56]	; 0x38
 80031f2:	e009      	b.n	8003208 <HAL_ADCEx_Calibration_Start+0x134>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f8:	2220      	movs	r2, #32
 80031fa:	431a      	orrs	r2, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8003200:	2317      	movs	r3, #23
 8003202:	18fb      	adds	r3, r7, r3
 8003204:	2201      	movs	r2, #1
 8003206:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2234      	movs	r2, #52	; 0x34
 800320c:	2100      	movs	r1, #0
 800320e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003210:	2317      	movs	r3, #23
 8003212:	18fb      	adds	r3, r7, r3
 8003214:	781b      	ldrb	r3, [r3, #0]
}
 8003216:	0018      	movs	r0, r3
 8003218:	46bd      	mov	sp, r7
 800321a:	b006      	add	sp, #24
 800321c:	bd80      	pop	{r7, pc}
 800321e:	46c0      	nop			; (mov r8, r8)
 8003220:	fffffefd 	.word	0xfffffefd

08003224 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
 800322a:	0002      	movs	r2, r0
 800322c:	1dfb      	adds	r3, r7, #7
 800322e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003230:	1dfb      	adds	r3, r7, #7
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	2b7f      	cmp	r3, #127	; 0x7f
 8003236:	d809      	bhi.n	800324c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003238:	1dfb      	adds	r3, r7, #7
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	001a      	movs	r2, r3
 800323e:	231f      	movs	r3, #31
 8003240:	401a      	ands	r2, r3
 8003242:	4b04      	ldr	r3, [pc, #16]	; (8003254 <__NVIC_EnableIRQ+0x30>)
 8003244:	2101      	movs	r1, #1
 8003246:	4091      	lsls	r1, r2
 8003248:	000a      	movs	r2, r1
 800324a:	601a      	str	r2, [r3, #0]
  }
}
 800324c:	46c0      	nop			; (mov r8, r8)
 800324e:	46bd      	mov	sp, r7
 8003250:	b002      	add	sp, #8
 8003252:	bd80      	pop	{r7, pc}
 8003254:	e000e100 	.word	0xe000e100

08003258 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003258:	b590      	push	{r4, r7, lr}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	0002      	movs	r2, r0
 8003260:	6039      	str	r1, [r7, #0]
 8003262:	1dfb      	adds	r3, r7, #7
 8003264:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003266:	1dfb      	adds	r3, r7, #7
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	2b7f      	cmp	r3, #127	; 0x7f
 800326c:	d828      	bhi.n	80032c0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800326e:	4a2f      	ldr	r2, [pc, #188]	; (800332c <__NVIC_SetPriority+0xd4>)
 8003270:	1dfb      	adds	r3, r7, #7
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	b25b      	sxtb	r3, r3
 8003276:	089b      	lsrs	r3, r3, #2
 8003278:	33c0      	adds	r3, #192	; 0xc0
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	589b      	ldr	r3, [r3, r2]
 800327e:	1dfa      	adds	r2, r7, #7
 8003280:	7812      	ldrb	r2, [r2, #0]
 8003282:	0011      	movs	r1, r2
 8003284:	2203      	movs	r2, #3
 8003286:	400a      	ands	r2, r1
 8003288:	00d2      	lsls	r2, r2, #3
 800328a:	21ff      	movs	r1, #255	; 0xff
 800328c:	4091      	lsls	r1, r2
 800328e:	000a      	movs	r2, r1
 8003290:	43d2      	mvns	r2, r2
 8003292:	401a      	ands	r2, r3
 8003294:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	019b      	lsls	r3, r3, #6
 800329a:	22ff      	movs	r2, #255	; 0xff
 800329c:	401a      	ands	r2, r3
 800329e:	1dfb      	adds	r3, r7, #7
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	0018      	movs	r0, r3
 80032a4:	2303      	movs	r3, #3
 80032a6:	4003      	ands	r3, r0
 80032a8:	00db      	lsls	r3, r3, #3
 80032aa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80032ac:	481f      	ldr	r0, [pc, #124]	; (800332c <__NVIC_SetPriority+0xd4>)
 80032ae:	1dfb      	adds	r3, r7, #7
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	b25b      	sxtb	r3, r3
 80032b4:	089b      	lsrs	r3, r3, #2
 80032b6:	430a      	orrs	r2, r1
 80032b8:	33c0      	adds	r3, #192	; 0xc0
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80032be:	e031      	b.n	8003324 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80032c0:	4a1b      	ldr	r2, [pc, #108]	; (8003330 <__NVIC_SetPriority+0xd8>)
 80032c2:	1dfb      	adds	r3, r7, #7
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	0019      	movs	r1, r3
 80032c8:	230f      	movs	r3, #15
 80032ca:	400b      	ands	r3, r1
 80032cc:	3b08      	subs	r3, #8
 80032ce:	089b      	lsrs	r3, r3, #2
 80032d0:	3306      	adds	r3, #6
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	18d3      	adds	r3, r2, r3
 80032d6:	3304      	adds	r3, #4
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	1dfa      	adds	r2, r7, #7
 80032dc:	7812      	ldrb	r2, [r2, #0]
 80032de:	0011      	movs	r1, r2
 80032e0:	2203      	movs	r2, #3
 80032e2:	400a      	ands	r2, r1
 80032e4:	00d2      	lsls	r2, r2, #3
 80032e6:	21ff      	movs	r1, #255	; 0xff
 80032e8:	4091      	lsls	r1, r2
 80032ea:	000a      	movs	r2, r1
 80032ec:	43d2      	mvns	r2, r2
 80032ee:	401a      	ands	r2, r3
 80032f0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	019b      	lsls	r3, r3, #6
 80032f6:	22ff      	movs	r2, #255	; 0xff
 80032f8:	401a      	ands	r2, r3
 80032fa:	1dfb      	adds	r3, r7, #7
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	0018      	movs	r0, r3
 8003300:	2303      	movs	r3, #3
 8003302:	4003      	ands	r3, r0
 8003304:	00db      	lsls	r3, r3, #3
 8003306:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003308:	4809      	ldr	r0, [pc, #36]	; (8003330 <__NVIC_SetPriority+0xd8>)
 800330a:	1dfb      	adds	r3, r7, #7
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	001c      	movs	r4, r3
 8003310:	230f      	movs	r3, #15
 8003312:	4023      	ands	r3, r4
 8003314:	3b08      	subs	r3, #8
 8003316:	089b      	lsrs	r3, r3, #2
 8003318:	430a      	orrs	r2, r1
 800331a:	3306      	adds	r3, #6
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	18c3      	adds	r3, r0, r3
 8003320:	3304      	adds	r3, #4
 8003322:	601a      	str	r2, [r3, #0]
}
 8003324:	46c0      	nop			; (mov r8, r8)
 8003326:	46bd      	mov	sp, r7
 8003328:	b003      	add	sp, #12
 800332a:	bd90      	pop	{r4, r7, pc}
 800332c:	e000e100 	.word	0xe000e100
 8003330:	e000ed00 	.word	0xe000ed00

08003334 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	1e5a      	subs	r2, r3, #1
 8003340:	2380      	movs	r3, #128	; 0x80
 8003342:	045b      	lsls	r3, r3, #17
 8003344:	429a      	cmp	r2, r3
 8003346:	d301      	bcc.n	800334c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003348:	2301      	movs	r3, #1
 800334a:	e010      	b.n	800336e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800334c:	4b0a      	ldr	r3, [pc, #40]	; (8003378 <SysTick_Config+0x44>)
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	3a01      	subs	r2, #1
 8003352:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003354:	2301      	movs	r3, #1
 8003356:	425b      	negs	r3, r3
 8003358:	2103      	movs	r1, #3
 800335a:	0018      	movs	r0, r3
 800335c:	f7ff ff7c 	bl	8003258 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003360:	4b05      	ldr	r3, [pc, #20]	; (8003378 <SysTick_Config+0x44>)
 8003362:	2200      	movs	r2, #0
 8003364:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003366:	4b04      	ldr	r3, [pc, #16]	; (8003378 <SysTick_Config+0x44>)
 8003368:	2207      	movs	r2, #7
 800336a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800336c:	2300      	movs	r3, #0
}
 800336e:	0018      	movs	r0, r3
 8003370:	46bd      	mov	sp, r7
 8003372:	b002      	add	sp, #8
 8003374:	bd80      	pop	{r7, pc}
 8003376:	46c0      	nop			; (mov r8, r8)
 8003378:	e000e010 	.word	0xe000e010

0800337c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	60b9      	str	r1, [r7, #8]
 8003384:	607a      	str	r2, [r7, #4]
 8003386:	210f      	movs	r1, #15
 8003388:	187b      	adds	r3, r7, r1
 800338a:	1c02      	adds	r2, r0, #0
 800338c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800338e:	68ba      	ldr	r2, [r7, #8]
 8003390:	187b      	adds	r3, r7, r1
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	b25b      	sxtb	r3, r3
 8003396:	0011      	movs	r1, r2
 8003398:	0018      	movs	r0, r3
 800339a:	f7ff ff5d 	bl	8003258 <__NVIC_SetPriority>
}
 800339e:	46c0      	nop			; (mov r8, r8)
 80033a0:	46bd      	mov	sp, r7
 80033a2:	b004      	add	sp, #16
 80033a4:	bd80      	pop	{r7, pc}

080033a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033a6:	b580      	push	{r7, lr}
 80033a8:	b082      	sub	sp, #8
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	0002      	movs	r2, r0
 80033ae:	1dfb      	adds	r3, r7, #7
 80033b0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033b2:	1dfb      	adds	r3, r7, #7
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	b25b      	sxtb	r3, r3
 80033b8:	0018      	movs	r0, r3
 80033ba:	f7ff ff33 	bl	8003224 <__NVIC_EnableIRQ>
}
 80033be:	46c0      	nop			; (mov r8, r8)
 80033c0:	46bd      	mov	sp, r7
 80033c2:	b002      	add	sp, #8
 80033c4:	bd80      	pop	{r7, pc}

080033c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033c6:	b580      	push	{r7, lr}
 80033c8:	b082      	sub	sp, #8
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	0018      	movs	r0, r3
 80033d2:	f7ff ffaf 	bl	8003334 <SysTick_Config>
 80033d6:	0003      	movs	r3, r0
}
 80033d8:	0018      	movs	r0, r3
 80033da:	46bd      	mov	sp, r7
 80033dc:	b002      	add	sp, #8
 80033de:	bd80      	pop	{r7, pc}

080033e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b086      	sub	sp, #24
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80033ea:	2300      	movs	r3, #0
 80033ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033ee:	e14f      	b.n	8003690 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	2101      	movs	r1, #1
 80033f6:	697a      	ldr	r2, [r7, #20]
 80033f8:	4091      	lsls	r1, r2
 80033fa:	000a      	movs	r2, r1
 80033fc:	4013      	ands	r3, r2
 80033fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d100      	bne.n	8003408 <HAL_GPIO_Init+0x28>
 8003406:	e140      	b.n	800368a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	2203      	movs	r2, #3
 800340e:	4013      	ands	r3, r2
 8003410:	2b01      	cmp	r3, #1
 8003412:	d005      	beq.n	8003420 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	2203      	movs	r2, #3
 800341a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800341c:	2b02      	cmp	r3, #2
 800341e:	d130      	bne.n	8003482 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	005b      	lsls	r3, r3, #1
 800342a:	2203      	movs	r2, #3
 800342c:	409a      	lsls	r2, r3
 800342e:	0013      	movs	r3, r2
 8003430:	43da      	mvns	r2, r3
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	4013      	ands	r3, r2
 8003436:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	68da      	ldr	r2, [r3, #12]
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	005b      	lsls	r3, r3, #1
 8003440:	409a      	lsls	r2, r3
 8003442:	0013      	movs	r3, r2
 8003444:	693a      	ldr	r2, [r7, #16]
 8003446:	4313      	orrs	r3, r2
 8003448:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	693a      	ldr	r2, [r7, #16]
 800344e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003456:	2201      	movs	r2, #1
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	409a      	lsls	r2, r3
 800345c:	0013      	movs	r3, r2
 800345e:	43da      	mvns	r2, r3
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	4013      	ands	r3, r2
 8003464:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	091b      	lsrs	r3, r3, #4
 800346c:	2201      	movs	r2, #1
 800346e:	401a      	ands	r2, r3
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	409a      	lsls	r2, r3
 8003474:	0013      	movs	r3, r2
 8003476:	693a      	ldr	r2, [r7, #16]
 8003478:	4313      	orrs	r3, r2
 800347a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	693a      	ldr	r2, [r7, #16]
 8003480:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	2203      	movs	r2, #3
 8003488:	4013      	ands	r3, r2
 800348a:	2b03      	cmp	r3, #3
 800348c:	d017      	beq.n	80034be <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	005b      	lsls	r3, r3, #1
 8003498:	2203      	movs	r2, #3
 800349a:	409a      	lsls	r2, r3
 800349c:	0013      	movs	r3, r2
 800349e:	43da      	mvns	r2, r3
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	4013      	ands	r3, r2
 80034a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	689a      	ldr	r2, [r3, #8]
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	005b      	lsls	r3, r3, #1
 80034ae:	409a      	lsls	r2, r3
 80034b0:	0013      	movs	r3, r2
 80034b2:	693a      	ldr	r2, [r7, #16]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	693a      	ldr	r2, [r7, #16]
 80034bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	2203      	movs	r2, #3
 80034c4:	4013      	ands	r3, r2
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d123      	bne.n	8003512 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	08da      	lsrs	r2, r3, #3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	3208      	adds	r2, #8
 80034d2:	0092      	lsls	r2, r2, #2
 80034d4:	58d3      	ldr	r3, [r2, r3]
 80034d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	2207      	movs	r2, #7
 80034dc:	4013      	ands	r3, r2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	220f      	movs	r2, #15
 80034e2:	409a      	lsls	r2, r3
 80034e4:	0013      	movs	r3, r2
 80034e6:	43da      	mvns	r2, r3
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	4013      	ands	r3, r2
 80034ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	691a      	ldr	r2, [r3, #16]
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	2107      	movs	r1, #7
 80034f6:	400b      	ands	r3, r1
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	409a      	lsls	r2, r3
 80034fc:	0013      	movs	r3, r2
 80034fe:	693a      	ldr	r2, [r7, #16]
 8003500:	4313      	orrs	r3, r2
 8003502:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	08da      	lsrs	r2, r3, #3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	3208      	adds	r2, #8
 800350c:	0092      	lsls	r2, r2, #2
 800350e:	6939      	ldr	r1, [r7, #16]
 8003510:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	005b      	lsls	r3, r3, #1
 800351c:	2203      	movs	r2, #3
 800351e:	409a      	lsls	r2, r3
 8003520:	0013      	movs	r3, r2
 8003522:	43da      	mvns	r2, r3
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	4013      	ands	r3, r2
 8003528:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	2203      	movs	r2, #3
 8003530:	401a      	ands	r2, r3
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	005b      	lsls	r3, r3, #1
 8003536:	409a      	lsls	r2, r3
 8003538:	0013      	movs	r3, r2
 800353a:	693a      	ldr	r2, [r7, #16]
 800353c:	4313      	orrs	r3, r2
 800353e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	693a      	ldr	r2, [r7, #16]
 8003544:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	685a      	ldr	r2, [r3, #4]
 800354a:	23c0      	movs	r3, #192	; 0xc0
 800354c:	029b      	lsls	r3, r3, #10
 800354e:	4013      	ands	r3, r2
 8003550:	d100      	bne.n	8003554 <HAL_GPIO_Init+0x174>
 8003552:	e09a      	b.n	800368a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003554:	4b54      	ldr	r3, [pc, #336]	; (80036a8 <HAL_GPIO_Init+0x2c8>)
 8003556:	699a      	ldr	r2, [r3, #24]
 8003558:	4b53      	ldr	r3, [pc, #332]	; (80036a8 <HAL_GPIO_Init+0x2c8>)
 800355a:	2101      	movs	r1, #1
 800355c:	430a      	orrs	r2, r1
 800355e:	619a      	str	r2, [r3, #24]
 8003560:	4b51      	ldr	r3, [pc, #324]	; (80036a8 <HAL_GPIO_Init+0x2c8>)
 8003562:	699b      	ldr	r3, [r3, #24]
 8003564:	2201      	movs	r2, #1
 8003566:	4013      	ands	r3, r2
 8003568:	60bb      	str	r3, [r7, #8]
 800356a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800356c:	4a4f      	ldr	r2, [pc, #316]	; (80036ac <HAL_GPIO_Init+0x2cc>)
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	089b      	lsrs	r3, r3, #2
 8003572:	3302      	adds	r3, #2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	589b      	ldr	r3, [r3, r2]
 8003578:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	2203      	movs	r2, #3
 800357e:	4013      	ands	r3, r2
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	220f      	movs	r2, #15
 8003584:	409a      	lsls	r2, r3
 8003586:	0013      	movs	r3, r2
 8003588:	43da      	mvns	r2, r3
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	4013      	ands	r3, r2
 800358e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	2390      	movs	r3, #144	; 0x90
 8003594:	05db      	lsls	r3, r3, #23
 8003596:	429a      	cmp	r2, r3
 8003598:	d013      	beq.n	80035c2 <HAL_GPIO_Init+0x1e2>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a44      	ldr	r2, [pc, #272]	; (80036b0 <HAL_GPIO_Init+0x2d0>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d00d      	beq.n	80035be <HAL_GPIO_Init+0x1de>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a43      	ldr	r2, [pc, #268]	; (80036b4 <HAL_GPIO_Init+0x2d4>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d007      	beq.n	80035ba <HAL_GPIO_Init+0x1da>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a42      	ldr	r2, [pc, #264]	; (80036b8 <HAL_GPIO_Init+0x2d8>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d101      	bne.n	80035b6 <HAL_GPIO_Init+0x1d6>
 80035b2:	2303      	movs	r3, #3
 80035b4:	e006      	b.n	80035c4 <HAL_GPIO_Init+0x1e4>
 80035b6:	2305      	movs	r3, #5
 80035b8:	e004      	b.n	80035c4 <HAL_GPIO_Init+0x1e4>
 80035ba:	2302      	movs	r3, #2
 80035bc:	e002      	b.n	80035c4 <HAL_GPIO_Init+0x1e4>
 80035be:	2301      	movs	r3, #1
 80035c0:	e000      	b.n	80035c4 <HAL_GPIO_Init+0x1e4>
 80035c2:	2300      	movs	r3, #0
 80035c4:	697a      	ldr	r2, [r7, #20]
 80035c6:	2103      	movs	r1, #3
 80035c8:	400a      	ands	r2, r1
 80035ca:	0092      	lsls	r2, r2, #2
 80035cc:	4093      	lsls	r3, r2
 80035ce:	693a      	ldr	r2, [r7, #16]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80035d4:	4935      	ldr	r1, [pc, #212]	; (80036ac <HAL_GPIO_Init+0x2cc>)
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	089b      	lsrs	r3, r3, #2
 80035da:	3302      	adds	r3, #2
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	693a      	ldr	r2, [r7, #16]
 80035e0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035e2:	4b36      	ldr	r3, [pc, #216]	; (80036bc <HAL_GPIO_Init+0x2dc>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	43da      	mvns	r2, r3
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	4013      	ands	r3, r2
 80035f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	685a      	ldr	r2, [r3, #4]
 80035f6:	2380      	movs	r3, #128	; 0x80
 80035f8:	025b      	lsls	r3, r3, #9
 80035fa:	4013      	ands	r3, r2
 80035fc:	d003      	beq.n	8003606 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80035fe:	693a      	ldr	r2, [r7, #16]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	4313      	orrs	r3, r2
 8003604:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003606:	4b2d      	ldr	r3, [pc, #180]	; (80036bc <HAL_GPIO_Init+0x2dc>)
 8003608:	693a      	ldr	r2, [r7, #16]
 800360a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800360c:	4b2b      	ldr	r3, [pc, #172]	; (80036bc <HAL_GPIO_Init+0x2dc>)
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	43da      	mvns	r2, r3
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	4013      	ands	r3, r2
 800361a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	685a      	ldr	r2, [r3, #4]
 8003620:	2380      	movs	r3, #128	; 0x80
 8003622:	029b      	lsls	r3, r3, #10
 8003624:	4013      	ands	r3, r2
 8003626:	d003      	beq.n	8003630 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8003628:	693a      	ldr	r2, [r7, #16]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	4313      	orrs	r3, r2
 800362e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003630:	4b22      	ldr	r3, [pc, #136]	; (80036bc <HAL_GPIO_Init+0x2dc>)
 8003632:	693a      	ldr	r2, [r7, #16]
 8003634:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003636:	4b21      	ldr	r3, [pc, #132]	; (80036bc <HAL_GPIO_Init+0x2dc>)
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	43da      	mvns	r2, r3
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	4013      	ands	r3, r2
 8003644:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	685a      	ldr	r2, [r3, #4]
 800364a:	2380      	movs	r3, #128	; 0x80
 800364c:	035b      	lsls	r3, r3, #13
 800364e:	4013      	ands	r3, r2
 8003650:	d003      	beq.n	800365a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8003652:	693a      	ldr	r2, [r7, #16]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	4313      	orrs	r3, r2
 8003658:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800365a:	4b18      	ldr	r3, [pc, #96]	; (80036bc <HAL_GPIO_Init+0x2dc>)
 800365c:	693a      	ldr	r2, [r7, #16]
 800365e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003660:	4b16      	ldr	r3, [pc, #88]	; (80036bc <HAL_GPIO_Init+0x2dc>)
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	43da      	mvns	r2, r3
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	4013      	ands	r3, r2
 800366e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	685a      	ldr	r2, [r3, #4]
 8003674:	2380      	movs	r3, #128	; 0x80
 8003676:	039b      	lsls	r3, r3, #14
 8003678:	4013      	ands	r3, r2
 800367a:	d003      	beq.n	8003684 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 800367c:	693a      	ldr	r2, [r7, #16]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	4313      	orrs	r3, r2
 8003682:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003684:	4b0d      	ldr	r3, [pc, #52]	; (80036bc <HAL_GPIO_Init+0x2dc>)
 8003686:	693a      	ldr	r2, [r7, #16]
 8003688:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	3301      	adds	r3, #1
 800368e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	40da      	lsrs	r2, r3
 8003698:	1e13      	subs	r3, r2, #0
 800369a:	d000      	beq.n	800369e <HAL_GPIO_Init+0x2be>
 800369c:	e6a8      	b.n	80033f0 <HAL_GPIO_Init+0x10>
  } 
}
 800369e:	46c0      	nop			; (mov r8, r8)
 80036a0:	46c0      	nop			; (mov r8, r8)
 80036a2:	46bd      	mov	sp, r7
 80036a4:	b006      	add	sp, #24
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	40021000 	.word	0x40021000
 80036ac:	40010000 	.word	0x40010000
 80036b0:	48000400 	.word	0x48000400
 80036b4:	48000800 	.word	0x48000800
 80036b8:	48000c00 	.word	0x48000c00
 80036bc:	40010400 	.word	0x40010400

080036c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	0008      	movs	r0, r1
 80036ca:	0011      	movs	r1, r2
 80036cc:	1cbb      	adds	r3, r7, #2
 80036ce:	1c02      	adds	r2, r0, #0
 80036d0:	801a      	strh	r2, [r3, #0]
 80036d2:	1c7b      	adds	r3, r7, #1
 80036d4:	1c0a      	adds	r2, r1, #0
 80036d6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80036d8:	1c7b      	adds	r3, r7, #1
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d004      	beq.n	80036ea <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80036e0:	1cbb      	adds	r3, r7, #2
 80036e2:	881a      	ldrh	r2, [r3, #0]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80036e8:	e003      	b.n	80036f2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80036ea:	1cbb      	adds	r3, r7, #2
 80036ec:	881a      	ldrh	r2, [r3, #0]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80036f2:	46c0      	nop			; (mov r8, r8)
 80036f4:	46bd      	mov	sp, r7
 80036f6:	b002      	add	sp, #8
 80036f8:	bd80      	pop	{r7, pc}
	...

080036fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
 8003702:	0002      	movs	r2, r0
 8003704:	1dbb      	adds	r3, r7, #6
 8003706:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003708:	4b09      	ldr	r3, [pc, #36]	; (8003730 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800370a:	695b      	ldr	r3, [r3, #20]
 800370c:	1dba      	adds	r2, r7, #6
 800370e:	8812      	ldrh	r2, [r2, #0]
 8003710:	4013      	ands	r3, r2
 8003712:	d008      	beq.n	8003726 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003714:	4b06      	ldr	r3, [pc, #24]	; (8003730 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8003716:	1dba      	adds	r2, r7, #6
 8003718:	8812      	ldrh	r2, [r2, #0]
 800371a:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800371c:	1dbb      	adds	r3, r7, #6
 800371e:	881b      	ldrh	r3, [r3, #0]
 8003720:	0018      	movs	r0, r3
 8003722:	f7fd fd61 	bl	80011e8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003726:	46c0      	nop			; (mov r8, r8)
 8003728:	46bd      	mov	sp, r7
 800372a:	b002      	add	sp, #8
 800372c:	bd80      	pop	{r7, pc}
 800372e:	46c0      	nop			; (mov r8, r8)
 8003730:	40010400 	.word	0x40010400

08003734 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b082      	sub	sp, #8
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d101      	bne.n	8003746 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e082      	b.n	800384c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2241      	movs	r2, #65	; 0x41
 800374a:	5c9b      	ldrb	r3, [r3, r2]
 800374c:	b2db      	uxtb	r3, r3
 800374e:	2b00      	cmp	r3, #0
 8003750:	d107      	bne.n	8003762 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2240      	movs	r2, #64	; 0x40
 8003756:	2100      	movs	r1, #0
 8003758:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	0018      	movs	r0, r3
 800375e:	f7fe fde9 	bl	8002334 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2241      	movs	r2, #65	; 0x41
 8003766:	2124      	movs	r1, #36	; 0x24
 8003768:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	2101      	movs	r1, #1
 8003776:	438a      	bics	r2, r1
 8003778:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	685a      	ldr	r2, [r3, #4]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4934      	ldr	r1, [pc, #208]	; (8003854 <HAL_I2C_Init+0x120>)
 8003784:	400a      	ands	r2, r1
 8003786:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	689a      	ldr	r2, [r3, #8]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4931      	ldr	r1, [pc, #196]	; (8003858 <HAL_I2C_Init+0x124>)
 8003794:	400a      	ands	r2, r1
 8003796:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	2b01      	cmp	r3, #1
 800379e:	d108      	bne.n	80037b2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	689a      	ldr	r2, [r3, #8]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	2180      	movs	r1, #128	; 0x80
 80037aa:	0209      	lsls	r1, r1, #8
 80037ac:	430a      	orrs	r2, r1
 80037ae:	609a      	str	r2, [r3, #8]
 80037b0:	e007      	b.n	80037c2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	689a      	ldr	r2, [r3, #8]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	2184      	movs	r1, #132	; 0x84
 80037bc:	0209      	lsls	r1, r1, #8
 80037be:	430a      	orrs	r2, r1
 80037c0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	2b02      	cmp	r3, #2
 80037c8:	d104      	bne.n	80037d4 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2280      	movs	r2, #128	; 0x80
 80037d0:	0112      	lsls	r2, r2, #4
 80037d2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	685a      	ldr	r2, [r3, #4]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	491f      	ldr	r1, [pc, #124]	; (800385c <HAL_I2C_Init+0x128>)
 80037e0:	430a      	orrs	r2, r1
 80037e2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	68da      	ldr	r2, [r3, #12]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	491a      	ldr	r1, [pc, #104]	; (8003858 <HAL_I2C_Init+0x124>)
 80037f0:	400a      	ands	r2, r1
 80037f2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	691a      	ldr	r2, [r3, #16]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	695b      	ldr	r3, [r3, #20]
 80037fc:	431a      	orrs	r2, r3
 80037fe:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	699b      	ldr	r3, [r3, #24]
 8003804:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	430a      	orrs	r2, r1
 800380c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	69d9      	ldr	r1, [r3, #28]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a1a      	ldr	r2, [r3, #32]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	430a      	orrs	r2, r1
 800381c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2101      	movs	r1, #1
 800382a:	430a      	orrs	r2, r1
 800382c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2200      	movs	r2, #0
 8003832:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2241      	movs	r2, #65	; 0x41
 8003838:	2120      	movs	r1, #32
 800383a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2242      	movs	r2, #66	; 0x42
 8003846:	2100      	movs	r1, #0
 8003848:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800384a:	2300      	movs	r3, #0
}
 800384c:	0018      	movs	r0, r3
 800384e:	46bd      	mov	sp, r7
 8003850:	b002      	add	sp, #8
 8003852:	bd80      	pop	{r7, pc}
 8003854:	f0ffffff 	.word	0xf0ffffff
 8003858:	ffff7fff 	.word	0xffff7fff
 800385c:	02008000 	.word	0x02008000

08003860 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003860:	b590      	push	{r4, r7, lr}
 8003862:	b089      	sub	sp, #36	; 0x24
 8003864:	af02      	add	r7, sp, #8
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	0008      	movs	r0, r1
 800386a:	607a      	str	r2, [r7, #4]
 800386c:	0019      	movs	r1, r3
 800386e:	230a      	movs	r3, #10
 8003870:	18fb      	adds	r3, r7, r3
 8003872:	1c02      	adds	r2, r0, #0
 8003874:	801a      	strh	r2, [r3, #0]
 8003876:	2308      	movs	r3, #8
 8003878:	18fb      	adds	r3, r7, r3
 800387a:	1c0a      	adds	r2, r1, #0
 800387c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2241      	movs	r2, #65	; 0x41
 8003882:	5c9b      	ldrb	r3, [r3, r2]
 8003884:	b2db      	uxtb	r3, r3
 8003886:	2b20      	cmp	r3, #32
 8003888:	d000      	beq.n	800388c <HAL_I2C_Master_Transmit+0x2c>
 800388a:	e0e7      	b.n	8003a5c <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2240      	movs	r2, #64	; 0x40
 8003890:	5c9b      	ldrb	r3, [r3, r2]
 8003892:	2b01      	cmp	r3, #1
 8003894:	d101      	bne.n	800389a <HAL_I2C_Master_Transmit+0x3a>
 8003896:	2302      	movs	r3, #2
 8003898:	e0e1      	b.n	8003a5e <HAL_I2C_Master_Transmit+0x1fe>
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2240      	movs	r2, #64	; 0x40
 800389e:	2101      	movs	r1, #1
 80038a0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80038a2:	f7fe ff39 	bl	8002718 <HAL_GetTick>
 80038a6:	0003      	movs	r3, r0
 80038a8:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80038aa:	2380      	movs	r3, #128	; 0x80
 80038ac:	0219      	lsls	r1, r3, #8
 80038ae:	68f8      	ldr	r0, [r7, #12]
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	9300      	str	r3, [sp, #0]
 80038b4:	2319      	movs	r3, #25
 80038b6:	2201      	movs	r2, #1
 80038b8:	f000 fc24 	bl	8004104 <I2C_WaitOnFlagUntilTimeout>
 80038bc:	1e03      	subs	r3, r0, #0
 80038be:	d001      	beq.n	80038c4 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e0cc      	b.n	8003a5e <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2241      	movs	r2, #65	; 0x41
 80038c8:	2121      	movs	r1, #33	; 0x21
 80038ca:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2242      	movs	r2, #66	; 0x42
 80038d0:	2110      	movs	r1, #16
 80038d2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2200      	movs	r2, #0
 80038d8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2208      	movs	r2, #8
 80038e4:	18ba      	adds	r2, r7, r2
 80038e6:	8812      	ldrh	r2, [r2, #0]
 80038e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2200      	movs	r2, #0
 80038ee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	2bff      	cmp	r3, #255	; 0xff
 80038f8:	d911      	bls.n	800391e <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	22ff      	movs	r2, #255	; 0xff
 80038fe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003904:	b2da      	uxtb	r2, r3
 8003906:	2380      	movs	r3, #128	; 0x80
 8003908:	045c      	lsls	r4, r3, #17
 800390a:	230a      	movs	r3, #10
 800390c:	18fb      	adds	r3, r7, r3
 800390e:	8819      	ldrh	r1, [r3, #0]
 8003910:	68f8      	ldr	r0, [r7, #12]
 8003912:	4b55      	ldr	r3, [pc, #340]	; (8003a68 <HAL_I2C_Master_Transmit+0x208>)
 8003914:	9300      	str	r3, [sp, #0]
 8003916:	0023      	movs	r3, r4
 8003918:	f000 fd28 	bl	800436c <I2C_TransferConfig>
 800391c:	e075      	b.n	8003a0a <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003922:	b29a      	uxth	r2, r3
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800392c:	b2da      	uxtb	r2, r3
 800392e:	2380      	movs	r3, #128	; 0x80
 8003930:	049c      	lsls	r4, r3, #18
 8003932:	230a      	movs	r3, #10
 8003934:	18fb      	adds	r3, r7, r3
 8003936:	8819      	ldrh	r1, [r3, #0]
 8003938:	68f8      	ldr	r0, [r7, #12]
 800393a:	4b4b      	ldr	r3, [pc, #300]	; (8003a68 <HAL_I2C_Master_Transmit+0x208>)
 800393c:	9300      	str	r3, [sp, #0]
 800393e:	0023      	movs	r3, r4
 8003940:	f000 fd14 	bl	800436c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003944:	e061      	b.n	8003a0a <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003946:	697a      	ldr	r2, [r7, #20]
 8003948:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	0018      	movs	r0, r3
 800394e:	f000 fc18 	bl	8004182 <I2C_WaitOnTXISFlagUntilTimeout>
 8003952:	1e03      	subs	r3, r0, #0
 8003954:	d001      	beq.n	800395a <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e081      	b.n	8003a5e <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395e:	781a      	ldrb	r2, [r3, #0]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396a:	1c5a      	adds	r2, r3, #1
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003974:	b29b      	uxth	r3, r3
 8003976:	3b01      	subs	r3, #1
 8003978:	b29a      	uxth	r2, r3
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003982:	3b01      	subs	r3, #1
 8003984:	b29a      	uxth	r2, r3
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800398e:	b29b      	uxth	r3, r3
 8003990:	2b00      	cmp	r3, #0
 8003992:	d03a      	beq.n	8003a0a <HAL_I2C_Master_Transmit+0x1aa>
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003998:	2b00      	cmp	r3, #0
 800399a:	d136      	bne.n	8003a0a <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800399c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800399e:	68f8      	ldr	r0, [r7, #12]
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	9300      	str	r3, [sp, #0]
 80039a4:	0013      	movs	r3, r2
 80039a6:	2200      	movs	r2, #0
 80039a8:	2180      	movs	r1, #128	; 0x80
 80039aa:	f000 fbab 	bl	8004104 <I2C_WaitOnFlagUntilTimeout>
 80039ae:	1e03      	subs	r3, r0, #0
 80039b0:	d001      	beq.n	80039b6 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e053      	b.n	8003a5e <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	2bff      	cmp	r3, #255	; 0xff
 80039be:	d911      	bls.n	80039e4 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	22ff      	movs	r2, #255	; 0xff
 80039c4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ca:	b2da      	uxtb	r2, r3
 80039cc:	2380      	movs	r3, #128	; 0x80
 80039ce:	045c      	lsls	r4, r3, #17
 80039d0:	230a      	movs	r3, #10
 80039d2:	18fb      	adds	r3, r7, r3
 80039d4:	8819      	ldrh	r1, [r3, #0]
 80039d6:	68f8      	ldr	r0, [r7, #12]
 80039d8:	2300      	movs	r3, #0
 80039da:	9300      	str	r3, [sp, #0]
 80039dc:	0023      	movs	r3, r4
 80039de:	f000 fcc5 	bl	800436c <I2C_TransferConfig>
 80039e2:	e012      	b.n	8003a0a <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039e8:	b29a      	uxth	r2, r3
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039f2:	b2da      	uxtb	r2, r3
 80039f4:	2380      	movs	r3, #128	; 0x80
 80039f6:	049c      	lsls	r4, r3, #18
 80039f8:	230a      	movs	r3, #10
 80039fa:	18fb      	adds	r3, r7, r3
 80039fc:	8819      	ldrh	r1, [r3, #0]
 80039fe:	68f8      	ldr	r0, [r7, #12]
 8003a00:	2300      	movs	r3, #0
 8003a02:	9300      	str	r3, [sp, #0]
 8003a04:	0023      	movs	r3, r4
 8003a06:	f000 fcb1 	bl	800436c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d198      	bne.n	8003946 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a14:	697a      	ldr	r2, [r7, #20]
 8003a16:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	0018      	movs	r0, r3
 8003a1c:	f000 fbf0 	bl	8004200 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003a20:	1e03      	subs	r3, r0, #0
 8003a22:	d001      	beq.n	8003a28 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e01a      	b.n	8003a5e <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2220      	movs	r2, #32
 8003a2e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	685a      	ldr	r2, [r3, #4]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	490c      	ldr	r1, [pc, #48]	; (8003a6c <HAL_I2C_Master_Transmit+0x20c>)
 8003a3c:	400a      	ands	r2, r1
 8003a3e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2241      	movs	r2, #65	; 0x41
 8003a44:	2120      	movs	r1, #32
 8003a46:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2242      	movs	r2, #66	; 0x42
 8003a4c:	2100      	movs	r1, #0
 8003a4e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2240      	movs	r2, #64	; 0x40
 8003a54:	2100      	movs	r1, #0
 8003a56:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	e000      	b.n	8003a5e <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8003a5c:	2302      	movs	r3, #2
  }
}
 8003a5e:	0018      	movs	r0, r3
 8003a60:	46bd      	mov	sp, r7
 8003a62:	b007      	add	sp, #28
 8003a64:	bd90      	pop	{r4, r7, pc}
 8003a66:	46c0      	nop			; (mov r8, r8)
 8003a68:	80002000 	.word	0x80002000
 8003a6c:	fe00e800 	.word	0xfe00e800

08003a70 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a70:	b590      	push	{r4, r7, lr}
 8003a72:	b089      	sub	sp, #36	; 0x24
 8003a74:	af02      	add	r7, sp, #8
 8003a76:	60f8      	str	r0, [r7, #12]
 8003a78:	000c      	movs	r4, r1
 8003a7a:	0010      	movs	r0, r2
 8003a7c:	0019      	movs	r1, r3
 8003a7e:	230a      	movs	r3, #10
 8003a80:	18fb      	adds	r3, r7, r3
 8003a82:	1c22      	adds	r2, r4, #0
 8003a84:	801a      	strh	r2, [r3, #0]
 8003a86:	2308      	movs	r3, #8
 8003a88:	18fb      	adds	r3, r7, r3
 8003a8a:	1c02      	adds	r2, r0, #0
 8003a8c:	801a      	strh	r2, [r3, #0]
 8003a8e:	1dbb      	adds	r3, r7, #6
 8003a90:	1c0a      	adds	r2, r1, #0
 8003a92:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2241      	movs	r2, #65	; 0x41
 8003a98:	5c9b      	ldrb	r3, [r3, r2]
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	2b20      	cmp	r3, #32
 8003a9e:	d000      	beq.n	8003aa2 <HAL_I2C_Mem_Write+0x32>
 8003aa0:	e10c      	b.n	8003cbc <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d004      	beq.n	8003ab2 <HAL_I2C_Mem_Write+0x42>
 8003aa8:	232c      	movs	r3, #44	; 0x2c
 8003aaa:	18fb      	adds	r3, r7, r3
 8003aac:	881b      	ldrh	r3, [r3, #0]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d105      	bne.n	8003abe <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2280      	movs	r2, #128	; 0x80
 8003ab6:	0092      	lsls	r2, r2, #2
 8003ab8:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e0ff      	b.n	8003cbe <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2240      	movs	r2, #64	; 0x40
 8003ac2:	5c9b      	ldrb	r3, [r3, r2]
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d101      	bne.n	8003acc <HAL_I2C_Mem_Write+0x5c>
 8003ac8:	2302      	movs	r3, #2
 8003aca:	e0f8      	b.n	8003cbe <HAL_I2C_Mem_Write+0x24e>
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2240      	movs	r2, #64	; 0x40
 8003ad0:	2101      	movs	r1, #1
 8003ad2:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003ad4:	f7fe fe20 	bl	8002718 <HAL_GetTick>
 8003ad8:	0003      	movs	r3, r0
 8003ada:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003adc:	2380      	movs	r3, #128	; 0x80
 8003ade:	0219      	lsls	r1, r3, #8
 8003ae0:	68f8      	ldr	r0, [r7, #12]
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	9300      	str	r3, [sp, #0]
 8003ae6:	2319      	movs	r3, #25
 8003ae8:	2201      	movs	r2, #1
 8003aea:	f000 fb0b 	bl	8004104 <I2C_WaitOnFlagUntilTimeout>
 8003aee:	1e03      	subs	r3, r0, #0
 8003af0:	d001      	beq.n	8003af6 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e0e3      	b.n	8003cbe <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2241      	movs	r2, #65	; 0x41
 8003afa:	2121      	movs	r1, #33	; 0x21
 8003afc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2242      	movs	r2, #66	; 0x42
 8003b02:	2140      	movs	r1, #64	; 0x40
 8003b04:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b10:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	222c      	movs	r2, #44	; 0x2c
 8003b16:	18ba      	adds	r2, r7, r2
 8003b18:	8812      	ldrh	r2, [r2, #0]
 8003b1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b22:	1dbb      	adds	r3, r7, #6
 8003b24:	881c      	ldrh	r4, [r3, #0]
 8003b26:	2308      	movs	r3, #8
 8003b28:	18fb      	adds	r3, r7, r3
 8003b2a:	881a      	ldrh	r2, [r3, #0]
 8003b2c:	230a      	movs	r3, #10
 8003b2e:	18fb      	adds	r3, r7, r3
 8003b30:	8819      	ldrh	r1, [r3, #0]
 8003b32:	68f8      	ldr	r0, [r7, #12]
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	9301      	str	r3, [sp, #4]
 8003b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b3a:	9300      	str	r3, [sp, #0]
 8003b3c:	0023      	movs	r3, r4
 8003b3e:	f000 f9f9 	bl	8003f34 <I2C_RequestMemoryWrite>
 8003b42:	1e03      	subs	r3, r0, #0
 8003b44:	d005      	beq.n	8003b52 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2240      	movs	r2, #64	; 0x40
 8003b4a:	2100      	movs	r1, #0
 8003b4c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e0b5      	b.n	8003cbe <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	2bff      	cmp	r3, #255	; 0xff
 8003b5a:	d911      	bls.n	8003b80 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	22ff      	movs	r2, #255	; 0xff
 8003b60:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b66:	b2da      	uxtb	r2, r3
 8003b68:	2380      	movs	r3, #128	; 0x80
 8003b6a:	045c      	lsls	r4, r3, #17
 8003b6c:	230a      	movs	r3, #10
 8003b6e:	18fb      	adds	r3, r7, r3
 8003b70:	8819      	ldrh	r1, [r3, #0]
 8003b72:	68f8      	ldr	r0, [r7, #12]
 8003b74:	2300      	movs	r3, #0
 8003b76:	9300      	str	r3, [sp, #0]
 8003b78:	0023      	movs	r3, r4
 8003b7a:	f000 fbf7 	bl	800436c <I2C_TransferConfig>
 8003b7e:	e012      	b.n	8003ba6 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b84:	b29a      	uxth	r2, r3
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b8e:	b2da      	uxtb	r2, r3
 8003b90:	2380      	movs	r3, #128	; 0x80
 8003b92:	049c      	lsls	r4, r3, #18
 8003b94:	230a      	movs	r3, #10
 8003b96:	18fb      	adds	r3, r7, r3
 8003b98:	8819      	ldrh	r1, [r3, #0]
 8003b9a:	68f8      	ldr	r0, [r7, #12]
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	9300      	str	r3, [sp, #0]
 8003ba0:	0023      	movs	r3, r4
 8003ba2:	f000 fbe3 	bl	800436c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ba6:	697a      	ldr	r2, [r7, #20]
 8003ba8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	0018      	movs	r0, r3
 8003bae:	f000 fae8 	bl	8004182 <I2C_WaitOnTXISFlagUntilTimeout>
 8003bb2:	1e03      	subs	r3, r0, #0
 8003bb4:	d001      	beq.n	8003bba <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e081      	b.n	8003cbe <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbe:	781a      	ldrb	r2, [r3, #0]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bca:	1c5a      	adds	r2, r3, #1
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	3b01      	subs	r3, #1
 8003bd8:	b29a      	uxth	r2, r3
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003be2:	3b01      	subs	r3, #1
 8003be4:	b29a      	uxth	r2, r3
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d03a      	beq.n	8003c6a <HAL_I2C_Mem_Write+0x1fa>
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d136      	bne.n	8003c6a <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003bfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bfe:	68f8      	ldr	r0, [r7, #12]
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	9300      	str	r3, [sp, #0]
 8003c04:	0013      	movs	r3, r2
 8003c06:	2200      	movs	r2, #0
 8003c08:	2180      	movs	r1, #128	; 0x80
 8003c0a:	f000 fa7b 	bl	8004104 <I2C_WaitOnFlagUntilTimeout>
 8003c0e:	1e03      	subs	r3, r0, #0
 8003c10:	d001      	beq.n	8003c16 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e053      	b.n	8003cbe <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	2bff      	cmp	r3, #255	; 0xff
 8003c1e:	d911      	bls.n	8003c44 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	22ff      	movs	r2, #255	; 0xff
 8003c24:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c2a:	b2da      	uxtb	r2, r3
 8003c2c:	2380      	movs	r3, #128	; 0x80
 8003c2e:	045c      	lsls	r4, r3, #17
 8003c30:	230a      	movs	r3, #10
 8003c32:	18fb      	adds	r3, r7, r3
 8003c34:	8819      	ldrh	r1, [r3, #0]
 8003c36:	68f8      	ldr	r0, [r7, #12]
 8003c38:	2300      	movs	r3, #0
 8003c3a:	9300      	str	r3, [sp, #0]
 8003c3c:	0023      	movs	r3, r4
 8003c3e:	f000 fb95 	bl	800436c <I2C_TransferConfig>
 8003c42:	e012      	b.n	8003c6a <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c48:	b29a      	uxth	r2, r3
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c52:	b2da      	uxtb	r2, r3
 8003c54:	2380      	movs	r3, #128	; 0x80
 8003c56:	049c      	lsls	r4, r3, #18
 8003c58:	230a      	movs	r3, #10
 8003c5a:	18fb      	adds	r3, r7, r3
 8003c5c:	8819      	ldrh	r1, [r3, #0]
 8003c5e:	68f8      	ldr	r0, [r7, #12]
 8003c60:	2300      	movs	r3, #0
 8003c62:	9300      	str	r3, [sp, #0]
 8003c64:	0023      	movs	r3, r4
 8003c66:	f000 fb81 	bl	800436c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d198      	bne.n	8003ba6 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c74:	697a      	ldr	r2, [r7, #20]
 8003c76:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	0018      	movs	r0, r3
 8003c7c:	f000 fac0 	bl	8004200 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003c80:	1e03      	subs	r3, r0, #0
 8003c82:	d001      	beq.n	8003c88 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e01a      	b.n	8003cbe <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	2220      	movs	r2, #32
 8003c8e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	685a      	ldr	r2, [r3, #4]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	490b      	ldr	r1, [pc, #44]	; (8003cc8 <HAL_I2C_Mem_Write+0x258>)
 8003c9c:	400a      	ands	r2, r1
 8003c9e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2241      	movs	r2, #65	; 0x41
 8003ca4:	2120      	movs	r1, #32
 8003ca6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2242      	movs	r2, #66	; 0x42
 8003cac:	2100      	movs	r1, #0
 8003cae:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2240      	movs	r2, #64	; 0x40
 8003cb4:	2100      	movs	r1, #0
 8003cb6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	e000      	b.n	8003cbe <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8003cbc:	2302      	movs	r3, #2
  }
}
 8003cbe:	0018      	movs	r0, r3
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	b007      	add	sp, #28
 8003cc4:	bd90      	pop	{r4, r7, pc}
 8003cc6:	46c0      	nop			; (mov r8, r8)
 8003cc8:	fe00e800 	.word	0xfe00e800

08003ccc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ccc:	b590      	push	{r4, r7, lr}
 8003cce:	b089      	sub	sp, #36	; 0x24
 8003cd0:	af02      	add	r7, sp, #8
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	000c      	movs	r4, r1
 8003cd6:	0010      	movs	r0, r2
 8003cd8:	0019      	movs	r1, r3
 8003cda:	230a      	movs	r3, #10
 8003cdc:	18fb      	adds	r3, r7, r3
 8003cde:	1c22      	adds	r2, r4, #0
 8003ce0:	801a      	strh	r2, [r3, #0]
 8003ce2:	2308      	movs	r3, #8
 8003ce4:	18fb      	adds	r3, r7, r3
 8003ce6:	1c02      	adds	r2, r0, #0
 8003ce8:	801a      	strh	r2, [r3, #0]
 8003cea:	1dbb      	adds	r3, r7, #6
 8003cec:	1c0a      	adds	r2, r1, #0
 8003cee:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2241      	movs	r2, #65	; 0x41
 8003cf4:	5c9b      	ldrb	r3, [r3, r2]
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	2b20      	cmp	r3, #32
 8003cfa:	d000      	beq.n	8003cfe <HAL_I2C_Mem_Read+0x32>
 8003cfc:	e110      	b.n	8003f20 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d004      	beq.n	8003d0e <HAL_I2C_Mem_Read+0x42>
 8003d04:	232c      	movs	r3, #44	; 0x2c
 8003d06:	18fb      	adds	r3, r7, r3
 8003d08:	881b      	ldrh	r3, [r3, #0]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d105      	bne.n	8003d1a <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2280      	movs	r2, #128	; 0x80
 8003d12:	0092      	lsls	r2, r2, #2
 8003d14:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e103      	b.n	8003f22 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2240      	movs	r2, #64	; 0x40
 8003d1e:	5c9b      	ldrb	r3, [r3, r2]
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d101      	bne.n	8003d28 <HAL_I2C_Mem_Read+0x5c>
 8003d24:	2302      	movs	r3, #2
 8003d26:	e0fc      	b.n	8003f22 <HAL_I2C_Mem_Read+0x256>
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2240      	movs	r2, #64	; 0x40
 8003d2c:	2101      	movs	r1, #1
 8003d2e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003d30:	f7fe fcf2 	bl	8002718 <HAL_GetTick>
 8003d34:	0003      	movs	r3, r0
 8003d36:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003d38:	2380      	movs	r3, #128	; 0x80
 8003d3a:	0219      	lsls	r1, r3, #8
 8003d3c:	68f8      	ldr	r0, [r7, #12]
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	9300      	str	r3, [sp, #0]
 8003d42:	2319      	movs	r3, #25
 8003d44:	2201      	movs	r2, #1
 8003d46:	f000 f9dd 	bl	8004104 <I2C_WaitOnFlagUntilTimeout>
 8003d4a:	1e03      	subs	r3, r0, #0
 8003d4c:	d001      	beq.n	8003d52 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e0e7      	b.n	8003f22 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2241      	movs	r2, #65	; 0x41
 8003d56:	2122      	movs	r1, #34	; 0x22
 8003d58:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2242      	movs	r2, #66	; 0x42
 8003d5e:	2140      	movs	r1, #64	; 0x40
 8003d60:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2200      	movs	r2, #0
 8003d66:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d6c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	222c      	movs	r2, #44	; 0x2c
 8003d72:	18ba      	adds	r2, r7, r2
 8003d74:	8812      	ldrh	r2, [r2, #0]
 8003d76:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d7e:	1dbb      	adds	r3, r7, #6
 8003d80:	881c      	ldrh	r4, [r3, #0]
 8003d82:	2308      	movs	r3, #8
 8003d84:	18fb      	adds	r3, r7, r3
 8003d86:	881a      	ldrh	r2, [r3, #0]
 8003d88:	230a      	movs	r3, #10
 8003d8a:	18fb      	adds	r3, r7, r3
 8003d8c:	8819      	ldrh	r1, [r3, #0]
 8003d8e:	68f8      	ldr	r0, [r7, #12]
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	9301      	str	r3, [sp, #4]
 8003d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d96:	9300      	str	r3, [sp, #0]
 8003d98:	0023      	movs	r3, r4
 8003d9a:	f000 f92f 	bl	8003ffc <I2C_RequestMemoryRead>
 8003d9e:	1e03      	subs	r3, r0, #0
 8003da0:	d005      	beq.n	8003dae <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2240      	movs	r2, #64	; 0x40
 8003da6:	2100      	movs	r1, #0
 8003da8:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e0b9      	b.n	8003f22 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	2bff      	cmp	r3, #255	; 0xff
 8003db6:	d911      	bls.n	8003ddc <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	22ff      	movs	r2, #255	; 0xff
 8003dbc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dc2:	b2da      	uxtb	r2, r3
 8003dc4:	2380      	movs	r3, #128	; 0x80
 8003dc6:	045c      	lsls	r4, r3, #17
 8003dc8:	230a      	movs	r3, #10
 8003dca:	18fb      	adds	r3, r7, r3
 8003dcc:	8819      	ldrh	r1, [r3, #0]
 8003dce:	68f8      	ldr	r0, [r7, #12]
 8003dd0:	4b56      	ldr	r3, [pc, #344]	; (8003f2c <HAL_I2C_Mem_Read+0x260>)
 8003dd2:	9300      	str	r3, [sp, #0]
 8003dd4:	0023      	movs	r3, r4
 8003dd6:	f000 fac9 	bl	800436c <I2C_TransferConfig>
 8003dda:	e012      	b.n	8003e02 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003de0:	b29a      	uxth	r2, r3
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dea:	b2da      	uxtb	r2, r3
 8003dec:	2380      	movs	r3, #128	; 0x80
 8003dee:	049c      	lsls	r4, r3, #18
 8003df0:	230a      	movs	r3, #10
 8003df2:	18fb      	adds	r3, r7, r3
 8003df4:	8819      	ldrh	r1, [r3, #0]
 8003df6:	68f8      	ldr	r0, [r7, #12]
 8003df8:	4b4c      	ldr	r3, [pc, #304]	; (8003f2c <HAL_I2C_Mem_Read+0x260>)
 8003dfa:	9300      	str	r3, [sp, #0]
 8003dfc:	0023      	movs	r3, r4
 8003dfe:	f000 fab5 	bl	800436c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003e02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e04:	68f8      	ldr	r0, [r7, #12]
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	9300      	str	r3, [sp, #0]
 8003e0a:	0013      	movs	r3, r2
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	2104      	movs	r1, #4
 8003e10:	f000 f978 	bl	8004104 <I2C_WaitOnFlagUntilTimeout>
 8003e14:	1e03      	subs	r3, r0, #0
 8003e16:	d001      	beq.n	8003e1c <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e082      	b.n	8003f22 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e26:	b2d2      	uxtb	r2, r2
 8003e28:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2e:	1c5a      	adds	r2, r3, #1
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e38:	3b01      	subs	r3, #1
 8003e3a:	b29a      	uxth	r2, r3
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	3b01      	subs	r3, #1
 8003e48:	b29a      	uxth	r2, r3
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d03a      	beq.n	8003ece <HAL_I2C_Mem_Read+0x202>
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d136      	bne.n	8003ece <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003e60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e62:	68f8      	ldr	r0, [r7, #12]
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	9300      	str	r3, [sp, #0]
 8003e68:	0013      	movs	r3, r2
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	2180      	movs	r1, #128	; 0x80
 8003e6e:	f000 f949 	bl	8004104 <I2C_WaitOnFlagUntilTimeout>
 8003e72:	1e03      	subs	r3, r0, #0
 8003e74:	d001      	beq.n	8003e7a <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e053      	b.n	8003f22 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	2bff      	cmp	r3, #255	; 0xff
 8003e82:	d911      	bls.n	8003ea8 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	22ff      	movs	r2, #255	; 0xff
 8003e88:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e8e:	b2da      	uxtb	r2, r3
 8003e90:	2380      	movs	r3, #128	; 0x80
 8003e92:	045c      	lsls	r4, r3, #17
 8003e94:	230a      	movs	r3, #10
 8003e96:	18fb      	adds	r3, r7, r3
 8003e98:	8819      	ldrh	r1, [r3, #0]
 8003e9a:	68f8      	ldr	r0, [r7, #12]
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	9300      	str	r3, [sp, #0]
 8003ea0:	0023      	movs	r3, r4
 8003ea2:	f000 fa63 	bl	800436c <I2C_TransferConfig>
 8003ea6:	e012      	b.n	8003ece <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eac:	b29a      	uxth	r2, r3
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eb6:	b2da      	uxtb	r2, r3
 8003eb8:	2380      	movs	r3, #128	; 0x80
 8003eba:	049c      	lsls	r4, r3, #18
 8003ebc:	230a      	movs	r3, #10
 8003ebe:	18fb      	adds	r3, r7, r3
 8003ec0:	8819      	ldrh	r1, [r3, #0]
 8003ec2:	68f8      	ldr	r0, [r7, #12]
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	9300      	str	r3, [sp, #0]
 8003ec8:	0023      	movs	r3, r4
 8003eca:	f000 fa4f 	bl	800436c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d194      	bne.n	8003e02 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ed8:	697a      	ldr	r2, [r7, #20]
 8003eda:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	0018      	movs	r0, r3
 8003ee0:	f000 f98e 	bl	8004200 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003ee4:	1e03      	subs	r3, r0, #0
 8003ee6:	d001      	beq.n	8003eec <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e01a      	b.n	8003f22 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2220      	movs	r2, #32
 8003ef2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	685a      	ldr	r2, [r3, #4]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	490c      	ldr	r1, [pc, #48]	; (8003f30 <HAL_I2C_Mem_Read+0x264>)
 8003f00:	400a      	ands	r2, r1
 8003f02:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2241      	movs	r2, #65	; 0x41
 8003f08:	2120      	movs	r1, #32
 8003f0a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2242      	movs	r2, #66	; 0x42
 8003f10:	2100      	movs	r1, #0
 8003f12:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2240      	movs	r2, #64	; 0x40
 8003f18:	2100      	movs	r1, #0
 8003f1a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	e000      	b.n	8003f22 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8003f20:	2302      	movs	r3, #2
  }
}
 8003f22:	0018      	movs	r0, r3
 8003f24:	46bd      	mov	sp, r7
 8003f26:	b007      	add	sp, #28
 8003f28:	bd90      	pop	{r4, r7, pc}
 8003f2a:	46c0      	nop			; (mov r8, r8)
 8003f2c:	80002400 	.word	0x80002400
 8003f30:	fe00e800 	.word	0xfe00e800

08003f34 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003f34:	b5b0      	push	{r4, r5, r7, lr}
 8003f36:	b086      	sub	sp, #24
 8003f38:	af02      	add	r7, sp, #8
 8003f3a:	60f8      	str	r0, [r7, #12]
 8003f3c:	000c      	movs	r4, r1
 8003f3e:	0010      	movs	r0, r2
 8003f40:	0019      	movs	r1, r3
 8003f42:	250a      	movs	r5, #10
 8003f44:	197b      	adds	r3, r7, r5
 8003f46:	1c22      	adds	r2, r4, #0
 8003f48:	801a      	strh	r2, [r3, #0]
 8003f4a:	2308      	movs	r3, #8
 8003f4c:	18fb      	adds	r3, r7, r3
 8003f4e:	1c02      	adds	r2, r0, #0
 8003f50:	801a      	strh	r2, [r3, #0]
 8003f52:	1dbb      	adds	r3, r7, #6
 8003f54:	1c0a      	adds	r2, r1, #0
 8003f56:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003f58:	1dbb      	adds	r3, r7, #6
 8003f5a:	881b      	ldrh	r3, [r3, #0]
 8003f5c:	b2da      	uxtb	r2, r3
 8003f5e:	2380      	movs	r3, #128	; 0x80
 8003f60:	045c      	lsls	r4, r3, #17
 8003f62:	197b      	adds	r3, r7, r5
 8003f64:	8819      	ldrh	r1, [r3, #0]
 8003f66:	68f8      	ldr	r0, [r7, #12]
 8003f68:	4b23      	ldr	r3, [pc, #140]	; (8003ff8 <I2C_RequestMemoryWrite+0xc4>)
 8003f6a:	9300      	str	r3, [sp, #0]
 8003f6c:	0023      	movs	r3, r4
 8003f6e:	f000 f9fd 	bl	800436c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f74:	6a39      	ldr	r1, [r7, #32]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	0018      	movs	r0, r3
 8003f7a:	f000 f902 	bl	8004182 <I2C_WaitOnTXISFlagUntilTimeout>
 8003f7e:	1e03      	subs	r3, r0, #0
 8003f80:	d001      	beq.n	8003f86 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e033      	b.n	8003fee <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f86:	1dbb      	adds	r3, r7, #6
 8003f88:	881b      	ldrh	r3, [r3, #0]
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d107      	bne.n	8003f9e <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003f8e:	2308      	movs	r3, #8
 8003f90:	18fb      	adds	r3, r7, r3
 8003f92:	881b      	ldrh	r3, [r3, #0]
 8003f94:	b2da      	uxtb	r2, r3
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	629a      	str	r2, [r3, #40]	; 0x28
 8003f9c:	e019      	b.n	8003fd2 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003f9e:	2308      	movs	r3, #8
 8003fa0:	18fb      	adds	r3, r7, r3
 8003fa2:	881b      	ldrh	r3, [r3, #0]
 8003fa4:	0a1b      	lsrs	r3, r3, #8
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	b2da      	uxtb	r2, r3
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fb2:	6a39      	ldr	r1, [r7, #32]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	0018      	movs	r0, r3
 8003fb8:	f000 f8e3 	bl	8004182 <I2C_WaitOnTXISFlagUntilTimeout>
 8003fbc:	1e03      	subs	r3, r0, #0
 8003fbe:	d001      	beq.n	8003fc4 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e014      	b.n	8003fee <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003fc4:	2308      	movs	r3, #8
 8003fc6:	18fb      	adds	r3, r7, r3
 8003fc8:	881b      	ldrh	r3, [r3, #0]
 8003fca:	b2da      	uxtb	r2, r3
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003fd2:	6a3a      	ldr	r2, [r7, #32]
 8003fd4:	68f8      	ldr	r0, [r7, #12]
 8003fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd8:	9300      	str	r3, [sp, #0]
 8003fda:	0013      	movs	r3, r2
 8003fdc:	2200      	movs	r2, #0
 8003fde:	2180      	movs	r1, #128	; 0x80
 8003fe0:	f000 f890 	bl	8004104 <I2C_WaitOnFlagUntilTimeout>
 8003fe4:	1e03      	subs	r3, r0, #0
 8003fe6:	d001      	beq.n	8003fec <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e000      	b.n	8003fee <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8003fec:	2300      	movs	r3, #0
}
 8003fee:	0018      	movs	r0, r3
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	b004      	add	sp, #16
 8003ff4:	bdb0      	pop	{r4, r5, r7, pc}
 8003ff6:	46c0      	nop			; (mov r8, r8)
 8003ff8:	80002000 	.word	0x80002000

08003ffc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003ffc:	b5b0      	push	{r4, r5, r7, lr}
 8003ffe:	b086      	sub	sp, #24
 8004000:	af02      	add	r7, sp, #8
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	000c      	movs	r4, r1
 8004006:	0010      	movs	r0, r2
 8004008:	0019      	movs	r1, r3
 800400a:	250a      	movs	r5, #10
 800400c:	197b      	adds	r3, r7, r5
 800400e:	1c22      	adds	r2, r4, #0
 8004010:	801a      	strh	r2, [r3, #0]
 8004012:	2308      	movs	r3, #8
 8004014:	18fb      	adds	r3, r7, r3
 8004016:	1c02      	adds	r2, r0, #0
 8004018:	801a      	strh	r2, [r3, #0]
 800401a:	1dbb      	adds	r3, r7, #6
 800401c:	1c0a      	adds	r2, r1, #0
 800401e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004020:	1dbb      	adds	r3, r7, #6
 8004022:	881b      	ldrh	r3, [r3, #0]
 8004024:	b2da      	uxtb	r2, r3
 8004026:	197b      	adds	r3, r7, r5
 8004028:	8819      	ldrh	r1, [r3, #0]
 800402a:	68f8      	ldr	r0, [r7, #12]
 800402c:	4b23      	ldr	r3, [pc, #140]	; (80040bc <I2C_RequestMemoryRead+0xc0>)
 800402e:	9300      	str	r3, [sp, #0]
 8004030:	2300      	movs	r3, #0
 8004032:	f000 f99b 	bl	800436c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004036:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004038:	6a39      	ldr	r1, [r7, #32]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	0018      	movs	r0, r3
 800403e:	f000 f8a0 	bl	8004182 <I2C_WaitOnTXISFlagUntilTimeout>
 8004042:	1e03      	subs	r3, r0, #0
 8004044:	d001      	beq.n	800404a <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e033      	b.n	80040b2 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800404a:	1dbb      	adds	r3, r7, #6
 800404c:	881b      	ldrh	r3, [r3, #0]
 800404e:	2b01      	cmp	r3, #1
 8004050:	d107      	bne.n	8004062 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004052:	2308      	movs	r3, #8
 8004054:	18fb      	adds	r3, r7, r3
 8004056:	881b      	ldrh	r3, [r3, #0]
 8004058:	b2da      	uxtb	r2, r3
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	629a      	str	r2, [r3, #40]	; 0x28
 8004060:	e019      	b.n	8004096 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004062:	2308      	movs	r3, #8
 8004064:	18fb      	adds	r3, r7, r3
 8004066:	881b      	ldrh	r3, [r3, #0]
 8004068:	0a1b      	lsrs	r3, r3, #8
 800406a:	b29b      	uxth	r3, r3
 800406c:	b2da      	uxtb	r2, r3
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004074:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004076:	6a39      	ldr	r1, [r7, #32]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	0018      	movs	r0, r3
 800407c:	f000 f881 	bl	8004182 <I2C_WaitOnTXISFlagUntilTimeout>
 8004080:	1e03      	subs	r3, r0, #0
 8004082:	d001      	beq.n	8004088 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	e014      	b.n	80040b2 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004088:	2308      	movs	r3, #8
 800408a:	18fb      	adds	r3, r7, r3
 800408c:	881b      	ldrh	r3, [r3, #0]
 800408e:	b2da      	uxtb	r2, r3
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004096:	6a3a      	ldr	r2, [r7, #32]
 8004098:	68f8      	ldr	r0, [r7, #12]
 800409a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409c:	9300      	str	r3, [sp, #0]
 800409e:	0013      	movs	r3, r2
 80040a0:	2200      	movs	r2, #0
 80040a2:	2140      	movs	r1, #64	; 0x40
 80040a4:	f000 f82e 	bl	8004104 <I2C_WaitOnFlagUntilTimeout>
 80040a8:	1e03      	subs	r3, r0, #0
 80040aa:	d001      	beq.n	80040b0 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e000      	b.n	80040b2 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 80040b0:	2300      	movs	r3, #0
}
 80040b2:	0018      	movs	r0, r3
 80040b4:	46bd      	mov	sp, r7
 80040b6:	b004      	add	sp, #16
 80040b8:	bdb0      	pop	{r4, r5, r7, pc}
 80040ba:	46c0      	nop			; (mov r8, r8)
 80040bc:	80002000 	.word	0x80002000

080040c0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b082      	sub	sp, #8
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	699b      	ldr	r3, [r3, #24]
 80040ce:	2202      	movs	r2, #2
 80040d0:	4013      	ands	r3, r2
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d103      	bne.n	80040de <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	2200      	movs	r2, #0
 80040dc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	699b      	ldr	r3, [r3, #24]
 80040e4:	2201      	movs	r2, #1
 80040e6:	4013      	ands	r3, r2
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d007      	beq.n	80040fc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	699a      	ldr	r2, [r3, #24]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	2101      	movs	r1, #1
 80040f8:	430a      	orrs	r2, r1
 80040fa:	619a      	str	r2, [r3, #24]
  }
}
 80040fc:	46c0      	nop			; (mov r8, r8)
 80040fe:	46bd      	mov	sp, r7
 8004100:	b002      	add	sp, #8
 8004102:	bd80      	pop	{r7, pc}

08004104 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
 800410a:	60f8      	str	r0, [r7, #12]
 800410c:	60b9      	str	r1, [r7, #8]
 800410e:	603b      	str	r3, [r7, #0]
 8004110:	1dfb      	adds	r3, r7, #7
 8004112:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004114:	e021      	b.n	800415a <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	3301      	adds	r3, #1
 800411a:	d01e      	beq.n	800415a <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800411c:	f7fe fafc 	bl	8002718 <HAL_GetTick>
 8004120:	0002      	movs	r2, r0
 8004122:	69bb      	ldr	r3, [r7, #24]
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	683a      	ldr	r2, [r7, #0]
 8004128:	429a      	cmp	r2, r3
 800412a:	d302      	bcc.n	8004132 <I2C_WaitOnFlagUntilTimeout+0x2e>
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d113      	bne.n	800415a <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004136:	2220      	movs	r2, #32
 8004138:	431a      	orrs	r2, r3
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2241      	movs	r2, #65	; 0x41
 8004142:	2120      	movs	r1, #32
 8004144:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2242      	movs	r2, #66	; 0x42
 800414a:	2100      	movs	r1, #0
 800414c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2240      	movs	r2, #64	; 0x40
 8004152:	2100      	movs	r1, #0
 8004154:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e00f      	b.n	800417a <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	699b      	ldr	r3, [r3, #24]
 8004160:	68ba      	ldr	r2, [r7, #8]
 8004162:	4013      	ands	r3, r2
 8004164:	68ba      	ldr	r2, [r7, #8]
 8004166:	1ad3      	subs	r3, r2, r3
 8004168:	425a      	negs	r2, r3
 800416a:	4153      	adcs	r3, r2
 800416c:	b2db      	uxtb	r3, r3
 800416e:	001a      	movs	r2, r3
 8004170:	1dfb      	adds	r3, r7, #7
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	429a      	cmp	r2, r3
 8004176:	d0ce      	beq.n	8004116 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004178:	2300      	movs	r3, #0
}
 800417a:	0018      	movs	r0, r3
 800417c:	46bd      	mov	sp, r7
 800417e:	b004      	add	sp, #16
 8004180:	bd80      	pop	{r7, pc}

08004182 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004182:	b580      	push	{r7, lr}
 8004184:	b084      	sub	sp, #16
 8004186:	af00      	add	r7, sp, #0
 8004188:	60f8      	str	r0, [r7, #12]
 800418a:	60b9      	str	r1, [r7, #8]
 800418c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800418e:	e02b      	b.n	80041e8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	68b9      	ldr	r1, [r7, #8]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	0018      	movs	r0, r3
 8004198:	f000 f86e 	bl	8004278 <I2C_IsAcknowledgeFailed>
 800419c:	1e03      	subs	r3, r0, #0
 800419e:	d001      	beq.n	80041a4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e029      	b.n	80041f8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	3301      	adds	r3, #1
 80041a8:	d01e      	beq.n	80041e8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041aa:	f7fe fab5 	bl	8002718 <HAL_GetTick>
 80041ae:	0002      	movs	r2, r0
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	68ba      	ldr	r2, [r7, #8]
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d302      	bcc.n	80041c0 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d113      	bne.n	80041e8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041c4:	2220      	movs	r2, #32
 80041c6:	431a      	orrs	r2, r3
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2241      	movs	r2, #65	; 0x41
 80041d0:	2120      	movs	r1, #32
 80041d2:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2242      	movs	r2, #66	; 0x42
 80041d8:	2100      	movs	r1, #0
 80041da:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2240      	movs	r2, #64	; 0x40
 80041e0:	2100      	movs	r1, #0
 80041e2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e007      	b.n	80041f8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	699b      	ldr	r3, [r3, #24]
 80041ee:	2202      	movs	r2, #2
 80041f0:	4013      	ands	r3, r2
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	d1cc      	bne.n	8004190 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80041f6:	2300      	movs	r3, #0
}
 80041f8:	0018      	movs	r0, r3
 80041fa:	46bd      	mov	sp, r7
 80041fc:	b004      	add	sp, #16
 80041fe:	bd80      	pop	{r7, pc}

08004200 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800420c:	e028      	b.n	8004260 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	68b9      	ldr	r1, [r7, #8]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	0018      	movs	r0, r3
 8004216:	f000 f82f 	bl	8004278 <I2C_IsAcknowledgeFailed>
 800421a:	1e03      	subs	r3, r0, #0
 800421c:	d001      	beq.n	8004222 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e026      	b.n	8004270 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004222:	f7fe fa79 	bl	8002718 <HAL_GetTick>
 8004226:	0002      	movs	r2, r0
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	1ad3      	subs	r3, r2, r3
 800422c:	68ba      	ldr	r2, [r7, #8]
 800422e:	429a      	cmp	r2, r3
 8004230:	d302      	bcc.n	8004238 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d113      	bne.n	8004260 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800423c:	2220      	movs	r2, #32
 800423e:	431a      	orrs	r2, r3
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2241      	movs	r2, #65	; 0x41
 8004248:	2120      	movs	r1, #32
 800424a:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2242      	movs	r2, #66	; 0x42
 8004250:	2100      	movs	r1, #0
 8004252:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2240      	movs	r2, #64	; 0x40
 8004258:	2100      	movs	r1, #0
 800425a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e007      	b.n	8004270 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	699b      	ldr	r3, [r3, #24]
 8004266:	2220      	movs	r2, #32
 8004268:	4013      	ands	r3, r2
 800426a:	2b20      	cmp	r3, #32
 800426c:	d1cf      	bne.n	800420e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800426e:	2300      	movs	r3, #0
}
 8004270:	0018      	movs	r0, r3
 8004272:	46bd      	mov	sp, r7
 8004274:	b004      	add	sp, #16
 8004276:	bd80      	pop	{r7, pc}

08004278 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	60b9      	str	r1, [r7, #8]
 8004282:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	699b      	ldr	r3, [r3, #24]
 800428a:	2210      	movs	r2, #16
 800428c:	4013      	ands	r3, r2
 800428e:	2b10      	cmp	r3, #16
 8004290:	d164      	bne.n	800435c <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	685a      	ldr	r2, [r3, #4]
 8004298:	2380      	movs	r3, #128	; 0x80
 800429a:	049b      	lsls	r3, r3, #18
 800429c:	401a      	ands	r2, r3
 800429e:	2380      	movs	r3, #128	; 0x80
 80042a0:	049b      	lsls	r3, r3, #18
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d02b      	beq.n	80042fe <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	685a      	ldr	r2, [r3, #4]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2180      	movs	r1, #128	; 0x80
 80042b2:	01c9      	lsls	r1, r1, #7
 80042b4:	430a      	orrs	r2, r1
 80042b6:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80042b8:	e021      	b.n	80042fe <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	3301      	adds	r3, #1
 80042be:	d01e      	beq.n	80042fe <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042c0:	f7fe fa2a 	bl	8002718 <HAL_GetTick>
 80042c4:	0002      	movs	r2, r0
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	68ba      	ldr	r2, [r7, #8]
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d302      	bcc.n	80042d6 <I2C_IsAcknowledgeFailed+0x5e>
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d113      	bne.n	80042fe <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042da:	2220      	movs	r2, #32
 80042dc:	431a      	orrs	r2, r3
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2241      	movs	r2, #65	; 0x41
 80042e6:	2120      	movs	r1, #32
 80042e8:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2242      	movs	r2, #66	; 0x42
 80042ee:	2100      	movs	r1, #0
 80042f0:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2240      	movs	r2, #64	; 0x40
 80042f6:	2100      	movs	r1, #0
 80042f8:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e02f      	b.n	800435e <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	699b      	ldr	r3, [r3, #24]
 8004304:	2220      	movs	r2, #32
 8004306:	4013      	ands	r3, r2
 8004308:	2b20      	cmp	r3, #32
 800430a:	d1d6      	bne.n	80042ba <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2210      	movs	r2, #16
 8004312:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	2220      	movs	r2, #32
 800431a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	0018      	movs	r0, r3
 8004320:	f7ff fece 	bl	80040c0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	685a      	ldr	r2, [r3, #4]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	490e      	ldr	r1, [pc, #56]	; (8004368 <I2C_IsAcknowledgeFailed+0xf0>)
 8004330:	400a      	ands	r2, r1
 8004332:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004338:	2204      	movs	r2, #4
 800433a:	431a      	orrs	r2, r3
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2241      	movs	r2, #65	; 0x41
 8004344:	2120      	movs	r1, #32
 8004346:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2242      	movs	r2, #66	; 0x42
 800434c:	2100      	movs	r1, #0
 800434e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2240      	movs	r2, #64	; 0x40
 8004354:	2100      	movs	r1, #0
 8004356:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	e000      	b.n	800435e <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 800435c:	2300      	movs	r3, #0
}
 800435e:	0018      	movs	r0, r3
 8004360:	46bd      	mov	sp, r7
 8004362:	b004      	add	sp, #16
 8004364:	bd80      	pop	{r7, pc}
 8004366:	46c0      	nop			; (mov r8, r8)
 8004368:	fe00e800 	.word	0xfe00e800

0800436c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800436c:	b590      	push	{r4, r7, lr}
 800436e:	b085      	sub	sp, #20
 8004370:	af00      	add	r7, sp, #0
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	0008      	movs	r0, r1
 8004376:	0011      	movs	r1, r2
 8004378:	607b      	str	r3, [r7, #4]
 800437a:	240a      	movs	r4, #10
 800437c:	193b      	adds	r3, r7, r4
 800437e:	1c02      	adds	r2, r0, #0
 8004380:	801a      	strh	r2, [r3, #0]
 8004382:	2009      	movs	r0, #9
 8004384:	183b      	adds	r3, r7, r0
 8004386:	1c0a      	adds	r2, r1, #0
 8004388:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	6a3a      	ldr	r2, [r7, #32]
 8004392:	0d51      	lsrs	r1, r2, #21
 8004394:	2280      	movs	r2, #128	; 0x80
 8004396:	00d2      	lsls	r2, r2, #3
 8004398:	400a      	ands	r2, r1
 800439a:	490e      	ldr	r1, [pc, #56]	; (80043d4 <I2C_TransferConfig+0x68>)
 800439c:	430a      	orrs	r2, r1
 800439e:	43d2      	mvns	r2, r2
 80043a0:	401a      	ands	r2, r3
 80043a2:	0011      	movs	r1, r2
 80043a4:	193b      	adds	r3, r7, r4
 80043a6:	881b      	ldrh	r3, [r3, #0]
 80043a8:	059b      	lsls	r3, r3, #22
 80043aa:	0d9a      	lsrs	r2, r3, #22
 80043ac:	183b      	adds	r3, r7, r0
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	0418      	lsls	r0, r3, #16
 80043b2:	23ff      	movs	r3, #255	; 0xff
 80043b4:	041b      	lsls	r3, r3, #16
 80043b6:	4003      	ands	r3, r0
 80043b8:	431a      	orrs	r2, r3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	431a      	orrs	r2, r3
 80043be:	6a3b      	ldr	r3, [r7, #32]
 80043c0:	431a      	orrs	r2, r3
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	430a      	orrs	r2, r1
 80043c8:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 80043ca:	46c0      	nop			; (mov r8, r8)
 80043cc:	46bd      	mov	sp, r7
 80043ce:	b005      	add	sp, #20
 80043d0:	bd90      	pop	{r4, r7, pc}
 80043d2:	46c0      	nop			; (mov r8, r8)
 80043d4:	03ff63ff 	.word	0x03ff63ff

080043d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b082      	sub	sp, #8
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2241      	movs	r2, #65	; 0x41
 80043e6:	5c9b      	ldrb	r3, [r3, r2]
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	2b20      	cmp	r3, #32
 80043ec:	d138      	bne.n	8004460 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2240      	movs	r2, #64	; 0x40
 80043f2:	5c9b      	ldrb	r3, [r3, r2]
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d101      	bne.n	80043fc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80043f8:	2302      	movs	r3, #2
 80043fa:	e032      	b.n	8004462 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2240      	movs	r2, #64	; 0x40
 8004400:	2101      	movs	r1, #1
 8004402:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2241      	movs	r2, #65	; 0x41
 8004408:	2124      	movs	r1, #36	; 0x24
 800440a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	2101      	movs	r1, #1
 8004418:	438a      	bics	r2, r1
 800441a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4911      	ldr	r1, [pc, #68]	; (800446c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004428:	400a      	ands	r2, r1
 800442a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	6819      	ldr	r1, [r3, #0]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	683a      	ldr	r2, [r7, #0]
 8004438:	430a      	orrs	r2, r1
 800443a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	2101      	movs	r1, #1
 8004448:	430a      	orrs	r2, r1
 800444a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2241      	movs	r2, #65	; 0x41
 8004450:	2120      	movs	r1, #32
 8004452:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2240      	movs	r2, #64	; 0x40
 8004458:	2100      	movs	r1, #0
 800445a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800445c:	2300      	movs	r3, #0
 800445e:	e000      	b.n	8004462 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004460:	2302      	movs	r3, #2
  }
}
 8004462:	0018      	movs	r0, r3
 8004464:	46bd      	mov	sp, r7
 8004466:	b002      	add	sp, #8
 8004468:	bd80      	pop	{r7, pc}
 800446a:	46c0      	nop			; (mov r8, r8)
 800446c:	ffffefff 	.word	0xffffefff

08004470 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b084      	sub	sp, #16
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2241      	movs	r2, #65	; 0x41
 800447e:	5c9b      	ldrb	r3, [r3, r2]
 8004480:	b2db      	uxtb	r3, r3
 8004482:	2b20      	cmp	r3, #32
 8004484:	d139      	bne.n	80044fa <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2240      	movs	r2, #64	; 0x40
 800448a:	5c9b      	ldrb	r3, [r3, r2]
 800448c:	2b01      	cmp	r3, #1
 800448e:	d101      	bne.n	8004494 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004490:	2302      	movs	r3, #2
 8004492:	e033      	b.n	80044fc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2240      	movs	r2, #64	; 0x40
 8004498:	2101      	movs	r1, #1
 800449a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2241      	movs	r2, #65	; 0x41
 80044a0:	2124      	movs	r1, #36	; 0x24
 80044a2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2101      	movs	r1, #1
 80044b0:	438a      	bics	r2, r1
 80044b2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	4a11      	ldr	r2, [pc, #68]	; (8004504 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80044c0:	4013      	ands	r3, r2
 80044c2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	021b      	lsls	r3, r3, #8
 80044c8:	68fa      	ldr	r2, [r7, #12]
 80044ca:	4313      	orrs	r3, r2
 80044cc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	68fa      	ldr	r2, [r7, #12]
 80044d4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	2101      	movs	r1, #1
 80044e2:	430a      	orrs	r2, r1
 80044e4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2241      	movs	r2, #65	; 0x41
 80044ea:	2120      	movs	r1, #32
 80044ec:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2240      	movs	r2, #64	; 0x40
 80044f2:	2100      	movs	r1, #0
 80044f4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80044f6:	2300      	movs	r3, #0
 80044f8:	e000      	b.n	80044fc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80044fa:	2302      	movs	r3, #2
  }
}
 80044fc:	0018      	movs	r0, r3
 80044fe:	46bd      	mov	sp, r7
 8004500:	b004      	add	sp, #16
 8004502:	bd80      	pop	{r7, pc}
 8004504:	fffff0ff 	.word	0xfffff0ff

08004508 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b088      	sub	sp, #32
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d101      	bne.n	800451a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e305      	b.n	8004b26 <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	2201      	movs	r2, #1
 8004520:	4013      	ands	r3, r2
 8004522:	d100      	bne.n	8004526 <HAL_RCC_OscConfig+0x1e>
 8004524:	e08d      	b.n	8004642 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004526:	4bc5      	ldr	r3, [pc, #788]	; (800483c <HAL_RCC_OscConfig+0x334>)
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	220c      	movs	r2, #12
 800452c:	4013      	ands	r3, r2
 800452e:	2b04      	cmp	r3, #4
 8004530:	d00e      	beq.n	8004550 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004532:	4bc2      	ldr	r3, [pc, #776]	; (800483c <HAL_RCC_OscConfig+0x334>)
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	220c      	movs	r2, #12
 8004538:	4013      	ands	r3, r2
 800453a:	2b08      	cmp	r3, #8
 800453c:	d116      	bne.n	800456c <HAL_RCC_OscConfig+0x64>
 800453e:	4bbf      	ldr	r3, [pc, #764]	; (800483c <HAL_RCC_OscConfig+0x334>)
 8004540:	685a      	ldr	r2, [r3, #4]
 8004542:	23c0      	movs	r3, #192	; 0xc0
 8004544:	025b      	lsls	r3, r3, #9
 8004546:	401a      	ands	r2, r3
 8004548:	2380      	movs	r3, #128	; 0x80
 800454a:	025b      	lsls	r3, r3, #9
 800454c:	429a      	cmp	r2, r3
 800454e:	d10d      	bne.n	800456c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004550:	4bba      	ldr	r3, [pc, #744]	; (800483c <HAL_RCC_OscConfig+0x334>)
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	2380      	movs	r3, #128	; 0x80
 8004556:	029b      	lsls	r3, r3, #10
 8004558:	4013      	ands	r3, r2
 800455a:	d100      	bne.n	800455e <HAL_RCC_OscConfig+0x56>
 800455c:	e070      	b.n	8004640 <HAL_RCC_OscConfig+0x138>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d000      	beq.n	8004568 <HAL_RCC_OscConfig+0x60>
 8004566:	e06b      	b.n	8004640 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	e2dc      	b.n	8004b26 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	2b01      	cmp	r3, #1
 8004572:	d107      	bne.n	8004584 <HAL_RCC_OscConfig+0x7c>
 8004574:	4bb1      	ldr	r3, [pc, #708]	; (800483c <HAL_RCC_OscConfig+0x334>)
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	4bb0      	ldr	r3, [pc, #704]	; (800483c <HAL_RCC_OscConfig+0x334>)
 800457a:	2180      	movs	r1, #128	; 0x80
 800457c:	0249      	lsls	r1, r1, #9
 800457e:	430a      	orrs	r2, r1
 8004580:	601a      	str	r2, [r3, #0]
 8004582:	e02f      	b.n	80045e4 <HAL_RCC_OscConfig+0xdc>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d10c      	bne.n	80045a6 <HAL_RCC_OscConfig+0x9e>
 800458c:	4bab      	ldr	r3, [pc, #684]	; (800483c <HAL_RCC_OscConfig+0x334>)
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	4baa      	ldr	r3, [pc, #680]	; (800483c <HAL_RCC_OscConfig+0x334>)
 8004592:	49ab      	ldr	r1, [pc, #684]	; (8004840 <HAL_RCC_OscConfig+0x338>)
 8004594:	400a      	ands	r2, r1
 8004596:	601a      	str	r2, [r3, #0]
 8004598:	4ba8      	ldr	r3, [pc, #672]	; (800483c <HAL_RCC_OscConfig+0x334>)
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	4ba7      	ldr	r3, [pc, #668]	; (800483c <HAL_RCC_OscConfig+0x334>)
 800459e:	49a9      	ldr	r1, [pc, #676]	; (8004844 <HAL_RCC_OscConfig+0x33c>)
 80045a0:	400a      	ands	r2, r1
 80045a2:	601a      	str	r2, [r3, #0]
 80045a4:	e01e      	b.n	80045e4 <HAL_RCC_OscConfig+0xdc>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	2b05      	cmp	r3, #5
 80045ac:	d10e      	bne.n	80045cc <HAL_RCC_OscConfig+0xc4>
 80045ae:	4ba3      	ldr	r3, [pc, #652]	; (800483c <HAL_RCC_OscConfig+0x334>)
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	4ba2      	ldr	r3, [pc, #648]	; (800483c <HAL_RCC_OscConfig+0x334>)
 80045b4:	2180      	movs	r1, #128	; 0x80
 80045b6:	02c9      	lsls	r1, r1, #11
 80045b8:	430a      	orrs	r2, r1
 80045ba:	601a      	str	r2, [r3, #0]
 80045bc:	4b9f      	ldr	r3, [pc, #636]	; (800483c <HAL_RCC_OscConfig+0x334>)
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	4b9e      	ldr	r3, [pc, #632]	; (800483c <HAL_RCC_OscConfig+0x334>)
 80045c2:	2180      	movs	r1, #128	; 0x80
 80045c4:	0249      	lsls	r1, r1, #9
 80045c6:	430a      	orrs	r2, r1
 80045c8:	601a      	str	r2, [r3, #0]
 80045ca:	e00b      	b.n	80045e4 <HAL_RCC_OscConfig+0xdc>
 80045cc:	4b9b      	ldr	r3, [pc, #620]	; (800483c <HAL_RCC_OscConfig+0x334>)
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	4b9a      	ldr	r3, [pc, #616]	; (800483c <HAL_RCC_OscConfig+0x334>)
 80045d2:	499b      	ldr	r1, [pc, #620]	; (8004840 <HAL_RCC_OscConfig+0x338>)
 80045d4:	400a      	ands	r2, r1
 80045d6:	601a      	str	r2, [r3, #0]
 80045d8:	4b98      	ldr	r3, [pc, #608]	; (800483c <HAL_RCC_OscConfig+0x334>)
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	4b97      	ldr	r3, [pc, #604]	; (800483c <HAL_RCC_OscConfig+0x334>)
 80045de:	4999      	ldr	r1, [pc, #612]	; (8004844 <HAL_RCC_OscConfig+0x33c>)
 80045e0:	400a      	ands	r2, r1
 80045e2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d014      	beq.n	8004616 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045ec:	f7fe f894 	bl	8002718 <HAL_GetTick>
 80045f0:	0003      	movs	r3, r0
 80045f2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045f4:	e008      	b.n	8004608 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045f6:	f7fe f88f 	bl	8002718 <HAL_GetTick>
 80045fa:	0002      	movs	r2, r0
 80045fc:	69bb      	ldr	r3, [r7, #24]
 80045fe:	1ad3      	subs	r3, r2, r3
 8004600:	2b64      	cmp	r3, #100	; 0x64
 8004602:	d901      	bls.n	8004608 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8004604:	2303      	movs	r3, #3
 8004606:	e28e      	b.n	8004b26 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004608:	4b8c      	ldr	r3, [pc, #560]	; (800483c <HAL_RCC_OscConfig+0x334>)
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	2380      	movs	r3, #128	; 0x80
 800460e:	029b      	lsls	r3, r3, #10
 8004610:	4013      	ands	r3, r2
 8004612:	d0f0      	beq.n	80045f6 <HAL_RCC_OscConfig+0xee>
 8004614:	e015      	b.n	8004642 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004616:	f7fe f87f 	bl	8002718 <HAL_GetTick>
 800461a:	0003      	movs	r3, r0
 800461c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800461e:	e008      	b.n	8004632 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004620:	f7fe f87a 	bl	8002718 <HAL_GetTick>
 8004624:	0002      	movs	r2, r0
 8004626:	69bb      	ldr	r3, [r7, #24]
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	2b64      	cmp	r3, #100	; 0x64
 800462c:	d901      	bls.n	8004632 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	e279      	b.n	8004b26 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004632:	4b82      	ldr	r3, [pc, #520]	; (800483c <HAL_RCC_OscConfig+0x334>)
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	2380      	movs	r3, #128	; 0x80
 8004638:	029b      	lsls	r3, r3, #10
 800463a:	4013      	ands	r3, r2
 800463c:	d1f0      	bne.n	8004620 <HAL_RCC_OscConfig+0x118>
 800463e:	e000      	b.n	8004642 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004640:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	2202      	movs	r2, #2
 8004648:	4013      	ands	r3, r2
 800464a:	d100      	bne.n	800464e <HAL_RCC_OscConfig+0x146>
 800464c:	e06c      	b.n	8004728 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800464e:	4b7b      	ldr	r3, [pc, #492]	; (800483c <HAL_RCC_OscConfig+0x334>)
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	220c      	movs	r2, #12
 8004654:	4013      	ands	r3, r2
 8004656:	d00e      	beq.n	8004676 <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004658:	4b78      	ldr	r3, [pc, #480]	; (800483c <HAL_RCC_OscConfig+0x334>)
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	220c      	movs	r2, #12
 800465e:	4013      	ands	r3, r2
 8004660:	2b08      	cmp	r3, #8
 8004662:	d11f      	bne.n	80046a4 <HAL_RCC_OscConfig+0x19c>
 8004664:	4b75      	ldr	r3, [pc, #468]	; (800483c <HAL_RCC_OscConfig+0x334>)
 8004666:	685a      	ldr	r2, [r3, #4]
 8004668:	23c0      	movs	r3, #192	; 0xc0
 800466a:	025b      	lsls	r3, r3, #9
 800466c:	401a      	ands	r2, r3
 800466e:	2380      	movs	r3, #128	; 0x80
 8004670:	021b      	lsls	r3, r3, #8
 8004672:	429a      	cmp	r2, r3
 8004674:	d116      	bne.n	80046a4 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004676:	4b71      	ldr	r3, [pc, #452]	; (800483c <HAL_RCC_OscConfig+0x334>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	2202      	movs	r2, #2
 800467c:	4013      	ands	r3, r2
 800467e:	d005      	beq.n	800468c <HAL_RCC_OscConfig+0x184>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	2b01      	cmp	r3, #1
 8004686:	d001      	beq.n	800468c <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	e24c      	b.n	8004b26 <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800468c:	4b6b      	ldr	r3, [pc, #428]	; (800483c <HAL_RCC_OscConfig+0x334>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	22f8      	movs	r2, #248	; 0xf8
 8004692:	4393      	bics	r3, r2
 8004694:	0019      	movs	r1, r3
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	691b      	ldr	r3, [r3, #16]
 800469a:	00da      	lsls	r2, r3, #3
 800469c:	4b67      	ldr	r3, [pc, #412]	; (800483c <HAL_RCC_OscConfig+0x334>)
 800469e:	430a      	orrs	r2, r1
 80046a0:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046a2:	e041      	b.n	8004728 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d024      	beq.n	80046f6 <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046ac:	4b63      	ldr	r3, [pc, #396]	; (800483c <HAL_RCC_OscConfig+0x334>)
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	4b62      	ldr	r3, [pc, #392]	; (800483c <HAL_RCC_OscConfig+0x334>)
 80046b2:	2101      	movs	r1, #1
 80046b4:	430a      	orrs	r2, r1
 80046b6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046b8:	f7fe f82e 	bl	8002718 <HAL_GetTick>
 80046bc:	0003      	movs	r3, r0
 80046be:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046c0:	e008      	b.n	80046d4 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046c2:	f7fe f829 	bl	8002718 <HAL_GetTick>
 80046c6:	0002      	movs	r2, r0
 80046c8:	69bb      	ldr	r3, [r7, #24]
 80046ca:	1ad3      	subs	r3, r2, r3
 80046cc:	2b02      	cmp	r3, #2
 80046ce:	d901      	bls.n	80046d4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80046d0:	2303      	movs	r3, #3
 80046d2:	e228      	b.n	8004b26 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046d4:	4b59      	ldr	r3, [pc, #356]	; (800483c <HAL_RCC_OscConfig+0x334>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	2202      	movs	r2, #2
 80046da:	4013      	ands	r3, r2
 80046dc:	d0f1      	beq.n	80046c2 <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046de:	4b57      	ldr	r3, [pc, #348]	; (800483c <HAL_RCC_OscConfig+0x334>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	22f8      	movs	r2, #248	; 0xf8
 80046e4:	4393      	bics	r3, r2
 80046e6:	0019      	movs	r1, r3
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	691b      	ldr	r3, [r3, #16]
 80046ec:	00da      	lsls	r2, r3, #3
 80046ee:	4b53      	ldr	r3, [pc, #332]	; (800483c <HAL_RCC_OscConfig+0x334>)
 80046f0:	430a      	orrs	r2, r1
 80046f2:	601a      	str	r2, [r3, #0]
 80046f4:	e018      	b.n	8004728 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046f6:	4b51      	ldr	r3, [pc, #324]	; (800483c <HAL_RCC_OscConfig+0x334>)
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	4b50      	ldr	r3, [pc, #320]	; (800483c <HAL_RCC_OscConfig+0x334>)
 80046fc:	2101      	movs	r1, #1
 80046fe:	438a      	bics	r2, r1
 8004700:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004702:	f7fe f809 	bl	8002718 <HAL_GetTick>
 8004706:	0003      	movs	r3, r0
 8004708:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800470a:	e008      	b.n	800471e <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800470c:	f7fe f804 	bl	8002718 <HAL_GetTick>
 8004710:	0002      	movs	r2, r0
 8004712:	69bb      	ldr	r3, [r7, #24]
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	2b02      	cmp	r3, #2
 8004718:	d901      	bls.n	800471e <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e203      	b.n	8004b26 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800471e:	4b47      	ldr	r3, [pc, #284]	; (800483c <HAL_RCC_OscConfig+0x334>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	2202      	movs	r2, #2
 8004724:	4013      	ands	r3, r2
 8004726:	d1f1      	bne.n	800470c <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2208      	movs	r2, #8
 800472e:	4013      	ands	r3, r2
 8004730:	d036      	beq.n	80047a0 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	69db      	ldr	r3, [r3, #28]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d019      	beq.n	800476e <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800473a:	4b40      	ldr	r3, [pc, #256]	; (800483c <HAL_RCC_OscConfig+0x334>)
 800473c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800473e:	4b3f      	ldr	r3, [pc, #252]	; (800483c <HAL_RCC_OscConfig+0x334>)
 8004740:	2101      	movs	r1, #1
 8004742:	430a      	orrs	r2, r1
 8004744:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004746:	f7fd ffe7 	bl	8002718 <HAL_GetTick>
 800474a:	0003      	movs	r3, r0
 800474c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800474e:	e008      	b.n	8004762 <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004750:	f7fd ffe2 	bl	8002718 <HAL_GetTick>
 8004754:	0002      	movs	r2, r0
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	2b02      	cmp	r3, #2
 800475c:	d901      	bls.n	8004762 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	e1e1      	b.n	8004b26 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004762:	4b36      	ldr	r3, [pc, #216]	; (800483c <HAL_RCC_OscConfig+0x334>)
 8004764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004766:	2202      	movs	r2, #2
 8004768:	4013      	ands	r3, r2
 800476a:	d0f1      	beq.n	8004750 <HAL_RCC_OscConfig+0x248>
 800476c:	e018      	b.n	80047a0 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800476e:	4b33      	ldr	r3, [pc, #204]	; (800483c <HAL_RCC_OscConfig+0x334>)
 8004770:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004772:	4b32      	ldr	r3, [pc, #200]	; (800483c <HAL_RCC_OscConfig+0x334>)
 8004774:	2101      	movs	r1, #1
 8004776:	438a      	bics	r2, r1
 8004778:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800477a:	f7fd ffcd 	bl	8002718 <HAL_GetTick>
 800477e:	0003      	movs	r3, r0
 8004780:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004782:	e008      	b.n	8004796 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004784:	f7fd ffc8 	bl	8002718 <HAL_GetTick>
 8004788:	0002      	movs	r2, r0
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	2b02      	cmp	r3, #2
 8004790:	d901      	bls.n	8004796 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e1c7      	b.n	8004b26 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004796:	4b29      	ldr	r3, [pc, #164]	; (800483c <HAL_RCC_OscConfig+0x334>)
 8004798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479a:	2202      	movs	r2, #2
 800479c:	4013      	ands	r3, r2
 800479e:	d1f1      	bne.n	8004784 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	2204      	movs	r2, #4
 80047a6:	4013      	ands	r3, r2
 80047a8:	d100      	bne.n	80047ac <HAL_RCC_OscConfig+0x2a4>
 80047aa:	e0b5      	b.n	8004918 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047ac:	201f      	movs	r0, #31
 80047ae:	183b      	adds	r3, r7, r0
 80047b0:	2200      	movs	r2, #0
 80047b2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047b4:	4b21      	ldr	r3, [pc, #132]	; (800483c <HAL_RCC_OscConfig+0x334>)
 80047b6:	69da      	ldr	r2, [r3, #28]
 80047b8:	2380      	movs	r3, #128	; 0x80
 80047ba:	055b      	lsls	r3, r3, #21
 80047bc:	4013      	ands	r3, r2
 80047be:	d110      	bne.n	80047e2 <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047c0:	4b1e      	ldr	r3, [pc, #120]	; (800483c <HAL_RCC_OscConfig+0x334>)
 80047c2:	69da      	ldr	r2, [r3, #28]
 80047c4:	4b1d      	ldr	r3, [pc, #116]	; (800483c <HAL_RCC_OscConfig+0x334>)
 80047c6:	2180      	movs	r1, #128	; 0x80
 80047c8:	0549      	lsls	r1, r1, #21
 80047ca:	430a      	orrs	r2, r1
 80047cc:	61da      	str	r2, [r3, #28]
 80047ce:	4b1b      	ldr	r3, [pc, #108]	; (800483c <HAL_RCC_OscConfig+0x334>)
 80047d0:	69da      	ldr	r2, [r3, #28]
 80047d2:	2380      	movs	r3, #128	; 0x80
 80047d4:	055b      	lsls	r3, r3, #21
 80047d6:	4013      	ands	r3, r2
 80047d8:	60fb      	str	r3, [r7, #12]
 80047da:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80047dc:	183b      	adds	r3, r7, r0
 80047de:	2201      	movs	r2, #1
 80047e0:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047e2:	4b19      	ldr	r3, [pc, #100]	; (8004848 <HAL_RCC_OscConfig+0x340>)
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	2380      	movs	r3, #128	; 0x80
 80047e8:	005b      	lsls	r3, r3, #1
 80047ea:	4013      	ands	r3, r2
 80047ec:	d11a      	bne.n	8004824 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047ee:	4b16      	ldr	r3, [pc, #88]	; (8004848 <HAL_RCC_OscConfig+0x340>)
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	4b15      	ldr	r3, [pc, #84]	; (8004848 <HAL_RCC_OscConfig+0x340>)
 80047f4:	2180      	movs	r1, #128	; 0x80
 80047f6:	0049      	lsls	r1, r1, #1
 80047f8:	430a      	orrs	r2, r1
 80047fa:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047fc:	f7fd ff8c 	bl	8002718 <HAL_GetTick>
 8004800:	0003      	movs	r3, r0
 8004802:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004804:	e008      	b.n	8004818 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004806:	f7fd ff87 	bl	8002718 <HAL_GetTick>
 800480a:	0002      	movs	r2, r0
 800480c:	69bb      	ldr	r3, [r7, #24]
 800480e:	1ad3      	subs	r3, r2, r3
 8004810:	2b64      	cmp	r3, #100	; 0x64
 8004812:	d901      	bls.n	8004818 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 8004814:	2303      	movs	r3, #3
 8004816:	e186      	b.n	8004b26 <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004818:	4b0b      	ldr	r3, [pc, #44]	; (8004848 <HAL_RCC_OscConfig+0x340>)
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	2380      	movs	r3, #128	; 0x80
 800481e:	005b      	lsls	r3, r3, #1
 8004820:	4013      	ands	r3, r2
 8004822:	d0f0      	beq.n	8004806 <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	2b01      	cmp	r3, #1
 800482a:	d10f      	bne.n	800484c <HAL_RCC_OscConfig+0x344>
 800482c:	4b03      	ldr	r3, [pc, #12]	; (800483c <HAL_RCC_OscConfig+0x334>)
 800482e:	6a1a      	ldr	r2, [r3, #32]
 8004830:	4b02      	ldr	r3, [pc, #8]	; (800483c <HAL_RCC_OscConfig+0x334>)
 8004832:	2101      	movs	r1, #1
 8004834:	430a      	orrs	r2, r1
 8004836:	621a      	str	r2, [r3, #32]
 8004838:	e036      	b.n	80048a8 <HAL_RCC_OscConfig+0x3a0>
 800483a:	46c0      	nop			; (mov r8, r8)
 800483c:	40021000 	.word	0x40021000
 8004840:	fffeffff 	.word	0xfffeffff
 8004844:	fffbffff 	.word	0xfffbffff
 8004848:	40007000 	.word	0x40007000
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d10c      	bne.n	800486e <HAL_RCC_OscConfig+0x366>
 8004854:	4bb6      	ldr	r3, [pc, #728]	; (8004b30 <HAL_RCC_OscConfig+0x628>)
 8004856:	6a1a      	ldr	r2, [r3, #32]
 8004858:	4bb5      	ldr	r3, [pc, #724]	; (8004b30 <HAL_RCC_OscConfig+0x628>)
 800485a:	2101      	movs	r1, #1
 800485c:	438a      	bics	r2, r1
 800485e:	621a      	str	r2, [r3, #32]
 8004860:	4bb3      	ldr	r3, [pc, #716]	; (8004b30 <HAL_RCC_OscConfig+0x628>)
 8004862:	6a1a      	ldr	r2, [r3, #32]
 8004864:	4bb2      	ldr	r3, [pc, #712]	; (8004b30 <HAL_RCC_OscConfig+0x628>)
 8004866:	2104      	movs	r1, #4
 8004868:	438a      	bics	r2, r1
 800486a:	621a      	str	r2, [r3, #32]
 800486c:	e01c      	b.n	80048a8 <HAL_RCC_OscConfig+0x3a0>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	2b05      	cmp	r3, #5
 8004874:	d10c      	bne.n	8004890 <HAL_RCC_OscConfig+0x388>
 8004876:	4bae      	ldr	r3, [pc, #696]	; (8004b30 <HAL_RCC_OscConfig+0x628>)
 8004878:	6a1a      	ldr	r2, [r3, #32]
 800487a:	4bad      	ldr	r3, [pc, #692]	; (8004b30 <HAL_RCC_OscConfig+0x628>)
 800487c:	2104      	movs	r1, #4
 800487e:	430a      	orrs	r2, r1
 8004880:	621a      	str	r2, [r3, #32]
 8004882:	4bab      	ldr	r3, [pc, #684]	; (8004b30 <HAL_RCC_OscConfig+0x628>)
 8004884:	6a1a      	ldr	r2, [r3, #32]
 8004886:	4baa      	ldr	r3, [pc, #680]	; (8004b30 <HAL_RCC_OscConfig+0x628>)
 8004888:	2101      	movs	r1, #1
 800488a:	430a      	orrs	r2, r1
 800488c:	621a      	str	r2, [r3, #32]
 800488e:	e00b      	b.n	80048a8 <HAL_RCC_OscConfig+0x3a0>
 8004890:	4ba7      	ldr	r3, [pc, #668]	; (8004b30 <HAL_RCC_OscConfig+0x628>)
 8004892:	6a1a      	ldr	r2, [r3, #32]
 8004894:	4ba6      	ldr	r3, [pc, #664]	; (8004b30 <HAL_RCC_OscConfig+0x628>)
 8004896:	2101      	movs	r1, #1
 8004898:	438a      	bics	r2, r1
 800489a:	621a      	str	r2, [r3, #32]
 800489c:	4ba4      	ldr	r3, [pc, #656]	; (8004b30 <HAL_RCC_OscConfig+0x628>)
 800489e:	6a1a      	ldr	r2, [r3, #32]
 80048a0:	4ba3      	ldr	r3, [pc, #652]	; (8004b30 <HAL_RCC_OscConfig+0x628>)
 80048a2:	2104      	movs	r1, #4
 80048a4:	438a      	bics	r2, r1
 80048a6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d014      	beq.n	80048da <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048b0:	f7fd ff32 	bl	8002718 <HAL_GetTick>
 80048b4:	0003      	movs	r3, r0
 80048b6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048b8:	e009      	b.n	80048ce <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048ba:	f7fd ff2d 	bl	8002718 <HAL_GetTick>
 80048be:	0002      	movs	r2, r0
 80048c0:	69bb      	ldr	r3, [r7, #24]
 80048c2:	1ad3      	subs	r3, r2, r3
 80048c4:	4a9b      	ldr	r2, [pc, #620]	; (8004b34 <HAL_RCC_OscConfig+0x62c>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d901      	bls.n	80048ce <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	e12b      	b.n	8004b26 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048ce:	4b98      	ldr	r3, [pc, #608]	; (8004b30 <HAL_RCC_OscConfig+0x628>)
 80048d0:	6a1b      	ldr	r3, [r3, #32]
 80048d2:	2202      	movs	r2, #2
 80048d4:	4013      	ands	r3, r2
 80048d6:	d0f0      	beq.n	80048ba <HAL_RCC_OscConfig+0x3b2>
 80048d8:	e013      	b.n	8004902 <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048da:	f7fd ff1d 	bl	8002718 <HAL_GetTick>
 80048de:	0003      	movs	r3, r0
 80048e0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048e2:	e009      	b.n	80048f8 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048e4:	f7fd ff18 	bl	8002718 <HAL_GetTick>
 80048e8:	0002      	movs	r2, r0
 80048ea:	69bb      	ldr	r3, [r7, #24]
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	4a91      	ldr	r2, [pc, #580]	; (8004b34 <HAL_RCC_OscConfig+0x62c>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d901      	bls.n	80048f8 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 80048f4:	2303      	movs	r3, #3
 80048f6:	e116      	b.n	8004b26 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048f8:	4b8d      	ldr	r3, [pc, #564]	; (8004b30 <HAL_RCC_OscConfig+0x628>)
 80048fa:	6a1b      	ldr	r3, [r3, #32]
 80048fc:	2202      	movs	r2, #2
 80048fe:	4013      	ands	r3, r2
 8004900:	d1f0      	bne.n	80048e4 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004902:	231f      	movs	r3, #31
 8004904:	18fb      	adds	r3, r7, r3
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	2b01      	cmp	r3, #1
 800490a:	d105      	bne.n	8004918 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800490c:	4b88      	ldr	r3, [pc, #544]	; (8004b30 <HAL_RCC_OscConfig+0x628>)
 800490e:	69da      	ldr	r2, [r3, #28]
 8004910:	4b87      	ldr	r3, [pc, #540]	; (8004b30 <HAL_RCC_OscConfig+0x628>)
 8004912:	4989      	ldr	r1, [pc, #548]	; (8004b38 <HAL_RCC_OscConfig+0x630>)
 8004914:	400a      	ands	r2, r1
 8004916:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	2210      	movs	r2, #16
 800491e:	4013      	ands	r3, r2
 8004920:	d063      	beq.n	80049ea <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	695b      	ldr	r3, [r3, #20]
 8004926:	2b01      	cmp	r3, #1
 8004928:	d12a      	bne.n	8004980 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800492a:	4b81      	ldr	r3, [pc, #516]	; (8004b30 <HAL_RCC_OscConfig+0x628>)
 800492c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800492e:	4b80      	ldr	r3, [pc, #512]	; (8004b30 <HAL_RCC_OscConfig+0x628>)
 8004930:	2104      	movs	r1, #4
 8004932:	430a      	orrs	r2, r1
 8004934:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8004936:	4b7e      	ldr	r3, [pc, #504]	; (8004b30 <HAL_RCC_OscConfig+0x628>)
 8004938:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800493a:	4b7d      	ldr	r3, [pc, #500]	; (8004b30 <HAL_RCC_OscConfig+0x628>)
 800493c:	2101      	movs	r1, #1
 800493e:	430a      	orrs	r2, r1
 8004940:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004942:	f7fd fee9 	bl	8002718 <HAL_GetTick>
 8004946:	0003      	movs	r3, r0
 8004948:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800494a:	e008      	b.n	800495e <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800494c:	f7fd fee4 	bl	8002718 <HAL_GetTick>
 8004950:	0002      	movs	r2, r0
 8004952:	69bb      	ldr	r3, [r7, #24]
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	2b02      	cmp	r3, #2
 8004958:	d901      	bls.n	800495e <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 800495a:	2303      	movs	r3, #3
 800495c:	e0e3      	b.n	8004b26 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800495e:	4b74      	ldr	r3, [pc, #464]	; (8004b30 <HAL_RCC_OscConfig+0x628>)
 8004960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004962:	2202      	movs	r2, #2
 8004964:	4013      	ands	r3, r2
 8004966:	d0f1      	beq.n	800494c <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004968:	4b71      	ldr	r3, [pc, #452]	; (8004b30 <HAL_RCC_OscConfig+0x628>)
 800496a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800496c:	22f8      	movs	r2, #248	; 0xf8
 800496e:	4393      	bics	r3, r2
 8004970:	0019      	movs	r1, r3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	699b      	ldr	r3, [r3, #24]
 8004976:	00da      	lsls	r2, r3, #3
 8004978:	4b6d      	ldr	r3, [pc, #436]	; (8004b30 <HAL_RCC_OscConfig+0x628>)
 800497a:	430a      	orrs	r2, r1
 800497c:	635a      	str	r2, [r3, #52]	; 0x34
 800497e:	e034      	b.n	80049ea <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	695b      	ldr	r3, [r3, #20]
 8004984:	3305      	adds	r3, #5
 8004986:	d111      	bne.n	80049ac <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004988:	4b69      	ldr	r3, [pc, #420]	; (8004b30 <HAL_RCC_OscConfig+0x628>)
 800498a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800498c:	4b68      	ldr	r3, [pc, #416]	; (8004b30 <HAL_RCC_OscConfig+0x628>)
 800498e:	2104      	movs	r1, #4
 8004990:	438a      	bics	r2, r1
 8004992:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004994:	4b66      	ldr	r3, [pc, #408]	; (8004b30 <HAL_RCC_OscConfig+0x628>)
 8004996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004998:	22f8      	movs	r2, #248	; 0xf8
 800499a:	4393      	bics	r3, r2
 800499c:	0019      	movs	r1, r3
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	699b      	ldr	r3, [r3, #24]
 80049a2:	00da      	lsls	r2, r3, #3
 80049a4:	4b62      	ldr	r3, [pc, #392]	; (8004b30 <HAL_RCC_OscConfig+0x628>)
 80049a6:	430a      	orrs	r2, r1
 80049a8:	635a      	str	r2, [r3, #52]	; 0x34
 80049aa:	e01e      	b.n	80049ea <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80049ac:	4b60      	ldr	r3, [pc, #384]	; (8004b30 <HAL_RCC_OscConfig+0x628>)
 80049ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049b0:	4b5f      	ldr	r3, [pc, #380]	; (8004b30 <HAL_RCC_OscConfig+0x628>)
 80049b2:	2104      	movs	r1, #4
 80049b4:	430a      	orrs	r2, r1
 80049b6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80049b8:	4b5d      	ldr	r3, [pc, #372]	; (8004b30 <HAL_RCC_OscConfig+0x628>)
 80049ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049bc:	4b5c      	ldr	r3, [pc, #368]	; (8004b30 <HAL_RCC_OscConfig+0x628>)
 80049be:	2101      	movs	r1, #1
 80049c0:	438a      	bics	r2, r1
 80049c2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049c4:	f7fd fea8 	bl	8002718 <HAL_GetTick>
 80049c8:	0003      	movs	r3, r0
 80049ca:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80049cc:	e008      	b.n	80049e0 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80049ce:	f7fd fea3 	bl	8002718 <HAL_GetTick>
 80049d2:	0002      	movs	r2, r0
 80049d4:	69bb      	ldr	r3, [r7, #24]
 80049d6:	1ad3      	subs	r3, r2, r3
 80049d8:	2b02      	cmp	r3, #2
 80049da:	d901      	bls.n	80049e0 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 80049dc:	2303      	movs	r3, #3
 80049de:	e0a2      	b.n	8004b26 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80049e0:	4b53      	ldr	r3, [pc, #332]	; (8004b30 <HAL_RCC_OscConfig+0x628>)
 80049e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049e4:	2202      	movs	r2, #2
 80049e6:	4013      	ands	r3, r2
 80049e8:	d1f1      	bne.n	80049ce <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a1b      	ldr	r3, [r3, #32]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d100      	bne.n	80049f4 <HAL_RCC_OscConfig+0x4ec>
 80049f2:	e097      	b.n	8004b24 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80049f4:	4b4e      	ldr	r3, [pc, #312]	; (8004b30 <HAL_RCC_OscConfig+0x628>)
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	220c      	movs	r2, #12
 80049fa:	4013      	ands	r3, r2
 80049fc:	2b08      	cmp	r3, #8
 80049fe:	d100      	bne.n	8004a02 <HAL_RCC_OscConfig+0x4fa>
 8004a00:	e06b      	b.n	8004ada <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a1b      	ldr	r3, [r3, #32]
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	d14c      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a0a:	4b49      	ldr	r3, [pc, #292]	; (8004b30 <HAL_RCC_OscConfig+0x628>)
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	4b48      	ldr	r3, [pc, #288]	; (8004b30 <HAL_RCC_OscConfig+0x628>)
 8004a10:	494a      	ldr	r1, [pc, #296]	; (8004b3c <HAL_RCC_OscConfig+0x634>)
 8004a12:	400a      	ands	r2, r1
 8004a14:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a16:	f7fd fe7f 	bl	8002718 <HAL_GetTick>
 8004a1a:	0003      	movs	r3, r0
 8004a1c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a1e:	e008      	b.n	8004a32 <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a20:	f7fd fe7a 	bl	8002718 <HAL_GetTick>
 8004a24:	0002      	movs	r2, r0
 8004a26:	69bb      	ldr	r3, [r7, #24]
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	2b02      	cmp	r3, #2
 8004a2c:	d901      	bls.n	8004a32 <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8004a2e:	2303      	movs	r3, #3
 8004a30:	e079      	b.n	8004b26 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a32:	4b3f      	ldr	r3, [pc, #252]	; (8004b30 <HAL_RCC_OscConfig+0x628>)
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	2380      	movs	r3, #128	; 0x80
 8004a38:	049b      	lsls	r3, r3, #18
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	d1f0      	bne.n	8004a20 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a3e:	4b3c      	ldr	r3, [pc, #240]	; (8004b30 <HAL_RCC_OscConfig+0x628>)
 8004a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a42:	220f      	movs	r2, #15
 8004a44:	4393      	bics	r3, r2
 8004a46:	0019      	movs	r1, r3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a4c:	4b38      	ldr	r3, [pc, #224]	; (8004b30 <HAL_RCC_OscConfig+0x628>)
 8004a4e:	430a      	orrs	r2, r1
 8004a50:	62da      	str	r2, [r3, #44]	; 0x2c
 8004a52:	4b37      	ldr	r3, [pc, #220]	; (8004b30 <HAL_RCC_OscConfig+0x628>)
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	4a3a      	ldr	r2, [pc, #232]	; (8004b40 <HAL_RCC_OscConfig+0x638>)
 8004a58:	4013      	ands	r3, r2
 8004a5a:	0019      	movs	r1, r3
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a64:	431a      	orrs	r2, r3
 8004a66:	4b32      	ldr	r3, [pc, #200]	; (8004b30 <HAL_RCC_OscConfig+0x628>)
 8004a68:	430a      	orrs	r2, r1
 8004a6a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a6c:	4b30      	ldr	r3, [pc, #192]	; (8004b30 <HAL_RCC_OscConfig+0x628>)
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	4b2f      	ldr	r3, [pc, #188]	; (8004b30 <HAL_RCC_OscConfig+0x628>)
 8004a72:	2180      	movs	r1, #128	; 0x80
 8004a74:	0449      	lsls	r1, r1, #17
 8004a76:	430a      	orrs	r2, r1
 8004a78:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a7a:	f7fd fe4d 	bl	8002718 <HAL_GetTick>
 8004a7e:	0003      	movs	r3, r0
 8004a80:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a82:	e008      	b.n	8004a96 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a84:	f7fd fe48 	bl	8002718 <HAL_GetTick>
 8004a88:	0002      	movs	r2, r0
 8004a8a:	69bb      	ldr	r3, [r7, #24]
 8004a8c:	1ad3      	subs	r3, r2, r3
 8004a8e:	2b02      	cmp	r3, #2
 8004a90:	d901      	bls.n	8004a96 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8004a92:	2303      	movs	r3, #3
 8004a94:	e047      	b.n	8004b26 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a96:	4b26      	ldr	r3, [pc, #152]	; (8004b30 <HAL_RCC_OscConfig+0x628>)
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	2380      	movs	r3, #128	; 0x80
 8004a9c:	049b      	lsls	r3, r3, #18
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	d0f0      	beq.n	8004a84 <HAL_RCC_OscConfig+0x57c>
 8004aa2:	e03f      	b.n	8004b24 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004aa4:	4b22      	ldr	r3, [pc, #136]	; (8004b30 <HAL_RCC_OscConfig+0x628>)
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	4b21      	ldr	r3, [pc, #132]	; (8004b30 <HAL_RCC_OscConfig+0x628>)
 8004aaa:	4924      	ldr	r1, [pc, #144]	; (8004b3c <HAL_RCC_OscConfig+0x634>)
 8004aac:	400a      	ands	r2, r1
 8004aae:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ab0:	f7fd fe32 	bl	8002718 <HAL_GetTick>
 8004ab4:	0003      	movs	r3, r0
 8004ab6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ab8:	e008      	b.n	8004acc <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004aba:	f7fd fe2d 	bl	8002718 <HAL_GetTick>
 8004abe:	0002      	movs	r2, r0
 8004ac0:	69bb      	ldr	r3, [r7, #24]
 8004ac2:	1ad3      	subs	r3, r2, r3
 8004ac4:	2b02      	cmp	r3, #2
 8004ac6:	d901      	bls.n	8004acc <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8004ac8:	2303      	movs	r3, #3
 8004aca:	e02c      	b.n	8004b26 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004acc:	4b18      	ldr	r3, [pc, #96]	; (8004b30 <HAL_RCC_OscConfig+0x628>)
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	2380      	movs	r3, #128	; 0x80
 8004ad2:	049b      	lsls	r3, r3, #18
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	d1f0      	bne.n	8004aba <HAL_RCC_OscConfig+0x5b2>
 8004ad8:	e024      	b.n	8004b24 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a1b      	ldr	r3, [r3, #32]
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d101      	bne.n	8004ae6 <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e01f      	b.n	8004b26 <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8004ae6:	4b12      	ldr	r3, [pc, #72]	; (8004b30 <HAL_RCC_OscConfig+0x628>)
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8004aec:	4b10      	ldr	r3, [pc, #64]	; (8004b30 <HAL_RCC_OscConfig+0x628>)
 8004aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af0:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004af2:	697a      	ldr	r2, [r7, #20]
 8004af4:	23c0      	movs	r3, #192	; 0xc0
 8004af6:	025b      	lsls	r3, r3, #9
 8004af8:	401a      	ands	r2, r3
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d10e      	bne.n	8004b20 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	220f      	movs	r2, #15
 8004b06:	401a      	ands	r2, r3
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d107      	bne.n	8004b20 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004b10:	697a      	ldr	r2, [r7, #20]
 8004b12:	23f0      	movs	r3, #240	; 0xf0
 8004b14:	039b      	lsls	r3, r3, #14
 8004b16:	401a      	ands	r2, r3
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d001      	beq.n	8004b24 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e000      	b.n	8004b26 <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8004b24:	2300      	movs	r3, #0
}
 8004b26:	0018      	movs	r0, r3
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	b008      	add	sp, #32
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	46c0      	nop			; (mov r8, r8)
 8004b30:	40021000 	.word	0x40021000
 8004b34:	00001388 	.word	0x00001388
 8004b38:	efffffff 	.word	0xefffffff
 8004b3c:	feffffff 	.word	0xfeffffff
 8004b40:	ffc27fff 	.word	0xffc27fff

08004b44 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b084      	sub	sp, #16
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d101      	bne.n	8004b58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	e0b3      	b.n	8004cc0 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b58:	4b5b      	ldr	r3, [pc, #364]	; (8004cc8 <HAL_RCC_ClockConfig+0x184>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	4013      	ands	r3, r2
 8004b60:	683a      	ldr	r2, [r7, #0]
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d911      	bls.n	8004b8a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b66:	4b58      	ldr	r3, [pc, #352]	; (8004cc8 <HAL_RCC_ClockConfig+0x184>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	4393      	bics	r3, r2
 8004b6e:	0019      	movs	r1, r3
 8004b70:	4b55      	ldr	r3, [pc, #340]	; (8004cc8 <HAL_RCC_ClockConfig+0x184>)
 8004b72:	683a      	ldr	r2, [r7, #0]
 8004b74:	430a      	orrs	r2, r1
 8004b76:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b78:	4b53      	ldr	r3, [pc, #332]	; (8004cc8 <HAL_RCC_ClockConfig+0x184>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	4013      	ands	r3, r2
 8004b80:	683a      	ldr	r2, [r7, #0]
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d001      	beq.n	8004b8a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e09a      	b.n	8004cc0 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	2202      	movs	r2, #2
 8004b90:	4013      	ands	r3, r2
 8004b92:	d015      	beq.n	8004bc0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	2204      	movs	r2, #4
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	d006      	beq.n	8004bac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004b9e:	4b4b      	ldr	r3, [pc, #300]	; (8004ccc <HAL_RCC_ClockConfig+0x188>)
 8004ba0:	685a      	ldr	r2, [r3, #4]
 8004ba2:	4b4a      	ldr	r3, [pc, #296]	; (8004ccc <HAL_RCC_ClockConfig+0x188>)
 8004ba4:	21e0      	movs	r1, #224	; 0xe0
 8004ba6:	00c9      	lsls	r1, r1, #3
 8004ba8:	430a      	orrs	r2, r1
 8004baa:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bac:	4b47      	ldr	r3, [pc, #284]	; (8004ccc <HAL_RCC_ClockConfig+0x188>)
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	22f0      	movs	r2, #240	; 0xf0
 8004bb2:	4393      	bics	r3, r2
 8004bb4:	0019      	movs	r1, r3
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	689a      	ldr	r2, [r3, #8]
 8004bba:	4b44      	ldr	r3, [pc, #272]	; (8004ccc <HAL_RCC_ClockConfig+0x188>)
 8004bbc:	430a      	orrs	r2, r1
 8004bbe:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	d040      	beq.n	8004c4c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d107      	bne.n	8004be2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bd2:	4b3e      	ldr	r3, [pc, #248]	; (8004ccc <HAL_RCC_ClockConfig+0x188>)
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	2380      	movs	r3, #128	; 0x80
 8004bd8:	029b      	lsls	r3, r3, #10
 8004bda:	4013      	ands	r3, r2
 8004bdc:	d114      	bne.n	8004c08 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e06e      	b.n	8004cc0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	2b02      	cmp	r3, #2
 8004be8:	d107      	bne.n	8004bfa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bea:	4b38      	ldr	r3, [pc, #224]	; (8004ccc <HAL_RCC_ClockConfig+0x188>)
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	2380      	movs	r3, #128	; 0x80
 8004bf0:	049b      	lsls	r3, r3, #18
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	d108      	bne.n	8004c08 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e062      	b.n	8004cc0 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bfa:	4b34      	ldr	r3, [pc, #208]	; (8004ccc <HAL_RCC_ClockConfig+0x188>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	2202      	movs	r2, #2
 8004c00:	4013      	ands	r3, r2
 8004c02:	d101      	bne.n	8004c08 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	e05b      	b.n	8004cc0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c08:	4b30      	ldr	r3, [pc, #192]	; (8004ccc <HAL_RCC_ClockConfig+0x188>)
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	2203      	movs	r2, #3
 8004c0e:	4393      	bics	r3, r2
 8004c10:	0019      	movs	r1, r3
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	685a      	ldr	r2, [r3, #4]
 8004c16:	4b2d      	ldr	r3, [pc, #180]	; (8004ccc <HAL_RCC_ClockConfig+0x188>)
 8004c18:	430a      	orrs	r2, r1
 8004c1a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c1c:	f7fd fd7c 	bl	8002718 <HAL_GetTick>
 8004c20:	0003      	movs	r3, r0
 8004c22:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c24:	e009      	b.n	8004c3a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c26:	f7fd fd77 	bl	8002718 <HAL_GetTick>
 8004c2a:	0002      	movs	r2, r0
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	1ad3      	subs	r3, r2, r3
 8004c30:	4a27      	ldr	r2, [pc, #156]	; (8004cd0 <HAL_RCC_ClockConfig+0x18c>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d901      	bls.n	8004c3a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8004c36:	2303      	movs	r3, #3
 8004c38:	e042      	b.n	8004cc0 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c3a:	4b24      	ldr	r3, [pc, #144]	; (8004ccc <HAL_RCC_ClockConfig+0x188>)
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	220c      	movs	r2, #12
 8004c40:	401a      	ands	r2, r3
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d1ec      	bne.n	8004c26 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c4c:	4b1e      	ldr	r3, [pc, #120]	; (8004cc8 <HAL_RCC_ClockConfig+0x184>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	2201      	movs	r2, #1
 8004c52:	4013      	ands	r3, r2
 8004c54:	683a      	ldr	r2, [r7, #0]
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d211      	bcs.n	8004c7e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c5a:	4b1b      	ldr	r3, [pc, #108]	; (8004cc8 <HAL_RCC_ClockConfig+0x184>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	4393      	bics	r3, r2
 8004c62:	0019      	movs	r1, r3
 8004c64:	4b18      	ldr	r3, [pc, #96]	; (8004cc8 <HAL_RCC_ClockConfig+0x184>)
 8004c66:	683a      	ldr	r2, [r7, #0]
 8004c68:	430a      	orrs	r2, r1
 8004c6a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c6c:	4b16      	ldr	r3, [pc, #88]	; (8004cc8 <HAL_RCC_ClockConfig+0x184>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	2201      	movs	r2, #1
 8004c72:	4013      	ands	r3, r2
 8004c74:	683a      	ldr	r2, [r7, #0]
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d001      	beq.n	8004c7e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e020      	b.n	8004cc0 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	2204      	movs	r2, #4
 8004c84:	4013      	ands	r3, r2
 8004c86:	d009      	beq.n	8004c9c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004c88:	4b10      	ldr	r3, [pc, #64]	; (8004ccc <HAL_RCC_ClockConfig+0x188>)
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	4a11      	ldr	r2, [pc, #68]	; (8004cd4 <HAL_RCC_ClockConfig+0x190>)
 8004c8e:	4013      	ands	r3, r2
 8004c90:	0019      	movs	r1, r3
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	68da      	ldr	r2, [r3, #12]
 8004c96:	4b0d      	ldr	r3, [pc, #52]	; (8004ccc <HAL_RCC_ClockConfig+0x188>)
 8004c98:	430a      	orrs	r2, r1
 8004c9a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004c9c:	f000 f820 	bl	8004ce0 <HAL_RCC_GetSysClockFreq>
 8004ca0:	0001      	movs	r1, r0
 8004ca2:	4b0a      	ldr	r3, [pc, #40]	; (8004ccc <HAL_RCC_ClockConfig+0x188>)
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	091b      	lsrs	r3, r3, #4
 8004ca8:	220f      	movs	r2, #15
 8004caa:	4013      	ands	r3, r2
 8004cac:	4a0a      	ldr	r2, [pc, #40]	; (8004cd8 <HAL_RCC_ClockConfig+0x194>)
 8004cae:	5cd3      	ldrb	r3, [r2, r3]
 8004cb0:	000a      	movs	r2, r1
 8004cb2:	40da      	lsrs	r2, r3
 8004cb4:	4b09      	ldr	r3, [pc, #36]	; (8004cdc <HAL_RCC_ClockConfig+0x198>)
 8004cb6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004cb8:	2003      	movs	r0, #3
 8004cba:	f7fd fce7 	bl	800268c <HAL_InitTick>
  
  return HAL_OK;
 8004cbe:	2300      	movs	r3, #0
}
 8004cc0:	0018      	movs	r0, r3
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	b004      	add	sp, #16
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	40022000 	.word	0x40022000
 8004ccc:	40021000 	.word	0x40021000
 8004cd0:	00001388 	.word	0x00001388
 8004cd4:	fffff8ff 	.word	0xfffff8ff
 8004cd8:	08009790 	.word	0x08009790
 8004cdc:	20000004 	.word	0x20000004

08004ce0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ce0:	b590      	push	{r4, r7, lr}
 8004ce2:	b08f      	sub	sp, #60	; 0x3c
 8004ce4:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8004ce6:	2314      	movs	r3, #20
 8004ce8:	18fb      	adds	r3, r7, r3
 8004cea:	4a2c      	ldr	r2, [pc, #176]	; (8004d9c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004cec:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004cee:	c313      	stmia	r3!, {r0, r1, r4}
 8004cf0:	6812      	ldr	r2, [r2, #0]
 8004cf2:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8004cf4:	1d3b      	adds	r3, r7, #4
 8004cf6:	4a2a      	ldr	r2, [pc, #168]	; (8004da0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004cf8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004cfa:	c313      	stmia	r3!, {r0, r1, r4}
 8004cfc:	6812      	ldr	r2, [r2, #0]
 8004cfe:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004d00:	2300      	movs	r3, #0
 8004d02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d04:	2300      	movs	r3, #0
 8004d06:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d08:	2300      	movs	r3, #0
 8004d0a:	637b      	str	r3, [r7, #52]	; 0x34
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8004d10:	2300      	movs	r3, #0
 8004d12:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8004d14:	4b23      	ldr	r3, [pc, #140]	; (8004da4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d1c:	220c      	movs	r2, #12
 8004d1e:	4013      	ands	r3, r2
 8004d20:	2b04      	cmp	r3, #4
 8004d22:	d002      	beq.n	8004d2a <HAL_RCC_GetSysClockFreq+0x4a>
 8004d24:	2b08      	cmp	r3, #8
 8004d26:	d003      	beq.n	8004d30 <HAL_RCC_GetSysClockFreq+0x50>
 8004d28:	e02f      	b.n	8004d8a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004d2a:	4b1f      	ldr	r3, [pc, #124]	; (8004da8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004d2c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004d2e:	e02f      	b.n	8004d90 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d32:	0c9b      	lsrs	r3, r3, #18
 8004d34:	220f      	movs	r2, #15
 8004d36:	4013      	ands	r3, r2
 8004d38:	2214      	movs	r2, #20
 8004d3a:	18ba      	adds	r2, r7, r2
 8004d3c:	5cd3      	ldrb	r3, [r2, r3]
 8004d3e:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004d40:	4b18      	ldr	r3, [pc, #96]	; (8004da4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d44:	220f      	movs	r2, #15
 8004d46:	4013      	ands	r3, r2
 8004d48:	1d3a      	adds	r2, r7, #4
 8004d4a:	5cd3      	ldrb	r3, [r2, r3]
 8004d4c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004d4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d50:	23c0      	movs	r3, #192	; 0xc0
 8004d52:	025b      	lsls	r3, r3, #9
 8004d54:	401a      	ands	r2, r3
 8004d56:	2380      	movs	r3, #128	; 0x80
 8004d58:	025b      	lsls	r3, r3, #9
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d109      	bne.n	8004d72 <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004d5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d60:	4811      	ldr	r0, [pc, #68]	; (8004da8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004d62:	f7fb f9db 	bl	800011c <__udivsi3>
 8004d66:	0003      	movs	r3, r0
 8004d68:	001a      	movs	r2, r3
 8004d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6c:	4353      	muls	r3, r2
 8004d6e:	637b      	str	r3, [r7, #52]	; 0x34
 8004d70:	e008      	b.n	8004d84 <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004d72:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d74:	480c      	ldr	r0, [pc, #48]	; (8004da8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004d76:	f7fb f9d1 	bl	800011c <__udivsi3>
 8004d7a:	0003      	movs	r3, r0
 8004d7c:	001a      	movs	r2, r3
 8004d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d80:	4353      	muls	r3, r2
 8004d82:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8004d84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d86:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004d88:	e002      	b.n	8004d90 <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004d8a:	4b07      	ldr	r3, [pc, #28]	; (8004da8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004d8c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004d8e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004d92:	0018      	movs	r0, r3
 8004d94:	46bd      	mov	sp, r7
 8004d96:	b00f      	add	sp, #60	; 0x3c
 8004d98:	bd90      	pop	{r4, r7, pc}
 8004d9a:	46c0      	nop			; (mov r8, r8)
 8004d9c:	08009664 	.word	0x08009664
 8004da0:	08009674 	.word	0x08009674
 8004da4:	40021000 	.word	0x40021000
 8004da8:	007a1200 	.word	0x007a1200

08004dac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b086      	sub	sp, #24
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004db4:	2300      	movs	r3, #0
 8004db6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8004db8:	2300      	movs	r3, #0
 8004dba:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	2380      	movs	r3, #128	; 0x80
 8004dc2:	025b      	lsls	r3, r3, #9
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	d100      	bne.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8004dc8:	e08e      	b.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8004dca:	2017      	movs	r0, #23
 8004dcc:	183b      	adds	r3, r7, r0
 8004dce:	2200      	movs	r2, #0
 8004dd0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004dd2:	4b5f      	ldr	r3, [pc, #380]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004dd4:	69da      	ldr	r2, [r3, #28]
 8004dd6:	2380      	movs	r3, #128	; 0x80
 8004dd8:	055b      	lsls	r3, r3, #21
 8004dda:	4013      	ands	r3, r2
 8004ddc:	d110      	bne.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004dde:	4b5c      	ldr	r3, [pc, #368]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004de0:	69da      	ldr	r2, [r3, #28]
 8004de2:	4b5b      	ldr	r3, [pc, #364]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004de4:	2180      	movs	r1, #128	; 0x80
 8004de6:	0549      	lsls	r1, r1, #21
 8004de8:	430a      	orrs	r2, r1
 8004dea:	61da      	str	r2, [r3, #28]
 8004dec:	4b58      	ldr	r3, [pc, #352]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004dee:	69da      	ldr	r2, [r3, #28]
 8004df0:	2380      	movs	r3, #128	; 0x80
 8004df2:	055b      	lsls	r3, r3, #21
 8004df4:	4013      	ands	r3, r2
 8004df6:	60bb      	str	r3, [r7, #8]
 8004df8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004dfa:	183b      	adds	r3, r7, r0
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e00:	4b54      	ldr	r3, [pc, #336]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	2380      	movs	r3, #128	; 0x80
 8004e06:	005b      	lsls	r3, r3, #1
 8004e08:	4013      	ands	r3, r2
 8004e0a:	d11a      	bne.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e0c:	4b51      	ldr	r3, [pc, #324]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	4b50      	ldr	r3, [pc, #320]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004e12:	2180      	movs	r1, #128	; 0x80
 8004e14:	0049      	lsls	r1, r1, #1
 8004e16:	430a      	orrs	r2, r1
 8004e18:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e1a:	f7fd fc7d 	bl	8002718 <HAL_GetTick>
 8004e1e:	0003      	movs	r3, r0
 8004e20:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e22:	e008      	b.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e24:	f7fd fc78 	bl	8002718 <HAL_GetTick>
 8004e28:	0002      	movs	r2, r0
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	2b64      	cmp	r3, #100	; 0x64
 8004e30:	d901      	bls.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8004e32:	2303      	movs	r3, #3
 8004e34:	e087      	b.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e36:	4b47      	ldr	r3, [pc, #284]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	2380      	movs	r3, #128	; 0x80
 8004e3c:	005b      	lsls	r3, r3, #1
 8004e3e:	4013      	ands	r3, r2
 8004e40:	d0f0      	beq.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004e42:	4b43      	ldr	r3, [pc, #268]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004e44:	6a1a      	ldr	r2, [r3, #32]
 8004e46:	23c0      	movs	r3, #192	; 0xc0
 8004e48:	009b      	lsls	r3, r3, #2
 8004e4a:	4013      	ands	r3, r2
 8004e4c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d034      	beq.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x112>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	685a      	ldr	r2, [r3, #4]
 8004e58:	23c0      	movs	r3, #192	; 0xc0
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	68fa      	ldr	r2, [r7, #12]
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d02c      	beq.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e64:	4b3a      	ldr	r3, [pc, #232]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004e66:	6a1b      	ldr	r3, [r3, #32]
 8004e68:	4a3b      	ldr	r2, [pc, #236]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e6e:	4b38      	ldr	r3, [pc, #224]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004e70:	6a1a      	ldr	r2, [r3, #32]
 8004e72:	4b37      	ldr	r3, [pc, #220]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004e74:	2180      	movs	r1, #128	; 0x80
 8004e76:	0249      	lsls	r1, r1, #9
 8004e78:	430a      	orrs	r2, r1
 8004e7a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e7c:	4b34      	ldr	r3, [pc, #208]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004e7e:	6a1a      	ldr	r2, [r3, #32]
 8004e80:	4b33      	ldr	r3, [pc, #204]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004e82:	4936      	ldr	r1, [pc, #216]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004e84:	400a      	ands	r2, r1
 8004e86:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004e88:	4b31      	ldr	r3, [pc, #196]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004e8a:	68fa      	ldr	r2, [r7, #12]
 8004e8c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2201      	movs	r2, #1
 8004e92:	4013      	ands	r3, r2
 8004e94:	d013      	beq.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e96:	f7fd fc3f 	bl	8002718 <HAL_GetTick>
 8004e9a:	0003      	movs	r3, r0
 8004e9c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e9e:	e009      	b.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ea0:	f7fd fc3a 	bl	8002718 <HAL_GetTick>
 8004ea4:	0002      	movs	r2, r0
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	1ad3      	subs	r3, r2, r3
 8004eaa:	4a2d      	ldr	r2, [pc, #180]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d901      	bls.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004eb0:	2303      	movs	r3, #3
 8004eb2:	e048      	b.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004eb4:	4b26      	ldr	r3, [pc, #152]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004eb6:	6a1b      	ldr	r3, [r3, #32]
 8004eb8:	2202      	movs	r2, #2
 8004eba:	4013      	ands	r3, r2
 8004ebc:	d0f0      	beq.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ebe:	4b24      	ldr	r3, [pc, #144]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004ec0:	6a1b      	ldr	r3, [r3, #32]
 8004ec2:	4a25      	ldr	r2, [pc, #148]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ec4:	4013      	ands	r3, r2
 8004ec6:	0019      	movs	r1, r3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	685a      	ldr	r2, [r3, #4]
 8004ecc:	4b20      	ldr	r3, [pc, #128]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004ece:	430a      	orrs	r2, r1
 8004ed0:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004ed2:	2317      	movs	r3, #23
 8004ed4:	18fb      	adds	r3, r7, r3
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d105      	bne.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004edc:	4b1c      	ldr	r3, [pc, #112]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004ede:	69da      	ldr	r2, [r3, #28]
 8004ee0:	4b1b      	ldr	r3, [pc, #108]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004ee2:	4920      	ldr	r1, [pc, #128]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ee4:	400a      	ands	r2, r1
 8004ee6:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	2201      	movs	r2, #1
 8004eee:	4013      	ands	r3, r2
 8004ef0:	d009      	beq.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ef2:	4b17      	ldr	r3, [pc, #92]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ef6:	2203      	movs	r2, #3
 8004ef8:	4393      	bics	r3, r2
 8004efa:	0019      	movs	r1, r3
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	689a      	ldr	r2, [r3, #8]
 8004f00:	4b13      	ldr	r3, [pc, #76]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004f02:	430a      	orrs	r2, r1
 8004f04:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	2220      	movs	r2, #32
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	d009      	beq.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004f10:	4b0f      	ldr	r3, [pc, #60]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f14:	2210      	movs	r2, #16
 8004f16:	4393      	bics	r3, r2
 8004f18:	0019      	movs	r1, r3
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	68da      	ldr	r2, [r3, #12]
 8004f1e:	4b0c      	ldr	r3, [pc, #48]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004f20:	430a      	orrs	r2, r1
 8004f22:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	2380      	movs	r3, #128	; 0x80
 8004f2a:	029b      	lsls	r3, r3, #10
 8004f2c:	4013      	ands	r3, r2
 8004f2e:	d009      	beq.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f30:	4b07      	ldr	r3, [pc, #28]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f34:	2280      	movs	r2, #128	; 0x80
 8004f36:	4393      	bics	r3, r2
 8004f38:	0019      	movs	r1, r3
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	691a      	ldr	r2, [r3, #16]
 8004f3e:	4b04      	ldr	r3, [pc, #16]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004f40:	430a      	orrs	r2, r1
 8004f42:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004f44:	2300      	movs	r3, #0
}
 8004f46:	0018      	movs	r0, r3
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	b006      	add	sp, #24
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	46c0      	nop			; (mov r8, r8)
 8004f50:	40021000 	.word	0x40021000
 8004f54:	40007000 	.word	0x40007000
 8004f58:	fffffcff 	.word	0xfffffcff
 8004f5c:	fffeffff 	.word	0xfffeffff
 8004f60:	00001388 	.word	0x00001388
 8004f64:	efffffff 	.word	0xefffffff

08004f68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b082      	sub	sp, #8
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d101      	bne.n	8004f7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	e042      	b.n	8005000 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	223d      	movs	r2, #61	; 0x3d
 8004f7e:	5c9b      	ldrb	r3, [r3, r2]
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d107      	bne.n	8004f96 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	223c      	movs	r2, #60	; 0x3c
 8004f8a:	2100      	movs	r1, #0
 8004f8c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	0018      	movs	r0, r3
 8004f92:	f7fd fa59 	bl	8002448 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	223d      	movs	r2, #61	; 0x3d
 8004f9a:	2102      	movs	r1, #2
 8004f9c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	3304      	adds	r3, #4
 8004fa6:	0019      	movs	r1, r3
 8004fa8:	0010      	movs	r0, r2
 8004faa:	f000 fb61 	bl	8005670 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2246      	movs	r2, #70	; 0x46
 8004fb2:	2101      	movs	r1, #1
 8004fb4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	223e      	movs	r2, #62	; 0x3e
 8004fba:	2101      	movs	r1, #1
 8004fbc:	5499      	strb	r1, [r3, r2]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	223f      	movs	r2, #63	; 0x3f
 8004fc2:	2101      	movs	r1, #1
 8004fc4:	5499      	strb	r1, [r3, r2]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2240      	movs	r2, #64	; 0x40
 8004fca:	2101      	movs	r1, #1
 8004fcc:	5499      	strb	r1, [r3, r2]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2241      	movs	r2, #65	; 0x41
 8004fd2:	2101      	movs	r1, #1
 8004fd4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2242      	movs	r2, #66	; 0x42
 8004fda:	2101      	movs	r1, #1
 8004fdc:	5499      	strb	r1, [r3, r2]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2243      	movs	r2, #67	; 0x43
 8004fe2:	2101      	movs	r1, #1
 8004fe4:	5499      	strb	r1, [r3, r2]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2244      	movs	r2, #68	; 0x44
 8004fea:	2101      	movs	r1, #1
 8004fec:	5499      	strb	r1, [r3, r2]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2245      	movs	r2, #69	; 0x45
 8004ff2:	2101      	movs	r1, #1
 8004ff4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	223d      	movs	r2, #61	; 0x3d
 8004ffa:	2101      	movs	r1, #1
 8004ffc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004ffe:	2300      	movs	r3, #0
}
 8005000:	0018      	movs	r0, r3
 8005002:	46bd      	mov	sp, r7
 8005004:	b002      	add	sp, #8
 8005006:	bd80      	pop	{r7, pc}

08005008 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b084      	sub	sp, #16
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	223d      	movs	r2, #61	; 0x3d
 8005014:	5c9b      	ldrb	r3, [r3, r2]
 8005016:	b2db      	uxtb	r3, r3
 8005018:	2b01      	cmp	r3, #1
 800501a:	d001      	beq.n	8005020 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	e02d      	b.n	800507c <HAL_TIM_Base_Start+0x74>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	223d      	movs	r2, #61	; 0x3d
 8005024:	2102      	movs	r1, #2
 8005026:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a15      	ldr	r2, [pc, #84]	; (8005084 <HAL_TIM_Base_Start+0x7c>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d009      	beq.n	8005046 <HAL_TIM_Base_Start+0x3e>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a14      	ldr	r2, [pc, #80]	; (8005088 <HAL_TIM_Base_Start+0x80>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d004      	beq.n	8005046 <HAL_TIM_Base_Start+0x3e>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a12      	ldr	r2, [pc, #72]	; (800508c <HAL_TIM_Base_Start+0x84>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d111      	bne.n	800506a <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	2207      	movs	r2, #7
 800504e:	4013      	ands	r3, r2
 8005050:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2b06      	cmp	r3, #6
 8005056:	d010      	beq.n	800507a <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	2101      	movs	r1, #1
 8005064:	430a      	orrs	r2, r1
 8005066:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005068:	e007      	b.n	800507a <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	2101      	movs	r1, #1
 8005076:	430a      	orrs	r2, r1
 8005078:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800507a:	2300      	movs	r3, #0
}
 800507c:	0018      	movs	r0, r3
 800507e:	46bd      	mov	sp, r7
 8005080:	b004      	add	sp, #16
 8005082:	bd80      	pop	{r7, pc}
 8005084:	40012c00 	.word	0x40012c00
 8005088:	40000400 	.word	0x40000400
 800508c:	40014000 	.word	0x40014000

08005090 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b084      	sub	sp, #16
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	223d      	movs	r2, #61	; 0x3d
 800509c:	5c9b      	ldrb	r3, [r3, r2]
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d001      	beq.n	80050a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	e035      	b.n	8005114 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	223d      	movs	r2, #61	; 0x3d
 80050ac:	2102      	movs	r1, #2
 80050ae:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	68da      	ldr	r2, [r3, #12]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	2101      	movs	r1, #1
 80050bc:	430a      	orrs	r2, r1
 80050be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a15      	ldr	r2, [pc, #84]	; (800511c <HAL_TIM_Base_Start_IT+0x8c>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d009      	beq.n	80050de <HAL_TIM_Base_Start_IT+0x4e>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a14      	ldr	r2, [pc, #80]	; (8005120 <HAL_TIM_Base_Start_IT+0x90>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d004      	beq.n	80050de <HAL_TIM_Base_Start_IT+0x4e>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a12      	ldr	r2, [pc, #72]	; (8005124 <HAL_TIM_Base_Start_IT+0x94>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d111      	bne.n	8005102 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	2207      	movs	r2, #7
 80050e6:	4013      	ands	r3, r2
 80050e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2b06      	cmp	r3, #6
 80050ee:	d010      	beq.n	8005112 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	2101      	movs	r1, #1
 80050fc:	430a      	orrs	r2, r1
 80050fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005100:	e007      	b.n	8005112 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	2101      	movs	r1, #1
 800510e:	430a      	orrs	r2, r1
 8005110:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005112:	2300      	movs	r3, #0
}
 8005114:	0018      	movs	r0, r3
 8005116:	46bd      	mov	sp, r7
 8005118:	b004      	add	sp, #16
 800511a:	bd80      	pop	{r7, pc}
 800511c:	40012c00 	.word	0x40012c00
 8005120:	40000400 	.word	0x40000400
 8005124:	40014000 	.word	0x40014000

08005128 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b082      	sub	sp, #8
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d101      	bne.n	800513a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e042      	b.n	80051c0 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	223d      	movs	r2, #61	; 0x3d
 800513e:	5c9b      	ldrb	r3, [r3, r2]
 8005140:	b2db      	uxtb	r3, r3
 8005142:	2b00      	cmp	r3, #0
 8005144:	d107      	bne.n	8005156 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	223c      	movs	r2, #60	; 0x3c
 800514a:	2100      	movs	r1, #0
 800514c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	0018      	movs	r0, r3
 8005152:	f000 f839 	bl	80051c8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	223d      	movs	r2, #61	; 0x3d
 800515a:	2102      	movs	r1, #2
 800515c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	3304      	adds	r3, #4
 8005166:	0019      	movs	r1, r3
 8005168:	0010      	movs	r0, r2
 800516a:	f000 fa81 	bl	8005670 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2246      	movs	r2, #70	; 0x46
 8005172:	2101      	movs	r1, #1
 8005174:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	223e      	movs	r2, #62	; 0x3e
 800517a:	2101      	movs	r1, #1
 800517c:	5499      	strb	r1, [r3, r2]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	223f      	movs	r2, #63	; 0x3f
 8005182:	2101      	movs	r1, #1
 8005184:	5499      	strb	r1, [r3, r2]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2240      	movs	r2, #64	; 0x40
 800518a:	2101      	movs	r1, #1
 800518c:	5499      	strb	r1, [r3, r2]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2241      	movs	r2, #65	; 0x41
 8005192:	2101      	movs	r1, #1
 8005194:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2242      	movs	r2, #66	; 0x42
 800519a:	2101      	movs	r1, #1
 800519c:	5499      	strb	r1, [r3, r2]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2243      	movs	r2, #67	; 0x43
 80051a2:	2101      	movs	r1, #1
 80051a4:	5499      	strb	r1, [r3, r2]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2244      	movs	r2, #68	; 0x44
 80051aa:	2101      	movs	r1, #1
 80051ac:	5499      	strb	r1, [r3, r2]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2245      	movs	r2, #69	; 0x45
 80051b2:	2101      	movs	r1, #1
 80051b4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	223d      	movs	r2, #61	; 0x3d
 80051ba:	2101      	movs	r1, #1
 80051bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80051be:	2300      	movs	r3, #0
}
 80051c0:	0018      	movs	r0, r3
 80051c2:	46bd      	mov	sp, r7
 80051c4:	b002      	add	sp, #8
 80051c6:	bd80      	pop	{r7, pc}

080051c8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b082      	sub	sp, #8
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80051d0:	46c0      	nop			; (mov r8, r8)
 80051d2:	46bd      	mov	sp, r7
 80051d4:	b002      	add	sp, #8
 80051d6:	bd80      	pop	{r7, pc}

080051d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b084      	sub	sp, #16
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d108      	bne.n	80051fa <HAL_TIM_PWM_Start+0x22>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	223e      	movs	r2, #62	; 0x3e
 80051ec:	5c9b      	ldrb	r3, [r3, r2]
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	3b01      	subs	r3, #1
 80051f2:	1e5a      	subs	r2, r3, #1
 80051f4:	4193      	sbcs	r3, r2
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	e01f      	b.n	800523a <HAL_TIM_PWM_Start+0x62>
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	2b04      	cmp	r3, #4
 80051fe:	d108      	bne.n	8005212 <HAL_TIM_PWM_Start+0x3a>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	223f      	movs	r2, #63	; 0x3f
 8005204:	5c9b      	ldrb	r3, [r3, r2]
 8005206:	b2db      	uxtb	r3, r3
 8005208:	3b01      	subs	r3, #1
 800520a:	1e5a      	subs	r2, r3, #1
 800520c:	4193      	sbcs	r3, r2
 800520e:	b2db      	uxtb	r3, r3
 8005210:	e013      	b.n	800523a <HAL_TIM_PWM_Start+0x62>
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	2b08      	cmp	r3, #8
 8005216:	d108      	bne.n	800522a <HAL_TIM_PWM_Start+0x52>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2240      	movs	r2, #64	; 0x40
 800521c:	5c9b      	ldrb	r3, [r3, r2]
 800521e:	b2db      	uxtb	r3, r3
 8005220:	3b01      	subs	r3, #1
 8005222:	1e5a      	subs	r2, r3, #1
 8005224:	4193      	sbcs	r3, r2
 8005226:	b2db      	uxtb	r3, r3
 8005228:	e007      	b.n	800523a <HAL_TIM_PWM_Start+0x62>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2241      	movs	r2, #65	; 0x41
 800522e:	5c9b      	ldrb	r3, [r3, r2]
 8005230:	b2db      	uxtb	r3, r3
 8005232:	3b01      	subs	r3, #1
 8005234:	1e5a      	subs	r2, r3, #1
 8005236:	4193      	sbcs	r3, r2
 8005238:	b2db      	uxtb	r3, r3
 800523a:	2b00      	cmp	r3, #0
 800523c:	d001      	beq.n	8005242 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	e06e      	b.n	8005320 <HAL_TIM_PWM_Start+0x148>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d104      	bne.n	8005252 <HAL_TIM_PWM_Start+0x7a>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	223e      	movs	r2, #62	; 0x3e
 800524c:	2102      	movs	r1, #2
 800524e:	5499      	strb	r1, [r3, r2]
 8005250:	e013      	b.n	800527a <HAL_TIM_PWM_Start+0xa2>
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	2b04      	cmp	r3, #4
 8005256:	d104      	bne.n	8005262 <HAL_TIM_PWM_Start+0x8a>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	223f      	movs	r2, #63	; 0x3f
 800525c:	2102      	movs	r1, #2
 800525e:	5499      	strb	r1, [r3, r2]
 8005260:	e00b      	b.n	800527a <HAL_TIM_PWM_Start+0xa2>
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	2b08      	cmp	r3, #8
 8005266:	d104      	bne.n	8005272 <HAL_TIM_PWM_Start+0x9a>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2240      	movs	r2, #64	; 0x40
 800526c:	2102      	movs	r1, #2
 800526e:	5499      	strb	r1, [r3, r2]
 8005270:	e003      	b.n	800527a <HAL_TIM_PWM_Start+0xa2>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2241      	movs	r2, #65	; 0x41
 8005276:	2102      	movs	r1, #2
 8005278:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	6839      	ldr	r1, [r7, #0]
 8005280:	2201      	movs	r2, #1
 8005282:	0018      	movs	r0, r3
 8005284:	f000 fd00 	bl	8005c88 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a26      	ldr	r2, [pc, #152]	; (8005328 <HAL_TIM_PWM_Start+0x150>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d00e      	beq.n	80052b0 <HAL_TIM_PWM_Start+0xd8>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a25      	ldr	r2, [pc, #148]	; (800532c <HAL_TIM_PWM_Start+0x154>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d009      	beq.n	80052b0 <HAL_TIM_PWM_Start+0xd8>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a23      	ldr	r2, [pc, #140]	; (8005330 <HAL_TIM_PWM_Start+0x158>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d004      	beq.n	80052b0 <HAL_TIM_PWM_Start+0xd8>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a22      	ldr	r2, [pc, #136]	; (8005334 <HAL_TIM_PWM_Start+0x15c>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d101      	bne.n	80052b4 <HAL_TIM_PWM_Start+0xdc>
 80052b0:	2301      	movs	r3, #1
 80052b2:	e000      	b.n	80052b6 <HAL_TIM_PWM_Start+0xde>
 80052b4:	2300      	movs	r3, #0
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d008      	beq.n	80052cc <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	2180      	movs	r1, #128	; 0x80
 80052c6:	0209      	lsls	r1, r1, #8
 80052c8:	430a      	orrs	r2, r1
 80052ca:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a15      	ldr	r2, [pc, #84]	; (8005328 <HAL_TIM_PWM_Start+0x150>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d009      	beq.n	80052ea <HAL_TIM_PWM_Start+0x112>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a17      	ldr	r2, [pc, #92]	; (8005338 <HAL_TIM_PWM_Start+0x160>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d004      	beq.n	80052ea <HAL_TIM_PWM_Start+0x112>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a11      	ldr	r2, [pc, #68]	; (800532c <HAL_TIM_PWM_Start+0x154>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d111      	bne.n	800530e <HAL_TIM_PWM_Start+0x136>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	2207      	movs	r2, #7
 80052f2:	4013      	ands	r3, r2
 80052f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2b06      	cmp	r3, #6
 80052fa:	d010      	beq.n	800531e <HAL_TIM_PWM_Start+0x146>
    {
      __HAL_TIM_ENABLE(htim);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	2101      	movs	r1, #1
 8005308:	430a      	orrs	r2, r1
 800530a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800530c:	e007      	b.n	800531e <HAL_TIM_PWM_Start+0x146>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	2101      	movs	r1, #1
 800531a:	430a      	orrs	r2, r1
 800531c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800531e:	2300      	movs	r3, #0
}
 8005320:	0018      	movs	r0, r3
 8005322:	46bd      	mov	sp, r7
 8005324:	b004      	add	sp, #16
 8005326:	bd80      	pop	{r7, pc}
 8005328:	40012c00 	.word	0x40012c00
 800532c:	40014000 	.word	0x40014000
 8005330:	40014400 	.word	0x40014400
 8005334:	40014800 	.word	0x40014800
 8005338:	40000400 	.word	0x40000400

0800533c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b086      	sub	sp, #24
 8005340:	af00      	add	r7, sp, #0
 8005342:	60f8      	str	r0, [r7, #12]
 8005344:	60b9      	str	r1, [r7, #8]
 8005346:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005348:	2317      	movs	r3, #23
 800534a:	18fb      	adds	r3, r7, r3
 800534c:	2200      	movs	r2, #0
 800534e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	223c      	movs	r2, #60	; 0x3c
 8005354:	5c9b      	ldrb	r3, [r3, r2]
 8005356:	2b01      	cmp	r3, #1
 8005358:	d101      	bne.n	800535e <HAL_TIM_PWM_ConfigChannel+0x22>
 800535a:	2302      	movs	r3, #2
 800535c:	e0ad      	b.n	80054ba <HAL_TIM_PWM_ConfigChannel+0x17e>
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	223c      	movs	r2, #60	; 0x3c
 8005362:	2101      	movs	r1, #1
 8005364:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2b0c      	cmp	r3, #12
 800536a:	d100      	bne.n	800536e <HAL_TIM_PWM_ConfigChannel+0x32>
 800536c:	e076      	b.n	800545c <HAL_TIM_PWM_ConfigChannel+0x120>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2b0c      	cmp	r3, #12
 8005372:	d900      	bls.n	8005376 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8005374:	e095      	b.n	80054a2 <HAL_TIM_PWM_ConfigChannel+0x166>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2b08      	cmp	r3, #8
 800537a:	d04e      	beq.n	800541a <HAL_TIM_PWM_ConfigChannel+0xde>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2b08      	cmp	r3, #8
 8005380:	d900      	bls.n	8005384 <HAL_TIM_PWM_ConfigChannel+0x48>
 8005382:	e08e      	b.n	80054a2 <HAL_TIM_PWM_ConfigChannel+0x166>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d003      	beq.n	8005392 <HAL_TIM_PWM_ConfigChannel+0x56>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2b04      	cmp	r3, #4
 800538e:	d021      	beq.n	80053d4 <HAL_TIM_PWM_ConfigChannel+0x98>
 8005390:	e087      	b.n	80054a2 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	68ba      	ldr	r2, [r7, #8]
 8005398:	0011      	movs	r1, r2
 800539a:	0018      	movs	r0, r3
 800539c:	f000 f9de 	bl	800575c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	699a      	ldr	r2, [r3, #24]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	2108      	movs	r1, #8
 80053ac:	430a      	orrs	r2, r1
 80053ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	699a      	ldr	r2, [r3, #24]
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	2104      	movs	r1, #4
 80053bc:	438a      	bics	r2, r1
 80053be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	6999      	ldr	r1, [r3, #24]
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	691a      	ldr	r2, [r3, #16]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	430a      	orrs	r2, r1
 80053d0:	619a      	str	r2, [r3, #24]
      break;
 80053d2:	e06b      	b.n	80054ac <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	68ba      	ldr	r2, [r7, #8]
 80053da:	0011      	movs	r1, r2
 80053dc:	0018      	movs	r0, r3
 80053de:	f000 fa45 	bl	800586c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	699a      	ldr	r2, [r3, #24]
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	2180      	movs	r1, #128	; 0x80
 80053ee:	0109      	lsls	r1, r1, #4
 80053f0:	430a      	orrs	r2, r1
 80053f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	699a      	ldr	r2, [r3, #24]
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4931      	ldr	r1, [pc, #196]	; (80054c4 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8005400:	400a      	ands	r2, r1
 8005402:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	6999      	ldr	r1, [r3, #24]
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	691b      	ldr	r3, [r3, #16]
 800540e:	021a      	lsls	r2, r3, #8
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	430a      	orrs	r2, r1
 8005416:	619a      	str	r2, [r3, #24]
      break;
 8005418:	e048      	b.n	80054ac <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	68ba      	ldr	r2, [r7, #8]
 8005420:	0011      	movs	r1, r2
 8005422:	0018      	movs	r0, r3
 8005424:	f000 faa6 	bl	8005974 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	69da      	ldr	r2, [r3, #28]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	2108      	movs	r1, #8
 8005434:	430a      	orrs	r2, r1
 8005436:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	69da      	ldr	r2, [r3, #28]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	2104      	movs	r1, #4
 8005444:	438a      	bics	r2, r1
 8005446:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	69d9      	ldr	r1, [r3, #28]
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	691a      	ldr	r2, [r3, #16]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	430a      	orrs	r2, r1
 8005458:	61da      	str	r2, [r3, #28]
      break;
 800545a:	e027      	b.n	80054ac <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	68ba      	ldr	r2, [r7, #8]
 8005462:	0011      	movs	r1, r2
 8005464:	0018      	movs	r0, r3
 8005466:	f000 fb0b 	bl	8005a80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	69da      	ldr	r2, [r3, #28]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	2180      	movs	r1, #128	; 0x80
 8005476:	0109      	lsls	r1, r1, #4
 8005478:	430a      	orrs	r2, r1
 800547a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	69da      	ldr	r2, [r3, #28]
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	490f      	ldr	r1, [pc, #60]	; (80054c4 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8005488:	400a      	ands	r2, r1
 800548a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	69d9      	ldr	r1, [r3, #28]
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	691b      	ldr	r3, [r3, #16]
 8005496:	021a      	lsls	r2, r3, #8
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	430a      	orrs	r2, r1
 800549e:	61da      	str	r2, [r3, #28]
      break;
 80054a0:	e004      	b.n	80054ac <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80054a2:	2317      	movs	r3, #23
 80054a4:	18fb      	adds	r3, r7, r3
 80054a6:	2201      	movs	r2, #1
 80054a8:	701a      	strb	r2, [r3, #0]
      break;
 80054aa:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	223c      	movs	r2, #60	; 0x3c
 80054b0:	2100      	movs	r1, #0
 80054b2:	5499      	strb	r1, [r3, r2]

  return status;
 80054b4:	2317      	movs	r3, #23
 80054b6:	18fb      	adds	r3, r7, r3
 80054b8:	781b      	ldrb	r3, [r3, #0]
}
 80054ba:	0018      	movs	r0, r3
 80054bc:	46bd      	mov	sp, r7
 80054be:	b006      	add	sp, #24
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	46c0      	nop			; (mov r8, r8)
 80054c4:	fffffbff 	.word	0xfffffbff

080054c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b084      	sub	sp, #16
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
 80054d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054d2:	230f      	movs	r3, #15
 80054d4:	18fb      	adds	r3, r7, r3
 80054d6:	2200      	movs	r2, #0
 80054d8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	223c      	movs	r2, #60	; 0x3c
 80054de:	5c9b      	ldrb	r3, [r3, r2]
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d101      	bne.n	80054e8 <HAL_TIM_ConfigClockSource+0x20>
 80054e4:	2302      	movs	r3, #2
 80054e6:	e0bc      	b.n	8005662 <HAL_TIM_ConfigClockSource+0x19a>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	223c      	movs	r2, #60	; 0x3c
 80054ec:	2101      	movs	r1, #1
 80054ee:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	223d      	movs	r2, #61	; 0x3d
 80054f4:	2102      	movs	r1, #2
 80054f6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	2277      	movs	r2, #119	; 0x77
 8005504:	4393      	bics	r3, r2
 8005506:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	4a58      	ldr	r2, [pc, #352]	; (800566c <HAL_TIM_ConfigClockSource+0x1a4>)
 800550c:	4013      	ands	r3, r2
 800550e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	68ba      	ldr	r2, [r7, #8]
 8005516:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	2280      	movs	r2, #128	; 0x80
 800551e:	0192      	lsls	r2, r2, #6
 8005520:	4293      	cmp	r3, r2
 8005522:	d040      	beq.n	80055a6 <HAL_TIM_ConfigClockSource+0xde>
 8005524:	2280      	movs	r2, #128	; 0x80
 8005526:	0192      	lsls	r2, r2, #6
 8005528:	4293      	cmp	r3, r2
 800552a:	d900      	bls.n	800552e <HAL_TIM_ConfigClockSource+0x66>
 800552c:	e088      	b.n	8005640 <HAL_TIM_ConfigClockSource+0x178>
 800552e:	2280      	movs	r2, #128	; 0x80
 8005530:	0152      	lsls	r2, r2, #5
 8005532:	4293      	cmp	r3, r2
 8005534:	d100      	bne.n	8005538 <HAL_TIM_ConfigClockSource+0x70>
 8005536:	e088      	b.n	800564a <HAL_TIM_ConfigClockSource+0x182>
 8005538:	2280      	movs	r2, #128	; 0x80
 800553a:	0152      	lsls	r2, r2, #5
 800553c:	4293      	cmp	r3, r2
 800553e:	d900      	bls.n	8005542 <HAL_TIM_ConfigClockSource+0x7a>
 8005540:	e07e      	b.n	8005640 <HAL_TIM_ConfigClockSource+0x178>
 8005542:	2b70      	cmp	r3, #112	; 0x70
 8005544:	d018      	beq.n	8005578 <HAL_TIM_ConfigClockSource+0xb0>
 8005546:	d900      	bls.n	800554a <HAL_TIM_ConfigClockSource+0x82>
 8005548:	e07a      	b.n	8005640 <HAL_TIM_ConfigClockSource+0x178>
 800554a:	2b60      	cmp	r3, #96	; 0x60
 800554c:	d04f      	beq.n	80055ee <HAL_TIM_ConfigClockSource+0x126>
 800554e:	d900      	bls.n	8005552 <HAL_TIM_ConfigClockSource+0x8a>
 8005550:	e076      	b.n	8005640 <HAL_TIM_ConfigClockSource+0x178>
 8005552:	2b50      	cmp	r3, #80	; 0x50
 8005554:	d03b      	beq.n	80055ce <HAL_TIM_ConfigClockSource+0x106>
 8005556:	d900      	bls.n	800555a <HAL_TIM_ConfigClockSource+0x92>
 8005558:	e072      	b.n	8005640 <HAL_TIM_ConfigClockSource+0x178>
 800555a:	2b40      	cmp	r3, #64	; 0x40
 800555c:	d057      	beq.n	800560e <HAL_TIM_ConfigClockSource+0x146>
 800555e:	d900      	bls.n	8005562 <HAL_TIM_ConfigClockSource+0x9a>
 8005560:	e06e      	b.n	8005640 <HAL_TIM_ConfigClockSource+0x178>
 8005562:	2b30      	cmp	r3, #48	; 0x30
 8005564:	d063      	beq.n	800562e <HAL_TIM_ConfigClockSource+0x166>
 8005566:	d86b      	bhi.n	8005640 <HAL_TIM_ConfigClockSource+0x178>
 8005568:	2b20      	cmp	r3, #32
 800556a:	d060      	beq.n	800562e <HAL_TIM_ConfigClockSource+0x166>
 800556c:	d868      	bhi.n	8005640 <HAL_TIM_ConfigClockSource+0x178>
 800556e:	2b00      	cmp	r3, #0
 8005570:	d05d      	beq.n	800562e <HAL_TIM_ConfigClockSource+0x166>
 8005572:	2b10      	cmp	r3, #16
 8005574:	d05b      	beq.n	800562e <HAL_TIM_ConfigClockSource+0x166>
 8005576:	e063      	b.n	8005640 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6818      	ldr	r0, [r3, #0]
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	6899      	ldr	r1, [r3, #8]
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	685a      	ldr	r2, [r3, #4]
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	f000 fb5e 	bl	8005c48 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	2277      	movs	r2, #119	; 0x77
 8005598:	4313      	orrs	r3, r2
 800559a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	68ba      	ldr	r2, [r7, #8]
 80055a2:	609a      	str	r2, [r3, #8]
      break;
 80055a4:	e052      	b.n	800564c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6818      	ldr	r0, [r3, #0]
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	6899      	ldr	r1, [r3, #8]
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	685a      	ldr	r2, [r3, #4]
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	68db      	ldr	r3, [r3, #12]
 80055b6:	f000 fb47 	bl	8005c48 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	689a      	ldr	r2, [r3, #8]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	2180      	movs	r1, #128	; 0x80
 80055c6:	01c9      	lsls	r1, r1, #7
 80055c8:	430a      	orrs	r2, r1
 80055ca:	609a      	str	r2, [r3, #8]
      break;
 80055cc:	e03e      	b.n	800564c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6818      	ldr	r0, [r3, #0]
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	6859      	ldr	r1, [r3, #4]
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	001a      	movs	r2, r3
 80055dc:	f000 faba 	bl	8005b54 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	2150      	movs	r1, #80	; 0x50
 80055e6:	0018      	movs	r0, r3
 80055e8:	f000 fb14 	bl	8005c14 <TIM_ITRx_SetConfig>
      break;
 80055ec:	e02e      	b.n	800564c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6818      	ldr	r0, [r3, #0]
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	6859      	ldr	r1, [r3, #4]
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	001a      	movs	r2, r3
 80055fc:	f000 fad8 	bl	8005bb0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	2160      	movs	r1, #96	; 0x60
 8005606:	0018      	movs	r0, r3
 8005608:	f000 fb04 	bl	8005c14 <TIM_ITRx_SetConfig>
      break;
 800560c:	e01e      	b.n	800564c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6818      	ldr	r0, [r3, #0]
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	6859      	ldr	r1, [r3, #4]
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	68db      	ldr	r3, [r3, #12]
 800561a:	001a      	movs	r2, r3
 800561c:	f000 fa9a 	bl	8005b54 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	2140      	movs	r1, #64	; 0x40
 8005626:	0018      	movs	r0, r3
 8005628:	f000 faf4 	bl	8005c14 <TIM_ITRx_SetConfig>
      break;
 800562c:	e00e      	b.n	800564c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681a      	ldr	r2, [r3, #0]
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	0019      	movs	r1, r3
 8005638:	0010      	movs	r0, r2
 800563a:	f000 faeb 	bl	8005c14 <TIM_ITRx_SetConfig>
      break;
 800563e:	e005      	b.n	800564c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8005640:	230f      	movs	r3, #15
 8005642:	18fb      	adds	r3, r7, r3
 8005644:	2201      	movs	r2, #1
 8005646:	701a      	strb	r2, [r3, #0]
      break;
 8005648:	e000      	b.n	800564c <HAL_TIM_ConfigClockSource+0x184>
      break;
 800564a:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	223d      	movs	r2, #61	; 0x3d
 8005650:	2101      	movs	r1, #1
 8005652:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	223c      	movs	r2, #60	; 0x3c
 8005658:	2100      	movs	r1, #0
 800565a:	5499      	strb	r1, [r3, r2]

  return status;
 800565c:	230f      	movs	r3, #15
 800565e:	18fb      	adds	r3, r7, r3
 8005660:	781b      	ldrb	r3, [r3, #0]
}
 8005662:	0018      	movs	r0, r3
 8005664:	46bd      	mov	sp, r7
 8005666:	b004      	add	sp, #16
 8005668:	bd80      	pop	{r7, pc}
 800566a:	46c0      	nop			; (mov r8, r8)
 800566c:	ffff00ff 	.word	0xffff00ff

08005670 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b084      	sub	sp, #16
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	4a2f      	ldr	r2, [pc, #188]	; (8005740 <TIM_Base_SetConfig+0xd0>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d003      	beq.n	8005690 <TIM_Base_SetConfig+0x20>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	4a2e      	ldr	r2, [pc, #184]	; (8005744 <TIM_Base_SetConfig+0xd4>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d108      	bne.n	80056a2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2270      	movs	r2, #112	; 0x70
 8005694:	4393      	bics	r3, r2
 8005696:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	68fa      	ldr	r2, [r7, #12]
 800569e:	4313      	orrs	r3, r2
 80056a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4a26      	ldr	r2, [pc, #152]	; (8005740 <TIM_Base_SetConfig+0xd0>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d013      	beq.n	80056d2 <TIM_Base_SetConfig+0x62>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a25      	ldr	r2, [pc, #148]	; (8005744 <TIM_Base_SetConfig+0xd4>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d00f      	beq.n	80056d2 <TIM_Base_SetConfig+0x62>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a24      	ldr	r2, [pc, #144]	; (8005748 <TIM_Base_SetConfig+0xd8>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d00b      	beq.n	80056d2 <TIM_Base_SetConfig+0x62>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4a23      	ldr	r2, [pc, #140]	; (800574c <TIM_Base_SetConfig+0xdc>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d007      	beq.n	80056d2 <TIM_Base_SetConfig+0x62>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	4a22      	ldr	r2, [pc, #136]	; (8005750 <TIM_Base_SetConfig+0xe0>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d003      	beq.n	80056d2 <TIM_Base_SetConfig+0x62>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4a21      	ldr	r2, [pc, #132]	; (8005754 <TIM_Base_SetConfig+0xe4>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d108      	bne.n	80056e4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	4a20      	ldr	r2, [pc, #128]	; (8005758 <TIM_Base_SetConfig+0xe8>)
 80056d6:	4013      	ands	r3, r2
 80056d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	68db      	ldr	r3, [r3, #12]
 80056de:	68fa      	ldr	r2, [r7, #12]
 80056e0:	4313      	orrs	r3, r2
 80056e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2280      	movs	r2, #128	; 0x80
 80056e8:	4393      	bics	r3, r2
 80056ea:	001a      	movs	r2, r3
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	695b      	ldr	r3, [r3, #20]
 80056f0:	4313      	orrs	r3, r2
 80056f2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	68fa      	ldr	r2, [r7, #12]
 80056f8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	689a      	ldr	r2, [r3, #8]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4a0c      	ldr	r2, [pc, #48]	; (8005740 <TIM_Base_SetConfig+0xd0>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d00b      	beq.n	800572a <TIM_Base_SetConfig+0xba>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	4a0d      	ldr	r2, [pc, #52]	; (800574c <TIM_Base_SetConfig+0xdc>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d007      	beq.n	800572a <TIM_Base_SetConfig+0xba>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	4a0c      	ldr	r2, [pc, #48]	; (8005750 <TIM_Base_SetConfig+0xe0>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d003      	beq.n	800572a <TIM_Base_SetConfig+0xba>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4a0b      	ldr	r2, [pc, #44]	; (8005754 <TIM_Base_SetConfig+0xe4>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d103      	bne.n	8005732 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	691a      	ldr	r2, [r3, #16]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2201      	movs	r2, #1
 8005736:	615a      	str	r2, [r3, #20]
}
 8005738:	46c0      	nop			; (mov r8, r8)
 800573a:	46bd      	mov	sp, r7
 800573c:	b004      	add	sp, #16
 800573e:	bd80      	pop	{r7, pc}
 8005740:	40012c00 	.word	0x40012c00
 8005744:	40000400 	.word	0x40000400
 8005748:	40002000 	.word	0x40002000
 800574c:	40014000 	.word	0x40014000
 8005750:	40014400 	.word	0x40014400
 8005754:	40014800 	.word	0x40014800
 8005758:	fffffcff 	.word	0xfffffcff

0800575c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b086      	sub	sp, #24
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
 8005764:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6a1b      	ldr	r3, [r3, #32]
 800576a:	2201      	movs	r2, #1
 800576c:	4393      	bics	r3, r2
 800576e:	001a      	movs	r2, r3
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6a1b      	ldr	r3, [r3, #32]
 8005778:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	699b      	ldr	r3, [r3, #24]
 8005784:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2270      	movs	r2, #112	; 0x70
 800578a:	4393      	bics	r3, r2
 800578c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2203      	movs	r2, #3
 8005792:	4393      	bics	r3, r2
 8005794:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	68fa      	ldr	r2, [r7, #12]
 800579c:	4313      	orrs	r3, r2
 800579e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	2202      	movs	r2, #2
 80057a4:	4393      	bics	r3, r2
 80057a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	697a      	ldr	r2, [r7, #20]
 80057ae:	4313      	orrs	r3, r2
 80057b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	4a27      	ldr	r2, [pc, #156]	; (8005854 <TIM_OC1_SetConfig+0xf8>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d00b      	beq.n	80057d2 <TIM_OC1_SetConfig+0x76>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	4a26      	ldr	r2, [pc, #152]	; (8005858 <TIM_OC1_SetConfig+0xfc>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d007      	beq.n	80057d2 <TIM_OC1_SetConfig+0x76>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4a25      	ldr	r2, [pc, #148]	; (800585c <TIM_OC1_SetConfig+0x100>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d003      	beq.n	80057d2 <TIM_OC1_SetConfig+0x76>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	4a24      	ldr	r2, [pc, #144]	; (8005860 <TIM_OC1_SetConfig+0x104>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d10c      	bne.n	80057ec <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	2208      	movs	r2, #8
 80057d6:	4393      	bics	r3, r2
 80057d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	68db      	ldr	r3, [r3, #12]
 80057de:	697a      	ldr	r2, [r7, #20]
 80057e0:	4313      	orrs	r3, r2
 80057e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	2204      	movs	r2, #4
 80057e8:	4393      	bics	r3, r2
 80057ea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	4a19      	ldr	r2, [pc, #100]	; (8005854 <TIM_OC1_SetConfig+0xf8>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d00b      	beq.n	800580c <TIM_OC1_SetConfig+0xb0>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	4a18      	ldr	r2, [pc, #96]	; (8005858 <TIM_OC1_SetConfig+0xfc>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d007      	beq.n	800580c <TIM_OC1_SetConfig+0xb0>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	4a17      	ldr	r2, [pc, #92]	; (800585c <TIM_OC1_SetConfig+0x100>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d003      	beq.n	800580c <TIM_OC1_SetConfig+0xb0>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	4a16      	ldr	r2, [pc, #88]	; (8005860 <TIM_OC1_SetConfig+0x104>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d111      	bne.n	8005830 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	4a15      	ldr	r2, [pc, #84]	; (8005864 <TIM_OC1_SetConfig+0x108>)
 8005810:	4013      	ands	r3, r2
 8005812:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	4a14      	ldr	r2, [pc, #80]	; (8005868 <TIM_OC1_SetConfig+0x10c>)
 8005818:	4013      	ands	r3, r2
 800581a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	695b      	ldr	r3, [r3, #20]
 8005820:	693a      	ldr	r2, [r7, #16]
 8005822:	4313      	orrs	r3, r2
 8005824:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	699b      	ldr	r3, [r3, #24]
 800582a:	693a      	ldr	r2, [r7, #16]
 800582c:	4313      	orrs	r3, r2
 800582e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	693a      	ldr	r2, [r7, #16]
 8005834:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	68fa      	ldr	r2, [r7, #12]
 800583a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	685a      	ldr	r2, [r3, #4]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	697a      	ldr	r2, [r7, #20]
 8005848:	621a      	str	r2, [r3, #32]
}
 800584a:	46c0      	nop			; (mov r8, r8)
 800584c:	46bd      	mov	sp, r7
 800584e:	b006      	add	sp, #24
 8005850:	bd80      	pop	{r7, pc}
 8005852:	46c0      	nop			; (mov r8, r8)
 8005854:	40012c00 	.word	0x40012c00
 8005858:	40014000 	.word	0x40014000
 800585c:	40014400 	.word	0x40014400
 8005860:	40014800 	.word	0x40014800
 8005864:	fffffeff 	.word	0xfffffeff
 8005868:	fffffdff 	.word	0xfffffdff

0800586c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b086      	sub	sp, #24
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6a1b      	ldr	r3, [r3, #32]
 800587a:	2210      	movs	r2, #16
 800587c:	4393      	bics	r3, r2
 800587e:	001a      	movs	r2, r3
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6a1b      	ldr	r3, [r3, #32]
 8005888:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	699b      	ldr	r3, [r3, #24]
 8005894:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	4a2e      	ldr	r2, [pc, #184]	; (8005954 <TIM_OC2_SetConfig+0xe8>)
 800589a:	4013      	ands	r3, r2
 800589c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	4a2d      	ldr	r2, [pc, #180]	; (8005958 <TIM_OC2_SetConfig+0xec>)
 80058a2:	4013      	ands	r3, r2
 80058a4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	021b      	lsls	r3, r3, #8
 80058ac:	68fa      	ldr	r2, [r7, #12]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	2220      	movs	r2, #32
 80058b6:	4393      	bics	r3, r2
 80058b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	011b      	lsls	r3, r3, #4
 80058c0:	697a      	ldr	r2, [r7, #20]
 80058c2:	4313      	orrs	r3, r2
 80058c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	4a24      	ldr	r2, [pc, #144]	; (800595c <TIM_OC2_SetConfig+0xf0>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d10d      	bne.n	80058ea <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	2280      	movs	r2, #128	; 0x80
 80058d2:	4393      	bics	r3, r2
 80058d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	68db      	ldr	r3, [r3, #12]
 80058da:	011b      	lsls	r3, r3, #4
 80058dc:	697a      	ldr	r2, [r7, #20]
 80058de:	4313      	orrs	r3, r2
 80058e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	2240      	movs	r2, #64	; 0x40
 80058e6:	4393      	bics	r3, r2
 80058e8:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	4a1b      	ldr	r2, [pc, #108]	; (800595c <TIM_OC2_SetConfig+0xf0>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d00b      	beq.n	800590a <TIM_OC2_SetConfig+0x9e>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	4a1a      	ldr	r2, [pc, #104]	; (8005960 <TIM_OC2_SetConfig+0xf4>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d007      	beq.n	800590a <TIM_OC2_SetConfig+0x9e>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4a19      	ldr	r2, [pc, #100]	; (8005964 <TIM_OC2_SetConfig+0xf8>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d003      	beq.n	800590a <TIM_OC2_SetConfig+0x9e>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4a18      	ldr	r2, [pc, #96]	; (8005968 <TIM_OC2_SetConfig+0xfc>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d113      	bne.n	8005932 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	4a17      	ldr	r2, [pc, #92]	; (800596c <TIM_OC2_SetConfig+0x100>)
 800590e:	4013      	ands	r3, r2
 8005910:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	4a16      	ldr	r2, [pc, #88]	; (8005970 <TIM_OC2_SetConfig+0x104>)
 8005916:	4013      	ands	r3, r2
 8005918:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	695b      	ldr	r3, [r3, #20]
 800591e:	009b      	lsls	r3, r3, #2
 8005920:	693a      	ldr	r2, [r7, #16]
 8005922:	4313      	orrs	r3, r2
 8005924:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	699b      	ldr	r3, [r3, #24]
 800592a:	009b      	lsls	r3, r3, #2
 800592c:	693a      	ldr	r2, [r7, #16]
 800592e:	4313      	orrs	r3, r2
 8005930:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	693a      	ldr	r2, [r7, #16]
 8005936:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	68fa      	ldr	r2, [r7, #12]
 800593c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	685a      	ldr	r2, [r3, #4]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	697a      	ldr	r2, [r7, #20]
 800594a:	621a      	str	r2, [r3, #32]
}
 800594c:	46c0      	nop			; (mov r8, r8)
 800594e:	46bd      	mov	sp, r7
 8005950:	b006      	add	sp, #24
 8005952:	bd80      	pop	{r7, pc}
 8005954:	ffff8fff 	.word	0xffff8fff
 8005958:	fffffcff 	.word	0xfffffcff
 800595c:	40012c00 	.word	0x40012c00
 8005960:	40014000 	.word	0x40014000
 8005964:	40014400 	.word	0x40014400
 8005968:	40014800 	.word	0x40014800
 800596c:	fffffbff 	.word	0xfffffbff
 8005970:	fffff7ff 	.word	0xfffff7ff

08005974 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b086      	sub	sp, #24
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6a1b      	ldr	r3, [r3, #32]
 8005982:	4a35      	ldr	r2, [pc, #212]	; (8005a58 <TIM_OC3_SetConfig+0xe4>)
 8005984:	401a      	ands	r2, r3
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6a1b      	ldr	r3, [r3, #32]
 800598e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	69db      	ldr	r3, [r3, #28]
 800599a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2270      	movs	r2, #112	; 0x70
 80059a0:	4393      	bics	r3, r2
 80059a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2203      	movs	r2, #3
 80059a8:	4393      	bics	r3, r2
 80059aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	68fa      	ldr	r2, [r7, #12]
 80059b2:	4313      	orrs	r3, r2
 80059b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	4a28      	ldr	r2, [pc, #160]	; (8005a5c <TIM_OC3_SetConfig+0xe8>)
 80059ba:	4013      	ands	r3, r2
 80059bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	021b      	lsls	r3, r3, #8
 80059c4:	697a      	ldr	r2, [r7, #20]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4a24      	ldr	r2, [pc, #144]	; (8005a60 <TIM_OC3_SetConfig+0xec>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d10d      	bne.n	80059ee <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	4a23      	ldr	r2, [pc, #140]	; (8005a64 <TIM_OC3_SetConfig+0xf0>)
 80059d6:	4013      	ands	r3, r2
 80059d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	68db      	ldr	r3, [r3, #12]
 80059de:	021b      	lsls	r3, r3, #8
 80059e0:	697a      	ldr	r2, [r7, #20]
 80059e2:	4313      	orrs	r3, r2
 80059e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	4a1f      	ldr	r2, [pc, #124]	; (8005a68 <TIM_OC3_SetConfig+0xf4>)
 80059ea:	4013      	ands	r3, r2
 80059ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	4a1b      	ldr	r2, [pc, #108]	; (8005a60 <TIM_OC3_SetConfig+0xec>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d00b      	beq.n	8005a0e <TIM_OC3_SetConfig+0x9a>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	4a1c      	ldr	r2, [pc, #112]	; (8005a6c <TIM_OC3_SetConfig+0xf8>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d007      	beq.n	8005a0e <TIM_OC3_SetConfig+0x9a>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	4a1b      	ldr	r2, [pc, #108]	; (8005a70 <TIM_OC3_SetConfig+0xfc>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d003      	beq.n	8005a0e <TIM_OC3_SetConfig+0x9a>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	4a1a      	ldr	r2, [pc, #104]	; (8005a74 <TIM_OC3_SetConfig+0x100>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d113      	bne.n	8005a36 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	4a19      	ldr	r2, [pc, #100]	; (8005a78 <TIM_OC3_SetConfig+0x104>)
 8005a12:	4013      	ands	r3, r2
 8005a14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	4a18      	ldr	r2, [pc, #96]	; (8005a7c <TIM_OC3_SetConfig+0x108>)
 8005a1a:	4013      	ands	r3, r2
 8005a1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	695b      	ldr	r3, [r3, #20]
 8005a22:	011b      	lsls	r3, r3, #4
 8005a24:	693a      	ldr	r2, [r7, #16]
 8005a26:	4313      	orrs	r3, r2
 8005a28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	699b      	ldr	r3, [r3, #24]
 8005a2e:	011b      	lsls	r3, r3, #4
 8005a30:	693a      	ldr	r2, [r7, #16]
 8005a32:	4313      	orrs	r3, r2
 8005a34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	693a      	ldr	r2, [r7, #16]
 8005a3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	68fa      	ldr	r2, [r7, #12]
 8005a40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	685a      	ldr	r2, [r3, #4]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	697a      	ldr	r2, [r7, #20]
 8005a4e:	621a      	str	r2, [r3, #32]
}
 8005a50:	46c0      	nop			; (mov r8, r8)
 8005a52:	46bd      	mov	sp, r7
 8005a54:	b006      	add	sp, #24
 8005a56:	bd80      	pop	{r7, pc}
 8005a58:	fffffeff 	.word	0xfffffeff
 8005a5c:	fffffdff 	.word	0xfffffdff
 8005a60:	40012c00 	.word	0x40012c00
 8005a64:	fffff7ff 	.word	0xfffff7ff
 8005a68:	fffffbff 	.word	0xfffffbff
 8005a6c:	40014000 	.word	0x40014000
 8005a70:	40014400 	.word	0x40014400
 8005a74:	40014800 	.word	0x40014800
 8005a78:	ffffefff 	.word	0xffffefff
 8005a7c:	ffffdfff 	.word	0xffffdfff

08005a80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b086      	sub	sp, #24
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6a1b      	ldr	r3, [r3, #32]
 8005a8e:	4a28      	ldr	r2, [pc, #160]	; (8005b30 <TIM_OC4_SetConfig+0xb0>)
 8005a90:	401a      	ands	r2, r3
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6a1b      	ldr	r3, [r3, #32]
 8005a9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	69db      	ldr	r3, [r3, #28]
 8005aa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	4a22      	ldr	r2, [pc, #136]	; (8005b34 <TIM_OC4_SetConfig+0xb4>)
 8005aac:	4013      	ands	r3, r2
 8005aae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	4a21      	ldr	r2, [pc, #132]	; (8005b38 <TIM_OC4_SetConfig+0xb8>)
 8005ab4:	4013      	ands	r3, r2
 8005ab6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	021b      	lsls	r3, r3, #8
 8005abe:	68fa      	ldr	r2, [r7, #12]
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	4a1d      	ldr	r2, [pc, #116]	; (8005b3c <TIM_OC4_SetConfig+0xbc>)
 8005ac8:	4013      	ands	r3, r2
 8005aca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	031b      	lsls	r3, r3, #12
 8005ad2:	693a      	ldr	r2, [r7, #16]
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4a19      	ldr	r2, [pc, #100]	; (8005b40 <TIM_OC4_SetConfig+0xc0>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d00b      	beq.n	8005af8 <TIM_OC4_SetConfig+0x78>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	4a18      	ldr	r2, [pc, #96]	; (8005b44 <TIM_OC4_SetConfig+0xc4>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d007      	beq.n	8005af8 <TIM_OC4_SetConfig+0x78>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	4a17      	ldr	r2, [pc, #92]	; (8005b48 <TIM_OC4_SetConfig+0xc8>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d003      	beq.n	8005af8 <TIM_OC4_SetConfig+0x78>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	4a16      	ldr	r2, [pc, #88]	; (8005b4c <TIM_OC4_SetConfig+0xcc>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d109      	bne.n	8005b0c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	4a15      	ldr	r2, [pc, #84]	; (8005b50 <TIM_OC4_SetConfig+0xd0>)
 8005afc:	4013      	ands	r3, r2
 8005afe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	695b      	ldr	r3, [r3, #20]
 8005b04:	019b      	lsls	r3, r3, #6
 8005b06:	697a      	ldr	r2, [r7, #20]
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	697a      	ldr	r2, [r7, #20]
 8005b10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	68fa      	ldr	r2, [r7, #12]
 8005b16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	685a      	ldr	r2, [r3, #4]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	693a      	ldr	r2, [r7, #16]
 8005b24:	621a      	str	r2, [r3, #32]
}
 8005b26:	46c0      	nop			; (mov r8, r8)
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	b006      	add	sp, #24
 8005b2c:	bd80      	pop	{r7, pc}
 8005b2e:	46c0      	nop			; (mov r8, r8)
 8005b30:	ffffefff 	.word	0xffffefff
 8005b34:	ffff8fff 	.word	0xffff8fff
 8005b38:	fffffcff 	.word	0xfffffcff
 8005b3c:	ffffdfff 	.word	0xffffdfff
 8005b40:	40012c00 	.word	0x40012c00
 8005b44:	40014000 	.word	0x40014000
 8005b48:	40014400 	.word	0x40014400
 8005b4c:	40014800 	.word	0x40014800
 8005b50:	ffffbfff 	.word	0xffffbfff

08005b54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b086      	sub	sp, #24
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	60f8      	str	r0, [r7, #12]
 8005b5c:	60b9      	str	r1, [r7, #8]
 8005b5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	6a1b      	ldr	r3, [r3, #32]
 8005b64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	6a1b      	ldr	r3, [r3, #32]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	4393      	bics	r3, r2
 8005b6e:	001a      	movs	r2, r3
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	699b      	ldr	r3, [r3, #24]
 8005b78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	22f0      	movs	r2, #240	; 0xf0
 8005b7e:	4393      	bics	r3, r2
 8005b80:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	011b      	lsls	r3, r3, #4
 8005b86:	693a      	ldr	r2, [r7, #16]
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	220a      	movs	r2, #10
 8005b90:	4393      	bics	r3, r2
 8005b92:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b94:	697a      	ldr	r2, [r7, #20]
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	693a      	ldr	r2, [r7, #16]
 8005ba0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	697a      	ldr	r2, [r7, #20]
 8005ba6:	621a      	str	r2, [r3, #32]
}
 8005ba8:	46c0      	nop			; (mov r8, r8)
 8005baa:	46bd      	mov	sp, r7
 8005bac:	b006      	add	sp, #24
 8005bae:	bd80      	pop	{r7, pc}

08005bb0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b086      	sub	sp, #24
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	60f8      	str	r0, [r7, #12]
 8005bb8:	60b9      	str	r1, [r7, #8]
 8005bba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	6a1b      	ldr	r3, [r3, #32]
 8005bc0:	2210      	movs	r2, #16
 8005bc2:	4393      	bics	r3, r2
 8005bc4:	001a      	movs	r2, r3
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	699b      	ldr	r3, [r3, #24]
 8005bce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	6a1b      	ldr	r3, [r3, #32]
 8005bd4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	4a0d      	ldr	r2, [pc, #52]	; (8005c10 <TIM_TI2_ConfigInputStage+0x60>)
 8005bda:	4013      	ands	r3, r2
 8005bdc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	031b      	lsls	r3, r3, #12
 8005be2:	697a      	ldr	r2, [r7, #20]
 8005be4:	4313      	orrs	r3, r2
 8005be6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	22a0      	movs	r2, #160	; 0xa0
 8005bec:	4393      	bics	r3, r2
 8005bee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	011b      	lsls	r3, r3, #4
 8005bf4:	693a      	ldr	r2, [r7, #16]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	697a      	ldr	r2, [r7, #20]
 8005bfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	693a      	ldr	r2, [r7, #16]
 8005c04:	621a      	str	r2, [r3, #32]
}
 8005c06:	46c0      	nop			; (mov r8, r8)
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	b006      	add	sp, #24
 8005c0c:	bd80      	pop	{r7, pc}
 8005c0e:	46c0      	nop			; (mov r8, r8)
 8005c10:	ffff0fff 	.word	0xffff0fff

08005c14 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b084      	sub	sp, #16
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2270      	movs	r2, #112	; 0x70
 8005c28:	4393      	bics	r3, r2
 8005c2a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c2c:	683a      	ldr	r2, [r7, #0]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	4313      	orrs	r3, r2
 8005c32:	2207      	movs	r2, #7
 8005c34:	4313      	orrs	r3, r2
 8005c36:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	68fa      	ldr	r2, [r7, #12]
 8005c3c:	609a      	str	r2, [r3, #8]
}
 8005c3e:	46c0      	nop			; (mov r8, r8)
 8005c40:	46bd      	mov	sp, r7
 8005c42:	b004      	add	sp, #16
 8005c44:	bd80      	pop	{r7, pc}
	...

08005c48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b086      	sub	sp, #24
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	60f8      	str	r0, [r7, #12]
 8005c50:	60b9      	str	r1, [r7, #8]
 8005c52:	607a      	str	r2, [r7, #4]
 8005c54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	4a09      	ldr	r2, [pc, #36]	; (8005c84 <TIM_ETR_SetConfig+0x3c>)
 8005c60:	4013      	ands	r3, r2
 8005c62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	021a      	lsls	r2, r3, #8
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	431a      	orrs	r2, r3
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	697a      	ldr	r2, [r7, #20]
 8005c72:	4313      	orrs	r3, r2
 8005c74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	697a      	ldr	r2, [r7, #20]
 8005c7a:	609a      	str	r2, [r3, #8]
}
 8005c7c:	46c0      	nop			; (mov r8, r8)
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	b006      	add	sp, #24
 8005c82:	bd80      	pop	{r7, pc}
 8005c84:	ffff00ff 	.word	0xffff00ff

08005c88 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b086      	sub	sp, #24
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	60f8      	str	r0, [r7, #12]
 8005c90:	60b9      	str	r1, [r7, #8]
 8005c92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	221f      	movs	r2, #31
 8005c98:	4013      	ands	r3, r2
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	409a      	lsls	r2, r3
 8005c9e:	0013      	movs	r3, r2
 8005ca0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	6a1b      	ldr	r3, [r3, #32]
 8005ca6:	697a      	ldr	r2, [r7, #20]
 8005ca8:	43d2      	mvns	r2, r2
 8005caa:	401a      	ands	r2, r3
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	6a1a      	ldr	r2, [r3, #32]
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	211f      	movs	r1, #31
 8005cb8:	400b      	ands	r3, r1
 8005cba:	6879      	ldr	r1, [r7, #4]
 8005cbc:	4099      	lsls	r1, r3
 8005cbe:	000b      	movs	r3, r1
 8005cc0:	431a      	orrs	r2, r3
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	621a      	str	r2, [r3, #32]
}
 8005cc6:	46c0      	nop			; (mov r8, r8)
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	b006      	add	sp, #24
 8005ccc:	bd80      	pop	{r7, pc}
	...

08005cd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b084      	sub	sp, #16
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	223c      	movs	r2, #60	; 0x3c
 8005cde:	5c9b      	ldrb	r3, [r3, r2]
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d101      	bne.n	8005ce8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ce4:	2302      	movs	r3, #2
 8005ce6:	e041      	b.n	8005d6c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	223c      	movs	r2, #60	; 0x3c
 8005cec:	2101      	movs	r1, #1
 8005cee:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	223d      	movs	r2, #61	; 0x3d
 8005cf4:	2102      	movs	r1, #2
 8005cf6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2270      	movs	r2, #112	; 0x70
 8005d0c:	4393      	bics	r3, r2
 8005d0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	68fa      	ldr	r2, [r7, #12]
 8005d16:	4313      	orrs	r3, r2
 8005d18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	68fa      	ldr	r2, [r7, #12]
 8005d20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a13      	ldr	r2, [pc, #76]	; (8005d74 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d009      	beq.n	8005d40 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a11      	ldr	r2, [pc, #68]	; (8005d78 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d004      	beq.n	8005d40 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a10      	ldr	r2, [pc, #64]	; (8005d7c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d10c      	bne.n	8005d5a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	2280      	movs	r2, #128	; 0x80
 8005d44:	4393      	bics	r3, r2
 8005d46:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	68ba      	ldr	r2, [r7, #8]
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	68ba      	ldr	r2, [r7, #8]
 8005d58:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	223d      	movs	r2, #61	; 0x3d
 8005d5e:	2101      	movs	r1, #1
 8005d60:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	223c      	movs	r2, #60	; 0x3c
 8005d66:	2100      	movs	r1, #0
 8005d68:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005d6a:	2300      	movs	r3, #0
}
 8005d6c:	0018      	movs	r0, r3
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	b004      	add	sp, #16
 8005d72:	bd80      	pop	{r7, pc}
 8005d74:	40012c00 	.word	0x40012c00
 8005d78:	40000400 	.word	0x40000400
 8005d7c:	40014000 	.word	0x40014000

08005d80 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b084      	sub	sp, #16
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	223c      	movs	r2, #60	; 0x3c
 8005d92:	5c9b      	ldrb	r3, [r3, r2]
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d101      	bne.n	8005d9c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005d98:	2302      	movs	r3, #2
 8005d9a:	e03e      	b.n	8005e1a <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	223c      	movs	r2, #60	; 0x3c
 8005da0:	2101      	movs	r1, #1
 8005da2:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	22ff      	movs	r2, #255	; 0xff
 8005da8:	4393      	bics	r3, r2
 8005daa:	001a      	movs	r2, r3
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	4313      	orrs	r3, r2
 8005db2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	4a1b      	ldr	r2, [pc, #108]	; (8005e24 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8005db8:	401a      	ands	r2, r3
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	4a18      	ldr	r2, [pc, #96]	; (8005e28 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8005dc6:	401a      	ands	r2, r3
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	4a16      	ldr	r2, [pc, #88]	; (8005e2c <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8005dd4:	401a      	ands	r2, r3
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	4a13      	ldr	r2, [pc, #76]	; (8005e30 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8005de2:	401a      	ands	r2, r3
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	691b      	ldr	r3, [r3, #16]
 8005de8:	4313      	orrs	r3, r2
 8005dea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	4a11      	ldr	r2, [pc, #68]	; (8005e34 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8005df0:	401a      	ands	r2, r3
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	695b      	ldr	r3, [r3, #20]
 8005df6:	4313      	orrs	r3, r2
 8005df8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	4a0e      	ldr	r2, [pc, #56]	; (8005e38 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8005dfe:	401a      	ands	r2, r3
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	69db      	ldr	r3, [r3, #28]
 8005e04:	4313      	orrs	r3, r2
 8005e06:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	68fa      	ldr	r2, [r7, #12]
 8005e0e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	223c      	movs	r2, #60	; 0x3c
 8005e14:	2100      	movs	r1, #0
 8005e16:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e18:	2300      	movs	r3, #0
}
 8005e1a:	0018      	movs	r0, r3
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	b004      	add	sp, #16
 8005e20:	bd80      	pop	{r7, pc}
 8005e22:	46c0      	nop			; (mov r8, r8)
 8005e24:	fffffcff 	.word	0xfffffcff
 8005e28:	fffffbff 	.word	0xfffffbff
 8005e2c:	fffff7ff 	.word	0xfffff7ff
 8005e30:	ffffefff 	.word	0xffffefff
 8005e34:	ffffdfff 	.word	0xffffdfff
 8005e38:	ffffbfff 	.word	0xffffbfff

08005e3c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b084      	sub	sp, #16
 8005e40:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e42:	f3ef 8305 	mrs	r3, IPSR
 8005e46:	60bb      	str	r3, [r7, #8]
  return(result);
 8005e48:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d109      	bne.n	8005e62 <osKernelInitialize+0x26>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e4e:	f3ef 8310 	mrs	r3, PRIMASK
 8005e52:	607b      	str	r3, [r7, #4]
  return(result);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d007      	beq.n	8005e6a <osKernelInitialize+0x2e>
 8005e5a:	4b0d      	ldr	r3, [pc, #52]	; (8005e90 <osKernelInitialize+0x54>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	2b02      	cmp	r3, #2
 8005e60:	d103      	bne.n	8005e6a <osKernelInitialize+0x2e>
    stat = osErrorISR;
 8005e62:	2306      	movs	r3, #6
 8005e64:	425b      	negs	r3, r3
 8005e66:	60fb      	str	r3, [r7, #12]
 8005e68:	e00c      	b.n	8005e84 <osKernelInitialize+0x48>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005e6a:	4b09      	ldr	r3, [pc, #36]	; (8005e90 <osKernelInitialize+0x54>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d105      	bne.n	8005e7e <osKernelInitialize+0x42>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8005e72:	4b07      	ldr	r3, [pc, #28]	; (8005e90 <osKernelInitialize+0x54>)
 8005e74:	2201      	movs	r2, #1
 8005e76:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	60fb      	str	r3, [r7, #12]
 8005e7c:	e002      	b.n	8005e84 <osKernelInitialize+0x48>
    } else {
      stat = osError;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	425b      	negs	r3, r3
 8005e82:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005e84:	68fb      	ldr	r3, [r7, #12]
}
 8005e86:	0018      	movs	r0, r3
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	b004      	add	sp, #16
 8005e8c:	bd80      	pop	{r7, pc}
 8005e8e:	46c0      	nop			; (mov r8, r8)
 8005e90:	200000d0 	.word	0x200000d0

08005e94 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005e94:	b5b0      	push	{r4, r5, r7, lr}
 8005e96:	b090      	sub	sp, #64	; 0x40
 8005e98:	af04      	add	r7, sp, #16
 8005e9a:	60f8      	str	r0, [r7, #12]
 8005e9c:	60b9      	str	r1, [r7, #8]
 8005e9e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ea4:	f3ef 8305 	mrs	r3, IPSR
 8005ea8:	61fb      	str	r3, [r7, #28]
  return(result);
 8005eaa:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d000      	beq.n	8005eb2 <osThreadNew+0x1e>
 8005eb0:	e090      	b.n	8005fd4 <osThreadNew+0x140>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005eb2:	f3ef 8310 	mrs	r3, PRIMASK
 8005eb6:	61bb      	str	r3, [r7, #24]
  return(result);
 8005eb8:	69bb      	ldr	r3, [r7, #24]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d004      	beq.n	8005ec8 <osThreadNew+0x34>
 8005ebe:	4b48      	ldr	r3, [pc, #288]	; (8005fe0 <osThreadNew+0x14c>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	2b02      	cmp	r3, #2
 8005ec4:	d100      	bne.n	8005ec8 <osThreadNew+0x34>
 8005ec6:	e085      	b.n	8005fd4 <osThreadNew+0x140>
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d100      	bne.n	8005ed0 <osThreadNew+0x3c>
 8005ece:	e081      	b.n	8005fd4 <osThreadNew+0x140>
    stack = configMINIMAL_STACK_SIZE;
 8005ed0:	2380      	movs	r3, #128	; 0x80
 8005ed2:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8005ed4:	2318      	movs	r3, #24
 8005ed6:	627b      	str	r3, [r7, #36]	; 0x24

    empty = '\0';
 8005ed8:	2117      	movs	r1, #23
 8005eda:	187b      	adds	r3, r7, r1
 8005edc:	2200      	movs	r2, #0
 8005ede:	701a      	strb	r2, [r3, #0]
    name  = &empty;
 8005ee0:	187b      	adds	r3, r7, r1
 8005ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem   = -1;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	425b      	negs	r3, r3
 8005ee8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d044      	beq.n	8005f7a <osThreadNew+0xe6>
      if (attr->name != NULL) {
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d002      	beq.n	8005efe <osThreadNew+0x6a>
        name = attr->name;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	699b      	ldr	r3, [r3, #24]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d002      	beq.n	8005f0c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	699b      	ldr	r3, [r3, #24]
 8005f0a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d007      	beq.n	8005f22 <osThreadNew+0x8e>
 8005f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f14:	2b38      	cmp	r3, #56	; 0x38
 8005f16:	d804      	bhi.n	8005f22 <osThreadNew+0x8e>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	4013      	ands	r3, r2
 8005f20:	d001      	beq.n	8005f26 <osThreadNew+0x92>
        return (NULL);
 8005f22:	2300      	movs	r3, #0
 8005f24:	e057      	b.n	8005fd6 <osThreadNew+0x142>
      }

      if (attr->stack_size > 0U) {
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	695b      	ldr	r3, [r3, #20]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d003      	beq.n	8005f36 <osThreadNew+0xa2>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	695b      	ldr	r3, [r3, #20]
 8005f32:	089b      	lsrs	r3, r3, #2
 8005f34:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	689b      	ldr	r3, [r3, #8]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d00e      	beq.n	8005f5c <osThreadNew+0xc8>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	68db      	ldr	r3, [r3, #12]
 8005f42:	2b5b      	cmp	r3, #91	; 0x5b
 8005f44:	d90a      	bls.n	8005f5c <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d006      	beq.n	8005f5c <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	695b      	ldr	r3, [r3, #20]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d002      	beq.n	8005f5c <osThreadNew+0xc8>
        mem = 1;
 8005f56:	2301      	movs	r3, #1
 8005f58:	623b      	str	r3, [r7, #32]
 8005f5a:	e010      	b.n	8005f7e <osThreadNew+0xea>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d10c      	bne.n	8005f7e <osThreadNew+0xea>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	68db      	ldr	r3, [r3, #12]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d108      	bne.n	8005f7e <osThreadNew+0xea>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	691b      	ldr	r3, [r3, #16]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d104      	bne.n	8005f7e <osThreadNew+0xea>
          mem = 0;
 8005f74:	2300      	movs	r3, #0
 8005f76:	623b      	str	r3, [r7, #32]
 8005f78:	e001      	b.n	8005f7e <osThreadNew+0xea>
        }
      }
    }
    else {
      mem = 0;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005f7e:	6a3b      	ldr	r3, [r7, #32]
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d112      	bne.n	8005faa <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	691a      	ldr	r2, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	689b      	ldr	r3, [r3, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005f8c:	68bd      	ldr	r5, [r7, #8]
 8005f8e:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8005f90:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f92:	68f8      	ldr	r0, [r7, #12]
 8005f94:	9302      	str	r3, [sp, #8]
 8005f96:	9201      	str	r2, [sp, #4]
 8005f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9a:	9300      	str	r3, [sp, #0]
 8005f9c:	002b      	movs	r3, r5
 8005f9e:	0022      	movs	r2, r4
 8005fa0:	f000 ff0b 	bl	8006dba <xTaskCreateStatic>
 8005fa4:	0003      	movs	r3, r0
 8005fa6:	613b      	str	r3, [r7, #16]
 8005fa8:	e014      	b.n	8005fd4 <osThreadNew+0x140>
    }
    else {
      if (mem == 0) {
 8005faa:	6a3b      	ldr	r3, [r7, #32]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d111      	bne.n	8005fd4 <osThreadNew+0x140>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb2:	b29a      	uxth	r2, r3
 8005fb4:	68bc      	ldr	r4, [r7, #8]
 8005fb6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005fb8:	68f8      	ldr	r0, [r7, #12]
 8005fba:	2310      	movs	r3, #16
 8005fbc:	18fb      	adds	r3, r7, r3
 8005fbe:	9301      	str	r3, [sp, #4]
 8005fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc2:	9300      	str	r3, [sp, #0]
 8005fc4:	0023      	movs	r3, r4
 8005fc6:	f000 ff3b 	bl	8006e40 <xTaskCreate>
 8005fca:	0003      	movs	r3, r0
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d001      	beq.n	8005fd4 <osThreadNew+0x140>
          hTask = NULL;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005fd4:	693b      	ldr	r3, [r7, #16]
}
 8005fd6:	0018      	movs	r0, r3
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	b00c      	add	sp, #48	; 0x30
 8005fdc:	bdb0      	pop	{r4, r5, r7, pc}
 8005fde:	46c0      	nop			; (mov r8, r8)
 8005fe0:	200000d0 	.word	0x200000d0

08005fe4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b086      	sub	sp, #24
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005fec:	f3ef 8305 	mrs	r3, IPSR
 8005ff0:	613b      	str	r3, [r7, #16]
  return(result);
 8005ff2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d109      	bne.n	800600c <osDelay+0x28>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ff8:	f3ef 8310 	mrs	r3, PRIMASK
 8005ffc:	60fb      	str	r3, [r7, #12]
  return(result);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d007      	beq.n	8006014 <osDelay+0x30>
 8006004:	4b0a      	ldr	r3, [pc, #40]	; (8006030 <osDelay+0x4c>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	2b02      	cmp	r3, #2
 800600a:	d103      	bne.n	8006014 <osDelay+0x30>
    stat = osErrorISR;
 800600c:	2306      	movs	r3, #6
 800600e:	425b      	negs	r3, r3
 8006010:	617b      	str	r3, [r7, #20]
 8006012:	e008      	b.n	8006026 <osDelay+0x42>
  }
  else {
    stat = osOK;
 8006014:	2300      	movs	r3, #0
 8006016:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d003      	beq.n	8006026 <osDelay+0x42>
      vTaskDelay(ticks);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	0018      	movs	r0, r3
 8006022:	f001 f843 	bl	80070ac <vTaskDelay>
    }
  }

  return (stat);
 8006026:	697b      	ldr	r3, [r7, #20]
}
 8006028:	0018      	movs	r0, r3
 800602a:	46bd      	mov	sp, r7
 800602c:	b006      	add	sp, #24
 800602e:	bd80      	pop	{r7, pc}
 8006030:	200000d0 	.word	0x200000d0

08006034 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006034:	b580      	push	{r7, lr}
 8006036:	b084      	sub	sp, #16
 8006038:	af00      	add	r7, sp, #0
 800603a:	60f8      	str	r0, [r7, #12]
 800603c:	60b9      	str	r1, [r7, #8]
 800603e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	4a06      	ldr	r2, [pc, #24]	; (800605c <vApplicationGetIdleTaskMemory+0x28>)
 8006044:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	4a05      	ldr	r2, [pc, #20]	; (8006060 <vApplicationGetIdleTaskMemory+0x2c>)
 800604a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2280      	movs	r2, #128	; 0x80
 8006050:	601a      	str	r2, [r3, #0]
}
 8006052:	46c0      	nop			; (mov r8, r8)
 8006054:	46bd      	mov	sp, r7
 8006056:	b004      	add	sp, #16
 8006058:	bd80      	pop	{r7, pc}
 800605a:	46c0      	nop			; (mov r8, r8)
 800605c:	200000d4 	.word	0x200000d4
 8006060:	20000130 	.word	0x20000130

08006064 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006064:	b580      	push	{r7, lr}
 8006066:	b084      	sub	sp, #16
 8006068:	af00      	add	r7, sp, #0
 800606a:	60f8      	str	r0, [r7, #12]
 800606c:	60b9      	str	r1, [r7, #8]
 800606e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	4a06      	ldr	r2, [pc, #24]	; (800608c <vApplicationGetTimerTaskMemory+0x28>)
 8006074:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	4a05      	ldr	r2, [pc, #20]	; (8006090 <vApplicationGetTimerTaskMemory+0x2c>)
 800607a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2280      	movs	r2, #128	; 0x80
 8006080:	0052      	lsls	r2, r2, #1
 8006082:	601a      	str	r2, [r3, #0]
}
 8006084:	46c0      	nop			; (mov r8, r8)
 8006086:	46bd      	mov	sp, r7
 8006088:	b004      	add	sp, #16
 800608a:	bd80      	pop	{r7, pc}
 800608c:	20000330 	.word	0x20000330
 8006090:	2000038c 	.word	0x2000038c

08006094 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b082      	sub	sp, #8
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	3308      	adds	r3, #8
 80060a0:	001a      	movs	r2, r3
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2201      	movs	r2, #1
 80060aa:	4252      	negs	r2, r2
 80060ac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	3308      	adds	r3, #8
 80060b2:	001a      	movs	r2, r3
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	3308      	adds	r3, #8
 80060bc:	001a      	movs	r2, r3
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2200      	movs	r2, #0
 80060c6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80060c8:	46c0      	nop			; (mov r8, r8)
 80060ca:	46bd      	mov	sp, r7
 80060cc:	b002      	add	sp, #8
 80060ce:	bd80      	pop	{r7, pc}

080060d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b082      	sub	sp, #8
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2200      	movs	r2, #0
 80060dc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80060de:	46c0      	nop			; (mov r8, r8)
 80060e0:	46bd      	mov	sp, r7
 80060e2:	b002      	add	sp, #8
 80060e4:	bd80      	pop	{r7, pc}

080060e6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80060e6:	b580      	push	{r7, lr}
 80060e8:	b084      	sub	sp, #16
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	6078      	str	r0, [r7, #4]
 80060ee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	68fa      	ldr	r2, [r7, #12]
 80060fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	689a      	ldr	r2, [r3, #8]
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	683a      	ldr	r2, [r7, #0]
 800610a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	683a      	ldr	r2, [r7, #0]
 8006110:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	687a      	ldr	r2, [r7, #4]
 8006116:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	1c5a      	adds	r2, r3, #1
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	601a      	str	r2, [r3, #0]
}
 8006122:	46c0      	nop			; (mov r8, r8)
 8006124:	46bd      	mov	sp, r7
 8006126:	b004      	add	sp, #16
 8006128:	bd80      	pop	{r7, pc}

0800612a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800612a:	b580      	push	{r7, lr}
 800612c:	b084      	sub	sp, #16
 800612e:	af00      	add	r7, sp, #0
 8006130:	6078      	str	r0, [r7, #4]
 8006132:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	3301      	adds	r3, #1
 800613e:	d103      	bne.n	8006148 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	691b      	ldr	r3, [r3, #16]
 8006144:	60fb      	str	r3, [r7, #12]
 8006146:	e00c      	b.n	8006162 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	3308      	adds	r3, #8
 800614c:	60fb      	str	r3, [r7, #12]
 800614e:	e002      	b.n	8006156 <vListInsert+0x2c>
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	60fb      	str	r3, [r7, #12]
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	68ba      	ldr	r2, [r7, #8]
 800615e:	429a      	cmp	r2, r3
 8006160:	d2f6      	bcs.n	8006150 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	685a      	ldr	r2, [r3, #4]
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	683a      	ldr	r2, [r7, #0]
 8006170:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	68fa      	ldr	r2, [r7, #12]
 8006176:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	683a      	ldr	r2, [r7, #0]
 800617c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	687a      	ldr	r2, [r7, #4]
 8006182:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	1c5a      	adds	r2, r3, #1
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	601a      	str	r2, [r3, #0]
}
 800618e:	46c0      	nop			; (mov r8, r8)
 8006190:	46bd      	mov	sp, r7
 8006192:	b004      	add	sp, #16
 8006194:	bd80      	pop	{r7, pc}

08006196 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006196:	b580      	push	{r7, lr}
 8006198:	b084      	sub	sp, #16
 800619a:	af00      	add	r7, sp, #0
 800619c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	691b      	ldr	r3, [r3, #16]
 80061a2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	687a      	ldr	r2, [r7, #4]
 80061aa:	6892      	ldr	r2, [r2, #8]
 80061ac:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	689b      	ldr	r3, [r3, #8]
 80061b2:	687a      	ldr	r2, [r7, #4]
 80061b4:	6852      	ldr	r2, [r2, #4]
 80061b6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	687a      	ldr	r2, [r7, #4]
 80061be:	429a      	cmp	r2, r3
 80061c0:	d103      	bne.n	80061ca <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	689a      	ldr	r2, [r3, #8]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2200      	movs	r2, #0
 80061ce:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	1e5a      	subs	r2, r3, #1
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
}
 80061de:	0018      	movs	r0, r3
 80061e0:	46bd      	mov	sp, r7
 80061e2:	b004      	add	sp, #16
 80061e4:	bd80      	pop	{r7, pc}

080061e6 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80061e6:	b580      	push	{r7, lr}
 80061e8:	b084      	sub	sp, #16
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	6078      	str	r0, [r7, #4]
 80061ee:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d101      	bne.n	80061fe <xQueueGenericReset+0x18>
 80061fa:	b672      	cpsid	i
 80061fc:	e7fe      	b.n	80061fc <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 80061fe:	f002 f87f 	bl	8008300 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800620e:	434b      	muls	r3, r1
 8006210:	18d2      	adds	r2, r2, r3
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2200      	movs	r2, #0
 800621a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681a      	ldr	r2, [r3, #0]
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800622c:	1e59      	subs	r1, r3, #1
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006232:	434b      	muls	r3, r1
 8006234:	18d2      	adds	r2, r2, r3
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2244      	movs	r2, #68	; 0x44
 800623e:	21ff      	movs	r1, #255	; 0xff
 8006240:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2245      	movs	r2, #69	; 0x45
 8006246:	21ff      	movs	r1, #255	; 0xff
 8006248:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d10d      	bne.n	800626c <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	691b      	ldr	r3, [r3, #16]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d013      	beq.n	8006280 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	3310      	adds	r3, #16
 800625c:	0018      	movs	r0, r3
 800625e:	f001 f98f 	bl	8007580 <xTaskRemoveFromEventList>
 8006262:	1e03      	subs	r3, r0, #0
 8006264:	d00c      	beq.n	8006280 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006266:	f002 f83b 	bl	80082e0 <vPortYield>
 800626a:	e009      	b.n	8006280 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	3310      	adds	r3, #16
 8006270:	0018      	movs	r0, r3
 8006272:	f7ff ff0f 	bl	8006094 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	3324      	adds	r3, #36	; 0x24
 800627a:	0018      	movs	r0, r3
 800627c:	f7ff ff0a 	bl	8006094 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006280:	f002 f850 	bl	8008324 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006284:	2301      	movs	r3, #1
}
 8006286:	0018      	movs	r0, r3
 8006288:	46bd      	mov	sp, r7
 800628a:	b004      	add	sp, #16
 800628c:	bd80      	pop	{r7, pc}

0800628e <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800628e:	b590      	push	{r4, r7, lr}
 8006290:	b089      	sub	sp, #36	; 0x24
 8006292:	af02      	add	r7, sp, #8
 8006294:	60f8      	str	r0, [r7, #12]
 8006296:	60b9      	str	r1, [r7, #8]
 8006298:	607a      	str	r2, [r7, #4]
 800629a:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d101      	bne.n	80062a6 <xQueueGenericCreateStatic+0x18>
 80062a2:	b672      	cpsid	i
 80062a4:	e7fe      	b.n	80062a4 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d101      	bne.n	80062b0 <xQueueGenericCreateStatic+0x22>
 80062ac:	b672      	cpsid	i
 80062ae:	e7fe      	b.n	80062ae <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d002      	beq.n	80062bc <xQueueGenericCreateStatic+0x2e>
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d001      	beq.n	80062c0 <xQueueGenericCreateStatic+0x32>
 80062bc:	2301      	movs	r3, #1
 80062be:	e000      	b.n	80062c2 <xQueueGenericCreateStatic+0x34>
 80062c0:	2300      	movs	r3, #0
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d101      	bne.n	80062ca <xQueueGenericCreateStatic+0x3c>
 80062c6:	b672      	cpsid	i
 80062c8:	e7fe      	b.n	80062c8 <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d102      	bne.n	80062d6 <xQueueGenericCreateStatic+0x48>
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d101      	bne.n	80062da <xQueueGenericCreateStatic+0x4c>
 80062d6:	2301      	movs	r3, #1
 80062d8:	e000      	b.n	80062dc <xQueueGenericCreateStatic+0x4e>
 80062da:	2300      	movs	r3, #0
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d101      	bne.n	80062e4 <xQueueGenericCreateStatic+0x56>
 80062e0:	b672      	cpsid	i
 80062e2:	e7fe      	b.n	80062e2 <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80062e4:	2350      	movs	r3, #80	; 0x50
 80062e6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	2b50      	cmp	r3, #80	; 0x50
 80062ec:	d001      	beq.n	80062f2 <xQueueGenericCreateStatic+0x64>
 80062ee:	b672      	cpsid	i
 80062f0:	e7fe      	b.n	80062f0 <xQueueGenericCreateStatic+0x62>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d00e      	beq.n	800631a <xQueueGenericCreateStatic+0x8c>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	2246      	movs	r2, #70	; 0x46
 8006300:	2101      	movs	r1, #1
 8006302:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006304:	2328      	movs	r3, #40	; 0x28
 8006306:	18fb      	adds	r3, r7, r3
 8006308:	781c      	ldrb	r4, [r3, #0]
 800630a:	687a      	ldr	r2, [r7, #4]
 800630c:	68b9      	ldr	r1, [r7, #8]
 800630e:	68f8      	ldr	r0, [r7, #12]
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	9300      	str	r3, [sp, #0]
 8006314:	0023      	movs	r3, r4
 8006316:	f000 f83b 	bl	8006390 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800631a:	697b      	ldr	r3, [r7, #20]
	}
 800631c:	0018      	movs	r0, r3
 800631e:	46bd      	mov	sp, r7
 8006320:	b007      	add	sp, #28
 8006322:	bd90      	pop	{r4, r7, pc}

08006324 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006324:	b590      	push	{r4, r7, lr}
 8006326:	b08b      	sub	sp, #44	; 0x2c
 8006328:	af02      	add	r7, sp, #8
 800632a:	60f8      	str	r0, [r7, #12]
 800632c:	60b9      	str	r1, [r7, #8]
 800632e:	1dfb      	adds	r3, r7, #7
 8006330:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d101      	bne.n	800633c <xQueueGenericCreate+0x18>
 8006338:	b672      	cpsid	i
 800633a:	e7fe      	b.n	800633a <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d102      	bne.n	8006348 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006342:	2300      	movs	r3, #0
 8006344:	61fb      	str	r3, [r7, #28]
 8006346:	e003      	b.n	8006350 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	68ba      	ldr	r2, [r7, #8]
 800634c:	4353      	muls	r3, r2
 800634e:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8006350:	69fb      	ldr	r3, [r7, #28]
 8006352:	3350      	adds	r3, #80	; 0x50
 8006354:	0018      	movs	r0, r3
 8006356:	f002 f86b 	bl	8008430 <pvPortMalloc>
 800635a:	0003      	movs	r3, r0
 800635c:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 800635e:	69bb      	ldr	r3, [r7, #24]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d010      	beq.n	8006386 <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8006364:	69bb      	ldr	r3, [r7, #24]
 8006366:	3350      	adds	r3, #80	; 0x50
 8006368:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800636a:	69bb      	ldr	r3, [r7, #24]
 800636c:	2246      	movs	r2, #70	; 0x46
 800636e:	2100      	movs	r1, #0
 8006370:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006372:	1dfb      	adds	r3, r7, #7
 8006374:	781c      	ldrb	r4, [r3, #0]
 8006376:	697a      	ldr	r2, [r7, #20]
 8006378:	68b9      	ldr	r1, [r7, #8]
 800637a:	68f8      	ldr	r0, [r7, #12]
 800637c:	69bb      	ldr	r3, [r7, #24]
 800637e:	9300      	str	r3, [sp, #0]
 8006380:	0023      	movs	r3, r4
 8006382:	f000 f805 	bl	8006390 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006386:	69bb      	ldr	r3, [r7, #24]
	}
 8006388:	0018      	movs	r0, r3
 800638a:	46bd      	mov	sp, r7
 800638c:	b009      	add	sp, #36	; 0x24
 800638e:	bd90      	pop	{r4, r7, pc}

08006390 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b084      	sub	sp, #16
 8006394:	af00      	add	r7, sp, #0
 8006396:	60f8      	str	r0, [r7, #12]
 8006398:	60b9      	str	r1, [r7, #8]
 800639a:	607a      	str	r2, [r7, #4]
 800639c:	001a      	movs	r2, r3
 800639e:	1cfb      	adds	r3, r7, #3
 80063a0:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d103      	bne.n	80063b0 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80063a8:	69bb      	ldr	r3, [r7, #24]
 80063aa:	69ba      	ldr	r2, [r7, #24]
 80063ac:	601a      	str	r2, [r3, #0]
 80063ae:	e002      	b.n	80063b6 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80063b0:	69bb      	ldr	r3, [r7, #24]
 80063b2:	687a      	ldr	r2, [r7, #4]
 80063b4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80063b6:	69bb      	ldr	r3, [r7, #24]
 80063b8:	68fa      	ldr	r2, [r7, #12]
 80063ba:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80063bc:	69bb      	ldr	r3, [r7, #24]
 80063be:	68ba      	ldr	r2, [r7, #8]
 80063c0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80063c2:	69bb      	ldr	r3, [r7, #24]
 80063c4:	2101      	movs	r1, #1
 80063c6:	0018      	movs	r0, r3
 80063c8:	f7ff ff0d 	bl	80061e6 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80063cc:	69bb      	ldr	r3, [r7, #24]
 80063ce:	1cfa      	adds	r2, r7, #3
 80063d0:	214c      	movs	r1, #76	; 0x4c
 80063d2:	7812      	ldrb	r2, [r2, #0]
 80063d4:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80063d6:	46c0      	nop			; (mov r8, r8)
 80063d8:	46bd      	mov	sp, r7
 80063da:	b004      	add	sp, #16
 80063dc:	bd80      	pop	{r7, pc}

080063de <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80063de:	b580      	push	{r7, lr}
 80063e0:	b082      	sub	sp, #8
 80063e2:	af00      	add	r7, sp, #0
 80063e4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d00e      	beq.n	800640a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2200      	movs	r2, #0
 80063f0:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2200      	movs	r2, #0
 80063f6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2200      	movs	r2, #0
 80063fc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	2300      	movs	r3, #0
 8006402:	2200      	movs	r2, #0
 8006404:	2100      	movs	r1, #0
 8006406:	f000 f820 	bl	800644a <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800640a:	46c0      	nop			; (mov r8, r8)
 800640c:	46bd      	mov	sp, r7
 800640e:	b002      	add	sp, #8
 8006410:	bd80      	pop	{r7, pc}

08006412 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006412:	b580      	push	{r7, lr}
 8006414:	b086      	sub	sp, #24
 8006416:	af00      	add	r7, sp, #0
 8006418:	0002      	movs	r2, r0
 800641a:	1dfb      	adds	r3, r7, #7
 800641c:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800641e:	2301      	movs	r3, #1
 8006420:	617b      	str	r3, [r7, #20]
 8006422:	2300      	movs	r3, #0
 8006424:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006426:	1dfb      	adds	r3, r7, #7
 8006428:	781a      	ldrb	r2, [r3, #0]
 800642a:	6939      	ldr	r1, [r7, #16]
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	0018      	movs	r0, r3
 8006430:	f7ff ff78 	bl	8006324 <xQueueGenericCreate>
 8006434:	0003      	movs	r3, r0
 8006436:	60fb      	str	r3, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	0018      	movs	r0, r3
 800643c:	f7ff ffcf 	bl	80063de <prvInitialiseMutex>

		return pxNewQueue;
 8006440:	68fb      	ldr	r3, [r7, #12]
	}
 8006442:	0018      	movs	r0, r3
 8006444:	46bd      	mov	sp, r7
 8006446:	b006      	add	sp, #24
 8006448:	bd80      	pop	{r7, pc}

0800644a <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800644a:	b580      	push	{r7, lr}
 800644c:	b08a      	sub	sp, #40	; 0x28
 800644e:	af00      	add	r7, sp, #0
 8006450:	60f8      	str	r0, [r7, #12]
 8006452:	60b9      	str	r1, [r7, #8]
 8006454:	607a      	str	r2, [r7, #4]
 8006456:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006458:	2300      	movs	r3, #0
 800645a:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8006460:	6a3b      	ldr	r3, [r7, #32]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d101      	bne.n	800646a <xQueueGenericSend+0x20>
 8006466:	b672      	cpsid	i
 8006468:	e7fe      	b.n	8006468 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d103      	bne.n	8006478 <xQueueGenericSend+0x2e>
 8006470:	6a3b      	ldr	r3, [r7, #32]
 8006472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006474:	2b00      	cmp	r3, #0
 8006476:	d101      	bne.n	800647c <xQueueGenericSend+0x32>
 8006478:	2301      	movs	r3, #1
 800647a:	e000      	b.n	800647e <xQueueGenericSend+0x34>
 800647c:	2300      	movs	r3, #0
 800647e:	2b00      	cmp	r3, #0
 8006480:	d101      	bne.n	8006486 <xQueueGenericSend+0x3c>
 8006482:	b672      	cpsid	i
 8006484:	e7fe      	b.n	8006484 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	2b02      	cmp	r3, #2
 800648a:	d103      	bne.n	8006494 <xQueueGenericSend+0x4a>
 800648c:	6a3b      	ldr	r3, [r7, #32]
 800648e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006490:	2b01      	cmp	r3, #1
 8006492:	d101      	bne.n	8006498 <xQueueGenericSend+0x4e>
 8006494:	2301      	movs	r3, #1
 8006496:	e000      	b.n	800649a <xQueueGenericSend+0x50>
 8006498:	2300      	movs	r3, #0
 800649a:	2b00      	cmp	r3, #0
 800649c:	d101      	bne.n	80064a2 <xQueueGenericSend+0x58>
 800649e:	b672      	cpsid	i
 80064a0:	e7fe      	b.n	80064a0 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80064a2:	f001 fa05 	bl	80078b0 <xTaskGetSchedulerState>
 80064a6:	1e03      	subs	r3, r0, #0
 80064a8:	d102      	bne.n	80064b0 <xQueueGenericSend+0x66>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d101      	bne.n	80064b4 <xQueueGenericSend+0x6a>
 80064b0:	2301      	movs	r3, #1
 80064b2:	e000      	b.n	80064b6 <xQueueGenericSend+0x6c>
 80064b4:	2300      	movs	r3, #0
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d101      	bne.n	80064be <xQueueGenericSend+0x74>
 80064ba:	b672      	cpsid	i
 80064bc:	e7fe      	b.n	80064bc <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80064be:	f001 ff1f 	bl	8008300 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80064c2:	6a3b      	ldr	r3, [r7, #32]
 80064c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064c6:	6a3b      	ldr	r3, [r7, #32]
 80064c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064ca:	429a      	cmp	r2, r3
 80064cc:	d302      	bcc.n	80064d4 <xQueueGenericSend+0x8a>
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	2b02      	cmp	r3, #2
 80064d2:	d11e      	bne.n	8006512 <xQueueGenericSend+0xc8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80064d4:	683a      	ldr	r2, [r7, #0]
 80064d6:	68b9      	ldr	r1, [r7, #8]
 80064d8:	6a3b      	ldr	r3, [r7, #32]
 80064da:	0018      	movs	r0, r3
 80064dc:	f000 faf4 	bl	8006ac8 <prvCopyDataToQueue>
 80064e0:	0003      	movs	r3, r0
 80064e2:	61fb      	str	r3, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80064e4:	6a3b      	ldr	r3, [r7, #32]
 80064e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d009      	beq.n	8006500 <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80064ec:	6a3b      	ldr	r3, [r7, #32]
 80064ee:	3324      	adds	r3, #36	; 0x24
 80064f0:	0018      	movs	r0, r3
 80064f2:	f001 f845 	bl	8007580 <xTaskRemoveFromEventList>
 80064f6:	1e03      	subs	r3, r0, #0
 80064f8:	d007      	beq.n	800650a <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80064fa:	f001 fef1 	bl	80082e0 <vPortYield>
 80064fe:	e004      	b.n	800650a <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006500:	69fb      	ldr	r3, [r7, #28]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d001      	beq.n	800650a <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006506:	f001 feeb 	bl	80082e0 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800650a:	f001 ff0b 	bl	8008324 <vPortExitCritical>
				return pdPASS;
 800650e:	2301      	movs	r3, #1
 8006510:	e05b      	b.n	80065ca <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d103      	bne.n	8006520 <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006518:	f001 ff04 	bl	8008324 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800651c:	2300      	movs	r3, #0
 800651e:	e054      	b.n	80065ca <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006522:	2b00      	cmp	r3, #0
 8006524:	d106      	bne.n	8006534 <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006526:	2314      	movs	r3, #20
 8006528:	18fb      	adds	r3, r7, r3
 800652a:	0018      	movs	r0, r3
 800652c:	f001 f884 	bl	8007638 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006530:	2301      	movs	r3, #1
 8006532:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006534:	f001 fef6 	bl	8008324 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006538:	f000 fe32 	bl	80071a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800653c:	f001 fee0 	bl	8008300 <vPortEnterCritical>
 8006540:	6a3b      	ldr	r3, [r7, #32]
 8006542:	2244      	movs	r2, #68	; 0x44
 8006544:	5c9b      	ldrb	r3, [r3, r2]
 8006546:	b25b      	sxtb	r3, r3
 8006548:	3301      	adds	r3, #1
 800654a:	d103      	bne.n	8006554 <xQueueGenericSend+0x10a>
 800654c:	6a3b      	ldr	r3, [r7, #32]
 800654e:	2244      	movs	r2, #68	; 0x44
 8006550:	2100      	movs	r1, #0
 8006552:	5499      	strb	r1, [r3, r2]
 8006554:	6a3b      	ldr	r3, [r7, #32]
 8006556:	2245      	movs	r2, #69	; 0x45
 8006558:	5c9b      	ldrb	r3, [r3, r2]
 800655a:	b25b      	sxtb	r3, r3
 800655c:	3301      	adds	r3, #1
 800655e:	d103      	bne.n	8006568 <xQueueGenericSend+0x11e>
 8006560:	6a3b      	ldr	r3, [r7, #32]
 8006562:	2245      	movs	r2, #69	; 0x45
 8006564:	2100      	movs	r1, #0
 8006566:	5499      	strb	r1, [r3, r2]
 8006568:	f001 fedc 	bl	8008324 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800656c:	1d3a      	adds	r2, r7, #4
 800656e:	2314      	movs	r3, #20
 8006570:	18fb      	adds	r3, r7, r3
 8006572:	0011      	movs	r1, r2
 8006574:	0018      	movs	r0, r3
 8006576:	f001 f873 	bl	8007660 <xTaskCheckForTimeOut>
 800657a:	1e03      	subs	r3, r0, #0
 800657c:	d11e      	bne.n	80065bc <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800657e:	6a3b      	ldr	r3, [r7, #32]
 8006580:	0018      	movs	r0, r3
 8006582:	f000 fba6 	bl	8006cd2 <prvIsQueueFull>
 8006586:	1e03      	subs	r3, r0, #0
 8006588:	d011      	beq.n	80065ae <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800658a:	6a3b      	ldr	r3, [r7, #32]
 800658c:	3310      	adds	r3, #16
 800658e:	687a      	ldr	r2, [r7, #4]
 8006590:	0011      	movs	r1, r2
 8006592:	0018      	movs	r0, r3
 8006594:	f000 ffb0 	bl	80074f8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006598:	6a3b      	ldr	r3, [r7, #32]
 800659a:	0018      	movs	r0, r3
 800659c:	f000 fb25 	bl	8006bea <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80065a0:	f000 fe0a 	bl	80071b8 <xTaskResumeAll>
 80065a4:	1e03      	subs	r3, r0, #0
 80065a6:	d18a      	bne.n	80064be <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 80065a8:	f001 fe9a 	bl	80082e0 <vPortYield>
 80065ac:	e787      	b.n	80064be <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80065ae:	6a3b      	ldr	r3, [r7, #32]
 80065b0:	0018      	movs	r0, r3
 80065b2:	f000 fb1a 	bl	8006bea <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80065b6:	f000 fdff 	bl	80071b8 <xTaskResumeAll>
 80065ba:	e780      	b.n	80064be <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80065bc:	6a3b      	ldr	r3, [r7, #32]
 80065be:	0018      	movs	r0, r3
 80065c0:	f000 fb13 	bl	8006bea <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80065c4:	f000 fdf8 	bl	80071b8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80065c8:	2300      	movs	r3, #0
		}
	}
}
 80065ca:	0018      	movs	r0, r3
 80065cc:	46bd      	mov	sp, r7
 80065ce:	b00a      	add	sp, #40	; 0x28
 80065d0:	bd80      	pop	{r7, pc}

080065d2 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80065d2:	b590      	push	{r4, r7, lr}
 80065d4:	b089      	sub	sp, #36	; 0x24
 80065d6:	af00      	add	r7, sp, #0
 80065d8:	60f8      	str	r0, [r7, #12]
 80065da:	60b9      	str	r1, [r7, #8]
 80065dc:	607a      	str	r2, [r7, #4]
 80065de:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 80065e4:	69bb      	ldr	r3, [r7, #24]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d101      	bne.n	80065ee <xQueueGenericSendFromISR+0x1c>
 80065ea:	b672      	cpsid	i
 80065ec:	e7fe      	b.n	80065ec <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d103      	bne.n	80065fc <xQueueGenericSendFromISR+0x2a>
 80065f4:	69bb      	ldr	r3, [r7, #24]
 80065f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d101      	bne.n	8006600 <xQueueGenericSendFromISR+0x2e>
 80065fc:	2301      	movs	r3, #1
 80065fe:	e000      	b.n	8006602 <xQueueGenericSendFromISR+0x30>
 8006600:	2300      	movs	r3, #0
 8006602:	2b00      	cmp	r3, #0
 8006604:	d101      	bne.n	800660a <xQueueGenericSendFromISR+0x38>
 8006606:	b672      	cpsid	i
 8006608:	e7fe      	b.n	8006608 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	2b02      	cmp	r3, #2
 800660e:	d103      	bne.n	8006618 <xQueueGenericSendFromISR+0x46>
 8006610:	69bb      	ldr	r3, [r7, #24]
 8006612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006614:	2b01      	cmp	r3, #1
 8006616:	d101      	bne.n	800661c <xQueueGenericSendFromISR+0x4a>
 8006618:	2301      	movs	r3, #1
 800661a:	e000      	b.n	800661e <xQueueGenericSendFromISR+0x4c>
 800661c:	2300      	movs	r3, #0
 800661e:	2b00      	cmp	r3, #0
 8006620:	d101      	bne.n	8006626 <xQueueGenericSendFromISR+0x54>
 8006622:	b672      	cpsid	i
 8006624:	e7fe      	b.n	8006624 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006626:	f001 fe95 	bl	8008354 <ulSetInterruptMaskFromISR>
 800662a:	0003      	movs	r3, r0
 800662c:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800662e:	69bb      	ldr	r3, [r7, #24]
 8006630:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006632:	69bb      	ldr	r3, [r7, #24]
 8006634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006636:	429a      	cmp	r2, r3
 8006638:	d302      	bcc.n	8006640 <xQueueGenericSendFromISR+0x6e>
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	2b02      	cmp	r3, #2
 800663e:	d12e      	bne.n	800669e <xQueueGenericSendFromISR+0xcc>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006640:	2413      	movs	r4, #19
 8006642:	193b      	adds	r3, r7, r4
 8006644:	69ba      	ldr	r2, [r7, #24]
 8006646:	2145      	movs	r1, #69	; 0x45
 8006648:	5c52      	ldrb	r2, [r2, r1]
 800664a:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800664c:	683a      	ldr	r2, [r7, #0]
 800664e:	68b9      	ldr	r1, [r7, #8]
 8006650:	69bb      	ldr	r3, [r7, #24]
 8006652:	0018      	movs	r0, r3
 8006654:	f000 fa38 	bl	8006ac8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006658:	193b      	adds	r3, r7, r4
 800665a:	781b      	ldrb	r3, [r3, #0]
 800665c:	b25b      	sxtb	r3, r3
 800665e:	3301      	adds	r3, #1
 8006660:	d111      	bne.n	8006686 <xQueueGenericSendFromISR+0xb4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006662:	69bb      	ldr	r3, [r7, #24]
 8006664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006666:	2b00      	cmp	r3, #0
 8006668:	d016      	beq.n	8006698 <xQueueGenericSendFromISR+0xc6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800666a:	69bb      	ldr	r3, [r7, #24]
 800666c:	3324      	adds	r3, #36	; 0x24
 800666e:	0018      	movs	r0, r3
 8006670:	f000 ff86 	bl	8007580 <xTaskRemoveFromEventList>
 8006674:	1e03      	subs	r3, r0, #0
 8006676:	d00f      	beq.n	8006698 <xQueueGenericSendFromISR+0xc6>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d00c      	beq.n	8006698 <xQueueGenericSendFromISR+0xc6>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2201      	movs	r2, #1
 8006682:	601a      	str	r2, [r3, #0]
 8006684:	e008      	b.n	8006698 <xQueueGenericSendFromISR+0xc6>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006686:	2313      	movs	r3, #19
 8006688:	18fb      	adds	r3, r7, r3
 800668a:	781b      	ldrb	r3, [r3, #0]
 800668c:	3301      	adds	r3, #1
 800668e:	b2db      	uxtb	r3, r3
 8006690:	b259      	sxtb	r1, r3
 8006692:	69bb      	ldr	r3, [r7, #24]
 8006694:	2245      	movs	r2, #69	; 0x45
 8006696:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8006698:	2301      	movs	r3, #1
 800669a:	61fb      	str	r3, [r7, #28]
		{
 800669c:	e001      	b.n	80066a2 <xQueueGenericSendFromISR+0xd0>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800669e:	2300      	movs	r3, #0
 80066a0:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	0018      	movs	r0, r3
 80066a6:	f001 fe5b 	bl	8008360 <vClearInterruptMaskFromISR>

	return xReturn;
 80066aa:	69fb      	ldr	r3, [r7, #28]
}
 80066ac:	0018      	movs	r0, r3
 80066ae:	46bd      	mov	sp, r7
 80066b0:	b009      	add	sp, #36	; 0x24
 80066b2:	bd90      	pop	{r4, r7, pc}

080066b4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b088      	sub	sp, #32
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	61bb      	str	r3, [r7, #24]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80066c2:	69bb      	ldr	r3, [r7, #24]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d101      	bne.n	80066cc <xQueueGiveFromISR+0x18>
 80066c8:	b672      	cpsid	i
 80066ca:	e7fe      	b.n	80066ca <xQueueGiveFromISR+0x16>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80066cc:	69bb      	ldr	r3, [r7, #24]
 80066ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d001      	beq.n	80066d8 <xQueueGiveFromISR+0x24>
 80066d4:	b672      	cpsid	i
 80066d6:	e7fe      	b.n	80066d6 <xQueueGiveFromISR+0x22>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80066d8:	69bb      	ldr	r3, [r7, #24]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d103      	bne.n	80066e8 <xQueueGiveFromISR+0x34>
 80066e0:	69bb      	ldr	r3, [r7, #24]
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d101      	bne.n	80066ec <xQueueGiveFromISR+0x38>
 80066e8:	2301      	movs	r3, #1
 80066ea:	e000      	b.n	80066ee <xQueueGiveFromISR+0x3a>
 80066ec:	2300      	movs	r3, #0
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d101      	bne.n	80066f6 <xQueueGiveFromISR+0x42>
 80066f2:	b672      	cpsid	i
 80066f4:	e7fe      	b.n	80066f4 <xQueueGiveFromISR+0x40>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80066f6:	f001 fe2d 	bl	8008354 <ulSetInterruptMaskFromISR>
 80066fa:	0003      	movs	r3, r0
 80066fc:	617b      	str	r3, [r7, #20]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80066fe:	69bb      	ldr	r3, [r7, #24]
 8006700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006702:	613b      	str	r3, [r7, #16]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006704:	69bb      	ldr	r3, [r7, #24]
 8006706:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006708:	693a      	ldr	r2, [r7, #16]
 800670a:	429a      	cmp	r2, r3
 800670c:	d22c      	bcs.n	8006768 <xQueueGiveFromISR+0xb4>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800670e:	200f      	movs	r0, #15
 8006710:	183b      	adds	r3, r7, r0
 8006712:	69ba      	ldr	r2, [r7, #24]
 8006714:	2145      	movs	r1, #69	; 0x45
 8006716:	5c52      	ldrb	r2, [r2, r1]
 8006718:	701a      	strb	r2, [r3, #0]
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	1c5a      	adds	r2, r3, #1
 800671e:	69bb      	ldr	r3, [r7, #24]
 8006720:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006722:	183b      	adds	r3, r7, r0
 8006724:	781b      	ldrb	r3, [r3, #0]
 8006726:	b25b      	sxtb	r3, r3
 8006728:	3301      	adds	r3, #1
 800672a:	d111      	bne.n	8006750 <xQueueGiveFromISR+0x9c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800672c:	69bb      	ldr	r3, [r7, #24]
 800672e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006730:	2b00      	cmp	r3, #0
 8006732:	d016      	beq.n	8006762 <xQueueGiveFromISR+0xae>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006734:	69bb      	ldr	r3, [r7, #24]
 8006736:	3324      	adds	r3, #36	; 0x24
 8006738:	0018      	movs	r0, r3
 800673a:	f000 ff21 	bl	8007580 <xTaskRemoveFromEventList>
 800673e:	1e03      	subs	r3, r0, #0
 8006740:	d00f      	beq.n	8006762 <xQueueGiveFromISR+0xae>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d00c      	beq.n	8006762 <xQueueGiveFromISR+0xae>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	2201      	movs	r2, #1
 800674c:	601a      	str	r2, [r3, #0]
 800674e:	e008      	b.n	8006762 <xQueueGiveFromISR+0xae>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006750:	230f      	movs	r3, #15
 8006752:	18fb      	adds	r3, r7, r3
 8006754:	781b      	ldrb	r3, [r3, #0]
 8006756:	3301      	adds	r3, #1
 8006758:	b2db      	uxtb	r3, r3
 800675a:	b259      	sxtb	r1, r3
 800675c:	69bb      	ldr	r3, [r7, #24]
 800675e:	2245      	movs	r2, #69	; 0x45
 8006760:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8006762:	2301      	movs	r3, #1
 8006764:	61fb      	str	r3, [r7, #28]
 8006766:	e001      	b.n	800676c <xQueueGiveFromISR+0xb8>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006768:	2300      	movs	r3, #0
 800676a:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	0018      	movs	r0, r3
 8006770:	f001 fdf6 	bl	8008360 <vClearInterruptMaskFromISR>

	return xReturn;
 8006774:	69fb      	ldr	r3, [r7, #28]
}
 8006776:	0018      	movs	r0, r3
 8006778:	46bd      	mov	sp, r7
 800677a:	b008      	add	sp, #32
 800677c:	bd80      	pop	{r7, pc}

0800677e <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800677e:	b580      	push	{r7, lr}
 8006780:	b08a      	sub	sp, #40	; 0x28
 8006782:	af00      	add	r7, sp, #0
 8006784:	60f8      	str	r0, [r7, #12]
 8006786:	60b9      	str	r1, [r7, #8]
 8006788:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800678a:	2300      	movs	r3, #0
 800678c:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006792:	6a3b      	ldr	r3, [r7, #32]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d101      	bne.n	800679c <xQueueReceive+0x1e>
 8006798:	b672      	cpsid	i
 800679a:	e7fe      	b.n	800679a <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d103      	bne.n	80067aa <xQueueReceive+0x2c>
 80067a2:	6a3b      	ldr	r3, [r7, #32]
 80067a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d101      	bne.n	80067ae <xQueueReceive+0x30>
 80067aa:	2301      	movs	r3, #1
 80067ac:	e000      	b.n	80067b0 <xQueueReceive+0x32>
 80067ae:	2300      	movs	r3, #0
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d101      	bne.n	80067b8 <xQueueReceive+0x3a>
 80067b4:	b672      	cpsid	i
 80067b6:	e7fe      	b.n	80067b6 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80067b8:	f001 f87a 	bl	80078b0 <xTaskGetSchedulerState>
 80067bc:	1e03      	subs	r3, r0, #0
 80067be:	d102      	bne.n	80067c6 <xQueueReceive+0x48>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d101      	bne.n	80067ca <xQueueReceive+0x4c>
 80067c6:	2301      	movs	r3, #1
 80067c8:	e000      	b.n	80067cc <xQueueReceive+0x4e>
 80067ca:	2300      	movs	r3, #0
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d101      	bne.n	80067d4 <xQueueReceive+0x56>
 80067d0:	b672      	cpsid	i
 80067d2:	e7fe      	b.n	80067d2 <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80067d4:	f001 fd94 	bl	8008300 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80067d8:	6a3b      	ldr	r3, [r7, #32]
 80067da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067dc:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80067de:	69fb      	ldr	r3, [r7, #28]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d01a      	beq.n	800681a <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80067e4:	68ba      	ldr	r2, [r7, #8]
 80067e6:	6a3b      	ldr	r3, [r7, #32]
 80067e8:	0011      	movs	r1, r2
 80067ea:	0018      	movs	r0, r3
 80067ec:	f000 f9d7 	bl	8006b9e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80067f0:	69fb      	ldr	r3, [r7, #28]
 80067f2:	1e5a      	subs	r2, r3, #1
 80067f4:	6a3b      	ldr	r3, [r7, #32]
 80067f6:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80067f8:	6a3b      	ldr	r3, [r7, #32]
 80067fa:	691b      	ldr	r3, [r3, #16]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d008      	beq.n	8006812 <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006800:	6a3b      	ldr	r3, [r7, #32]
 8006802:	3310      	adds	r3, #16
 8006804:	0018      	movs	r0, r3
 8006806:	f000 febb 	bl	8007580 <xTaskRemoveFromEventList>
 800680a:	1e03      	subs	r3, r0, #0
 800680c:	d001      	beq.n	8006812 <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800680e:	f001 fd67 	bl	80082e0 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006812:	f001 fd87 	bl	8008324 <vPortExitCritical>
				return pdPASS;
 8006816:	2301      	movs	r3, #1
 8006818:	e062      	b.n	80068e0 <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d103      	bne.n	8006828 <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006820:	f001 fd80 	bl	8008324 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006824:	2300      	movs	r3, #0
 8006826:	e05b      	b.n	80068e0 <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800682a:	2b00      	cmp	r3, #0
 800682c:	d106      	bne.n	800683c <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800682e:	2314      	movs	r3, #20
 8006830:	18fb      	adds	r3, r7, r3
 8006832:	0018      	movs	r0, r3
 8006834:	f000 ff00 	bl	8007638 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006838:	2301      	movs	r3, #1
 800683a:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800683c:	f001 fd72 	bl	8008324 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006840:	f000 fcae 	bl	80071a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006844:	f001 fd5c 	bl	8008300 <vPortEnterCritical>
 8006848:	6a3b      	ldr	r3, [r7, #32]
 800684a:	2244      	movs	r2, #68	; 0x44
 800684c:	5c9b      	ldrb	r3, [r3, r2]
 800684e:	b25b      	sxtb	r3, r3
 8006850:	3301      	adds	r3, #1
 8006852:	d103      	bne.n	800685c <xQueueReceive+0xde>
 8006854:	6a3b      	ldr	r3, [r7, #32]
 8006856:	2244      	movs	r2, #68	; 0x44
 8006858:	2100      	movs	r1, #0
 800685a:	5499      	strb	r1, [r3, r2]
 800685c:	6a3b      	ldr	r3, [r7, #32]
 800685e:	2245      	movs	r2, #69	; 0x45
 8006860:	5c9b      	ldrb	r3, [r3, r2]
 8006862:	b25b      	sxtb	r3, r3
 8006864:	3301      	adds	r3, #1
 8006866:	d103      	bne.n	8006870 <xQueueReceive+0xf2>
 8006868:	6a3b      	ldr	r3, [r7, #32]
 800686a:	2245      	movs	r2, #69	; 0x45
 800686c:	2100      	movs	r1, #0
 800686e:	5499      	strb	r1, [r3, r2]
 8006870:	f001 fd58 	bl	8008324 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006874:	1d3a      	adds	r2, r7, #4
 8006876:	2314      	movs	r3, #20
 8006878:	18fb      	adds	r3, r7, r3
 800687a:	0011      	movs	r1, r2
 800687c:	0018      	movs	r0, r3
 800687e:	f000 feef 	bl	8007660 <xTaskCheckForTimeOut>
 8006882:	1e03      	subs	r3, r0, #0
 8006884:	d11e      	bne.n	80068c4 <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006886:	6a3b      	ldr	r3, [r7, #32]
 8006888:	0018      	movs	r0, r3
 800688a:	f000 fa0c 	bl	8006ca6 <prvIsQueueEmpty>
 800688e:	1e03      	subs	r3, r0, #0
 8006890:	d011      	beq.n	80068b6 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006892:	6a3b      	ldr	r3, [r7, #32]
 8006894:	3324      	adds	r3, #36	; 0x24
 8006896:	687a      	ldr	r2, [r7, #4]
 8006898:	0011      	movs	r1, r2
 800689a:	0018      	movs	r0, r3
 800689c:	f000 fe2c 	bl	80074f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80068a0:	6a3b      	ldr	r3, [r7, #32]
 80068a2:	0018      	movs	r0, r3
 80068a4:	f000 f9a1 	bl	8006bea <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80068a8:	f000 fc86 	bl	80071b8 <xTaskResumeAll>
 80068ac:	1e03      	subs	r3, r0, #0
 80068ae:	d191      	bne.n	80067d4 <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 80068b0:	f001 fd16 	bl	80082e0 <vPortYield>
 80068b4:	e78e      	b.n	80067d4 <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80068b6:	6a3b      	ldr	r3, [r7, #32]
 80068b8:	0018      	movs	r0, r3
 80068ba:	f000 f996 	bl	8006bea <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80068be:	f000 fc7b 	bl	80071b8 <xTaskResumeAll>
 80068c2:	e787      	b.n	80067d4 <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80068c4:	6a3b      	ldr	r3, [r7, #32]
 80068c6:	0018      	movs	r0, r3
 80068c8:	f000 f98f 	bl	8006bea <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80068cc:	f000 fc74 	bl	80071b8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80068d0:	6a3b      	ldr	r3, [r7, #32]
 80068d2:	0018      	movs	r0, r3
 80068d4:	f000 f9e7 	bl	8006ca6 <prvIsQueueEmpty>
 80068d8:	1e03      	subs	r3, r0, #0
 80068da:	d100      	bne.n	80068de <xQueueReceive+0x160>
 80068dc:	e77a      	b.n	80067d4 <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80068de:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80068e0:	0018      	movs	r0, r3
 80068e2:	46bd      	mov	sp, r7
 80068e4:	b00a      	add	sp, #40	; 0x28
 80068e6:	bd80      	pop	{r7, pc}

080068e8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b08a      	sub	sp, #40	; 0x28
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80068f2:	2300      	movs	r3, #0
 80068f4:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80068fa:	2300      	movs	r3, #0
 80068fc:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80068fe:	69fb      	ldr	r3, [r7, #28]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d101      	bne.n	8006908 <xQueueSemaphoreTake+0x20>
 8006904:	b672      	cpsid	i
 8006906:	e7fe      	b.n	8006906 <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006908:	69fb      	ldr	r3, [r7, #28]
 800690a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800690c:	2b00      	cmp	r3, #0
 800690e:	d001      	beq.n	8006914 <xQueueSemaphoreTake+0x2c>
 8006910:	b672      	cpsid	i
 8006912:	e7fe      	b.n	8006912 <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006914:	f000 ffcc 	bl	80078b0 <xTaskGetSchedulerState>
 8006918:	1e03      	subs	r3, r0, #0
 800691a:	d102      	bne.n	8006922 <xQueueSemaphoreTake+0x3a>
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d101      	bne.n	8006926 <xQueueSemaphoreTake+0x3e>
 8006922:	2301      	movs	r3, #1
 8006924:	e000      	b.n	8006928 <xQueueSemaphoreTake+0x40>
 8006926:	2300      	movs	r3, #0
 8006928:	2b00      	cmp	r3, #0
 800692a:	d101      	bne.n	8006930 <xQueueSemaphoreTake+0x48>
 800692c:	b672      	cpsid	i
 800692e:	e7fe      	b.n	800692e <xQueueSemaphoreTake+0x46>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006930:	f001 fce6 	bl	8008300 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006934:	69fb      	ldr	r3, [r7, #28]
 8006936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006938:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800693a:	69bb      	ldr	r3, [r7, #24]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d01d      	beq.n	800697c <xQueueSemaphoreTake+0x94>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006940:	69bb      	ldr	r3, [r7, #24]
 8006942:	1e5a      	subs	r2, r3, #1
 8006944:	69fb      	ldr	r3, [r7, #28]
 8006946:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006948:	69fb      	ldr	r3, [r7, #28]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d104      	bne.n	800695a <xQueueSemaphoreTake+0x72>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8006950:	f001 f908 	bl	8007b64 <pvTaskIncrementMutexHeldCount>
 8006954:	0002      	movs	r2, r0
 8006956:	69fb      	ldr	r3, [r7, #28]
 8006958:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800695a:	69fb      	ldr	r3, [r7, #28]
 800695c:	691b      	ldr	r3, [r3, #16]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d008      	beq.n	8006974 <xQueueSemaphoreTake+0x8c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006962:	69fb      	ldr	r3, [r7, #28]
 8006964:	3310      	adds	r3, #16
 8006966:	0018      	movs	r0, r3
 8006968:	f000 fe0a 	bl	8007580 <xTaskRemoveFromEventList>
 800696c:	1e03      	subs	r3, r0, #0
 800696e:	d001      	beq.n	8006974 <xQueueSemaphoreTake+0x8c>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006970:	f001 fcb6 	bl	80082e0 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006974:	f001 fcd6 	bl	8008324 <vPortExitCritical>
				return pdPASS;
 8006978:	2301      	movs	r3, #1
 800697a:	e08b      	b.n	8006a94 <xQueueSemaphoreTake+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d108      	bne.n	8006994 <xQueueSemaphoreTake+0xac>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006982:	6a3b      	ldr	r3, [r7, #32]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d001      	beq.n	800698c <xQueueSemaphoreTake+0xa4>
 8006988:	b672      	cpsid	i
 800698a:	e7fe      	b.n	800698a <xQueueSemaphoreTake+0xa2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800698c:	f001 fcca 	bl	8008324 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006990:	2300      	movs	r3, #0
 8006992:	e07f      	b.n	8006a94 <xQueueSemaphoreTake+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006996:	2b00      	cmp	r3, #0
 8006998:	d106      	bne.n	80069a8 <xQueueSemaphoreTake+0xc0>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800699a:	230c      	movs	r3, #12
 800699c:	18fb      	adds	r3, r7, r3
 800699e:	0018      	movs	r0, r3
 80069a0:	f000 fe4a 	bl	8007638 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80069a4:	2301      	movs	r3, #1
 80069a6:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80069a8:	f001 fcbc 	bl	8008324 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80069ac:	f000 fbf8 	bl	80071a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80069b0:	f001 fca6 	bl	8008300 <vPortEnterCritical>
 80069b4:	69fb      	ldr	r3, [r7, #28]
 80069b6:	2244      	movs	r2, #68	; 0x44
 80069b8:	5c9b      	ldrb	r3, [r3, r2]
 80069ba:	b25b      	sxtb	r3, r3
 80069bc:	3301      	adds	r3, #1
 80069be:	d103      	bne.n	80069c8 <xQueueSemaphoreTake+0xe0>
 80069c0:	69fb      	ldr	r3, [r7, #28]
 80069c2:	2244      	movs	r2, #68	; 0x44
 80069c4:	2100      	movs	r1, #0
 80069c6:	5499      	strb	r1, [r3, r2]
 80069c8:	69fb      	ldr	r3, [r7, #28]
 80069ca:	2245      	movs	r2, #69	; 0x45
 80069cc:	5c9b      	ldrb	r3, [r3, r2]
 80069ce:	b25b      	sxtb	r3, r3
 80069d0:	3301      	adds	r3, #1
 80069d2:	d103      	bne.n	80069dc <xQueueSemaphoreTake+0xf4>
 80069d4:	69fb      	ldr	r3, [r7, #28]
 80069d6:	2245      	movs	r2, #69	; 0x45
 80069d8:	2100      	movs	r1, #0
 80069da:	5499      	strb	r1, [r3, r2]
 80069dc:	f001 fca2 	bl	8008324 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80069e0:	003a      	movs	r2, r7
 80069e2:	230c      	movs	r3, #12
 80069e4:	18fb      	adds	r3, r7, r3
 80069e6:	0011      	movs	r1, r2
 80069e8:	0018      	movs	r0, r3
 80069ea:	f000 fe39 	bl	8007660 <xTaskCheckForTimeOut>
 80069ee:	1e03      	subs	r3, r0, #0
 80069f0:	d12e      	bne.n	8006a50 <xQueueSemaphoreTake+0x168>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80069f2:	69fb      	ldr	r3, [r7, #28]
 80069f4:	0018      	movs	r0, r3
 80069f6:	f000 f956 	bl	8006ca6 <prvIsQueueEmpty>
 80069fa:	1e03      	subs	r3, r0, #0
 80069fc:	d021      	beq.n	8006a42 <xQueueSemaphoreTake+0x15a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80069fe:	69fb      	ldr	r3, [r7, #28]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d10a      	bne.n	8006a1c <xQueueSemaphoreTake+0x134>
					{
						taskENTER_CRITICAL();
 8006a06:	f001 fc7b 	bl	8008300 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8006a0a:	69fb      	ldr	r3, [r7, #28]
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	0018      	movs	r0, r3
 8006a10:	f000 ff6a 	bl	80078e8 <xTaskPriorityInherit>
 8006a14:	0003      	movs	r3, r0
 8006a16:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
 8006a18:	f001 fc84 	bl	8008324 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006a1c:	69fb      	ldr	r3, [r7, #28]
 8006a1e:	3324      	adds	r3, #36	; 0x24
 8006a20:	683a      	ldr	r2, [r7, #0]
 8006a22:	0011      	movs	r1, r2
 8006a24:	0018      	movs	r0, r3
 8006a26:	f000 fd67 	bl	80074f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006a2a:	69fb      	ldr	r3, [r7, #28]
 8006a2c:	0018      	movs	r0, r3
 8006a2e:	f000 f8dc 	bl	8006bea <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006a32:	f000 fbc1 	bl	80071b8 <xTaskResumeAll>
 8006a36:	1e03      	subs	r3, r0, #0
 8006a38:	d000      	beq.n	8006a3c <xQueueSemaphoreTake+0x154>
 8006a3a:	e779      	b.n	8006930 <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
 8006a3c:	f001 fc50 	bl	80082e0 <vPortYield>
 8006a40:	e776      	b.n	8006930 <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006a42:	69fb      	ldr	r3, [r7, #28]
 8006a44:	0018      	movs	r0, r3
 8006a46:	f000 f8d0 	bl	8006bea <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006a4a:	f000 fbb5 	bl	80071b8 <xTaskResumeAll>
 8006a4e:	e76f      	b.n	8006930 <xQueueSemaphoreTake+0x48>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006a50:	69fb      	ldr	r3, [r7, #28]
 8006a52:	0018      	movs	r0, r3
 8006a54:	f000 f8c9 	bl	8006bea <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006a58:	f000 fbae 	bl	80071b8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006a5c:	69fb      	ldr	r3, [r7, #28]
 8006a5e:	0018      	movs	r0, r3
 8006a60:	f000 f921 	bl	8006ca6 <prvIsQueueEmpty>
 8006a64:	1e03      	subs	r3, r0, #0
 8006a66:	d100      	bne.n	8006a6a <xQueueSemaphoreTake+0x182>
 8006a68:	e762      	b.n	8006930 <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006a6a:	6a3b      	ldr	r3, [r7, #32]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d010      	beq.n	8006a92 <xQueueSemaphoreTake+0x1aa>
					{
						taskENTER_CRITICAL();
 8006a70:	f001 fc46 	bl	8008300 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006a74:	69fb      	ldr	r3, [r7, #28]
 8006a76:	0018      	movs	r0, r3
 8006a78:	f000 f810 	bl	8006a9c <prvGetDisinheritPriorityAfterTimeout>
 8006a7c:	0003      	movs	r3, r0
 8006a7e:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8006a80:	69fb      	ldr	r3, [r7, #28]
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	697a      	ldr	r2, [r7, #20]
 8006a86:	0011      	movs	r1, r2
 8006a88:	0018      	movs	r0, r3
 8006a8a:	f000 fff7 	bl	8007a7c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006a8e:	f001 fc49 	bl	8008324 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006a92:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006a94:	0018      	movs	r0, r3
 8006a96:	46bd      	mov	sp, r7
 8006a98:	b00a      	add	sp, #40	; 0x28
 8006a9a:	bd80      	pop	{r7, pc}

08006a9c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b084      	sub	sp, #16
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d006      	beq.n	8006aba <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	2238      	movs	r2, #56	; 0x38
 8006ab4:	1ad3      	subs	r3, r2, r3
 8006ab6:	60fb      	str	r3, [r7, #12]
 8006ab8:	e001      	b.n	8006abe <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006aba:	2300      	movs	r3, #0
 8006abc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006abe:	68fb      	ldr	r3, [r7, #12]
	}
 8006ac0:	0018      	movs	r0, r3
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	b004      	add	sp, #16
 8006ac6:	bd80      	pop	{r7, pc}

08006ac8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b086      	sub	sp, #24
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	60f8      	str	r0, [r7, #12]
 8006ad0:	60b9      	str	r1, [r7, #8]
 8006ad2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006adc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d10e      	bne.n	8006b04 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d14e      	bne.n	8006b8c <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	0018      	movs	r0, r3
 8006af4:	f000 ff66 	bl	80079c4 <xTaskPriorityDisinherit>
 8006af8:	0003      	movs	r3, r0
 8006afa:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2200      	movs	r2, #0
 8006b00:	605a      	str	r2, [r3, #4]
 8006b02:	e043      	b.n	8006b8c <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d119      	bne.n	8006b3e <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	6898      	ldr	r0, [r3, #8]
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	0019      	movs	r1, r3
 8006b16:	f002 f8e3 	bl	8008ce0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	689a      	ldr	r2, [r3, #8]
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b22:	18d2      	adds	r2, r2, r3
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	689a      	ldr	r2, [r3, #8]
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	429a      	cmp	r2, r3
 8006b32:	d32b      	bcc.n	8006b8c <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681a      	ldr	r2, [r3, #0]
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	609a      	str	r2, [r3, #8]
 8006b3c:	e026      	b.n	8006b8c <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	68d8      	ldr	r0, [r3, #12]
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	0019      	movs	r1, r3
 8006b4a:	f002 f8c9 	bl	8008ce0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	68da      	ldr	r2, [r3, #12]
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b56:	425b      	negs	r3, r3
 8006b58:	18d2      	adds	r2, r2, r3
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	68da      	ldr	r2, [r3, #12]
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	429a      	cmp	r2, r3
 8006b68:	d207      	bcs.n	8006b7a <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	685a      	ldr	r2, [r3, #4]
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b72:	425b      	negs	r3, r3
 8006b74:	18d2      	adds	r2, r2, r3
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2b02      	cmp	r3, #2
 8006b7e:	d105      	bne.n	8006b8c <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006b80:	693b      	ldr	r3, [r7, #16]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d002      	beq.n	8006b8c <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	3b01      	subs	r3, #1
 8006b8a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	1c5a      	adds	r2, r3, #1
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006b94:	697b      	ldr	r3, [r7, #20]
}
 8006b96:	0018      	movs	r0, r3
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	b006      	add	sp, #24
 8006b9c:	bd80      	pop	{r7, pc}

08006b9e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006b9e:	b580      	push	{r7, lr}
 8006ba0:	b082      	sub	sp, #8
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	6078      	str	r0, [r7, #4]
 8006ba6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d018      	beq.n	8006be2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	68da      	ldr	r2, [r3, #12]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bb8:	18d2      	adds	r2, r2, r3
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	68da      	ldr	r2, [r3, #12]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	429a      	cmp	r2, r3
 8006bc8:	d303      	bcc.n	8006bd2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681a      	ldr	r2, [r3, #0]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	68d9      	ldr	r1, [r3, #12]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	0018      	movs	r0, r3
 8006bde:	f002 f87f 	bl	8008ce0 <memcpy>
	}
}
 8006be2:	46c0      	nop			; (mov r8, r8)
 8006be4:	46bd      	mov	sp, r7
 8006be6:	b002      	add	sp, #8
 8006be8:	bd80      	pop	{r7, pc}

08006bea <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006bea:	b580      	push	{r7, lr}
 8006bec:	b084      	sub	sp, #16
 8006bee:	af00      	add	r7, sp, #0
 8006bf0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006bf2:	f001 fb85 	bl	8008300 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006bf6:	230f      	movs	r3, #15
 8006bf8:	18fb      	adds	r3, r7, r3
 8006bfa:	687a      	ldr	r2, [r7, #4]
 8006bfc:	2145      	movs	r1, #69	; 0x45
 8006bfe:	5c52      	ldrb	r2, [r2, r1]
 8006c00:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006c02:	e013      	b.n	8006c2c <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d016      	beq.n	8006c3a <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	3324      	adds	r3, #36	; 0x24
 8006c10:	0018      	movs	r0, r3
 8006c12:	f000 fcb5 	bl	8007580 <xTaskRemoveFromEventList>
 8006c16:	1e03      	subs	r3, r0, #0
 8006c18:	d001      	beq.n	8006c1e <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006c1a:	f000 fd71 	bl	8007700 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006c1e:	210f      	movs	r1, #15
 8006c20:	187b      	adds	r3, r7, r1
 8006c22:	781b      	ldrb	r3, [r3, #0]
 8006c24:	3b01      	subs	r3, #1
 8006c26:	b2da      	uxtb	r2, r3
 8006c28:	187b      	adds	r3, r7, r1
 8006c2a:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006c2c:	230f      	movs	r3, #15
 8006c2e:	18fb      	adds	r3, r7, r3
 8006c30:	781b      	ldrb	r3, [r3, #0]
 8006c32:	b25b      	sxtb	r3, r3
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	dce5      	bgt.n	8006c04 <prvUnlockQueue+0x1a>
 8006c38:	e000      	b.n	8006c3c <prvUnlockQueue+0x52>
					break;
 8006c3a:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2245      	movs	r2, #69	; 0x45
 8006c40:	21ff      	movs	r1, #255	; 0xff
 8006c42:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8006c44:	f001 fb6e 	bl	8008324 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006c48:	f001 fb5a 	bl	8008300 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006c4c:	230e      	movs	r3, #14
 8006c4e:	18fb      	adds	r3, r7, r3
 8006c50:	687a      	ldr	r2, [r7, #4]
 8006c52:	2144      	movs	r1, #68	; 0x44
 8006c54:	5c52      	ldrb	r2, [r2, r1]
 8006c56:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006c58:	e013      	b.n	8006c82 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	691b      	ldr	r3, [r3, #16]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d016      	beq.n	8006c90 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	3310      	adds	r3, #16
 8006c66:	0018      	movs	r0, r3
 8006c68:	f000 fc8a 	bl	8007580 <xTaskRemoveFromEventList>
 8006c6c:	1e03      	subs	r3, r0, #0
 8006c6e:	d001      	beq.n	8006c74 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8006c70:	f000 fd46 	bl	8007700 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006c74:	210e      	movs	r1, #14
 8006c76:	187b      	adds	r3, r7, r1
 8006c78:	781b      	ldrb	r3, [r3, #0]
 8006c7a:	3b01      	subs	r3, #1
 8006c7c:	b2da      	uxtb	r2, r3
 8006c7e:	187b      	adds	r3, r7, r1
 8006c80:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006c82:	230e      	movs	r3, #14
 8006c84:	18fb      	adds	r3, r7, r3
 8006c86:	781b      	ldrb	r3, [r3, #0]
 8006c88:	b25b      	sxtb	r3, r3
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	dce5      	bgt.n	8006c5a <prvUnlockQueue+0x70>
 8006c8e:	e000      	b.n	8006c92 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8006c90:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2244      	movs	r2, #68	; 0x44
 8006c96:	21ff      	movs	r1, #255	; 0xff
 8006c98:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8006c9a:	f001 fb43 	bl	8008324 <vPortExitCritical>
}
 8006c9e:	46c0      	nop			; (mov r8, r8)
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	b004      	add	sp, #16
 8006ca4:	bd80      	pop	{r7, pc}

08006ca6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006ca6:	b580      	push	{r7, lr}
 8006ca8:	b084      	sub	sp, #16
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006cae:	f001 fb27 	bl	8008300 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d102      	bne.n	8006cc0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006cba:	2301      	movs	r3, #1
 8006cbc:	60fb      	str	r3, [r7, #12]
 8006cbe:	e001      	b.n	8006cc4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006cc4:	f001 fb2e 	bl	8008324 <vPortExitCritical>

	return xReturn;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
}
 8006cca:	0018      	movs	r0, r3
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	b004      	add	sp, #16
 8006cd0:	bd80      	pop	{r7, pc}

08006cd2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006cd2:	b580      	push	{r7, lr}
 8006cd4:	b084      	sub	sp, #16
 8006cd6:	af00      	add	r7, sp, #0
 8006cd8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006cda:	f001 fb11 	bl	8008300 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	d102      	bne.n	8006cf0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006cea:	2301      	movs	r3, #1
 8006cec:	60fb      	str	r3, [r7, #12]
 8006cee:	e001      	b.n	8006cf4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006cf4:	f001 fb16 	bl	8008324 <vPortExitCritical>

	return xReturn;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
}
 8006cfa:	0018      	movs	r0, r3
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	b004      	add	sp, #16
 8006d00:	bd80      	pop	{r7, pc}
	...

08006d04 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b084      	sub	sp, #16
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
 8006d0c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006d0e:	2300      	movs	r3, #0
 8006d10:	60fb      	str	r3, [r7, #12]
 8006d12:	e015      	b.n	8006d40 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006d14:	4b0e      	ldr	r3, [pc, #56]	; (8006d50 <vQueueAddToRegistry+0x4c>)
 8006d16:	68fa      	ldr	r2, [r7, #12]
 8006d18:	00d2      	lsls	r2, r2, #3
 8006d1a:	58d3      	ldr	r3, [r2, r3]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d10c      	bne.n	8006d3a <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006d20:	4b0b      	ldr	r3, [pc, #44]	; (8006d50 <vQueueAddToRegistry+0x4c>)
 8006d22:	68fa      	ldr	r2, [r7, #12]
 8006d24:	00d2      	lsls	r2, r2, #3
 8006d26:	6839      	ldr	r1, [r7, #0]
 8006d28:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006d2a:	4a09      	ldr	r2, [pc, #36]	; (8006d50 <vQueueAddToRegistry+0x4c>)
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	00db      	lsls	r3, r3, #3
 8006d30:	18d3      	adds	r3, r2, r3
 8006d32:	3304      	adds	r3, #4
 8006d34:	687a      	ldr	r2, [r7, #4]
 8006d36:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006d38:	e006      	b.n	8006d48 <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	3301      	adds	r3, #1
 8006d3e:	60fb      	str	r3, [r7, #12]
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2b07      	cmp	r3, #7
 8006d44:	d9e6      	bls.n	8006d14 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006d46:	46c0      	nop			; (mov r8, r8)
 8006d48:	46c0      	nop			; (mov r8, r8)
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	b004      	add	sp, #16
 8006d4e:	bd80      	pop	{r7, pc}
 8006d50:	200023d0 	.word	0x200023d0

08006d54 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b086      	sub	sp, #24
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	60f8      	str	r0, [r7, #12]
 8006d5c:	60b9      	str	r1, [r7, #8]
 8006d5e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006d64:	f001 facc 	bl	8008300 <vPortEnterCritical>
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	2244      	movs	r2, #68	; 0x44
 8006d6c:	5c9b      	ldrb	r3, [r3, r2]
 8006d6e:	b25b      	sxtb	r3, r3
 8006d70:	3301      	adds	r3, #1
 8006d72:	d103      	bne.n	8006d7c <vQueueWaitForMessageRestricted+0x28>
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	2244      	movs	r2, #68	; 0x44
 8006d78:	2100      	movs	r1, #0
 8006d7a:	5499      	strb	r1, [r3, r2]
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	2245      	movs	r2, #69	; 0x45
 8006d80:	5c9b      	ldrb	r3, [r3, r2]
 8006d82:	b25b      	sxtb	r3, r3
 8006d84:	3301      	adds	r3, #1
 8006d86:	d103      	bne.n	8006d90 <vQueueWaitForMessageRestricted+0x3c>
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	2245      	movs	r2, #69	; 0x45
 8006d8c:	2100      	movs	r1, #0
 8006d8e:	5499      	strb	r1, [r3, r2]
 8006d90:	f001 fac8 	bl	8008324 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d106      	bne.n	8006daa <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	3324      	adds	r3, #36	; 0x24
 8006da0:	687a      	ldr	r2, [r7, #4]
 8006da2:	68b9      	ldr	r1, [r7, #8]
 8006da4:	0018      	movs	r0, r3
 8006da6:	f000 fbc5 	bl	8007534 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	0018      	movs	r0, r3
 8006dae:	f7ff ff1c 	bl	8006bea <prvUnlockQueue>
	}
 8006db2:	46c0      	nop			; (mov r8, r8)
 8006db4:	46bd      	mov	sp, r7
 8006db6:	b006      	add	sp, #24
 8006db8:	bd80      	pop	{r7, pc}

08006dba <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006dba:	b590      	push	{r4, r7, lr}
 8006dbc:	b08d      	sub	sp, #52	; 0x34
 8006dbe:	af04      	add	r7, sp, #16
 8006dc0:	60f8      	str	r0, [r7, #12]
 8006dc2:	60b9      	str	r1, [r7, #8]
 8006dc4:	607a      	str	r2, [r7, #4]
 8006dc6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006dc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d101      	bne.n	8006dd2 <xTaskCreateStatic+0x18>
 8006dce:	b672      	cpsid	i
 8006dd0:	e7fe      	b.n	8006dd0 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 8006dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d101      	bne.n	8006ddc <xTaskCreateStatic+0x22>
 8006dd8:	b672      	cpsid	i
 8006dda:	e7fe      	b.n	8006dda <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006ddc:	235c      	movs	r3, #92	; 0x5c
 8006dde:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	2b5c      	cmp	r3, #92	; 0x5c
 8006de4:	d001      	beq.n	8006dea <xTaskCreateStatic+0x30>
 8006de6:	b672      	cpsid	i
 8006de8:	e7fe      	b.n	8006de8 <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d020      	beq.n	8006e32 <xTaskCreateStatic+0x78>
 8006df0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d01d      	beq.n	8006e32 <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006df8:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006dfa:	69fb      	ldr	r3, [r7, #28]
 8006dfc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006dfe:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006e00:	69fb      	ldr	r3, [r7, #28]
 8006e02:	2259      	movs	r2, #89	; 0x59
 8006e04:	2102      	movs	r1, #2
 8006e06:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006e08:	683c      	ldr	r4, [r7, #0]
 8006e0a:	687a      	ldr	r2, [r7, #4]
 8006e0c:	68b9      	ldr	r1, [r7, #8]
 8006e0e:	68f8      	ldr	r0, [r7, #12]
 8006e10:	2300      	movs	r3, #0
 8006e12:	9303      	str	r3, [sp, #12]
 8006e14:	69fb      	ldr	r3, [r7, #28]
 8006e16:	9302      	str	r3, [sp, #8]
 8006e18:	2318      	movs	r3, #24
 8006e1a:	18fb      	adds	r3, r7, r3
 8006e1c:	9301      	str	r3, [sp, #4]
 8006e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e20:	9300      	str	r3, [sp, #0]
 8006e22:	0023      	movs	r3, r4
 8006e24:	f000 f858 	bl	8006ed8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006e28:	69fb      	ldr	r3, [r7, #28]
 8006e2a:	0018      	movs	r0, r3
 8006e2c:	f000 f8d6 	bl	8006fdc <prvAddNewTaskToReadyList>
 8006e30:	e001      	b.n	8006e36 <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 8006e32:	2300      	movs	r3, #0
 8006e34:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006e36:	69bb      	ldr	r3, [r7, #24]
	}
 8006e38:	0018      	movs	r0, r3
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	b009      	add	sp, #36	; 0x24
 8006e3e:	bd90      	pop	{r4, r7, pc}

08006e40 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006e40:	b590      	push	{r4, r7, lr}
 8006e42:	b08d      	sub	sp, #52	; 0x34
 8006e44:	af04      	add	r7, sp, #16
 8006e46:	60f8      	str	r0, [r7, #12]
 8006e48:	60b9      	str	r1, [r7, #8]
 8006e4a:	603b      	str	r3, [r7, #0]
 8006e4c:	1dbb      	adds	r3, r7, #6
 8006e4e:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e50:	1dbb      	adds	r3, r7, #6
 8006e52:	881b      	ldrh	r3, [r3, #0]
 8006e54:	009b      	lsls	r3, r3, #2
 8006e56:	0018      	movs	r0, r3
 8006e58:	f001 faea 	bl	8008430 <pvPortMalloc>
 8006e5c:	0003      	movs	r3, r0
 8006e5e:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d010      	beq.n	8006e88 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006e66:	205c      	movs	r0, #92	; 0x5c
 8006e68:	f001 fae2 	bl	8008430 <pvPortMalloc>
 8006e6c:	0003      	movs	r3, r0
 8006e6e:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8006e70:	69fb      	ldr	r3, [r7, #28]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d003      	beq.n	8006e7e <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006e76:	69fb      	ldr	r3, [r7, #28]
 8006e78:	697a      	ldr	r2, [r7, #20]
 8006e7a:	631a      	str	r2, [r3, #48]	; 0x30
 8006e7c:	e006      	b.n	8006e8c <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	0018      	movs	r0, r3
 8006e82:	f001 fb7b 	bl	800857c <vPortFree>
 8006e86:	e001      	b.n	8006e8c <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006e8c:	69fb      	ldr	r3, [r7, #28]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d01a      	beq.n	8006ec8 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006e92:	69fb      	ldr	r3, [r7, #28]
 8006e94:	2259      	movs	r2, #89	; 0x59
 8006e96:	2100      	movs	r1, #0
 8006e98:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006e9a:	1dbb      	adds	r3, r7, #6
 8006e9c:	881a      	ldrh	r2, [r3, #0]
 8006e9e:	683c      	ldr	r4, [r7, #0]
 8006ea0:	68b9      	ldr	r1, [r7, #8]
 8006ea2:	68f8      	ldr	r0, [r7, #12]
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	9303      	str	r3, [sp, #12]
 8006ea8:	69fb      	ldr	r3, [r7, #28]
 8006eaa:	9302      	str	r3, [sp, #8]
 8006eac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eae:	9301      	str	r3, [sp, #4]
 8006eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb2:	9300      	str	r3, [sp, #0]
 8006eb4:	0023      	movs	r3, r4
 8006eb6:	f000 f80f 	bl	8006ed8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006eba:	69fb      	ldr	r3, [r7, #28]
 8006ebc:	0018      	movs	r0, r3
 8006ebe:	f000 f88d 	bl	8006fdc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	61bb      	str	r3, [r7, #24]
 8006ec6:	e002      	b.n	8006ece <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	425b      	negs	r3, r3
 8006ecc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006ece:	69bb      	ldr	r3, [r7, #24]
	}
 8006ed0:	0018      	movs	r0, r3
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	b009      	add	sp, #36	; 0x24
 8006ed6:	bd90      	pop	{r4, r7, pc}

08006ed8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b086      	sub	sp, #24
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	60f8      	str	r0, [r7, #12]
 8006ee0:	60b9      	str	r1, [r7, #8]
 8006ee2:	607a      	str	r2, [r7, #4]
 8006ee4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ee8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	009b      	lsls	r3, r3, #2
 8006eee:	001a      	movs	r2, r3
 8006ef0:	21a5      	movs	r1, #165	; 0xa5
 8006ef2:	f001 ff11 	bl	8008d18 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ef8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	4936      	ldr	r1, [pc, #216]	; (8006fd8 <prvInitialiseNewTask+0x100>)
 8006efe:	468c      	mov	ip, r1
 8006f00:	4463      	add	r3, ip
 8006f02:	009b      	lsls	r3, r3, #2
 8006f04:	18d3      	adds	r3, r2, r3
 8006f06:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	2207      	movs	r2, #7
 8006f0c:	4393      	bics	r3, r2
 8006f0e:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	2207      	movs	r2, #7
 8006f14:	4013      	ands	r3, r2
 8006f16:	d001      	beq.n	8006f1c <prvInitialiseNewTask+0x44>
 8006f18:	b672      	cpsid	i
 8006f1a:	e7fe      	b.n	8006f1a <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	617b      	str	r3, [r7, #20]
 8006f20:	e013      	b.n	8006f4a <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006f22:	68ba      	ldr	r2, [r7, #8]
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	18d3      	adds	r3, r2, r3
 8006f28:	7818      	ldrb	r0, [r3, #0]
 8006f2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f2c:	2134      	movs	r1, #52	; 0x34
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	18d3      	adds	r3, r2, r3
 8006f32:	185b      	adds	r3, r3, r1
 8006f34:	1c02      	adds	r2, r0, #0
 8006f36:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006f38:	68ba      	ldr	r2, [r7, #8]
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	18d3      	adds	r3, r2, r3
 8006f3e:	781b      	ldrb	r3, [r3, #0]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d006      	beq.n	8006f52 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	3301      	adds	r3, #1
 8006f48:	617b      	str	r3, [r7, #20]
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	2b0f      	cmp	r3, #15
 8006f4e:	d9e8      	bls.n	8006f22 <prvInitialiseNewTask+0x4a>
 8006f50:	e000      	b.n	8006f54 <prvInitialiseNewTask+0x7c>
		{
			break;
 8006f52:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f56:	2243      	movs	r2, #67	; 0x43
 8006f58:	2100      	movs	r1, #0
 8006f5a:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006f5c:	6a3b      	ldr	r3, [r7, #32]
 8006f5e:	2b37      	cmp	r3, #55	; 0x37
 8006f60:	d901      	bls.n	8006f66 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006f62:	2337      	movs	r3, #55	; 0x37
 8006f64:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f68:	6a3a      	ldr	r2, [r7, #32]
 8006f6a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f6e:	6a3a      	ldr	r2, [r7, #32]
 8006f70:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f74:	2200      	movs	r2, #0
 8006f76:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f7a:	3304      	adds	r3, #4
 8006f7c:	0018      	movs	r0, r3
 8006f7e:	f7ff f8a7 	bl	80060d0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f84:	3318      	adds	r3, #24
 8006f86:	0018      	movs	r0, r3
 8006f88:	f7ff f8a2 	bl	80060d0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f90:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f92:	6a3b      	ldr	r3, [r7, #32]
 8006f94:	2238      	movs	r2, #56	; 0x38
 8006f96:	1ad2      	subs	r2, r2, r3
 8006f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f9a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006fa0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006faa:	2258      	movs	r2, #88	; 0x58
 8006fac:	2100      	movs	r1, #0
 8006fae:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006fb0:	683a      	ldr	r2, [r7, #0]
 8006fb2:	68f9      	ldr	r1, [r7, #12]
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	0018      	movs	r0, r3
 8006fb8:	f001 f90a 	bl	80081d0 <pxPortInitialiseStack>
 8006fbc:	0002      	movs	r2, r0
 8006fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fc0:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d002      	beq.n	8006fce <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006fcc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006fce:	46c0      	nop			; (mov r8, r8)
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	b006      	add	sp, #24
 8006fd4:	bd80      	pop	{r7, pc}
 8006fd6:	46c0      	nop			; (mov r8, r8)
 8006fd8:	3fffffff 	.word	0x3fffffff

08006fdc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b082      	sub	sp, #8
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006fe4:	f001 f98c 	bl	8008300 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006fe8:	4b2a      	ldr	r3, [pc, #168]	; (8007094 <prvAddNewTaskToReadyList+0xb8>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	1c5a      	adds	r2, r3, #1
 8006fee:	4b29      	ldr	r3, [pc, #164]	; (8007094 <prvAddNewTaskToReadyList+0xb8>)
 8006ff0:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8006ff2:	4b29      	ldr	r3, [pc, #164]	; (8007098 <prvAddNewTaskToReadyList+0xbc>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d109      	bne.n	800700e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006ffa:	4b27      	ldr	r3, [pc, #156]	; (8007098 <prvAddNewTaskToReadyList+0xbc>)
 8006ffc:	687a      	ldr	r2, [r7, #4]
 8006ffe:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007000:	4b24      	ldr	r3, [pc, #144]	; (8007094 <prvAddNewTaskToReadyList+0xb8>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	2b01      	cmp	r3, #1
 8007006:	d110      	bne.n	800702a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007008:	f000 fb94 	bl	8007734 <prvInitialiseTaskLists>
 800700c:	e00d      	b.n	800702a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800700e:	4b23      	ldr	r3, [pc, #140]	; (800709c <prvAddNewTaskToReadyList+0xc0>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d109      	bne.n	800702a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007016:	4b20      	ldr	r3, [pc, #128]	; (8007098 <prvAddNewTaskToReadyList+0xbc>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007020:	429a      	cmp	r2, r3
 8007022:	d802      	bhi.n	800702a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007024:	4b1c      	ldr	r3, [pc, #112]	; (8007098 <prvAddNewTaskToReadyList+0xbc>)
 8007026:	687a      	ldr	r2, [r7, #4]
 8007028:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800702a:	4b1d      	ldr	r3, [pc, #116]	; (80070a0 <prvAddNewTaskToReadyList+0xc4>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	1c5a      	adds	r2, r3, #1
 8007030:	4b1b      	ldr	r3, [pc, #108]	; (80070a0 <prvAddNewTaskToReadyList+0xc4>)
 8007032:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007034:	4b1a      	ldr	r3, [pc, #104]	; (80070a0 <prvAddNewTaskToReadyList+0xc4>)
 8007036:	681a      	ldr	r2, [r3, #0]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007040:	4b18      	ldr	r3, [pc, #96]	; (80070a4 <prvAddNewTaskToReadyList+0xc8>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	429a      	cmp	r2, r3
 8007046:	d903      	bls.n	8007050 <prvAddNewTaskToReadyList+0x74>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800704c:	4b15      	ldr	r3, [pc, #84]	; (80070a4 <prvAddNewTaskToReadyList+0xc8>)
 800704e:	601a      	str	r2, [r3, #0]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007054:	0013      	movs	r3, r2
 8007056:	009b      	lsls	r3, r3, #2
 8007058:	189b      	adds	r3, r3, r2
 800705a:	009b      	lsls	r3, r3, #2
 800705c:	4a12      	ldr	r2, [pc, #72]	; (80070a8 <prvAddNewTaskToReadyList+0xcc>)
 800705e:	189a      	adds	r2, r3, r2
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	3304      	adds	r3, #4
 8007064:	0019      	movs	r1, r3
 8007066:	0010      	movs	r0, r2
 8007068:	f7ff f83d 	bl	80060e6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800706c:	f001 f95a 	bl	8008324 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007070:	4b0a      	ldr	r3, [pc, #40]	; (800709c <prvAddNewTaskToReadyList+0xc0>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d008      	beq.n	800708a <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007078:	4b07      	ldr	r3, [pc, #28]	; (8007098 <prvAddNewTaskToReadyList+0xbc>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007082:	429a      	cmp	r2, r3
 8007084:	d201      	bcs.n	800708a <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007086:	f001 f92b 	bl	80082e0 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800708a:	46c0      	nop			; (mov r8, r8)
 800708c:	46bd      	mov	sp, r7
 800708e:	b002      	add	sp, #8
 8007090:	bd80      	pop	{r7, pc}
 8007092:	46c0      	nop			; (mov r8, r8)
 8007094:	20000c60 	.word	0x20000c60
 8007098:	2000078c 	.word	0x2000078c
 800709c:	20000c6c 	.word	0x20000c6c
 80070a0:	20000c7c 	.word	0x20000c7c
 80070a4:	20000c68 	.word	0x20000c68
 80070a8:	20000790 	.word	0x20000790

080070ac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b084      	sub	sp, #16
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80070b4:	2300      	movs	r3, #0
 80070b6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d010      	beq.n	80070e0 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80070be:	4b0d      	ldr	r3, [pc, #52]	; (80070f4 <vTaskDelay+0x48>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d001      	beq.n	80070ca <vTaskDelay+0x1e>
 80070c6:	b672      	cpsid	i
 80070c8:	e7fe      	b.n	80070c8 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 80070ca:	f000 f869 	bl	80071a0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2100      	movs	r1, #0
 80070d2:	0018      	movs	r0, r3
 80070d4:	f000 fd58 	bl	8007b88 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80070d8:	f000 f86e 	bl	80071b8 <xTaskResumeAll>
 80070dc:	0003      	movs	r3, r0
 80070de:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d101      	bne.n	80070ea <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 80070e6:	f001 f8fb 	bl	80082e0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80070ea:	46c0      	nop			; (mov r8, r8)
 80070ec:	46bd      	mov	sp, r7
 80070ee:	b004      	add	sp, #16
 80070f0:	bd80      	pop	{r7, pc}
 80070f2:	46c0      	nop			; (mov r8, r8)
 80070f4:	20000c88 	.word	0x20000c88

080070f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80070f8:	b590      	push	{r4, r7, lr}
 80070fa:	b089      	sub	sp, #36	; 0x24
 80070fc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80070fe:	2300      	movs	r3, #0
 8007100:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007102:	2300      	movs	r3, #0
 8007104:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007106:	003a      	movs	r2, r7
 8007108:	1d39      	adds	r1, r7, #4
 800710a:	2308      	movs	r3, #8
 800710c:	18fb      	adds	r3, r7, r3
 800710e:	0018      	movs	r0, r3
 8007110:	f7fe ff90 	bl	8006034 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007114:	683c      	ldr	r4, [r7, #0]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	68ba      	ldr	r2, [r7, #8]
 800711a:	491b      	ldr	r1, [pc, #108]	; (8007188 <vTaskStartScheduler+0x90>)
 800711c:	481b      	ldr	r0, [pc, #108]	; (800718c <vTaskStartScheduler+0x94>)
 800711e:	9202      	str	r2, [sp, #8]
 8007120:	9301      	str	r3, [sp, #4]
 8007122:	2300      	movs	r3, #0
 8007124:	9300      	str	r3, [sp, #0]
 8007126:	2300      	movs	r3, #0
 8007128:	0022      	movs	r2, r4
 800712a:	f7ff fe46 	bl	8006dba <xTaskCreateStatic>
 800712e:	0002      	movs	r2, r0
 8007130:	4b17      	ldr	r3, [pc, #92]	; (8007190 <vTaskStartScheduler+0x98>)
 8007132:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007134:	4b16      	ldr	r3, [pc, #88]	; (8007190 <vTaskStartScheduler+0x98>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d002      	beq.n	8007142 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800713c:	2301      	movs	r3, #1
 800713e:	60fb      	str	r3, [r7, #12]
 8007140:	e001      	b.n	8007146 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007142:	2300      	movs	r3, #0
 8007144:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2b01      	cmp	r3, #1
 800714a:	d103      	bne.n	8007154 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 800714c:	f000 fd70 	bl	8007c30 <xTimerCreateTimerTask>
 8007150:	0003      	movs	r3, r0
 8007152:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2b01      	cmp	r3, #1
 8007158:	d10d      	bne.n	8007176 <vTaskStartScheduler+0x7e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 800715a:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800715c:	4b0d      	ldr	r3, [pc, #52]	; (8007194 <vTaskStartScheduler+0x9c>)
 800715e:	2201      	movs	r2, #1
 8007160:	4252      	negs	r2, r2
 8007162:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007164:	4b0c      	ldr	r3, [pc, #48]	; (8007198 <vTaskStartScheduler+0xa0>)
 8007166:	2201      	movs	r2, #1
 8007168:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800716a:	4b0c      	ldr	r3, [pc, #48]	; (800719c <vTaskStartScheduler+0xa4>)
 800716c:	2200      	movs	r2, #0
 800716e:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007170:	f001 f892 	bl	8008298 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007174:	e004      	b.n	8007180 <vTaskStartScheduler+0x88>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	3301      	adds	r3, #1
 800717a:	d101      	bne.n	8007180 <vTaskStartScheduler+0x88>
 800717c:	b672      	cpsid	i
 800717e:	e7fe      	b.n	800717e <vTaskStartScheduler+0x86>
}
 8007180:	46c0      	nop			; (mov r8, r8)
 8007182:	46bd      	mov	sp, r7
 8007184:	b005      	add	sp, #20
 8007186:	bd90      	pop	{r4, r7, pc}
 8007188:	08009684 	.word	0x08009684
 800718c:	08007715 	.word	0x08007715
 8007190:	20000c84 	.word	0x20000c84
 8007194:	20000c80 	.word	0x20000c80
 8007198:	20000c6c 	.word	0x20000c6c
 800719c:	20000c64 	.word	0x20000c64

080071a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80071a4:	4b03      	ldr	r3, [pc, #12]	; (80071b4 <vTaskSuspendAll+0x14>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	1c5a      	adds	r2, r3, #1
 80071aa:	4b02      	ldr	r3, [pc, #8]	; (80071b4 <vTaskSuspendAll+0x14>)
 80071ac:	601a      	str	r2, [r3, #0]
}
 80071ae:	46c0      	nop			; (mov r8, r8)
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}
 80071b4:	20000c88 	.word	0x20000c88

080071b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b084      	sub	sp, #16
 80071bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80071be:	2300      	movs	r3, #0
 80071c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80071c2:	2300      	movs	r3, #0
 80071c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80071c6:	4b3a      	ldr	r3, [pc, #232]	; (80072b0 <xTaskResumeAll+0xf8>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d101      	bne.n	80071d2 <xTaskResumeAll+0x1a>
 80071ce:	b672      	cpsid	i
 80071d0:	e7fe      	b.n	80071d0 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80071d2:	f001 f895 	bl	8008300 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80071d6:	4b36      	ldr	r3, [pc, #216]	; (80072b0 <xTaskResumeAll+0xf8>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	1e5a      	subs	r2, r3, #1
 80071dc:	4b34      	ldr	r3, [pc, #208]	; (80072b0 <xTaskResumeAll+0xf8>)
 80071de:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80071e0:	4b33      	ldr	r3, [pc, #204]	; (80072b0 <xTaskResumeAll+0xf8>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d15b      	bne.n	80072a0 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80071e8:	4b32      	ldr	r3, [pc, #200]	; (80072b4 <xTaskResumeAll+0xfc>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d057      	beq.n	80072a0 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80071f0:	e02f      	b.n	8007252 <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80071f2:	4b31      	ldr	r3, [pc, #196]	; (80072b8 <xTaskResumeAll+0x100>)
 80071f4:	68db      	ldr	r3, [r3, #12]
 80071f6:	68db      	ldr	r3, [r3, #12]
 80071f8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	3318      	adds	r3, #24
 80071fe:	0018      	movs	r0, r3
 8007200:	f7fe ffc9 	bl	8006196 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	3304      	adds	r3, #4
 8007208:	0018      	movs	r0, r3
 800720a:	f7fe ffc4 	bl	8006196 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007212:	4b2a      	ldr	r3, [pc, #168]	; (80072bc <xTaskResumeAll+0x104>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	429a      	cmp	r2, r3
 8007218:	d903      	bls.n	8007222 <xTaskResumeAll+0x6a>
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800721e:	4b27      	ldr	r3, [pc, #156]	; (80072bc <xTaskResumeAll+0x104>)
 8007220:	601a      	str	r2, [r3, #0]
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007226:	0013      	movs	r3, r2
 8007228:	009b      	lsls	r3, r3, #2
 800722a:	189b      	adds	r3, r3, r2
 800722c:	009b      	lsls	r3, r3, #2
 800722e:	4a24      	ldr	r2, [pc, #144]	; (80072c0 <xTaskResumeAll+0x108>)
 8007230:	189a      	adds	r2, r3, r2
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	3304      	adds	r3, #4
 8007236:	0019      	movs	r1, r3
 8007238:	0010      	movs	r0, r2
 800723a:	f7fe ff54 	bl	80060e6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007242:	4b20      	ldr	r3, [pc, #128]	; (80072c4 <xTaskResumeAll+0x10c>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007248:	429a      	cmp	r2, r3
 800724a:	d302      	bcc.n	8007252 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 800724c:	4b1e      	ldr	r3, [pc, #120]	; (80072c8 <xTaskResumeAll+0x110>)
 800724e:	2201      	movs	r2, #1
 8007250:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007252:	4b19      	ldr	r3, [pc, #100]	; (80072b8 <xTaskResumeAll+0x100>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d1cb      	bne.n	80071f2 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d001      	beq.n	8007264 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007260:	f000 fb02 	bl	8007868 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007264:	4b19      	ldr	r3, [pc, #100]	; (80072cc <xTaskResumeAll+0x114>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d00f      	beq.n	8007290 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007270:	f000 f83c 	bl	80072ec <xTaskIncrementTick>
 8007274:	1e03      	subs	r3, r0, #0
 8007276:	d002      	beq.n	800727e <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8007278:	4b13      	ldr	r3, [pc, #76]	; (80072c8 <xTaskResumeAll+0x110>)
 800727a:	2201      	movs	r2, #1
 800727c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	3b01      	subs	r3, #1
 8007282:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d1f2      	bne.n	8007270 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 800728a:	4b10      	ldr	r3, [pc, #64]	; (80072cc <xTaskResumeAll+0x114>)
 800728c:	2200      	movs	r2, #0
 800728e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007290:	4b0d      	ldr	r3, [pc, #52]	; (80072c8 <xTaskResumeAll+0x110>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d003      	beq.n	80072a0 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007298:	2301      	movs	r3, #1
 800729a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800729c:	f001 f820 	bl	80082e0 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80072a0:	f001 f840 	bl	8008324 <vPortExitCritical>

	return xAlreadyYielded;
 80072a4:	68bb      	ldr	r3, [r7, #8]
}
 80072a6:	0018      	movs	r0, r3
 80072a8:	46bd      	mov	sp, r7
 80072aa:	b004      	add	sp, #16
 80072ac:	bd80      	pop	{r7, pc}
 80072ae:	46c0      	nop			; (mov r8, r8)
 80072b0:	20000c88 	.word	0x20000c88
 80072b4:	20000c60 	.word	0x20000c60
 80072b8:	20000c20 	.word	0x20000c20
 80072bc:	20000c68 	.word	0x20000c68
 80072c0:	20000790 	.word	0x20000790
 80072c4:	2000078c 	.word	0x2000078c
 80072c8:	20000c74 	.word	0x20000c74
 80072cc:	20000c70 	.word	0x20000c70

080072d0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b082      	sub	sp, #8
 80072d4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80072d6:	4b04      	ldr	r3, [pc, #16]	; (80072e8 <xTaskGetTickCount+0x18>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80072dc:	687b      	ldr	r3, [r7, #4]
}
 80072de:	0018      	movs	r0, r3
 80072e0:	46bd      	mov	sp, r7
 80072e2:	b002      	add	sp, #8
 80072e4:	bd80      	pop	{r7, pc}
 80072e6:	46c0      	nop			; (mov r8, r8)
 80072e8:	20000c64 	.word	0x20000c64

080072ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b086      	sub	sp, #24
 80072f0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80072f2:	2300      	movs	r3, #0
 80072f4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80072f6:	4b4c      	ldr	r3, [pc, #304]	; (8007428 <xTaskIncrementTick+0x13c>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d000      	beq.n	8007300 <xTaskIncrementTick+0x14>
 80072fe:	e083      	b.n	8007408 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007300:	4b4a      	ldr	r3, [pc, #296]	; (800742c <xTaskIncrementTick+0x140>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	3301      	adds	r3, #1
 8007306:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007308:	4b48      	ldr	r3, [pc, #288]	; (800742c <xTaskIncrementTick+0x140>)
 800730a:	693a      	ldr	r2, [r7, #16]
 800730c:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d117      	bne.n	8007344 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8007314:	4b46      	ldr	r3, [pc, #280]	; (8007430 <xTaskIncrementTick+0x144>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d001      	beq.n	8007322 <xTaskIncrementTick+0x36>
 800731e:	b672      	cpsid	i
 8007320:	e7fe      	b.n	8007320 <xTaskIncrementTick+0x34>
 8007322:	4b43      	ldr	r3, [pc, #268]	; (8007430 <xTaskIncrementTick+0x144>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	60fb      	str	r3, [r7, #12]
 8007328:	4b42      	ldr	r3, [pc, #264]	; (8007434 <xTaskIncrementTick+0x148>)
 800732a:	681a      	ldr	r2, [r3, #0]
 800732c:	4b40      	ldr	r3, [pc, #256]	; (8007430 <xTaskIncrementTick+0x144>)
 800732e:	601a      	str	r2, [r3, #0]
 8007330:	4b40      	ldr	r3, [pc, #256]	; (8007434 <xTaskIncrementTick+0x148>)
 8007332:	68fa      	ldr	r2, [r7, #12]
 8007334:	601a      	str	r2, [r3, #0]
 8007336:	4b40      	ldr	r3, [pc, #256]	; (8007438 <xTaskIncrementTick+0x14c>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	1c5a      	adds	r2, r3, #1
 800733c:	4b3e      	ldr	r3, [pc, #248]	; (8007438 <xTaskIncrementTick+0x14c>)
 800733e:	601a      	str	r2, [r3, #0]
 8007340:	f000 fa92 	bl	8007868 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007344:	4b3d      	ldr	r3, [pc, #244]	; (800743c <xTaskIncrementTick+0x150>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	693a      	ldr	r2, [r7, #16]
 800734a:	429a      	cmp	r2, r3
 800734c:	d34e      	bcc.n	80073ec <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800734e:	4b38      	ldr	r3, [pc, #224]	; (8007430 <xTaskIncrementTick+0x144>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d101      	bne.n	800735c <xTaskIncrementTick+0x70>
 8007358:	2301      	movs	r3, #1
 800735a:	e000      	b.n	800735e <xTaskIncrementTick+0x72>
 800735c:	2300      	movs	r3, #0
 800735e:	2b00      	cmp	r3, #0
 8007360:	d004      	beq.n	800736c <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007362:	4b36      	ldr	r3, [pc, #216]	; (800743c <xTaskIncrementTick+0x150>)
 8007364:	2201      	movs	r2, #1
 8007366:	4252      	negs	r2, r2
 8007368:	601a      	str	r2, [r3, #0]
					break;
 800736a:	e03f      	b.n	80073ec <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800736c:	4b30      	ldr	r3, [pc, #192]	; (8007430 <xTaskIncrementTick+0x144>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	68db      	ldr	r3, [r3, #12]
 8007372:	68db      	ldr	r3, [r3, #12]
 8007374:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	685b      	ldr	r3, [r3, #4]
 800737a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800737c:	693a      	ldr	r2, [r7, #16]
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	429a      	cmp	r2, r3
 8007382:	d203      	bcs.n	800738c <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007384:	4b2d      	ldr	r3, [pc, #180]	; (800743c <xTaskIncrementTick+0x150>)
 8007386:	687a      	ldr	r2, [r7, #4]
 8007388:	601a      	str	r2, [r3, #0]
						break;
 800738a:	e02f      	b.n	80073ec <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	3304      	adds	r3, #4
 8007390:	0018      	movs	r0, r3
 8007392:	f7fe ff00 	bl	8006196 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800739a:	2b00      	cmp	r3, #0
 800739c:	d004      	beq.n	80073a8 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	3318      	adds	r3, #24
 80073a2:	0018      	movs	r0, r3
 80073a4:	f7fe fef7 	bl	8006196 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073ac:	4b24      	ldr	r3, [pc, #144]	; (8007440 <xTaskIncrementTick+0x154>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	429a      	cmp	r2, r3
 80073b2:	d903      	bls.n	80073bc <xTaskIncrementTick+0xd0>
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073b8:	4b21      	ldr	r3, [pc, #132]	; (8007440 <xTaskIncrementTick+0x154>)
 80073ba:	601a      	str	r2, [r3, #0]
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073c0:	0013      	movs	r3, r2
 80073c2:	009b      	lsls	r3, r3, #2
 80073c4:	189b      	adds	r3, r3, r2
 80073c6:	009b      	lsls	r3, r3, #2
 80073c8:	4a1e      	ldr	r2, [pc, #120]	; (8007444 <xTaskIncrementTick+0x158>)
 80073ca:	189a      	adds	r2, r3, r2
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	3304      	adds	r3, #4
 80073d0:	0019      	movs	r1, r3
 80073d2:	0010      	movs	r0, r2
 80073d4:	f7fe fe87 	bl	80060e6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073dc:	4b1a      	ldr	r3, [pc, #104]	; (8007448 <xTaskIncrementTick+0x15c>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073e2:	429a      	cmp	r2, r3
 80073e4:	d3b3      	bcc.n	800734e <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 80073e6:	2301      	movs	r3, #1
 80073e8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80073ea:	e7b0      	b.n	800734e <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80073ec:	4b16      	ldr	r3, [pc, #88]	; (8007448 <xTaskIncrementTick+0x15c>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073f2:	4914      	ldr	r1, [pc, #80]	; (8007444 <xTaskIncrementTick+0x158>)
 80073f4:	0013      	movs	r3, r2
 80073f6:	009b      	lsls	r3, r3, #2
 80073f8:	189b      	adds	r3, r3, r2
 80073fa:	009b      	lsls	r3, r3, #2
 80073fc:	585b      	ldr	r3, [r3, r1]
 80073fe:	2b01      	cmp	r3, #1
 8007400:	d907      	bls.n	8007412 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8007402:	2301      	movs	r3, #1
 8007404:	617b      	str	r3, [r7, #20]
 8007406:	e004      	b.n	8007412 <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007408:	4b10      	ldr	r3, [pc, #64]	; (800744c <xTaskIncrementTick+0x160>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	1c5a      	adds	r2, r3, #1
 800740e:	4b0f      	ldr	r3, [pc, #60]	; (800744c <xTaskIncrementTick+0x160>)
 8007410:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007412:	4b0f      	ldr	r3, [pc, #60]	; (8007450 <xTaskIncrementTick+0x164>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d001      	beq.n	800741e <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 800741a:	2301      	movs	r3, #1
 800741c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800741e:	697b      	ldr	r3, [r7, #20]
}
 8007420:	0018      	movs	r0, r3
 8007422:	46bd      	mov	sp, r7
 8007424:	b006      	add	sp, #24
 8007426:	bd80      	pop	{r7, pc}
 8007428:	20000c88 	.word	0x20000c88
 800742c:	20000c64 	.word	0x20000c64
 8007430:	20000c18 	.word	0x20000c18
 8007434:	20000c1c 	.word	0x20000c1c
 8007438:	20000c78 	.word	0x20000c78
 800743c:	20000c80 	.word	0x20000c80
 8007440:	20000c68 	.word	0x20000c68
 8007444:	20000790 	.word	0x20000790
 8007448:	2000078c 	.word	0x2000078c
 800744c:	20000c70 	.word	0x20000c70
 8007450:	20000c74 	.word	0x20000c74

08007454 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b082      	sub	sp, #8
 8007458:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800745a:	4b22      	ldr	r3, [pc, #136]	; (80074e4 <vTaskSwitchContext+0x90>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d003      	beq.n	800746a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007462:	4b21      	ldr	r3, [pc, #132]	; (80074e8 <vTaskSwitchContext+0x94>)
 8007464:	2201      	movs	r2, #1
 8007466:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007468:	e037      	b.n	80074da <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 800746a:	4b1f      	ldr	r3, [pc, #124]	; (80074e8 <vTaskSwitchContext+0x94>)
 800746c:	2200      	movs	r2, #0
 800746e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007470:	4b1e      	ldr	r3, [pc, #120]	; (80074ec <vTaskSwitchContext+0x98>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	607b      	str	r3, [r7, #4]
 8007476:	e007      	b.n	8007488 <vTaskSwitchContext+0x34>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d101      	bne.n	8007482 <vTaskSwitchContext+0x2e>
 800747e:	b672      	cpsid	i
 8007480:	e7fe      	b.n	8007480 <vTaskSwitchContext+0x2c>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	3b01      	subs	r3, #1
 8007486:	607b      	str	r3, [r7, #4]
 8007488:	4919      	ldr	r1, [pc, #100]	; (80074f0 <vTaskSwitchContext+0x9c>)
 800748a:	687a      	ldr	r2, [r7, #4]
 800748c:	0013      	movs	r3, r2
 800748e:	009b      	lsls	r3, r3, #2
 8007490:	189b      	adds	r3, r3, r2
 8007492:	009b      	lsls	r3, r3, #2
 8007494:	585b      	ldr	r3, [r3, r1]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d0ee      	beq.n	8007478 <vTaskSwitchContext+0x24>
 800749a:	687a      	ldr	r2, [r7, #4]
 800749c:	0013      	movs	r3, r2
 800749e:	009b      	lsls	r3, r3, #2
 80074a0:	189b      	adds	r3, r3, r2
 80074a2:	009b      	lsls	r3, r3, #2
 80074a4:	4a12      	ldr	r2, [pc, #72]	; (80074f0 <vTaskSwitchContext+0x9c>)
 80074a6:	189b      	adds	r3, r3, r2
 80074a8:	603b      	str	r3, [r7, #0]
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	685a      	ldr	r2, [r3, #4]
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	605a      	str	r2, [r3, #4]
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	685a      	ldr	r2, [r3, #4]
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	3308      	adds	r3, #8
 80074bc:	429a      	cmp	r2, r3
 80074be:	d104      	bne.n	80074ca <vTaskSwitchContext+0x76>
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	685a      	ldr	r2, [r3, #4]
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	605a      	str	r2, [r3, #4]
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	685b      	ldr	r3, [r3, #4]
 80074ce:	68da      	ldr	r2, [r3, #12]
 80074d0:	4b08      	ldr	r3, [pc, #32]	; (80074f4 <vTaskSwitchContext+0xa0>)
 80074d2:	601a      	str	r2, [r3, #0]
 80074d4:	4b05      	ldr	r3, [pc, #20]	; (80074ec <vTaskSwitchContext+0x98>)
 80074d6:	687a      	ldr	r2, [r7, #4]
 80074d8:	601a      	str	r2, [r3, #0]
}
 80074da:	46c0      	nop			; (mov r8, r8)
 80074dc:	46bd      	mov	sp, r7
 80074de:	b002      	add	sp, #8
 80074e0:	bd80      	pop	{r7, pc}
 80074e2:	46c0      	nop			; (mov r8, r8)
 80074e4:	20000c88 	.word	0x20000c88
 80074e8:	20000c74 	.word	0x20000c74
 80074ec:	20000c68 	.word	0x20000c68
 80074f0:	20000790 	.word	0x20000790
 80074f4:	2000078c 	.word	0x2000078c

080074f8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b082      	sub	sp, #8
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
 8007500:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d101      	bne.n	800750c <vTaskPlaceOnEventList+0x14>
 8007508:	b672      	cpsid	i
 800750a:	e7fe      	b.n	800750a <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800750c:	4b08      	ldr	r3, [pc, #32]	; (8007530 <vTaskPlaceOnEventList+0x38>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	3318      	adds	r3, #24
 8007512:	001a      	movs	r2, r3
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	0011      	movs	r1, r2
 8007518:	0018      	movs	r0, r3
 800751a:	f7fe fe06 	bl	800612a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	2101      	movs	r1, #1
 8007522:	0018      	movs	r0, r3
 8007524:	f000 fb30 	bl	8007b88 <prvAddCurrentTaskToDelayedList>
}
 8007528:	46c0      	nop			; (mov r8, r8)
 800752a:	46bd      	mov	sp, r7
 800752c:	b002      	add	sp, #8
 800752e:	bd80      	pop	{r7, pc}
 8007530:	2000078c 	.word	0x2000078c

08007534 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007534:	b580      	push	{r7, lr}
 8007536:	b084      	sub	sp, #16
 8007538:	af00      	add	r7, sp, #0
 800753a:	60f8      	str	r0, [r7, #12]
 800753c:	60b9      	str	r1, [r7, #8]
 800753e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d101      	bne.n	800754a <vTaskPlaceOnEventListRestricted+0x16>
 8007546:	b672      	cpsid	i
 8007548:	e7fe      	b.n	8007548 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800754a:	4b0c      	ldr	r3, [pc, #48]	; (800757c <vTaskPlaceOnEventListRestricted+0x48>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	3318      	adds	r3, #24
 8007550:	001a      	movs	r2, r3
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	0011      	movs	r1, r2
 8007556:	0018      	movs	r0, r3
 8007558:	f7fe fdc5 	bl	80060e6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d002      	beq.n	8007568 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 8007562:	2301      	movs	r3, #1
 8007564:	425b      	negs	r3, r3
 8007566:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007568:	687a      	ldr	r2, [r7, #4]
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	0011      	movs	r1, r2
 800756e:	0018      	movs	r0, r3
 8007570:	f000 fb0a 	bl	8007b88 <prvAddCurrentTaskToDelayedList>
	}
 8007574:	46c0      	nop			; (mov r8, r8)
 8007576:	46bd      	mov	sp, r7
 8007578:	b004      	add	sp, #16
 800757a:	bd80      	pop	{r7, pc}
 800757c:	2000078c 	.word	0x2000078c

08007580 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b084      	sub	sp, #16
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	68db      	ldr	r3, [r3, #12]
 800758c:	68db      	ldr	r3, [r3, #12]
 800758e:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d101      	bne.n	800759a <xTaskRemoveFromEventList+0x1a>
 8007596:	b672      	cpsid	i
 8007598:	e7fe      	b.n	8007598 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	3318      	adds	r3, #24
 800759e:	0018      	movs	r0, r3
 80075a0:	f7fe fdf9 	bl	8006196 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075a4:	4b1e      	ldr	r3, [pc, #120]	; (8007620 <xTaskRemoveFromEventList+0xa0>)
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d11d      	bne.n	80075e8 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	3304      	adds	r3, #4
 80075b0:	0018      	movs	r0, r3
 80075b2:	f7fe fdf0 	bl	8006196 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075ba:	4b1a      	ldr	r3, [pc, #104]	; (8007624 <xTaskRemoveFromEventList+0xa4>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	429a      	cmp	r2, r3
 80075c0:	d903      	bls.n	80075ca <xTaskRemoveFromEventList+0x4a>
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075c6:	4b17      	ldr	r3, [pc, #92]	; (8007624 <xTaskRemoveFromEventList+0xa4>)
 80075c8:	601a      	str	r2, [r3, #0]
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075ce:	0013      	movs	r3, r2
 80075d0:	009b      	lsls	r3, r3, #2
 80075d2:	189b      	adds	r3, r3, r2
 80075d4:	009b      	lsls	r3, r3, #2
 80075d6:	4a14      	ldr	r2, [pc, #80]	; (8007628 <xTaskRemoveFromEventList+0xa8>)
 80075d8:	189a      	adds	r2, r3, r2
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	3304      	adds	r3, #4
 80075de:	0019      	movs	r1, r3
 80075e0:	0010      	movs	r0, r2
 80075e2:	f7fe fd80 	bl	80060e6 <vListInsertEnd>
 80075e6:	e007      	b.n	80075f8 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	3318      	adds	r3, #24
 80075ec:	001a      	movs	r2, r3
 80075ee:	4b0f      	ldr	r3, [pc, #60]	; (800762c <xTaskRemoveFromEventList+0xac>)
 80075f0:	0011      	movs	r1, r2
 80075f2:	0018      	movs	r0, r3
 80075f4:	f7fe fd77 	bl	80060e6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075fc:	4b0c      	ldr	r3, [pc, #48]	; (8007630 <xTaskRemoveFromEventList+0xb0>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007602:	429a      	cmp	r2, r3
 8007604:	d905      	bls.n	8007612 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007606:	2301      	movs	r3, #1
 8007608:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800760a:	4b0a      	ldr	r3, [pc, #40]	; (8007634 <xTaskRemoveFromEventList+0xb4>)
 800760c:	2201      	movs	r2, #1
 800760e:	601a      	str	r2, [r3, #0]
 8007610:	e001      	b.n	8007616 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 8007612:	2300      	movs	r3, #0
 8007614:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8007616:	68fb      	ldr	r3, [r7, #12]
}
 8007618:	0018      	movs	r0, r3
 800761a:	46bd      	mov	sp, r7
 800761c:	b004      	add	sp, #16
 800761e:	bd80      	pop	{r7, pc}
 8007620:	20000c88 	.word	0x20000c88
 8007624:	20000c68 	.word	0x20000c68
 8007628:	20000790 	.word	0x20000790
 800762c:	20000c20 	.word	0x20000c20
 8007630:	2000078c 	.word	0x2000078c
 8007634:	20000c74 	.word	0x20000c74

08007638 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b082      	sub	sp, #8
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007640:	4b05      	ldr	r3, [pc, #20]	; (8007658 <vTaskInternalSetTimeOutState+0x20>)
 8007642:	681a      	ldr	r2, [r3, #0]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007648:	4b04      	ldr	r3, [pc, #16]	; (800765c <vTaskInternalSetTimeOutState+0x24>)
 800764a:	681a      	ldr	r2, [r3, #0]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	605a      	str	r2, [r3, #4]
}
 8007650:	46c0      	nop			; (mov r8, r8)
 8007652:	46bd      	mov	sp, r7
 8007654:	b002      	add	sp, #8
 8007656:	bd80      	pop	{r7, pc}
 8007658:	20000c78 	.word	0x20000c78
 800765c:	20000c64 	.word	0x20000c64

08007660 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b086      	sub	sp, #24
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
 8007668:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d101      	bne.n	8007674 <xTaskCheckForTimeOut+0x14>
 8007670:	b672      	cpsid	i
 8007672:	e7fe      	b.n	8007672 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d101      	bne.n	800767e <xTaskCheckForTimeOut+0x1e>
 800767a:	b672      	cpsid	i
 800767c:	e7fe      	b.n	800767c <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 800767e:	f000 fe3f 	bl	8008300 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007682:	4b1d      	ldr	r3, [pc, #116]	; (80076f8 <xTaskCheckForTimeOut+0x98>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	693a      	ldr	r2, [r7, #16]
 800768e:	1ad3      	subs	r3, r2, r3
 8007690:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	3301      	adds	r3, #1
 8007698:	d102      	bne.n	80076a0 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800769a:	2300      	movs	r3, #0
 800769c:	617b      	str	r3, [r7, #20]
 800769e:	e024      	b.n	80076ea <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681a      	ldr	r2, [r3, #0]
 80076a4:	4b15      	ldr	r3, [pc, #84]	; (80076fc <xTaskCheckForTimeOut+0x9c>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	429a      	cmp	r2, r3
 80076aa:	d007      	beq.n	80076bc <xTaskCheckForTimeOut+0x5c>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	685b      	ldr	r3, [r3, #4]
 80076b0:	693a      	ldr	r2, [r7, #16]
 80076b2:	429a      	cmp	r2, r3
 80076b4:	d302      	bcc.n	80076bc <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80076b6:	2301      	movs	r3, #1
 80076b8:	617b      	str	r3, [r7, #20]
 80076ba:	e016      	b.n	80076ea <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	68fa      	ldr	r2, [r7, #12]
 80076c2:	429a      	cmp	r2, r3
 80076c4:	d20c      	bcs.n	80076e0 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	681a      	ldr	r2, [r3, #0]
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	1ad2      	subs	r2, r2, r3
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	0018      	movs	r0, r3
 80076d6:	f7ff ffaf 	bl	8007638 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80076da:	2300      	movs	r3, #0
 80076dc:	617b      	str	r3, [r7, #20]
 80076de:	e004      	b.n	80076ea <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	2200      	movs	r2, #0
 80076e4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80076e6:	2301      	movs	r3, #1
 80076e8:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 80076ea:	f000 fe1b 	bl	8008324 <vPortExitCritical>

	return xReturn;
 80076ee:	697b      	ldr	r3, [r7, #20]
}
 80076f0:	0018      	movs	r0, r3
 80076f2:	46bd      	mov	sp, r7
 80076f4:	b006      	add	sp, #24
 80076f6:	bd80      	pop	{r7, pc}
 80076f8:	20000c64 	.word	0x20000c64
 80076fc:	20000c78 	.word	0x20000c78

08007700 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007700:	b580      	push	{r7, lr}
 8007702:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007704:	4b02      	ldr	r3, [pc, #8]	; (8007710 <vTaskMissedYield+0x10>)
 8007706:	2201      	movs	r2, #1
 8007708:	601a      	str	r2, [r3, #0]
}
 800770a:	46c0      	nop			; (mov r8, r8)
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}
 8007710:	20000c74 	.word	0x20000c74

08007714 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b082      	sub	sp, #8
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800771c:	f000 f84e 	bl	80077bc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007720:	4b03      	ldr	r3, [pc, #12]	; (8007730 <prvIdleTask+0x1c>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	2b01      	cmp	r3, #1
 8007726:	d9f9      	bls.n	800771c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007728:	f000 fdda 	bl	80082e0 <vPortYield>
		prvCheckTasksWaitingTermination();
 800772c:	e7f6      	b.n	800771c <prvIdleTask+0x8>
 800772e:	46c0      	nop			; (mov r8, r8)
 8007730:	20000790 	.word	0x20000790

08007734 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b082      	sub	sp, #8
 8007738:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800773a:	2300      	movs	r3, #0
 800773c:	607b      	str	r3, [r7, #4]
 800773e:	e00c      	b.n	800775a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007740:	687a      	ldr	r2, [r7, #4]
 8007742:	0013      	movs	r3, r2
 8007744:	009b      	lsls	r3, r3, #2
 8007746:	189b      	adds	r3, r3, r2
 8007748:	009b      	lsls	r3, r3, #2
 800774a:	4a14      	ldr	r2, [pc, #80]	; (800779c <prvInitialiseTaskLists+0x68>)
 800774c:	189b      	adds	r3, r3, r2
 800774e:	0018      	movs	r0, r3
 8007750:	f7fe fca0 	bl	8006094 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	3301      	adds	r3, #1
 8007758:	607b      	str	r3, [r7, #4]
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2b37      	cmp	r3, #55	; 0x37
 800775e:	d9ef      	bls.n	8007740 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007760:	4b0f      	ldr	r3, [pc, #60]	; (80077a0 <prvInitialiseTaskLists+0x6c>)
 8007762:	0018      	movs	r0, r3
 8007764:	f7fe fc96 	bl	8006094 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007768:	4b0e      	ldr	r3, [pc, #56]	; (80077a4 <prvInitialiseTaskLists+0x70>)
 800776a:	0018      	movs	r0, r3
 800776c:	f7fe fc92 	bl	8006094 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007770:	4b0d      	ldr	r3, [pc, #52]	; (80077a8 <prvInitialiseTaskLists+0x74>)
 8007772:	0018      	movs	r0, r3
 8007774:	f7fe fc8e 	bl	8006094 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007778:	4b0c      	ldr	r3, [pc, #48]	; (80077ac <prvInitialiseTaskLists+0x78>)
 800777a:	0018      	movs	r0, r3
 800777c:	f7fe fc8a 	bl	8006094 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007780:	4b0b      	ldr	r3, [pc, #44]	; (80077b0 <prvInitialiseTaskLists+0x7c>)
 8007782:	0018      	movs	r0, r3
 8007784:	f7fe fc86 	bl	8006094 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007788:	4b0a      	ldr	r3, [pc, #40]	; (80077b4 <prvInitialiseTaskLists+0x80>)
 800778a:	4a05      	ldr	r2, [pc, #20]	; (80077a0 <prvInitialiseTaskLists+0x6c>)
 800778c:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800778e:	4b0a      	ldr	r3, [pc, #40]	; (80077b8 <prvInitialiseTaskLists+0x84>)
 8007790:	4a04      	ldr	r2, [pc, #16]	; (80077a4 <prvInitialiseTaskLists+0x70>)
 8007792:	601a      	str	r2, [r3, #0]
}
 8007794:	46c0      	nop			; (mov r8, r8)
 8007796:	46bd      	mov	sp, r7
 8007798:	b002      	add	sp, #8
 800779a:	bd80      	pop	{r7, pc}
 800779c:	20000790 	.word	0x20000790
 80077a0:	20000bf0 	.word	0x20000bf0
 80077a4:	20000c04 	.word	0x20000c04
 80077a8:	20000c20 	.word	0x20000c20
 80077ac:	20000c34 	.word	0x20000c34
 80077b0:	20000c4c 	.word	0x20000c4c
 80077b4:	20000c18 	.word	0x20000c18
 80077b8:	20000c1c 	.word	0x20000c1c

080077bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b082      	sub	sp, #8
 80077c0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80077c2:	e01a      	b.n	80077fa <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 80077c4:	f000 fd9c 	bl	8008300 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80077c8:	4b10      	ldr	r3, [pc, #64]	; (800780c <prvCheckTasksWaitingTermination+0x50>)
 80077ca:	68db      	ldr	r3, [r3, #12]
 80077cc:	68db      	ldr	r3, [r3, #12]
 80077ce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	3304      	adds	r3, #4
 80077d4:	0018      	movs	r0, r3
 80077d6:	f7fe fcde 	bl	8006196 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80077da:	4b0d      	ldr	r3, [pc, #52]	; (8007810 <prvCheckTasksWaitingTermination+0x54>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	1e5a      	subs	r2, r3, #1
 80077e0:	4b0b      	ldr	r3, [pc, #44]	; (8007810 <prvCheckTasksWaitingTermination+0x54>)
 80077e2:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 80077e4:	4b0b      	ldr	r3, [pc, #44]	; (8007814 <prvCheckTasksWaitingTermination+0x58>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	1e5a      	subs	r2, r3, #1
 80077ea:	4b0a      	ldr	r3, [pc, #40]	; (8007814 <prvCheckTasksWaitingTermination+0x58>)
 80077ec:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 80077ee:	f000 fd99 	bl	8008324 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	0018      	movs	r0, r3
 80077f6:	f000 f80f 	bl	8007818 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80077fa:	4b06      	ldr	r3, [pc, #24]	; (8007814 <prvCheckTasksWaitingTermination+0x58>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d1e0      	bne.n	80077c4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007802:	46c0      	nop			; (mov r8, r8)
 8007804:	46c0      	nop			; (mov r8, r8)
 8007806:	46bd      	mov	sp, r7
 8007808:	b002      	add	sp, #8
 800780a:	bd80      	pop	{r7, pc}
 800780c:	20000c34 	.word	0x20000c34
 8007810:	20000c60 	.word	0x20000c60
 8007814:	20000c48 	.word	0x20000c48

08007818 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007818:	b580      	push	{r7, lr}
 800781a:	b082      	sub	sp, #8
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2259      	movs	r2, #89	; 0x59
 8007824:	5c9b      	ldrb	r3, [r3, r2]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d109      	bne.n	800783e <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800782e:	0018      	movs	r0, r3
 8007830:	f000 fea4 	bl	800857c <vPortFree>
				vPortFree( pxTCB );
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	0018      	movs	r0, r3
 8007838:	f000 fea0 	bl	800857c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800783c:	e010      	b.n	8007860 <prvDeleteTCB+0x48>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2259      	movs	r2, #89	; 0x59
 8007842:	5c9b      	ldrb	r3, [r3, r2]
 8007844:	2b01      	cmp	r3, #1
 8007846:	d104      	bne.n	8007852 <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	0018      	movs	r0, r3
 800784c:	f000 fe96 	bl	800857c <vPortFree>
	}
 8007850:	e006      	b.n	8007860 <prvDeleteTCB+0x48>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2259      	movs	r2, #89	; 0x59
 8007856:	5c9b      	ldrb	r3, [r3, r2]
 8007858:	2b02      	cmp	r3, #2
 800785a:	d001      	beq.n	8007860 <prvDeleteTCB+0x48>
 800785c:	b672      	cpsid	i
 800785e:	e7fe      	b.n	800785e <prvDeleteTCB+0x46>
	}
 8007860:	46c0      	nop			; (mov r8, r8)
 8007862:	46bd      	mov	sp, r7
 8007864:	b002      	add	sp, #8
 8007866:	bd80      	pop	{r7, pc}

08007868 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b082      	sub	sp, #8
 800786c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800786e:	4b0e      	ldr	r3, [pc, #56]	; (80078a8 <prvResetNextTaskUnblockTime+0x40>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d101      	bne.n	800787c <prvResetNextTaskUnblockTime+0x14>
 8007878:	2301      	movs	r3, #1
 800787a:	e000      	b.n	800787e <prvResetNextTaskUnblockTime+0x16>
 800787c:	2300      	movs	r3, #0
 800787e:	2b00      	cmp	r3, #0
 8007880:	d004      	beq.n	800788c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007882:	4b0a      	ldr	r3, [pc, #40]	; (80078ac <prvResetNextTaskUnblockTime+0x44>)
 8007884:	2201      	movs	r2, #1
 8007886:	4252      	negs	r2, r2
 8007888:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800788a:	e008      	b.n	800789e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800788c:	4b06      	ldr	r3, [pc, #24]	; (80078a8 <prvResetNextTaskUnblockTime+0x40>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	68db      	ldr	r3, [r3, #12]
 8007892:	68db      	ldr	r3, [r3, #12]
 8007894:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	685a      	ldr	r2, [r3, #4]
 800789a:	4b04      	ldr	r3, [pc, #16]	; (80078ac <prvResetNextTaskUnblockTime+0x44>)
 800789c:	601a      	str	r2, [r3, #0]
}
 800789e:	46c0      	nop			; (mov r8, r8)
 80078a0:	46bd      	mov	sp, r7
 80078a2:	b002      	add	sp, #8
 80078a4:	bd80      	pop	{r7, pc}
 80078a6:	46c0      	nop			; (mov r8, r8)
 80078a8:	20000c18 	.word	0x20000c18
 80078ac:	20000c80 	.word	0x20000c80

080078b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b082      	sub	sp, #8
 80078b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80078b6:	4b0a      	ldr	r3, [pc, #40]	; (80078e0 <xTaskGetSchedulerState+0x30>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d102      	bne.n	80078c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80078be:	2301      	movs	r3, #1
 80078c0:	607b      	str	r3, [r7, #4]
 80078c2:	e008      	b.n	80078d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078c4:	4b07      	ldr	r3, [pc, #28]	; (80078e4 <xTaskGetSchedulerState+0x34>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d102      	bne.n	80078d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80078cc:	2302      	movs	r3, #2
 80078ce:	607b      	str	r3, [r7, #4]
 80078d0:	e001      	b.n	80078d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80078d2:	2300      	movs	r3, #0
 80078d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80078d6:	687b      	ldr	r3, [r7, #4]
	}
 80078d8:	0018      	movs	r0, r3
 80078da:	46bd      	mov	sp, r7
 80078dc:	b002      	add	sp, #8
 80078de:	bd80      	pop	{r7, pc}
 80078e0:	20000c6c 	.word	0x20000c6c
 80078e4:	20000c88 	.word	0x20000c88

080078e8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b084      	sub	sp, #16
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80078f4:	2300      	movs	r3, #0
 80078f6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d056      	beq.n	80079ac <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007902:	4b2d      	ldr	r3, [pc, #180]	; (80079b8 <xTaskPriorityInherit+0xd0>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007908:	429a      	cmp	r2, r3
 800790a:	d246      	bcs.n	800799a <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	699b      	ldr	r3, [r3, #24]
 8007910:	2b00      	cmp	r3, #0
 8007912:	db06      	blt.n	8007922 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007914:	4b28      	ldr	r3, [pc, #160]	; (80079b8 <xTaskPriorityInherit+0xd0>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800791a:	2238      	movs	r2, #56	; 0x38
 800791c:	1ad2      	subs	r2, r2, r3
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	6959      	ldr	r1, [r3, #20]
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800792a:	0013      	movs	r3, r2
 800792c:	009b      	lsls	r3, r3, #2
 800792e:	189b      	adds	r3, r3, r2
 8007930:	009b      	lsls	r3, r3, #2
 8007932:	4a22      	ldr	r2, [pc, #136]	; (80079bc <xTaskPriorityInherit+0xd4>)
 8007934:	189b      	adds	r3, r3, r2
 8007936:	4299      	cmp	r1, r3
 8007938:	d101      	bne.n	800793e <xTaskPriorityInherit+0x56>
 800793a:	2301      	movs	r3, #1
 800793c:	e000      	b.n	8007940 <xTaskPriorityInherit+0x58>
 800793e:	2300      	movs	r3, #0
 8007940:	2b00      	cmp	r3, #0
 8007942:	d022      	beq.n	800798a <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	3304      	adds	r3, #4
 8007948:	0018      	movs	r0, r3
 800794a:	f7fe fc24 	bl	8006196 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800794e:	4b1a      	ldr	r3, [pc, #104]	; (80079b8 <xTaskPriorityInherit+0xd0>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800795c:	4b18      	ldr	r3, [pc, #96]	; (80079c0 <xTaskPriorityInherit+0xd8>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	429a      	cmp	r2, r3
 8007962:	d903      	bls.n	800796c <xTaskPriorityInherit+0x84>
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007968:	4b15      	ldr	r3, [pc, #84]	; (80079c0 <xTaskPriorityInherit+0xd8>)
 800796a:	601a      	str	r2, [r3, #0]
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007970:	0013      	movs	r3, r2
 8007972:	009b      	lsls	r3, r3, #2
 8007974:	189b      	adds	r3, r3, r2
 8007976:	009b      	lsls	r3, r3, #2
 8007978:	4a10      	ldr	r2, [pc, #64]	; (80079bc <xTaskPriorityInherit+0xd4>)
 800797a:	189a      	adds	r2, r3, r2
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	3304      	adds	r3, #4
 8007980:	0019      	movs	r1, r3
 8007982:	0010      	movs	r0, r2
 8007984:	f7fe fbaf 	bl	80060e6 <vListInsertEnd>
 8007988:	e004      	b.n	8007994 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800798a:	4b0b      	ldr	r3, [pc, #44]	; (80079b8 <xTaskPriorityInherit+0xd0>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007994:	2301      	movs	r3, #1
 8007996:	60fb      	str	r3, [r7, #12]
 8007998:	e008      	b.n	80079ac <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800799e:	4b06      	ldr	r3, [pc, #24]	; (80079b8 <xTaskPriorityInherit+0xd0>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079a4:	429a      	cmp	r2, r3
 80079a6:	d201      	bcs.n	80079ac <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80079a8:	2301      	movs	r3, #1
 80079aa:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80079ac:	68fb      	ldr	r3, [r7, #12]
	}
 80079ae:	0018      	movs	r0, r3
 80079b0:	46bd      	mov	sp, r7
 80079b2:	b004      	add	sp, #16
 80079b4:	bd80      	pop	{r7, pc}
 80079b6:	46c0      	nop			; (mov r8, r8)
 80079b8:	2000078c 	.word	0x2000078c
 80079bc:	20000790 	.word	0x20000790
 80079c0:	20000c68 	.word	0x20000c68

080079c4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b084      	sub	sp, #16
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80079d0:	2300      	movs	r3, #0
 80079d2:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d044      	beq.n	8007a64 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80079da:	4b25      	ldr	r3, [pc, #148]	; (8007a70 <xTaskPriorityDisinherit+0xac>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	68ba      	ldr	r2, [r7, #8]
 80079e0:	429a      	cmp	r2, r3
 80079e2:	d001      	beq.n	80079e8 <xTaskPriorityDisinherit+0x24>
 80079e4:	b672      	cpsid	i
 80079e6:	e7fe      	b.n	80079e6 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d101      	bne.n	80079f4 <xTaskPriorityDisinherit+0x30>
 80079f0:	b672      	cpsid	i
 80079f2:	e7fe      	b.n	80079f2 <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079f8:	1e5a      	subs	r2, r3, #1
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a06:	429a      	cmp	r2, r3
 8007a08:	d02c      	beq.n	8007a64 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d128      	bne.n	8007a64 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	3304      	adds	r3, #4
 8007a16:	0018      	movs	r0, r3
 8007a18:	f7fe fbbd 	bl	8006196 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a28:	2238      	movs	r2, #56	; 0x38
 8007a2a:	1ad2      	subs	r2, r2, r3
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a34:	4b0f      	ldr	r3, [pc, #60]	; (8007a74 <xTaskPriorityDisinherit+0xb0>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	429a      	cmp	r2, r3
 8007a3a:	d903      	bls.n	8007a44 <xTaskPriorityDisinherit+0x80>
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a40:	4b0c      	ldr	r3, [pc, #48]	; (8007a74 <xTaskPriorityDisinherit+0xb0>)
 8007a42:	601a      	str	r2, [r3, #0]
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a48:	0013      	movs	r3, r2
 8007a4a:	009b      	lsls	r3, r3, #2
 8007a4c:	189b      	adds	r3, r3, r2
 8007a4e:	009b      	lsls	r3, r3, #2
 8007a50:	4a09      	ldr	r2, [pc, #36]	; (8007a78 <xTaskPriorityDisinherit+0xb4>)
 8007a52:	189a      	adds	r2, r3, r2
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	3304      	adds	r3, #4
 8007a58:	0019      	movs	r1, r3
 8007a5a:	0010      	movs	r0, r2
 8007a5c:	f7fe fb43 	bl	80060e6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007a60:	2301      	movs	r3, #1
 8007a62:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007a64:	68fb      	ldr	r3, [r7, #12]
	}
 8007a66:	0018      	movs	r0, r3
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	b004      	add	sp, #16
 8007a6c:	bd80      	pop	{r7, pc}
 8007a6e:	46c0      	nop			; (mov r8, r8)
 8007a70:	2000078c 	.word	0x2000078c
 8007a74:	20000c68 	.word	0x20000c68
 8007a78:	20000790 	.word	0x20000790

08007a7c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b086      	sub	sp, #24
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
 8007a84:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d05d      	beq.n	8007b50 <vTaskPriorityDisinheritAfterTimeout+0xd4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007a94:	693b      	ldr	r3, [r7, #16]
 8007a96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d101      	bne.n	8007aa0 <vTaskPriorityDisinheritAfterTimeout+0x24>
 8007a9c:	b672      	cpsid	i
 8007a9e:	e7fe      	b.n	8007a9e <vTaskPriorityDisinheritAfterTimeout+0x22>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007aa0:	693b      	ldr	r3, [r7, #16]
 8007aa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007aa4:	683a      	ldr	r2, [r7, #0]
 8007aa6:	429a      	cmp	r2, r3
 8007aa8:	d902      	bls.n	8007ab0 <vTaskPriorityDisinheritAfterTimeout+0x34>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	617b      	str	r3, [r7, #20]
 8007aae:	e002      	b.n	8007ab6 <vTaskPriorityDisinheritAfterTimeout+0x3a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ab4:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aba:	697a      	ldr	r2, [r7, #20]
 8007abc:	429a      	cmp	r2, r3
 8007abe:	d047      	beq.n	8007b50 <vTaskPriorityDisinheritAfterTimeout+0xd4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007ac0:	693b      	ldr	r3, [r7, #16]
 8007ac2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ac4:	68fa      	ldr	r2, [r7, #12]
 8007ac6:	429a      	cmp	r2, r3
 8007ac8:	d142      	bne.n	8007b50 <vTaskPriorityDisinheritAfterTimeout+0xd4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007aca:	4b23      	ldr	r3, [pc, #140]	; (8007b58 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	693a      	ldr	r2, [r7, #16]
 8007ad0:	429a      	cmp	r2, r3
 8007ad2:	d101      	bne.n	8007ad8 <vTaskPriorityDisinheritAfterTimeout+0x5c>
 8007ad4:	b672      	cpsid	i
 8007ad6:	e7fe      	b.n	8007ad6 <vTaskPriorityDisinheritAfterTimeout+0x5a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007ad8:	693b      	ldr	r3, [r7, #16]
 8007ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007adc:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	697a      	ldr	r2, [r7, #20]
 8007ae2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007ae4:	693b      	ldr	r3, [r7, #16]
 8007ae6:	699b      	ldr	r3, [r3, #24]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	db04      	blt.n	8007af6 <vTaskPriorityDisinheritAfterTimeout+0x7a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	2238      	movs	r2, #56	; 0x38
 8007af0:	1ad2      	subs	r2, r2, r3
 8007af2:	693b      	ldr	r3, [r7, #16]
 8007af4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007af6:	693b      	ldr	r3, [r7, #16]
 8007af8:	6959      	ldr	r1, [r3, #20]
 8007afa:	68ba      	ldr	r2, [r7, #8]
 8007afc:	0013      	movs	r3, r2
 8007afe:	009b      	lsls	r3, r3, #2
 8007b00:	189b      	adds	r3, r3, r2
 8007b02:	009b      	lsls	r3, r3, #2
 8007b04:	4a15      	ldr	r2, [pc, #84]	; (8007b5c <vTaskPriorityDisinheritAfterTimeout+0xe0>)
 8007b06:	189b      	adds	r3, r3, r2
 8007b08:	4299      	cmp	r1, r3
 8007b0a:	d101      	bne.n	8007b10 <vTaskPriorityDisinheritAfterTimeout+0x94>
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	e000      	b.n	8007b12 <vTaskPriorityDisinheritAfterTimeout+0x96>
 8007b10:	2300      	movs	r3, #0
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d01c      	beq.n	8007b50 <vTaskPriorityDisinheritAfterTimeout+0xd4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007b16:	693b      	ldr	r3, [r7, #16]
 8007b18:	3304      	adds	r3, #4
 8007b1a:	0018      	movs	r0, r3
 8007b1c:	f7fe fb3b 	bl	8006196 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b24:	4b0e      	ldr	r3, [pc, #56]	; (8007b60 <vTaskPriorityDisinheritAfterTimeout+0xe4>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	d903      	bls.n	8007b34 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b30:	4b0b      	ldr	r3, [pc, #44]	; (8007b60 <vTaskPriorityDisinheritAfterTimeout+0xe4>)
 8007b32:	601a      	str	r2, [r3, #0]
 8007b34:	693b      	ldr	r3, [r7, #16]
 8007b36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b38:	0013      	movs	r3, r2
 8007b3a:	009b      	lsls	r3, r3, #2
 8007b3c:	189b      	adds	r3, r3, r2
 8007b3e:	009b      	lsls	r3, r3, #2
 8007b40:	4a06      	ldr	r2, [pc, #24]	; (8007b5c <vTaskPriorityDisinheritAfterTimeout+0xe0>)
 8007b42:	189a      	adds	r2, r3, r2
 8007b44:	693b      	ldr	r3, [r7, #16]
 8007b46:	3304      	adds	r3, #4
 8007b48:	0019      	movs	r1, r3
 8007b4a:	0010      	movs	r0, r2
 8007b4c:	f7fe facb 	bl	80060e6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007b50:	46c0      	nop			; (mov r8, r8)
 8007b52:	46bd      	mov	sp, r7
 8007b54:	b006      	add	sp, #24
 8007b56:	bd80      	pop	{r7, pc}
 8007b58:	2000078c 	.word	0x2000078c
 8007b5c:	20000790 	.word	0x20000790
 8007b60:	20000c68 	.word	0x20000c68

08007b64 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007b68:	4b06      	ldr	r3, [pc, #24]	; (8007b84 <pvTaskIncrementMutexHeldCount+0x20>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d004      	beq.n	8007b7a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007b70:	4b04      	ldr	r3, [pc, #16]	; (8007b84 <pvTaskIncrementMutexHeldCount+0x20>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007b76:	3201      	adds	r2, #1
 8007b78:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8007b7a:	4b02      	ldr	r3, [pc, #8]	; (8007b84 <pvTaskIncrementMutexHeldCount+0x20>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
	}
 8007b7e:	0018      	movs	r0, r3
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}
 8007b84:	2000078c 	.word	0x2000078c

08007b88 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b084      	sub	sp, #16
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
 8007b90:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007b92:	4b21      	ldr	r3, [pc, #132]	; (8007c18 <prvAddCurrentTaskToDelayedList+0x90>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007b98:	4b20      	ldr	r3, [pc, #128]	; (8007c1c <prvAddCurrentTaskToDelayedList+0x94>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	3304      	adds	r3, #4
 8007b9e:	0018      	movs	r0, r3
 8007ba0:	f7fe faf9 	bl	8006196 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	3301      	adds	r3, #1
 8007ba8:	d10b      	bne.n	8007bc2 <prvAddCurrentTaskToDelayedList+0x3a>
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d008      	beq.n	8007bc2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007bb0:	4b1a      	ldr	r3, [pc, #104]	; (8007c1c <prvAddCurrentTaskToDelayedList+0x94>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	1d1a      	adds	r2, r3, #4
 8007bb6:	4b1a      	ldr	r3, [pc, #104]	; (8007c20 <prvAddCurrentTaskToDelayedList+0x98>)
 8007bb8:	0011      	movs	r1, r2
 8007bba:	0018      	movs	r0, r3
 8007bbc:	f7fe fa93 	bl	80060e6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007bc0:	e026      	b.n	8007c10 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007bc2:	68fa      	ldr	r2, [r7, #12]
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	18d3      	adds	r3, r2, r3
 8007bc8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007bca:	4b14      	ldr	r3, [pc, #80]	; (8007c1c <prvAddCurrentTaskToDelayedList+0x94>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	68ba      	ldr	r2, [r7, #8]
 8007bd0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007bd2:	68ba      	ldr	r2, [r7, #8]
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	429a      	cmp	r2, r3
 8007bd8:	d209      	bcs.n	8007bee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007bda:	4b12      	ldr	r3, [pc, #72]	; (8007c24 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007bdc:	681a      	ldr	r2, [r3, #0]
 8007bde:	4b0f      	ldr	r3, [pc, #60]	; (8007c1c <prvAddCurrentTaskToDelayedList+0x94>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	3304      	adds	r3, #4
 8007be4:	0019      	movs	r1, r3
 8007be6:	0010      	movs	r0, r2
 8007be8:	f7fe fa9f 	bl	800612a <vListInsert>
}
 8007bec:	e010      	b.n	8007c10 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007bee:	4b0e      	ldr	r3, [pc, #56]	; (8007c28 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007bf0:	681a      	ldr	r2, [r3, #0]
 8007bf2:	4b0a      	ldr	r3, [pc, #40]	; (8007c1c <prvAddCurrentTaskToDelayedList+0x94>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	3304      	adds	r3, #4
 8007bf8:	0019      	movs	r1, r3
 8007bfa:	0010      	movs	r0, r2
 8007bfc:	f7fe fa95 	bl	800612a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007c00:	4b0a      	ldr	r3, [pc, #40]	; (8007c2c <prvAddCurrentTaskToDelayedList+0xa4>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	68ba      	ldr	r2, [r7, #8]
 8007c06:	429a      	cmp	r2, r3
 8007c08:	d202      	bcs.n	8007c10 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007c0a:	4b08      	ldr	r3, [pc, #32]	; (8007c2c <prvAddCurrentTaskToDelayedList+0xa4>)
 8007c0c:	68ba      	ldr	r2, [r7, #8]
 8007c0e:	601a      	str	r2, [r3, #0]
}
 8007c10:	46c0      	nop			; (mov r8, r8)
 8007c12:	46bd      	mov	sp, r7
 8007c14:	b004      	add	sp, #16
 8007c16:	bd80      	pop	{r7, pc}
 8007c18:	20000c64 	.word	0x20000c64
 8007c1c:	2000078c 	.word	0x2000078c
 8007c20:	20000c4c 	.word	0x20000c4c
 8007c24:	20000c1c 	.word	0x20000c1c
 8007c28:	20000c18 	.word	0x20000c18
 8007c2c:	20000c80 	.word	0x20000c80

08007c30 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007c30:	b590      	push	{r4, r7, lr}
 8007c32:	b089      	sub	sp, #36	; 0x24
 8007c34:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007c36:	2300      	movs	r3, #0
 8007c38:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007c3a:	f000 fa87 	bl	800814c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007c3e:	4b17      	ldr	r3, [pc, #92]	; (8007c9c <xTimerCreateTimerTask+0x6c>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d020      	beq.n	8007c88 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007c46:	2300      	movs	r3, #0
 8007c48:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007c4e:	003a      	movs	r2, r7
 8007c50:	1d39      	adds	r1, r7, #4
 8007c52:	2308      	movs	r3, #8
 8007c54:	18fb      	adds	r3, r7, r3
 8007c56:	0018      	movs	r0, r3
 8007c58:	f7fe fa04 	bl	8006064 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007c5c:	683c      	ldr	r4, [r7, #0]
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	68ba      	ldr	r2, [r7, #8]
 8007c62:	490f      	ldr	r1, [pc, #60]	; (8007ca0 <xTimerCreateTimerTask+0x70>)
 8007c64:	480f      	ldr	r0, [pc, #60]	; (8007ca4 <xTimerCreateTimerTask+0x74>)
 8007c66:	9202      	str	r2, [sp, #8]
 8007c68:	9301      	str	r3, [sp, #4]
 8007c6a:	2302      	movs	r3, #2
 8007c6c:	9300      	str	r3, [sp, #0]
 8007c6e:	2300      	movs	r3, #0
 8007c70:	0022      	movs	r2, r4
 8007c72:	f7ff f8a2 	bl	8006dba <xTaskCreateStatic>
 8007c76:	0002      	movs	r2, r0
 8007c78:	4b0b      	ldr	r3, [pc, #44]	; (8007ca8 <xTimerCreateTimerTask+0x78>)
 8007c7a:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007c7c:	4b0a      	ldr	r3, [pc, #40]	; (8007ca8 <xTimerCreateTimerTask+0x78>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d001      	beq.n	8007c88 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 8007c84:	2301      	movs	r3, #1
 8007c86:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d101      	bne.n	8007c92 <xTimerCreateTimerTask+0x62>
 8007c8e:	b672      	cpsid	i
 8007c90:	e7fe      	b.n	8007c90 <xTimerCreateTimerTask+0x60>
	return xReturn;
 8007c92:	68fb      	ldr	r3, [r7, #12]
}
 8007c94:	0018      	movs	r0, r3
 8007c96:	46bd      	mov	sp, r7
 8007c98:	b005      	add	sp, #20
 8007c9a:	bd90      	pop	{r4, r7, pc}
 8007c9c:	20000cbc 	.word	0x20000cbc
 8007ca0:	0800968c 	.word	0x0800968c
 8007ca4:	08007db1 	.word	0x08007db1
 8007ca8:	20000cc0 	.word	0x20000cc0

08007cac <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007cac:	b590      	push	{r4, r7, lr}
 8007cae:	b08b      	sub	sp, #44	; 0x2c
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	60f8      	str	r0, [r7, #12]
 8007cb4:	60b9      	str	r1, [r7, #8]
 8007cb6:	607a      	str	r2, [r7, #4]
 8007cb8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d101      	bne.n	8007cc8 <xTimerGenericCommand+0x1c>
 8007cc4:	b672      	cpsid	i
 8007cc6:	e7fe      	b.n	8007cc6 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007cc8:	4b1c      	ldr	r3, [pc, #112]	; (8007d3c <xTimerGenericCommand+0x90>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d030      	beq.n	8007d32 <xTimerGenericCommand+0x86>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007cd0:	2414      	movs	r4, #20
 8007cd2:	193b      	adds	r3, r7, r4
 8007cd4:	68ba      	ldr	r2, [r7, #8]
 8007cd6:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007cd8:	193b      	adds	r3, r7, r4
 8007cda:	687a      	ldr	r2, [r7, #4]
 8007cdc:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8007cde:	193b      	adds	r3, r7, r4
 8007ce0:	68fa      	ldr	r2, [r7, #12]
 8007ce2:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	2b05      	cmp	r3, #5
 8007ce8:	dc19      	bgt.n	8007d1e <xTimerGenericCommand+0x72>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007cea:	f7ff fde1 	bl	80078b0 <xTaskGetSchedulerState>
 8007cee:	0003      	movs	r3, r0
 8007cf0:	2b02      	cmp	r3, #2
 8007cf2:	d109      	bne.n	8007d08 <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007cf4:	4b11      	ldr	r3, [pc, #68]	; (8007d3c <xTimerGenericCommand+0x90>)
 8007cf6:	6818      	ldr	r0, [r3, #0]
 8007cf8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007cfa:	1939      	adds	r1, r7, r4
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	f7fe fba4 	bl	800644a <xQueueGenericSend>
 8007d02:	0003      	movs	r3, r0
 8007d04:	627b      	str	r3, [r7, #36]	; 0x24
 8007d06:	e014      	b.n	8007d32 <xTimerGenericCommand+0x86>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007d08:	4b0c      	ldr	r3, [pc, #48]	; (8007d3c <xTimerGenericCommand+0x90>)
 8007d0a:	6818      	ldr	r0, [r3, #0]
 8007d0c:	2314      	movs	r3, #20
 8007d0e:	18f9      	adds	r1, r7, r3
 8007d10:	2300      	movs	r3, #0
 8007d12:	2200      	movs	r2, #0
 8007d14:	f7fe fb99 	bl	800644a <xQueueGenericSend>
 8007d18:	0003      	movs	r3, r0
 8007d1a:	627b      	str	r3, [r7, #36]	; 0x24
 8007d1c:	e009      	b.n	8007d32 <xTimerGenericCommand+0x86>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007d1e:	4b07      	ldr	r3, [pc, #28]	; (8007d3c <xTimerGenericCommand+0x90>)
 8007d20:	6818      	ldr	r0, [r3, #0]
 8007d22:	683a      	ldr	r2, [r7, #0]
 8007d24:	2314      	movs	r3, #20
 8007d26:	18f9      	adds	r1, r7, r3
 8007d28:	2300      	movs	r3, #0
 8007d2a:	f7fe fc52 	bl	80065d2 <xQueueGenericSendFromISR>
 8007d2e:	0003      	movs	r3, r0
 8007d30:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007d34:	0018      	movs	r0, r3
 8007d36:	46bd      	mov	sp, r7
 8007d38:	b00b      	add	sp, #44	; 0x2c
 8007d3a:	bd90      	pop	{r4, r7, pc}
 8007d3c:	20000cbc 	.word	0x20000cbc

08007d40 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b086      	sub	sp, #24
 8007d44:	af02      	add	r7, sp, #8
 8007d46:	6078      	str	r0, [r7, #4]
 8007d48:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007d4a:	4b18      	ldr	r3, [pc, #96]	; (8007dac <prvProcessExpiredTimer+0x6c>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	68db      	ldr	r3, [r3, #12]
 8007d50:	68db      	ldr	r3, [r3, #12]
 8007d52:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	3304      	adds	r3, #4
 8007d58:	0018      	movs	r0, r3
 8007d5a:	f7fe fa1c 	bl	8006196 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	69db      	ldr	r3, [r3, #28]
 8007d62:	2b01      	cmp	r3, #1
 8007d64:	d119      	bne.n	8007d9a <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	699a      	ldr	r2, [r3, #24]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	18d1      	adds	r1, r2, r3
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	683a      	ldr	r2, [r7, #0]
 8007d72:	68f8      	ldr	r0, [r7, #12]
 8007d74:	f000 f8b6 	bl	8007ee4 <prvInsertTimerInActiveList>
 8007d78:	1e03      	subs	r3, r0, #0
 8007d7a:	d00e      	beq.n	8007d9a <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007d7c:	687a      	ldr	r2, [r7, #4]
 8007d7e:	68f8      	ldr	r0, [r7, #12]
 8007d80:	2300      	movs	r3, #0
 8007d82:	9300      	str	r3, [sp, #0]
 8007d84:	2300      	movs	r3, #0
 8007d86:	2100      	movs	r1, #0
 8007d88:	f7ff ff90 	bl	8007cac <xTimerGenericCommand>
 8007d8c:	0003      	movs	r3, r0
 8007d8e:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d101      	bne.n	8007d9a <prvProcessExpiredTimer+0x5a>
 8007d96:	b672      	cpsid	i
 8007d98:	e7fe      	b.n	8007d98 <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d9e:	68fa      	ldr	r2, [r7, #12]
 8007da0:	0010      	movs	r0, r2
 8007da2:	4798      	blx	r3
}
 8007da4:	46c0      	nop			; (mov r8, r8)
 8007da6:	46bd      	mov	sp, r7
 8007da8:	b004      	add	sp, #16
 8007daa:	bd80      	pop	{r7, pc}
 8007dac:	20000cb4 	.word	0x20000cb4

08007db0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b084      	sub	sp, #16
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007db8:	2308      	movs	r3, #8
 8007dba:	18fb      	adds	r3, r7, r3
 8007dbc:	0018      	movs	r0, r3
 8007dbe:	f000 f851 	bl	8007e64 <prvGetNextExpireTime>
 8007dc2:	0003      	movs	r3, r0
 8007dc4:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007dc6:	68ba      	ldr	r2, [r7, #8]
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	0011      	movs	r1, r2
 8007dcc:	0018      	movs	r0, r3
 8007dce:	f000 f803 	bl	8007dd8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007dd2:	f000 f8c9 	bl	8007f68 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007dd6:	e7ef      	b.n	8007db8 <prvTimerTask+0x8>

08007dd8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b084      	sub	sp, #16
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
 8007de0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007de2:	f7ff f9dd 	bl	80071a0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007de6:	2308      	movs	r3, #8
 8007de8:	18fb      	adds	r3, r7, r3
 8007dea:	0018      	movs	r0, r3
 8007dec:	f000 f85a 	bl	8007ea4 <prvSampleTimeNow>
 8007df0:	0003      	movs	r3, r0
 8007df2:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d129      	bne.n	8007e4e <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d10c      	bne.n	8007e1a <prvProcessTimerOrBlockTask+0x42>
 8007e00:	687a      	ldr	r2, [r7, #4]
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	429a      	cmp	r2, r3
 8007e06:	d808      	bhi.n	8007e1a <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 8007e08:	f7ff f9d6 	bl	80071b8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007e0c:	68fa      	ldr	r2, [r7, #12]
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	0011      	movs	r1, r2
 8007e12:	0018      	movs	r0, r3
 8007e14:	f7ff ff94 	bl	8007d40 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007e18:	e01b      	b.n	8007e52 <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d006      	beq.n	8007e2e <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007e20:	4b0e      	ldr	r3, [pc, #56]	; (8007e5c <prvProcessTimerOrBlockTask+0x84>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	425a      	negs	r2, r3
 8007e28:	4153      	adcs	r3, r2
 8007e2a:	b2db      	uxtb	r3, r3
 8007e2c:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007e2e:	4b0c      	ldr	r3, [pc, #48]	; (8007e60 <prvProcessTimerOrBlockTask+0x88>)
 8007e30:	6818      	ldr	r0, [r3, #0]
 8007e32:	687a      	ldr	r2, [r7, #4]
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	1ad3      	subs	r3, r2, r3
 8007e38:	683a      	ldr	r2, [r7, #0]
 8007e3a:	0019      	movs	r1, r3
 8007e3c:	f7fe ff8a 	bl	8006d54 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007e40:	f7ff f9ba 	bl	80071b8 <xTaskResumeAll>
 8007e44:	1e03      	subs	r3, r0, #0
 8007e46:	d104      	bne.n	8007e52 <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 8007e48:	f000 fa4a 	bl	80082e0 <vPortYield>
}
 8007e4c:	e001      	b.n	8007e52 <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 8007e4e:	f7ff f9b3 	bl	80071b8 <xTaskResumeAll>
}
 8007e52:	46c0      	nop			; (mov r8, r8)
 8007e54:	46bd      	mov	sp, r7
 8007e56:	b004      	add	sp, #16
 8007e58:	bd80      	pop	{r7, pc}
 8007e5a:	46c0      	nop			; (mov r8, r8)
 8007e5c:	20000cb8 	.word	0x20000cb8
 8007e60:	20000cbc 	.word	0x20000cbc

08007e64 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b084      	sub	sp, #16
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007e6c:	4b0c      	ldr	r3, [pc, #48]	; (8007ea0 <prvGetNextExpireTime+0x3c>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	425a      	negs	r2, r3
 8007e74:	4153      	adcs	r3, r2
 8007e76:	b2db      	uxtb	r3, r3
 8007e78:	001a      	movs	r2, r3
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d105      	bne.n	8007e92 <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007e86:	4b06      	ldr	r3, [pc, #24]	; (8007ea0 <prvGetNextExpireTime+0x3c>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	68db      	ldr	r3, [r3, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	60fb      	str	r3, [r7, #12]
 8007e90:	e001      	b.n	8007e96 <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007e92:	2300      	movs	r3, #0
 8007e94:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007e96:	68fb      	ldr	r3, [r7, #12]
}
 8007e98:	0018      	movs	r0, r3
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	b004      	add	sp, #16
 8007e9e:	bd80      	pop	{r7, pc}
 8007ea0:	20000cb4 	.word	0x20000cb4

08007ea4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b084      	sub	sp, #16
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007eac:	f7ff fa10 	bl	80072d0 <xTaskGetTickCount>
 8007eb0:	0003      	movs	r3, r0
 8007eb2:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 8007eb4:	4b0a      	ldr	r3, [pc, #40]	; (8007ee0 <prvSampleTimeNow+0x3c>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	68fa      	ldr	r2, [r7, #12]
 8007eba:	429a      	cmp	r2, r3
 8007ebc:	d205      	bcs.n	8007eca <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 8007ebe:	f000 f8eb 	bl	8008098 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2201      	movs	r2, #1
 8007ec6:	601a      	str	r2, [r3, #0]
 8007ec8:	e002      	b.n	8007ed0 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007ed0:	4b03      	ldr	r3, [pc, #12]	; (8007ee0 <prvSampleTimeNow+0x3c>)
 8007ed2:	68fa      	ldr	r2, [r7, #12]
 8007ed4:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
}
 8007ed8:	0018      	movs	r0, r3
 8007eda:	46bd      	mov	sp, r7
 8007edc:	b004      	add	sp, #16
 8007ede:	bd80      	pop	{r7, pc}
 8007ee0:	20000cc4 	.word	0x20000cc4

08007ee4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b086      	sub	sp, #24
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	60f8      	str	r0, [r7, #12]
 8007eec:	60b9      	str	r1, [r7, #8]
 8007eee:	607a      	str	r2, [r7, #4]
 8007ef0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	68ba      	ldr	r2, [r7, #8]
 8007efa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	68fa      	ldr	r2, [r7, #12]
 8007f00:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007f02:	68ba      	ldr	r2, [r7, #8]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	429a      	cmp	r2, r3
 8007f08:	d812      	bhi.n	8007f30 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f0a:	687a      	ldr	r2, [r7, #4]
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	1ad2      	subs	r2, r2, r3
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	699b      	ldr	r3, [r3, #24]
 8007f14:	429a      	cmp	r2, r3
 8007f16:	d302      	bcc.n	8007f1e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007f18:	2301      	movs	r3, #1
 8007f1a:	617b      	str	r3, [r7, #20]
 8007f1c:	e01b      	b.n	8007f56 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007f1e:	4b10      	ldr	r3, [pc, #64]	; (8007f60 <prvInsertTimerInActiveList+0x7c>)
 8007f20:	681a      	ldr	r2, [r3, #0]
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	3304      	adds	r3, #4
 8007f26:	0019      	movs	r1, r3
 8007f28:	0010      	movs	r0, r2
 8007f2a:	f7fe f8fe 	bl	800612a <vListInsert>
 8007f2e:	e012      	b.n	8007f56 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007f30:	687a      	ldr	r2, [r7, #4]
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	429a      	cmp	r2, r3
 8007f36:	d206      	bcs.n	8007f46 <prvInsertTimerInActiveList+0x62>
 8007f38:	68ba      	ldr	r2, [r7, #8]
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	429a      	cmp	r2, r3
 8007f3e:	d302      	bcc.n	8007f46 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007f40:	2301      	movs	r3, #1
 8007f42:	617b      	str	r3, [r7, #20]
 8007f44:	e007      	b.n	8007f56 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007f46:	4b07      	ldr	r3, [pc, #28]	; (8007f64 <prvInsertTimerInActiveList+0x80>)
 8007f48:	681a      	ldr	r2, [r3, #0]
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	3304      	adds	r3, #4
 8007f4e:	0019      	movs	r1, r3
 8007f50:	0010      	movs	r0, r2
 8007f52:	f7fe f8ea 	bl	800612a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007f56:	697b      	ldr	r3, [r7, #20]
}
 8007f58:	0018      	movs	r0, r3
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	b006      	add	sp, #24
 8007f5e:	bd80      	pop	{r7, pc}
 8007f60:	20000cb8 	.word	0x20000cb8
 8007f64:	20000cb4 	.word	0x20000cb4

08007f68 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007f68:	b590      	push	{r4, r7, lr}
 8007f6a:	b08d      	sub	sp, #52	; 0x34
 8007f6c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007f6e:	e07f      	b.n	8008070 <prvProcessReceivedCommands+0x108>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007f70:	2208      	movs	r2, #8
 8007f72:	18bb      	adds	r3, r7, r2
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	da0f      	bge.n	8007f9a <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007f7a:	18bb      	adds	r3, r7, r2
 8007f7c:	3304      	adds	r3, #4
 8007f7e:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d101      	bne.n	8007f8a <prvProcessReceivedCommands+0x22>
 8007f86:	b672      	cpsid	i
 8007f88:	e7fe      	b.n	8007f88 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f8c:	681a      	ldr	r2, [r3, #0]
 8007f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f90:	6858      	ldr	r0, [r3, #4]
 8007f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f94:	689b      	ldr	r3, [r3, #8]
 8007f96:	0019      	movs	r1, r3
 8007f98:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007f9a:	2208      	movs	r2, #8
 8007f9c:	18bb      	adds	r3, r7, r2
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	db64      	blt.n	800806e <prvProcessReceivedCommands+0x106>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007fa4:	18bb      	adds	r3, r7, r2
 8007fa6:	689b      	ldr	r3, [r3, #8]
 8007fa8:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007faa:	6a3b      	ldr	r3, [r7, #32]
 8007fac:	695b      	ldr	r3, [r3, #20]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d004      	beq.n	8007fbc <prvProcessReceivedCommands+0x54>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007fb2:	6a3b      	ldr	r3, [r7, #32]
 8007fb4:	3304      	adds	r3, #4
 8007fb6:	0018      	movs	r0, r3
 8007fb8:	f7fe f8ed 	bl	8006196 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007fbc:	1d3b      	adds	r3, r7, #4
 8007fbe:	0018      	movs	r0, r3
 8007fc0:	f7ff ff70 	bl	8007ea4 <prvSampleTimeNow>
 8007fc4:	0003      	movs	r3, r0
 8007fc6:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 8007fc8:	2308      	movs	r3, #8
 8007fca:	18fb      	adds	r3, r7, r3
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	2b09      	cmp	r3, #9
 8007fd0:	d84e      	bhi.n	8008070 <prvProcessReceivedCommands+0x108>
 8007fd2:	009a      	lsls	r2, r3, #2
 8007fd4:	4b2e      	ldr	r3, [pc, #184]	; (8008090 <prvProcessReceivedCommands+0x128>)
 8007fd6:	18d3      	adds	r3, r2, r3
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007fdc:	2408      	movs	r4, #8
 8007fde:	193b      	adds	r3, r7, r4
 8007fe0:	685a      	ldr	r2, [r3, #4]
 8007fe2:	6a3b      	ldr	r3, [r7, #32]
 8007fe4:	699b      	ldr	r3, [r3, #24]
 8007fe6:	18d1      	adds	r1, r2, r3
 8007fe8:	193b      	adds	r3, r7, r4
 8007fea:	685b      	ldr	r3, [r3, #4]
 8007fec:	69fa      	ldr	r2, [r7, #28]
 8007fee:	6a38      	ldr	r0, [r7, #32]
 8007ff0:	f7ff ff78 	bl	8007ee4 <prvInsertTimerInActiveList>
 8007ff4:	1e03      	subs	r3, r0, #0
 8007ff6:	d03b      	beq.n	8008070 <prvProcessReceivedCommands+0x108>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007ff8:	6a3b      	ldr	r3, [r7, #32]
 8007ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ffc:	6a3a      	ldr	r2, [r7, #32]
 8007ffe:	0010      	movs	r0, r2
 8008000:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008002:	6a3b      	ldr	r3, [r7, #32]
 8008004:	69db      	ldr	r3, [r3, #28]
 8008006:	2b01      	cmp	r3, #1
 8008008:	d132      	bne.n	8008070 <prvProcessReceivedCommands+0x108>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800800a:	193b      	adds	r3, r7, r4
 800800c:	685a      	ldr	r2, [r3, #4]
 800800e:	6a3b      	ldr	r3, [r7, #32]
 8008010:	699b      	ldr	r3, [r3, #24]
 8008012:	18d2      	adds	r2, r2, r3
 8008014:	6a38      	ldr	r0, [r7, #32]
 8008016:	2300      	movs	r3, #0
 8008018:	9300      	str	r3, [sp, #0]
 800801a:	2300      	movs	r3, #0
 800801c:	2100      	movs	r1, #0
 800801e:	f7ff fe45 	bl	8007cac <xTimerGenericCommand>
 8008022:	0003      	movs	r3, r0
 8008024:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 8008026:	69bb      	ldr	r3, [r7, #24]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d121      	bne.n	8008070 <prvProcessReceivedCommands+0x108>
 800802c:	b672      	cpsid	i
 800802e:	e7fe      	b.n	800802e <prvProcessReceivedCommands+0xc6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008030:	2308      	movs	r3, #8
 8008032:	18fb      	adds	r3, r7, r3
 8008034:	685a      	ldr	r2, [r3, #4]
 8008036:	6a3b      	ldr	r3, [r7, #32]
 8008038:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800803a:	6a3b      	ldr	r3, [r7, #32]
 800803c:	699b      	ldr	r3, [r3, #24]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d101      	bne.n	8008046 <prvProcessReceivedCommands+0xde>
 8008042:	b672      	cpsid	i
 8008044:	e7fe      	b.n	8008044 <prvProcessReceivedCommands+0xdc>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008046:	6a3b      	ldr	r3, [r7, #32]
 8008048:	699a      	ldr	r2, [r3, #24]
 800804a:	69fb      	ldr	r3, [r7, #28]
 800804c:	18d1      	adds	r1, r2, r3
 800804e:	69fb      	ldr	r3, [r7, #28]
 8008050:	69fa      	ldr	r2, [r7, #28]
 8008052:	6a38      	ldr	r0, [r7, #32]
 8008054:	f7ff ff46 	bl	8007ee4 <prvInsertTimerInActiveList>
					break;
 8008058:	e00a      	b.n	8008070 <prvProcessReceivedCommands+0x108>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800805a:	6a3b      	ldr	r3, [r7, #32]
 800805c:	222c      	movs	r2, #44	; 0x2c
 800805e:	5c9b      	ldrb	r3, [r3, r2]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d105      	bne.n	8008070 <prvProcessReceivedCommands+0x108>
						{
							vPortFree( pxTimer );
 8008064:	6a3b      	ldr	r3, [r7, #32]
 8008066:	0018      	movs	r0, r3
 8008068:	f000 fa88 	bl	800857c <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800806c:	e000      	b.n	8008070 <prvProcessReceivedCommands+0x108>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800806e:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008070:	4b08      	ldr	r3, [pc, #32]	; (8008094 <prvProcessReceivedCommands+0x12c>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	2208      	movs	r2, #8
 8008076:	18b9      	adds	r1, r7, r2
 8008078:	2200      	movs	r2, #0
 800807a:	0018      	movs	r0, r3
 800807c:	f7fe fb7f 	bl	800677e <xQueueReceive>
 8008080:	1e03      	subs	r3, r0, #0
 8008082:	d000      	beq.n	8008086 <prvProcessReceivedCommands+0x11e>
 8008084:	e774      	b.n	8007f70 <prvProcessReceivedCommands+0x8>
	}
}
 8008086:	46c0      	nop			; (mov r8, r8)
 8008088:	46c0      	nop			; (mov r8, r8)
 800808a:	46bd      	mov	sp, r7
 800808c:	b00b      	add	sp, #44	; 0x2c
 800808e:	bd90      	pop	{r4, r7, pc}
 8008090:	080097a0 	.word	0x080097a0
 8008094:	20000cbc 	.word	0x20000cbc

08008098 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b088      	sub	sp, #32
 800809c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800809e:	e03e      	b.n	800811e <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80080a0:	4b28      	ldr	r3, [pc, #160]	; (8008144 <prvSwitchTimerLists+0xac>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	68db      	ldr	r3, [r3, #12]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80080aa:	4b26      	ldr	r3, [pc, #152]	; (8008144 <prvSwitchTimerLists+0xac>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	68db      	ldr	r3, [r3, #12]
 80080b0:	68db      	ldr	r3, [r3, #12]
 80080b2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	3304      	adds	r3, #4
 80080b8:	0018      	movs	r0, r3
 80080ba:	f7fe f86c 	bl	8006196 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c2:	68fa      	ldr	r2, [r7, #12]
 80080c4:	0010      	movs	r0, r2
 80080c6:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	69db      	ldr	r3, [r3, #28]
 80080cc:	2b01      	cmp	r3, #1
 80080ce:	d126      	bne.n	800811e <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	699b      	ldr	r3, [r3, #24]
 80080d4:	693a      	ldr	r2, [r7, #16]
 80080d6:	18d3      	adds	r3, r2, r3
 80080d8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80080da:	68ba      	ldr	r2, [r7, #8]
 80080dc:	693b      	ldr	r3, [r7, #16]
 80080de:	429a      	cmp	r2, r3
 80080e0:	d90e      	bls.n	8008100 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	68ba      	ldr	r2, [r7, #8]
 80080e6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	68fa      	ldr	r2, [r7, #12]
 80080ec:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80080ee:	4b15      	ldr	r3, [pc, #84]	; (8008144 <prvSwitchTimerLists+0xac>)
 80080f0:	681a      	ldr	r2, [r3, #0]
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	3304      	adds	r3, #4
 80080f6:	0019      	movs	r1, r3
 80080f8:	0010      	movs	r0, r2
 80080fa:	f7fe f816 	bl	800612a <vListInsert>
 80080fe:	e00e      	b.n	800811e <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008100:	693a      	ldr	r2, [r7, #16]
 8008102:	68f8      	ldr	r0, [r7, #12]
 8008104:	2300      	movs	r3, #0
 8008106:	9300      	str	r3, [sp, #0]
 8008108:	2300      	movs	r3, #0
 800810a:	2100      	movs	r1, #0
 800810c:	f7ff fdce 	bl	8007cac <xTimerGenericCommand>
 8008110:	0003      	movs	r3, r0
 8008112:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d101      	bne.n	800811e <prvSwitchTimerLists+0x86>
 800811a:	b672      	cpsid	i
 800811c:	e7fe      	b.n	800811c <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800811e:	4b09      	ldr	r3, [pc, #36]	; (8008144 <prvSwitchTimerLists+0xac>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d1bb      	bne.n	80080a0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008128:	4b06      	ldr	r3, [pc, #24]	; (8008144 <prvSwitchTimerLists+0xac>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800812e:	4b06      	ldr	r3, [pc, #24]	; (8008148 <prvSwitchTimerLists+0xb0>)
 8008130:	681a      	ldr	r2, [r3, #0]
 8008132:	4b04      	ldr	r3, [pc, #16]	; (8008144 <prvSwitchTimerLists+0xac>)
 8008134:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 8008136:	4b04      	ldr	r3, [pc, #16]	; (8008148 <prvSwitchTimerLists+0xb0>)
 8008138:	697a      	ldr	r2, [r7, #20]
 800813a:	601a      	str	r2, [r3, #0]
}
 800813c:	46c0      	nop			; (mov r8, r8)
 800813e:	46bd      	mov	sp, r7
 8008140:	b006      	add	sp, #24
 8008142:	bd80      	pop	{r7, pc}
 8008144:	20000cb4 	.word	0x20000cb4
 8008148:	20000cb8 	.word	0x20000cb8

0800814c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b082      	sub	sp, #8
 8008150:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008152:	f000 f8d5 	bl	8008300 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008156:	4b16      	ldr	r3, [pc, #88]	; (80081b0 <prvCheckForValidListAndQueue+0x64>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d123      	bne.n	80081a6 <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 800815e:	4b15      	ldr	r3, [pc, #84]	; (80081b4 <prvCheckForValidListAndQueue+0x68>)
 8008160:	0018      	movs	r0, r3
 8008162:	f7fd ff97 	bl	8006094 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008166:	4b14      	ldr	r3, [pc, #80]	; (80081b8 <prvCheckForValidListAndQueue+0x6c>)
 8008168:	0018      	movs	r0, r3
 800816a:	f7fd ff93 	bl	8006094 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800816e:	4b13      	ldr	r3, [pc, #76]	; (80081bc <prvCheckForValidListAndQueue+0x70>)
 8008170:	4a10      	ldr	r2, [pc, #64]	; (80081b4 <prvCheckForValidListAndQueue+0x68>)
 8008172:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008174:	4b12      	ldr	r3, [pc, #72]	; (80081c0 <prvCheckForValidListAndQueue+0x74>)
 8008176:	4a10      	ldr	r2, [pc, #64]	; (80081b8 <prvCheckForValidListAndQueue+0x6c>)
 8008178:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800817a:	4b12      	ldr	r3, [pc, #72]	; (80081c4 <prvCheckForValidListAndQueue+0x78>)
 800817c:	4a12      	ldr	r2, [pc, #72]	; (80081c8 <prvCheckForValidListAndQueue+0x7c>)
 800817e:	2100      	movs	r1, #0
 8008180:	9100      	str	r1, [sp, #0]
 8008182:	2110      	movs	r1, #16
 8008184:	200a      	movs	r0, #10
 8008186:	f7fe f882 	bl	800628e <xQueueGenericCreateStatic>
 800818a:	0002      	movs	r2, r0
 800818c:	4b08      	ldr	r3, [pc, #32]	; (80081b0 <prvCheckForValidListAndQueue+0x64>)
 800818e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008190:	4b07      	ldr	r3, [pc, #28]	; (80081b0 <prvCheckForValidListAndQueue+0x64>)
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d006      	beq.n	80081a6 <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008198:	4b05      	ldr	r3, [pc, #20]	; (80081b0 <prvCheckForValidListAndQueue+0x64>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4a0b      	ldr	r2, [pc, #44]	; (80081cc <prvCheckForValidListAndQueue+0x80>)
 800819e:	0011      	movs	r1, r2
 80081a0:	0018      	movs	r0, r3
 80081a2:	f7fe fdaf 	bl	8006d04 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80081a6:	f000 f8bd 	bl	8008324 <vPortExitCritical>
}
 80081aa:	46c0      	nop			; (mov r8, r8)
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd80      	pop	{r7, pc}
 80081b0:	20000cbc 	.word	0x20000cbc
 80081b4:	20000c8c 	.word	0x20000c8c
 80081b8:	20000ca0 	.word	0x20000ca0
 80081bc:	20000cb4 	.word	0x20000cb4
 80081c0:	20000cb8 	.word	0x20000cb8
 80081c4:	20000d68 	.word	0x20000d68
 80081c8:	20000cc8 	.word	0x20000cc8
 80081cc:	08009694 	.word	0x08009694

080081d0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b084      	sub	sp, #16
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	60f8      	str	r0, [r7, #12]
 80081d8:	60b9      	str	r1, [r7, #8]
 80081da:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	3b04      	subs	r3, #4
 80081e0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	2280      	movs	r2, #128	; 0x80
 80081e6:	0452      	lsls	r2, r2, #17
 80081e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	3b04      	subs	r3, #4
 80081ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 80081f0:	68ba      	ldr	r2, [r7, #8]
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	3b04      	subs	r3, #4
 80081fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80081fc:	4a08      	ldr	r2, [pc, #32]	; (8008220 <pxPortInitialiseStack+0x50>)
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	3b14      	subs	r3, #20
 8008206:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008208:	687a      	ldr	r2, [r7, #4]
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	3b20      	subs	r3, #32
 8008212:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008214:	68fb      	ldr	r3, [r7, #12]
}
 8008216:	0018      	movs	r0, r3
 8008218:	46bd      	mov	sp, r7
 800821a:	b004      	add	sp, #16
 800821c:	bd80      	pop	{r7, pc}
 800821e:	46c0      	nop			; (mov r8, r8)
 8008220:	08008225 	.word	0x08008225

08008224 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b082      	sub	sp, #8
 8008228:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800822a:	2300      	movs	r3, #0
 800822c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800822e:	4b08      	ldr	r3, [pc, #32]	; (8008250 <prvTaskExitError+0x2c>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	3301      	adds	r3, #1
 8008234:	d001      	beq.n	800823a <prvTaskExitError+0x16>
 8008236:	b672      	cpsid	i
 8008238:	e7fe      	b.n	8008238 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 800823a:	b672      	cpsid	i
	while( ulDummy == 0 )
 800823c:	46c0      	nop			; (mov r8, r8)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d0fc      	beq.n	800823e <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008244:	46c0      	nop			; (mov r8, r8)
 8008246:	46c0      	nop			; (mov r8, r8)
 8008248:	46bd      	mov	sp, r7
 800824a:	b002      	add	sp, #8
 800824c:	bd80      	pop	{r7, pc}
 800824e:	46c0      	nop			; (mov r8, r8)
 8008250:	20000010 	.word	0x20000010

08008254 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8008254:	b580      	push	{r7, lr}
 8008256:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8008258:	46c0      	nop			; (mov r8, r8)
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}
	...

08008260 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8008260:	4a0b      	ldr	r2, [pc, #44]	; (8008290 <pxCurrentTCBConst2>)
 8008262:	6813      	ldr	r3, [r2, #0]
 8008264:	6818      	ldr	r0, [r3, #0]
 8008266:	3020      	adds	r0, #32
 8008268:	f380 8809 	msr	PSP, r0
 800826c:	2002      	movs	r0, #2
 800826e:	f380 8814 	msr	CONTROL, r0
 8008272:	f3bf 8f6f 	isb	sy
 8008276:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8008278:	46ae      	mov	lr, r5
 800827a:	bc08      	pop	{r3}
 800827c:	bc04      	pop	{r2}
 800827e:	b662      	cpsie	i
 8008280:	4718      	bx	r3
 8008282:	46c0      	nop			; (mov r8, r8)
 8008284:	46c0      	nop			; (mov r8, r8)
 8008286:	46c0      	nop			; (mov r8, r8)
 8008288:	46c0      	nop			; (mov r8, r8)
 800828a:	46c0      	nop			; (mov r8, r8)
 800828c:	46c0      	nop			; (mov r8, r8)
 800828e:	46c0      	nop			; (mov r8, r8)

08008290 <pxCurrentTCBConst2>:
 8008290:	2000078c 	.word	0x2000078c
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8008294:	46c0      	nop			; (mov r8, r8)
 8008296:	46c0      	nop			; (mov r8, r8)

08008298 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008298:	b580      	push	{r7, lr}
 800829a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800829c:	4b0e      	ldr	r3, [pc, #56]	; (80082d8 <xPortStartScheduler+0x40>)
 800829e:	681a      	ldr	r2, [r3, #0]
 80082a0:	4b0d      	ldr	r3, [pc, #52]	; (80082d8 <xPortStartScheduler+0x40>)
 80082a2:	21ff      	movs	r1, #255	; 0xff
 80082a4:	0409      	lsls	r1, r1, #16
 80082a6:	430a      	orrs	r2, r1
 80082a8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 80082aa:	4b0b      	ldr	r3, [pc, #44]	; (80082d8 <xPortStartScheduler+0x40>)
 80082ac:	681a      	ldr	r2, [r3, #0]
 80082ae:	4b0a      	ldr	r3, [pc, #40]	; (80082d8 <xPortStartScheduler+0x40>)
 80082b0:	21ff      	movs	r1, #255	; 0xff
 80082b2:	0609      	lsls	r1, r1, #24
 80082b4:	430a      	orrs	r2, r1
 80082b6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 80082b8:	f000 f898 	bl	80083ec <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80082bc:	4b07      	ldr	r3, [pc, #28]	; (80082dc <xPortStartScheduler+0x44>)
 80082be:	2200      	movs	r2, #0
 80082c0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 80082c2:	f7ff ffcd 	bl	8008260 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80082c6:	f7ff f8c5 	bl	8007454 <vTaskSwitchContext>
	prvTaskExitError();
 80082ca:	f7ff ffab 	bl	8008224 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80082ce:	2300      	movs	r3, #0
}
 80082d0:	0018      	movs	r0, r3
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bd80      	pop	{r7, pc}
 80082d6:	46c0      	nop			; (mov r8, r8)
 80082d8:	e000ed20 	.word	0xe000ed20
 80082dc:	20000010 	.word	0x20000010

080082e0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 80082e4:	4b05      	ldr	r3, [pc, #20]	; (80082fc <vPortYield+0x1c>)
 80082e6:	2280      	movs	r2, #128	; 0x80
 80082e8:	0552      	lsls	r2, r2, #21
 80082ea:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 80082ec:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80082f0:	f3bf 8f6f 	isb	sy
}
 80082f4:	46c0      	nop			; (mov r8, r8)
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}
 80082fa:	46c0      	nop			; (mov r8, r8)
 80082fc:	e000ed04 	.word	0xe000ed04

08008300 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008300:	b580      	push	{r7, lr}
 8008302:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8008304:	b672      	cpsid	i
    uxCriticalNesting++;
 8008306:	4b06      	ldr	r3, [pc, #24]	; (8008320 <vPortEnterCritical+0x20>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	1c5a      	adds	r2, r3, #1
 800830c:	4b04      	ldr	r3, [pc, #16]	; (8008320 <vPortEnterCritical+0x20>)
 800830e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8008310:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8008314:	f3bf 8f6f 	isb	sy
}
 8008318:	46c0      	nop			; (mov r8, r8)
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}
 800831e:	46c0      	nop			; (mov r8, r8)
 8008320:	20000010 	.word	0x20000010

08008324 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008324:	b580      	push	{r7, lr}
 8008326:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008328:	4b09      	ldr	r3, [pc, #36]	; (8008350 <vPortExitCritical+0x2c>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d101      	bne.n	8008334 <vPortExitCritical+0x10>
 8008330:	b672      	cpsid	i
 8008332:	e7fe      	b.n	8008332 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8008334:	4b06      	ldr	r3, [pc, #24]	; (8008350 <vPortExitCritical+0x2c>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	1e5a      	subs	r2, r3, #1
 800833a:	4b05      	ldr	r3, [pc, #20]	; (8008350 <vPortExitCritical+0x2c>)
 800833c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 800833e:	4b04      	ldr	r3, [pc, #16]	; (8008350 <vPortExitCritical+0x2c>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d100      	bne.n	8008348 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8008346:	b662      	cpsie	i
    }
}
 8008348:	46c0      	nop			; (mov r8, r8)
 800834a:	46bd      	mov	sp, r7
 800834c:	bd80      	pop	{r7, pc}
 800834e:	46c0      	nop			; (mov r8, r8)
 8008350:	20000010 	.word	0x20000010

08008354 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8008354:	f3ef 8010 	mrs	r0, PRIMASK
 8008358:	b672      	cpsid	i
 800835a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 800835c:	46c0      	nop			; (mov r8, r8)
 800835e:	0018      	movs	r0, r3

08008360 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8008360:	f380 8810 	msr	PRIMASK, r0
 8008364:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8008366:	46c0      	nop			; (mov r8, r8)
	...

08008370 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008370:	f3ef 8009 	mrs	r0, PSP
 8008374:	4b0e      	ldr	r3, [pc, #56]	; (80083b0 <pxCurrentTCBConst>)
 8008376:	681a      	ldr	r2, [r3, #0]
 8008378:	3820      	subs	r0, #32
 800837a:	6010      	str	r0, [r2, #0]
 800837c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800837e:	4644      	mov	r4, r8
 8008380:	464d      	mov	r5, r9
 8008382:	4656      	mov	r6, sl
 8008384:	465f      	mov	r7, fp
 8008386:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8008388:	b508      	push	{r3, lr}
 800838a:	b672      	cpsid	i
 800838c:	f7ff f862 	bl	8007454 <vTaskSwitchContext>
 8008390:	b662      	cpsie	i
 8008392:	bc0c      	pop	{r2, r3}
 8008394:	6811      	ldr	r1, [r2, #0]
 8008396:	6808      	ldr	r0, [r1, #0]
 8008398:	3010      	adds	r0, #16
 800839a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800839c:	46a0      	mov	r8, r4
 800839e:	46a9      	mov	r9, r5
 80083a0:	46b2      	mov	sl, r6
 80083a2:	46bb      	mov	fp, r7
 80083a4:	f380 8809 	msr	PSP, r0
 80083a8:	3820      	subs	r0, #32
 80083aa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80083ac:	4718      	bx	r3
 80083ae:	46c0      	nop			; (mov r8, r8)

080083b0 <pxCurrentTCBConst>:
 80083b0:	2000078c 	.word	0x2000078c
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 80083b4:	46c0      	nop			; (mov r8, r8)
 80083b6:	46c0      	nop			; (mov r8, r8)

080083b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b082      	sub	sp, #8
 80083bc:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 80083be:	f7ff ffc9 	bl	8008354 <ulSetInterruptMaskFromISR>
 80083c2:	0003      	movs	r3, r0
 80083c4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80083c6:	f7fe ff91 	bl	80072ec <xTaskIncrementTick>
 80083ca:	1e03      	subs	r3, r0, #0
 80083cc:	d003      	beq.n	80083d6 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 80083ce:	4b06      	ldr	r3, [pc, #24]	; (80083e8 <xPortSysTickHandler+0x30>)
 80083d0:	2280      	movs	r2, #128	; 0x80
 80083d2:	0552      	lsls	r2, r2, #21
 80083d4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	0018      	movs	r0, r3
 80083da:	f7ff ffc1 	bl	8008360 <vClearInterruptMaskFromISR>
}
 80083de:	46c0      	nop			; (mov r8, r8)
 80083e0:	46bd      	mov	sp, r7
 80083e2:	b002      	add	sp, #8
 80083e4:	bd80      	pop	{r7, pc}
 80083e6:	46c0      	nop			; (mov r8, r8)
 80083e8:	e000ed04 	.word	0xe000ed04

080083ec <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 80083f0:	4b0b      	ldr	r3, [pc, #44]	; (8008420 <prvSetupTimerInterrupt+0x34>)
 80083f2:	2200      	movs	r2, #0
 80083f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 80083f6:	4b0b      	ldr	r3, [pc, #44]	; (8008424 <prvSetupTimerInterrupt+0x38>)
 80083f8:	2200      	movs	r2, #0
 80083fa:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80083fc:	4b0a      	ldr	r3, [pc, #40]	; (8008428 <prvSetupTimerInterrupt+0x3c>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	22fa      	movs	r2, #250	; 0xfa
 8008402:	0091      	lsls	r1, r2, #2
 8008404:	0018      	movs	r0, r3
 8008406:	f7f7 fe89 	bl	800011c <__udivsi3>
 800840a:	0003      	movs	r3, r0
 800840c:	001a      	movs	r2, r3
 800840e:	4b07      	ldr	r3, [pc, #28]	; (800842c <prvSetupTimerInterrupt+0x40>)
 8008410:	3a01      	subs	r2, #1
 8008412:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8008414:	4b02      	ldr	r3, [pc, #8]	; (8008420 <prvSetupTimerInterrupt+0x34>)
 8008416:	2207      	movs	r2, #7
 8008418:	601a      	str	r2, [r3, #0]
}
 800841a:	46c0      	nop			; (mov r8, r8)
 800841c:	46bd      	mov	sp, r7
 800841e:	bd80      	pop	{r7, pc}
 8008420:	e000e010 	.word	0xe000e010
 8008424:	e000e018 	.word	0xe000e018
 8008428:	20000004 	.word	0x20000004
 800842c:	e000e014 	.word	0xe000e014

08008430 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b086      	sub	sp, #24
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008438:	2300      	movs	r3, #0
 800843a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800843c:	f7fe feb0 	bl	80071a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008440:	4b49      	ldr	r3, [pc, #292]	; (8008568 <pvPortMalloc+0x138>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d101      	bne.n	800844c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008448:	f000 f8e0 	bl	800860c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800844c:	4b47      	ldr	r3, [pc, #284]	; (800856c <pvPortMalloc+0x13c>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	687a      	ldr	r2, [r7, #4]
 8008452:	4013      	ands	r3, r2
 8008454:	d000      	beq.n	8008458 <pvPortMalloc+0x28>
 8008456:	e079      	b.n	800854c <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d012      	beq.n	8008484 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 800845e:	2208      	movs	r2, #8
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	189b      	adds	r3, r3, r2
 8008464:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2207      	movs	r2, #7
 800846a:	4013      	ands	r3, r2
 800846c:	d00a      	beq.n	8008484 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2207      	movs	r2, #7
 8008472:	4393      	bics	r3, r2
 8008474:	3308      	adds	r3, #8
 8008476:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2207      	movs	r2, #7
 800847c:	4013      	ands	r3, r2
 800847e:	d001      	beq.n	8008484 <pvPortMalloc+0x54>
 8008480:	b672      	cpsid	i
 8008482:	e7fe      	b.n	8008482 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d060      	beq.n	800854c <pvPortMalloc+0x11c>
 800848a:	4b39      	ldr	r3, [pc, #228]	; (8008570 <pvPortMalloc+0x140>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	687a      	ldr	r2, [r7, #4]
 8008490:	429a      	cmp	r2, r3
 8008492:	d85b      	bhi.n	800854c <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008494:	4b37      	ldr	r3, [pc, #220]	; (8008574 <pvPortMalloc+0x144>)
 8008496:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8008498:	4b36      	ldr	r3, [pc, #216]	; (8008574 <pvPortMalloc+0x144>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800849e:	e004      	b.n	80084aa <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 80084a0:	697b      	ldr	r3, [r7, #20]
 80084a2:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 80084a4:	697b      	ldr	r3, [r7, #20]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	685b      	ldr	r3, [r3, #4]
 80084ae:	687a      	ldr	r2, [r7, #4]
 80084b0:	429a      	cmp	r2, r3
 80084b2:	d903      	bls.n	80084bc <pvPortMalloc+0x8c>
 80084b4:	697b      	ldr	r3, [r7, #20]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d1f1      	bne.n	80084a0 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80084bc:	4b2a      	ldr	r3, [pc, #168]	; (8008568 <pvPortMalloc+0x138>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	697a      	ldr	r2, [r7, #20]
 80084c2:	429a      	cmp	r2, r3
 80084c4:	d042      	beq.n	800854c <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80084c6:	693b      	ldr	r3, [r7, #16]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	2208      	movs	r2, #8
 80084cc:	189b      	adds	r3, r3, r2
 80084ce:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80084d0:	697b      	ldr	r3, [r7, #20]
 80084d2:	681a      	ldr	r2, [r3, #0]
 80084d4:	693b      	ldr	r3, [r7, #16]
 80084d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80084d8:	697b      	ldr	r3, [r7, #20]
 80084da:	685a      	ldr	r2, [r3, #4]
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	1ad2      	subs	r2, r2, r3
 80084e0:	2308      	movs	r3, #8
 80084e2:	005b      	lsls	r3, r3, #1
 80084e4:	429a      	cmp	r2, r3
 80084e6:	d916      	bls.n	8008516 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80084e8:	697a      	ldr	r2, [r7, #20]
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	18d3      	adds	r3, r2, r3
 80084ee:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	2207      	movs	r2, #7
 80084f4:	4013      	ands	r3, r2
 80084f6:	d001      	beq.n	80084fc <pvPortMalloc+0xcc>
 80084f8:	b672      	cpsid	i
 80084fa:	e7fe      	b.n	80084fa <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80084fc:	697b      	ldr	r3, [r7, #20]
 80084fe:	685a      	ldr	r2, [r3, #4]
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	1ad2      	subs	r2, r2, r3
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008508:	697b      	ldr	r3, [r7, #20]
 800850a:	687a      	ldr	r2, [r7, #4]
 800850c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	0018      	movs	r0, r3
 8008512:	f000 f8db 	bl	80086cc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008516:	4b16      	ldr	r3, [pc, #88]	; (8008570 <pvPortMalloc+0x140>)
 8008518:	681a      	ldr	r2, [r3, #0]
 800851a:	697b      	ldr	r3, [r7, #20]
 800851c:	685b      	ldr	r3, [r3, #4]
 800851e:	1ad2      	subs	r2, r2, r3
 8008520:	4b13      	ldr	r3, [pc, #76]	; (8008570 <pvPortMalloc+0x140>)
 8008522:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008524:	4b12      	ldr	r3, [pc, #72]	; (8008570 <pvPortMalloc+0x140>)
 8008526:	681a      	ldr	r2, [r3, #0]
 8008528:	4b13      	ldr	r3, [pc, #76]	; (8008578 <pvPortMalloc+0x148>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	429a      	cmp	r2, r3
 800852e:	d203      	bcs.n	8008538 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008530:	4b0f      	ldr	r3, [pc, #60]	; (8008570 <pvPortMalloc+0x140>)
 8008532:	681a      	ldr	r2, [r3, #0]
 8008534:	4b10      	ldr	r3, [pc, #64]	; (8008578 <pvPortMalloc+0x148>)
 8008536:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	685a      	ldr	r2, [r3, #4]
 800853c:	4b0b      	ldr	r3, [pc, #44]	; (800856c <pvPortMalloc+0x13c>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	431a      	orrs	r2, r3
 8008542:	697b      	ldr	r3, [r7, #20]
 8008544:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008546:	697b      	ldr	r3, [r7, #20]
 8008548:	2200      	movs	r2, #0
 800854a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800854c:	f7fe fe34 	bl	80071b8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	2207      	movs	r2, #7
 8008554:	4013      	ands	r3, r2
 8008556:	d001      	beq.n	800855c <pvPortMalloc+0x12c>
 8008558:	b672      	cpsid	i
 800855a:	e7fe      	b.n	800855a <pvPortMalloc+0x12a>
	return pvReturn;
 800855c:	68fb      	ldr	r3, [r7, #12]
}
 800855e:	0018      	movs	r0, r3
 8008560:	46bd      	mov	sp, r7
 8008562:	b006      	add	sp, #24
 8008564:	bd80      	pop	{r7, pc}
 8008566:	46c0      	nop			; (mov r8, r8)
 8008568:	200019c0 	.word	0x200019c0
 800856c:	200019cc 	.word	0x200019cc
 8008570:	200019c4 	.word	0x200019c4
 8008574:	200019b8 	.word	0x200019b8
 8008578:	200019c8 	.word	0x200019c8

0800857c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b084      	sub	sp, #16
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d035      	beq.n	80085fa <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800858e:	2308      	movs	r3, #8
 8008590:	425b      	negs	r3, r3
 8008592:	68fa      	ldr	r2, [r7, #12]
 8008594:	18d3      	adds	r3, r2, r3
 8008596:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	685a      	ldr	r2, [r3, #4]
 80085a0:	4b18      	ldr	r3, [pc, #96]	; (8008604 <vPortFree+0x88>)
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	4013      	ands	r3, r2
 80085a6:	d101      	bne.n	80085ac <vPortFree+0x30>
 80085a8:	b672      	cpsid	i
 80085aa:	e7fe      	b.n	80085aa <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d001      	beq.n	80085b8 <vPortFree+0x3c>
 80085b4:	b672      	cpsid	i
 80085b6:	e7fe      	b.n	80085b6 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	685a      	ldr	r2, [r3, #4]
 80085bc:	4b11      	ldr	r3, [pc, #68]	; (8008604 <vPortFree+0x88>)
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	4013      	ands	r3, r2
 80085c2:	d01a      	beq.n	80085fa <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d116      	bne.n	80085fa <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	685a      	ldr	r2, [r3, #4]
 80085d0:	4b0c      	ldr	r3, [pc, #48]	; (8008604 <vPortFree+0x88>)
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	43db      	mvns	r3, r3
 80085d6:	401a      	ands	r2, r3
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80085dc:	f7fe fde0 	bl	80071a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	685a      	ldr	r2, [r3, #4]
 80085e4:	4b08      	ldr	r3, [pc, #32]	; (8008608 <vPortFree+0x8c>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	18d2      	adds	r2, r2, r3
 80085ea:	4b07      	ldr	r3, [pc, #28]	; (8008608 <vPortFree+0x8c>)
 80085ec:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	0018      	movs	r0, r3
 80085f2:	f000 f86b 	bl	80086cc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80085f6:	f7fe fddf 	bl	80071b8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80085fa:	46c0      	nop			; (mov r8, r8)
 80085fc:	46bd      	mov	sp, r7
 80085fe:	b004      	add	sp, #16
 8008600:	bd80      	pop	{r7, pc}
 8008602:	46c0      	nop			; (mov r8, r8)
 8008604:	200019cc 	.word	0x200019cc
 8008608:	200019c4 	.word	0x200019c4

0800860c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b084      	sub	sp, #16
 8008610:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008612:	23c0      	movs	r3, #192	; 0xc0
 8008614:	011b      	lsls	r3, r3, #4
 8008616:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008618:	4b26      	ldr	r3, [pc, #152]	; (80086b4 <prvHeapInit+0xa8>)
 800861a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	2207      	movs	r2, #7
 8008620:	4013      	ands	r3, r2
 8008622:	d00c      	beq.n	800863e <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	3307      	adds	r3, #7
 8008628:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	2207      	movs	r2, #7
 800862e:	4393      	bics	r3, r2
 8008630:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008632:	68ba      	ldr	r2, [r7, #8]
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	1ad2      	subs	r2, r2, r3
 8008638:	4b1e      	ldr	r3, [pc, #120]	; (80086b4 <prvHeapInit+0xa8>)
 800863a:	18d3      	adds	r3, r2, r3
 800863c:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008642:	4b1d      	ldr	r3, [pc, #116]	; (80086b8 <prvHeapInit+0xac>)
 8008644:	687a      	ldr	r2, [r7, #4]
 8008646:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008648:	4b1b      	ldr	r3, [pc, #108]	; (80086b8 <prvHeapInit+0xac>)
 800864a:	2200      	movs	r2, #0
 800864c:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	68ba      	ldr	r2, [r7, #8]
 8008652:	18d3      	adds	r3, r2, r3
 8008654:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008656:	2208      	movs	r2, #8
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	1a9b      	subs	r3, r3, r2
 800865c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	2207      	movs	r2, #7
 8008662:	4393      	bics	r3, r2
 8008664:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008666:	68fa      	ldr	r2, [r7, #12]
 8008668:	4b14      	ldr	r3, [pc, #80]	; (80086bc <prvHeapInit+0xb0>)
 800866a:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 800866c:	4b13      	ldr	r3, [pc, #76]	; (80086bc <prvHeapInit+0xb0>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	2200      	movs	r2, #0
 8008672:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008674:	4b11      	ldr	r3, [pc, #68]	; (80086bc <prvHeapInit+0xb0>)
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	2200      	movs	r2, #0
 800867a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	68fa      	ldr	r2, [r7, #12]
 8008684:	1ad2      	subs	r2, r2, r3
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800868a:	4b0c      	ldr	r3, [pc, #48]	; (80086bc <prvHeapInit+0xb0>)
 800868c:	681a      	ldr	r2, [r3, #0]
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	685a      	ldr	r2, [r3, #4]
 8008696:	4b0a      	ldr	r3, [pc, #40]	; (80086c0 <prvHeapInit+0xb4>)
 8008698:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	685a      	ldr	r2, [r3, #4]
 800869e:	4b09      	ldr	r3, [pc, #36]	; (80086c4 <prvHeapInit+0xb8>)
 80086a0:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80086a2:	4b09      	ldr	r3, [pc, #36]	; (80086c8 <prvHeapInit+0xbc>)
 80086a4:	2280      	movs	r2, #128	; 0x80
 80086a6:	0612      	lsls	r2, r2, #24
 80086a8:	601a      	str	r2, [r3, #0]
}
 80086aa:	46c0      	nop			; (mov r8, r8)
 80086ac:	46bd      	mov	sp, r7
 80086ae:	b004      	add	sp, #16
 80086b0:	bd80      	pop	{r7, pc}
 80086b2:	46c0      	nop			; (mov r8, r8)
 80086b4:	20000db8 	.word	0x20000db8
 80086b8:	200019b8 	.word	0x200019b8
 80086bc:	200019c0 	.word	0x200019c0
 80086c0:	200019c8 	.word	0x200019c8
 80086c4:	200019c4 	.word	0x200019c4
 80086c8:	200019cc 	.word	0x200019cc

080086cc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b084      	sub	sp, #16
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80086d4:	4b27      	ldr	r3, [pc, #156]	; (8008774 <prvInsertBlockIntoFreeList+0xa8>)
 80086d6:	60fb      	str	r3, [r7, #12]
 80086d8:	e002      	b.n	80086e0 <prvInsertBlockIntoFreeList+0x14>
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	60fb      	str	r3, [r7, #12]
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	687a      	ldr	r2, [r7, #4]
 80086e6:	429a      	cmp	r2, r3
 80086e8:	d8f7      	bhi.n	80086da <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	685b      	ldr	r3, [r3, #4]
 80086f2:	68ba      	ldr	r2, [r7, #8]
 80086f4:	18d3      	adds	r3, r2, r3
 80086f6:	687a      	ldr	r2, [r7, #4]
 80086f8:	429a      	cmp	r2, r3
 80086fa:	d108      	bne.n	800870e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	685a      	ldr	r2, [r3, #4]
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	685b      	ldr	r3, [r3, #4]
 8008704:	18d2      	adds	r2, r2, r3
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	685b      	ldr	r3, [r3, #4]
 8008716:	68ba      	ldr	r2, [r7, #8]
 8008718:	18d2      	adds	r2, r2, r3
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	429a      	cmp	r2, r3
 8008720:	d118      	bne.n	8008754 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	681a      	ldr	r2, [r3, #0]
 8008726:	4b14      	ldr	r3, [pc, #80]	; (8008778 <prvInsertBlockIntoFreeList+0xac>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	429a      	cmp	r2, r3
 800872c:	d00d      	beq.n	800874a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	685a      	ldr	r2, [r3, #4]
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	685b      	ldr	r3, [r3, #4]
 8008738:	18d2      	adds	r2, r2, r3
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	681a      	ldr	r2, [r3, #0]
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	601a      	str	r2, [r3, #0]
 8008748:	e008      	b.n	800875c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800874a:	4b0b      	ldr	r3, [pc, #44]	; (8008778 <prvInsertBlockIntoFreeList+0xac>)
 800874c:	681a      	ldr	r2, [r3, #0]
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	601a      	str	r2, [r3, #0]
 8008752:	e003      	b.n	800875c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	681a      	ldr	r2, [r3, #0]
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800875c:	68fa      	ldr	r2, [r7, #12]
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	429a      	cmp	r2, r3
 8008762:	d002      	beq.n	800876a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	687a      	ldr	r2, [r7, #4]
 8008768:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800876a:	46c0      	nop			; (mov r8, r8)
 800876c:	46bd      	mov	sp, r7
 800876e:	b004      	add	sp, #16
 8008770:	bd80      	pop	{r7, pc}
 8008772:	46c0      	nop			; (mov r8, r8)
 8008774:	200019b8 	.word	0x200019b8
 8008778:	200019c0 	.word	0x200019c0

0800877c <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 800877c:	b580      	push	{r7, lr}
 800877e:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8008780:	46c0      	nop			; (mov r8, r8)
 8008782:	46bd      	mov	sp, r7
 8008784:	bd80      	pop	{r7, pc}
	...

08008788 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8008788:	b580      	push	{r7, lr}
 800878a:	b086      	sub	sp, #24
 800878c:	af04      	add	r7, sp, #16
 800878e:	0002      	movs	r2, r0
 8008790:	1dfb      	adds	r3, r7, #7
 8008792:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8008794:	4808      	ldr	r0, [pc, #32]	; (80087b8 <ssd1306_WriteCommand+0x30>)
 8008796:	2301      	movs	r3, #1
 8008798:	425b      	negs	r3, r3
 800879a:	9302      	str	r3, [sp, #8]
 800879c:	2301      	movs	r3, #1
 800879e:	9301      	str	r3, [sp, #4]
 80087a0:	1dfb      	adds	r3, r7, #7
 80087a2:	9300      	str	r3, [sp, #0]
 80087a4:	2301      	movs	r3, #1
 80087a6:	2200      	movs	r2, #0
 80087a8:	2178      	movs	r1, #120	; 0x78
 80087aa:	f7fb f961 	bl	8003a70 <HAL_I2C_Mem_Write>
}
 80087ae:	46c0      	nop			; (mov r8, r8)
 80087b0:	46bd      	mov	sp, r7
 80087b2:	b002      	add	sp, #8
 80087b4:	bd80      	pop	{r7, pc}
 80087b6:	46c0      	nop			; (mov r8, r8)
 80087b8:	2000221c 	.word	0x2000221c

080087bc <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80087bc:	b580      	push	{r7, lr}
 80087be:	b086      	sub	sp, #24
 80087c0:	af04      	add	r7, sp, #16
 80087c2:	6078      	str	r0, [r7, #4]
 80087c4:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	b29b      	uxth	r3, r3
 80087ca:	4808      	ldr	r0, [pc, #32]	; (80087ec <ssd1306_WriteData+0x30>)
 80087cc:	2201      	movs	r2, #1
 80087ce:	4252      	negs	r2, r2
 80087d0:	9202      	str	r2, [sp, #8]
 80087d2:	9301      	str	r3, [sp, #4]
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	9300      	str	r3, [sp, #0]
 80087d8:	2301      	movs	r3, #1
 80087da:	2240      	movs	r2, #64	; 0x40
 80087dc:	2178      	movs	r1, #120	; 0x78
 80087de:	f7fb f947 	bl	8003a70 <HAL_I2C_Mem_Write>
}
 80087e2:	46c0      	nop			; (mov r8, r8)
 80087e4:	46bd      	mov	sp, r7
 80087e6:	b002      	add	sp, #8
 80087e8:	bd80      	pop	{r7, pc}
 80087ea:	46c0      	nop			; (mov r8, r8)
 80087ec:	2000221c 	.word	0x2000221c

080087f0 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 80087f0:	b580      	push	{r7, lr}
 80087f2:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80087f4:	f7ff ffc2 	bl	800877c <ssd1306_Reset>

    // Wait for the screen to boot
    //HAL_Delay(100);

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80087f8:	2000      	movs	r0, #0
 80087fa:	f000 fa21 	bl	8008c40 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80087fe:	2020      	movs	r0, #32
 8008800:	f7ff ffc2 	bl	8008788 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8008804:	2000      	movs	r0, #0
 8008806:	f7ff ffbf 	bl	8008788 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800880a:	20b0      	movs	r0, #176	; 0xb0
 800880c:	f7ff ffbc 	bl	8008788 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
 8008810:	20c0      	movs	r0, #192	; 0xc0
 8008812:	f7ff ffb9 	bl	8008788 <ssd1306_WriteCommand>
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8008816:	2000      	movs	r0, #0
 8008818:	f7ff ffb6 	bl	8008788 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800881c:	2010      	movs	r0, #16
 800881e:	f7ff ffb3 	bl	8008788 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDC);
 8008822:	20dc      	movs	r0, #220	; 0xdc
 8008824:	f7ff ffb0 	bl	8008788 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //--set start line address - CHECK
 8008828:	2000      	movs	r0, #0
 800882a:	f7ff ffad 	bl	8008788 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800882e:	20ff      	movs	r0, #255	; 0xff
 8008830:	f000 f9ee 	bl	8008c10 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
 8008834:	20a0      	movs	r0, #160	; 0xa0
 8008836:	f7ff ffa7 	bl	8008788 <ssd1306_WriteCommand>
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
 800883a:	20a7      	movs	r0, #167	; 0xa7
 800883c:	f7ff ffa4 	bl	8008788 <ssd1306_WriteCommand>
#endif

// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
 8008840:	20ff      	movs	r0, #255	; 0xff
 8008842:	f7ff ffa1 	bl	8008788 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
#elif (SSD1306_HEIGHT == 128)
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
 8008846:	203f      	movs	r0, #63	; 0x3f
 8008848:	f7ff ff9e 	bl	8008788 <ssd1306_WriteCommand>
#else
    ssd1306_WriteCommand(0x3F);
//#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800884c:	20a4      	movs	r0, #164	; 0xa4
 800884e:	f7ff ff9b 	bl	8008788 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8008852:	20d3      	movs	r0, #211	; 0xd3
 8008854:	f7ff ff98 	bl	8008788 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //-not offset
 8008858:	2022      	movs	r0, #34	; 0x22
 800885a:	f7ff ff95 	bl	8008788 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800885e:	20d5      	movs	r0, #213	; 0xd5
 8008860:	f7ff ff92 	bl	8008788 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8008864:	20f0      	movs	r0, #240	; 0xf0
 8008866:	f7ff ff8f 	bl	8008788 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800886a:	20d9      	movs	r0, #217	; 0xd9
 800886c:	f7ff ff8c 	bl	8008788 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8008870:	2022      	movs	r0, #34	; 0x22
 8008872:	f7ff ff89 	bl	8008788 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8008876:	20da      	movs	r0, #218	; 0xda
 8008878:	f7ff ff86 	bl	8008788 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
#elif (SSD1306_HEIGHT == 128)
    ssd1306_WriteCommand(0x12);
 800887c:	2012      	movs	r0, #18
 800887e:	f7ff ff83 	bl	8008788 <ssd1306_WriteCommand>
#else
    ssd1306_WriteCommand(0x12);
//#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8008882:	20db      	movs	r0, #219	; 0xdb
 8008884:	f7ff ff80 	bl	8008788 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8008888:	2020      	movs	r0, #32
 800888a:	f7ff ff7d 	bl	8008788 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800888e:	208d      	movs	r0, #141	; 0x8d
 8008890:	f7ff ff7a 	bl	8008788 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8008894:	2014      	movs	r0, #20
 8008896:	f7ff ff77 	bl	8008788 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800889a:	2001      	movs	r0, #1
 800889c:	f000 f9d0 	bl	8008c40 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80088a0:	2000      	movs	r0, #0
 80088a2:	f000 f811 	bl	80088c8 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80088a6:	f000 f833 	bl	8008910 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80088aa:	4b06      	ldr	r3, [pc, #24]	; (80088c4 <ssd1306_Init+0xd4>)
 80088ac:	2200      	movs	r2, #0
 80088ae:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80088b0:	4b04      	ldr	r3, [pc, #16]	; (80088c4 <ssd1306_Init+0xd4>)
 80088b2:	2200      	movs	r2, #0
 80088b4:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80088b6:	4b03      	ldr	r3, [pc, #12]	; (80088c4 <ssd1306_Init+0xd4>)
 80088b8:	2201      	movs	r2, #1
 80088ba:	711a      	strb	r2, [r3, #4]
}
 80088bc:	46c0      	nop			; (mov r8, r8)
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}
 80088c2:	46c0      	nop			; (mov r8, r8)
 80088c4:	200021d0 	.word	0x200021d0

080088c8 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b084      	sub	sp, #16
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	0002      	movs	r2, r0
 80088d0:	1dfb      	adds	r3, r7, #7
 80088d2:	701a      	strb	r2, [r3, #0]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80088d4:	2300      	movs	r3, #0
 80088d6:	60fb      	str	r3, [r7, #12]
 80088d8:	e00e      	b.n	80088f8 <ssd1306_Fill+0x30>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80088da:	1dfb      	adds	r3, r7, #7
 80088dc:	781b      	ldrb	r3, [r3, #0]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d101      	bne.n	80088e6 <ssd1306_Fill+0x1e>
 80088e2:	2100      	movs	r1, #0
 80088e4:	e000      	b.n	80088e8 <ssd1306_Fill+0x20>
 80088e6:	21ff      	movs	r1, #255	; 0xff
 80088e8:	4a08      	ldr	r2, [pc, #32]	; (800890c <ssd1306_Fill+0x44>)
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	18d3      	adds	r3, r2, r3
 80088ee:	1c0a      	adds	r2, r1, #0
 80088f0:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	3301      	adds	r3, #1
 80088f6:	60fb      	str	r3, [r7, #12]
 80088f8:	68fa      	ldr	r2, [r7, #12]
 80088fa:	2380      	movs	r3, #128	; 0x80
 80088fc:	011b      	lsls	r3, r3, #4
 80088fe:	429a      	cmp	r2, r3
 8008900:	d3eb      	bcc.n	80088da <ssd1306_Fill+0x12>
    }
}
 8008902:	46c0      	nop			; (mov r8, r8)
 8008904:	46c0      	nop			; (mov r8, r8)
 8008906:	46bd      	mov	sp, r7
 8008908:	b004      	add	sp, #16
 800890a:	bd80      	pop	{r7, pc}
 800890c:	200019d0 	.word	0x200019d0

08008910 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8008910:	b580      	push	{r7, lr}
 8008912:	b082      	sub	sp, #8
 8008914:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8008916:	1dfb      	adds	r3, r7, #7
 8008918:	2200      	movs	r2, #0
 800891a:	701a      	strb	r2, [r3, #0]
 800891c:	e01a      	b.n	8008954 <ssd1306_UpdateScreen+0x44>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 800891e:	1dfb      	adds	r3, r7, #7
 8008920:	781b      	ldrb	r3, [r3, #0]
 8008922:	3b50      	subs	r3, #80	; 0x50
 8008924:	b2db      	uxtb	r3, r3
 8008926:	0018      	movs	r0, r3
 8008928:	f7ff ff2e 	bl	8008788 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 800892c:	2000      	movs	r0, #0
 800892e:	f7ff ff2b 	bl	8008788 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8008932:	2010      	movs	r0, #16
 8008934:	f7ff ff28 	bl	8008788 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8008938:	1dfb      	adds	r3, r7, #7
 800893a:	781b      	ldrb	r3, [r3, #0]
 800893c:	01da      	lsls	r2, r3, #7
 800893e:	4b0a      	ldr	r3, [pc, #40]	; (8008968 <ssd1306_UpdateScreen+0x58>)
 8008940:	18d3      	adds	r3, r2, r3
 8008942:	2180      	movs	r1, #128	; 0x80
 8008944:	0018      	movs	r0, r3
 8008946:	f7ff ff39 	bl	80087bc <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800894a:	1dfb      	adds	r3, r7, #7
 800894c:	781a      	ldrb	r2, [r3, #0]
 800894e:	1dfb      	adds	r3, r7, #7
 8008950:	3201      	adds	r2, #1
 8008952:	701a      	strb	r2, [r3, #0]
 8008954:	1dfb      	adds	r3, r7, #7
 8008956:	781b      	ldrb	r3, [r3, #0]
 8008958:	2b0f      	cmp	r3, #15
 800895a:	d9e0      	bls.n	800891e <ssd1306_UpdateScreen+0xe>
    }
}
 800895c:	46c0      	nop			; (mov r8, r8)
 800895e:	46c0      	nop			; (mov r8, r8)
 8008960:	46bd      	mov	sp, r7
 8008962:	b002      	add	sp, #8
 8008964:	bd80      	pop	{r7, pc}
 8008966:	46c0      	nop			; (mov r8, r8)
 8008968:	200019d0 	.word	0x200019d0

0800896c <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 800896c:	b590      	push	{r4, r7, lr}
 800896e:	b083      	sub	sp, #12
 8008970:	af00      	add	r7, sp, #0
 8008972:	0004      	movs	r4, r0
 8008974:	0008      	movs	r0, r1
 8008976:	0011      	movs	r1, r2
 8008978:	1dfb      	adds	r3, r7, #7
 800897a:	1c22      	adds	r2, r4, #0
 800897c:	701a      	strb	r2, [r3, #0]
 800897e:	1dbb      	adds	r3, r7, #6
 8008980:	1c02      	adds	r2, r0, #0
 8008982:	701a      	strb	r2, [r3, #0]
 8008984:	1d7b      	adds	r3, r7, #5
 8008986:	1c0a      	adds	r2, r1, #0
 8008988:	701a      	strb	r2, [r3, #0]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800898a:	1dfb      	adds	r3, r7, #7
 800898c:	781b      	ldrb	r3, [r3, #0]
 800898e:	b25b      	sxtb	r3, r3
 8008990:	2b00      	cmp	r3, #0
 8008992:	db48      	blt.n	8008a26 <ssd1306_DrawPixel+0xba>
 8008994:	1dbb      	adds	r3, r7, #6
 8008996:	781b      	ldrb	r3, [r3, #0]
 8008998:	b25b      	sxtb	r3, r3
 800899a:	2b00      	cmp	r3, #0
 800899c:	db43      	blt.n	8008a26 <ssd1306_DrawPixel+0xba>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 800899e:	1d7b      	adds	r3, r7, #5
 80089a0:	781b      	ldrb	r3, [r3, #0]
 80089a2:	2b01      	cmp	r3, #1
 80089a4:	d11e      	bne.n	80089e4 <ssd1306_DrawPixel+0x78>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80089a6:	1dfb      	adds	r3, r7, #7
 80089a8:	781a      	ldrb	r2, [r3, #0]
 80089aa:	1dbb      	adds	r3, r7, #6
 80089ac:	781b      	ldrb	r3, [r3, #0]
 80089ae:	08db      	lsrs	r3, r3, #3
 80089b0:	b2d8      	uxtb	r0, r3
 80089b2:	0003      	movs	r3, r0
 80089b4:	01db      	lsls	r3, r3, #7
 80089b6:	18d3      	adds	r3, r2, r3
 80089b8:	4a1d      	ldr	r2, [pc, #116]	; (8008a30 <ssd1306_DrawPixel+0xc4>)
 80089ba:	5cd3      	ldrb	r3, [r2, r3]
 80089bc:	b25a      	sxtb	r2, r3
 80089be:	1dbb      	adds	r3, r7, #6
 80089c0:	781b      	ldrb	r3, [r3, #0]
 80089c2:	2107      	movs	r1, #7
 80089c4:	400b      	ands	r3, r1
 80089c6:	2101      	movs	r1, #1
 80089c8:	4099      	lsls	r1, r3
 80089ca:	000b      	movs	r3, r1
 80089cc:	b25b      	sxtb	r3, r3
 80089ce:	4313      	orrs	r3, r2
 80089d0:	b259      	sxtb	r1, r3
 80089d2:	1dfb      	adds	r3, r7, #7
 80089d4:	781a      	ldrb	r2, [r3, #0]
 80089d6:	0003      	movs	r3, r0
 80089d8:	01db      	lsls	r3, r3, #7
 80089da:	18d3      	adds	r3, r2, r3
 80089dc:	b2c9      	uxtb	r1, r1
 80089de:	4a14      	ldr	r2, [pc, #80]	; (8008a30 <ssd1306_DrawPixel+0xc4>)
 80089e0:	54d1      	strb	r1, [r2, r3]
 80089e2:	e021      	b.n	8008a28 <ssd1306_DrawPixel+0xbc>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80089e4:	1dfb      	adds	r3, r7, #7
 80089e6:	781a      	ldrb	r2, [r3, #0]
 80089e8:	1dbb      	adds	r3, r7, #6
 80089ea:	781b      	ldrb	r3, [r3, #0]
 80089ec:	08db      	lsrs	r3, r3, #3
 80089ee:	b2d8      	uxtb	r0, r3
 80089f0:	0003      	movs	r3, r0
 80089f2:	01db      	lsls	r3, r3, #7
 80089f4:	18d3      	adds	r3, r2, r3
 80089f6:	4a0e      	ldr	r2, [pc, #56]	; (8008a30 <ssd1306_DrawPixel+0xc4>)
 80089f8:	5cd3      	ldrb	r3, [r2, r3]
 80089fa:	b25b      	sxtb	r3, r3
 80089fc:	1dba      	adds	r2, r7, #6
 80089fe:	7812      	ldrb	r2, [r2, #0]
 8008a00:	2107      	movs	r1, #7
 8008a02:	400a      	ands	r2, r1
 8008a04:	2101      	movs	r1, #1
 8008a06:	4091      	lsls	r1, r2
 8008a08:	000a      	movs	r2, r1
 8008a0a:	b252      	sxtb	r2, r2
 8008a0c:	43d2      	mvns	r2, r2
 8008a0e:	b252      	sxtb	r2, r2
 8008a10:	4013      	ands	r3, r2
 8008a12:	b259      	sxtb	r1, r3
 8008a14:	1dfb      	adds	r3, r7, #7
 8008a16:	781a      	ldrb	r2, [r3, #0]
 8008a18:	0003      	movs	r3, r0
 8008a1a:	01db      	lsls	r3, r3, #7
 8008a1c:	18d3      	adds	r3, r2, r3
 8008a1e:	b2c9      	uxtb	r1, r1
 8008a20:	4a03      	ldr	r2, [pc, #12]	; (8008a30 <ssd1306_DrawPixel+0xc4>)
 8008a22:	54d1      	strb	r1, [r2, r3]
 8008a24:	e000      	b.n	8008a28 <ssd1306_DrawPixel+0xbc>
        return;
 8008a26:	46c0      	nop			; (mov r8, r8)
    }
}
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	b003      	add	sp, #12
 8008a2c:	bd90      	pop	{r4, r7, pc}
 8008a2e:	46c0      	nop			; (mov r8, r8)
 8008a30:	200019d0 	.word	0x200019d0

08008a34 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8008a34:	b590      	push	{r4, r7, lr}
 8008a36:	b089      	sub	sp, #36	; 0x24
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	0004      	movs	r4, r0
 8008a3c:	1d38      	adds	r0, r7, #4
 8008a3e:	6001      	str	r1, [r0, #0]
 8008a40:	6042      	str	r2, [r0, #4]
 8008a42:	0019      	movs	r1, r3
 8008a44:	200f      	movs	r0, #15
 8008a46:	183b      	adds	r3, r7, r0
 8008a48:	1c22      	adds	r2, r4, #0
 8008a4a:	701a      	strb	r2, [r3, #0]
 8008a4c:	230e      	movs	r3, #14
 8008a4e:	18fb      	adds	r3, r7, r3
 8008a50:	1c0a      	adds	r2, r1, #0
 8008a52:	701a      	strb	r2, [r3, #0]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8008a54:	183b      	adds	r3, r7, r0
 8008a56:	781b      	ldrb	r3, [r3, #0]
 8008a58:	2b1f      	cmp	r3, #31
 8008a5a:	d903      	bls.n	8008a64 <ssd1306_WriteChar+0x30>
 8008a5c:	183b      	adds	r3, r7, r0
 8008a5e:	781b      	ldrb	r3, [r3, #0]
 8008a60:	2b7e      	cmp	r3, #126	; 0x7e
 8008a62:	d901      	bls.n	8008a68 <ssd1306_WriteChar+0x34>
        return 0;
 8008a64:	2300      	movs	r3, #0
 8008a66:	e088      	b.n	8008b7a <ssd1306_WriteChar+0x146>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8008a68:	4b46      	ldr	r3, [pc, #280]	; (8008b84 <ssd1306_WriteChar+0x150>)
 8008a6a:	881b      	ldrh	r3, [r3, #0]
 8008a6c:	001a      	movs	r2, r3
 8008a6e:	1d3b      	adds	r3, r7, #4
 8008a70:	781b      	ldrb	r3, [r3, #0]
 8008a72:	18d3      	adds	r3, r2, r3
 8008a74:	2b80      	cmp	r3, #128	; 0x80
 8008a76:	dc07      	bgt.n	8008a88 <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8008a78:	4b42      	ldr	r3, [pc, #264]	; (8008b84 <ssd1306_WriteChar+0x150>)
 8008a7a:	885b      	ldrh	r3, [r3, #2]
 8008a7c:	001a      	movs	r2, r3
 8008a7e:	1d3b      	adds	r3, r7, #4
 8008a80:	785b      	ldrb	r3, [r3, #1]
 8008a82:	18d3      	adds	r3, r2, r3
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8008a84:	2b80      	cmp	r3, #128	; 0x80
 8008a86:	dd01      	ble.n	8008a8c <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 8008a88:	2300      	movs	r3, #0
 8008a8a:	e076      	b.n	8008b7a <ssd1306_WriteChar+0x146>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	61fb      	str	r3, [r7, #28]
 8008a90:	e061      	b.n	8008b56 <ssd1306_WriteChar+0x122>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8008a92:	1d3b      	adds	r3, r7, #4
 8008a94:	685a      	ldr	r2, [r3, #4]
 8008a96:	230f      	movs	r3, #15
 8008a98:	18fb      	adds	r3, r7, r3
 8008a9a:	781b      	ldrb	r3, [r3, #0]
 8008a9c:	3b20      	subs	r3, #32
 8008a9e:	1d39      	adds	r1, r7, #4
 8008aa0:	7849      	ldrb	r1, [r1, #1]
 8008aa2:	434b      	muls	r3, r1
 8008aa4:	0019      	movs	r1, r3
 8008aa6:	69fb      	ldr	r3, [r7, #28]
 8008aa8:	18cb      	adds	r3, r1, r3
 8008aaa:	005b      	lsls	r3, r3, #1
 8008aac:	18d3      	adds	r3, r2, r3
 8008aae:	881b      	ldrh	r3, [r3, #0]
 8008ab0:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	61bb      	str	r3, [r7, #24]
 8008ab6:	e045      	b.n	8008b44 <ssd1306_WriteChar+0x110>
            if((b << j) & 0x8000)  {
 8008ab8:	697a      	ldr	r2, [r7, #20]
 8008aba:	69bb      	ldr	r3, [r7, #24]
 8008abc:	409a      	lsls	r2, r3
 8008abe:	2380      	movs	r3, #128	; 0x80
 8008ac0:	021b      	lsls	r3, r3, #8
 8008ac2:	4013      	ands	r3, r2
 8008ac4:	d01c      	beq.n	8008b00 <ssd1306_WriteChar+0xcc>
            	ssd1306_DrawPixel((SSD1306_HEIGHT-SSD1306.CurrentY) + i, ((SSD1306_WIDTH-SSD1306.CurrentX) + (Font.FontWidth-j)), (SSD1306_COLOR) color);
 8008ac6:	69fb      	ldr	r3, [r7, #28]
 8008ac8:	b2da      	uxtb	r2, r3
 8008aca:	4b2e      	ldr	r3, [pc, #184]	; (8008b84 <ssd1306_WriteChar+0x150>)
 8008acc:	885b      	ldrh	r3, [r3, #2]
 8008ace:	b2db      	uxtb	r3, r3
 8008ad0:	1ad3      	subs	r3, r2, r3
 8008ad2:	b2db      	uxtb	r3, r3
 8008ad4:	3b80      	subs	r3, #128	; 0x80
 8008ad6:	b2d8      	uxtb	r0, r3
 8008ad8:	1d3b      	adds	r3, r7, #4
 8008ada:	781a      	ldrb	r2, [r3, #0]
 8008adc:	69bb      	ldr	r3, [r7, #24]
 8008ade:	b2db      	uxtb	r3, r3
 8008ae0:	1ad3      	subs	r3, r2, r3
 8008ae2:	b2da      	uxtb	r2, r3
 8008ae4:	4b27      	ldr	r3, [pc, #156]	; (8008b84 <ssd1306_WriteChar+0x150>)
 8008ae6:	881b      	ldrh	r3, [r3, #0]
 8008ae8:	b2db      	uxtb	r3, r3
 8008aea:	1ad3      	subs	r3, r2, r3
 8008aec:	b2db      	uxtb	r3, r3
 8008aee:	3b80      	subs	r3, #128	; 0x80
 8008af0:	b2d9      	uxtb	r1, r3
 8008af2:	230e      	movs	r3, #14
 8008af4:	18fb      	adds	r3, r7, r3
 8008af6:	781b      	ldrb	r3, [r3, #0]
 8008af8:	001a      	movs	r2, r3
 8008afa:	f7ff ff37 	bl	800896c <ssd1306_DrawPixel>
 8008afe:	e01e      	b.n	8008b3e <ssd1306_WriteChar+0x10a>
                //ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
            } else {
            	ssd1306_DrawPixel((SSD1306_HEIGHT-SSD1306.CurrentY) + i, ((SSD1306_WIDTH-SSD1306.CurrentX) + (Font.FontWidth-j)), (SSD1306_COLOR)!color);
 8008b00:	69fb      	ldr	r3, [r7, #28]
 8008b02:	b2da      	uxtb	r2, r3
 8008b04:	4b1f      	ldr	r3, [pc, #124]	; (8008b84 <ssd1306_WriteChar+0x150>)
 8008b06:	885b      	ldrh	r3, [r3, #2]
 8008b08:	b2db      	uxtb	r3, r3
 8008b0a:	1ad3      	subs	r3, r2, r3
 8008b0c:	b2db      	uxtb	r3, r3
 8008b0e:	3b80      	subs	r3, #128	; 0x80
 8008b10:	b2d8      	uxtb	r0, r3
 8008b12:	1d3b      	adds	r3, r7, #4
 8008b14:	781a      	ldrb	r2, [r3, #0]
 8008b16:	69bb      	ldr	r3, [r7, #24]
 8008b18:	b2db      	uxtb	r3, r3
 8008b1a:	1ad3      	subs	r3, r2, r3
 8008b1c:	b2da      	uxtb	r2, r3
 8008b1e:	4b19      	ldr	r3, [pc, #100]	; (8008b84 <ssd1306_WriteChar+0x150>)
 8008b20:	881b      	ldrh	r3, [r3, #0]
 8008b22:	b2db      	uxtb	r3, r3
 8008b24:	1ad3      	subs	r3, r2, r3
 8008b26:	b2db      	uxtb	r3, r3
 8008b28:	3b80      	subs	r3, #128	; 0x80
 8008b2a:	b2d9      	uxtb	r1, r3
 8008b2c:	230e      	movs	r3, #14
 8008b2e:	18fb      	adds	r3, r7, r3
 8008b30:	781b      	ldrb	r3, [r3, #0]
 8008b32:	425a      	negs	r2, r3
 8008b34:	4153      	adcs	r3, r2
 8008b36:	b2db      	uxtb	r3, r3
 8008b38:	001a      	movs	r2, r3
 8008b3a:	f7ff ff17 	bl	800896c <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8008b3e:	69bb      	ldr	r3, [r7, #24]
 8008b40:	3301      	adds	r3, #1
 8008b42:	61bb      	str	r3, [r7, #24]
 8008b44:	1d3b      	adds	r3, r7, #4
 8008b46:	781b      	ldrb	r3, [r3, #0]
 8008b48:	001a      	movs	r2, r3
 8008b4a:	69bb      	ldr	r3, [r7, #24]
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d3b3      	bcc.n	8008ab8 <ssd1306_WriteChar+0x84>
    for(i = 0; i < Font.FontHeight; i++) {
 8008b50:	69fb      	ldr	r3, [r7, #28]
 8008b52:	3301      	adds	r3, #1
 8008b54:	61fb      	str	r3, [r7, #28]
 8008b56:	1d3b      	adds	r3, r7, #4
 8008b58:	785b      	ldrb	r3, [r3, #1]
 8008b5a:	001a      	movs	r2, r3
 8008b5c:	69fb      	ldr	r3, [r7, #28]
 8008b5e:	4293      	cmp	r3, r2
 8008b60:	d397      	bcc.n	8008a92 <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8008b62:	4b08      	ldr	r3, [pc, #32]	; (8008b84 <ssd1306_WriteChar+0x150>)
 8008b64:	881a      	ldrh	r2, [r3, #0]
 8008b66:	1d3b      	adds	r3, r7, #4
 8008b68:	781b      	ldrb	r3, [r3, #0]
 8008b6a:	b29b      	uxth	r3, r3
 8008b6c:	18d3      	adds	r3, r2, r3
 8008b6e:	b29a      	uxth	r2, r3
 8008b70:	4b04      	ldr	r3, [pc, #16]	; (8008b84 <ssd1306_WriteChar+0x150>)
 8008b72:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8008b74:	230f      	movs	r3, #15
 8008b76:	18fb      	adds	r3, r7, r3
 8008b78:	781b      	ldrb	r3, [r3, #0]
}
 8008b7a:	0018      	movs	r0, r3
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	b009      	add	sp, #36	; 0x24
 8008b80:	bd90      	pop	{r4, r7, pc}
 8008b82:	46c0      	nop			; (mov r8, r8)
 8008b84:	200021d0 	.word	0x200021d0

08008b88 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b084      	sub	sp, #16
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	60f8      	str	r0, [r7, #12]
 8008b90:	1d38      	adds	r0, r7, #4
 8008b92:	6001      	str	r1, [r0, #0]
 8008b94:	6042      	str	r2, [r0, #4]
 8008b96:	001a      	movs	r2, r3
 8008b98:	1cfb      	adds	r3, r7, #3
 8008b9a:	701a      	strb	r2, [r3, #0]
    // Write until null-byte
    while (*str) {
 8008b9c:	e014      	b.n	8008bc8 <ssd1306_WriteString+0x40>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	7818      	ldrb	r0, [r3, #0]
 8008ba2:	1cfb      	adds	r3, r7, #3
 8008ba4:	781b      	ldrb	r3, [r3, #0]
 8008ba6:	1d3a      	adds	r2, r7, #4
 8008ba8:	6811      	ldr	r1, [r2, #0]
 8008baa:	6852      	ldr	r2, [r2, #4]
 8008bac:	f7ff ff42 	bl	8008a34 <ssd1306_WriteChar>
 8008bb0:	0003      	movs	r3, r0
 8008bb2:	001a      	movs	r2, r3
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	781b      	ldrb	r3, [r3, #0]
 8008bb8:	429a      	cmp	r2, r3
 8008bba:	d002      	beq.n	8008bc2 <ssd1306_WriteString+0x3a>
            // Char could not be written
            return *str;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	781b      	ldrb	r3, [r3, #0]
 8008bc0:	e008      	b.n	8008bd4 <ssd1306_WriteString+0x4c>
        }
        
        // Next char
        str++;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	3301      	adds	r3, #1
 8008bc6:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	781b      	ldrb	r3, [r3, #0]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d1e6      	bne.n	8008b9e <ssd1306_WriteString+0x16>
    }
    
    // Everything ok
    return *str;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	781b      	ldrb	r3, [r3, #0]
}
 8008bd4:	0018      	movs	r0, r3
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	b004      	add	sp, #16
 8008bda:	bd80      	pop	{r7, pc}

08008bdc <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b082      	sub	sp, #8
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	0002      	movs	r2, r0
 8008be4:	1dfb      	adds	r3, r7, #7
 8008be6:	701a      	strb	r2, [r3, #0]
 8008be8:	1dbb      	adds	r3, r7, #6
 8008bea:	1c0a      	adds	r2, r1, #0
 8008bec:	701a      	strb	r2, [r3, #0]
    SSD1306.CurrentX = x;
 8008bee:	1dfb      	adds	r3, r7, #7
 8008bf0:	781b      	ldrb	r3, [r3, #0]
 8008bf2:	b29a      	uxth	r2, r3
 8008bf4:	4b05      	ldr	r3, [pc, #20]	; (8008c0c <ssd1306_SetCursor+0x30>)
 8008bf6:	801a      	strh	r2, [r3, #0]
    //SSD1306.CurrentX = SSD1306_WIDTH-x;
    SSD1306.CurrentY = y;
 8008bf8:	1dbb      	adds	r3, r7, #6
 8008bfa:	781b      	ldrb	r3, [r3, #0]
 8008bfc:	b29a      	uxth	r2, r3
 8008bfe:	4b03      	ldr	r3, [pc, #12]	; (8008c0c <ssd1306_SetCursor+0x30>)
 8008c00:	805a      	strh	r2, [r3, #2]
    //SSD1306.CurrentY = SSD1306_HEIGHT-y;
}
 8008c02:	46c0      	nop			; (mov r8, r8)
 8008c04:	46bd      	mov	sp, r7
 8008c06:	b002      	add	sp, #8
 8008c08:	bd80      	pop	{r7, pc}
 8008c0a:	46c0      	nop			; (mov r8, r8)
 8008c0c:	200021d0 	.word	0x200021d0

08008c10 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b084      	sub	sp, #16
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	0002      	movs	r2, r0
 8008c18:	1dfb      	adds	r3, r7, #7
 8008c1a:	701a      	strb	r2, [r3, #0]
    const uint8_t kSetContrastControlRegister = 0x81;
 8008c1c:	210f      	movs	r1, #15
 8008c1e:	187b      	adds	r3, r7, r1
 8008c20:	2281      	movs	r2, #129	; 0x81
 8008c22:	701a      	strb	r2, [r3, #0]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8008c24:	187b      	adds	r3, r7, r1
 8008c26:	781b      	ldrb	r3, [r3, #0]
 8008c28:	0018      	movs	r0, r3
 8008c2a:	f7ff fdad 	bl	8008788 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8008c2e:	1dfb      	adds	r3, r7, #7
 8008c30:	781b      	ldrb	r3, [r3, #0]
 8008c32:	0018      	movs	r0, r3
 8008c34:	f7ff fda8 	bl	8008788 <ssd1306_WriteCommand>
}
 8008c38:	46c0      	nop			; (mov r8, r8)
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	b004      	add	sp, #16
 8008c3e:	bd80      	pop	{r7, pc}

08008c40 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b084      	sub	sp, #16
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	0002      	movs	r2, r0
 8008c48:	1dfb      	adds	r3, r7, #7
 8008c4a:	701a      	strb	r2, [r3, #0]
    uint8_t value;
    if (on) {
 8008c4c:	1dfb      	adds	r3, r7, #7
 8008c4e:	781b      	ldrb	r3, [r3, #0]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d007      	beq.n	8008c64 <ssd1306_SetDisplayOn+0x24>
        value = 0xAF;   // Display on
 8008c54:	230f      	movs	r3, #15
 8008c56:	18fb      	adds	r3, r7, r3
 8008c58:	22af      	movs	r2, #175	; 0xaf
 8008c5a:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 1;
 8008c5c:	4b0a      	ldr	r3, [pc, #40]	; (8008c88 <ssd1306_SetDisplayOn+0x48>)
 8008c5e:	2201      	movs	r2, #1
 8008c60:	715a      	strb	r2, [r3, #5]
 8008c62:	e006      	b.n	8008c72 <ssd1306_SetDisplayOn+0x32>
    } else {
        value = 0xAE;   // Display off
 8008c64:	230f      	movs	r3, #15
 8008c66:	18fb      	adds	r3, r7, r3
 8008c68:	22ae      	movs	r2, #174	; 0xae
 8008c6a:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 0;
 8008c6c:	4b06      	ldr	r3, [pc, #24]	; (8008c88 <ssd1306_SetDisplayOn+0x48>)
 8008c6e:	2200      	movs	r2, #0
 8008c70:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8008c72:	230f      	movs	r3, #15
 8008c74:	18fb      	adds	r3, r7, r3
 8008c76:	781b      	ldrb	r3, [r3, #0]
 8008c78:	0018      	movs	r0, r3
 8008c7a:	f7ff fd85 	bl	8008788 <ssd1306_WriteCommand>
}
 8008c7e:	46c0      	nop			; (mov r8, r8)
 8008c80:	46bd      	mov	sp, r7
 8008c82:	b004      	add	sp, #16
 8008c84:	bd80      	pop	{r7, pc}
 8008c86:	46c0      	nop			; (mov r8, r8)
 8008c88:	200021d0 	.word	0x200021d0

08008c8c <__errno>:
 8008c8c:	4b01      	ldr	r3, [pc, #4]	; (8008c94 <__errno+0x8>)
 8008c8e:	6818      	ldr	r0, [r3, #0]
 8008c90:	4770      	bx	lr
 8008c92:	46c0      	nop			; (mov r8, r8)
 8008c94:	20000024 	.word	0x20000024

08008c98 <__libc_init_array>:
 8008c98:	b570      	push	{r4, r5, r6, lr}
 8008c9a:	2600      	movs	r6, #0
 8008c9c:	4d0c      	ldr	r5, [pc, #48]	; (8008cd0 <__libc_init_array+0x38>)
 8008c9e:	4c0d      	ldr	r4, [pc, #52]	; (8008cd4 <__libc_init_array+0x3c>)
 8008ca0:	1b64      	subs	r4, r4, r5
 8008ca2:	10a4      	asrs	r4, r4, #2
 8008ca4:	42a6      	cmp	r6, r4
 8008ca6:	d109      	bne.n	8008cbc <__libc_init_array+0x24>
 8008ca8:	2600      	movs	r6, #0
 8008caa:	f000 fc93 	bl	80095d4 <_init>
 8008cae:	4d0a      	ldr	r5, [pc, #40]	; (8008cd8 <__libc_init_array+0x40>)
 8008cb0:	4c0a      	ldr	r4, [pc, #40]	; (8008cdc <__libc_init_array+0x44>)
 8008cb2:	1b64      	subs	r4, r4, r5
 8008cb4:	10a4      	asrs	r4, r4, #2
 8008cb6:	42a6      	cmp	r6, r4
 8008cb8:	d105      	bne.n	8008cc6 <__libc_init_array+0x2e>
 8008cba:	bd70      	pop	{r4, r5, r6, pc}
 8008cbc:	00b3      	lsls	r3, r6, #2
 8008cbe:	58eb      	ldr	r3, [r5, r3]
 8008cc0:	4798      	blx	r3
 8008cc2:	3601      	adds	r6, #1
 8008cc4:	e7ee      	b.n	8008ca4 <__libc_init_array+0xc>
 8008cc6:	00b3      	lsls	r3, r6, #2
 8008cc8:	58eb      	ldr	r3, [r5, r3]
 8008cca:	4798      	blx	r3
 8008ccc:	3601      	adds	r6, #1
 8008cce:	e7f2      	b.n	8008cb6 <__libc_init_array+0x1e>
 8008cd0:	0800b138 	.word	0x0800b138
 8008cd4:	0800b138 	.word	0x0800b138
 8008cd8:	0800b138 	.word	0x0800b138
 8008cdc:	0800b13c 	.word	0x0800b13c

08008ce0 <memcpy>:
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	b510      	push	{r4, lr}
 8008ce4:	429a      	cmp	r2, r3
 8008ce6:	d100      	bne.n	8008cea <memcpy+0xa>
 8008ce8:	bd10      	pop	{r4, pc}
 8008cea:	5ccc      	ldrb	r4, [r1, r3]
 8008cec:	54c4      	strb	r4, [r0, r3]
 8008cee:	3301      	adds	r3, #1
 8008cf0:	e7f8      	b.n	8008ce4 <memcpy+0x4>

08008cf2 <memmove>:
 8008cf2:	b510      	push	{r4, lr}
 8008cf4:	4288      	cmp	r0, r1
 8008cf6:	d902      	bls.n	8008cfe <memmove+0xc>
 8008cf8:	188b      	adds	r3, r1, r2
 8008cfa:	4298      	cmp	r0, r3
 8008cfc:	d303      	bcc.n	8008d06 <memmove+0x14>
 8008cfe:	2300      	movs	r3, #0
 8008d00:	e007      	b.n	8008d12 <memmove+0x20>
 8008d02:	5c8b      	ldrb	r3, [r1, r2]
 8008d04:	5483      	strb	r3, [r0, r2]
 8008d06:	3a01      	subs	r2, #1
 8008d08:	d2fb      	bcs.n	8008d02 <memmove+0x10>
 8008d0a:	bd10      	pop	{r4, pc}
 8008d0c:	5ccc      	ldrb	r4, [r1, r3]
 8008d0e:	54c4      	strb	r4, [r0, r3]
 8008d10:	3301      	adds	r3, #1
 8008d12:	429a      	cmp	r2, r3
 8008d14:	d1fa      	bne.n	8008d0c <memmove+0x1a>
 8008d16:	e7f8      	b.n	8008d0a <memmove+0x18>

08008d18 <memset>:
 8008d18:	0003      	movs	r3, r0
 8008d1a:	1882      	adds	r2, r0, r2
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	d100      	bne.n	8008d22 <memset+0xa>
 8008d20:	4770      	bx	lr
 8008d22:	7019      	strb	r1, [r3, #0]
 8008d24:	3301      	adds	r3, #1
 8008d26:	e7f9      	b.n	8008d1c <memset+0x4>

08008d28 <sniprintf>:
 8008d28:	b40c      	push	{r2, r3}
 8008d2a:	b530      	push	{r4, r5, lr}
 8008d2c:	4b17      	ldr	r3, [pc, #92]	; (8008d8c <sniprintf+0x64>)
 8008d2e:	000c      	movs	r4, r1
 8008d30:	681d      	ldr	r5, [r3, #0]
 8008d32:	b09d      	sub	sp, #116	; 0x74
 8008d34:	2900      	cmp	r1, #0
 8008d36:	da08      	bge.n	8008d4a <sniprintf+0x22>
 8008d38:	238b      	movs	r3, #139	; 0x8b
 8008d3a:	2001      	movs	r0, #1
 8008d3c:	602b      	str	r3, [r5, #0]
 8008d3e:	4240      	negs	r0, r0
 8008d40:	b01d      	add	sp, #116	; 0x74
 8008d42:	bc30      	pop	{r4, r5}
 8008d44:	bc08      	pop	{r3}
 8008d46:	b002      	add	sp, #8
 8008d48:	4718      	bx	r3
 8008d4a:	2382      	movs	r3, #130	; 0x82
 8008d4c:	466a      	mov	r2, sp
 8008d4e:	009b      	lsls	r3, r3, #2
 8008d50:	8293      	strh	r3, [r2, #20]
 8008d52:	2300      	movs	r3, #0
 8008d54:	9002      	str	r0, [sp, #8]
 8008d56:	9006      	str	r0, [sp, #24]
 8008d58:	4299      	cmp	r1, r3
 8008d5a:	d000      	beq.n	8008d5e <sniprintf+0x36>
 8008d5c:	1e4b      	subs	r3, r1, #1
 8008d5e:	9304      	str	r3, [sp, #16]
 8008d60:	9307      	str	r3, [sp, #28]
 8008d62:	2301      	movs	r3, #1
 8008d64:	466a      	mov	r2, sp
 8008d66:	425b      	negs	r3, r3
 8008d68:	82d3      	strh	r3, [r2, #22]
 8008d6a:	0028      	movs	r0, r5
 8008d6c:	ab21      	add	r3, sp, #132	; 0x84
 8008d6e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008d70:	a902      	add	r1, sp, #8
 8008d72:	9301      	str	r3, [sp, #4]
 8008d74:	f000 f8a6 	bl	8008ec4 <_svfiprintf_r>
 8008d78:	1c43      	adds	r3, r0, #1
 8008d7a:	da01      	bge.n	8008d80 <sniprintf+0x58>
 8008d7c:	238b      	movs	r3, #139	; 0x8b
 8008d7e:	602b      	str	r3, [r5, #0]
 8008d80:	2c00      	cmp	r4, #0
 8008d82:	d0dd      	beq.n	8008d40 <sniprintf+0x18>
 8008d84:	2300      	movs	r3, #0
 8008d86:	9a02      	ldr	r2, [sp, #8]
 8008d88:	7013      	strb	r3, [r2, #0]
 8008d8a:	e7d9      	b.n	8008d40 <sniprintf+0x18>
 8008d8c:	20000024 	.word	0x20000024

08008d90 <_vsniprintf_r>:
 8008d90:	b530      	push	{r4, r5, lr}
 8008d92:	0014      	movs	r4, r2
 8008d94:	0005      	movs	r5, r0
 8008d96:	001a      	movs	r2, r3
 8008d98:	b09b      	sub	sp, #108	; 0x6c
 8008d9a:	2c00      	cmp	r4, #0
 8008d9c:	da05      	bge.n	8008daa <_vsniprintf_r+0x1a>
 8008d9e:	238b      	movs	r3, #139	; 0x8b
 8008da0:	6003      	str	r3, [r0, #0]
 8008da2:	2001      	movs	r0, #1
 8008da4:	4240      	negs	r0, r0
 8008da6:	b01b      	add	sp, #108	; 0x6c
 8008da8:	bd30      	pop	{r4, r5, pc}
 8008daa:	2382      	movs	r3, #130	; 0x82
 8008dac:	4668      	mov	r0, sp
 8008dae:	009b      	lsls	r3, r3, #2
 8008db0:	8183      	strh	r3, [r0, #12]
 8008db2:	2300      	movs	r3, #0
 8008db4:	9100      	str	r1, [sp, #0]
 8008db6:	9104      	str	r1, [sp, #16]
 8008db8:	429c      	cmp	r4, r3
 8008dba:	d000      	beq.n	8008dbe <_vsniprintf_r+0x2e>
 8008dbc:	1e63      	subs	r3, r4, #1
 8008dbe:	9302      	str	r3, [sp, #8]
 8008dc0:	9305      	str	r3, [sp, #20]
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	4669      	mov	r1, sp
 8008dc6:	425b      	negs	r3, r3
 8008dc8:	81cb      	strh	r3, [r1, #14]
 8008dca:	0028      	movs	r0, r5
 8008dcc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008dce:	f000 f879 	bl	8008ec4 <_svfiprintf_r>
 8008dd2:	1c43      	adds	r3, r0, #1
 8008dd4:	da01      	bge.n	8008dda <_vsniprintf_r+0x4a>
 8008dd6:	238b      	movs	r3, #139	; 0x8b
 8008dd8:	602b      	str	r3, [r5, #0]
 8008dda:	2c00      	cmp	r4, #0
 8008ddc:	d0e3      	beq.n	8008da6 <_vsniprintf_r+0x16>
 8008dde:	2300      	movs	r3, #0
 8008de0:	9a00      	ldr	r2, [sp, #0]
 8008de2:	7013      	strb	r3, [r2, #0]
 8008de4:	e7df      	b.n	8008da6 <_vsniprintf_r+0x16>
	...

08008de8 <vsniprintf>:
 8008de8:	b507      	push	{r0, r1, r2, lr}
 8008dea:	9300      	str	r3, [sp, #0]
 8008dec:	0013      	movs	r3, r2
 8008dee:	000a      	movs	r2, r1
 8008df0:	0001      	movs	r1, r0
 8008df2:	4802      	ldr	r0, [pc, #8]	; (8008dfc <vsniprintf+0x14>)
 8008df4:	6800      	ldr	r0, [r0, #0]
 8008df6:	f7ff ffcb 	bl	8008d90 <_vsniprintf_r>
 8008dfa:	bd0e      	pop	{r1, r2, r3, pc}
 8008dfc:	20000024 	.word	0x20000024

08008e00 <__ssputs_r>:
 8008e00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e02:	688e      	ldr	r6, [r1, #8]
 8008e04:	b085      	sub	sp, #20
 8008e06:	0007      	movs	r7, r0
 8008e08:	000c      	movs	r4, r1
 8008e0a:	9203      	str	r2, [sp, #12]
 8008e0c:	9301      	str	r3, [sp, #4]
 8008e0e:	429e      	cmp	r6, r3
 8008e10:	d83c      	bhi.n	8008e8c <__ssputs_r+0x8c>
 8008e12:	2390      	movs	r3, #144	; 0x90
 8008e14:	898a      	ldrh	r2, [r1, #12]
 8008e16:	00db      	lsls	r3, r3, #3
 8008e18:	421a      	tst	r2, r3
 8008e1a:	d034      	beq.n	8008e86 <__ssputs_r+0x86>
 8008e1c:	2503      	movs	r5, #3
 8008e1e:	6909      	ldr	r1, [r1, #16]
 8008e20:	6823      	ldr	r3, [r4, #0]
 8008e22:	1a5b      	subs	r3, r3, r1
 8008e24:	9302      	str	r3, [sp, #8]
 8008e26:	6963      	ldr	r3, [r4, #20]
 8008e28:	9802      	ldr	r0, [sp, #8]
 8008e2a:	435d      	muls	r5, r3
 8008e2c:	0feb      	lsrs	r3, r5, #31
 8008e2e:	195d      	adds	r5, r3, r5
 8008e30:	9b01      	ldr	r3, [sp, #4]
 8008e32:	106d      	asrs	r5, r5, #1
 8008e34:	3301      	adds	r3, #1
 8008e36:	181b      	adds	r3, r3, r0
 8008e38:	42ab      	cmp	r3, r5
 8008e3a:	d900      	bls.n	8008e3e <__ssputs_r+0x3e>
 8008e3c:	001d      	movs	r5, r3
 8008e3e:	0553      	lsls	r3, r2, #21
 8008e40:	d532      	bpl.n	8008ea8 <__ssputs_r+0xa8>
 8008e42:	0029      	movs	r1, r5
 8008e44:	0038      	movs	r0, r7
 8008e46:	f000 fb15 	bl	8009474 <_malloc_r>
 8008e4a:	1e06      	subs	r6, r0, #0
 8008e4c:	d109      	bne.n	8008e62 <__ssputs_r+0x62>
 8008e4e:	230c      	movs	r3, #12
 8008e50:	603b      	str	r3, [r7, #0]
 8008e52:	2340      	movs	r3, #64	; 0x40
 8008e54:	2001      	movs	r0, #1
 8008e56:	89a2      	ldrh	r2, [r4, #12]
 8008e58:	4240      	negs	r0, r0
 8008e5a:	4313      	orrs	r3, r2
 8008e5c:	81a3      	strh	r3, [r4, #12]
 8008e5e:	b005      	add	sp, #20
 8008e60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e62:	9a02      	ldr	r2, [sp, #8]
 8008e64:	6921      	ldr	r1, [r4, #16]
 8008e66:	f7ff ff3b 	bl	8008ce0 <memcpy>
 8008e6a:	89a3      	ldrh	r3, [r4, #12]
 8008e6c:	4a14      	ldr	r2, [pc, #80]	; (8008ec0 <__ssputs_r+0xc0>)
 8008e6e:	401a      	ands	r2, r3
 8008e70:	2380      	movs	r3, #128	; 0x80
 8008e72:	4313      	orrs	r3, r2
 8008e74:	81a3      	strh	r3, [r4, #12]
 8008e76:	9b02      	ldr	r3, [sp, #8]
 8008e78:	6126      	str	r6, [r4, #16]
 8008e7a:	18f6      	adds	r6, r6, r3
 8008e7c:	6026      	str	r6, [r4, #0]
 8008e7e:	6165      	str	r5, [r4, #20]
 8008e80:	9e01      	ldr	r6, [sp, #4]
 8008e82:	1aed      	subs	r5, r5, r3
 8008e84:	60a5      	str	r5, [r4, #8]
 8008e86:	9b01      	ldr	r3, [sp, #4]
 8008e88:	429e      	cmp	r6, r3
 8008e8a:	d900      	bls.n	8008e8e <__ssputs_r+0x8e>
 8008e8c:	9e01      	ldr	r6, [sp, #4]
 8008e8e:	0032      	movs	r2, r6
 8008e90:	9903      	ldr	r1, [sp, #12]
 8008e92:	6820      	ldr	r0, [r4, #0]
 8008e94:	f7ff ff2d 	bl	8008cf2 <memmove>
 8008e98:	68a3      	ldr	r3, [r4, #8]
 8008e9a:	2000      	movs	r0, #0
 8008e9c:	1b9b      	subs	r3, r3, r6
 8008e9e:	60a3      	str	r3, [r4, #8]
 8008ea0:	6823      	ldr	r3, [r4, #0]
 8008ea2:	199e      	adds	r6, r3, r6
 8008ea4:	6026      	str	r6, [r4, #0]
 8008ea6:	e7da      	b.n	8008e5e <__ssputs_r+0x5e>
 8008ea8:	002a      	movs	r2, r5
 8008eaa:	0038      	movs	r0, r7
 8008eac:	f000 fb40 	bl	8009530 <_realloc_r>
 8008eb0:	1e06      	subs	r6, r0, #0
 8008eb2:	d1e0      	bne.n	8008e76 <__ssputs_r+0x76>
 8008eb4:	0038      	movs	r0, r7
 8008eb6:	6921      	ldr	r1, [r4, #16]
 8008eb8:	f000 fa92 	bl	80093e0 <_free_r>
 8008ebc:	e7c7      	b.n	8008e4e <__ssputs_r+0x4e>
 8008ebe:	46c0      	nop			; (mov r8, r8)
 8008ec0:	fffffb7f 	.word	0xfffffb7f

08008ec4 <_svfiprintf_r>:
 8008ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ec6:	b0a1      	sub	sp, #132	; 0x84
 8008ec8:	9003      	str	r0, [sp, #12]
 8008eca:	001d      	movs	r5, r3
 8008ecc:	898b      	ldrh	r3, [r1, #12]
 8008ece:	000f      	movs	r7, r1
 8008ed0:	0016      	movs	r6, r2
 8008ed2:	061b      	lsls	r3, r3, #24
 8008ed4:	d511      	bpl.n	8008efa <_svfiprintf_r+0x36>
 8008ed6:	690b      	ldr	r3, [r1, #16]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d10e      	bne.n	8008efa <_svfiprintf_r+0x36>
 8008edc:	2140      	movs	r1, #64	; 0x40
 8008ede:	f000 fac9 	bl	8009474 <_malloc_r>
 8008ee2:	6038      	str	r0, [r7, #0]
 8008ee4:	6138      	str	r0, [r7, #16]
 8008ee6:	2800      	cmp	r0, #0
 8008ee8:	d105      	bne.n	8008ef6 <_svfiprintf_r+0x32>
 8008eea:	230c      	movs	r3, #12
 8008eec:	9a03      	ldr	r2, [sp, #12]
 8008eee:	3801      	subs	r0, #1
 8008ef0:	6013      	str	r3, [r2, #0]
 8008ef2:	b021      	add	sp, #132	; 0x84
 8008ef4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ef6:	2340      	movs	r3, #64	; 0x40
 8008ef8:	617b      	str	r3, [r7, #20]
 8008efa:	2300      	movs	r3, #0
 8008efc:	ac08      	add	r4, sp, #32
 8008efe:	6163      	str	r3, [r4, #20]
 8008f00:	3320      	adds	r3, #32
 8008f02:	7663      	strb	r3, [r4, #25]
 8008f04:	3310      	adds	r3, #16
 8008f06:	76a3      	strb	r3, [r4, #26]
 8008f08:	9507      	str	r5, [sp, #28]
 8008f0a:	0035      	movs	r5, r6
 8008f0c:	782b      	ldrb	r3, [r5, #0]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d001      	beq.n	8008f16 <_svfiprintf_r+0x52>
 8008f12:	2b25      	cmp	r3, #37	; 0x25
 8008f14:	d147      	bne.n	8008fa6 <_svfiprintf_r+0xe2>
 8008f16:	1bab      	subs	r3, r5, r6
 8008f18:	9305      	str	r3, [sp, #20]
 8008f1a:	42b5      	cmp	r5, r6
 8008f1c:	d00c      	beq.n	8008f38 <_svfiprintf_r+0x74>
 8008f1e:	0032      	movs	r2, r6
 8008f20:	0039      	movs	r1, r7
 8008f22:	9803      	ldr	r0, [sp, #12]
 8008f24:	f7ff ff6c 	bl	8008e00 <__ssputs_r>
 8008f28:	1c43      	adds	r3, r0, #1
 8008f2a:	d100      	bne.n	8008f2e <_svfiprintf_r+0x6a>
 8008f2c:	e0ae      	b.n	800908c <_svfiprintf_r+0x1c8>
 8008f2e:	6962      	ldr	r2, [r4, #20]
 8008f30:	9b05      	ldr	r3, [sp, #20]
 8008f32:	4694      	mov	ip, r2
 8008f34:	4463      	add	r3, ip
 8008f36:	6163      	str	r3, [r4, #20]
 8008f38:	782b      	ldrb	r3, [r5, #0]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d100      	bne.n	8008f40 <_svfiprintf_r+0x7c>
 8008f3e:	e0a5      	b.n	800908c <_svfiprintf_r+0x1c8>
 8008f40:	2201      	movs	r2, #1
 8008f42:	2300      	movs	r3, #0
 8008f44:	4252      	negs	r2, r2
 8008f46:	6062      	str	r2, [r4, #4]
 8008f48:	a904      	add	r1, sp, #16
 8008f4a:	3254      	adds	r2, #84	; 0x54
 8008f4c:	1852      	adds	r2, r2, r1
 8008f4e:	1c6e      	adds	r6, r5, #1
 8008f50:	6023      	str	r3, [r4, #0]
 8008f52:	60e3      	str	r3, [r4, #12]
 8008f54:	60a3      	str	r3, [r4, #8]
 8008f56:	7013      	strb	r3, [r2, #0]
 8008f58:	65a3      	str	r3, [r4, #88]	; 0x58
 8008f5a:	2205      	movs	r2, #5
 8008f5c:	7831      	ldrb	r1, [r6, #0]
 8008f5e:	4854      	ldr	r0, [pc, #336]	; (80090b0 <_svfiprintf_r+0x1ec>)
 8008f60:	f000 fa32 	bl	80093c8 <memchr>
 8008f64:	1c75      	adds	r5, r6, #1
 8008f66:	2800      	cmp	r0, #0
 8008f68:	d11f      	bne.n	8008faa <_svfiprintf_r+0xe6>
 8008f6a:	6822      	ldr	r2, [r4, #0]
 8008f6c:	06d3      	lsls	r3, r2, #27
 8008f6e:	d504      	bpl.n	8008f7a <_svfiprintf_r+0xb6>
 8008f70:	2353      	movs	r3, #83	; 0x53
 8008f72:	a904      	add	r1, sp, #16
 8008f74:	185b      	adds	r3, r3, r1
 8008f76:	2120      	movs	r1, #32
 8008f78:	7019      	strb	r1, [r3, #0]
 8008f7a:	0713      	lsls	r3, r2, #28
 8008f7c:	d504      	bpl.n	8008f88 <_svfiprintf_r+0xc4>
 8008f7e:	2353      	movs	r3, #83	; 0x53
 8008f80:	a904      	add	r1, sp, #16
 8008f82:	185b      	adds	r3, r3, r1
 8008f84:	212b      	movs	r1, #43	; 0x2b
 8008f86:	7019      	strb	r1, [r3, #0]
 8008f88:	7833      	ldrb	r3, [r6, #0]
 8008f8a:	2b2a      	cmp	r3, #42	; 0x2a
 8008f8c:	d016      	beq.n	8008fbc <_svfiprintf_r+0xf8>
 8008f8e:	0035      	movs	r5, r6
 8008f90:	2100      	movs	r1, #0
 8008f92:	200a      	movs	r0, #10
 8008f94:	68e3      	ldr	r3, [r4, #12]
 8008f96:	782a      	ldrb	r2, [r5, #0]
 8008f98:	1c6e      	adds	r6, r5, #1
 8008f9a:	3a30      	subs	r2, #48	; 0x30
 8008f9c:	2a09      	cmp	r2, #9
 8008f9e:	d94e      	bls.n	800903e <_svfiprintf_r+0x17a>
 8008fa0:	2900      	cmp	r1, #0
 8008fa2:	d111      	bne.n	8008fc8 <_svfiprintf_r+0x104>
 8008fa4:	e017      	b.n	8008fd6 <_svfiprintf_r+0x112>
 8008fa6:	3501      	adds	r5, #1
 8008fa8:	e7b0      	b.n	8008f0c <_svfiprintf_r+0x48>
 8008faa:	4b41      	ldr	r3, [pc, #260]	; (80090b0 <_svfiprintf_r+0x1ec>)
 8008fac:	6822      	ldr	r2, [r4, #0]
 8008fae:	1ac0      	subs	r0, r0, r3
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	4083      	lsls	r3, r0
 8008fb4:	4313      	orrs	r3, r2
 8008fb6:	002e      	movs	r6, r5
 8008fb8:	6023      	str	r3, [r4, #0]
 8008fba:	e7ce      	b.n	8008f5a <_svfiprintf_r+0x96>
 8008fbc:	9b07      	ldr	r3, [sp, #28]
 8008fbe:	1d19      	adds	r1, r3, #4
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	9107      	str	r1, [sp, #28]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	db01      	blt.n	8008fcc <_svfiprintf_r+0x108>
 8008fc8:	930b      	str	r3, [sp, #44]	; 0x2c
 8008fca:	e004      	b.n	8008fd6 <_svfiprintf_r+0x112>
 8008fcc:	425b      	negs	r3, r3
 8008fce:	60e3      	str	r3, [r4, #12]
 8008fd0:	2302      	movs	r3, #2
 8008fd2:	4313      	orrs	r3, r2
 8008fd4:	6023      	str	r3, [r4, #0]
 8008fd6:	782b      	ldrb	r3, [r5, #0]
 8008fd8:	2b2e      	cmp	r3, #46	; 0x2e
 8008fda:	d10a      	bne.n	8008ff2 <_svfiprintf_r+0x12e>
 8008fdc:	786b      	ldrb	r3, [r5, #1]
 8008fde:	2b2a      	cmp	r3, #42	; 0x2a
 8008fe0:	d135      	bne.n	800904e <_svfiprintf_r+0x18a>
 8008fe2:	9b07      	ldr	r3, [sp, #28]
 8008fe4:	3502      	adds	r5, #2
 8008fe6:	1d1a      	adds	r2, r3, #4
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	9207      	str	r2, [sp, #28]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	db2b      	blt.n	8009048 <_svfiprintf_r+0x184>
 8008ff0:	9309      	str	r3, [sp, #36]	; 0x24
 8008ff2:	4e30      	ldr	r6, [pc, #192]	; (80090b4 <_svfiprintf_r+0x1f0>)
 8008ff4:	2203      	movs	r2, #3
 8008ff6:	0030      	movs	r0, r6
 8008ff8:	7829      	ldrb	r1, [r5, #0]
 8008ffa:	f000 f9e5 	bl	80093c8 <memchr>
 8008ffe:	2800      	cmp	r0, #0
 8009000:	d006      	beq.n	8009010 <_svfiprintf_r+0x14c>
 8009002:	2340      	movs	r3, #64	; 0x40
 8009004:	1b80      	subs	r0, r0, r6
 8009006:	4083      	lsls	r3, r0
 8009008:	6822      	ldr	r2, [r4, #0]
 800900a:	3501      	adds	r5, #1
 800900c:	4313      	orrs	r3, r2
 800900e:	6023      	str	r3, [r4, #0]
 8009010:	7829      	ldrb	r1, [r5, #0]
 8009012:	2206      	movs	r2, #6
 8009014:	4828      	ldr	r0, [pc, #160]	; (80090b8 <_svfiprintf_r+0x1f4>)
 8009016:	1c6e      	adds	r6, r5, #1
 8009018:	7621      	strb	r1, [r4, #24]
 800901a:	f000 f9d5 	bl	80093c8 <memchr>
 800901e:	2800      	cmp	r0, #0
 8009020:	d03c      	beq.n	800909c <_svfiprintf_r+0x1d8>
 8009022:	4b26      	ldr	r3, [pc, #152]	; (80090bc <_svfiprintf_r+0x1f8>)
 8009024:	2b00      	cmp	r3, #0
 8009026:	d125      	bne.n	8009074 <_svfiprintf_r+0x1b0>
 8009028:	2207      	movs	r2, #7
 800902a:	9b07      	ldr	r3, [sp, #28]
 800902c:	3307      	adds	r3, #7
 800902e:	4393      	bics	r3, r2
 8009030:	3308      	adds	r3, #8
 8009032:	9307      	str	r3, [sp, #28]
 8009034:	6963      	ldr	r3, [r4, #20]
 8009036:	9a04      	ldr	r2, [sp, #16]
 8009038:	189b      	adds	r3, r3, r2
 800903a:	6163      	str	r3, [r4, #20]
 800903c:	e765      	b.n	8008f0a <_svfiprintf_r+0x46>
 800903e:	4343      	muls	r3, r0
 8009040:	0035      	movs	r5, r6
 8009042:	2101      	movs	r1, #1
 8009044:	189b      	adds	r3, r3, r2
 8009046:	e7a6      	b.n	8008f96 <_svfiprintf_r+0xd2>
 8009048:	2301      	movs	r3, #1
 800904a:	425b      	negs	r3, r3
 800904c:	e7d0      	b.n	8008ff0 <_svfiprintf_r+0x12c>
 800904e:	2300      	movs	r3, #0
 8009050:	200a      	movs	r0, #10
 8009052:	001a      	movs	r2, r3
 8009054:	3501      	adds	r5, #1
 8009056:	6063      	str	r3, [r4, #4]
 8009058:	7829      	ldrb	r1, [r5, #0]
 800905a:	1c6e      	adds	r6, r5, #1
 800905c:	3930      	subs	r1, #48	; 0x30
 800905e:	2909      	cmp	r1, #9
 8009060:	d903      	bls.n	800906a <_svfiprintf_r+0x1a6>
 8009062:	2b00      	cmp	r3, #0
 8009064:	d0c5      	beq.n	8008ff2 <_svfiprintf_r+0x12e>
 8009066:	9209      	str	r2, [sp, #36]	; 0x24
 8009068:	e7c3      	b.n	8008ff2 <_svfiprintf_r+0x12e>
 800906a:	4342      	muls	r2, r0
 800906c:	0035      	movs	r5, r6
 800906e:	2301      	movs	r3, #1
 8009070:	1852      	adds	r2, r2, r1
 8009072:	e7f1      	b.n	8009058 <_svfiprintf_r+0x194>
 8009074:	ab07      	add	r3, sp, #28
 8009076:	9300      	str	r3, [sp, #0]
 8009078:	003a      	movs	r2, r7
 800907a:	0021      	movs	r1, r4
 800907c:	4b10      	ldr	r3, [pc, #64]	; (80090c0 <_svfiprintf_r+0x1fc>)
 800907e:	9803      	ldr	r0, [sp, #12]
 8009080:	e000      	b.n	8009084 <_svfiprintf_r+0x1c0>
 8009082:	bf00      	nop
 8009084:	9004      	str	r0, [sp, #16]
 8009086:	9b04      	ldr	r3, [sp, #16]
 8009088:	3301      	adds	r3, #1
 800908a:	d1d3      	bne.n	8009034 <_svfiprintf_r+0x170>
 800908c:	89bb      	ldrh	r3, [r7, #12]
 800908e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009090:	065b      	lsls	r3, r3, #25
 8009092:	d400      	bmi.n	8009096 <_svfiprintf_r+0x1d2>
 8009094:	e72d      	b.n	8008ef2 <_svfiprintf_r+0x2e>
 8009096:	2001      	movs	r0, #1
 8009098:	4240      	negs	r0, r0
 800909a:	e72a      	b.n	8008ef2 <_svfiprintf_r+0x2e>
 800909c:	ab07      	add	r3, sp, #28
 800909e:	9300      	str	r3, [sp, #0]
 80090a0:	003a      	movs	r2, r7
 80090a2:	0021      	movs	r1, r4
 80090a4:	4b06      	ldr	r3, [pc, #24]	; (80090c0 <_svfiprintf_r+0x1fc>)
 80090a6:	9803      	ldr	r0, [sp, #12]
 80090a8:	f000 f87c 	bl	80091a4 <_printf_i>
 80090ac:	e7ea      	b.n	8009084 <_svfiprintf_r+0x1c0>
 80090ae:	46c0      	nop			; (mov r8, r8)
 80090b0:	0800b104 	.word	0x0800b104
 80090b4:	0800b10a 	.word	0x0800b10a
 80090b8:	0800b10e 	.word	0x0800b10e
 80090bc:	00000000 	.word	0x00000000
 80090c0:	08008e01 	.word	0x08008e01

080090c4 <_printf_common>:
 80090c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80090c6:	0015      	movs	r5, r2
 80090c8:	9301      	str	r3, [sp, #4]
 80090ca:	688a      	ldr	r2, [r1, #8]
 80090cc:	690b      	ldr	r3, [r1, #16]
 80090ce:	000c      	movs	r4, r1
 80090d0:	9000      	str	r0, [sp, #0]
 80090d2:	4293      	cmp	r3, r2
 80090d4:	da00      	bge.n	80090d8 <_printf_common+0x14>
 80090d6:	0013      	movs	r3, r2
 80090d8:	0022      	movs	r2, r4
 80090da:	602b      	str	r3, [r5, #0]
 80090dc:	3243      	adds	r2, #67	; 0x43
 80090de:	7812      	ldrb	r2, [r2, #0]
 80090e0:	2a00      	cmp	r2, #0
 80090e2:	d001      	beq.n	80090e8 <_printf_common+0x24>
 80090e4:	3301      	adds	r3, #1
 80090e6:	602b      	str	r3, [r5, #0]
 80090e8:	6823      	ldr	r3, [r4, #0]
 80090ea:	069b      	lsls	r3, r3, #26
 80090ec:	d502      	bpl.n	80090f4 <_printf_common+0x30>
 80090ee:	682b      	ldr	r3, [r5, #0]
 80090f0:	3302      	adds	r3, #2
 80090f2:	602b      	str	r3, [r5, #0]
 80090f4:	6822      	ldr	r2, [r4, #0]
 80090f6:	2306      	movs	r3, #6
 80090f8:	0017      	movs	r7, r2
 80090fa:	401f      	ands	r7, r3
 80090fc:	421a      	tst	r2, r3
 80090fe:	d027      	beq.n	8009150 <_printf_common+0x8c>
 8009100:	0023      	movs	r3, r4
 8009102:	3343      	adds	r3, #67	; 0x43
 8009104:	781b      	ldrb	r3, [r3, #0]
 8009106:	1e5a      	subs	r2, r3, #1
 8009108:	4193      	sbcs	r3, r2
 800910a:	6822      	ldr	r2, [r4, #0]
 800910c:	0692      	lsls	r2, r2, #26
 800910e:	d430      	bmi.n	8009172 <_printf_common+0xae>
 8009110:	0022      	movs	r2, r4
 8009112:	9901      	ldr	r1, [sp, #4]
 8009114:	9800      	ldr	r0, [sp, #0]
 8009116:	9e08      	ldr	r6, [sp, #32]
 8009118:	3243      	adds	r2, #67	; 0x43
 800911a:	47b0      	blx	r6
 800911c:	1c43      	adds	r3, r0, #1
 800911e:	d025      	beq.n	800916c <_printf_common+0xa8>
 8009120:	2306      	movs	r3, #6
 8009122:	6820      	ldr	r0, [r4, #0]
 8009124:	682a      	ldr	r2, [r5, #0]
 8009126:	68e1      	ldr	r1, [r4, #12]
 8009128:	2500      	movs	r5, #0
 800912a:	4003      	ands	r3, r0
 800912c:	2b04      	cmp	r3, #4
 800912e:	d103      	bne.n	8009138 <_printf_common+0x74>
 8009130:	1a8d      	subs	r5, r1, r2
 8009132:	43eb      	mvns	r3, r5
 8009134:	17db      	asrs	r3, r3, #31
 8009136:	401d      	ands	r5, r3
 8009138:	68a3      	ldr	r3, [r4, #8]
 800913a:	6922      	ldr	r2, [r4, #16]
 800913c:	4293      	cmp	r3, r2
 800913e:	dd01      	ble.n	8009144 <_printf_common+0x80>
 8009140:	1a9b      	subs	r3, r3, r2
 8009142:	18ed      	adds	r5, r5, r3
 8009144:	2700      	movs	r7, #0
 8009146:	42bd      	cmp	r5, r7
 8009148:	d120      	bne.n	800918c <_printf_common+0xc8>
 800914a:	2000      	movs	r0, #0
 800914c:	e010      	b.n	8009170 <_printf_common+0xac>
 800914e:	3701      	adds	r7, #1
 8009150:	68e3      	ldr	r3, [r4, #12]
 8009152:	682a      	ldr	r2, [r5, #0]
 8009154:	1a9b      	subs	r3, r3, r2
 8009156:	42bb      	cmp	r3, r7
 8009158:	ddd2      	ble.n	8009100 <_printf_common+0x3c>
 800915a:	0022      	movs	r2, r4
 800915c:	2301      	movs	r3, #1
 800915e:	9901      	ldr	r1, [sp, #4]
 8009160:	9800      	ldr	r0, [sp, #0]
 8009162:	9e08      	ldr	r6, [sp, #32]
 8009164:	3219      	adds	r2, #25
 8009166:	47b0      	blx	r6
 8009168:	1c43      	adds	r3, r0, #1
 800916a:	d1f0      	bne.n	800914e <_printf_common+0x8a>
 800916c:	2001      	movs	r0, #1
 800916e:	4240      	negs	r0, r0
 8009170:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009172:	2030      	movs	r0, #48	; 0x30
 8009174:	18e1      	adds	r1, r4, r3
 8009176:	3143      	adds	r1, #67	; 0x43
 8009178:	7008      	strb	r0, [r1, #0]
 800917a:	0021      	movs	r1, r4
 800917c:	1c5a      	adds	r2, r3, #1
 800917e:	3145      	adds	r1, #69	; 0x45
 8009180:	7809      	ldrb	r1, [r1, #0]
 8009182:	18a2      	adds	r2, r4, r2
 8009184:	3243      	adds	r2, #67	; 0x43
 8009186:	3302      	adds	r3, #2
 8009188:	7011      	strb	r1, [r2, #0]
 800918a:	e7c1      	b.n	8009110 <_printf_common+0x4c>
 800918c:	0022      	movs	r2, r4
 800918e:	2301      	movs	r3, #1
 8009190:	9901      	ldr	r1, [sp, #4]
 8009192:	9800      	ldr	r0, [sp, #0]
 8009194:	9e08      	ldr	r6, [sp, #32]
 8009196:	321a      	adds	r2, #26
 8009198:	47b0      	blx	r6
 800919a:	1c43      	adds	r3, r0, #1
 800919c:	d0e6      	beq.n	800916c <_printf_common+0xa8>
 800919e:	3701      	adds	r7, #1
 80091a0:	e7d1      	b.n	8009146 <_printf_common+0x82>
	...

080091a4 <_printf_i>:
 80091a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80091a6:	b08b      	sub	sp, #44	; 0x2c
 80091a8:	9206      	str	r2, [sp, #24]
 80091aa:	000a      	movs	r2, r1
 80091ac:	3243      	adds	r2, #67	; 0x43
 80091ae:	9307      	str	r3, [sp, #28]
 80091b0:	9005      	str	r0, [sp, #20]
 80091b2:	9204      	str	r2, [sp, #16]
 80091b4:	7e0a      	ldrb	r2, [r1, #24]
 80091b6:	000c      	movs	r4, r1
 80091b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80091ba:	2a78      	cmp	r2, #120	; 0x78
 80091bc:	d806      	bhi.n	80091cc <_printf_i+0x28>
 80091be:	2a62      	cmp	r2, #98	; 0x62
 80091c0:	d808      	bhi.n	80091d4 <_printf_i+0x30>
 80091c2:	2a00      	cmp	r2, #0
 80091c4:	d100      	bne.n	80091c8 <_printf_i+0x24>
 80091c6:	e0c0      	b.n	800934a <_printf_i+0x1a6>
 80091c8:	2a58      	cmp	r2, #88	; 0x58
 80091ca:	d052      	beq.n	8009272 <_printf_i+0xce>
 80091cc:	0026      	movs	r6, r4
 80091ce:	3642      	adds	r6, #66	; 0x42
 80091d0:	7032      	strb	r2, [r6, #0]
 80091d2:	e022      	b.n	800921a <_printf_i+0x76>
 80091d4:	0010      	movs	r0, r2
 80091d6:	3863      	subs	r0, #99	; 0x63
 80091d8:	2815      	cmp	r0, #21
 80091da:	d8f7      	bhi.n	80091cc <_printf_i+0x28>
 80091dc:	f7f6 ff94 	bl	8000108 <__gnu_thumb1_case_shi>
 80091e0:	001f0016 	.word	0x001f0016
 80091e4:	fff6fff6 	.word	0xfff6fff6
 80091e8:	fff6fff6 	.word	0xfff6fff6
 80091ec:	fff6001f 	.word	0xfff6001f
 80091f0:	fff6fff6 	.word	0xfff6fff6
 80091f4:	00a8fff6 	.word	0x00a8fff6
 80091f8:	009a0036 	.word	0x009a0036
 80091fc:	fff6fff6 	.word	0xfff6fff6
 8009200:	fff600b9 	.word	0xfff600b9
 8009204:	fff60036 	.word	0xfff60036
 8009208:	009efff6 	.word	0x009efff6
 800920c:	0026      	movs	r6, r4
 800920e:	681a      	ldr	r2, [r3, #0]
 8009210:	3642      	adds	r6, #66	; 0x42
 8009212:	1d11      	adds	r1, r2, #4
 8009214:	6019      	str	r1, [r3, #0]
 8009216:	6813      	ldr	r3, [r2, #0]
 8009218:	7033      	strb	r3, [r6, #0]
 800921a:	2301      	movs	r3, #1
 800921c:	e0a7      	b.n	800936e <_printf_i+0x1ca>
 800921e:	6808      	ldr	r0, [r1, #0]
 8009220:	6819      	ldr	r1, [r3, #0]
 8009222:	1d0a      	adds	r2, r1, #4
 8009224:	0605      	lsls	r5, r0, #24
 8009226:	d50b      	bpl.n	8009240 <_printf_i+0x9c>
 8009228:	680d      	ldr	r5, [r1, #0]
 800922a:	601a      	str	r2, [r3, #0]
 800922c:	2d00      	cmp	r5, #0
 800922e:	da03      	bge.n	8009238 <_printf_i+0x94>
 8009230:	232d      	movs	r3, #45	; 0x2d
 8009232:	9a04      	ldr	r2, [sp, #16]
 8009234:	426d      	negs	r5, r5
 8009236:	7013      	strb	r3, [r2, #0]
 8009238:	4b61      	ldr	r3, [pc, #388]	; (80093c0 <_printf_i+0x21c>)
 800923a:	270a      	movs	r7, #10
 800923c:	9303      	str	r3, [sp, #12]
 800923e:	e032      	b.n	80092a6 <_printf_i+0x102>
 8009240:	680d      	ldr	r5, [r1, #0]
 8009242:	601a      	str	r2, [r3, #0]
 8009244:	0641      	lsls	r1, r0, #25
 8009246:	d5f1      	bpl.n	800922c <_printf_i+0x88>
 8009248:	b22d      	sxth	r5, r5
 800924a:	e7ef      	b.n	800922c <_printf_i+0x88>
 800924c:	680d      	ldr	r5, [r1, #0]
 800924e:	6819      	ldr	r1, [r3, #0]
 8009250:	1d08      	adds	r0, r1, #4
 8009252:	6018      	str	r0, [r3, #0]
 8009254:	062e      	lsls	r6, r5, #24
 8009256:	d501      	bpl.n	800925c <_printf_i+0xb8>
 8009258:	680d      	ldr	r5, [r1, #0]
 800925a:	e003      	b.n	8009264 <_printf_i+0xc0>
 800925c:	066d      	lsls	r5, r5, #25
 800925e:	d5fb      	bpl.n	8009258 <_printf_i+0xb4>
 8009260:	680d      	ldr	r5, [r1, #0]
 8009262:	b2ad      	uxth	r5, r5
 8009264:	4b56      	ldr	r3, [pc, #344]	; (80093c0 <_printf_i+0x21c>)
 8009266:	270a      	movs	r7, #10
 8009268:	9303      	str	r3, [sp, #12]
 800926a:	2a6f      	cmp	r2, #111	; 0x6f
 800926c:	d117      	bne.n	800929e <_printf_i+0xfa>
 800926e:	2708      	movs	r7, #8
 8009270:	e015      	b.n	800929e <_printf_i+0xfa>
 8009272:	3145      	adds	r1, #69	; 0x45
 8009274:	700a      	strb	r2, [r1, #0]
 8009276:	4a52      	ldr	r2, [pc, #328]	; (80093c0 <_printf_i+0x21c>)
 8009278:	9203      	str	r2, [sp, #12]
 800927a:	681a      	ldr	r2, [r3, #0]
 800927c:	6821      	ldr	r1, [r4, #0]
 800927e:	ca20      	ldmia	r2!, {r5}
 8009280:	601a      	str	r2, [r3, #0]
 8009282:	0608      	lsls	r0, r1, #24
 8009284:	d550      	bpl.n	8009328 <_printf_i+0x184>
 8009286:	07cb      	lsls	r3, r1, #31
 8009288:	d502      	bpl.n	8009290 <_printf_i+0xec>
 800928a:	2320      	movs	r3, #32
 800928c:	4319      	orrs	r1, r3
 800928e:	6021      	str	r1, [r4, #0]
 8009290:	2710      	movs	r7, #16
 8009292:	2d00      	cmp	r5, #0
 8009294:	d103      	bne.n	800929e <_printf_i+0xfa>
 8009296:	2320      	movs	r3, #32
 8009298:	6822      	ldr	r2, [r4, #0]
 800929a:	439a      	bics	r2, r3
 800929c:	6022      	str	r2, [r4, #0]
 800929e:	0023      	movs	r3, r4
 80092a0:	2200      	movs	r2, #0
 80092a2:	3343      	adds	r3, #67	; 0x43
 80092a4:	701a      	strb	r2, [r3, #0]
 80092a6:	6863      	ldr	r3, [r4, #4]
 80092a8:	60a3      	str	r3, [r4, #8]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	db03      	blt.n	80092b6 <_printf_i+0x112>
 80092ae:	2204      	movs	r2, #4
 80092b0:	6821      	ldr	r1, [r4, #0]
 80092b2:	4391      	bics	r1, r2
 80092b4:	6021      	str	r1, [r4, #0]
 80092b6:	2d00      	cmp	r5, #0
 80092b8:	d102      	bne.n	80092c0 <_printf_i+0x11c>
 80092ba:	9e04      	ldr	r6, [sp, #16]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d00c      	beq.n	80092da <_printf_i+0x136>
 80092c0:	9e04      	ldr	r6, [sp, #16]
 80092c2:	0028      	movs	r0, r5
 80092c4:	0039      	movs	r1, r7
 80092c6:	f7f6 ffaf 	bl	8000228 <__aeabi_uidivmod>
 80092ca:	9b03      	ldr	r3, [sp, #12]
 80092cc:	3e01      	subs	r6, #1
 80092ce:	5c5b      	ldrb	r3, [r3, r1]
 80092d0:	7033      	strb	r3, [r6, #0]
 80092d2:	002b      	movs	r3, r5
 80092d4:	0005      	movs	r5, r0
 80092d6:	429f      	cmp	r7, r3
 80092d8:	d9f3      	bls.n	80092c2 <_printf_i+0x11e>
 80092da:	2f08      	cmp	r7, #8
 80092dc:	d109      	bne.n	80092f2 <_printf_i+0x14e>
 80092de:	6823      	ldr	r3, [r4, #0]
 80092e0:	07db      	lsls	r3, r3, #31
 80092e2:	d506      	bpl.n	80092f2 <_printf_i+0x14e>
 80092e4:	6863      	ldr	r3, [r4, #4]
 80092e6:	6922      	ldr	r2, [r4, #16]
 80092e8:	4293      	cmp	r3, r2
 80092ea:	dc02      	bgt.n	80092f2 <_printf_i+0x14e>
 80092ec:	2330      	movs	r3, #48	; 0x30
 80092ee:	3e01      	subs	r6, #1
 80092f0:	7033      	strb	r3, [r6, #0]
 80092f2:	9b04      	ldr	r3, [sp, #16]
 80092f4:	1b9b      	subs	r3, r3, r6
 80092f6:	6123      	str	r3, [r4, #16]
 80092f8:	9b07      	ldr	r3, [sp, #28]
 80092fa:	0021      	movs	r1, r4
 80092fc:	9300      	str	r3, [sp, #0]
 80092fe:	9805      	ldr	r0, [sp, #20]
 8009300:	9b06      	ldr	r3, [sp, #24]
 8009302:	aa09      	add	r2, sp, #36	; 0x24
 8009304:	f7ff fede 	bl	80090c4 <_printf_common>
 8009308:	1c43      	adds	r3, r0, #1
 800930a:	d135      	bne.n	8009378 <_printf_i+0x1d4>
 800930c:	2001      	movs	r0, #1
 800930e:	4240      	negs	r0, r0
 8009310:	b00b      	add	sp, #44	; 0x2c
 8009312:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009314:	2220      	movs	r2, #32
 8009316:	6809      	ldr	r1, [r1, #0]
 8009318:	430a      	orrs	r2, r1
 800931a:	6022      	str	r2, [r4, #0]
 800931c:	0022      	movs	r2, r4
 800931e:	2178      	movs	r1, #120	; 0x78
 8009320:	3245      	adds	r2, #69	; 0x45
 8009322:	7011      	strb	r1, [r2, #0]
 8009324:	4a27      	ldr	r2, [pc, #156]	; (80093c4 <_printf_i+0x220>)
 8009326:	e7a7      	b.n	8009278 <_printf_i+0xd4>
 8009328:	0648      	lsls	r0, r1, #25
 800932a:	d5ac      	bpl.n	8009286 <_printf_i+0xe2>
 800932c:	b2ad      	uxth	r5, r5
 800932e:	e7aa      	b.n	8009286 <_printf_i+0xe2>
 8009330:	681a      	ldr	r2, [r3, #0]
 8009332:	680d      	ldr	r5, [r1, #0]
 8009334:	1d10      	adds	r0, r2, #4
 8009336:	6949      	ldr	r1, [r1, #20]
 8009338:	6018      	str	r0, [r3, #0]
 800933a:	6813      	ldr	r3, [r2, #0]
 800933c:	062e      	lsls	r6, r5, #24
 800933e:	d501      	bpl.n	8009344 <_printf_i+0x1a0>
 8009340:	6019      	str	r1, [r3, #0]
 8009342:	e002      	b.n	800934a <_printf_i+0x1a6>
 8009344:	066d      	lsls	r5, r5, #25
 8009346:	d5fb      	bpl.n	8009340 <_printf_i+0x19c>
 8009348:	8019      	strh	r1, [r3, #0]
 800934a:	2300      	movs	r3, #0
 800934c:	9e04      	ldr	r6, [sp, #16]
 800934e:	6123      	str	r3, [r4, #16]
 8009350:	e7d2      	b.n	80092f8 <_printf_i+0x154>
 8009352:	681a      	ldr	r2, [r3, #0]
 8009354:	1d11      	adds	r1, r2, #4
 8009356:	6019      	str	r1, [r3, #0]
 8009358:	6816      	ldr	r6, [r2, #0]
 800935a:	2100      	movs	r1, #0
 800935c:	0030      	movs	r0, r6
 800935e:	6862      	ldr	r2, [r4, #4]
 8009360:	f000 f832 	bl	80093c8 <memchr>
 8009364:	2800      	cmp	r0, #0
 8009366:	d001      	beq.n	800936c <_printf_i+0x1c8>
 8009368:	1b80      	subs	r0, r0, r6
 800936a:	6060      	str	r0, [r4, #4]
 800936c:	6863      	ldr	r3, [r4, #4]
 800936e:	6123      	str	r3, [r4, #16]
 8009370:	2300      	movs	r3, #0
 8009372:	9a04      	ldr	r2, [sp, #16]
 8009374:	7013      	strb	r3, [r2, #0]
 8009376:	e7bf      	b.n	80092f8 <_printf_i+0x154>
 8009378:	6923      	ldr	r3, [r4, #16]
 800937a:	0032      	movs	r2, r6
 800937c:	9906      	ldr	r1, [sp, #24]
 800937e:	9805      	ldr	r0, [sp, #20]
 8009380:	9d07      	ldr	r5, [sp, #28]
 8009382:	47a8      	blx	r5
 8009384:	1c43      	adds	r3, r0, #1
 8009386:	d0c1      	beq.n	800930c <_printf_i+0x168>
 8009388:	6823      	ldr	r3, [r4, #0]
 800938a:	079b      	lsls	r3, r3, #30
 800938c:	d415      	bmi.n	80093ba <_printf_i+0x216>
 800938e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009390:	68e0      	ldr	r0, [r4, #12]
 8009392:	4298      	cmp	r0, r3
 8009394:	dabc      	bge.n	8009310 <_printf_i+0x16c>
 8009396:	0018      	movs	r0, r3
 8009398:	e7ba      	b.n	8009310 <_printf_i+0x16c>
 800939a:	0022      	movs	r2, r4
 800939c:	2301      	movs	r3, #1
 800939e:	9906      	ldr	r1, [sp, #24]
 80093a0:	9805      	ldr	r0, [sp, #20]
 80093a2:	9e07      	ldr	r6, [sp, #28]
 80093a4:	3219      	adds	r2, #25
 80093a6:	47b0      	blx	r6
 80093a8:	1c43      	adds	r3, r0, #1
 80093aa:	d0af      	beq.n	800930c <_printf_i+0x168>
 80093ac:	3501      	adds	r5, #1
 80093ae:	68e3      	ldr	r3, [r4, #12]
 80093b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80093b2:	1a9b      	subs	r3, r3, r2
 80093b4:	42ab      	cmp	r3, r5
 80093b6:	dcf0      	bgt.n	800939a <_printf_i+0x1f6>
 80093b8:	e7e9      	b.n	800938e <_printf_i+0x1ea>
 80093ba:	2500      	movs	r5, #0
 80093bc:	e7f7      	b.n	80093ae <_printf_i+0x20a>
 80093be:	46c0      	nop			; (mov r8, r8)
 80093c0:	0800b115 	.word	0x0800b115
 80093c4:	0800b126 	.word	0x0800b126

080093c8 <memchr>:
 80093c8:	b2c9      	uxtb	r1, r1
 80093ca:	1882      	adds	r2, r0, r2
 80093cc:	4290      	cmp	r0, r2
 80093ce:	d101      	bne.n	80093d4 <memchr+0xc>
 80093d0:	2000      	movs	r0, #0
 80093d2:	4770      	bx	lr
 80093d4:	7803      	ldrb	r3, [r0, #0]
 80093d6:	428b      	cmp	r3, r1
 80093d8:	d0fb      	beq.n	80093d2 <memchr+0xa>
 80093da:	3001      	adds	r0, #1
 80093dc:	e7f6      	b.n	80093cc <memchr+0x4>
	...

080093e0 <_free_r>:
 80093e0:	b570      	push	{r4, r5, r6, lr}
 80093e2:	0005      	movs	r5, r0
 80093e4:	2900      	cmp	r1, #0
 80093e6:	d010      	beq.n	800940a <_free_r+0x2a>
 80093e8:	1f0c      	subs	r4, r1, #4
 80093ea:	6823      	ldr	r3, [r4, #0]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	da00      	bge.n	80093f2 <_free_r+0x12>
 80093f0:	18e4      	adds	r4, r4, r3
 80093f2:	0028      	movs	r0, r5
 80093f4:	f000 f8d4 	bl	80095a0 <__malloc_lock>
 80093f8:	4a1d      	ldr	r2, [pc, #116]	; (8009470 <_free_r+0x90>)
 80093fa:	6813      	ldr	r3, [r2, #0]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d105      	bne.n	800940c <_free_r+0x2c>
 8009400:	6063      	str	r3, [r4, #4]
 8009402:	6014      	str	r4, [r2, #0]
 8009404:	0028      	movs	r0, r5
 8009406:	f000 f8d3 	bl	80095b0 <__malloc_unlock>
 800940a:	bd70      	pop	{r4, r5, r6, pc}
 800940c:	42a3      	cmp	r3, r4
 800940e:	d908      	bls.n	8009422 <_free_r+0x42>
 8009410:	6821      	ldr	r1, [r4, #0]
 8009412:	1860      	adds	r0, r4, r1
 8009414:	4283      	cmp	r3, r0
 8009416:	d1f3      	bne.n	8009400 <_free_r+0x20>
 8009418:	6818      	ldr	r0, [r3, #0]
 800941a:	685b      	ldr	r3, [r3, #4]
 800941c:	1841      	adds	r1, r0, r1
 800941e:	6021      	str	r1, [r4, #0]
 8009420:	e7ee      	b.n	8009400 <_free_r+0x20>
 8009422:	001a      	movs	r2, r3
 8009424:	685b      	ldr	r3, [r3, #4]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d001      	beq.n	800942e <_free_r+0x4e>
 800942a:	42a3      	cmp	r3, r4
 800942c:	d9f9      	bls.n	8009422 <_free_r+0x42>
 800942e:	6811      	ldr	r1, [r2, #0]
 8009430:	1850      	adds	r0, r2, r1
 8009432:	42a0      	cmp	r0, r4
 8009434:	d10b      	bne.n	800944e <_free_r+0x6e>
 8009436:	6820      	ldr	r0, [r4, #0]
 8009438:	1809      	adds	r1, r1, r0
 800943a:	1850      	adds	r0, r2, r1
 800943c:	6011      	str	r1, [r2, #0]
 800943e:	4283      	cmp	r3, r0
 8009440:	d1e0      	bne.n	8009404 <_free_r+0x24>
 8009442:	6818      	ldr	r0, [r3, #0]
 8009444:	685b      	ldr	r3, [r3, #4]
 8009446:	1841      	adds	r1, r0, r1
 8009448:	6011      	str	r1, [r2, #0]
 800944a:	6053      	str	r3, [r2, #4]
 800944c:	e7da      	b.n	8009404 <_free_r+0x24>
 800944e:	42a0      	cmp	r0, r4
 8009450:	d902      	bls.n	8009458 <_free_r+0x78>
 8009452:	230c      	movs	r3, #12
 8009454:	602b      	str	r3, [r5, #0]
 8009456:	e7d5      	b.n	8009404 <_free_r+0x24>
 8009458:	6821      	ldr	r1, [r4, #0]
 800945a:	1860      	adds	r0, r4, r1
 800945c:	4283      	cmp	r3, r0
 800945e:	d103      	bne.n	8009468 <_free_r+0x88>
 8009460:	6818      	ldr	r0, [r3, #0]
 8009462:	685b      	ldr	r3, [r3, #4]
 8009464:	1841      	adds	r1, r0, r1
 8009466:	6021      	str	r1, [r4, #0]
 8009468:	6063      	str	r3, [r4, #4]
 800946a:	6054      	str	r4, [r2, #4]
 800946c:	e7ca      	b.n	8009404 <_free_r+0x24>
 800946e:	46c0      	nop			; (mov r8, r8)
 8009470:	200021d8 	.word	0x200021d8

08009474 <_malloc_r>:
 8009474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009476:	2303      	movs	r3, #3
 8009478:	1ccd      	adds	r5, r1, #3
 800947a:	439d      	bics	r5, r3
 800947c:	3508      	adds	r5, #8
 800947e:	0006      	movs	r6, r0
 8009480:	2d0c      	cmp	r5, #12
 8009482:	d21f      	bcs.n	80094c4 <_malloc_r+0x50>
 8009484:	250c      	movs	r5, #12
 8009486:	42a9      	cmp	r1, r5
 8009488:	d81e      	bhi.n	80094c8 <_malloc_r+0x54>
 800948a:	0030      	movs	r0, r6
 800948c:	f000 f888 	bl	80095a0 <__malloc_lock>
 8009490:	4925      	ldr	r1, [pc, #148]	; (8009528 <_malloc_r+0xb4>)
 8009492:	680a      	ldr	r2, [r1, #0]
 8009494:	0014      	movs	r4, r2
 8009496:	2c00      	cmp	r4, #0
 8009498:	d11a      	bne.n	80094d0 <_malloc_r+0x5c>
 800949a:	4f24      	ldr	r7, [pc, #144]	; (800952c <_malloc_r+0xb8>)
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d104      	bne.n	80094ac <_malloc_r+0x38>
 80094a2:	0021      	movs	r1, r4
 80094a4:	0030      	movs	r0, r6
 80094a6:	f000 f869 	bl	800957c <_sbrk_r>
 80094aa:	6038      	str	r0, [r7, #0]
 80094ac:	0029      	movs	r1, r5
 80094ae:	0030      	movs	r0, r6
 80094b0:	f000 f864 	bl	800957c <_sbrk_r>
 80094b4:	1c43      	adds	r3, r0, #1
 80094b6:	d12b      	bne.n	8009510 <_malloc_r+0x9c>
 80094b8:	230c      	movs	r3, #12
 80094ba:	0030      	movs	r0, r6
 80094bc:	6033      	str	r3, [r6, #0]
 80094be:	f000 f877 	bl	80095b0 <__malloc_unlock>
 80094c2:	e003      	b.n	80094cc <_malloc_r+0x58>
 80094c4:	2d00      	cmp	r5, #0
 80094c6:	dade      	bge.n	8009486 <_malloc_r+0x12>
 80094c8:	230c      	movs	r3, #12
 80094ca:	6033      	str	r3, [r6, #0]
 80094cc:	2000      	movs	r0, #0
 80094ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094d0:	6823      	ldr	r3, [r4, #0]
 80094d2:	1b5b      	subs	r3, r3, r5
 80094d4:	d419      	bmi.n	800950a <_malloc_r+0x96>
 80094d6:	2b0b      	cmp	r3, #11
 80094d8:	d903      	bls.n	80094e2 <_malloc_r+0x6e>
 80094da:	6023      	str	r3, [r4, #0]
 80094dc:	18e4      	adds	r4, r4, r3
 80094de:	6025      	str	r5, [r4, #0]
 80094e0:	e003      	b.n	80094ea <_malloc_r+0x76>
 80094e2:	6863      	ldr	r3, [r4, #4]
 80094e4:	42a2      	cmp	r2, r4
 80094e6:	d10e      	bne.n	8009506 <_malloc_r+0x92>
 80094e8:	600b      	str	r3, [r1, #0]
 80094ea:	0030      	movs	r0, r6
 80094ec:	f000 f860 	bl	80095b0 <__malloc_unlock>
 80094f0:	0020      	movs	r0, r4
 80094f2:	2207      	movs	r2, #7
 80094f4:	300b      	adds	r0, #11
 80094f6:	1d23      	adds	r3, r4, #4
 80094f8:	4390      	bics	r0, r2
 80094fa:	1ac2      	subs	r2, r0, r3
 80094fc:	4298      	cmp	r0, r3
 80094fe:	d0e6      	beq.n	80094ce <_malloc_r+0x5a>
 8009500:	1a1b      	subs	r3, r3, r0
 8009502:	50a3      	str	r3, [r4, r2]
 8009504:	e7e3      	b.n	80094ce <_malloc_r+0x5a>
 8009506:	6053      	str	r3, [r2, #4]
 8009508:	e7ef      	b.n	80094ea <_malloc_r+0x76>
 800950a:	0022      	movs	r2, r4
 800950c:	6864      	ldr	r4, [r4, #4]
 800950e:	e7c2      	b.n	8009496 <_malloc_r+0x22>
 8009510:	2303      	movs	r3, #3
 8009512:	1cc4      	adds	r4, r0, #3
 8009514:	439c      	bics	r4, r3
 8009516:	42a0      	cmp	r0, r4
 8009518:	d0e1      	beq.n	80094de <_malloc_r+0x6a>
 800951a:	1a21      	subs	r1, r4, r0
 800951c:	0030      	movs	r0, r6
 800951e:	f000 f82d 	bl	800957c <_sbrk_r>
 8009522:	1c43      	adds	r3, r0, #1
 8009524:	d1db      	bne.n	80094de <_malloc_r+0x6a>
 8009526:	e7c7      	b.n	80094b8 <_malloc_r+0x44>
 8009528:	200021d8 	.word	0x200021d8
 800952c:	200021dc 	.word	0x200021dc

08009530 <_realloc_r>:
 8009530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009532:	0007      	movs	r7, r0
 8009534:	000d      	movs	r5, r1
 8009536:	0016      	movs	r6, r2
 8009538:	2900      	cmp	r1, #0
 800953a:	d105      	bne.n	8009548 <_realloc_r+0x18>
 800953c:	0011      	movs	r1, r2
 800953e:	f7ff ff99 	bl	8009474 <_malloc_r>
 8009542:	0004      	movs	r4, r0
 8009544:	0020      	movs	r0, r4
 8009546:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009548:	2a00      	cmp	r2, #0
 800954a:	d103      	bne.n	8009554 <_realloc_r+0x24>
 800954c:	f7ff ff48 	bl	80093e0 <_free_r>
 8009550:	0034      	movs	r4, r6
 8009552:	e7f7      	b.n	8009544 <_realloc_r+0x14>
 8009554:	f000 f834 	bl	80095c0 <_malloc_usable_size_r>
 8009558:	002c      	movs	r4, r5
 800955a:	42b0      	cmp	r0, r6
 800955c:	d2f2      	bcs.n	8009544 <_realloc_r+0x14>
 800955e:	0031      	movs	r1, r6
 8009560:	0038      	movs	r0, r7
 8009562:	f7ff ff87 	bl	8009474 <_malloc_r>
 8009566:	1e04      	subs	r4, r0, #0
 8009568:	d0ec      	beq.n	8009544 <_realloc_r+0x14>
 800956a:	0029      	movs	r1, r5
 800956c:	0032      	movs	r2, r6
 800956e:	f7ff fbb7 	bl	8008ce0 <memcpy>
 8009572:	0029      	movs	r1, r5
 8009574:	0038      	movs	r0, r7
 8009576:	f7ff ff33 	bl	80093e0 <_free_r>
 800957a:	e7e3      	b.n	8009544 <_realloc_r+0x14>

0800957c <_sbrk_r>:
 800957c:	2300      	movs	r3, #0
 800957e:	b570      	push	{r4, r5, r6, lr}
 8009580:	4d06      	ldr	r5, [pc, #24]	; (800959c <_sbrk_r+0x20>)
 8009582:	0004      	movs	r4, r0
 8009584:	0008      	movs	r0, r1
 8009586:	602b      	str	r3, [r5, #0]
 8009588:	f7f9 f806 	bl	8002598 <_sbrk>
 800958c:	1c43      	adds	r3, r0, #1
 800958e:	d103      	bne.n	8009598 <_sbrk_r+0x1c>
 8009590:	682b      	ldr	r3, [r5, #0]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d000      	beq.n	8009598 <_sbrk_r+0x1c>
 8009596:	6023      	str	r3, [r4, #0]
 8009598:	bd70      	pop	{r4, r5, r6, pc}
 800959a:	46c0      	nop			; (mov r8, r8)
 800959c:	20002410 	.word	0x20002410

080095a0 <__malloc_lock>:
 80095a0:	b510      	push	{r4, lr}
 80095a2:	4802      	ldr	r0, [pc, #8]	; (80095ac <__malloc_lock+0xc>)
 80095a4:	f000 f814 	bl	80095d0 <__retarget_lock_acquire_recursive>
 80095a8:	bd10      	pop	{r4, pc}
 80095aa:	46c0      	nop			; (mov r8, r8)
 80095ac:	20002418 	.word	0x20002418

080095b0 <__malloc_unlock>:
 80095b0:	b510      	push	{r4, lr}
 80095b2:	4802      	ldr	r0, [pc, #8]	; (80095bc <__malloc_unlock+0xc>)
 80095b4:	f000 f80d 	bl	80095d2 <__retarget_lock_release_recursive>
 80095b8:	bd10      	pop	{r4, pc}
 80095ba:	46c0      	nop			; (mov r8, r8)
 80095bc:	20002418 	.word	0x20002418

080095c0 <_malloc_usable_size_r>:
 80095c0:	1f0b      	subs	r3, r1, #4
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	1f18      	subs	r0, r3, #4
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	da01      	bge.n	80095ce <_malloc_usable_size_r+0xe>
 80095ca:	580b      	ldr	r3, [r1, r0]
 80095cc:	18c0      	adds	r0, r0, r3
 80095ce:	4770      	bx	lr

080095d0 <__retarget_lock_acquire_recursive>:
 80095d0:	4770      	bx	lr

080095d2 <__retarget_lock_release_recursive>:
 80095d2:	4770      	bx	lr

080095d4 <_init>:
 80095d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095d6:	46c0      	nop			; (mov r8, r8)
 80095d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095da:	bc08      	pop	{r3}
 80095dc:	469e      	mov	lr, r3
 80095de:	4770      	bx	lr

080095e0 <_fini>:
 80095e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095e2:	46c0      	nop			; (mov r8, r8)
 80095e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095e6:	bc08      	pop	{r3}
 80095e8:	469e      	mov	lr, r3
 80095ea:	4770      	bx	lr
