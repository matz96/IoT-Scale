
Pro3E_RT_Mikrocontroller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b50  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b8  08006c10  08006c10  00016c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006dc8  08006dc8  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08006dc8  08006dc8  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006dc8  08006dc8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006dc8  08006dc8  00016dc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006dcc  08006dcc  00016dcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006dd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b54  20000010  08006de0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001b64  08006de0  00021b64  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018ea0  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033cb  00000000  00000000  00038ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014f8  00000000  00000000  0003c2a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001380  00000000  00000000  0003d7a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013137  00000000  00000000  0003eb20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000177fe  00000000  00000000  00051c57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000729a0  00000000  00000000  00069455  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000dbdf5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d8c  00000000  00000000  000dbe48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006bf8 	.word	0x08006bf8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08006bf8 	.word	0x08006bf8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_cfrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	1c08      	adds	r0, r1, #0
 8000224:	4661      	mov	r1, ip
 8000226:	e7ff      	b.n	8000228 <__aeabi_cfcmpeq>

08000228 <__aeabi_cfcmpeq>:
 8000228:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800022a:	f000 f9cb 	bl	80005c4 <__lesf2>
 800022e:	2800      	cmp	r0, #0
 8000230:	d401      	bmi.n	8000236 <__aeabi_cfcmpeq+0xe>
 8000232:	2100      	movs	r1, #0
 8000234:	42c8      	cmn	r0, r1
 8000236:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000238 <__aeabi_fcmpeq>:
 8000238:	b510      	push	{r4, lr}
 800023a:	f000 f94f 	bl	80004dc <__eqsf2>
 800023e:	4240      	negs	r0, r0
 8000240:	3001      	adds	r0, #1
 8000242:	bd10      	pop	{r4, pc}

08000244 <__aeabi_fcmplt>:
 8000244:	b510      	push	{r4, lr}
 8000246:	f000 f9bd 	bl	80005c4 <__lesf2>
 800024a:	2800      	cmp	r0, #0
 800024c:	db01      	blt.n	8000252 <__aeabi_fcmplt+0xe>
 800024e:	2000      	movs	r0, #0
 8000250:	bd10      	pop	{r4, pc}
 8000252:	2001      	movs	r0, #1
 8000254:	bd10      	pop	{r4, pc}
 8000256:	46c0      	nop			; (mov r8, r8)

08000258 <__aeabi_fcmple>:
 8000258:	b510      	push	{r4, lr}
 800025a:	f000 f9b3 	bl	80005c4 <__lesf2>
 800025e:	2800      	cmp	r0, #0
 8000260:	dd01      	ble.n	8000266 <__aeabi_fcmple+0xe>
 8000262:	2000      	movs	r0, #0
 8000264:	bd10      	pop	{r4, pc}
 8000266:	2001      	movs	r0, #1
 8000268:	bd10      	pop	{r4, pc}
 800026a:	46c0      	nop			; (mov r8, r8)

0800026c <__aeabi_fcmpgt>:
 800026c:	b510      	push	{r4, lr}
 800026e:	f000 f95d 	bl	800052c <__gesf2>
 8000272:	2800      	cmp	r0, #0
 8000274:	dc01      	bgt.n	800027a <__aeabi_fcmpgt+0xe>
 8000276:	2000      	movs	r0, #0
 8000278:	bd10      	pop	{r4, pc}
 800027a:	2001      	movs	r0, #1
 800027c:	bd10      	pop	{r4, pc}
 800027e:	46c0      	nop			; (mov r8, r8)

08000280 <__aeabi_fcmpge>:
 8000280:	b510      	push	{r4, lr}
 8000282:	f000 f953 	bl	800052c <__gesf2>
 8000286:	2800      	cmp	r0, #0
 8000288:	da01      	bge.n	800028e <__aeabi_fcmpge+0xe>
 800028a:	2000      	movs	r0, #0
 800028c:	bd10      	pop	{r4, pc}
 800028e:	2001      	movs	r0, #1
 8000290:	bd10      	pop	{r4, pc}
 8000292:	46c0      	nop			; (mov r8, r8)

08000294 <__aeabi_f2uiz>:
 8000294:	219e      	movs	r1, #158	; 0x9e
 8000296:	b510      	push	{r4, lr}
 8000298:	05c9      	lsls	r1, r1, #23
 800029a:	1c04      	adds	r4, r0, #0
 800029c:	f7ff fff0 	bl	8000280 <__aeabi_fcmpge>
 80002a0:	2800      	cmp	r0, #0
 80002a2:	d103      	bne.n	80002ac <__aeabi_f2uiz+0x18>
 80002a4:	1c20      	adds	r0, r4, #0
 80002a6:	f000 fcb9 	bl	8000c1c <__aeabi_f2iz>
 80002aa:	bd10      	pop	{r4, pc}
 80002ac:	219e      	movs	r1, #158	; 0x9e
 80002ae:	1c20      	adds	r0, r4, #0
 80002b0:	05c9      	lsls	r1, r1, #23
 80002b2:	f000 faeb 	bl	800088c <__aeabi_fsub>
 80002b6:	f000 fcb1 	bl	8000c1c <__aeabi_f2iz>
 80002ba:	2380      	movs	r3, #128	; 0x80
 80002bc:	061b      	lsls	r3, r3, #24
 80002be:	469c      	mov	ip, r3
 80002c0:	4460      	add	r0, ip
 80002c2:	e7f2      	b.n	80002aa <__aeabi_f2uiz+0x16>

080002c4 <__aeabi_fdiv>:
 80002c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002c6:	464f      	mov	r7, r9
 80002c8:	4646      	mov	r6, r8
 80002ca:	46d6      	mov	lr, sl
 80002cc:	0245      	lsls	r5, r0, #9
 80002ce:	b5c0      	push	{r6, r7, lr}
 80002d0:	0047      	lsls	r7, r0, #1
 80002d2:	1c0c      	adds	r4, r1, #0
 80002d4:	0a6d      	lsrs	r5, r5, #9
 80002d6:	0e3f      	lsrs	r7, r7, #24
 80002d8:	0fc6      	lsrs	r6, r0, #31
 80002da:	2f00      	cmp	r7, #0
 80002dc:	d066      	beq.n	80003ac <__aeabi_fdiv+0xe8>
 80002de:	2fff      	cmp	r7, #255	; 0xff
 80002e0:	d06c      	beq.n	80003bc <__aeabi_fdiv+0xf8>
 80002e2:	2300      	movs	r3, #0
 80002e4:	00ea      	lsls	r2, r5, #3
 80002e6:	2580      	movs	r5, #128	; 0x80
 80002e8:	4699      	mov	r9, r3
 80002ea:	469a      	mov	sl, r3
 80002ec:	04ed      	lsls	r5, r5, #19
 80002ee:	4315      	orrs	r5, r2
 80002f0:	3f7f      	subs	r7, #127	; 0x7f
 80002f2:	0260      	lsls	r0, r4, #9
 80002f4:	0061      	lsls	r1, r4, #1
 80002f6:	0a43      	lsrs	r3, r0, #9
 80002f8:	4698      	mov	r8, r3
 80002fa:	0e09      	lsrs	r1, r1, #24
 80002fc:	0fe4      	lsrs	r4, r4, #31
 80002fe:	2900      	cmp	r1, #0
 8000300:	d048      	beq.n	8000394 <__aeabi_fdiv+0xd0>
 8000302:	29ff      	cmp	r1, #255	; 0xff
 8000304:	d010      	beq.n	8000328 <__aeabi_fdiv+0x64>
 8000306:	2280      	movs	r2, #128	; 0x80
 8000308:	00d8      	lsls	r0, r3, #3
 800030a:	04d2      	lsls	r2, r2, #19
 800030c:	4302      	orrs	r2, r0
 800030e:	4690      	mov	r8, r2
 8000310:	2000      	movs	r0, #0
 8000312:	397f      	subs	r1, #127	; 0x7f
 8000314:	464a      	mov	r2, r9
 8000316:	0033      	movs	r3, r6
 8000318:	1a7f      	subs	r7, r7, r1
 800031a:	4302      	orrs	r2, r0
 800031c:	496c      	ldr	r1, [pc, #432]	; (80004d0 <__aeabi_fdiv+0x20c>)
 800031e:	0092      	lsls	r2, r2, #2
 8000320:	588a      	ldr	r2, [r1, r2]
 8000322:	4063      	eors	r3, r4
 8000324:	b2db      	uxtb	r3, r3
 8000326:	4697      	mov	pc, r2
 8000328:	2b00      	cmp	r3, #0
 800032a:	d16d      	bne.n	8000408 <__aeabi_fdiv+0x144>
 800032c:	2002      	movs	r0, #2
 800032e:	3fff      	subs	r7, #255	; 0xff
 8000330:	e033      	b.n	800039a <__aeabi_fdiv+0xd6>
 8000332:	2300      	movs	r3, #0
 8000334:	4698      	mov	r8, r3
 8000336:	0026      	movs	r6, r4
 8000338:	4645      	mov	r5, r8
 800033a:	4682      	mov	sl, r0
 800033c:	4653      	mov	r3, sl
 800033e:	2b02      	cmp	r3, #2
 8000340:	d100      	bne.n	8000344 <__aeabi_fdiv+0x80>
 8000342:	e07f      	b.n	8000444 <__aeabi_fdiv+0x180>
 8000344:	2b03      	cmp	r3, #3
 8000346:	d100      	bne.n	800034a <__aeabi_fdiv+0x86>
 8000348:	e094      	b.n	8000474 <__aeabi_fdiv+0x1b0>
 800034a:	2b01      	cmp	r3, #1
 800034c:	d017      	beq.n	800037e <__aeabi_fdiv+0xba>
 800034e:	0038      	movs	r0, r7
 8000350:	307f      	adds	r0, #127	; 0x7f
 8000352:	2800      	cmp	r0, #0
 8000354:	dd5f      	ble.n	8000416 <__aeabi_fdiv+0x152>
 8000356:	076b      	lsls	r3, r5, #29
 8000358:	d004      	beq.n	8000364 <__aeabi_fdiv+0xa0>
 800035a:	230f      	movs	r3, #15
 800035c:	402b      	ands	r3, r5
 800035e:	2b04      	cmp	r3, #4
 8000360:	d000      	beq.n	8000364 <__aeabi_fdiv+0xa0>
 8000362:	3504      	adds	r5, #4
 8000364:	012b      	lsls	r3, r5, #4
 8000366:	d503      	bpl.n	8000370 <__aeabi_fdiv+0xac>
 8000368:	0038      	movs	r0, r7
 800036a:	4b5a      	ldr	r3, [pc, #360]	; (80004d4 <__aeabi_fdiv+0x210>)
 800036c:	3080      	adds	r0, #128	; 0x80
 800036e:	401d      	ands	r5, r3
 8000370:	28fe      	cmp	r0, #254	; 0xfe
 8000372:	dc67      	bgt.n	8000444 <__aeabi_fdiv+0x180>
 8000374:	01ad      	lsls	r5, r5, #6
 8000376:	0a6d      	lsrs	r5, r5, #9
 8000378:	b2c0      	uxtb	r0, r0
 800037a:	e002      	b.n	8000382 <__aeabi_fdiv+0xbe>
 800037c:	001e      	movs	r6, r3
 800037e:	2000      	movs	r0, #0
 8000380:	2500      	movs	r5, #0
 8000382:	05c0      	lsls	r0, r0, #23
 8000384:	4328      	orrs	r0, r5
 8000386:	07f6      	lsls	r6, r6, #31
 8000388:	4330      	orrs	r0, r6
 800038a:	bce0      	pop	{r5, r6, r7}
 800038c:	46ba      	mov	sl, r7
 800038e:	46b1      	mov	r9, r6
 8000390:	46a8      	mov	r8, r5
 8000392:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000394:	2b00      	cmp	r3, #0
 8000396:	d12b      	bne.n	80003f0 <__aeabi_fdiv+0x12c>
 8000398:	2001      	movs	r0, #1
 800039a:	464a      	mov	r2, r9
 800039c:	0033      	movs	r3, r6
 800039e:	494e      	ldr	r1, [pc, #312]	; (80004d8 <__aeabi_fdiv+0x214>)
 80003a0:	4302      	orrs	r2, r0
 80003a2:	0092      	lsls	r2, r2, #2
 80003a4:	588a      	ldr	r2, [r1, r2]
 80003a6:	4063      	eors	r3, r4
 80003a8:	b2db      	uxtb	r3, r3
 80003aa:	4697      	mov	pc, r2
 80003ac:	2d00      	cmp	r5, #0
 80003ae:	d113      	bne.n	80003d8 <__aeabi_fdiv+0x114>
 80003b0:	2304      	movs	r3, #4
 80003b2:	4699      	mov	r9, r3
 80003b4:	3b03      	subs	r3, #3
 80003b6:	2700      	movs	r7, #0
 80003b8:	469a      	mov	sl, r3
 80003ba:	e79a      	b.n	80002f2 <__aeabi_fdiv+0x2e>
 80003bc:	2d00      	cmp	r5, #0
 80003be:	d105      	bne.n	80003cc <__aeabi_fdiv+0x108>
 80003c0:	2308      	movs	r3, #8
 80003c2:	4699      	mov	r9, r3
 80003c4:	3b06      	subs	r3, #6
 80003c6:	27ff      	movs	r7, #255	; 0xff
 80003c8:	469a      	mov	sl, r3
 80003ca:	e792      	b.n	80002f2 <__aeabi_fdiv+0x2e>
 80003cc:	230c      	movs	r3, #12
 80003ce:	4699      	mov	r9, r3
 80003d0:	3b09      	subs	r3, #9
 80003d2:	27ff      	movs	r7, #255	; 0xff
 80003d4:	469a      	mov	sl, r3
 80003d6:	e78c      	b.n	80002f2 <__aeabi_fdiv+0x2e>
 80003d8:	0028      	movs	r0, r5
 80003da:	f000 fc7b 	bl	8000cd4 <__clzsi2>
 80003de:	2776      	movs	r7, #118	; 0x76
 80003e0:	1f43      	subs	r3, r0, #5
 80003e2:	409d      	lsls	r5, r3
 80003e4:	2300      	movs	r3, #0
 80003e6:	427f      	negs	r7, r7
 80003e8:	4699      	mov	r9, r3
 80003ea:	469a      	mov	sl, r3
 80003ec:	1a3f      	subs	r7, r7, r0
 80003ee:	e780      	b.n	80002f2 <__aeabi_fdiv+0x2e>
 80003f0:	0018      	movs	r0, r3
 80003f2:	f000 fc6f 	bl	8000cd4 <__clzsi2>
 80003f6:	4642      	mov	r2, r8
 80003f8:	1f43      	subs	r3, r0, #5
 80003fa:	2176      	movs	r1, #118	; 0x76
 80003fc:	409a      	lsls	r2, r3
 80003fe:	4249      	negs	r1, r1
 8000400:	1a09      	subs	r1, r1, r0
 8000402:	4690      	mov	r8, r2
 8000404:	2000      	movs	r0, #0
 8000406:	e785      	b.n	8000314 <__aeabi_fdiv+0x50>
 8000408:	21ff      	movs	r1, #255	; 0xff
 800040a:	2003      	movs	r0, #3
 800040c:	e782      	b.n	8000314 <__aeabi_fdiv+0x50>
 800040e:	001e      	movs	r6, r3
 8000410:	20ff      	movs	r0, #255	; 0xff
 8000412:	2500      	movs	r5, #0
 8000414:	e7b5      	b.n	8000382 <__aeabi_fdiv+0xbe>
 8000416:	2301      	movs	r3, #1
 8000418:	1a1b      	subs	r3, r3, r0
 800041a:	2b1b      	cmp	r3, #27
 800041c:	dcaf      	bgt.n	800037e <__aeabi_fdiv+0xba>
 800041e:	379e      	adds	r7, #158	; 0x9e
 8000420:	0029      	movs	r1, r5
 8000422:	40bd      	lsls	r5, r7
 8000424:	40d9      	lsrs	r1, r3
 8000426:	1e6a      	subs	r2, r5, #1
 8000428:	4195      	sbcs	r5, r2
 800042a:	430d      	orrs	r5, r1
 800042c:	076b      	lsls	r3, r5, #29
 800042e:	d004      	beq.n	800043a <__aeabi_fdiv+0x176>
 8000430:	230f      	movs	r3, #15
 8000432:	402b      	ands	r3, r5
 8000434:	2b04      	cmp	r3, #4
 8000436:	d000      	beq.n	800043a <__aeabi_fdiv+0x176>
 8000438:	3504      	adds	r5, #4
 800043a:	016b      	lsls	r3, r5, #5
 800043c:	d544      	bpl.n	80004c8 <__aeabi_fdiv+0x204>
 800043e:	2001      	movs	r0, #1
 8000440:	2500      	movs	r5, #0
 8000442:	e79e      	b.n	8000382 <__aeabi_fdiv+0xbe>
 8000444:	20ff      	movs	r0, #255	; 0xff
 8000446:	2500      	movs	r5, #0
 8000448:	e79b      	b.n	8000382 <__aeabi_fdiv+0xbe>
 800044a:	2580      	movs	r5, #128	; 0x80
 800044c:	2600      	movs	r6, #0
 800044e:	20ff      	movs	r0, #255	; 0xff
 8000450:	03ed      	lsls	r5, r5, #15
 8000452:	e796      	b.n	8000382 <__aeabi_fdiv+0xbe>
 8000454:	2300      	movs	r3, #0
 8000456:	4698      	mov	r8, r3
 8000458:	2080      	movs	r0, #128	; 0x80
 800045a:	03c0      	lsls	r0, r0, #15
 800045c:	4205      	tst	r5, r0
 800045e:	d009      	beq.n	8000474 <__aeabi_fdiv+0x1b0>
 8000460:	4643      	mov	r3, r8
 8000462:	4203      	tst	r3, r0
 8000464:	d106      	bne.n	8000474 <__aeabi_fdiv+0x1b0>
 8000466:	4645      	mov	r5, r8
 8000468:	4305      	orrs	r5, r0
 800046a:	026d      	lsls	r5, r5, #9
 800046c:	0026      	movs	r6, r4
 800046e:	20ff      	movs	r0, #255	; 0xff
 8000470:	0a6d      	lsrs	r5, r5, #9
 8000472:	e786      	b.n	8000382 <__aeabi_fdiv+0xbe>
 8000474:	2080      	movs	r0, #128	; 0x80
 8000476:	03c0      	lsls	r0, r0, #15
 8000478:	4305      	orrs	r5, r0
 800047a:	026d      	lsls	r5, r5, #9
 800047c:	20ff      	movs	r0, #255	; 0xff
 800047e:	0a6d      	lsrs	r5, r5, #9
 8000480:	e77f      	b.n	8000382 <__aeabi_fdiv+0xbe>
 8000482:	4641      	mov	r1, r8
 8000484:	016a      	lsls	r2, r5, #5
 8000486:	0148      	lsls	r0, r1, #5
 8000488:	4282      	cmp	r2, r0
 800048a:	d219      	bcs.n	80004c0 <__aeabi_fdiv+0x1fc>
 800048c:	211b      	movs	r1, #27
 800048e:	2500      	movs	r5, #0
 8000490:	3f01      	subs	r7, #1
 8000492:	2601      	movs	r6, #1
 8000494:	0014      	movs	r4, r2
 8000496:	006d      	lsls	r5, r5, #1
 8000498:	0052      	lsls	r2, r2, #1
 800049a:	2c00      	cmp	r4, #0
 800049c:	db01      	blt.n	80004a2 <__aeabi_fdiv+0x1de>
 800049e:	4290      	cmp	r0, r2
 80004a0:	d801      	bhi.n	80004a6 <__aeabi_fdiv+0x1e2>
 80004a2:	1a12      	subs	r2, r2, r0
 80004a4:	4335      	orrs	r5, r6
 80004a6:	3901      	subs	r1, #1
 80004a8:	2900      	cmp	r1, #0
 80004aa:	d1f3      	bne.n	8000494 <__aeabi_fdiv+0x1d0>
 80004ac:	1e50      	subs	r0, r2, #1
 80004ae:	4182      	sbcs	r2, r0
 80004b0:	0038      	movs	r0, r7
 80004b2:	307f      	adds	r0, #127	; 0x7f
 80004b4:	001e      	movs	r6, r3
 80004b6:	4315      	orrs	r5, r2
 80004b8:	2800      	cmp	r0, #0
 80004ba:	dd00      	ble.n	80004be <__aeabi_fdiv+0x1fa>
 80004bc:	e74b      	b.n	8000356 <__aeabi_fdiv+0x92>
 80004be:	e7aa      	b.n	8000416 <__aeabi_fdiv+0x152>
 80004c0:	211a      	movs	r1, #26
 80004c2:	2501      	movs	r5, #1
 80004c4:	1a12      	subs	r2, r2, r0
 80004c6:	e7e4      	b.n	8000492 <__aeabi_fdiv+0x1ce>
 80004c8:	01ad      	lsls	r5, r5, #6
 80004ca:	2000      	movs	r0, #0
 80004cc:	0a6d      	lsrs	r5, r5, #9
 80004ce:	e758      	b.n	8000382 <__aeabi_fdiv+0xbe>
 80004d0:	08006cac 	.word	0x08006cac
 80004d4:	f7ffffff 	.word	0xf7ffffff
 80004d8:	08006cec 	.word	0x08006cec

080004dc <__eqsf2>:
 80004dc:	b570      	push	{r4, r5, r6, lr}
 80004de:	0042      	lsls	r2, r0, #1
 80004e0:	024e      	lsls	r6, r1, #9
 80004e2:	004c      	lsls	r4, r1, #1
 80004e4:	0245      	lsls	r5, r0, #9
 80004e6:	0a6d      	lsrs	r5, r5, #9
 80004e8:	0e12      	lsrs	r2, r2, #24
 80004ea:	0fc3      	lsrs	r3, r0, #31
 80004ec:	0a76      	lsrs	r6, r6, #9
 80004ee:	0e24      	lsrs	r4, r4, #24
 80004f0:	0fc9      	lsrs	r1, r1, #31
 80004f2:	2aff      	cmp	r2, #255	; 0xff
 80004f4:	d00f      	beq.n	8000516 <__eqsf2+0x3a>
 80004f6:	2cff      	cmp	r4, #255	; 0xff
 80004f8:	d011      	beq.n	800051e <__eqsf2+0x42>
 80004fa:	2001      	movs	r0, #1
 80004fc:	42a2      	cmp	r2, r4
 80004fe:	d000      	beq.n	8000502 <__eqsf2+0x26>
 8000500:	bd70      	pop	{r4, r5, r6, pc}
 8000502:	42b5      	cmp	r5, r6
 8000504:	d1fc      	bne.n	8000500 <__eqsf2+0x24>
 8000506:	428b      	cmp	r3, r1
 8000508:	d00d      	beq.n	8000526 <__eqsf2+0x4a>
 800050a:	2a00      	cmp	r2, #0
 800050c:	d1f8      	bne.n	8000500 <__eqsf2+0x24>
 800050e:	0028      	movs	r0, r5
 8000510:	1e45      	subs	r5, r0, #1
 8000512:	41a8      	sbcs	r0, r5
 8000514:	e7f4      	b.n	8000500 <__eqsf2+0x24>
 8000516:	2001      	movs	r0, #1
 8000518:	2d00      	cmp	r5, #0
 800051a:	d1f1      	bne.n	8000500 <__eqsf2+0x24>
 800051c:	e7eb      	b.n	80004f6 <__eqsf2+0x1a>
 800051e:	2001      	movs	r0, #1
 8000520:	2e00      	cmp	r6, #0
 8000522:	d1ed      	bne.n	8000500 <__eqsf2+0x24>
 8000524:	e7e9      	b.n	80004fa <__eqsf2+0x1e>
 8000526:	2000      	movs	r0, #0
 8000528:	e7ea      	b.n	8000500 <__eqsf2+0x24>
 800052a:	46c0      	nop			; (mov r8, r8)

0800052c <__gesf2>:
 800052c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800052e:	0042      	lsls	r2, r0, #1
 8000530:	0246      	lsls	r6, r0, #9
 8000532:	024d      	lsls	r5, r1, #9
 8000534:	004c      	lsls	r4, r1, #1
 8000536:	0fc3      	lsrs	r3, r0, #31
 8000538:	0a76      	lsrs	r6, r6, #9
 800053a:	0e12      	lsrs	r2, r2, #24
 800053c:	0a6d      	lsrs	r5, r5, #9
 800053e:	0e24      	lsrs	r4, r4, #24
 8000540:	0fc8      	lsrs	r0, r1, #31
 8000542:	2aff      	cmp	r2, #255	; 0xff
 8000544:	d01f      	beq.n	8000586 <__gesf2+0x5a>
 8000546:	2cff      	cmp	r4, #255	; 0xff
 8000548:	d010      	beq.n	800056c <__gesf2+0x40>
 800054a:	2a00      	cmp	r2, #0
 800054c:	d11f      	bne.n	800058e <__gesf2+0x62>
 800054e:	4271      	negs	r1, r6
 8000550:	4171      	adcs	r1, r6
 8000552:	2c00      	cmp	r4, #0
 8000554:	d101      	bne.n	800055a <__gesf2+0x2e>
 8000556:	2d00      	cmp	r5, #0
 8000558:	d01e      	beq.n	8000598 <__gesf2+0x6c>
 800055a:	2900      	cmp	r1, #0
 800055c:	d10e      	bne.n	800057c <__gesf2+0x50>
 800055e:	4283      	cmp	r3, r0
 8000560:	d01e      	beq.n	80005a0 <__gesf2+0x74>
 8000562:	2102      	movs	r1, #2
 8000564:	1e58      	subs	r0, r3, #1
 8000566:	4008      	ands	r0, r1
 8000568:	3801      	subs	r0, #1
 800056a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800056c:	2d00      	cmp	r5, #0
 800056e:	d126      	bne.n	80005be <__gesf2+0x92>
 8000570:	2a00      	cmp	r2, #0
 8000572:	d1f4      	bne.n	800055e <__gesf2+0x32>
 8000574:	4271      	negs	r1, r6
 8000576:	4171      	adcs	r1, r6
 8000578:	2900      	cmp	r1, #0
 800057a:	d0f0      	beq.n	800055e <__gesf2+0x32>
 800057c:	2800      	cmp	r0, #0
 800057e:	d1f4      	bne.n	800056a <__gesf2+0x3e>
 8000580:	2001      	movs	r0, #1
 8000582:	4240      	negs	r0, r0
 8000584:	e7f1      	b.n	800056a <__gesf2+0x3e>
 8000586:	2e00      	cmp	r6, #0
 8000588:	d119      	bne.n	80005be <__gesf2+0x92>
 800058a:	2cff      	cmp	r4, #255	; 0xff
 800058c:	d0ee      	beq.n	800056c <__gesf2+0x40>
 800058e:	2c00      	cmp	r4, #0
 8000590:	d1e5      	bne.n	800055e <__gesf2+0x32>
 8000592:	2d00      	cmp	r5, #0
 8000594:	d1e3      	bne.n	800055e <__gesf2+0x32>
 8000596:	e7e4      	b.n	8000562 <__gesf2+0x36>
 8000598:	2000      	movs	r0, #0
 800059a:	2e00      	cmp	r6, #0
 800059c:	d0e5      	beq.n	800056a <__gesf2+0x3e>
 800059e:	e7e0      	b.n	8000562 <__gesf2+0x36>
 80005a0:	42a2      	cmp	r2, r4
 80005a2:	dc05      	bgt.n	80005b0 <__gesf2+0x84>
 80005a4:	dbea      	blt.n	800057c <__gesf2+0x50>
 80005a6:	42ae      	cmp	r6, r5
 80005a8:	d802      	bhi.n	80005b0 <__gesf2+0x84>
 80005aa:	d3e7      	bcc.n	800057c <__gesf2+0x50>
 80005ac:	2000      	movs	r0, #0
 80005ae:	e7dc      	b.n	800056a <__gesf2+0x3e>
 80005b0:	4241      	negs	r1, r0
 80005b2:	4141      	adcs	r1, r0
 80005b4:	4248      	negs	r0, r1
 80005b6:	2102      	movs	r1, #2
 80005b8:	4008      	ands	r0, r1
 80005ba:	3801      	subs	r0, #1
 80005bc:	e7d5      	b.n	800056a <__gesf2+0x3e>
 80005be:	2002      	movs	r0, #2
 80005c0:	4240      	negs	r0, r0
 80005c2:	e7d2      	b.n	800056a <__gesf2+0x3e>

080005c4 <__lesf2>:
 80005c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005c6:	0042      	lsls	r2, r0, #1
 80005c8:	0246      	lsls	r6, r0, #9
 80005ca:	024d      	lsls	r5, r1, #9
 80005cc:	004c      	lsls	r4, r1, #1
 80005ce:	0fc3      	lsrs	r3, r0, #31
 80005d0:	0a76      	lsrs	r6, r6, #9
 80005d2:	0e12      	lsrs	r2, r2, #24
 80005d4:	0a6d      	lsrs	r5, r5, #9
 80005d6:	0e24      	lsrs	r4, r4, #24
 80005d8:	0fc8      	lsrs	r0, r1, #31
 80005da:	2aff      	cmp	r2, #255	; 0xff
 80005dc:	d00d      	beq.n	80005fa <__lesf2+0x36>
 80005de:	2cff      	cmp	r4, #255	; 0xff
 80005e0:	d00f      	beq.n	8000602 <__lesf2+0x3e>
 80005e2:	2a00      	cmp	r2, #0
 80005e4:	d123      	bne.n	800062e <__lesf2+0x6a>
 80005e6:	4271      	negs	r1, r6
 80005e8:	4171      	adcs	r1, r6
 80005ea:	2c00      	cmp	r4, #0
 80005ec:	d10f      	bne.n	800060e <__lesf2+0x4a>
 80005ee:	2d00      	cmp	r5, #0
 80005f0:	d10d      	bne.n	800060e <__lesf2+0x4a>
 80005f2:	2000      	movs	r0, #0
 80005f4:	2e00      	cmp	r6, #0
 80005f6:	d014      	beq.n	8000622 <__lesf2+0x5e>
 80005f8:	e00d      	b.n	8000616 <__lesf2+0x52>
 80005fa:	2e00      	cmp	r6, #0
 80005fc:	d110      	bne.n	8000620 <__lesf2+0x5c>
 80005fe:	2cff      	cmp	r4, #255	; 0xff
 8000600:	d115      	bne.n	800062e <__lesf2+0x6a>
 8000602:	2d00      	cmp	r5, #0
 8000604:	d10c      	bne.n	8000620 <__lesf2+0x5c>
 8000606:	2a00      	cmp	r2, #0
 8000608:	d103      	bne.n	8000612 <__lesf2+0x4e>
 800060a:	4271      	negs	r1, r6
 800060c:	4171      	adcs	r1, r6
 800060e:	2900      	cmp	r1, #0
 8000610:	d108      	bne.n	8000624 <__lesf2+0x60>
 8000612:	4283      	cmp	r3, r0
 8000614:	d010      	beq.n	8000638 <__lesf2+0x74>
 8000616:	2102      	movs	r1, #2
 8000618:	1e58      	subs	r0, r3, #1
 800061a:	4008      	ands	r0, r1
 800061c:	3801      	subs	r0, #1
 800061e:	e000      	b.n	8000622 <__lesf2+0x5e>
 8000620:	2002      	movs	r0, #2
 8000622:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000624:	2800      	cmp	r0, #0
 8000626:	d1fc      	bne.n	8000622 <__lesf2+0x5e>
 8000628:	2001      	movs	r0, #1
 800062a:	4240      	negs	r0, r0
 800062c:	e7f9      	b.n	8000622 <__lesf2+0x5e>
 800062e:	2c00      	cmp	r4, #0
 8000630:	d1ef      	bne.n	8000612 <__lesf2+0x4e>
 8000632:	2d00      	cmp	r5, #0
 8000634:	d1ed      	bne.n	8000612 <__lesf2+0x4e>
 8000636:	e7ee      	b.n	8000616 <__lesf2+0x52>
 8000638:	42a2      	cmp	r2, r4
 800063a:	dc05      	bgt.n	8000648 <__lesf2+0x84>
 800063c:	dbf2      	blt.n	8000624 <__lesf2+0x60>
 800063e:	42ae      	cmp	r6, r5
 8000640:	d802      	bhi.n	8000648 <__lesf2+0x84>
 8000642:	d3ef      	bcc.n	8000624 <__lesf2+0x60>
 8000644:	2000      	movs	r0, #0
 8000646:	e7ec      	b.n	8000622 <__lesf2+0x5e>
 8000648:	4241      	negs	r1, r0
 800064a:	4141      	adcs	r1, r0
 800064c:	4248      	negs	r0, r1
 800064e:	2102      	movs	r1, #2
 8000650:	4008      	ands	r0, r1
 8000652:	3801      	subs	r0, #1
 8000654:	e7e5      	b.n	8000622 <__lesf2+0x5e>
 8000656:	46c0      	nop			; (mov r8, r8)

08000658 <__aeabi_fmul>:
 8000658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800065a:	4657      	mov	r7, sl
 800065c:	464e      	mov	r6, r9
 800065e:	4645      	mov	r5, r8
 8000660:	46de      	mov	lr, fp
 8000662:	0244      	lsls	r4, r0, #9
 8000664:	b5e0      	push	{r5, r6, r7, lr}
 8000666:	0045      	lsls	r5, r0, #1
 8000668:	1c0f      	adds	r7, r1, #0
 800066a:	0a64      	lsrs	r4, r4, #9
 800066c:	0e2d      	lsrs	r5, r5, #24
 800066e:	0fc6      	lsrs	r6, r0, #31
 8000670:	2d00      	cmp	r5, #0
 8000672:	d047      	beq.n	8000704 <__aeabi_fmul+0xac>
 8000674:	2dff      	cmp	r5, #255	; 0xff
 8000676:	d04d      	beq.n	8000714 <__aeabi_fmul+0xbc>
 8000678:	2300      	movs	r3, #0
 800067a:	2080      	movs	r0, #128	; 0x80
 800067c:	469a      	mov	sl, r3
 800067e:	469b      	mov	fp, r3
 8000680:	00e4      	lsls	r4, r4, #3
 8000682:	04c0      	lsls	r0, r0, #19
 8000684:	4304      	orrs	r4, r0
 8000686:	3d7f      	subs	r5, #127	; 0x7f
 8000688:	0278      	lsls	r0, r7, #9
 800068a:	0a43      	lsrs	r3, r0, #9
 800068c:	4699      	mov	r9, r3
 800068e:	007a      	lsls	r2, r7, #1
 8000690:	0ffb      	lsrs	r3, r7, #31
 8000692:	4698      	mov	r8, r3
 8000694:	0e12      	lsrs	r2, r2, #24
 8000696:	464b      	mov	r3, r9
 8000698:	d044      	beq.n	8000724 <__aeabi_fmul+0xcc>
 800069a:	2aff      	cmp	r2, #255	; 0xff
 800069c:	d011      	beq.n	80006c2 <__aeabi_fmul+0x6a>
 800069e:	00d8      	lsls	r0, r3, #3
 80006a0:	2380      	movs	r3, #128	; 0x80
 80006a2:	04db      	lsls	r3, r3, #19
 80006a4:	4303      	orrs	r3, r0
 80006a6:	4699      	mov	r9, r3
 80006a8:	2000      	movs	r0, #0
 80006aa:	3a7f      	subs	r2, #127	; 0x7f
 80006ac:	18ad      	adds	r5, r5, r2
 80006ae:	4647      	mov	r7, r8
 80006b0:	4653      	mov	r3, sl
 80006b2:	4077      	eors	r7, r6
 80006b4:	1c69      	adds	r1, r5, #1
 80006b6:	2b0f      	cmp	r3, #15
 80006b8:	d83f      	bhi.n	800073a <__aeabi_fmul+0xe2>
 80006ba:	4a72      	ldr	r2, [pc, #456]	; (8000884 <__aeabi_fmul+0x22c>)
 80006bc:	009b      	lsls	r3, r3, #2
 80006be:	58d3      	ldr	r3, [r2, r3]
 80006c0:	469f      	mov	pc, r3
 80006c2:	35ff      	adds	r5, #255	; 0xff
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d000      	beq.n	80006ca <__aeabi_fmul+0x72>
 80006c8:	e079      	b.n	80007be <__aeabi_fmul+0x166>
 80006ca:	4652      	mov	r2, sl
 80006cc:	2302      	movs	r3, #2
 80006ce:	431a      	orrs	r2, r3
 80006d0:	4692      	mov	sl, r2
 80006d2:	2002      	movs	r0, #2
 80006d4:	e7eb      	b.n	80006ae <__aeabi_fmul+0x56>
 80006d6:	4647      	mov	r7, r8
 80006d8:	464c      	mov	r4, r9
 80006da:	4683      	mov	fp, r0
 80006dc:	465b      	mov	r3, fp
 80006de:	2b02      	cmp	r3, #2
 80006e0:	d028      	beq.n	8000734 <__aeabi_fmul+0xdc>
 80006e2:	2b03      	cmp	r3, #3
 80006e4:	d100      	bne.n	80006e8 <__aeabi_fmul+0x90>
 80006e6:	e0c6      	b.n	8000876 <__aeabi_fmul+0x21e>
 80006e8:	2b01      	cmp	r3, #1
 80006ea:	d14f      	bne.n	800078c <__aeabi_fmul+0x134>
 80006ec:	2000      	movs	r0, #0
 80006ee:	2400      	movs	r4, #0
 80006f0:	05c0      	lsls	r0, r0, #23
 80006f2:	07ff      	lsls	r7, r7, #31
 80006f4:	4320      	orrs	r0, r4
 80006f6:	4338      	orrs	r0, r7
 80006f8:	bcf0      	pop	{r4, r5, r6, r7}
 80006fa:	46bb      	mov	fp, r7
 80006fc:	46b2      	mov	sl, r6
 80006fe:	46a9      	mov	r9, r5
 8000700:	46a0      	mov	r8, r4
 8000702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000704:	2c00      	cmp	r4, #0
 8000706:	d171      	bne.n	80007ec <__aeabi_fmul+0x194>
 8000708:	2304      	movs	r3, #4
 800070a:	469a      	mov	sl, r3
 800070c:	3b03      	subs	r3, #3
 800070e:	2500      	movs	r5, #0
 8000710:	469b      	mov	fp, r3
 8000712:	e7b9      	b.n	8000688 <__aeabi_fmul+0x30>
 8000714:	2c00      	cmp	r4, #0
 8000716:	d163      	bne.n	80007e0 <__aeabi_fmul+0x188>
 8000718:	2308      	movs	r3, #8
 800071a:	469a      	mov	sl, r3
 800071c:	3b06      	subs	r3, #6
 800071e:	25ff      	movs	r5, #255	; 0xff
 8000720:	469b      	mov	fp, r3
 8000722:	e7b1      	b.n	8000688 <__aeabi_fmul+0x30>
 8000724:	2b00      	cmp	r3, #0
 8000726:	d150      	bne.n	80007ca <__aeabi_fmul+0x172>
 8000728:	4652      	mov	r2, sl
 800072a:	3301      	adds	r3, #1
 800072c:	431a      	orrs	r2, r3
 800072e:	4692      	mov	sl, r2
 8000730:	2001      	movs	r0, #1
 8000732:	e7bc      	b.n	80006ae <__aeabi_fmul+0x56>
 8000734:	20ff      	movs	r0, #255	; 0xff
 8000736:	2400      	movs	r4, #0
 8000738:	e7da      	b.n	80006f0 <__aeabi_fmul+0x98>
 800073a:	4648      	mov	r0, r9
 800073c:	0c26      	lsrs	r6, r4, #16
 800073e:	0424      	lsls	r4, r4, #16
 8000740:	0c22      	lsrs	r2, r4, #16
 8000742:	0404      	lsls	r4, r0, #16
 8000744:	0c24      	lsrs	r4, r4, #16
 8000746:	464b      	mov	r3, r9
 8000748:	0020      	movs	r0, r4
 800074a:	0c1b      	lsrs	r3, r3, #16
 800074c:	4350      	muls	r0, r2
 800074e:	4374      	muls	r4, r6
 8000750:	435a      	muls	r2, r3
 8000752:	435e      	muls	r6, r3
 8000754:	1912      	adds	r2, r2, r4
 8000756:	0c03      	lsrs	r3, r0, #16
 8000758:	189b      	adds	r3, r3, r2
 800075a:	429c      	cmp	r4, r3
 800075c:	d903      	bls.n	8000766 <__aeabi_fmul+0x10e>
 800075e:	2280      	movs	r2, #128	; 0x80
 8000760:	0252      	lsls	r2, r2, #9
 8000762:	4694      	mov	ip, r2
 8000764:	4466      	add	r6, ip
 8000766:	0400      	lsls	r0, r0, #16
 8000768:	041a      	lsls	r2, r3, #16
 800076a:	0c00      	lsrs	r0, r0, #16
 800076c:	1812      	adds	r2, r2, r0
 800076e:	0194      	lsls	r4, r2, #6
 8000770:	1e60      	subs	r0, r4, #1
 8000772:	4184      	sbcs	r4, r0
 8000774:	0c1b      	lsrs	r3, r3, #16
 8000776:	0e92      	lsrs	r2, r2, #26
 8000778:	199b      	adds	r3, r3, r6
 800077a:	4314      	orrs	r4, r2
 800077c:	019b      	lsls	r3, r3, #6
 800077e:	431c      	orrs	r4, r3
 8000780:	011b      	lsls	r3, r3, #4
 8000782:	d572      	bpl.n	800086a <__aeabi_fmul+0x212>
 8000784:	2001      	movs	r0, #1
 8000786:	0863      	lsrs	r3, r4, #1
 8000788:	4004      	ands	r4, r0
 800078a:	431c      	orrs	r4, r3
 800078c:	0008      	movs	r0, r1
 800078e:	307f      	adds	r0, #127	; 0x7f
 8000790:	2800      	cmp	r0, #0
 8000792:	dd3c      	ble.n	800080e <__aeabi_fmul+0x1b6>
 8000794:	0763      	lsls	r3, r4, #29
 8000796:	d004      	beq.n	80007a2 <__aeabi_fmul+0x14a>
 8000798:	230f      	movs	r3, #15
 800079a:	4023      	ands	r3, r4
 800079c:	2b04      	cmp	r3, #4
 800079e:	d000      	beq.n	80007a2 <__aeabi_fmul+0x14a>
 80007a0:	3404      	adds	r4, #4
 80007a2:	0123      	lsls	r3, r4, #4
 80007a4:	d503      	bpl.n	80007ae <__aeabi_fmul+0x156>
 80007a6:	3180      	adds	r1, #128	; 0x80
 80007a8:	0008      	movs	r0, r1
 80007aa:	4b37      	ldr	r3, [pc, #220]	; (8000888 <__aeabi_fmul+0x230>)
 80007ac:	401c      	ands	r4, r3
 80007ae:	28fe      	cmp	r0, #254	; 0xfe
 80007b0:	dcc0      	bgt.n	8000734 <__aeabi_fmul+0xdc>
 80007b2:	01a4      	lsls	r4, r4, #6
 80007b4:	0a64      	lsrs	r4, r4, #9
 80007b6:	b2c0      	uxtb	r0, r0
 80007b8:	e79a      	b.n	80006f0 <__aeabi_fmul+0x98>
 80007ba:	0037      	movs	r7, r6
 80007bc:	e78e      	b.n	80006dc <__aeabi_fmul+0x84>
 80007be:	4652      	mov	r2, sl
 80007c0:	2303      	movs	r3, #3
 80007c2:	431a      	orrs	r2, r3
 80007c4:	4692      	mov	sl, r2
 80007c6:	2003      	movs	r0, #3
 80007c8:	e771      	b.n	80006ae <__aeabi_fmul+0x56>
 80007ca:	4648      	mov	r0, r9
 80007cc:	f000 fa82 	bl	8000cd4 <__clzsi2>
 80007d0:	464a      	mov	r2, r9
 80007d2:	1f43      	subs	r3, r0, #5
 80007d4:	409a      	lsls	r2, r3
 80007d6:	1a2d      	subs	r5, r5, r0
 80007d8:	4691      	mov	r9, r2
 80007da:	2000      	movs	r0, #0
 80007dc:	3d76      	subs	r5, #118	; 0x76
 80007de:	e766      	b.n	80006ae <__aeabi_fmul+0x56>
 80007e0:	230c      	movs	r3, #12
 80007e2:	469a      	mov	sl, r3
 80007e4:	3b09      	subs	r3, #9
 80007e6:	25ff      	movs	r5, #255	; 0xff
 80007e8:	469b      	mov	fp, r3
 80007ea:	e74d      	b.n	8000688 <__aeabi_fmul+0x30>
 80007ec:	0020      	movs	r0, r4
 80007ee:	f000 fa71 	bl	8000cd4 <__clzsi2>
 80007f2:	2576      	movs	r5, #118	; 0x76
 80007f4:	1f43      	subs	r3, r0, #5
 80007f6:	409c      	lsls	r4, r3
 80007f8:	2300      	movs	r3, #0
 80007fa:	426d      	negs	r5, r5
 80007fc:	469a      	mov	sl, r3
 80007fe:	469b      	mov	fp, r3
 8000800:	1a2d      	subs	r5, r5, r0
 8000802:	e741      	b.n	8000688 <__aeabi_fmul+0x30>
 8000804:	2480      	movs	r4, #128	; 0x80
 8000806:	2700      	movs	r7, #0
 8000808:	20ff      	movs	r0, #255	; 0xff
 800080a:	03e4      	lsls	r4, r4, #15
 800080c:	e770      	b.n	80006f0 <__aeabi_fmul+0x98>
 800080e:	2301      	movs	r3, #1
 8000810:	1a1b      	subs	r3, r3, r0
 8000812:	2b1b      	cmp	r3, #27
 8000814:	dd00      	ble.n	8000818 <__aeabi_fmul+0x1c0>
 8000816:	e769      	b.n	80006ec <__aeabi_fmul+0x94>
 8000818:	319e      	adds	r1, #158	; 0x9e
 800081a:	0020      	movs	r0, r4
 800081c:	408c      	lsls	r4, r1
 800081e:	40d8      	lsrs	r0, r3
 8000820:	1e63      	subs	r3, r4, #1
 8000822:	419c      	sbcs	r4, r3
 8000824:	4304      	orrs	r4, r0
 8000826:	0763      	lsls	r3, r4, #29
 8000828:	d004      	beq.n	8000834 <__aeabi_fmul+0x1dc>
 800082a:	230f      	movs	r3, #15
 800082c:	4023      	ands	r3, r4
 800082e:	2b04      	cmp	r3, #4
 8000830:	d000      	beq.n	8000834 <__aeabi_fmul+0x1dc>
 8000832:	3404      	adds	r4, #4
 8000834:	0163      	lsls	r3, r4, #5
 8000836:	d51a      	bpl.n	800086e <__aeabi_fmul+0x216>
 8000838:	2001      	movs	r0, #1
 800083a:	2400      	movs	r4, #0
 800083c:	e758      	b.n	80006f0 <__aeabi_fmul+0x98>
 800083e:	2080      	movs	r0, #128	; 0x80
 8000840:	03c0      	lsls	r0, r0, #15
 8000842:	4204      	tst	r4, r0
 8000844:	d009      	beq.n	800085a <__aeabi_fmul+0x202>
 8000846:	464b      	mov	r3, r9
 8000848:	4203      	tst	r3, r0
 800084a:	d106      	bne.n	800085a <__aeabi_fmul+0x202>
 800084c:	464c      	mov	r4, r9
 800084e:	4304      	orrs	r4, r0
 8000850:	0264      	lsls	r4, r4, #9
 8000852:	4647      	mov	r7, r8
 8000854:	20ff      	movs	r0, #255	; 0xff
 8000856:	0a64      	lsrs	r4, r4, #9
 8000858:	e74a      	b.n	80006f0 <__aeabi_fmul+0x98>
 800085a:	2080      	movs	r0, #128	; 0x80
 800085c:	03c0      	lsls	r0, r0, #15
 800085e:	4304      	orrs	r4, r0
 8000860:	0264      	lsls	r4, r4, #9
 8000862:	0037      	movs	r7, r6
 8000864:	20ff      	movs	r0, #255	; 0xff
 8000866:	0a64      	lsrs	r4, r4, #9
 8000868:	e742      	b.n	80006f0 <__aeabi_fmul+0x98>
 800086a:	0029      	movs	r1, r5
 800086c:	e78e      	b.n	800078c <__aeabi_fmul+0x134>
 800086e:	01a4      	lsls	r4, r4, #6
 8000870:	2000      	movs	r0, #0
 8000872:	0a64      	lsrs	r4, r4, #9
 8000874:	e73c      	b.n	80006f0 <__aeabi_fmul+0x98>
 8000876:	2080      	movs	r0, #128	; 0x80
 8000878:	03c0      	lsls	r0, r0, #15
 800087a:	4304      	orrs	r4, r0
 800087c:	0264      	lsls	r4, r4, #9
 800087e:	20ff      	movs	r0, #255	; 0xff
 8000880:	0a64      	lsrs	r4, r4, #9
 8000882:	e735      	b.n	80006f0 <__aeabi_fmul+0x98>
 8000884:	08006d2c 	.word	0x08006d2c
 8000888:	f7ffffff 	.word	0xf7ffffff

0800088c <__aeabi_fsub>:
 800088c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800088e:	4646      	mov	r6, r8
 8000890:	46d6      	mov	lr, sl
 8000892:	464f      	mov	r7, r9
 8000894:	0243      	lsls	r3, r0, #9
 8000896:	0a5b      	lsrs	r3, r3, #9
 8000898:	00da      	lsls	r2, r3, #3
 800089a:	4694      	mov	ip, r2
 800089c:	024a      	lsls	r2, r1, #9
 800089e:	b5c0      	push	{r6, r7, lr}
 80008a0:	0044      	lsls	r4, r0, #1
 80008a2:	0a56      	lsrs	r6, r2, #9
 80008a4:	1c05      	adds	r5, r0, #0
 80008a6:	46b0      	mov	r8, r6
 80008a8:	0e24      	lsrs	r4, r4, #24
 80008aa:	004e      	lsls	r6, r1, #1
 80008ac:	0992      	lsrs	r2, r2, #6
 80008ae:	001f      	movs	r7, r3
 80008b0:	0020      	movs	r0, r4
 80008b2:	4692      	mov	sl, r2
 80008b4:	0fed      	lsrs	r5, r5, #31
 80008b6:	0e36      	lsrs	r6, r6, #24
 80008b8:	0fc9      	lsrs	r1, r1, #31
 80008ba:	2eff      	cmp	r6, #255	; 0xff
 80008bc:	d100      	bne.n	80008c0 <__aeabi_fsub+0x34>
 80008be:	e07f      	b.n	80009c0 <__aeabi_fsub+0x134>
 80008c0:	2201      	movs	r2, #1
 80008c2:	4051      	eors	r1, r2
 80008c4:	428d      	cmp	r5, r1
 80008c6:	d051      	beq.n	800096c <__aeabi_fsub+0xe0>
 80008c8:	1ba2      	subs	r2, r4, r6
 80008ca:	4691      	mov	r9, r2
 80008cc:	2a00      	cmp	r2, #0
 80008ce:	dc00      	bgt.n	80008d2 <__aeabi_fsub+0x46>
 80008d0:	e07e      	b.n	80009d0 <__aeabi_fsub+0x144>
 80008d2:	2e00      	cmp	r6, #0
 80008d4:	d100      	bne.n	80008d8 <__aeabi_fsub+0x4c>
 80008d6:	e099      	b.n	8000a0c <__aeabi_fsub+0x180>
 80008d8:	2cff      	cmp	r4, #255	; 0xff
 80008da:	d100      	bne.n	80008de <__aeabi_fsub+0x52>
 80008dc:	e08c      	b.n	80009f8 <__aeabi_fsub+0x16c>
 80008de:	2380      	movs	r3, #128	; 0x80
 80008e0:	4652      	mov	r2, sl
 80008e2:	04db      	lsls	r3, r3, #19
 80008e4:	431a      	orrs	r2, r3
 80008e6:	4692      	mov	sl, r2
 80008e8:	464a      	mov	r2, r9
 80008ea:	2301      	movs	r3, #1
 80008ec:	2a1b      	cmp	r2, #27
 80008ee:	dc08      	bgt.n	8000902 <__aeabi_fsub+0x76>
 80008f0:	4653      	mov	r3, sl
 80008f2:	2120      	movs	r1, #32
 80008f4:	40d3      	lsrs	r3, r2
 80008f6:	1a89      	subs	r1, r1, r2
 80008f8:	4652      	mov	r2, sl
 80008fa:	408a      	lsls	r2, r1
 80008fc:	1e51      	subs	r1, r2, #1
 80008fe:	418a      	sbcs	r2, r1
 8000900:	4313      	orrs	r3, r2
 8000902:	4662      	mov	r2, ip
 8000904:	1ad3      	subs	r3, r2, r3
 8000906:	015a      	lsls	r2, r3, #5
 8000908:	d400      	bmi.n	800090c <__aeabi_fsub+0x80>
 800090a:	e0f3      	b.n	8000af4 <__aeabi_fsub+0x268>
 800090c:	019b      	lsls	r3, r3, #6
 800090e:	099e      	lsrs	r6, r3, #6
 8000910:	0030      	movs	r0, r6
 8000912:	f000 f9df 	bl	8000cd4 <__clzsi2>
 8000916:	3805      	subs	r0, #5
 8000918:	4086      	lsls	r6, r0
 800091a:	4284      	cmp	r4, r0
 800091c:	dd00      	ble.n	8000920 <__aeabi_fsub+0x94>
 800091e:	e0f7      	b.n	8000b10 <__aeabi_fsub+0x284>
 8000920:	0032      	movs	r2, r6
 8000922:	1b04      	subs	r4, r0, r4
 8000924:	2020      	movs	r0, #32
 8000926:	3401      	adds	r4, #1
 8000928:	40e2      	lsrs	r2, r4
 800092a:	1b04      	subs	r4, r0, r4
 800092c:	40a6      	lsls	r6, r4
 800092e:	0033      	movs	r3, r6
 8000930:	1e5e      	subs	r6, r3, #1
 8000932:	41b3      	sbcs	r3, r6
 8000934:	2400      	movs	r4, #0
 8000936:	4313      	orrs	r3, r2
 8000938:	075a      	lsls	r2, r3, #29
 800093a:	d004      	beq.n	8000946 <__aeabi_fsub+0xba>
 800093c:	220f      	movs	r2, #15
 800093e:	401a      	ands	r2, r3
 8000940:	2a04      	cmp	r2, #4
 8000942:	d000      	beq.n	8000946 <__aeabi_fsub+0xba>
 8000944:	3304      	adds	r3, #4
 8000946:	015a      	lsls	r2, r3, #5
 8000948:	d400      	bmi.n	800094c <__aeabi_fsub+0xc0>
 800094a:	e0d6      	b.n	8000afa <__aeabi_fsub+0x26e>
 800094c:	1c62      	adds	r2, r4, #1
 800094e:	2cfe      	cmp	r4, #254	; 0xfe
 8000950:	d100      	bne.n	8000954 <__aeabi_fsub+0xc8>
 8000952:	e0da      	b.n	8000b0a <__aeabi_fsub+0x27e>
 8000954:	019b      	lsls	r3, r3, #6
 8000956:	0a5f      	lsrs	r7, r3, #9
 8000958:	b2d0      	uxtb	r0, r2
 800095a:	05c0      	lsls	r0, r0, #23
 800095c:	4338      	orrs	r0, r7
 800095e:	07ed      	lsls	r5, r5, #31
 8000960:	4328      	orrs	r0, r5
 8000962:	bce0      	pop	{r5, r6, r7}
 8000964:	46ba      	mov	sl, r7
 8000966:	46b1      	mov	r9, r6
 8000968:	46a8      	mov	r8, r5
 800096a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800096c:	1ba2      	subs	r2, r4, r6
 800096e:	4691      	mov	r9, r2
 8000970:	2a00      	cmp	r2, #0
 8000972:	dd63      	ble.n	8000a3c <__aeabi_fsub+0x1b0>
 8000974:	2e00      	cmp	r6, #0
 8000976:	d100      	bne.n	800097a <__aeabi_fsub+0xee>
 8000978:	e099      	b.n	8000aae <__aeabi_fsub+0x222>
 800097a:	2cff      	cmp	r4, #255	; 0xff
 800097c:	d03c      	beq.n	80009f8 <__aeabi_fsub+0x16c>
 800097e:	2380      	movs	r3, #128	; 0x80
 8000980:	4652      	mov	r2, sl
 8000982:	04db      	lsls	r3, r3, #19
 8000984:	431a      	orrs	r2, r3
 8000986:	4692      	mov	sl, r2
 8000988:	464a      	mov	r2, r9
 800098a:	2301      	movs	r3, #1
 800098c:	2a1b      	cmp	r2, #27
 800098e:	dc08      	bgt.n	80009a2 <__aeabi_fsub+0x116>
 8000990:	4653      	mov	r3, sl
 8000992:	2120      	movs	r1, #32
 8000994:	40d3      	lsrs	r3, r2
 8000996:	1a89      	subs	r1, r1, r2
 8000998:	4652      	mov	r2, sl
 800099a:	408a      	lsls	r2, r1
 800099c:	1e51      	subs	r1, r2, #1
 800099e:	418a      	sbcs	r2, r1
 80009a0:	4313      	orrs	r3, r2
 80009a2:	4463      	add	r3, ip
 80009a4:	015a      	lsls	r2, r3, #5
 80009a6:	d400      	bmi.n	80009aa <__aeabi_fsub+0x11e>
 80009a8:	e0a4      	b.n	8000af4 <__aeabi_fsub+0x268>
 80009aa:	3401      	adds	r4, #1
 80009ac:	2cff      	cmp	r4, #255	; 0xff
 80009ae:	d100      	bne.n	80009b2 <__aeabi_fsub+0x126>
 80009b0:	e0ab      	b.n	8000b0a <__aeabi_fsub+0x27e>
 80009b2:	2201      	movs	r2, #1
 80009b4:	4997      	ldr	r1, [pc, #604]	; (8000c14 <__aeabi_fsub+0x388>)
 80009b6:	401a      	ands	r2, r3
 80009b8:	085b      	lsrs	r3, r3, #1
 80009ba:	400b      	ands	r3, r1
 80009bc:	4313      	orrs	r3, r2
 80009be:	e7bb      	b.n	8000938 <__aeabi_fsub+0xac>
 80009c0:	2a00      	cmp	r2, #0
 80009c2:	d032      	beq.n	8000a2a <__aeabi_fsub+0x19e>
 80009c4:	428d      	cmp	r5, r1
 80009c6:	d035      	beq.n	8000a34 <__aeabi_fsub+0x1a8>
 80009c8:	22ff      	movs	r2, #255	; 0xff
 80009ca:	4252      	negs	r2, r2
 80009cc:	4691      	mov	r9, r2
 80009ce:	44a1      	add	r9, r4
 80009d0:	464a      	mov	r2, r9
 80009d2:	2a00      	cmp	r2, #0
 80009d4:	d051      	beq.n	8000a7a <__aeabi_fsub+0x1ee>
 80009d6:	1b30      	subs	r0, r6, r4
 80009d8:	2c00      	cmp	r4, #0
 80009da:	d000      	beq.n	80009de <__aeabi_fsub+0x152>
 80009dc:	e09c      	b.n	8000b18 <__aeabi_fsub+0x28c>
 80009de:	4663      	mov	r3, ip
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d100      	bne.n	80009e6 <__aeabi_fsub+0x15a>
 80009e4:	e0df      	b.n	8000ba6 <__aeabi_fsub+0x31a>
 80009e6:	3801      	subs	r0, #1
 80009e8:	2800      	cmp	r0, #0
 80009ea:	d100      	bne.n	80009ee <__aeabi_fsub+0x162>
 80009ec:	e0f7      	b.n	8000bde <__aeabi_fsub+0x352>
 80009ee:	2eff      	cmp	r6, #255	; 0xff
 80009f0:	d000      	beq.n	80009f4 <__aeabi_fsub+0x168>
 80009f2:	e099      	b.n	8000b28 <__aeabi_fsub+0x29c>
 80009f4:	000d      	movs	r5, r1
 80009f6:	4643      	mov	r3, r8
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d100      	bne.n	80009fe <__aeabi_fsub+0x172>
 80009fc:	e085      	b.n	8000b0a <__aeabi_fsub+0x27e>
 80009fe:	2780      	movs	r7, #128	; 0x80
 8000a00:	03ff      	lsls	r7, r7, #15
 8000a02:	431f      	orrs	r7, r3
 8000a04:	027f      	lsls	r7, r7, #9
 8000a06:	20ff      	movs	r0, #255	; 0xff
 8000a08:	0a7f      	lsrs	r7, r7, #9
 8000a0a:	e7a6      	b.n	800095a <__aeabi_fsub+0xce>
 8000a0c:	4652      	mov	r2, sl
 8000a0e:	2a00      	cmp	r2, #0
 8000a10:	d074      	beq.n	8000afc <__aeabi_fsub+0x270>
 8000a12:	2201      	movs	r2, #1
 8000a14:	4252      	negs	r2, r2
 8000a16:	4690      	mov	r8, r2
 8000a18:	44c1      	add	r9, r8
 8000a1a:	464a      	mov	r2, r9
 8000a1c:	2a00      	cmp	r2, #0
 8000a1e:	d100      	bne.n	8000a22 <__aeabi_fsub+0x196>
 8000a20:	e0c8      	b.n	8000bb4 <__aeabi_fsub+0x328>
 8000a22:	2cff      	cmp	r4, #255	; 0xff
 8000a24:	d000      	beq.n	8000a28 <__aeabi_fsub+0x19c>
 8000a26:	e75f      	b.n	80008e8 <__aeabi_fsub+0x5c>
 8000a28:	e7e6      	b.n	80009f8 <__aeabi_fsub+0x16c>
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	4051      	eors	r1, r2
 8000a2e:	42a9      	cmp	r1, r5
 8000a30:	d000      	beq.n	8000a34 <__aeabi_fsub+0x1a8>
 8000a32:	e749      	b.n	80008c8 <__aeabi_fsub+0x3c>
 8000a34:	22ff      	movs	r2, #255	; 0xff
 8000a36:	4252      	negs	r2, r2
 8000a38:	4691      	mov	r9, r2
 8000a3a:	44a1      	add	r9, r4
 8000a3c:	464a      	mov	r2, r9
 8000a3e:	2a00      	cmp	r2, #0
 8000a40:	d043      	beq.n	8000aca <__aeabi_fsub+0x23e>
 8000a42:	1b31      	subs	r1, r6, r4
 8000a44:	2c00      	cmp	r4, #0
 8000a46:	d100      	bne.n	8000a4a <__aeabi_fsub+0x1be>
 8000a48:	e08c      	b.n	8000b64 <__aeabi_fsub+0x2d8>
 8000a4a:	2eff      	cmp	r6, #255	; 0xff
 8000a4c:	d100      	bne.n	8000a50 <__aeabi_fsub+0x1c4>
 8000a4e:	e092      	b.n	8000b76 <__aeabi_fsub+0x2ea>
 8000a50:	2380      	movs	r3, #128	; 0x80
 8000a52:	4662      	mov	r2, ip
 8000a54:	04db      	lsls	r3, r3, #19
 8000a56:	431a      	orrs	r2, r3
 8000a58:	4694      	mov	ip, r2
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	291b      	cmp	r1, #27
 8000a5e:	dc09      	bgt.n	8000a74 <__aeabi_fsub+0x1e8>
 8000a60:	2020      	movs	r0, #32
 8000a62:	4663      	mov	r3, ip
 8000a64:	4662      	mov	r2, ip
 8000a66:	40cb      	lsrs	r3, r1
 8000a68:	1a41      	subs	r1, r0, r1
 8000a6a:	408a      	lsls	r2, r1
 8000a6c:	0011      	movs	r1, r2
 8000a6e:	1e48      	subs	r0, r1, #1
 8000a70:	4181      	sbcs	r1, r0
 8000a72:	430b      	orrs	r3, r1
 8000a74:	0034      	movs	r4, r6
 8000a76:	4453      	add	r3, sl
 8000a78:	e794      	b.n	80009a4 <__aeabi_fsub+0x118>
 8000a7a:	22fe      	movs	r2, #254	; 0xfe
 8000a7c:	1c66      	adds	r6, r4, #1
 8000a7e:	4232      	tst	r2, r6
 8000a80:	d164      	bne.n	8000b4c <__aeabi_fsub+0x2c0>
 8000a82:	2c00      	cmp	r4, #0
 8000a84:	d000      	beq.n	8000a88 <__aeabi_fsub+0x1fc>
 8000a86:	e082      	b.n	8000b8e <__aeabi_fsub+0x302>
 8000a88:	4663      	mov	r3, ip
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d100      	bne.n	8000a90 <__aeabi_fsub+0x204>
 8000a8e:	e0ab      	b.n	8000be8 <__aeabi_fsub+0x35c>
 8000a90:	4653      	mov	r3, sl
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d100      	bne.n	8000a98 <__aeabi_fsub+0x20c>
 8000a96:	e760      	b.n	800095a <__aeabi_fsub+0xce>
 8000a98:	4663      	mov	r3, ip
 8000a9a:	4652      	mov	r2, sl
 8000a9c:	1a9b      	subs	r3, r3, r2
 8000a9e:	015a      	lsls	r2, r3, #5
 8000aa0:	d400      	bmi.n	8000aa4 <__aeabi_fsub+0x218>
 8000aa2:	e0aa      	b.n	8000bfa <__aeabi_fsub+0x36e>
 8000aa4:	4663      	mov	r3, ip
 8000aa6:	4652      	mov	r2, sl
 8000aa8:	000d      	movs	r5, r1
 8000aaa:	1ad3      	subs	r3, r2, r3
 8000aac:	e744      	b.n	8000938 <__aeabi_fsub+0xac>
 8000aae:	4652      	mov	r2, sl
 8000ab0:	2a00      	cmp	r2, #0
 8000ab2:	d023      	beq.n	8000afc <__aeabi_fsub+0x270>
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	4252      	negs	r2, r2
 8000ab8:	4690      	mov	r8, r2
 8000aba:	44c1      	add	r9, r8
 8000abc:	464a      	mov	r2, r9
 8000abe:	2a00      	cmp	r2, #0
 8000ac0:	d075      	beq.n	8000bae <__aeabi_fsub+0x322>
 8000ac2:	2cff      	cmp	r4, #255	; 0xff
 8000ac4:	d000      	beq.n	8000ac8 <__aeabi_fsub+0x23c>
 8000ac6:	e75f      	b.n	8000988 <__aeabi_fsub+0xfc>
 8000ac8:	e796      	b.n	80009f8 <__aeabi_fsub+0x16c>
 8000aca:	26fe      	movs	r6, #254	; 0xfe
 8000acc:	3401      	adds	r4, #1
 8000ace:	4226      	tst	r6, r4
 8000ad0:	d153      	bne.n	8000b7a <__aeabi_fsub+0x2ee>
 8000ad2:	2800      	cmp	r0, #0
 8000ad4:	d172      	bne.n	8000bbc <__aeabi_fsub+0x330>
 8000ad6:	4663      	mov	r3, ip
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d100      	bne.n	8000ade <__aeabi_fsub+0x252>
 8000adc:	e093      	b.n	8000c06 <__aeabi_fsub+0x37a>
 8000ade:	4653      	mov	r3, sl
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d100      	bne.n	8000ae6 <__aeabi_fsub+0x25a>
 8000ae4:	e739      	b.n	800095a <__aeabi_fsub+0xce>
 8000ae6:	4463      	add	r3, ip
 8000ae8:	2400      	movs	r4, #0
 8000aea:	015a      	lsls	r2, r3, #5
 8000aec:	d502      	bpl.n	8000af4 <__aeabi_fsub+0x268>
 8000aee:	4a4a      	ldr	r2, [pc, #296]	; (8000c18 <__aeabi_fsub+0x38c>)
 8000af0:	3401      	adds	r4, #1
 8000af2:	4013      	ands	r3, r2
 8000af4:	075a      	lsls	r2, r3, #29
 8000af6:	d000      	beq.n	8000afa <__aeabi_fsub+0x26e>
 8000af8:	e720      	b.n	800093c <__aeabi_fsub+0xb0>
 8000afa:	08db      	lsrs	r3, r3, #3
 8000afc:	2cff      	cmp	r4, #255	; 0xff
 8000afe:	d100      	bne.n	8000b02 <__aeabi_fsub+0x276>
 8000b00:	e77a      	b.n	80009f8 <__aeabi_fsub+0x16c>
 8000b02:	025b      	lsls	r3, r3, #9
 8000b04:	0a5f      	lsrs	r7, r3, #9
 8000b06:	b2e0      	uxtb	r0, r4
 8000b08:	e727      	b.n	800095a <__aeabi_fsub+0xce>
 8000b0a:	20ff      	movs	r0, #255	; 0xff
 8000b0c:	2700      	movs	r7, #0
 8000b0e:	e724      	b.n	800095a <__aeabi_fsub+0xce>
 8000b10:	4b41      	ldr	r3, [pc, #260]	; (8000c18 <__aeabi_fsub+0x38c>)
 8000b12:	1a24      	subs	r4, r4, r0
 8000b14:	4033      	ands	r3, r6
 8000b16:	e70f      	b.n	8000938 <__aeabi_fsub+0xac>
 8000b18:	2eff      	cmp	r6, #255	; 0xff
 8000b1a:	d100      	bne.n	8000b1e <__aeabi_fsub+0x292>
 8000b1c:	e76a      	b.n	80009f4 <__aeabi_fsub+0x168>
 8000b1e:	2380      	movs	r3, #128	; 0x80
 8000b20:	4662      	mov	r2, ip
 8000b22:	04db      	lsls	r3, r3, #19
 8000b24:	431a      	orrs	r2, r3
 8000b26:	4694      	mov	ip, r2
 8000b28:	2301      	movs	r3, #1
 8000b2a:	281b      	cmp	r0, #27
 8000b2c:	dc09      	bgt.n	8000b42 <__aeabi_fsub+0x2b6>
 8000b2e:	2420      	movs	r4, #32
 8000b30:	4663      	mov	r3, ip
 8000b32:	4662      	mov	r2, ip
 8000b34:	40c3      	lsrs	r3, r0
 8000b36:	1a20      	subs	r0, r4, r0
 8000b38:	4082      	lsls	r2, r0
 8000b3a:	0010      	movs	r0, r2
 8000b3c:	1e44      	subs	r4, r0, #1
 8000b3e:	41a0      	sbcs	r0, r4
 8000b40:	4303      	orrs	r3, r0
 8000b42:	4652      	mov	r2, sl
 8000b44:	000d      	movs	r5, r1
 8000b46:	0034      	movs	r4, r6
 8000b48:	1ad3      	subs	r3, r2, r3
 8000b4a:	e6dc      	b.n	8000906 <__aeabi_fsub+0x7a>
 8000b4c:	4663      	mov	r3, ip
 8000b4e:	4652      	mov	r2, sl
 8000b50:	1a9e      	subs	r6, r3, r2
 8000b52:	0173      	lsls	r3, r6, #5
 8000b54:	d417      	bmi.n	8000b86 <__aeabi_fsub+0x2fa>
 8000b56:	2e00      	cmp	r6, #0
 8000b58:	d000      	beq.n	8000b5c <__aeabi_fsub+0x2d0>
 8000b5a:	e6d9      	b.n	8000910 <__aeabi_fsub+0x84>
 8000b5c:	2500      	movs	r5, #0
 8000b5e:	2000      	movs	r0, #0
 8000b60:	2700      	movs	r7, #0
 8000b62:	e6fa      	b.n	800095a <__aeabi_fsub+0xce>
 8000b64:	4663      	mov	r3, ip
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d044      	beq.n	8000bf4 <__aeabi_fsub+0x368>
 8000b6a:	3901      	subs	r1, #1
 8000b6c:	2900      	cmp	r1, #0
 8000b6e:	d04c      	beq.n	8000c0a <__aeabi_fsub+0x37e>
 8000b70:	2eff      	cmp	r6, #255	; 0xff
 8000b72:	d000      	beq.n	8000b76 <__aeabi_fsub+0x2ea>
 8000b74:	e771      	b.n	8000a5a <__aeabi_fsub+0x1ce>
 8000b76:	4643      	mov	r3, r8
 8000b78:	e73e      	b.n	80009f8 <__aeabi_fsub+0x16c>
 8000b7a:	2cff      	cmp	r4, #255	; 0xff
 8000b7c:	d0c5      	beq.n	8000b0a <__aeabi_fsub+0x27e>
 8000b7e:	4652      	mov	r2, sl
 8000b80:	4462      	add	r2, ip
 8000b82:	0853      	lsrs	r3, r2, #1
 8000b84:	e7b6      	b.n	8000af4 <__aeabi_fsub+0x268>
 8000b86:	4663      	mov	r3, ip
 8000b88:	000d      	movs	r5, r1
 8000b8a:	1ad6      	subs	r6, r2, r3
 8000b8c:	e6c0      	b.n	8000910 <__aeabi_fsub+0x84>
 8000b8e:	4662      	mov	r2, ip
 8000b90:	2a00      	cmp	r2, #0
 8000b92:	d116      	bne.n	8000bc2 <__aeabi_fsub+0x336>
 8000b94:	4653      	mov	r3, sl
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d000      	beq.n	8000b9c <__aeabi_fsub+0x310>
 8000b9a:	e72b      	b.n	80009f4 <__aeabi_fsub+0x168>
 8000b9c:	2780      	movs	r7, #128	; 0x80
 8000b9e:	2500      	movs	r5, #0
 8000ba0:	20ff      	movs	r0, #255	; 0xff
 8000ba2:	03ff      	lsls	r7, r7, #15
 8000ba4:	e6d9      	b.n	800095a <__aeabi_fsub+0xce>
 8000ba6:	000d      	movs	r5, r1
 8000ba8:	4643      	mov	r3, r8
 8000baa:	0034      	movs	r4, r6
 8000bac:	e7a6      	b.n	8000afc <__aeabi_fsub+0x270>
 8000bae:	4653      	mov	r3, sl
 8000bb0:	4463      	add	r3, ip
 8000bb2:	e6f7      	b.n	80009a4 <__aeabi_fsub+0x118>
 8000bb4:	4663      	mov	r3, ip
 8000bb6:	4652      	mov	r2, sl
 8000bb8:	1a9b      	subs	r3, r3, r2
 8000bba:	e6a4      	b.n	8000906 <__aeabi_fsub+0x7a>
 8000bbc:	4662      	mov	r2, ip
 8000bbe:	2a00      	cmp	r2, #0
 8000bc0:	d0d9      	beq.n	8000b76 <__aeabi_fsub+0x2ea>
 8000bc2:	4652      	mov	r2, sl
 8000bc4:	2a00      	cmp	r2, #0
 8000bc6:	d100      	bne.n	8000bca <__aeabi_fsub+0x33e>
 8000bc8:	e716      	b.n	80009f8 <__aeabi_fsub+0x16c>
 8000bca:	2280      	movs	r2, #128	; 0x80
 8000bcc:	03d2      	lsls	r2, r2, #15
 8000bce:	4213      	tst	r3, r2
 8000bd0:	d100      	bne.n	8000bd4 <__aeabi_fsub+0x348>
 8000bd2:	e711      	b.n	80009f8 <__aeabi_fsub+0x16c>
 8000bd4:	4640      	mov	r0, r8
 8000bd6:	4210      	tst	r0, r2
 8000bd8:	d000      	beq.n	8000bdc <__aeabi_fsub+0x350>
 8000bda:	e70d      	b.n	80009f8 <__aeabi_fsub+0x16c>
 8000bdc:	e70a      	b.n	80009f4 <__aeabi_fsub+0x168>
 8000bde:	4652      	mov	r2, sl
 8000be0:	000d      	movs	r5, r1
 8000be2:	0034      	movs	r4, r6
 8000be4:	1ad3      	subs	r3, r2, r3
 8000be6:	e68e      	b.n	8000906 <__aeabi_fsub+0x7a>
 8000be8:	4653      	mov	r3, sl
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d008      	beq.n	8000c00 <__aeabi_fsub+0x374>
 8000bee:	000d      	movs	r5, r1
 8000bf0:	4647      	mov	r7, r8
 8000bf2:	e6b2      	b.n	800095a <__aeabi_fsub+0xce>
 8000bf4:	4643      	mov	r3, r8
 8000bf6:	0034      	movs	r4, r6
 8000bf8:	e780      	b.n	8000afc <__aeabi_fsub+0x270>
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d000      	beq.n	8000c00 <__aeabi_fsub+0x374>
 8000bfe:	e779      	b.n	8000af4 <__aeabi_fsub+0x268>
 8000c00:	2500      	movs	r5, #0
 8000c02:	2700      	movs	r7, #0
 8000c04:	e6a9      	b.n	800095a <__aeabi_fsub+0xce>
 8000c06:	4647      	mov	r7, r8
 8000c08:	e6a7      	b.n	800095a <__aeabi_fsub+0xce>
 8000c0a:	4653      	mov	r3, sl
 8000c0c:	0034      	movs	r4, r6
 8000c0e:	4463      	add	r3, ip
 8000c10:	e6c8      	b.n	80009a4 <__aeabi_fsub+0x118>
 8000c12:	46c0      	nop			; (mov r8, r8)
 8000c14:	7dffffff 	.word	0x7dffffff
 8000c18:	fbffffff 	.word	0xfbffffff

08000c1c <__aeabi_f2iz>:
 8000c1c:	0241      	lsls	r1, r0, #9
 8000c1e:	0042      	lsls	r2, r0, #1
 8000c20:	0fc3      	lsrs	r3, r0, #31
 8000c22:	0a49      	lsrs	r1, r1, #9
 8000c24:	2000      	movs	r0, #0
 8000c26:	0e12      	lsrs	r2, r2, #24
 8000c28:	2a7e      	cmp	r2, #126	; 0x7e
 8000c2a:	d903      	bls.n	8000c34 <__aeabi_f2iz+0x18>
 8000c2c:	2a9d      	cmp	r2, #157	; 0x9d
 8000c2e:	d902      	bls.n	8000c36 <__aeabi_f2iz+0x1a>
 8000c30:	4a09      	ldr	r2, [pc, #36]	; (8000c58 <__aeabi_f2iz+0x3c>)
 8000c32:	1898      	adds	r0, r3, r2
 8000c34:	4770      	bx	lr
 8000c36:	2080      	movs	r0, #128	; 0x80
 8000c38:	0400      	lsls	r0, r0, #16
 8000c3a:	4301      	orrs	r1, r0
 8000c3c:	2a95      	cmp	r2, #149	; 0x95
 8000c3e:	dc07      	bgt.n	8000c50 <__aeabi_f2iz+0x34>
 8000c40:	2096      	movs	r0, #150	; 0x96
 8000c42:	1a82      	subs	r2, r0, r2
 8000c44:	40d1      	lsrs	r1, r2
 8000c46:	4248      	negs	r0, r1
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d1f3      	bne.n	8000c34 <__aeabi_f2iz+0x18>
 8000c4c:	0008      	movs	r0, r1
 8000c4e:	e7f1      	b.n	8000c34 <__aeabi_f2iz+0x18>
 8000c50:	3a96      	subs	r2, #150	; 0x96
 8000c52:	4091      	lsls	r1, r2
 8000c54:	e7f7      	b.n	8000c46 <__aeabi_f2iz+0x2a>
 8000c56:	46c0      	nop			; (mov r8, r8)
 8000c58:	7fffffff 	.word	0x7fffffff

08000c5c <__aeabi_ui2f>:
 8000c5c:	b570      	push	{r4, r5, r6, lr}
 8000c5e:	1e05      	subs	r5, r0, #0
 8000c60:	d00e      	beq.n	8000c80 <__aeabi_ui2f+0x24>
 8000c62:	f000 f837 	bl	8000cd4 <__clzsi2>
 8000c66:	239e      	movs	r3, #158	; 0x9e
 8000c68:	0004      	movs	r4, r0
 8000c6a:	1a1b      	subs	r3, r3, r0
 8000c6c:	2b96      	cmp	r3, #150	; 0x96
 8000c6e:	dc0c      	bgt.n	8000c8a <__aeabi_ui2f+0x2e>
 8000c70:	2808      	cmp	r0, #8
 8000c72:	dd01      	ble.n	8000c78 <__aeabi_ui2f+0x1c>
 8000c74:	3c08      	subs	r4, #8
 8000c76:	40a5      	lsls	r5, r4
 8000c78:	026d      	lsls	r5, r5, #9
 8000c7a:	0a6d      	lsrs	r5, r5, #9
 8000c7c:	b2d8      	uxtb	r0, r3
 8000c7e:	e001      	b.n	8000c84 <__aeabi_ui2f+0x28>
 8000c80:	2000      	movs	r0, #0
 8000c82:	2500      	movs	r5, #0
 8000c84:	05c0      	lsls	r0, r0, #23
 8000c86:	4328      	orrs	r0, r5
 8000c88:	bd70      	pop	{r4, r5, r6, pc}
 8000c8a:	2b99      	cmp	r3, #153	; 0x99
 8000c8c:	dd09      	ble.n	8000ca2 <__aeabi_ui2f+0x46>
 8000c8e:	0002      	movs	r2, r0
 8000c90:	0029      	movs	r1, r5
 8000c92:	321b      	adds	r2, #27
 8000c94:	4091      	lsls	r1, r2
 8000c96:	1e4a      	subs	r2, r1, #1
 8000c98:	4191      	sbcs	r1, r2
 8000c9a:	2205      	movs	r2, #5
 8000c9c:	1a12      	subs	r2, r2, r0
 8000c9e:	40d5      	lsrs	r5, r2
 8000ca0:	430d      	orrs	r5, r1
 8000ca2:	2c05      	cmp	r4, #5
 8000ca4:	dd01      	ble.n	8000caa <__aeabi_ui2f+0x4e>
 8000ca6:	1f62      	subs	r2, r4, #5
 8000ca8:	4095      	lsls	r5, r2
 8000caa:	0029      	movs	r1, r5
 8000cac:	4e08      	ldr	r6, [pc, #32]	; (8000cd0 <__aeabi_ui2f+0x74>)
 8000cae:	4031      	ands	r1, r6
 8000cb0:	076a      	lsls	r2, r5, #29
 8000cb2:	d009      	beq.n	8000cc8 <__aeabi_ui2f+0x6c>
 8000cb4:	200f      	movs	r0, #15
 8000cb6:	4028      	ands	r0, r5
 8000cb8:	2804      	cmp	r0, #4
 8000cba:	d005      	beq.n	8000cc8 <__aeabi_ui2f+0x6c>
 8000cbc:	3104      	adds	r1, #4
 8000cbe:	014a      	lsls	r2, r1, #5
 8000cc0:	d502      	bpl.n	8000cc8 <__aeabi_ui2f+0x6c>
 8000cc2:	239f      	movs	r3, #159	; 0x9f
 8000cc4:	4031      	ands	r1, r6
 8000cc6:	1b1b      	subs	r3, r3, r4
 8000cc8:	0189      	lsls	r1, r1, #6
 8000cca:	0a4d      	lsrs	r5, r1, #9
 8000ccc:	b2d8      	uxtb	r0, r3
 8000cce:	e7d9      	b.n	8000c84 <__aeabi_ui2f+0x28>
 8000cd0:	fbffffff 	.word	0xfbffffff

08000cd4 <__clzsi2>:
 8000cd4:	211c      	movs	r1, #28
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	041b      	lsls	r3, r3, #16
 8000cda:	4298      	cmp	r0, r3
 8000cdc:	d301      	bcc.n	8000ce2 <__clzsi2+0xe>
 8000cde:	0c00      	lsrs	r0, r0, #16
 8000ce0:	3910      	subs	r1, #16
 8000ce2:	0a1b      	lsrs	r3, r3, #8
 8000ce4:	4298      	cmp	r0, r3
 8000ce6:	d301      	bcc.n	8000cec <__clzsi2+0x18>
 8000ce8:	0a00      	lsrs	r0, r0, #8
 8000cea:	3908      	subs	r1, #8
 8000cec:	091b      	lsrs	r3, r3, #4
 8000cee:	4298      	cmp	r0, r3
 8000cf0:	d301      	bcc.n	8000cf6 <__clzsi2+0x22>
 8000cf2:	0900      	lsrs	r0, r0, #4
 8000cf4:	3904      	subs	r1, #4
 8000cf6:	a202      	add	r2, pc, #8	; (adr r2, 8000d00 <__clzsi2+0x2c>)
 8000cf8:	5c10      	ldrb	r0, [r2, r0]
 8000cfa:	1840      	adds	r0, r0, r1
 8000cfc:	4770      	bx	lr
 8000cfe:	46c0      	nop			; (mov r8, r8)
 8000d00:	02020304 	.word	0x02020304
 8000d04:	01010101 	.word	0x01010101
	...

08000d10 <app_main>:
uint32_t weight = 0;
uint32_t tara = 0;
int32_t pwm  = 0; //remove after testing
int32_t dist = 0; //remove after testing

void app_main(void){
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af02      	add	r7, sp, #8
	I2CSemaphore = xSemaphoreCreateMutex();
 8000d16:	2001      	movs	r0, #1
 8000d18:	f003 ff63 	bl	8004be2 <xQueueCreateMutex>
 8000d1c:	0002      	movs	r2, r0
 8000d1e:	4b16      	ldr	r3, [pc, #88]	; (8000d78 <app_main+0x68>)
 8000d20:	601a      	str	r2, [r3, #0]
	ReglerSemaphore = xSemaphoreCreateBinary();
 8000d22:	2203      	movs	r2, #3
 8000d24:	2100      	movs	r1, #0
 8000d26:	2001      	movs	r0, #1
 8000d28:	f003 fee4 	bl	8004af4 <xQueueGenericCreate>
 8000d2c:	0002      	movs	r2, r0
 8000d2e:	4b13      	ldr	r3, [pc, #76]	; (8000d7c <app_main+0x6c>)
 8000d30:	601a      	str	r2, [r3, #0]
	DisplaySemaphore = xSemaphoreCreateBinary();
 8000d32:	2203      	movs	r2, #3
 8000d34:	2100      	movs	r1, #0
 8000d36:	2001      	movs	r0, #1
 8000d38:	f003 fedc 	bl	8004af4 <xQueueGenericCreate>
 8000d3c:	0002      	movs	r2, r0
 8000d3e:	4b10      	ldr	r3, [pc, #64]	; (8000d80 <app_main+0x70>)
 8000d40:	601a      	str	r2, [r3, #0]
	xSemaphoreGive(ReglerSemaphore);
 8000d42:	4b0e      	ldr	r3, [pc, #56]	; (8000d7c <app_main+0x6c>)
 8000d44:	6818      	ldr	r0, [r3, #0]
 8000d46:	2300      	movs	r3, #0
 8000d48:	2200      	movs	r2, #0
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	f003 ff65 	bl	8004c1a <xQueueGenericSend>
	xSemaphoreGive(I2CSemaphore);
 8000d50:	4b09      	ldr	r3, [pc, #36]	; (8000d78 <app_main+0x68>)
 8000d52:	6818      	ldr	r0, [r3, #0]
 8000d54:	2300      	movs	r3, #0
 8000d56:	2200      	movs	r2, #0
 8000d58:	2100      	movs	r1, #0
 8000d5a:	f003 ff5e 	bl	8004c1a <xQueueGenericSend>
	xTaskCreate(ADCTestTask, "ADC-Task", (configMINIMAL_STACK_SIZE + 80), NULL, (tskIDLE_PRIORITY + 1), NULL);
 8000d5e:	4909      	ldr	r1, [pc, #36]	; (8000d84 <app_main+0x74>)
 8000d60:	4809      	ldr	r0, [pc, #36]	; (8000d88 <app_main+0x78>)
 8000d62:	2300      	movs	r3, #0
 8000d64:	9301      	str	r3, [sp, #4]
 8000d66:	2301      	movs	r3, #1
 8000d68:	9300      	str	r3, [sp, #0]
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	22d0      	movs	r2, #208	; 0xd0
 8000d6e:	f004 fb5f 	bl	8005430 <xTaskCreate>
	//xTaskCreate(I2C2Task, "I2C2-Task", (configMINIMAL_STACK_SIZE + 80), NULL, (tskIDLE_PRIORITY + 1), NULL);
	//xTaskCreate(MainTask, "Main-Task", (configMINIMAL_STACK_SIZE + 80), NULL, (tskIDLE_PRIORITY + 1), NULL);
	//xTaskCreate(ReglerISTTask, "Regler-Task", (configMINIMAL_STACK_SIZE + 80), NULL, (tskIDLE_PRIORITY + 2), NULL);
	vTaskStartScheduler();
 8000d72:	f004 fcb9 	bl	80056e8 <vTaskStartScheduler>
	/* The FreeRTOS scheduler should never return to here, except on out of memory at creating the idle task! */
	for (;;) ;
 8000d76:	e7fe      	b.n	8000d76 <app_main+0x66>
 8000d78:	20001964 	.word	0x20001964
 8000d7c:	20001938 	.word	0x20001938
 8000d80:	20001968 	.word	0x20001968
 8000d84:	08006c10 	.word	0x08006c10
 8000d88:	08000e25 	.word	0x08000e25

08000d8c <TIM7_IRQHandler>:
}

/*
 * Timer for PI-Controller
 */
void TIM7_IRQHandler(void){
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
	portBASE_TYPE higherPriorityTaskWoken = 0;
 8000d92:	2300      	movs	r3, #0
 8000d94:	607b      	str	r3, [r7, #4]
	if(ReglerSemaphore != NULL){
 8000d96:	4b0c      	ldr	r3, [pc, #48]	; (8000dc8 <TIM7_IRQHandler+0x3c>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d006      	beq.n	8000dac <TIM7_IRQHandler+0x20>
		xSemaphoreGiveFromISR(ReglerSemaphore, & higherPriorityTaskWoken);
 8000d9e:	4b0a      	ldr	r3, [pc, #40]	; (8000dc8 <TIM7_IRQHandler+0x3c>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	1d3a      	adds	r2, r7, #4
 8000da4:	0011      	movs	r1, r2
 8000da6:	0018      	movs	r0, r3
 8000da8:	f004 f86c 	bl	8004e84 <xQueueGiveFromISR>
	}
	if (higherPriorityTaskWoken != 0){
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <TIM7_IRQHandler+0x2a>
				taskYIELD();
 8000db2:	f005 fc9d 	bl	80066f0 <vPortYield>
	}
	//Clear TIM7 Update Event Flag
	TIM7->SR = ~TIM_IT_UPDATE;
 8000db6:	4b05      	ldr	r3, [pc, #20]	; (8000dcc <TIM7_IRQHandler+0x40>)
 8000db8:	2202      	movs	r2, #2
 8000dba:	4252      	negs	r2, r2
 8000dbc:	611a      	str	r2, [r3, #16]
}
 8000dbe:	46c0      	nop			; (mov r8, r8)
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	b002      	add	sp, #8
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	46c0      	nop			; (mov r8, r8)
 8000dc8:	20001938 	.word	0x20001938
 8000dcc:	40001400 	.word	0x40001400

08000dd0 <HAL_GPIO_EXTI_Callback>:

/*
 * Read the button
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	0002      	movs	r2, r0
 8000dd8:	1dbb      	adds	r3, r7, #6
 8000dda:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == BTN_TARA){
 8000ddc:	1dbb      	adds	r3, r7, #6
 8000dde:	881b      	ldrh	r3, [r3, #0]
 8000de0:	2b04      	cmp	r3, #4
 8000de2:	d103      	bne.n	8000dec <HAL_GPIO_EXTI_Callback+0x1c>
			tara = weight;
 8000de4:	4b0c      	ldr	r3, [pc, #48]	; (8000e18 <HAL_GPIO_EXTI_Callback+0x48>)
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	4b0c      	ldr	r3, [pc, #48]	; (8000e1c <HAL_GPIO_EXTI_Callback+0x4c>)
 8000dea:	601a      	str	r2, [r3, #0]
		}
	if(GPIO_Pin == BTN_UINT){
 8000dec:	1dbb      	adds	r3, r7, #6
 8000dee:	881b      	ldrh	r3, [r3, #0]
 8000df0:	2b08      	cmp	r3, #8
 8000df2:	d10d      	bne.n	8000e10 <HAL_GPIO_EXTI_Callback+0x40>
			unit_oz =!unit_oz;
 8000df4:	4b0a      	ldr	r3, [pc, #40]	; (8000e20 <HAL_GPIO_EXTI_Callback+0x50>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	1e5a      	subs	r2, r3, #1
 8000dfa:	4193      	sbcs	r3, r2
 8000dfc:	b2db      	uxtb	r3, r3
 8000dfe:	2201      	movs	r2, #1
 8000e00:	4053      	eors	r3, r2
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	1c1a      	adds	r2, r3, #0
 8000e06:	2301      	movs	r3, #1
 8000e08:	4013      	ands	r3, r2
 8000e0a:	b2da      	uxtb	r2, r3
 8000e0c:	4b04      	ldr	r3, [pc, #16]	; (8000e20 <HAL_GPIO_EXTI_Callback+0x50>)
 8000e0e:	701a      	strb	r2, [r3, #0]
	}
}
 8000e10:	46c0      	nop			; (mov r8, r8)
 8000e12:	46bd      	mov	sp, r7
 8000e14:	b002      	add	sp, #8
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	20000030 	.word	0x20000030
 8000e1c:	20000034 	.word	0x20000034
 8000e20:	2000002c 	.word	0x2000002c

08000e24 <ADCTestTask>:

/**
 * Task for testing ADC
 */
static void ADCTestTask(__attribute__ ((unused)) void *pvParameters)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]

	uint32_t current = 0;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	60fb      	str	r3, [r7, #12]
	uint32_t temp = 0;
 8000e30:	2300      	movs	r3, #0
 8000e32:	60bb      	str	r3, [r7, #8]
	while (1) {
		current = readCurrent();
 8000e34:	f000 f80a 	bl	8000e4c <readCurrent>
 8000e38:	0003      	movs	r3, r0
 8000e3a:	60fb      	str	r3, [r7, #12]
		temp = readTemp();
 8000e3c:	f000 f842 	bl	8000ec4 <readTemp>
 8000e40:	0003      	movs	r3, r0
 8000e42:	60bb      	str	r3, [r7, #8]
		HAL_Delay(200);
 8000e44:	20c8      	movs	r0, #200	; 0xc8
 8000e46:	f000 fe15 	bl	8001a74 <HAL_Delay>
		current = readCurrent();
 8000e4a:	e7f3      	b.n	8000e34 <ADCTestTask+0x10>

08000e4c <readCurrent>:
}

/**
 * Read out ADC with the current value trough the FET
 */
static uint32_t readCurrent(void){
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
	ADC_Select_CH0();
 8000e52:	f000 fb85 	bl	8001560 <ADC_Select_CH0>
	HAL_ADC_Start(&hadc);
 8000e56:	4b19      	ldr	r3, [pc, #100]	; (8000ebc <readCurrent+0x70>)
 8000e58:	0018      	movs	r0, r3
 8000e5a:	f000 ff6f 	bl	8001d3c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 1000);
 8000e5e:	23fa      	movs	r3, #250	; 0xfa
 8000e60:	009a      	lsls	r2, r3, #2
 8000e62:	4b16      	ldr	r3, [pc, #88]	; (8000ebc <readCurrent+0x70>)
 8000e64:	0011      	movs	r1, r2
 8000e66:	0018      	movs	r0, r3
 8000e68:	f000 fffc 	bl	8001e64 <HAL_ADC_PollForConversion>
	uint32_t current = HAL_ADC_GetValue(&hadc);
 8000e6c:	4b13      	ldr	r3, [pc, #76]	; (8000ebc <readCurrent+0x70>)
 8000e6e:	0018      	movs	r0, r3
 8000e70:	f001 f890 	bl	8001f94 <HAL_ADC_GetValue>
 8000e74:	0003      	movs	r3, r0
 8000e76:	607b      	str	r3, [r7, #4]
	HAL_ADC_Stop(&hadc);
 8000e78:	4b10      	ldr	r3, [pc, #64]	; (8000ebc <readCurrent+0x70>)
 8000e7a:	0018      	movs	r0, r3
 8000e7c:	f000 ffb2 	bl	8001de4 <HAL_ADC_Stop>
	current = (1000*(float)current) / ADC_MAX_VALUE; // Current in mA
 8000e80:	6878      	ldr	r0, [r7, #4]
 8000e82:	f7ff feeb 	bl	8000c5c <__aeabi_ui2f>
 8000e86:	1c03      	adds	r3, r0, #0
 8000e88:	490d      	ldr	r1, [pc, #52]	; (8000ec0 <readCurrent+0x74>)
 8000e8a:	1c18      	adds	r0, r3, #0
 8000e8c:	f7ff fbe4 	bl	8000658 <__aeabi_fmul>
 8000e90:	1c03      	adds	r3, r0, #0
 8000e92:	218b      	movs	r1, #139	; 0x8b
 8000e94:	05c9      	lsls	r1, r1, #23
 8000e96:	1c18      	adds	r0, r3, #0
 8000e98:	f7ff fa14 	bl	80002c4 <__aeabi_fdiv>
 8000e9c:	1c03      	adds	r3, r0, #0
 8000e9e:	1c18      	adds	r0, r3, #0
 8000ea0:	f7ff f9f8 	bl	8000294 <__aeabi_f2uiz>
 8000ea4:	0003      	movs	r3, r0
 8000ea6:	607b      	str	r3, [r7, #4]
	calc_weight(current);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	b29b      	uxth	r3, r3
 8000eac:	0018      	movs	r0, r3
 8000eae:	f000 f847 	bl	8000f40 <calc_weight>
	return(current);
 8000eb2:	687b      	ldr	r3, [r7, #4]
}
 8000eb4:	0018      	movs	r0, r3
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	b002      	add	sp, #8
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	20001a98 	.word	0x20001a98
 8000ec0:	447a0000 	.word	0x447a0000

08000ec4 <readTemp>:


/**
 * Read out ADC with the current temperature from the magnet
 */
static uint32_t readTemp(void){
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
	ADC_Select_CH3();
 8000eca:	f000 fb6d 	bl	80015a8 <ADC_Select_CH3>
	HAL_ADC_Start(&hadc);
 8000ece:	4b1a      	ldr	r3, [pc, #104]	; (8000f38 <readTemp+0x74>)
 8000ed0:	0018      	movs	r0, r3
 8000ed2:	f000 ff33 	bl	8001d3c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 1000);
 8000ed6:	23fa      	movs	r3, #250	; 0xfa
 8000ed8:	009a      	lsls	r2, r3, #2
 8000eda:	4b17      	ldr	r3, [pc, #92]	; (8000f38 <readTemp+0x74>)
 8000edc:	0011      	movs	r1, r2
 8000ede:	0018      	movs	r0, r3
 8000ee0:	f000 ffc0 	bl	8001e64 <HAL_ADC_PollForConversion>
	uint32_t temp = HAL_ADC_GetValue(&hadc);
 8000ee4:	4b14      	ldr	r3, [pc, #80]	; (8000f38 <readTemp+0x74>)
 8000ee6:	0018      	movs	r0, r3
 8000ee8:	f001 f854 	bl	8001f94 <HAL_ADC_GetValue>
 8000eec:	0003      	movs	r3, r0
 8000eee:	607b      	str	r3, [r7, #4]
	temp = HAL_ADC_GetValue(&hadc);
 8000ef0:	4b11      	ldr	r3, [pc, #68]	; (8000f38 <readTemp+0x74>)
 8000ef2:	0018      	movs	r0, r3
 8000ef4:	f001 f84e 	bl	8001f94 <HAL_ADC_GetValue>
 8000ef8:	0003      	movs	r3, r0
 8000efa:	607b      	str	r3, [r7, #4]
	HAL_ADC_Stop(&hadc);
 8000efc:	4b0e      	ldr	r3, [pc, #56]	; (8000f38 <readTemp+0x74>)
 8000efe:	0018      	movs	r0, r3
 8000f00:	f000 ff70 	bl	8001de4 <HAL_ADC_Stop>
	temp = (1000*(float)temp) / ADC_MAX_VALUE;
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	f7ff fea9 	bl	8000c5c <__aeabi_ui2f>
 8000f0a:	1c03      	adds	r3, r0, #0
 8000f0c:	490b      	ldr	r1, [pc, #44]	; (8000f3c <readTemp+0x78>)
 8000f0e:	1c18      	adds	r0, r3, #0
 8000f10:	f7ff fba2 	bl	8000658 <__aeabi_fmul>
 8000f14:	1c03      	adds	r3, r0, #0
 8000f16:	218b      	movs	r1, #139	; 0x8b
 8000f18:	05c9      	lsls	r1, r1, #23
 8000f1a:	1c18      	adds	r0, r3, #0
 8000f1c:	f7ff f9d2 	bl	80002c4 <__aeabi_fdiv>
 8000f20:	1c03      	adds	r3, r0, #0
 8000f22:	1c18      	adds	r0, r3, #0
 8000f24:	f7ff f9b6 	bl	8000294 <__aeabi_f2uiz>
 8000f28:	0003      	movs	r3, r0
 8000f2a:	607b      	str	r3, [r7, #4]
	return(temp);
 8000f2c:	687b      	ldr	r3, [r7, #4]
}
 8000f2e:	0018      	movs	r0, r3
 8000f30:	46bd      	mov	sp, r7
 8000f32:	b002      	add	sp, #8
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	46c0      	nop			; (mov r8, r8)
 8000f38:	20001a98 	.word	0x20001a98
 8000f3c:	447a0000 	.word	0x447a0000

08000f40 <calc_weight>:


/**
 * Calculation weight
 */
static void calc_weight(uint16_t value){
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	0002      	movs	r2, r0
 8000f48:	1dbb      	adds	r3, r7, #6
 8000f4a:	801a      	strh	r2, [r3, #0]
	weight = value;
 8000f4c:	1dbb      	adds	r3, r7, #6
 8000f4e:	881a      	ldrh	r2, [r3, #0]
 8000f50:	4b02      	ldr	r3, [pc, #8]	; (8000f5c <calc_weight+0x1c>)
 8000f52:	601a      	str	r2, [r3, #0]
}
 8000f54:	46c0      	nop			; (mov r8, r8)
 8000f56:	46bd      	mov	sp, r7
 8000f58:	b002      	add	sp, #8
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	20000030 	.word	0x20000030

08000f60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f64:	f000 fd22 	bl	80019ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f68:	f000 f842 	bl	8000ff0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f6c:	f000 fa7c 	bl	8001468 <MX_GPIO_Init>
  MX_ADC_Init();
 8000f70:	f000 f8bc 	bl	80010ec <MX_ADC_Init>
  MX_TIM1_Init();
 8000f74:	f000 f982 	bl	800127c <MX_TIM1_Init>
  MX_I2C2_Init();
 8000f78:	f000 f940 	bl	80011fc <MX_I2C2_Init>
  MX_TIM6_Init();
 8000f7c:	f000 fa30 	bl	80013e0 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000f80:	f000 fa50 	bl	8001424 <MX_TIM7_Init>
  MX_I2C1_Init();
 8000f84:	f000 f8f8 	bl	8001178 <MX_I2C1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000f88:	f000 f89a 	bl	80010c0 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000f8c:	4b11      	ldr	r3, [pc, #68]	; (8000fd4 <main+0x74>)
 8000f8e:	210c      	movs	r1, #12
 8000f90:	0018      	movs	r0, r3
 8000f92:	f002 fd09 	bl	80039a8 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start(&htim6);
 8000f96:	4b10      	ldr	r3, [pc, #64]	; (8000fd8 <main+0x78>)
 8000f98:	0018      	movs	r0, r3
 8000f9a:	f002 fc1d 	bl	80037d8 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim7);
 8000f9e:	4b0f      	ldr	r3, [pc, #60]	; (8000fdc <main+0x7c>)
 8000fa0:	0018      	movs	r0, r3
 8000fa2:	f002 fc5d 	bl	8003860 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Init(&hadc);
 8000fa6:	4b0e      	ldr	r3, [pc, #56]	; (8000fe0 <main+0x80>)
 8000fa8:	0018      	movs	r0, r3
 8000faa:	f000 fd87 	bl	8001abc <HAL_ADC_Init>
  HAL_ADCEx_Calibration_Start(&hadc);
 8000fae:	4b0c      	ldr	r3, [pc, #48]	; (8000fe0 <main+0x80>)
 8000fb0:	0018      	movs	r0, r3
 8000fb2:	f001 fa33 	bl	800241c <HAL_ADCEx_Calibration_Start>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000fb6:	f003 fb29 	bl	800460c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000fba:	4a0a      	ldr	r2, [pc, #40]	; (8000fe4 <main+0x84>)
 8000fbc:	4b0a      	ldr	r3, [pc, #40]	; (8000fe8 <main+0x88>)
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	0018      	movs	r0, r3
 8000fc2:	f003 fb4f 	bl	8004664 <osThreadNew>
 8000fc6:	0002      	movs	r2, r0
 8000fc8:	4b08      	ldr	r3, [pc, #32]	; (8000fec <main+0x8c>)
 8000fca:	601a      	str	r2, [r3, #0]
  osKernelStart();

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  app_main();
 8000fcc:	f7ff fea0 	bl	8000d10 <app_main>
  while (1)
 8000fd0:	e7fe      	b.n	8000fd0 <main+0x70>
 8000fd2:	46c0      	nop			; (mov r8, r8)
 8000fd4:	20001a50 	.word	0x20001a50
 8000fd8:	20001a08 	.word	0x20001a08
 8000fdc:	20001ad8 	.word	0x20001ad8
 8000fe0:	20001a98 	.word	0x20001a98
 8000fe4:	08006d6c 	.word	0x08006d6c
 8000fe8:	080015f1 	.word	0x080015f1
 8000fec:	2000196c 	.word	0x2000196c

08000ff0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ff0:	b590      	push	{r4, r7, lr}
 8000ff2:	b097      	sub	sp, #92	; 0x5c
 8000ff4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ff6:	2428      	movs	r4, #40	; 0x28
 8000ff8:	193b      	adds	r3, r7, r4
 8000ffa:	0018      	movs	r0, r3
 8000ffc:	2330      	movs	r3, #48	; 0x30
 8000ffe:	001a      	movs	r2, r3
 8001000:	2100      	movs	r1, #0
 8001002:	f005 fdf0 	bl	8006be6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001006:	2318      	movs	r3, #24
 8001008:	18fb      	adds	r3, r7, r3
 800100a:	0018      	movs	r0, r3
 800100c:	2310      	movs	r3, #16
 800100e:	001a      	movs	r2, r3
 8001010:	2100      	movs	r1, #0
 8001012:	f005 fde8 	bl	8006be6 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001016:	1d3b      	adds	r3, r7, #4
 8001018:	0018      	movs	r0, r3
 800101a:	2314      	movs	r3, #20
 800101c:	001a      	movs	r2, r3
 800101e:	2100      	movs	r1, #0
 8001020:	f005 fde1 	bl	8006be6 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8001024:	0021      	movs	r1, r4
 8001026:	187b      	adds	r3, r7, r1
 8001028:	2212      	movs	r2, #18
 800102a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800102c:	187b      	adds	r3, r7, r1
 800102e:	2201      	movs	r2, #1
 8001030:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8001032:	187b      	adds	r3, r7, r1
 8001034:	2201      	movs	r2, #1
 8001036:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001038:	187b      	adds	r3, r7, r1
 800103a:	2210      	movs	r2, #16
 800103c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 800103e:	187b      	adds	r3, r7, r1
 8001040:	2210      	movs	r2, #16
 8001042:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001044:	187b      	adds	r3, r7, r1
 8001046:	2202      	movs	r2, #2
 8001048:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800104a:	187b      	adds	r3, r7, r1
 800104c:	2280      	movs	r2, #128	; 0x80
 800104e:	0212      	lsls	r2, r2, #8
 8001050:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001052:	187b      	adds	r3, r7, r1
 8001054:	2280      	movs	r2, #128	; 0x80
 8001056:	0352      	lsls	r2, r2, #13
 8001058:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800105a:	187b      	adds	r3, r7, r1
 800105c:	2200      	movs	r2, #0
 800105e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001060:	187b      	adds	r3, r7, r1
 8001062:	0018      	movs	r0, r3
 8001064:	f001 fe38 	bl	8002cd8 <HAL_RCC_OscConfig>
 8001068:	1e03      	subs	r3, r0, #0
 800106a:	d001      	beq.n	8001070 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800106c:	f000 fac8 	bl	8001600 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001070:	2118      	movs	r1, #24
 8001072:	187b      	adds	r3, r7, r1
 8001074:	2207      	movs	r2, #7
 8001076:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001078:	187b      	adds	r3, r7, r1
 800107a:	2202      	movs	r2, #2
 800107c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800107e:	187b      	adds	r3, r7, r1
 8001080:	2200      	movs	r2, #0
 8001082:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001084:	187b      	adds	r3, r7, r1
 8001086:	2200      	movs	r2, #0
 8001088:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800108a:	187b      	adds	r3, r7, r1
 800108c:	2101      	movs	r1, #1
 800108e:	0018      	movs	r0, r3
 8001090:	f002 f940 	bl	8003314 <HAL_RCC_ClockConfig>
 8001094:	1e03      	subs	r3, r0, #0
 8001096:	d001      	beq.n	800109c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001098:	f000 fab2 	bl	8001600 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800109c:	1d3b      	adds	r3, r7, #4
 800109e:	2220      	movs	r2, #32
 80010a0:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 80010a2:	1d3b      	adds	r3, r7, #4
 80010a4:	2210      	movs	r2, #16
 80010a6:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010a8:	1d3b      	adds	r3, r7, #4
 80010aa:	0018      	movs	r0, r3
 80010ac:	f002 fa66 	bl	800357c <HAL_RCCEx_PeriphCLKConfig>
 80010b0:	1e03      	subs	r3, r0, #0
 80010b2:	d001      	beq.n	80010b8 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80010b4:	f000 faa4 	bl	8001600 <Error_Handler>
  }
}
 80010b8:	46c0      	nop			; (mov r8, r8)
 80010ba:	46bd      	mov	sp, r7
 80010bc:	b017      	add	sp, #92	; 0x5c
 80010be:	bd90      	pop	{r4, r7, pc}

080010c0 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* TIM7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM7_IRQn, 3, 0);
 80010c4:	2200      	movs	r2, #0
 80010c6:	2103      	movs	r1, #3
 80010c8:	2012      	movs	r0, #18
 80010ca:	f001 fafb 	bl	80026c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80010ce:	2012      	movs	r0, #18
 80010d0:	f001 fb0d 	bl	80026ee <HAL_NVIC_EnableIRQ>
  /* EXTI2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 3, 0);
 80010d4:	2200      	movs	r2, #0
 80010d6:	2103      	movs	r1, #3
 80010d8:	2006      	movs	r0, #6
 80010da:	f001 faf3 	bl	80026c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 80010de:	2006      	movs	r0, #6
 80010e0:	f001 fb05 	bl	80026ee <HAL_NVIC_EnableIRQ>
}
 80010e4:	46c0      	nop			; (mov r8, r8)
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
	...

080010ec <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010f2:	1d3b      	adds	r3, r7, #4
 80010f4:	0018      	movs	r0, r3
 80010f6:	230c      	movs	r3, #12
 80010f8:	001a      	movs	r2, r3
 80010fa:	2100      	movs	r1, #0
 80010fc:	f005 fd73 	bl	8006be6 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8001100:	4b1b      	ldr	r3, [pc, #108]	; (8001170 <MX_ADC_Init+0x84>)
 8001102:	4a1c      	ldr	r2, [pc, #112]	; (8001174 <MX_ADC_Init+0x88>)
 8001104:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001106:	4b1a      	ldr	r3, [pc, #104]	; (8001170 <MX_ADC_Init+0x84>)
 8001108:	2200      	movs	r2, #0
 800110a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800110c:	4b18      	ldr	r3, [pc, #96]	; (8001170 <MX_ADC_Init+0x84>)
 800110e:	2200      	movs	r2, #0
 8001110:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001112:	4b17      	ldr	r3, [pc, #92]	; (8001170 <MX_ADC_Init+0x84>)
 8001114:	2200      	movs	r2, #0
 8001116:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001118:	4b15      	ldr	r3, [pc, #84]	; (8001170 <MX_ADC_Init+0x84>)
 800111a:	2201      	movs	r2, #1
 800111c:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800111e:	4b14      	ldr	r3, [pc, #80]	; (8001170 <MX_ADC_Init+0x84>)
 8001120:	2204      	movs	r2, #4
 8001122:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001124:	4b12      	ldr	r3, [pc, #72]	; (8001170 <MX_ADC_Init+0x84>)
 8001126:	2200      	movs	r2, #0
 8001128:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800112a:	4b11      	ldr	r3, [pc, #68]	; (8001170 <MX_ADC_Init+0x84>)
 800112c:	2200      	movs	r2, #0
 800112e:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8001130:	4b0f      	ldr	r3, [pc, #60]	; (8001170 <MX_ADC_Init+0x84>)
 8001132:	2201      	movs	r2, #1
 8001134:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001136:	4b0e      	ldr	r3, [pc, #56]	; (8001170 <MX_ADC_Init+0x84>)
 8001138:	2200      	movs	r2, #0
 800113a:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800113c:	4b0c      	ldr	r3, [pc, #48]	; (8001170 <MX_ADC_Init+0x84>)
 800113e:	22c2      	movs	r2, #194	; 0xc2
 8001140:	32ff      	adds	r2, #255	; 0xff
 8001142:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001144:	4b0a      	ldr	r3, [pc, #40]	; (8001170 <MX_ADC_Init+0x84>)
 8001146:	2200      	movs	r2, #0
 8001148:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 800114a:	4b09      	ldr	r3, [pc, #36]	; (8001170 <MX_ADC_Init+0x84>)
 800114c:	2224      	movs	r2, #36	; 0x24
 800114e:	2100      	movs	r1, #0
 8001150:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001152:	4b07      	ldr	r3, [pc, #28]	; (8001170 <MX_ADC_Init+0x84>)
 8001154:	2201      	movs	r2, #1
 8001156:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001158:	4b05      	ldr	r3, [pc, #20]	; (8001170 <MX_ADC_Init+0x84>)
 800115a:	0018      	movs	r0, r3
 800115c:	f000 fcae 	bl	8001abc <HAL_ADC_Init>
 8001160:	1e03      	subs	r3, r0, #0
 8001162:	d001      	beq.n	8001168 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8001164:	f000 fa4c 	bl	8001600 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001168:	46c0      	nop			; (mov r8, r8)
 800116a:	46bd      	mov	sp, r7
 800116c:	b004      	add	sp, #16
 800116e:	bd80      	pop	{r7, pc}
 8001170:	20001a98 	.word	0x20001a98
 8001174:	40012400 	.word	0x40012400

08001178 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800117c:	4b1c      	ldr	r3, [pc, #112]	; (80011f0 <MX_I2C1_Init+0x78>)
 800117e:	4a1d      	ldr	r2, [pc, #116]	; (80011f4 <MX_I2C1_Init+0x7c>)
 8001180:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00401A58;
 8001182:	4b1b      	ldr	r3, [pc, #108]	; (80011f0 <MX_I2C1_Init+0x78>)
 8001184:	4a1c      	ldr	r2, [pc, #112]	; (80011f8 <MX_I2C1_Init+0x80>)
 8001186:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001188:	4b19      	ldr	r3, [pc, #100]	; (80011f0 <MX_I2C1_Init+0x78>)
 800118a:	2200      	movs	r2, #0
 800118c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800118e:	4b18      	ldr	r3, [pc, #96]	; (80011f0 <MX_I2C1_Init+0x78>)
 8001190:	2201      	movs	r2, #1
 8001192:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001194:	4b16      	ldr	r3, [pc, #88]	; (80011f0 <MX_I2C1_Init+0x78>)
 8001196:	2200      	movs	r2, #0
 8001198:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800119a:	4b15      	ldr	r3, [pc, #84]	; (80011f0 <MX_I2C1_Init+0x78>)
 800119c:	2200      	movs	r2, #0
 800119e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011a0:	4b13      	ldr	r3, [pc, #76]	; (80011f0 <MX_I2C1_Init+0x78>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011a6:	4b12      	ldr	r3, [pc, #72]	; (80011f0 <MX_I2C1_Init+0x78>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011ac:	4b10      	ldr	r3, [pc, #64]	; (80011f0 <MX_I2C1_Init+0x78>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011b2:	4b0f      	ldr	r3, [pc, #60]	; (80011f0 <MX_I2C1_Init+0x78>)
 80011b4:	0018      	movs	r0, r3
 80011b6:	f001 fc61 	bl	8002a7c <HAL_I2C_Init>
 80011ba:	1e03      	subs	r3, r0, #0
 80011bc:	d001      	beq.n	80011c2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80011be:	f000 fa1f 	bl	8001600 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 80011c2:	2380      	movs	r3, #128	; 0x80
 80011c4:	015a      	lsls	r2, r3, #5
 80011c6:	4b0a      	ldr	r3, [pc, #40]	; (80011f0 <MX_I2C1_Init+0x78>)
 80011c8:	0011      	movs	r1, r2
 80011ca:	0018      	movs	r0, r3
 80011cc:	f001 fcec 	bl	8002ba8 <HAL_I2CEx_ConfigAnalogFilter>
 80011d0:	1e03      	subs	r3, r0, #0
 80011d2:	d001      	beq.n	80011d8 <MX_I2C1_Init+0x60>
  {
    Error_Handler();
 80011d4:	f000 fa14 	bl	8001600 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80011d8:	4b05      	ldr	r3, [pc, #20]	; (80011f0 <MX_I2C1_Init+0x78>)
 80011da:	2100      	movs	r1, #0
 80011dc:	0018      	movs	r0, r3
 80011de:	f001 fd2f 	bl	8002c40 <HAL_I2CEx_ConfigDigitalFilter>
 80011e2:	1e03      	subs	r3, r0, #0
 80011e4:	d001      	beq.n	80011ea <MX_I2C1_Init+0x72>
  {
    Error_Handler();
 80011e6:	f000 fa0b 	bl	8001600 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011ea:	46c0      	nop			; (mov r8, r8)
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	20001970 	.word	0x20001970
 80011f4:	40005400 	.word	0x40005400
 80011f8:	00401a58 	.word	0x00401a58

080011fc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001200:	4b1b      	ldr	r3, [pc, #108]	; (8001270 <MX_I2C2_Init+0x74>)
 8001202:	4a1c      	ldr	r2, [pc, #112]	; (8001274 <MX_I2C2_Init+0x78>)
 8001204:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x2010091A;
 8001206:	4b1a      	ldr	r3, [pc, #104]	; (8001270 <MX_I2C2_Init+0x74>)
 8001208:	4a1b      	ldr	r2, [pc, #108]	; (8001278 <MX_I2C2_Init+0x7c>)
 800120a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800120c:	4b18      	ldr	r3, [pc, #96]	; (8001270 <MX_I2C2_Init+0x74>)
 800120e:	2200      	movs	r2, #0
 8001210:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001212:	4b17      	ldr	r3, [pc, #92]	; (8001270 <MX_I2C2_Init+0x74>)
 8001214:	2201      	movs	r2, #1
 8001216:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001218:	4b15      	ldr	r3, [pc, #84]	; (8001270 <MX_I2C2_Init+0x74>)
 800121a:	2200      	movs	r2, #0
 800121c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800121e:	4b14      	ldr	r3, [pc, #80]	; (8001270 <MX_I2C2_Init+0x74>)
 8001220:	2200      	movs	r2, #0
 8001222:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001224:	4b12      	ldr	r3, [pc, #72]	; (8001270 <MX_I2C2_Init+0x74>)
 8001226:	2200      	movs	r2, #0
 8001228:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800122a:	4b11      	ldr	r3, [pc, #68]	; (8001270 <MX_I2C2_Init+0x74>)
 800122c:	2200      	movs	r2, #0
 800122e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001230:	4b0f      	ldr	r3, [pc, #60]	; (8001270 <MX_I2C2_Init+0x74>)
 8001232:	2200      	movs	r2, #0
 8001234:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001236:	4b0e      	ldr	r3, [pc, #56]	; (8001270 <MX_I2C2_Init+0x74>)
 8001238:	0018      	movs	r0, r3
 800123a:	f001 fc1f 	bl	8002a7c <HAL_I2C_Init>
 800123e:	1e03      	subs	r3, r0, #0
 8001240:	d001      	beq.n	8001246 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001242:	f000 f9dd 	bl	8001600 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001246:	4b0a      	ldr	r3, [pc, #40]	; (8001270 <MX_I2C2_Init+0x74>)
 8001248:	2100      	movs	r1, #0
 800124a:	0018      	movs	r0, r3
 800124c:	f001 fcac 	bl	8002ba8 <HAL_I2CEx_ConfigAnalogFilter>
 8001250:	1e03      	subs	r3, r0, #0
 8001252:	d001      	beq.n	8001258 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001254:	f000 f9d4 	bl	8001600 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001258:	4b05      	ldr	r3, [pc, #20]	; (8001270 <MX_I2C2_Init+0x74>)
 800125a:	2100      	movs	r1, #0
 800125c:	0018      	movs	r0, r3
 800125e:	f001 fcef 	bl	8002c40 <HAL_I2CEx_ConfigDigitalFilter>
 8001262:	1e03      	subs	r3, r0, #0
 8001264:	d001      	beq.n	800126a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001266:	f000 f9cb 	bl	8001600 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800126a:	46c0      	nop			; (mov r8, r8)
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	200019bc 	.word	0x200019bc
 8001274:	40005800 	.word	0x40005800
 8001278:	2010091a 	.word	0x2010091a

0800127c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b096      	sub	sp, #88	; 0x58
 8001280:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001282:	2348      	movs	r3, #72	; 0x48
 8001284:	18fb      	adds	r3, r7, r3
 8001286:	0018      	movs	r0, r3
 8001288:	2310      	movs	r3, #16
 800128a:	001a      	movs	r2, r3
 800128c:	2100      	movs	r1, #0
 800128e:	f005 fcaa 	bl	8006be6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001292:	2340      	movs	r3, #64	; 0x40
 8001294:	18fb      	adds	r3, r7, r3
 8001296:	0018      	movs	r0, r3
 8001298:	2308      	movs	r3, #8
 800129a:	001a      	movs	r2, r3
 800129c:	2100      	movs	r1, #0
 800129e:	f005 fca2 	bl	8006be6 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012a2:	2324      	movs	r3, #36	; 0x24
 80012a4:	18fb      	adds	r3, r7, r3
 80012a6:	0018      	movs	r0, r3
 80012a8:	231c      	movs	r3, #28
 80012aa:	001a      	movs	r2, r3
 80012ac:	2100      	movs	r1, #0
 80012ae:	f005 fc9a 	bl	8006be6 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012b2:	1d3b      	adds	r3, r7, #4
 80012b4:	0018      	movs	r0, r3
 80012b6:	2320      	movs	r3, #32
 80012b8:	001a      	movs	r2, r3
 80012ba:	2100      	movs	r1, #0
 80012bc:	f005 fc93 	bl	8006be6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012c0:	4b45      	ldr	r3, [pc, #276]	; (80013d8 <MX_TIM1_Init+0x15c>)
 80012c2:	4a46      	ldr	r2, [pc, #280]	; (80013dc <MX_TIM1_Init+0x160>)
 80012c4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80012c6:	4b44      	ldr	r3, [pc, #272]	; (80013d8 <MX_TIM1_Init+0x15c>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012cc:	4b42      	ldr	r3, [pc, #264]	; (80013d8 <MX_TIM1_Init+0x15c>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000;
 80012d2:	4b41      	ldr	r3, [pc, #260]	; (80013d8 <MX_TIM1_Init+0x15c>)
 80012d4:	22fa      	movs	r2, #250	; 0xfa
 80012d6:	00d2      	lsls	r2, r2, #3
 80012d8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012da:	4b3f      	ldr	r3, [pc, #252]	; (80013d8 <MX_TIM1_Init+0x15c>)
 80012dc:	2200      	movs	r2, #0
 80012de:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012e0:	4b3d      	ldr	r3, [pc, #244]	; (80013d8 <MX_TIM1_Init+0x15c>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012e6:	4b3c      	ldr	r3, [pc, #240]	; (80013d8 <MX_TIM1_Init+0x15c>)
 80012e8:	2280      	movs	r2, #128	; 0x80
 80012ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012ec:	4b3a      	ldr	r3, [pc, #232]	; (80013d8 <MX_TIM1_Init+0x15c>)
 80012ee:	0018      	movs	r0, r3
 80012f0:	f002 fa22 	bl	8003738 <HAL_TIM_Base_Init>
 80012f4:	1e03      	subs	r3, r0, #0
 80012f6:	d001      	beq.n	80012fc <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 80012f8:	f000 f982 	bl	8001600 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012fc:	2148      	movs	r1, #72	; 0x48
 80012fe:	187b      	adds	r3, r7, r1
 8001300:	2280      	movs	r2, #128	; 0x80
 8001302:	0152      	lsls	r2, r2, #5
 8001304:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001306:	187a      	adds	r2, r7, r1
 8001308:	4b33      	ldr	r3, [pc, #204]	; (80013d8 <MX_TIM1_Init+0x15c>)
 800130a:	0011      	movs	r1, r2
 800130c:	0018      	movs	r0, r3
 800130e:	f002 fcc3 	bl	8003c98 <HAL_TIM_ConfigClockSource>
 8001312:	1e03      	subs	r3, r0, #0
 8001314:	d001      	beq.n	800131a <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001316:	f000 f973 	bl	8001600 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800131a:	4b2f      	ldr	r3, [pc, #188]	; (80013d8 <MX_TIM1_Init+0x15c>)
 800131c:	0018      	movs	r0, r3
 800131e:	f002 faeb 	bl	80038f8 <HAL_TIM_PWM_Init>
 8001322:	1e03      	subs	r3, r0, #0
 8001324:	d001      	beq.n	800132a <MX_TIM1_Init+0xae>
  {
    Error_Handler();
 8001326:	f000 f96b 	bl	8001600 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800132a:	2140      	movs	r1, #64	; 0x40
 800132c:	187b      	adds	r3, r7, r1
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001332:	187b      	adds	r3, r7, r1
 8001334:	2200      	movs	r2, #0
 8001336:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001338:	187a      	adds	r2, r7, r1
 800133a:	4b27      	ldr	r3, [pc, #156]	; (80013d8 <MX_TIM1_Init+0x15c>)
 800133c:	0011      	movs	r1, r2
 800133e:	0018      	movs	r0, r3
 8001340:	f003 f8ae 	bl	80044a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001344:	1e03      	subs	r3, r0, #0
 8001346:	d001      	beq.n	800134c <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8001348:	f000 f95a 	bl	8001600 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800134c:	2124      	movs	r1, #36	; 0x24
 800134e:	187b      	adds	r3, r7, r1
 8001350:	2260      	movs	r2, #96	; 0x60
 8001352:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001354:	187b      	adds	r3, r7, r1
 8001356:	2200      	movs	r2, #0
 8001358:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800135a:	187b      	adds	r3, r7, r1
 800135c:	2200      	movs	r2, #0
 800135e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001360:	187b      	adds	r3, r7, r1
 8001362:	2200      	movs	r2, #0
 8001364:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001366:	187b      	adds	r3, r7, r1
 8001368:	2200      	movs	r2, #0
 800136a:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800136c:	187b      	adds	r3, r7, r1
 800136e:	2200      	movs	r2, #0
 8001370:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001372:	1879      	adds	r1, r7, r1
 8001374:	4b18      	ldr	r3, [pc, #96]	; (80013d8 <MX_TIM1_Init+0x15c>)
 8001376:	220c      	movs	r2, #12
 8001378:	0018      	movs	r0, r3
 800137a:	f002 fbc7 	bl	8003b0c <HAL_TIM_PWM_ConfigChannel>
 800137e:	1e03      	subs	r3, r0, #0
 8001380:	d001      	beq.n	8001386 <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 8001382:	f000 f93d 	bl	8001600 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001386:	1d3b      	adds	r3, r7, #4
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800138c:	1d3b      	adds	r3, r7, #4
 800138e:	2200      	movs	r2, #0
 8001390:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001392:	1d3b      	adds	r3, r7, #4
 8001394:	2200      	movs	r2, #0
 8001396:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001398:	1d3b      	adds	r3, r7, #4
 800139a:	2200      	movs	r2, #0
 800139c:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800139e:	1d3b      	adds	r3, r7, #4
 80013a0:	2200      	movs	r2, #0
 80013a2:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013a4:	1d3b      	adds	r3, r7, #4
 80013a6:	2280      	movs	r2, #128	; 0x80
 80013a8:	0192      	lsls	r2, r2, #6
 80013aa:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013ac:	1d3b      	adds	r3, r7, #4
 80013ae:	2200      	movs	r2, #0
 80013b0:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80013b2:	1d3a      	adds	r2, r7, #4
 80013b4:	4b08      	ldr	r3, [pc, #32]	; (80013d8 <MX_TIM1_Init+0x15c>)
 80013b6:	0011      	movs	r1, r2
 80013b8:	0018      	movs	r0, r3
 80013ba:	f003 f8c9 	bl	8004550 <HAL_TIMEx_ConfigBreakDeadTime>
 80013be:	1e03      	subs	r3, r0, #0
 80013c0:	d001      	beq.n	80013c6 <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 80013c2:	f000 f91d 	bl	8001600 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80013c6:	4b04      	ldr	r3, [pc, #16]	; (80013d8 <MX_TIM1_Init+0x15c>)
 80013c8:	0018      	movs	r0, r3
 80013ca:	f000 fa61 	bl	8001890 <HAL_TIM_MspPostInit>

}
 80013ce:	46c0      	nop			; (mov r8, r8)
 80013d0:	46bd      	mov	sp, r7
 80013d2:	b016      	add	sp, #88	; 0x58
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	46c0      	nop			; (mov r8, r8)
 80013d8:	20001a50 	.word	0x20001a50
 80013dc:	40012c00 	.word	0x40012c00

080013e0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM6_Init 0 */

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80013e4:	4b0c      	ldr	r3, [pc, #48]	; (8001418 <MX_TIM6_Init+0x38>)
 80013e6:	4a0d      	ldr	r2, [pc, #52]	; (800141c <MX_TIM6_Init+0x3c>)
 80013e8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 48-1;
 80013ea:	4b0b      	ldr	r3, [pc, #44]	; (8001418 <MX_TIM6_Init+0x38>)
 80013ec:	222f      	movs	r2, #47	; 0x2f
 80013ee:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013f0:	4b09      	ldr	r3, [pc, #36]	; (8001418 <MX_TIM6_Init+0x38>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80013f6:	4b08      	ldr	r3, [pc, #32]	; (8001418 <MX_TIM6_Init+0x38>)
 80013f8:	4a09      	ldr	r2, [pc, #36]	; (8001420 <MX_TIM6_Init+0x40>)
 80013fa:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013fc:	4b06      	ldr	r3, [pc, #24]	; (8001418 <MX_TIM6_Init+0x38>)
 80013fe:	2200      	movs	r2, #0
 8001400:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001402:	4b05      	ldr	r3, [pc, #20]	; (8001418 <MX_TIM6_Init+0x38>)
 8001404:	0018      	movs	r0, r3
 8001406:	f002 f997 	bl	8003738 <HAL_TIM_Base_Init>
 800140a:	1e03      	subs	r3, r0, #0
 800140c:	d001      	beq.n	8001412 <MX_TIM6_Init+0x32>
  {
    Error_Handler();
 800140e:	f000 f8f7 	bl	8001600 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001412:	46c0      	nop			; (mov r8, r8)
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	20001a08 	.word	0x20001a08
 800141c:	40001000 	.word	0x40001000
 8001420:	0000ffff 	.word	0x0000ffff

08001424 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE END TIM7_Init 0 */

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001428:	4b0d      	ldr	r3, [pc, #52]	; (8001460 <MX_TIM7_Init+0x3c>)
 800142a:	4a0e      	ldr	r2, [pc, #56]	; (8001464 <MX_TIM7_Init+0x40>)
 800142c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 96-1;
 800142e:	4b0c      	ldr	r3, [pc, #48]	; (8001460 <MX_TIM7_Init+0x3c>)
 8001430:	225f      	movs	r2, #95	; 0x5f
 8001432:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001434:	4b0a      	ldr	r3, [pc, #40]	; (8001460 <MX_TIM7_Init+0x3c>)
 8001436:	2200      	movs	r2, #0
 8001438:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000;
 800143a:	4b09      	ldr	r3, [pc, #36]	; (8001460 <MX_TIM7_Init+0x3c>)
 800143c:	22fa      	movs	r2, #250	; 0xfa
 800143e:	0092      	lsls	r2, r2, #2
 8001440:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001442:	4b07      	ldr	r3, [pc, #28]	; (8001460 <MX_TIM7_Init+0x3c>)
 8001444:	2200      	movs	r2, #0
 8001446:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001448:	4b05      	ldr	r3, [pc, #20]	; (8001460 <MX_TIM7_Init+0x3c>)
 800144a:	0018      	movs	r0, r3
 800144c:	f002 f974 	bl	8003738 <HAL_TIM_Base_Init>
 8001450:	1e03      	subs	r3, r0, #0
 8001452:	d001      	beq.n	8001458 <MX_TIM7_Init+0x34>
  {
    Error_Handler();
 8001454:	f000 f8d4 	bl	8001600 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001458:	46c0      	nop			; (mov r8, r8)
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	46c0      	nop			; (mov r8, r8)
 8001460:	20001ad8 	.word	0x20001ad8
 8001464:	40001400 	.word	0x40001400

08001468 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001468:	b590      	push	{r4, r7, lr}
 800146a:	b089      	sub	sp, #36	; 0x24
 800146c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146e:	240c      	movs	r4, #12
 8001470:	193b      	adds	r3, r7, r4
 8001472:	0018      	movs	r0, r3
 8001474:	2314      	movs	r3, #20
 8001476:	001a      	movs	r2, r3
 8001478:	2100      	movs	r1, #0
 800147a:	f005 fbb4 	bl	8006be6 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800147e:	4b34      	ldr	r3, [pc, #208]	; (8001550 <MX_GPIO_Init+0xe8>)
 8001480:	695a      	ldr	r2, [r3, #20]
 8001482:	4b33      	ldr	r3, [pc, #204]	; (8001550 <MX_GPIO_Init+0xe8>)
 8001484:	2180      	movs	r1, #128	; 0x80
 8001486:	0309      	lsls	r1, r1, #12
 8001488:	430a      	orrs	r2, r1
 800148a:	615a      	str	r2, [r3, #20]
 800148c:	4b30      	ldr	r3, [pc, #192]	; (8001550 <MX_GPIO_Init+0xe8>)
 800148e:	695a      	ldr	r2, [r3, #20]
 8001490:	2380      	movs	r3, #128	; 0x80
 8001492:	031b      	lsls	r3, r3, #12
 8001494:	4013      	ands	r3, r2
 8001496:	60bb      	str	r3, [r7, #8]
 8001498:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800149a:	4b2d      	ldr	r3, [pc, #180]	; (8001550 <MX_GPIO_Init+0xe8>)
 800149c:	695a      	ldr	r2, [r3, #20]
 800149e:	4b2c      	ldr	r3, [pc, #176]	; (8001550 <MX_GPIO_Init+0xe8>)
 80014a0:	2180      	movs	r1, #128	; 0x80
 80014a2:	0289      	lsls	r1, r1, #10
 80014a4:	430a      	orrs	r2, r1
 80014a6:	615a      	str	r2, [r3, #20]
 80014a8:	4b29      	ldr	r3, [pc, #164]	; (8001550 <MX_GPIO_Init+0xe8>)
 80014aa:	695a      	ldr	r2, [r3, #20]
 80014ac:	2380      	movs	r3, #128	; 0x80
 80014ae:	029b      	lsls	r3, r3, #10
 80014b0:	4013      	ands	r3, r2
 80014b2:	607b      	str	r3, [r7, #4]
 80014b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b6:	4b26      	ldr	r3, [pc, #152]	; (8001550 <MX_GPIO_Init+0xe8>)
 80014b8:	695a      	ldr	r2, [r3, #20]
 80014ba:	4b25      	ldr	r3, [pc, #148]	; (8001550 <MX_GPIO_Init+0xe8>)
 80014bc:	2180      	movs	r1, #128	; 0x80
 80014be:	02c9      	lsls	r1, r1, #11
 80014c0:	430a      	orrs	r2, r1
 80014c2:	615a      	str	r2, [r3, #20]
 80014c4:	4b22      	ldr	r3, [pc, #136]	; (8001550 <MX_GPIO_Init+0xe8>)
 80014c6:	695a      	ldr	r2, [r3, #20]
 80014c8:	2380      	movs	r3, #128	; 0x80
 80014ca:	02db      	lsls	r3, r3, #11
 80014cc:	4013      	ands	r3, r2
 80014ce:	603b      	str	r3, [r7, #0]
 80014d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_11, GPIO_PIN_RESET);
 80014d2:	4920      	ldr	r1, [pc, #128]	; (8001554 <MX_GPIO_Init+0xec>)
 80014d4:	4b20      	ldr	r3, [pc, #128]	; (8001558 <MX_GPIO_Init+0xf0>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	0018      	movs	r0, r3
 80014da:	f001 fa95 	bl	8002a08 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80014de:	193b      	adds	r3, r7, r4
 80014e0:	2203      	movs	r2, #3
 80014e2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014e4:	193b      	adds	r3, r7, r4
 80014e6:	2200      	movs	r2, #0
 80014e8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ea:	193b      	adds	r3, r7, r4
 80014ec:	2200      	movs	r2, #0
 80014ee:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014f0:	193b      	adds	r3, r7, r4
 80014f2:	4a1a      	ldr	r2, [pc, #104]	; (800155c <MX_GPIO_Init+0xf4>)
 80014f4:	0019      	movs	r1, r3
 80014f6:	0010      	movs	r0, r2
 80014f8:	f001 f916 	bl	8002728 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80014fc:	0021      	movs	r1, r4
 80014fe:	187b      	adds	r3, r7, r1
 8001500:	220c      	movs	r2, #12
 8001502:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001504:	187b      	adds	r3, r7, r1
 8001506:	2288      	movs	r2, #136	; 0x88
 8001508:	0352      	lsls	r2, r2, #13
 800150a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150c:	187b      	adds	r3, r7, r1
 800150e:	2200      	movs	r2, #0
 8001510:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001512:	000c      	movs	r4, r1
 8001514:	187b      	adds	r3, r7, r1
 8001516:	4a11      	ldr	r2, [pc, #68]	; (800155c <MX_GPIO_Init+0xf4>)
 8001518:	0019      	movs	r1, r3
 800151a:	0010      	movs	r0, r2
 800151c:	f001 f904 	bl	8002728 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_11;
 8001520:	0021      	movs	r1, r4
 8001522:	187b      	adds	r3, r7, r1
 8001524:	4a0b      	ldr	r2, [pc, #44]	; (8001554 <MX_GPIO_Init+0xec>)
 8001526:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001528:	187b      	adds	r3, r7, r1
 800152a:	2201      	movs	r2, #1
 800152c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152e:	187b      	adds	r3, r7, r1
 8001530:	2200      	movs	r2, #0
 8001532:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001534:	187b      	adds	r3, r7, r1
 8001536:	2200      	movs	r2, #0
 8001538:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800153a:	187b      	adds	r3, r7, r1
 800153c:	4a06      	ldr	r2, [pc, #24]	; (8001558 <MX_GPIO_Init+0xf0>)
 800153e:	0019      	movs	r1, r3
 8001540:	0010      	movs	r0, r2
 8001542:	f001 f8f1 	bl	8002728 <HAL_GPIO_Init>

}
 8001546:	46c0      	nop			; (mov r8, r8)
 8001548:	46bd      	mov	sp, r7
 800154a:	b009      	add	sp, #36	; 0x24
 800154c:	bd90      	pop	{r4, r7, pc}
 800154e:	46c0      	nop			; (mov r8, r8)
 8001550:	40021000 	.word	0x40021000
 8001554:	00000807 	.word	0x00000807
 8001558:	48000400 	.word	0x48000400
 800155c:	48000800 	.word	0x48000800

08001560 <ADC_Select_CH0>:

/* USER CODE BEGIN 4 */

void ADC_Select_CH0 (void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001566:	1d3b      	adds	r3, r7, #4
 8001568:	0018      	movs	r0, r3
 800156a:	230c      	movs	r3, #12
 800156c:	001a      	movs	r2, r3
 800156e:	2100      	movs	r1, #0
 8001570:	f005 fb39 	bl	8006be6 <memset>
	sConfig.Channel = ADC_CHANNEL_0;
 8001574:	1d3b      	adds	r3, r7, #4
 8001576:	2200      	movs	r2, #0
 8001578:	601a      	str	r2, [r3, #0]
	sConfig.Rank = 1;
 800157a:	1d3b      	adds	r3, r7, #4
 800157c:	2201      	movs	r2, #1
 800157e:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001580:	1d3b      	adds	r3, r7, #4
 8001582:	2280      	movs	r2, #128	; 0x80
 8001584:	0552      	lsls	r2, r2, #21
 8001586:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001588:	1d3a      	adds	r2, r7, #4
 800158a:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <ADC_Select_CH0+0x44>)
 800158c:	0011      	movs	r1, r2
 800158e:	0018      	movs	r0, r3
 8001590:	f000 fd0c 	bl	8001fac <HAL_ADC_ConfigChannel>
 8001594:	1e03      	subs	r3, r0, #0
 8001596:	d001      	beq.n	800159c <ADC_Select_CH0+0x3c>
	{
		Error_Handler();
 8001598:	f000 f832 	bl	8001600 <Error_Handler>
	}
}
 800159c:	46c0      	nop			; (mov r8, r8)
 800159e:	46bd      	mov	sp, r7
 80015a0:	b004      	add	sp, #16
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	20001a98 	.word	0x20001a98

080015a8 <ADC_Select_CH3>:

void ADC_Select_CH3 (void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80015ae:	1d3b      	adds	r3, r7, #4
 80015b0:	0018      	movs	r0, r3
 80015b2:	230c      	movs	r3, #12
 80015b4:	001a      	movs	r2, r3
 80015b6:	2100      	movs	r1, #0
 80015b8:	f005 fb15 	bl	8006be6 <memset>
	sConfig.Channel = ADC_CHANNEL_3;
 80015bc:	1d3b      	adds	r3, r7, #4
 80015be:	2203      	movs	r2, #3
 80015c0:	601a      	str	r2, [r3, #0]
	sConfig.Rank = 1;
 80015c2:	1d3b      	adds	r3, r7, #4
 80015c4:	2201      	movs	r2, #1
 80015c6:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80015c8:	1d3b      	adds	r3, r7, #4
 80015ca:	2280      	movs	r2, #128	; 0x80
 80015cc:	0552      	lsls	r2, r2, #21
 80015ce:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80015d0:	1d3a      	adds	r2, r7, #4
 80015d2:	4b06      	ldr	r3, [pc, #24]	; (80015ec <ADC_Select_CH3+0x44>)
 80015d4:	0011      	movs	r1, r2
 80015d6:	0018      	movs	r0, r3
 80015d8:	f000 fce8 	bl	8001fac <HAL_ADC_ConfigChannel>
 80015dc:	1e03      	subs	r3, r0, #0
 80015de:	d001      	beq.n	80015e4 <ADC_Select_CH3+0x3c>
	{
		Error_Handler();
 80015e0:	f000 f80e 	bl	8001600 <Error_Handler>
	}
}
 80015e4:	46c0      	nop			; (mov r8, r8)
 80015e6:	46bd      	mov	sp, r7
 80015e8:	b004      	add	sp, #16
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	20001a98 	.word	0x20001a98

080015f0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80015f8:	2001      	movs	r0, #1
 80015fa:	f003 f8db 	bl	80047b4 <osDelay>
 80015fe:	e7fb      	b.n	80015f8 <StartDefaultTask+0x8>

08001600 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001604:	b672      	cpsid	i
}
 8001606:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001608:	e7fe      	b.n	8001608 <Error_Handler+0x8>
	...

0800160c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001612:	4b12      	ldr	r3, [pc, #72]	; (800165c <HAL_MspInit+0x50>)
 8001614:	699a      	ldr	r2, [r3, #24]
 8001616:	4b11      	ldr	r3, [pc, #68]	; (800165c <HAL_MspInit+0x50>)
 8001618:	2101      	movs	r1, #1
 800161a:	430a      	orrs	r2, r1
 800161c:	619a      	str	r2, [r3, #24]
 800161e:	4b0f      	ldr	r3, [pc, #60]	; (800165c <HAL_MspInit+0x50>)
 8001620:	699b      	ldr	r3, [r3, #24]
 8001622:	2201      	movs	r2, #1
 8001624:	4013      	ands	r3, r2
 8001626:	607b      	str	r3, [r7, #4]
 8001628:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800162a:	4b0c      	ldr	r3, [pc, #48]	; (800165c <HAL_MspInit+0x50>)
 800162c:	69da      	ldr	r2, [r3, #28]
 800162e:	4b0b      	ldr	r3, [pc, #44]	; (800165c <HAL_MspInit+0x50>)
 8001630:	2180      	movs	r1, #128	; 0x80
 8001632:	0549      	lsls	r1, r1, #21
 8001634:	430a      	orrs	r2, r1
 8001636:	61da      	str	r2, [r3, #28]
 8001638:	4b08      	ldr	r3, [pc, #32]	; (800165c <HAL_MspInit+0x50>)
 800163a:	69da      	ldr	r2, [r3, #28]
 800163c:	2380      	movs	r3, #128	; 0x80
 800163e:	055b      	lsls	r3, r3, #21
 8001640:	4013      	ands	r3, r2
 8001642:	603b      	str	r3, [r7, #0]
 8001644:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8001646:	2302      	movs	r3, #2
 8001648:	425b      	negs	r3, r3
 800164a:	2200      	movs	r2, #0
 800164c:	2103      	movs	r1, #3
 800164e:	0018      	movs	r0, r3
 8001650:	f001 f838 	bl	80026c4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001654:	46c0      	nop			; (mov r8, r8)
 8001656:	46bd      	mov	sp, r7
 8001658:	b002      	add	sp, #8
 800165a:	bd80      	pop	{r7, pc}
 800165c:	40021000 	.word	0x40021000

08001660 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001660:	b590      	push	{r4, r7, lr}
 8001662:	b08b      	sub	sp, #44	; 0x2c
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001668:	2414      	movs	r4, #20
 800166a:	193b      	adds	r3, r7, r4
 800166c:	0018      	movs	r0, r3
 800166e:	2314      	movs	r3, #20
 8001670:	001a      	movs	r2, r3
 8001672:	2100      	movs	r1, #0
 8001674:	f005 fab7 	bl	8006be6 <memset>
  if(hadc->Instance==ADC1)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a19      	ldr	r2, [pc, #100]	; (80016e4 <HAL_ADC_MspInit+0x84>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d12b      	bne.n	80016da <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001682:	4b19      	ldr	r3, [pc, #100]	; (80016e8 <HAL_ADC_MspInit+0x88>)
 8001684:	699a      	ldr	r2, [r3, #24]
 8001686:	4b18      	ldr	r3, [pc, #96]	; (80016e8 <HAL_ADC_MspInit+0x88>)
 8001688:	2180      	movs	r1, #128	; 0x80
 800168a:	0089      	lsls	r1, r1, #2
 800168c:	430a      	orrs	r2, r1
 800168e:	619a      	str	r2, [r3, #24]
 8001690:	4b15      	ldr	r3, [pc, #84]	; (80016e8 <HAL_ADC_MspInit+0x88>)
 8001692:	699a      	ldr	r2, [r3, #24]
 8001694:	2380      	movs	r3, #128	; 0x80
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	4013      	ands	r3, r2
 800169a:	613b      	str	r3, [r7, #16]
 800169c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800169e:	4b12      	ldr	r3, [pc, #72]	; (80016e8 <HAL_ADC_MspInit+0x88>)
 80016a0:	695a      	ldr	r2, [r3, #20]
 80016a2:	4b11      	ldr	r3, [pc, #68]	; (80016e8 <HAL_ADC_MspInit+0x88>)
 80016a4:	2180      	movs	r1, #128	; 0x80
 80016a6:	0289      	lsls	r1, r1, #10
 80016a8:	430a      	orrs	r2, r1
 80016aa:	615a      	str	r2, [r3, #20]
 80016ac:	4b0e      	ldr	r3, [pc, #56]	; (80016e8 <HAL_ADC_MspInit+0x88>)
 80016ae:	695a      	ldr	r2, [r3, #20]
 80016b0:	2380      	movs	r3, #128	; 0x80
 80016b2:	029b      	lsls	r3, r3, #10
 80016b4:	4013      	ands	r3, r2
 80016b6:	60fb      	str	r3, [r7, #12]
 80016b8:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    PA3     ------> ADC_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 80016ba:	193b      	adds	r3, r7, r4
 80016bc:	2209      	movs	r2, #9
 80016be:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016c0:	193b      	adds	r3, r7, r4
 80016c2:	2203      	movs	r2, #3
 80016c4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c6:	193b      	adds	r3, r7, r4
 80016c8:	2200      	movs	r2, #0
 80016ca:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016cc:	193a      	adds	r2, r7, r4
 80016ce:	2390      	movs	r3, #144	; 0x90
 80016d0:	05db      	lsls	r3, r3, #23
 80016d2:	0011      	movs	r1, r2
 80016d4:	0018      	movs	r0, r3
 80016d6:	f001 f827 	bl	8002728 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80016da:	46c0      	nop			; (mov r8, r8)
 80016dc:	46bd      	mov	sp, r7
 80016de:	b00b      	add	sp, #44	; 0x2c
 80016e0:	bd90      	pop	{r4, r7, pc}
 80016e2:	46c0      	nop			; (mov r8, r8)
 80016e4:	40012400 	.word	0x40012400
 80016e8:	40021000 	.word	0x40021000

080016ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016ec:	b590      	push	{r4, r7, lr}
 80016ee:	b08d      	sub	sp, #52	; 0x34
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f4:	241c      	movs	r4, #28
 80016f6:	193b      	adds	r3, r7, r4
 80016f8:	0018      	movs	r0, r3
 80016fa:	2314      	movs	r3, #20
 80016fc:	001a      	movs	r2, r3
 80016fe:	2100      	movs	r1, #0
 8001700:	f005 fa71 	bl	8006be6 <memset>
  if(hi2c->Instance==I2C1)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a39      	ldr	r2, [pc, #228]	; (80017f0 <HAL_I2C_MspInit+0x104>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d133      	bne.n	8001776 <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800170e:	4b39      	ldr	r3, [pc, #228]	; (80017f4 <HAL_I2C_MspInit+0x108>)
 8001710:	695a      	ldr	r2, [r3, #20]
 8001712:	4b38      	ldr	r3, [pc, #224]	; (80017f4 <HAL_I2C_MspInit+0x108>)
 8001714:	2180      	movs	r1, #128	; 0x80
 8001716:	02c9      	lsls	r1, r1, #11
 8001718:	430a      	orrs	r2, r1
 800171a:	615a      	str	r2, [r3, #20]
 800171c:	4b35      	ldr	r3, [pc, #212]	; (80017f4 <HAL_I2C_MspInit+0x108>)
 800171e:	695a      	ldr	r2, [r3, #20]
 8001720:	2380      	movs	r3, #128	; 0x80
 8001722:	02db      	lsls	r3, r3, #11
 8001724:	4013      	ands	r3, r2
 8001726:	61bb      	str	r3, [r7, #24]
 8001728:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800172a:	193b      	adds	r3, r7, r4
 800172c:	22c0      	movs	r2, #192	; 0xc0
 800172e:	0092      	lsls	r2, r2, #2
 8001730:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001732:	0021      	movs	r1, r4
 8001734:	187b      	adds	r3, r7, r1
 8001736:	2212      	movs	r2, #18
 8001738:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173a:	187b      	adds	r3, r7, r1
 800173c:	2200      	movs	r2, #0
 800173e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001740:	187b      	adds	r3, r7, r1
 8001742:	2203      	movs	r2, #3
 8001744:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8001746:	187b      	adds	r3, r7, r1
 8001748:	2201      	movs	r2, #1
 800174a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800174c:	187b      	adds	r3, r7, r1
 800174e:	4a2a      	ldr	r2, [pc, #168]	; (80017f8 <HAL_I2C_MspInit+0x10c>)
 8001750:	0019      	movs	r1, r3
 8001752:	0010      	movs	r0, r2
 8001754:	f000 ffe8 	bl	8002728 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001758:	4b26      	ldr	r3, [pc, #152]	; (80017f4 <HAL_I2C_MspInit+0x108>)
 800175a:	69da      	ldr	r2, [r3, #28]
 800175c:	4b25      	ldr	r3, [pc, #148]	; (80017f4 <HAL_I2C_MspInit+0x108>)
 800175e:	2180      	movs	r1, #128	; 0x80
 8001760:	0389      	lsls	r1, r1, #14
 8001762:	430a      	orrs	r2, r1
 8001764:	61da      	str	r2, [r3, #28]
 8001766:	4b23      	ldr	r3, [pc, #140]	; (80017f4 <HAL_I2C_MspInit+0x108>)
 8001768:	69da      	ldr	r2, [r3, #28]
 800176a:	2380      	movs	r3, #128	; 0x80
 800176c:	039b      	lsls	r3, r3, #14
 800176e:	4013      	ands	r3, r2
 8001770:	617b      	str	r3, [r7, #20]
 8001772:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001774:	e037      	b.n	80017e6 <HAL_I2C_MspInit+0xfa>
  else if(hi2c->Instance==I2C2)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a20      	ldr	r2, [pc, #128]	; (80017fc <HAL_I2C_MspInit+0x110>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d132      	bne.n	80017e6 <HAL_I2C_MspInit+0xfa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001780:	4b1c      	ldr	r3, [pc, #112]	; (80017f4 <HAL_I2C_MspInit+0x108>)
 8001782:	695a      	ldr	r2, [r3, #20]
 8001784:	4b1b      	ldr	r3, [pc, #108]	; (80017f4 <HAL_I2C_MspInit+0x108>)
 8001786:	2180      	movs	r1, #128	; 0x80
 8001788:	02c9      	lsls	r1, r1, #11
 800178a:	430a      	orrs	r2, r1
 800178c:	615a      	str	r2, [r3, #20]
 800178e:	4b19      	ldr	r3, [pc, #100]	; (80017f4 <HAL_I2C_MspInit+0x108>)
 8001790:	695a      	ldr	r2, [r3, #20]
 8001792:	2380      	movs	r3, #128	; 0x80
 8001794:	02db      	lsls	r3, r3, #11
 8001796:	4013      	ands	r3, r2
 8001798:	613b      	str	r3, [r7, #16]
 800179a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800179c:	211c      	movs	r1, #28
 800179e:	187b      	adds	r3, r7, r1
 80017a0:	22c0      	movs	r2, #192	; 0xc0
 80017a2:	01d2      	lsls	r2, r2, #7
 80017a4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017a6:	187b      	adds	r3, r7, r1
 80017a8:	2212      	movs	r2, #18
 80017aa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017ac:	187b      	adds	r3, r7, r1
 80017ae:	2201      	movs	r2, #1
 80017b0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017b2:	187b      	adds	r3, r7, r1
 80017b4:	2203      	movs	r2, #3
 80017b6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_I2C2;
 80017b8:	187b      	adds	r3, r7, r1
 80017ba:	2205      	movs	r2, #5
 80017bc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017be:	187b      	adds	r3, r7, r1
 80017c0:	4a0d      	ldr	r2, [pc, #52]	; (80017f8 <HAL_I2C_MspInit+0x10c>)
 80017c2:	0019      	movs	r1, r3
 80017c4:	0010      	movs	r0, r2
 80017c6:	f000 ffaf 	bl	8002728 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80017ca:	4b0a      	ldr	r3, [pc, #40]	; (80017f4 <HAL_I2C_MspInit+0x108>)
 80017cc:	69da      	ldr	r2, [r3, #28]
 80017ce:	4b09      	ldr	r3, [pc, #36]	; (80017f4 <HAL_I2C_MspInit+0x108>)
 80017d0:	2180      	movs	r1, #128	; 0x80
 80017d2:	03c9      	lsls	r1, r1, #15
 80017d4:	430a      	orrs	r2, r1
 80017d6:	61da      	str	r2, [r3, #28]
 80017d8:	4b06      	ldr	r3, [pc, #24]	; (80017f4 <HAL_I2C_MspInit+0x108>)
 80017da:	69da      	ldr	r2, [r3, #28]
 80017dc:	2380      	movs	r3, #128	; 0x80
 80017de:	03db      	lsls	r3, r3, #15
 80017e0:	4013      	ands	r3, r2
 80017e2:	60fb      	str	r3, [r7, #12]
 80017e4:	68fb      	ldr	r3, [r7, #12]
}
 80017e6:	46c0      	nop			; (mov r8, r8)
 80017e8:	46bd      	mov	sp, r7
 80017ea:	b00d      	add	sp, #52	; 0x34
 80017ec:	bd90      	pop	{r4, r7, pc}
 80017ee:	46c0      	nop			; (mov r8, r8)
 80017f0:	40005400 	.word	0x40005400
 80017f4:	40021000 	.word	0x40021000
 80017f8:	48000400 	.word	0x48000400
 80017fc:	40005800 	.word	0x40005800

08001800 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b086      	sub	sp, #24
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a1c      	ldr	r2, [pc, #112]	; (8001880 <HAL_TIM_Base_MspInit+0x80>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d10e      	bne.n	8001830 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001812:	4b1c      	ldr	r3, [pc, #112]	; (8001884 <HAL_TIM_Base_MspInit+0x84>)
 8001814:	699a      	ldr	r2, [r3, #24]
 8001816:	4b1b      	ldr	r3, [pc, #108]	; (8001884 <HAL_TIM_Base_MspInit+0x84>)
 8001818:	2180      	movs	r1, #128	; 0x80
 800181a:	0109      	lsls	r1, r1, #4
 800181c:	430a      	orrs	r2, r1
 800181e:	619a      	str	r2, [r3, #24]
 8001820:	4b18      	ldr	r3, [pc, #96]	; (8001884 <HAL_TIM_Base_MspInit+0x84>)
 8001822:	699a      	ldr	r2, [r3, #24]
 8001824:	2380      	movs	r3, #128	; 0x80
 8001826:	011b      	lsls	r3, r3, #4
 8001828:	4013      	ands	r3, r2
 800182a:	617b      	str	r3, [r7, #20]
 800182c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800182e:	e022      	b.n	8001876 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM6)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a14      	ldr	r2, [pc, #80]	; (8001888 <HAL_TIM_Base_MspInit+0x88>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d10c      	bne.n	8001854 <HAL_TIM_Base_MspInit+0x54>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800183a:	4b12      	ldr	r3, [pc, #72]	; (8001884 <HAL_TIM_Base_MspInit+0x84>)
 800183c:	69da      	ldr	r2, [r3, #28]
 800183e:	4b11      	ldr	r3, [pc, #68]	; (8001884 <HAL_TIM_Base_MspInit+0x84>)
 8001840:	2110      	movs	r1, #16
 8001842:	430a      	orrs	r2, r1
 8001844:	61da      	str	r2, [r3, #28]
 8001846:	4b0f      	ldr	r3, [pc, #60]	; (8001884 <HAL_TIM_Base_MspInit+0x84>)
 8001848:	69db      	ldr	r3, [r3, #28]
 800184a:	2210      	movs	r2, #16
 800184c:	4013      	ands	r3, r2
 800184e:	613b      	str	r3, [r7, #16]
 8001850:	693b      	ldr	r3, [r7, #16]
}
 8001852:	e010      	b.n	8001876 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM7)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a0c      	ldr	r2, [pc, #48]	; (800188c <HAL_TIM_Base_MspInit+0x8c>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d10b      	bne.n	8001876 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800185e:	4b09      	ldr	r3, [pc, #36]	; (8001884 <HAL_TIM_Base_MspInit+0x84>)
 8001860:	69da      	ldr	r2, [r3, #28]
 8001862:	4b08      	ldr	r3, [pc, #32]	; (8001884 <HAL_TIM_Base_MspInit+0x84>)
 8001864:	2120      	movs	r1, #32
 8001866:	430a      	orrs	r2, r1
 8001868:	61da      	str	r2, [r3, #28]
 800186a:	4b06      	ldr	r3, [pc, #24]	; (8001884 <HAL_TIM_Base_MspInit+0x84>)
 800186c:	69db      	ldr	r3, [r3, #28]
 800186e:	2220      	movs	r2, #32
 8001870:	4013      	ands	r3, r2
 8001872:	60fb      	str	r3, [r7, #12]
 8001874:	68fb      	ldr	r3, [r7, #12]
}
 8001876:	46c0      	nop			; (mov r8, r8)
 8001878:	46bd      	mov	sp, r7
 800187a:	b006      	add	sp, #24
 800187c:	bd80      	pop	{r7, pc}
 800187e:	46c0      	nop			; (mov r8, r8)
 8001880:	40012c00 	.word	0x40012c00
 8001884:	40021000 	.word	0x40021000
 8001888:	40001000 	.word	0x40001000
 800188c:	40001400 	.word	0x40001400

08001890 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001890:	b590      	push	{r4, r7, lr}
 8001892:	b089      	sub	sp, #36	; 0x24
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001898:	240c      	movs	r4, #12
 800189a:	193b      	adds	r3, r7, r4
 800189c:	0018      	movs	r0, r3
 800189e:	2314      	movs	r3, #20
 80018a0:	001a      	movs	r2, r3
 80018a2:	2100      	movs	r1, #0
 80018a4:	f005 f99f 	bl	8006be6 <memset>
  if(htim->Instance==TIM1)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a16      	ldr	r2, [pc, #88]	; (8001908 <HAL_TIM_MspPostInit+0x78>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d125      	bne.n	80018fe <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b2:	4b16      	ldr	r3, [pc, #88]	; (800190c <HAL_TIM_MspPostInit+0x7c>)
 80018b4:	695a      	ldr	r2, [r3, #20]
 80018b6:	4b15      	ldr	r3, [pc, #84]	; (800190c <HAL_TIM_MspPostInit+0x7c>)
 80018b8:	2180      	movs	r1, #128	; 0x80
 80018ba:	0289      	lsls	r1, r1, #10
 80018bc:	430a      	orrs	r2, r1
 80018be:	615a      	str	r2, [r3, #20]
 80018c0:	4b12      	ldr	r3, [pc, #72]	; (800190c <HAL_TIM_MspPostInit+0x7c>)
 80018c2:	695a      	ldr	r2, [r3, #20]
 80018c4:	2380      	movs	r3, #128	; 0x80
 80018c6:	029b      	lsls	r3, r3, #10
 80018c8:	4013      	ands	r3, r2
 80018ca:	60bb      	str	r3, [r7, #8]
 80018cc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80018ce:	193b      	adds	r3, r7, r4
 80018d0:	2280      	movs	r2, #128	; 0x80
 80018d2:	0112      	lsls	r2, r2, #4
 80018d4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d6:	0021      	movs	r1, r4
 80018d8:	187b      	adds	r3, r7, r1
 80018da:	2202      	movs	r2, #2
 80018dc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018de:	187b      	adds	r3, r7, r1
 80018e0:	2200      	movs	r2, #0
 80018e2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e4:	187b      	adds	r3, r7, r1
 80018e6:	2200      	movs	r2, #0
 80018e8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80018ea:	187b      	adds	r3, r7, r1
 80018ec:	2202      	movs	r2, #2
 80018ee:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f0:	187a      	adds	r2, r7, r1
 80018f2:	2390      	movs	r3, #144	; 0x90
 80018f4:	05db      	lsls	r3, r3, #23
 80018f6:	0011      	movs	r1, r2
 80018f8:	0018      	movs	r0, r3
 80018fa:	f000 ff15 	bl	8002728 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80018fe:	46c0      	nop			; (mov r8, r8)
 8001900:	46bd      	mov	sp, r7
 8001902:	b009      	add	sp, #36	; 0x24
 8001904:	bd90      	pop	{r4, r7, pc}
 8001906:	46c0      	nop			; (mov r8, r8)
 8001908:	40012c00 	.word	0x40012c00
 800190c:	40021000 	.word	0x40021000

08001910 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001914:	e7fe      	b.n	8001914 <NMI_Handler+0x4>

08001916 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001916:	b580      	push	{r7, lr}
 8001918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800191a:	e7fe      	b.n	800191a <HardFault_Handler+0x4>

0800191c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001920:	f000 f88c 	bl	8001a3c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001924:	f004 fabc 	bl	8005ea0 <xTaskGetSchedulerState>
 8001928:	0003      	movs	r3, r0
 800192a:	2b01      	cmp	r3, #1
 800192c:	d001      	beq.n	8001932 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800192e:	f004 ff4b 	bl	80067c8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001932:	46c0      	nop			; (mov r8, r8)
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}

08001938 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800193c:	2004      	movs	r0, #4
 800193e:	f001 f881 	bl	8002a44 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001942:	2008      	movs	r0, #8
 8001944:	f001 f87e 	bl	8002a44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8001948:	46c0      	nop			; (mov r8, r8)
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}

0800194e <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800194e:	b580      	push	{r7, lr}
 8001950:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001952:	46c0      	nop			; (mov r8, r8)
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}

08001958 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001958:	480d      	ldr	r0, [pc, #52]	; (8001990 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800195a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800195c:	480d      	ldr	r0, [pc, #52]	; (8001994 <LoopForever+0x6>)
  ldr r1, =_edata
 800195e:	490e      	ldr	r1, [pc, #56]	; (8001998 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001960:	4a0e      	ldr	r2, [pc, #56]	; (800199c <LoopForever+0xe>)
  movs r3, #0
 8001962:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001964:	e002      	b.n	800196c <LoopCopyDataInit>

08001966 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001966:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001968:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800196a:	3304      	adds	r3, #4

0800196c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800196c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800196e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001970:	d3f9      	bcc.n	8001966 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001972:	4a0b      	ldr	r2, [pc, #44]	; (80019a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001974:	4c0b      	ldr	r4, [pc, #44]	; (80019a4 <LoopForever+0x16>)
  movs r3, #0
 8001976:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001978:	e001      	b.n	800197e <LoopFillZerobss>

0800197a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800197a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800197c:	3204      	adds	r2, #4

0800197e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800197e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001980:	d3fb      	bcc.n	800197a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001982:	f7ff ffe4 	bl	800194e <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001986:	f005 f901 	bl	8006b8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800198a:	f7ff fae9 	bl	8000f60 <main>

0800198e <LoopForever>:

LoopForever:
    b LoopForever
 800198e:	e7fe      	b.n	800198e <LoopForever>
  ldr   r0, =_estack
 8001990:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001994:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001998:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800199c:	08006dd0 	.word	0x08006dd0
  ldr r2, =_sbss
 80019a0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80019a4:	20001b64 	.word	0x20001b64

080019a8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019a8:	e7fe      	b.n	80019a8 <ADC1_IRQHandler>
	...

080019ac <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019b0:	4b07      	ldr	r3, [pc, #28]	; (80019d0 <HAL_Init+0x24>)
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	4b06      	ldr	r3, [pc, #24]	; (80019d0 <HAL_Init+0x24>)
 80019b6:	2110      	movs	r1, #16
 80019b8:	430a      	orrs	r2, r1
 80019ba:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80019bc:	2003      	movs	r0, #3
 80019be:	f000 f809 	bl	80019d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019c2:	f7ff fe23 	bl	800160c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019c6:	2300      	movs	r3, #0
}
 80019c8:	0018      	movs	r0, r3
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	46c0      	nop			; (mov r8, r8)
 80019d0:	40022000 	.word	0x40022000

080019d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019d4:	b590      	push	{r4, r7, lr}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019dc:	4b14      	ldr	r3, [pc, #80]	; (8001a30 <HAL_InitTick+0x5c>)
 80019de:	681c      	ldr	r4, [r3, #0]
 80019e0:	4b14      	ldr	r3, [pc, #80]	; (8001a34 <HAL_InitTick+0x60>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	0019      	movs	r1, r3
 80019e6:	23fa      	movs	r3, #250	; 0xfa
 80019e8:	0098      	lsls	r0, r3, #2
 80019ea:	f7fe fb8d 	bl	8000108 <__udivsi3>
 80019ee:	0003      	movs	r3, r0
 80019f0:	0019      	movs	r1, r3
 80019f2:	0020      	movs	r0, r4
 80019f4:	f7fe fb88 	bl	8000108 <__udivsi3>
 80019f8:	0003      	movs	r3, r0
 80019fa:	0018      	movs	r0, r3
 80019fc:	f000 fe87 	bl	800270e <HAL_SYSTICK_Config>
 8001a00:	1e03      	subs	r3, r0, #0
 8001a02:	d001      	beq.n	8001a08 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e00f      	b.n	8001a28 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2b03      	cmp	r3, #3
 8001a0c:	d80b      	bhi.n	8001a26 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a0e:	6879      	ldr	r1, [r7, #4]
 8001a10:	2301      	movs	r3, #1
 8001a12:	425b      	negs	r3, r3
 8001a14:	2200      	movs	r2, #0
 8001a16:	0018      	movs	r0, r3
 8001a18:	f000 fe54 	bl	80026c4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a1c:	4b06      	ldr	r3, [pc, #24]	; (8001a38 <HAL_InitTick+0x64>)
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001a22:	2300      	movs	r3, #0
 8001a24:	e000      	b.n	8001a28 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
}
 8001a28:	0018      	movs	r0, r3
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	b003      	add	sp, #12
 8001a2e:	bd90      	pop	{r4, r7, pc}
 8001a30:	20000000 	.word	0x20000000
 8001a34:	20000008 	.word	0x20000008
 8001a38:	20000004 	.word	0x20000004

08001a3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a40:	4b05      	ldr	r3, [pc, #20]	; (8001a58 <HAL_IncTick+0x1c>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	001a      	movs	r2, r3
 8001a46:	4b05      	ldr	r3, [pc, #20]	; (8001a5c <HAL_IncTick+0x20>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	18d2      	adds	r2, r2, r3
 8001a4c:	4b03      	ldr	r3, [pc, #12]	; (8001a5c <HAL_IncTick+0x20>)
 8001a4e:	601a      	str	r2, [r3, #0]
}
 8001a50:	46c0      	nop			; (mov r8, r8)
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	46c0      	nop			; (mov r8, r8)
 8001a58:	20000008 	.word	0x20000008
 8001a5c:	20001b20 	.word	0x20001b20

08001a60 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  return uwTick;
 8001a64:	4b02      	ldr	r3, [pc, #8]	; (8001a70 <HAL_GetTick+0x10>)
 8001a66:	681b      	ldr	r3, [r3, #0]
}
 8001a68:	0018      	movs	r0, r3
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	46c0      	nop			; (mov r8, r8)
 8001a70:	20001b20 	.word	0x20001b20

08001a74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a7c:	f7ff fff0 	bl	8001a60 <HAL_GetTick>
 8001a80:	0003      	movs	r3, r0
 8001a82:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	d005      	beq.n	8001a9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a8e:	4b0a      	ldr	r3, [pc, #40]	; (8001ab8 <HAL_Delay+0x44>)
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	001a      	movs	r2, r3
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	189b      	adds	r3, r3, r2
 8001a98:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001a9a:	46c0      	nop			; (mov r8, r8)
 8001a9c:	f7ff ffe0 	bl	8001a60 <HAL_GetTick>
 8001aa0:	0002      	movs	r2, r0
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	68fa      	ldr	r2, [r7, #12]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d8f7      	bhi.n	8001a9c <HAL_Delay+0x28>
  {
  }
}
 8001aac:	46c0      	nop			; (mov r8, r8)
 8001aae:	46c0      	nop			; (mov r8, r8)
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	b004      	add	sp, #16
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	46c0      	nop			; (mov r8, r8)
 8001ab8:	20000008 	.word	0x20000008

08001abc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ac4:	230f      	movs	r3, #15
 8001ac6:	18fb      	adds	r3, r7, r3
 8001ac8:	2200      	movs	r2, #0
 8001aca:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8001acc:	2300      	movs	r3, #0
 8001ace:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d101      	bne.n	8001ada <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e125      	b.n	8001d26 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d10a      	bne.n	8001af8 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2234      	movs	r2, #52	; 0x34
 8001aec:	2100      	movs	r1, #0
 8001aee:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	0018      	movs	r0, r3
 8001af4:	f7ff fdb4 	bl	8001660 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001afc:	2210      	movs	r2, #16
 8001afe:	4013      	ands	r3, r2
 8001b00:	d000      	beq.n	8001b04 <HAL_ADC_Init+0x48>
 8001b02:	e103      	b.n	8001d0c <HAL_ADC_Init+0x250>
 8001b04:	230f      	movs	r3, #15
 8001b06:	18fb      	adds	r3, r7, r3
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d000      	beq.n	8001b10 <HAL_ADC_Init+0x54>
 8001b0e:	e0fd      	b.n	8001d0c <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	2204      	movs	r2, #4
 8001b18:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8001b1a:	d000      	beq.n	8001b1e <HAL_ADC_Init+0x62>
 8001b1c:	e0f6      	b.n	8001d0c <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b22:	4a83      	ldr	r2, [pc, #524]	; (8001d30 <HAL_ADC_Init+0x274>)
 8001b24:	4013      	ands	r3, r2
 8001b26:	2202      	movs	r2, #2
 8001b28:	431a      	orrs	r2, r3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	2203      	movs	r2, #3
 8001b36:	4013      	ands	r3, r2
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d112      	bne.n	8001b62 <HAL_ADC_Init+0xa6>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	2201      	movs	r2, #1
 8001b44:	4013      	ands	r3, r2
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d009      	beq.n	8001b5e <HAL_ADC_Init+0xa2>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	68da      	ldr	r2, [r3, #12]
 8001b50:	2380      	movs	r3, #128	; 0x80
 8001b52:	021b      	lsls	r3, r3, #8
 8001b54:	401a      	ands	r2, r3
 8001b56:	2380      	movs	r3, #128	; 0x80
 8001b58:	021b      	lsls	r3, r3, #8
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d101      	bne.n	8001b62 <HAL_ADC_Init+0xa6>
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e000      	b.n	8001b64 <HAL_ADC_Init+0xa8>
 8001b62:	2300      	movs	r3, #0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d116      	bne.n	8001b96 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	68db      	ldr	r3, [r3, #12]
 8001b6e:	2218      	movs	r2, #24
 8001b70:	4393      	bics	r3, r2
 8001b72:	0019      	movs	r1, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	689a      	ldr	r2, [r3, #8]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	430a      	orrs	r2, r1
 8001b7e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	691b      	ldr	r3, [r3, #16]
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	0899      	lsrs	r1, r3, #2
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685a      	ldr	r2, [r3, #4]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	430a      	orrs	r2, r1
 8001b94:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	68da      	ldr	r2, [r3, #12]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4964      	ldr	r1, [pc, #400]	; (8001d34 <HAL_ADC_Init+0x278>)
 8001ba2:	400a      	ands	r2, r1
 8001ba4:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	7e1b      	ldrb	r3, [r3, #24]
 8001baa:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	7e5b      	ldrb	r3, [r3, #25]
 8001bb0:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001bb2:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	7e9b      	ldrb	r3, [r3, #26]
 8001bb8:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001bba:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d002      	beq.n	8001bca <HAL_ADC_Init+0x10e>
 8001bc4:	2380      	movs	r3, #128	; 0x80
 8001bc6:	015b      	lsls	r3, r3, #5
 8001bc8:	e000      	b.n	8001bcc <HAL_ADC_Init+0x110>
 8001bca:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001bcc:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001bd2:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	691b      	ldr	r3, [r3, #16]
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d101      	bne.n	8001be0 <HAL_ADC_Init+0x124>
 8001bdc:	2304      	movs	r3, #4
 8001bde:	e000      	b.n	8001be2 <HAL_ADC_Init+0x126>
 8001be0:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8001be2:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2124      	movs	r1, #36	; 0x24
 8001be8:	5c5b      	ldrb	r3, [r3, r1]
 8001bea:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001bec:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001bee:	68ba      	ldr	r2, [r7, #8]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	7edb      	ldrb	r3, [r3, #27]
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d115      	bne.n	8001c28 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	7e9b      	ldrb	r3, [r3, #26]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d105      	bne.n	8001c10 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	2280      	movs	r2, #128	; 0x80
 8001c08:	0252      	lsls	r2, r2, #9
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	60bb      	str	r3, [r7, #8]
 8001c0e:	e00b      	b.n	8001c28 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c14:	2220      	movs	r2, #32
 8001c16:	431a      	orrs	r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c20:	2201      	movs	r2, #1
 8001c22:	431a      	orrs	r2, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	69da      	ldr	r2, [r3, #28]
 8001c2c:	23c2      	movs	r3, #194	; 0xc2
 8001c2e:	33ff      	adds	r3, #255	; 0xff
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d007      	beq.n	8001c44 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	68ba      	ldr	r2, [r7, #8]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	68d9      	ldr	r1, [r3, #12]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	68ba      	ldr	r2, [r7, #8]
 8001c50:	430a      	orrs	r2, r1
 8001c52:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c58:	2380      	movs	r3, #128	; 0x80
 8001c5a:	055b      	lsls	r3, r3, #21
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d01b      	beq.n	8001c98 <HAL_ADC_Init+0x1dc>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d017      	beq.n	8001c98 <HAL_ADC_Init+0x1dc>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d013      	beq.n	8001c98 <HAL_ADC_Init+0x1dc>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c74:	2b03      	cmp	r3, #3
 8001c76:	d00f      	beq.n	8001c98 <HAL_ADC_Init+0x1dc>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c7c:	2b04      	cmp	r3, #4
 8001c7e:	d00b      	beq.n	8001c98 <HAL_ADC_Init+0x1dc>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c84:	2b05      	cmp	r3, #5
 8001c86:	d007      	beq.n	8001c98 <HAL_ADC_Init+0x1dc>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c8c:	2b06      	cmp	r3, #6
 8001c8e:	d003      	beq.n	8001c98 <HAL_ADC_Init+0x1dc>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c94:	2b07      	cmp	r3, #7
 8001c96:	d112      	bne.n	8001cbe <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	695a      	ldr	r2, [r3, #20]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	2107      	movs	r1, #7
 8001ca4:	438a      	bics	r2, r1
 8001ca6:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	6959      	ldr	r1, [r3, #20]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb2:	2207      	movs	r2, #7
 8001cb4:	401a      	ands	r2, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	430a      	orrs	r2, r1
 8001cbc:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	4a1c      	ldr	r2, [pc, #112]	; (8001d38 <HAL_ADC_Init+0x27c>)
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	68ba      	ldr	r2, [r7, #8]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d10b      	bne.n	8001ce6 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cd8:	2203      	movs	r2, #3
 8001cda:	4393      	bics	r3, r2
 8001cdc:	2201      	movs	r2, #1
 8001cde:	431a      	orrs	r2, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001ce4:	e01c      	b.n	8001d20 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cea:	2212      	movs	r2, #18
 8001cec:	4393      	bics	r3, r2
 8001cee:	2210      	movs	r2, #16
 8001cf0:	431a      	orrs	r2, r3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	431a      	orrs	r2, r3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8001d02:	230f      	movs	r3, #15
 8001d04:	18fb      	adds	r3, r7, r3
 8001d06:	2201      	movs	r2, #1
 8001d08:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001d0a:	e009      	b.n	8001d20 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d10:	2210      	movs	r2, #16
 8001d12:	431a      	orrs	r2, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8001d18:	230f      	movs	r3, #15
 8001d1a:	18fb      	adds	r3, r7, r3
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001d20:	230f      	movs	r3, #15
 8001d22:	18fb      	adds	r3, r7, r3
 8001d24:	781b      	ldrb	r3, [r3, #0]
}
 8001d26:	0018      	movs	r0, r3
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	b004      	add	sp, #16
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	46c0      	nop			; (mov r8, r8)
 8001d30:	fffffefd 	.word	0xfffffefd
 8001d34:	fffe0219 	.word	0xfffe0219
 8001d38:	833fffe7 	.word	0x833fffe7

08001d3c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001d3c:	b590      	push	{r4, r7, lr}
 8001d3e:	b085      	sub	sp, #20
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d44:	230f      	movs	r3, #15
 8001d46:	18fb      	adds	r3, r7, r3
 8001d48:	2200      	movs	r2, #0
 8001d4a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	2204      	movs	r2, #4
 8001d54:	4013      	ands	r3, r2
 8001d56:	d138      	bne.n	8001dca <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2234      	movs	r2, #52	; 0x34
 8001d5c:	5c9b      	ldrb	r3, [r3, r2]
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d101      	bne.n	8001d66 <HAL_ADC_Start+0x2a>
 8001d62:	2302      	movs	r3, #2
 8001d64:	e038      	b.n	8001dd8 <HAL_ADC_Start+0x9c>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2234      	movs	r2, #52	; 0x34
 8001d6a:	2101      	movs	r1, #1
 8001d6c:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	7e5b      	ldrb	r3, [r3, #25]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d007      	beq.n	8001d86 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001d76:	230f      	movs	r3, #15
 8001d78:	18fc      	adds	r4, r7, r3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	0018      	movs	r0, r3
 8001d7e:	f000 fa0b 	bl	8002198 <ADC_Enable>
 8001d82:	0003      	movs	r3, r0
 8001d84:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001d86:	230f      	movs	r3, #15
 8001d88:	18fb      	adds	r3, r7, r3
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d120      	bne.n	8001dd2 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d94:	4a12      	ldr	r2, [pc, #72]	; (8001de0 <HAL_ADC_Start+0xa4>)
 8001d96:	4013      	ands	r3, r2
 8001d98:	2280      	movs	r2, #128	; 0x80
 8001d9a:	0052      	lsls	r2, r2, #1
 8001d9c:	431a      	orrs	r2, r3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2234      	movs	r2, #52	; 0x34
 8001dac:	2100      	movs	r1, #0
 8001dae:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	221c      	movs	r2, #28
 8001db6:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	689a      	ldr	r2, [r3, #8]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	2104      	movs	r1, #4
 8001dc4:	430a      	orrs	r2, r1
 8001dc6:	609a      	str	r2, [r3, #8]
 8001dc8:	e003      	b.n	8001dd2 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001dca:	230f      	movs	r3, #15
 8001dcc:	18fb      	adds	r3, r7, r3
 8001dce:	2202      	movs	r2, #2
 8001dd0:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001dd2:	230f      	movs	r3, #15
 8001dd4:	18fb      	adds	r3, r7, r3
 8001dd6:	781b      	ldrb	r3, [r3, #0]
}
 8001dd8:	0018      	movs	r0, r3
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	b005      	add	sp, #20
 8001dde:	bd90      	pop	{r4, r7, pc}
 8001de0:	fffff0fe 	.word	0xfffff0fe

08001de4 <HAL_ADC_Stop>:
  * @brief  Stop ADC conversion of regular group, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{ 
 8001de4:	b5b0      	push	{r4, r5, r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dec:	230f      	movs	r3, #15
 8001dee:	18fb      	adds	r3, r7, r3
 8001df0:	2200      	movs	r2, #0
 8001df2:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2234      	movs	r2, #52	; 0x34
 8001df8:	5c9b      	ldrb	r3, [r3, r2]
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d101      	bne.n	8001e02 <HAL_ADC_Stop+0x1e>
 8001dfe:	2302      	movs	r3, #2
 8001e00:	e029      	b.n	8001e56 <HAL_ADC_Stop+0x72>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2234      	movs	r2, #52	; 0x34
 8001e06:	2101      	movs	r1, #1
 8001e08:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8001e0a:	250f      	movs	r5, #15
 8001e0c:	197c      	adds	r4, r7, r5
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	0018      	movs	r0, r3
 8001e12:	f000 fab6 	bl	8002382 <ADC_ConversionStop>
 8001e16:	0003      	movs	r3, r0
 8001e18:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001e1a:	197b      	adds	r3, r7, r5
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d112      	bne.n	8001e48 <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001e22:	197c      	adds	r4, r7, r5
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	0018      	movs	r0, r3
 8001e28:	f000 fa3a 	bl	80022a0 <ADC_Disable>
 8001e2c:	0003      	movs	r3, r0
 8001e2e:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001e30:	197b      	adds	r3, r7, r5
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d107      	bne.n	8001e48 <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e3c:	4a08      	ldr	r2, [pc, #32]	; (8001e60 <HAL_ADC_Stop+0x7c>)
 8001e3e:	4013      	ands	r3, r2
 8001e40:	2201      	movs	r2, #1
 8001e42:	431a      	orrs	r2, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2234      	movs	r2, #52	; 0x34
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001e50:	230f      	movs	r3, #15
 8001e52:	18fb      	adds	r3, r7, r3
 8001e54:	781b      	ldrb	r3, [r3, #0]
}
 8001e56:	0018      	movs	r0, r3
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	b004      	add	sp, #16
 8001e5c:	bdb0      	pop	{r4, r5, r7, pc}
 8001e5e:	46c0      	nop			; (mov r8, r8)
 8001e60:	fffffefe 	.word	0xfffffefe

08001e64 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	695b      	ldr	r3, [r3, #20]
 8001e72:	2b08      	cmp	r3, #8
 8001e74:	d102      	bne.n	8001e7c <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001e76:	2308      	movs	r3, #8
 8001e78:	60fb      	str	r3, [r7, #12]
 8001e7a:	e014      	b.n	8001ea6 <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	2201      	movs	r2, #1
 8001e84:	4013      	ands	r3, r2
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d10b      	bne.n	8001ea2 <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e8e:	2220      	movs	r2, #32
 8001e90:	431a      	orrs	r2, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2234      	movs	r2, #52	; 0x34
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e071      	b.n	8001f86 <HAL_ADC_PollForConversion+0x122>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001ea2:	230c      	movs	r3, #12
 8001ea4:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001ea6:	f7ff fddb 	bl	8001a60 <HAL_GetTick>
 8001eaa:	0003      	movs	r3, r0
 8001eac:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001eae:	e01f      	b.n	8001ef0 <HAL_ADC_PollForConversion+0x8c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	d01c      	beq.n	8001ef0 <HAL_ADC_PollForConversion+0x8c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d007      	beq.n	8001ecc <HAL_ADC_PollForConversion+0x68>
 8001ebc:	f7ff fdd0 	bl	8001a60 <HAL_GetTick>
 8001ec0:	0002      	movs	r2, r0
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	683a      	ldr	r2, [r7, #0]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d211      	bcs.n	8001ef0 <HAL_ADC_PollForConversion+0x8c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	68fa      	ldr	r2, [r7, #12]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	d10b      	bne.n	8001ef0 <HAL_ADC_PollForConversion+0x8c>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001edc:	2204      	movs	r2, #4
 8001ede:	431a      	orrs	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	639a      	str	r2, [r3, #56]	; 0x38

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2234      	movs	r2, #52	; 0x34
 8001ee8:	2100      	movs	r1, #0
 8001eea:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8001eec:	2303      	movs	r3, #3
 8001eee:	e04a      	b.n	8001f86 <HAL_ADC_PollForConversion+0x122>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	68fa      	ldr	r2, [r7, #12]
 8001ef8:	4013      	ands	r3, r2
 8001efa:	d0d9      	beq.n	8001eb0 <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f00:	2280      	movs	r2, #128	; 0x80
 8001f02:	0092      	lsls	r2, r2, #2
 8001f04:	431a      	orrs	r2, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	68da      	ldr	r2, [r3, #12]
 8001f10:	23c0      	movs	r3, #192	; 0xc0
 8001f12:	011b      	lsls	r3, r3, #4
 8001f14:	4013      	ands	r3, r2
 8001f16:	d12d      	bne.n	8001f74 <HAL_ADC_PollForConversion+0x110>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d129      	bne.n	8001f74 <HAL_ADC_PollForConversion+0x110>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	2208      	movs	r2, #8
 8001f28:	4013      	ands	r3, r2
 8001f2a:	2b08      	cmp	r3, #8
 8001f2c:	d122      	bne.n	8001f74 <HAL_ADC_PollForConversion+0x110>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	2204      	movs	r2, #4
 8001f36:	4013      	ands	r3, r2
 8001f38:	d110      	bne.n	8001f5c <HAL_ADC_PollForConversion+0xf8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	685a      	ldr	r2, [r3, #4]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	210c      	movs	r1, #12
 8001f46:	438a      	bics	r2, r1
 8001f48:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f4e:	4a10      	ldr	r2, [pc, #64]	; (8001f90 <HAL_ADC_PollForConversion+0x12c>)
 8001f50:	4013      	ands	r3, r2
 8001f52:	2201      	movs	r2, #1
 8001f54:	431a      	orrs	r2, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	639a      	str	r2, [r3, #56]	; 0x38
 8001f5a:	e00b      	b.n	8001f74 <HAL_ADC_PollForConversion+0x110>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f60:	2220      	movs	r2, #32
 8001f62:	431a      	orrs	r2, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	431a      	orrs	r2, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	7e1b      	ldrb	r3, [r3, #24]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d103      	bne.n	8001f84 <HAL_ADC_PollForConversion+0x120>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	220c      	movs	r2, #12
 8001f82:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	0018      	movs	r0, r3
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	b004      	add	sp, #16
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	46c0      	nop			; (mov r8, r8)
 8001f90:	fffffefe 	.word	0xfffffefe

08001f94 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001fa2:	0018      	movs	r0, r3
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	b002      	add	sp, #8
 8001fa8:	bd80      	pop	{r7, pc}
	...

08001fac <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fb6:	230f      	movs	r3, #15
 8001fb8:	18fb      	adds	r3, r7, r3
 8001fba:	2200      	movs	r2, #0
 8001fbc:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fc6:	2380      	movs	r3, #128	; 0x80
 8001fc8:	055b      	lsls	r3, r3, #21
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d011      	beq.n	8001ff2 <HAL_ADC_ConfigChannel+0x46>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d00d      	beq.n	8001ff2 <HAL_ADC_ConfigChannel+0x46>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d009      	beq.n	8001ff2 <HAL_ADC_ConfigChannel+0x46>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe2:	2b03      	cmp	r3, #3
 8001fe4:	d005      	beq.n	8001ff2 <HAL_ADC_ConfigChannel+0x46>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fea:	2b04      	cmp	r3, #4
 8001fec:	d001      	beq.n	8001ff2 <HAL_ADC_ConfigChannel+0x46>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2234      	movs	r2, #52	; 0x34
 8001ff6:	5c9b      	ldrb	r3, [r3, r2]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d101      	bne.n	8002000 <HAL_ADC_ConfigChannel+0x54>
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	e0bb      	b.n	8002178 <HAL_ADC_ConfigChannel+0x1cc>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2234      	movs	r2, #52	; 0x34
 8002004:	2101      	movs	r1, #1
 8002006:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	2204      	movs	r2, #4
 8002010:	4013      	ands	r3, r2
 8002012:	d000      	beq.n	8002016 <HAL_ADC_ConfigChannel+0x6a>
 8002014:	e09f      	b.n	8002156 <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	4a59      	ldr	r2, [pc, #356]	; (8002180 <HAL_ADC_ConfigChannel+0x1d4>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d100      	bne.n	8002022 <HAL_ADC_ConfigChannel+0x76>
 8002020:	e077      	b.n	8002112 <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2201      	movs	r2, #1
 800202e:	409a      	lsls	r2, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	430a      	orrs	r2, r1
 8002036:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800203c:	2380      	movs	r3, #128	; 0x80
 800203e:	055b      	lsls	r3, r3, #21
 8002040:	429a      	cmp	r2, r3
 8002042:	d037      	beq.n	80020b4 <HAL_ADC_ConfigChannel+0x108>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002048:	2b01      	cmp	r3, #1
 800204a:	d033      	beq.n	80020b4 <HAL_ADC_ConfigChannel+0x108>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002050:	2b02      	cmp	r3, #2
 8002052:	d02f      	beq.n	80020b4 <HAL_ADC_ConfigChannel+0x108>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002058:	2b03      	cmp	r3, #3
 800205a:	d02b      	beq.n	80020b4 <HAL_ADC_ConfigChannel+0x108>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002060:	2b04      	cmp	r3, #4
 8002062:	d027      	beq.n	80020b4 <HAL_ADC_ConfigChannel+0x108>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002068:	2b05      	cmp	r3, #5
 800206a:	d023      	beq.n	80020b4 <HAL_ADC_ConfigChannel+0x108>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002070:	2b06      	cmp	r3, #6
 8002072:	d01f      	beq.n	80020b4 <HAL_ADC_ConfigChannel+0x108>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002078:	2b07      	cmp	r3, #7
 800207a:	d01b      	beq.n	80020b4 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	689a      	ldr	r2, [r3, #8]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	695b      	ldr	r3, [r3, #20]
 8002086:	2107      	movs	r1, #7
 8002088:	400b      	ands	r3, r1
 800208a:	429a      	cmp	r2, r3
 800208c:	d012      	beq.n	80020b4 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	695a      	ldr	r2, [r3, #20]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2107      	movs	r1, #7
 800209a:	438a      	bics	r2, r1
 800209c:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	6959      	ldr	r1, [r3, #20]
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	2207      	movs	r2, #7
 80020aa:	401a      	ands	r2, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	430a      	orrs	r2, r1
 80020b2:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2b10      	cmp	r3, #16
 80020ba:	d003      	beq.n	80020c4 <HAL_ADC_ConfigChannel+0x118>
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2b11      	cmp	r3, #17
 80020c2:	d152      	bne.n	800216a <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80020c4:	4b2f      	ldr	r3, [pc, #188]	; (8002184 <HAL_ADC_ConfigChannel+0x1d8>)
 80020c6:	6819      	ldr	r1, [r3, #0]
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2b10      	cmp	r3, #16
 80020ce:	d102      	bne.n	80020d6 <HAL_ADC_ConfigChannel+0x12a>
 80020d0:	2380      	movs	r3, #128	; 0x80
 80020d2:	041b      	lsls	r3, r3, #16
 80020d4:	e001      	b.n	80020da <HAL_ADC_ConfigChannel+0x12e>
 80020d6:	2380      	movs	r3, #128	; 0x80
 80020d8:	03db      	lsls	r3, r3, #15
 80020da:	4a2a      	ldr	r2, [pc, #168]	; (8002184 <HAL_ADC_ConfigChannel+0x1d8>)
 80020dc:	430b      	orrs	r3, r1
 80020de:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2b10      	cmp	r3, #16
 80020e6:	d140      	bne.n	800216a <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80020e8:	4b27      	ldr	r3, [pc, #156]	; (8002188 <HAL_ADC_ConfigChannel+0x1dc>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4927      	ldr	r1, [pc, #156]	; (800218c <HAL_ADC_ConfigChannel+0x1e0>)
 80020ee:	0018      	movs	r0, r3
 80020f0:	f7fe f80a 	bl	8000108 <__udivsi3>
 80020f4:	0003      	movs	r3, r0
 80020f6:	001a      	movs	r2, r3
 80020f8:	0013      	movs	r3, r2
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	189b      	adds	r3, r3, r2
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002102:	e002      	b.n	800210a <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	3b01      	subs	r3, #1
 8002108:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d1f9      	bne.n	8002104 <HAL_ADC_ConfigChannel+0x158>
 8002110:	e02b      	b.n	800216a <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2101      	movs	r1, #1
 800211e:	4099      	lsls	r1, r3
 8002120:	000b      	movs	r3, r1
 8002122:	43d9      	mvns	r1, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	400a      	ands	r2, r1
 800212a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2b10      	cmp	r3, #16
 8002132:	d003      	beq.n	800213c <HAL_ADC_ConfigChannel+0x190>
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2b11      	cmp	r3, #17
 800213a:	d116      	bne.n	800216a <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800213c:	4b11      	ldr	r3, [pc, #68]	; (8002184 <HAL_ADC_ConfigChannel+0x1d8>)
 800213e:	6819      	ldr	r1, [r3, #0]
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2b10      	cmp	r3, #16
 8002146:	d101      	bne.n	800214c <HAL_ADC_ConfigChannel+0x1a0>
 8002148:	4a11      	ldr	r2, [pc, #68]	; (8002190 <HAL_ADC_ConfigChannel+0x1e4>)
 800214a:	e000      	b.n	800214e <HAL_ADC_ConfigChannel+0x1a2>
 800214c:	4a11      	ldr	r2, [pc, #68]	; (8002194 <HAL_ADC_ConfigChannel+0x1e8>)
 800214e:	4b0d      	ldr	r3, [pc, #52]	; (8002184 <HAL_ADC_ConfigChannel+0x1d8>)
 8002150:	400a      	ands	r2, r1
 8002152:	601a      	str	r2, [r3, #0]
 8002154:	e009      	b.n	800216a <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800215a:	2220      	movs	r2, #32
 800215c:	431a      	orrs	r2, r3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8002162:	230f      	movs	r3, #15
 8002164:	18fb      	adds	r3, r7, r3
 8002166:	2201      	movs	r2, #1
 8002168:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2234      	movs	r2, #52	; 0x34
 800216e:	2100      	movs	r1, #0
 8002170:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002172:	230f      	movs	r3, #15
 8002174:	18fb      	adds	r3, r7, r3
 8002176:	781b      	ldrb	r3, [r3, #0]
}
 8002178:	0018      	movs	r0, r3
 800217a:	46bd      	mov	sp, r7
 800217c:	b004      	add	sp, #16
 800217e:	bd80      	pop	{r7, pc}
 8002180:	00001001 	.word	0x00001001
 8002184:	40012708 	.word	0x40012708
 8002188:	20000000 	.word	0x20000000
 800218c:	000f4240 	.word	0x000f4240
 8002190:	ff7fffff 	.word	0xff7fffff
 8002194:	ffbfffff 	.word	0xffbfffff

08002198 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021a0:	2300      	movs	r3, #0
 80021a2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80021a4:	2300      	movs	r3, #0
 80021a6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	2203      	movs	r2, #3
 80021b0:	4013      	ands	r3, r2
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d112      	bne.n	80021dc <ADC_Enable+0x44>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2201      	movs	r2, #1
 80021be:	4013      	ands	r3, r2
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d009      	beq.n	80021d8 <ADC_Enable+0x40>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	68da      	ldr	r2, [r3, #12]
 80021ca:	2380      	movs	r3, #128	; 0x80
 80021cc:	021b      	lsls	r3, r3, #8
 80021ce:	401a      	ands	r2, r3
 80021d0:	2380      	movs	r3, #128	; 0x80
 80021d2:	021b      	lsls	r3, r3, #8
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d101      	bne.n	80021dc <ADC_Enable+0x44>
 80021d8:	2301      	movs	r3, #1
 80021da:	e000      	b.n	80021de <ADC_Enable+0x46>
 80021dc:	2300      	movs	r3, #0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d152      	bne.n	8002288 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	4a2a      	ldr	r2, [pc, #168]	; (8002294 <ADC_Enable+0xfc>)
 80021ea:	4013      	ands	r3, r2
 80021ec:	d00d      	beq.n	800220a <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021f2:	2210      	movs	r2, #16
 80021f4:	431a      	orrs	r2, r3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021fe:	2201      	movs	r2, #1
 8002200:	431a      	orrs	r2, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e03f      	b.n	800228a <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	689a      	ldr	r2, [r3, #8]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2101      	movs	r1, #1
 8002216:	430a      	orrs	r2, r1
 8002218:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800221a:	4b1f      	ldr	r3, [pc, #124]	; (8002298 <ADC_Enable+0x100>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	491f      	ldr	r1, [pc, #124]	; (800229c <ADC_Enable+0x104>)
 8002220:	0018      	movs	r0, r3
 8002222:	f7fd ff71 	bl	8000108 <__udivsi3>
 8002226:	0003      	movs	r3, r0
 8002228:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800222a:	e002      	b.n	8002232 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	3b01      	subs	r3, #1
 8002230:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d1f9      	bne.n	800222c <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8002238:	f7ff fc12 	bl	8001a60 <HAL_GetTick>
 800223c:	0003      	movs	r3, r0
 800223e:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002240:	e01b      	b.n	800227a <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002242:	f7ff fc0d 	bl	8001a60 <HAL_GetTick>
 8002246:	0002      	movs	r2, r0
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	2b02      	cmp	r3, #2
 800224e:	d914      	bls.n	800227a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	2201      	movs	r2, #1
 8002258:	4013      	ands	r3, r2
 800225a:	2b01      	cmp	r3, #1
 800225c:	d00d      	beq.n	800227a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002262:	2210      	movs	r2, #16
 8002264:	431a      	orrs	r2, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800226e:	2201      	movs	r2, #1
 8002270:	431a      	orrs	r2, r3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e007      	b.n	800228a <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2201      	movs	r2, #1
 8002282:	4013      	ands	r3, r2
 8002284:	2b01      	cmp	r3, #1
 8002286:	d1dc      	bne.n	8002242 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002288:	2300      	movs	r3, #0
}
 800228a:	0018      	movs	r0, r3
 800228c:	46bd      	mov	sp, r7
 800228e:	b004      	add	sp, #16
 8002290:	bd80      	pop	{r7, pc}
 8002292:	46c0      	nop			; (mov r8, r8)
 8002294:	80000017 	.word	0x80000017
 8002298:	20000000 	.word	0x20000000
 800229c:	000f4240 	.word	0x000f4240

080022a0 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022a8:	2300      	movs	r3, #0
 80022aa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	2203      	movs	r2, #3
 80022b4:	4013      	ands	r3, r2
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d112      	bne.n	80022e0 <ADC_Disable+0x40>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	2201      	movs	r2, #1
 80022c2:	4013      	ands	r3, r2
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d009      	beq.n	80022dc <ADC_Disable+0x3c>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	68da      	ldr	r2, [r3, #12]
 80022ce:	2380      	movs	r3, #128	; 0x80
 80022d0:	021b      	lsls	r3, r3, #8
 80022d2:	401a      	ands	r2, r3
 80022d4:	2380      	movs	r3, #128	; 0x80
 80022d6:	021b      	lsls	r3, r3, #8
 80022d8:	429a      	cmp	r2, r3
 80022da:	d101      	bne.n	80022e0 <ADC_Disable+0x40>
 80022dc:	2301      	movs	r3, #1
 80022de:	e000      	b.n	80022e2 <ADC_Disable+0x42>
 80022e0:	2300      	movs	r3, #0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d048      	beq.n	8002378 <ADC_Disable+0xd8>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	2205      	movs	r2, #5
 80022ee:	4013      	ands	r3, r2
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d110      	bne.n	8002316 <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	689a      	ldr	r2, [r3, #8]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	2102      	movs	r1, #2
 8002300:	430a      	orrs	r2, r1
 8002302:	609a      	str	r2, [r3, #8]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2203      	movs	r2, #3
 800230a:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800230c:	f7ff fba8 	bl	8001a60 <HAL_GetTick>
 8002310:	0003      	movs	r3, r0
 8002312:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002314:	e029      	b.n	800236a <ADC_Disable+0xca>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800231a:	2210      	movs	r2, #16
 800231c:	431a      	orrs	r2, r3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	639a      	str	r2, [r3, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002326:	2201      	movs	r2, #1
 8002328:	431a      	orrs	r2, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	63da      	str	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e023      	b.n	800237a <ADC_Disable+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002332:	f7ff fb95 	bl	8001a60 <HAL_GetTick>
 8002336:	0002      	movs	r2, r0
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	2b02      	cmp	r3, #2
 800233e:	d914      	bls.n	800236a <ADC_Disable+0xca>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	2201      	movs	r2, #1
 8002348:	4013      	ands	r3, r2
 800234a:	2b01      	cmp	r3, #1
 800234c:	d10d      	bne.n	800236a <ADC_Disable+0xca>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002352:	2210      	movs	r2, #16
 8002354:	431a      	orrs	r2, r3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800235e:	2201      	movs	r2, #1
 8002360:	431a      	orrs	r2, r3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e007      	b.n	800237a <ADC_Disable+0xda>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	2201      	movs	r2, #1
 8002372:	4013      	ands	r3, r2
 8002374:	2b01      	cmp	r3, #1
 8002376:	d0dc      	beq.n	8002332 <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002378:	2300      	movs	r3, #0
}
 800237a:	0018      	movs	r0, r3
 800237c:	46bd      	mov	sp, r7
 800237e:	b004      	add	sp, #16
 8002380:	bd80      	pop	{r7, pc}

08002382 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8002382:	b580      	push	{r7, lr}
 8002384:	b084      	sub	sp, #16
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800238a:	2300      	movs	r3, #0
 800238c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	2204      	movs	r2, #4
 8002396:	4013      	ands	r3, r2
 8002398:	d03a      	beq.n	8002410 <ADC_ConversionStop+0x8e>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	2204      	movs	r2, #4
 80023a2:	4013      	ands	r3, r2
 80023a4:	2b04      	cmp	r3, #4
 80023a6:	d10d      	bne.n	80023c4 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	2202      	movs	r2, #2
 80023b0:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80023b2:	d107      	bne.n	80023c4 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	689a      	ldr	r2, [r3, #8]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2110      	movs	r1, #16
 80023c0:	430a      	orrs	r2, r1
 80023c2:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80023c4:	f7ff fb4c 	bl	8001a60 <HAL_GetTick>
 80023c8:	0003      	movs	r3, r0
 80023ca:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80023cc:	e01a      	b.n	8002404 <ADC_ConversionStop+0x82>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80023ce:	f7ff fb47 	bl	8001a60 <HAL_GetTick>
 80023d2:	0002      	movs	r2, r0
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d913      	bls.n	8002404 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	2204      	movs	r2, #4
 80023e4:	4013      	ands	r3, r2
 80023e6:	d00d      	beq.n	8002404 <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ec:	2210      	movs	r2, #16
 80023ee:	431a      	orrs	r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023f8:	2201      	movs	r2, #1
 80023fa:	431a      	orrs	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e006      	b.n	8002412 <ADC_ConversionStop+0x90>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	2204      	movs	r2, #4
 800240c:	4013      	ands	r3, r2
 800240e:	d1de      	bne.n	80023ce <ADC_ConversionStop+0x4c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002410:	2300      	movs	r3, #0
}
 8002412:	0018      	movs	r0, r3
 8002414:	46bd      	mov	sp, r7
 8002416:	b004      	add	sp, #16
 8002418:	bd80      	pop	{r7, pc}
	...

0800241c <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b086      	sub	sp, #24
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002424:	2317      	movs	r3, #23
 8002426:	18fb      	adds	r3, r7, r3
 8002428:	2200      	movs	r2, #0
 800242a:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 800242c:	2300      	movs	r3, #0
 800242e:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 8002430:	2300      	movs	r3, #0
 8002432:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2234      	movs	r2, #52	; 0x34
 8002438:	5c9b      	ldrb	r3, [r3, r2]
 800243a:	2b01      	cmp	r3, #1
 800243c:	d101      	bne.n	8002442 <HAL_ADCEx_Calibration_Start+0x26>
 800243e:	2302      	movs	r3, #2
 8002440:	e08d      	b.n	800255e <HAL_ADCEx_Calibration_Start+0x142>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2234      	movs	r2, #52	; 0x34
 8002446:	2101      	movs	r1, #1
 8002448:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	2203      	movs	r2, #3
 8002452:	4013      	ands	r3, r2
 8002454:	2b01      	cmp	r3, #1
 8002456:	d112      	bne.n	800247e <HAL_ADCEx_Calibration_Start+0x62>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2201      	movs	r2, #1
 8002460:	4013      	ands	r3, r2
 8002462:	2b01      	cmp	r3, #1
 8002464:	d009      	beq.n	800247a <HAL_ADCEx_Calibration_Start+0x5e>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	68da      	ldr	r2, [r3, #12]
 800246c:	2380      	movs	r3, #128	; 0x80
 800246e:	021b      	lsls	r3, r3, #8
 8002470:	401a      	ands	r2, r3
 8002472:	2380      	movs	r3, #128	; 0x80
 8002474:	021b      	lsls	r3, r3, #8
 8002476:	429a      	cmp	r2, r3
 8002478:	d101      	bne.n	800247e <HAL_ADCEx_Calibration_Start+0x62>
 800247a:	2301      	movs	r3, #1
 800247c:	e000      	b.n	8002480 <HAL_ADCEx_Calibration_Start+0x64>
 800247e:	2300      	movs	r3, #0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d15b      	bne.n	800253c <HAL_ADCEx_Calibration_Start+0x120>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002488:	4a37      	ldr	r2, [pc, #220]	; (8002568 <HAL_ADCEx_Calibration_Start+0x14c>)
 800248a:	4013      	ands	r3, r2
 800248c:	2202      	movs	r2, #2
 800248e:	431a      	orrs	r2, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	639a      	str	r2, [r3, #56]	; 0x38
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	2203      	movs	r2, #3
 800249c:	4013      	ands	r3, r2
 800249e:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	68da      	ldr	r2, [r3, #12]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	2103      	movs	r1, #3
 80024ac:	438a      	bics	r2, r1
 80024ae:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	689a      	ldr	r2, [r3, #8]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2180      	movs	r1, #128	; 0x80
 80024bc:	0609      	lsls	r1, r1, #24
 80024be:	430a      	orrs	r2, r1
 80024c0:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 80024c2:	f7ff facd 	bl	8001a60 <HAL_GetTick>
 80024c6:	0003      	movs	r3, r0
 80024c8:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80024ca:	e01d      	b.n	8002508 <HAL_ADCEx_Calibration_Start+0xec>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80024cc:	f7ff fac8 	bl	8001a60 <HAL_GetTick>
 80024d0:	0002      	movs	r2, r0
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d916      	bls.n	8002508 <HAL_ADCEx_Calibration_Start+0xec>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	0fdb      	lsrs	r3, r3, #31
 80024e2:	07da      	lsls	r2, r3, #31
 80024e4:	2380      	movs	r3, #128	; 0x80
 80024e6:	061b      	lsls	r3, r3, #24
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d10d      	bne.n	8002508 <HAL_ADCEx_Calibration_Start+0xec>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024f0:	2212      	movs	r2, #18
 80024f2:	4393      	bics	r3, r2
 80024f4:	2210      	movs	r2, #16
 80024f6:	431a      	orrs	r2, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	639a      	str	r2, [r3, #56]	; 0x38
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2234      	movs	r2, #52	; 0x34
 8002500:	2100      	movs	r1, #0
 8002502:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e02a      	b.n	800255e <HAL_ADCEx_Calibration_Start+0x142>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	0fdb      	lsrs	r3, r3, #31
 8002510:	07da      	lsls	r2, r3, #31
 8002512:	2380      	movs	r3, #128	; 0x80
 8002514:	061b      	lsls	r3, r3, #24
 8002516:	429a      	cmp	r2, r3
 8002518:	d0d8      	beq.n	80024cc <HAL_ADCEx_Calibration_Start+0xb0>
        }
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	68d9      	ldr	r1, [r3, #12]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	68fa      	ldr	r2, [r7, #12]
 8002526:	430a      	orrs	r2, r1
 8002528:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800252e:	2203      	movs	r2, #3
 8002530:	4393      	bics	r3, r2
 8002532:	2201      	movs	r2, #1
 8002534:	431a      	orrs	r2, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	639a      	str	r2, [r3, #56]	; 0x38
 800253a:	e009      	b.n	8002550 <HAL_ADCEx_Calibration_Start+0x134>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002540:	2220      	movs	r2, #32
 8002542:	431a      	orrs	r2, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8002548:	2317      	movs	r3, #23
 800254a:	18fb      	adds	r3, r7, r3
 800254c:	2201      	movs	r2, #1
 800254e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2234      	movs	r2, #52	; 0x34
 8002554:	2100      	movs	r1, #0
 8002556:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002558:	2317      	movs	r3, #23
 800255a:	18fb      	adds	r3, r7, r3
 800255c:	781b      	ldrb	r3, [r3, #0]
}
 800255e:	0018      	movs	r0, r3
 8002560:	46bd      	mov	sp, r7
 8002562:	b006      	add	sp, #24
 8002564:	bd80      	pop	{r7, pc}
 8002566:	46c0      	nop			; (mov r8, r8)
 8002568:	fffffefd 	.word	0xfffffefd

0800256c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	0002      	movs	r2, r0
 8002574:	1dfb      	adds	r3, r7, #7
 8002576:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002578:	1dfb      	adds	r3, r7, #7
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	2b7f      	cmp	r3, #127	; 0x7f
 800257e:	d809      	bhi.n	8002594 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002580:	1dfb      	adds	r3, r7, #7
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	001a      	movs	r2, r3
 8002586:	231f      	movs	r3, #31
 8002588:	401a      	ands	r2, r3
 800258a:	4b04      	ldr	r3, [pc, #16]	; (800259c <__NVIC_EnableIRQ+0x30>)
 800258c:	2101      	movs	r1, #1
 800258e:	4091      	lsls	r1, r2
 8002590:	000a      	movs	r2, r1
 8002592:	601a      	str	r2, [r3, #0]
  }
}
 8002594:	46c0      	nop			; (mov r8, r8)
 8002596:	46bd      	mov	sp, r7
 8002598:	b002      	add	sp, #8
 800259a:	bd80      	pop	{r7, pc}
 800259c:	e000e100 	.word	0xe000e100

080025a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025a0:	b590      	push	{r4, r7, lr}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	0002      	movs	r2, r0
 80025a8:	6039      	str	r1, [r7, #0]
 80025aa:	1dfb      	adds	r3, r7, #7
 80025ac:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80025ae:	1dfb      	adds	r3, r7, #7
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	2b7f      	cmp	r3, #127	; 0x7f
 80025b4:	d828      	bhi.n	8002608 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80025b6:	4a2f      	ldr	r2, [pc, #188]	; (8002674 <__NVIC_SetPriority+0xd4>)
 80025b8:	1dfb      	adds	r3, r7, #7
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	b25b      	sxtb	r3, r3
 80025be:	089b      	lsrs	r3, r3, #2
 80025c0:	33c0      	adds	r3, #192	; 0xc0
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	589b      	ldr	r3, [r3, r2]
 80025c6:	1dfa      	adds	r2, r7, #7
 80025c8:	7812      	ldrb	r2, [r2, #0]
 80025ca:	0011      	movs	r1, r2
 80025cc:	2203      	movs	r2, #3
 80025ce:	400a      	ands	r2, r1
 80025d0:	00d2      	lsls	r2, r2, #3
 80025d2:	21ff      	movs	r1, #255	; 0xff
 80025d4:	4091      	lsls	r1, r2
 80025d6:	000a      	movs	r2, r1
 80025d8:	43d2      	mvns	r2, r2
 80025da:	401a      	ands	r2, r3
 80025dc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	019b      	lsls	r3, r3, #6
 80025e2:	22ff      	movs	r2, #255	; 0xff
 80025e4:	401a      	ands	r2, r3
 80025e6:	1dfb      	adds	r3, r7, #7
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	0018      	movs	r0, r3
 80025ec:	2303      	movs	r3, #3
 80025ee:	4003      	ands	r3, r0
 80025f0:	00db      	lsls	r3, r3, #3
 80025f2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80025f4:	481f      	ldr	r0, [pc, #124]	; (8002674 <__NVIC_SetPriority+0xd4>)
 80025f6:	1dfb      	adds	r3, r7, #7
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	b25b      	sxtb	r3, r3
 80025fc:	089b      	lsrs	r3, r3, #2
 80025fe:	430a      	orrs	r2, r1
 8002600:	33c0      	adds	r3, #192	; 0xc0
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002606:	e031      	b.n	800266c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002608:	4a1b      	ldr	r2, [pc, #108]	; (8002678 <__NVIC_SetPriority+0xd8>)
 800260a:	1dfb      	adds	r3, r7, #7
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	0019      	movs	r1, r3
 8002610:	230f      	movs	r3, #15
 8002612:	400b      	ands	r3, r1
 8002614:	3b08      	subs	r3, #8
 8002616:	089b      	lsrs	r3, r3, #2
 8002618:	3306      	adds	r3, #6
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	18d3      	adds	r3, r2, r3
 800261e:	3304      	adds	r3, #4
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	1dfa      	adds	r2, r7, #7
 8002624:	7812      	ldrb	r2, [r2, #0]
 8002626:	0011      	movs	r1, r2
 8002628:	2203      	movs	r2, #3
 800262a:	400a      	ands	r2, r1
 800262c:	00d2      	lsls	r2, r2, #3
 800262e:	21ff      	movs	r1, #255	; 0xff
 8002630:	4091      	lsls	r1, r2
 8002632:	000a      	movs	r2, r1
 8002634:	43d2      	mvns	r2, r2
 8002636:	401a      	ands	r2, r3
 8002638:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	019b      	lsls	r3, r3, #6
 800263e:	22ff      	movs	r2, #255	; 0xff
 8002640:	401a      	ands	r2, r3
 8002642:	1dfb      	adds	r3, r7, #7
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	0018      	movs	r0, r3
 8002648:	2303      	movs	r3, #3
 800264a:	4003      	ands	r3, r0
 800264c:	00db      	lsls	r3, r3, #3
 800264e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002650:	4809      	ldr	r0, [pc, #36]	; (8002678 <__NVIC_SetPriority+0xd8>)
 8002652:	1dfb      	adds	r3, r7, #7
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	001c      	movs	r4, r3
 8002658:	230f      	movs	r3, #15
 800265a:	4023      	ands	r3, r4
 800265c:	3b08      	subs	r3, #8
 800265e:	089b      	lsrs	r3, r3, #2
 8002660:	430a      	orrs	r2, r1
 8002662:	3306      	adds	r3, #6
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	18c3      	adds	r3, r0, r3
 8002668:	3304      	adds	r3, #4
 800266a:	601a      	str	r2, [r3, #0]
}
 800266c:	46c0      	nop			; (mov r8, r8)
 800266e:	46bd      	mov	sp, r7
 8002670:	b003      	add	sp, #12
 8002672:	bd90      	pop	{r4, r7, pc}
 8002674:	e000e100 	.word	0xe000e100
 8002678:	e000ed00 	.word	0xe000ed00

0800267c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	1e5a      	subs	r2, r3, #1
 8002688:	2380      	movs	r3, #128	; 0x80
 800268a:	045b      	lsls	r3, r3, #17
 800268c:	429a      	cmp	r2, r3
 800268e:	d301      	bcc.n	8002694 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002690:	2301      	movs	r3, #1
 8002692:	e010      	b.n	80026b6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002694:	4b0a      	ldr	r3, [pc, #40]	; (80026c0 <SysTick_Config+0x44>)
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	3a01      	subs	r2, #1
 800269a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800269c:	2301      	movs	r3, #1
 800269e:	425b      	negs	r3, r3
 80026a0:	2103      	movs	r1, #3
 80026a2:	0018      	movs	r0, r3
 80026a4:	f7ff ff7c 	bl	80025a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026a8:	4b05      	ldr	r3, [pc, #20]	; (80026c0 <SysTick_Config+0x44>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026ae:	4b04      	ldr	r3, [pc, #16]	; (80026c0 <SysTick_Config+0x44>)
 80026b0:	2207      	movs	r2, #7
 80026b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	0018      	movs	r0, r3
 80026b8:	46bd      	mov	sp, r7
 80026ba:	b002      	add	sp, #8
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	46c0      	nop			; (mov r8, r8)
 80026c0:	e000e010 	.word	0xe000e010

080026c4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	60b9      	str	r1, [r7, #8]
 80026cc:	607a      	str	r2, [r7, #4]
 80026ce:	210f      	movs	r1, #15
 80026d0:	187b      	adds	r3, r7, r1
 80026d2:	1c02      	adds	r2, r0, #0
 80026d4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80026d6:	68ba      	ldr	r2, [r7, #8]
 80026d8:	187b      	adds	r3, r7, r1
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	b25b      	sxtb	r3, r3
 80026de:	0011      	movs	r1, r2
 80026e0:	0018      	movs	r0, r3
 80026e2:	f7ff ff5d 	bl	80025a0 <__NVIC_SetPriority>
}
 80026e6:	46c0      	nop			; (mov r8, r8)
 80026e8:	46bd      	mov	sp, r7
 80026ea:	b004      	add	sp, #16
 80026ec:	bd80      	pop	{r7, pc}

080026ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026ee:	b580      	push	{r7, lr}
 80026f0:	b082      	sub	sp, #8
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	0002      	movs	r2, r0
 80026f6:	1dfb      	adds	r3, r7, #7
 80026f8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026fa:	1dfb      	adds	r3, r7, #7
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	b25b      	sxtb	r3, r3
 8002700:	0018      	movs	r0, r3
 8002702:	f7ff ff33 	bl	800256c <__NVIC_EnableIRQ>
}
 8002706:	46c0      	nop			; (mov r8, r8)
 8002708:	46bd      	mov	sp, r7
 800270a:	b002      	add	sp, #8
 800270c:	bd80      	pop	{r7, pc}

0800270e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800270e:	b580      	push	{r7, lr}
 8002710:	b082      	sub	sp, #8
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	0018      	movs	r0, r3
 800271a:	f7ff ffaf 	bl	800267c <SysTick_Config>
 800271e:	0003      	movs	r3, r0
}
 8002720:	0018      	movs	r0, r3
 8002722:	46bd      	mov	sp, r7
 8002724:	b002      	add	sp, #8
 8002726:	bd80      	pop	{r7, pc}

08002728 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b086      	sub	sp, #24
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002732:	2300      	movs	r3, #0
 8002734:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002736:	e14f      	b.n	80029d8 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2101      	movs	r1, #1
 800273e:	697a      	ldr	r2, [r7, #20]
 8002740:	4091      	lsls	r1, r2
 8002742:	000a      	movs	r2, r1
 8002744:	4013      	ands	r3, r2
 8002746:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d100      	bne.n	8002750 <HAL_GPIO_Init+0x28>
 800274e:	e140      	b.n	80029d2 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	2203      	movs	r2, #3
 8002756:	4013      	ands	r3, r2
 8002758:	2b01      	cmp	r3, #1
 800275a:	d005      	beq.n	8002768 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	2203      	movs	r2, #3
 8002762:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002764:	2b02      	cmp	r3, #2
 8002766:	d130      	bne.n	80027ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	005b      	lsls	r3, r3, #1
 8002772:	2203      	movs	r2, #3
 8002774:	409a      	lsls	r2, r3
 8002776:	0013      	movs	r3, r2
 8002778:	43da      	mvns	r2, r3
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	4013      	ands	r3, r2
 800277e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	68da      	ldr	r2, [r3, #12]
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	409a      	lsls	r2, r3
 800278a:	0013      	movs	r3, r2
 800278c:	693a      	ldr	r2, [r7, #16]
 800278e:	4313      	orrs	r3, r2
 8002790:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	693a      	ldr	r2, [r7, #16]
 8002796:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800279e:	2201      	movs	r2, #1
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	409a      	lsls	r2, r3
 80027a4:	0013      	movs	r3, r2
 80027a6:	43da      	mvns	r2, r3
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	4013      	ands	r3, r2
 80027ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	091b      	lsrs	r3, r3, #4
 80027b4:	2201      	movs	r2, #1
 80027b6:	401a      	ands	r2, r3
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	409a      	lsls	r2, r3
 80027bc:	0013      	movs	r3, r2
 80027be:	693a      	ldr	r2, [r7, #16]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	693a      	ldr	r2, [r7, #16]
 80027c8:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	2203      	movs	r2, #3
 80027d0:	4013      	ands	r3, r2
 80027d2:	2b03      	cmp	r3, #3
 80027d4:	d017      	beq.n	8002806 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	005b      	lsls	r3, r3, #1
 80027e0:	2203      	movs	r2, #3
 80027e2:	409a      	lsls	r2, r3
 80027e4:	0013      	movs	r3, r2
 80027e6:	43da      	mvns	r2, r3
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	4013      	ands	r3, r2
 80027ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	689a      	ldr	r2, [r3, #8]
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	005b      	lsls	r3, r3, #1
 80027f6:	409a      	lsls	r2, r3
 80027f8:	0013      	movs	r3, r2
 80027fa:	693a      	ldr	r2, [r7, #16]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	693a      	ldr	r2, [r7, #16]
 8002804:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	2203      	movs	r2, #3
 800280c:	4013      	ands	r3, r2
 800280e:	2b02      	cmp	r3, #2
 8002810:	d123      	bne.n	800285a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	08da      	lsrs	r2, r3, #3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	3208      	adds	r2, #8
 800281a:	0092      	lsls	r2, r2, #2
 800281c:	58d3      	ldr	r3, [r2, r3]
 800281e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	2207      	movs	r2, #7
 8002824:	4013      	ands	r3, r2
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	220f      	movs	r2, #15
 800282a:	409a      	lsls	r2, r3
 800282c:	0013      	movs	r3, r2
 800282e:	43da      	mvns	r2, r3
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	4013      	ands	r3, r2
 8002834:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	691a      	ldr	r2, [r3, #16]
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	2107      	movs	r1, #7
 800283e:	400b      	ands	r3, r1
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	409a      	lsls	r2, r3
 8002844:	0013      	movs	r3, r2
 8002846:	693a      	ldr	r2, [r7, #16]
 8002848:	4313      	orrs	r3, r2
 800284a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	08da      	lsrs	r2, r3, #3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	3208      	adds	r2, #8
 8002854:	0092      	lsls	r2, r2, #2
 8002856:	6939      	ldr	r1, [r7, #16]
 8002858:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	005b      	lsls	r3, r3, #1
 8002864:	2203      	movs	r2, #3
 8002866:	409a      	lsls	r2, r3
 8002868:	0013      	movs	r3, r2
 800286a:	43da      	mvns	r2, r3
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	4013      	ands	r3, r2
 8002870:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	2203      	movs	r2, #3
 8002878:	401a      	ands	r2, r3
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	005b      	lsls	r3, r3, #1
 800287e:	409a      	lsls	r2, r3
 8002880:	0013      	movs	r3, r2
 8002882:	693a      	ldr	r2, [r7, #16]
 8002884:	4313      	orrs	r3, r2
 8002886:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	693a      	ldr	r2, [r7, #16]
 800288c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	685a      	ldr	r2, [r3, #4]
 8002892:	23c0      	movs	r3, #192	; 0xc0
 8002894:	029b      	lsls	r3, r3, #10
 8002896:	4013      	ands	r3, r2
 8002898:	d100      	bne.n	800289c <HAL_GPIO_Init+0x174>
 800289a:	e09a      	b.n	80029d2 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800289c:	4b54      	ldr	r3, [pc, #336]	; (80029f0 <HAL_GPIO_Init+0x2c8>)
 800289e:	699a      	ldr	r2, [r3, #24]
 80028a0:	4b53      	ldr	r3, [pc, #332]	; (80029f0 <HAL_GPIO_Init+0x2c8>)
 80028a2:	2101      	movs	r1, #1
 80028a4:	430a      	orrs	r2, r1
 80028a6:	619a      	str	r2, [r3, #24]
 80028a8:	4b51      	ldr	r3, [pc, #324]	; (80029f0 <HAL_GPIO_Init+0x2c8>)
 80028aa:	699b      	ldr	r3, [r3, #24]
 80028ac:	2201      	movs	r2, #1
 80028ae:	4013      	ands	r3, r2
 80028b0:	60bb      	str	r3, [r7, #8]
 80028b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80028b4:	4a4f      	ldr	r2, [pc, #316]	; (80029f4 <HAL_GPIO_Init+0x2cc>)
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	089b      	lsrs	r3, r3, #2
 80028ba:	3302      	adds	r3, #2
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	589b      	ldr	r3, [r3, r2]
 80028c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	2203      	movs	r2, #3
 80028c6:	4013      	ands	r3, r2
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	220f      	movs	r2, #15
 80028cc:	409a      	lsls	r2, r3
 80028ce:	0013      	movs	r3, r2
 80028d0:	43da      	mvns	r2, r3
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	4013      	ands	r3, r2
 80028d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	2390      	movs	r3, #144	; 0x90
 80028dc:	05db      	lsls	r3, r3, #23
 80028de:	429a      	cmp	r2, r3
 80028e0:	d013      	beq.n	800290a <HAL_GPIO_Init+0x1e2>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a44      	ldr	r2, [pc, #272]	; (80029f8 <HAL_GPIO_Init+0x2d0>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d00d      	beq.n	8002906 <HAL_GPIO_Init+0x1de>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4a43      	ldr	r2, [pc, #268]	; (80029fc <HAL_GPIO_Init+0x2d4>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d007      	beq.n	8002902 <HAL_GPIO_Init+0x1da>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4a42      	ldr	r2, [pc, #264]	; (8002a00 <HAL_GPIO_Init+0x2d8>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d101      	bne.n	80028fe <HAL_GPIO_Init+0x1d6>
 80028fa:	2303      	movs	r3, #3
 80028fc:	e006      	b.n	800290c <HAL_GPIO_Init+0x1e4>
 80028fe:	2305      	movs	r3, #5
 8002900:	e004      	b.n	800290c <HAL_GPIO_Init+0x1e4>
 8002902:	2302      	movs	r3, #2
 8002904:	e002      	b.n	800290c <HAL_GPIO_Init+0x1e4>
 8002906:	2301      	movs	r3, #1
 8002908:	e000      	b.n	800290c <HAL_GPIO_Init+0x1e4>
 800290a:	2300      	movs	r3, #0
 800290c:	697a      	ldr	r2, [r7, #20]
 800290e:	2103      	movs	r1, #3
 8002910:	400a      	ands	r2, r1
 8002912:	0092      	lsls	r2, r2, #2
 8002914:	4093      	lsls	r3, r2
 8002916:	693a      	ldr	r2, [r7, #16]
 8002918:	4313      	orrs	r3, r2
 800291a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800291c:	4935      	ldr	r1, [pc, #212]	; (80029f4 <HAL_GPIO_Init+0x2cc>)
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	089b      	lsrs	r3, r3, #2
 8002922:	3302      	adds	r3, #2
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	693a      	ldr	r2, [r7, #16]
 8002928:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800292a:	4b36      	ldr	r3, [pc, #216]	; (8002a04 <HAL_GPIO_Init+0x2dc>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	43da      	mvns	r2, r3
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	4013      	ands	r3, r2
 8002938:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	685a      	ldr	r2, [r3, #4]
 800293e:	2380      	movs	r3, #128	; 0x80
 8002940:	025b      	lsls	r3, r3, #9
 8002942:	4013      	ands	r3, r2
 8002944:	d003      	beq.n	800294e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8002946:	693a      	ldr	r2, [r7, #16]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	4313      	orrs	r3, r2
 800294c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800294e:	4b2d      	ldr	r3, [pc, #180]	; (8002a04 <HAL_GPIO_Init+0x2dc>)
 8002950:	693a      	ldr	r2, [r7, #16]
 8002952:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002954:	4b2b      	ldr	r3, [pc, #172]	; (8002a04 <HAL_GPIO_Init+0x2dc>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	43da      	mvns	r2, r3
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	4013      	ands	r3, r2
 8002962:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685a      	ldr	r2, [r3, #4]
 8002968:	2380      	movs	r3, #128	; 0x80
 800296a:	029b      	lsls	r3, r3, #10
 800296c:	4013      	ands	r3, r2
 800296e:	d003      	beq.n	8002978 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8002970:	693a      	ldr	r2, [r7, #16]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	4313      	orrs	r3, r2
 8002976:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002978:	4b22      	ldr	r3, [pc, #136]	; (8002a04 <HAL_GPIO_Init+0x2dc>)
 800297a:	693a      	ldr	r2, [r7, #16]
 800297c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800297e:	4b21      	ldr	r3, [pc, #132]	; (8002a04 <HAL_GPIO_Init+0x2dc>)
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	43da      	mvns	r2, r3
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	4013      	ands	r3, r2
 800298c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	685a      	ldr	r2, [r3, #4]
 8002992:	2380      	movs	r3, #128	; 0x80
 8002994:	035b      	lsls	r3, r3, #13
 8002996:	4013      	ands	r3, r2
 8002998:	d003      	beq.n	80029a2 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800299a:	693a      	ldr	r2, [r7, #16]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	4313      	orrs	r3, r2
 80029a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80029a2:	4b18      	ldr	r3, [pc, #96]	; (8002a04 <HAL_GPIO_Init+0x2dc>)
 80029a4:	693a      	ldr	r2, [r7, #16]
 80029a6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80029a8:	4b16      	ldr	r3, [pc, #88]	; (8002a04 <HAL_GPIO_Init+0x2dc>)
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	43da      	mvns	r2, r3
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	4013      	ands	r3, r2
 80029b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685a      	ldr	r2, [r3, #4]
 80029bc:	2380      	movs	r3, #128	; 0x80
 80029be:	039b      	lsls	r3, r3, #14
 80029c0:	4013      	ands	r3, r2
 80029c2:	d003      	beq.n	80029cc <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80029c4:	693a      	ldr	r2, [r7, #16]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80029cc:	4b0d      	ldr	r3, [pc, #52]	; (8002a04 <HAL_GPIO_Init+0x2dc>)
 80029ce:	693a      	ldr	r2, [r7, #16]
 80029d0:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	3301      	adds	r3, #1
 80029d6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	40da      	lsrs	r2, r3
 80029e0:	1e13      	subs	r3, r2, #0
 80029e2:	d000      	beq.n	80029e6 <HAL_GPIO_Init+0x2be>
 80029e4:	e6a8      	b.n	8002738 <HAL_GPIO_Init+0x10>
  } 
}
 80029e6:	46c0      	nop			; (mov r8, r8)
 80029e8:	46c0      	nop			; (mov r8, r8)
 80029ea:	46bd      	mov	sp, r7
 80029ec:	b006      	add	sp, #24
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	40021000 	.word	0x40021000
 80029f4:	40010000 	.word	0x40010000
 80029f8:	48000400 	.word	0x48000400
 80029fc:	48000800 	.word	0x48000800
 8002a00:	48000c00 	.word	0x48000c00
 8002a04:	40010400 	.word	0x40010400

08002a08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	0008      	movs	r0, r1
 8002a12:	0011      	movs	r1, r2
 8002a14:	1cbb      	adds	r3, r7, #2
 8002a16:	1c02      	adds	r2, r0, #0
 8002a18:	801a      	strh	r2, [r3, #0]
 8002a1a:	1c7b      	adds	r3, r7, #1
 8002a1c:	1c0a      	adds	r2, r1, #0
 8002a1e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a20:	1c7b      	adds	r3, r7, #1
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d004      	beq.n	8002a32 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a28:	1cbb      	adds	r3, r7, #2
 8002a2a:	881a      	ldrh	r2, [r3, #0]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a30:	e003      	b.n	8002a3a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a32:	1cbb      	adds	r3, r7, #2
 8002a34:	881a      	ldrh	r2, [r3, #0]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002a3a:	46c0      	nop			; (mov r8, r8)
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	b002      	add	sp, #8
 8002a40:	bd80      	pop	{r7, pc}
	...

08002a44 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	0002      	movs	r2, r0
 8002a4c:	1dbb      	adds	r3, r7, #6
 8002a4e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002a50:	4b09      	ldr	r3, [pc, #36]	; (8002a78 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002a52:	695b      	ldr	r3, [r3, #20]
 8002a54:	1dba      	adds	r2, r7, #6
 8002a56:	8812      	ldrh	r2, [r2, #0]
 8002a58:	4013      	ands	r3, r2
 8002a5a:	d008      	beq.n	8002a6e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a5c:	4b06      	ldr	r3, [pc, #24]	; (8002a78 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002a5e:	1dba      	adds	r2, r7, #6
 8002a60:	8812      	ldrh	r2, [r2, #0]
 8002a62:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a64:	1dbb      	adds	r3, r7, #6
 8002a66:	881b      	ldrh	r3, [r3, #0]
 8002a68:	0018      	movs	r0, r3
 8002a6a:	f7fe f9b1 	bl	8000dd0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002a6e:	46c0      	nop			; (mov r8, r8)
 8002a70:	46bd      	mov	sp, r7
 8002a72:	b002      	add	sp, #8
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	46c0      	nop			; (mov r8, r8)
 8002a78:	40010400 	.word	0x40010400

08002a7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d101      	bne.n	8002a8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e082      	b.n	8002b94 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2241      	movs	r2, #65	; 0x41
 8002a92:	5c9b      	ldrb	r3, [r3, r2]
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d107      	bne.n	8002aaa <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2240      	movs	r2, #64	; 0x40
 8002a9e:	2100      	movs	r1, #0
 8002aa0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	0018      	movs	r0, r3
 8002aa6:	f7fe fe21 	bl	80016ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2241      	movs	r2, #65	; 0x41
 8002aae:	2124      	movs	r1, #36	; 0x24
 8002ab0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2101      	movs	r1, #1
 8002abe:	438a      	bics	r2, r1
 8002ac0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685a      	ldr	r2, [r3, #4]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4934      	ldr	r1, [pc, #208]	; (8002b9c <HAL_I2C_Init+0x120>)
 8002acc:	400a      	ands	r2, r1
 8002ace:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	689a      	ldr	r2, [r3, #8]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4931      	ldr	r1, [pc, #196]	; (8002ba0 <HAL_I2C_Init+0x124>)
 8002adc:	400a      	ands	r2, r1
 8002ade:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d108      	bne.n	8002afa <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	689a      	ldr	r2, [r3, #8]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2180      	movs	r1, #128	; 0x80
 8002af2:	0209      	lsls	r1, r1, #8
 8002af4:	430a      	orrs	r2, r1
 8002af6:	609a      	str	r2, [r3, #8]
 8002af8:	e007      	b.n	8002b0a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	689a      	ldr	r2, [r3, #8]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2184      	movs	r1, #132	; 0x84
 8002b04:	0209      	lsls	r1, r1, #8
 8002b06:	430a      	orrs	r2, r1
 8002b08:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d104      	bne.n	8002b1c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2280      	movs	r2, #128	; 0x80
 8002b18:	0112      	lsls	r2, r2, #4
 8002b1a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	685a      	ldr	r2, [r3, #4]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	491f      	ldr	r1, [pc, #124]	; (8002ba4 <HAL_I2C_Init+0x128>)
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	68da      	ldr	r2, [r3, #12]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	491a      	ldr	r1, [pc, #104]	; (8002ba0 <HAL_I2C_Init+0x124>)
 8002b38:	400a      	ands	r2, r1
 8002b3a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	691a      	ldr	r2, [r3, #16]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	695b      	ldr	r3, [r3, #20]
 8002b44:	431a      	orrs	r2, r3
 8002b46:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	699b      	ldr	r3, [r3, #24]
 8002b4c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	430a      	orrs	r2, r1
 8002b54:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	69d9      	ldr	r1, [r3, #28]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a1a      	ldr	r2, [r3, #32]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	430a      	orrs	r2, r1
 8002b64:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2101      	movs	r1, #1
 8002b72:	430a      	orrs	r2, r1
 8002b74:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2241      	movs	r2, #65	; 0x41
 8002b80:	2120      	movs	r1, #32
 8002b82:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2242      	movs	r2, #66	; 0x42
 8002b8e:	2100      	movs	r1, #0
 8002b90:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b92:	2300      	movs	r3, #0
}
 8002b94:	0018      	movs	r0, r3
 8002b96:	46bd      	mov	sp, r7
 8002b98:	b002      	add	sp, #8
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	f0ffffff 	.word	0xf0ffffff
 8002ba0:	ffff7fff 	.word	0xffff7fff
 8002ba4:	02008000 	.word	0x02008000

08002ba8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2241      	movs	r2, #65	; 0x41
 8002bb6:	5c9b      	ldrb	r3, [r3, r2]
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	2b20      	cmp	r3, #32
 8002bbc:	d138      	bne.n	8002c30 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2240      	movs	r2, #64	; 0x40
 8002bc2:	5c9b      	ldrb	r3, [r3, r2]
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d101      	bne.n	8002bcc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002bc8:	2302      	movs	r3, #2
 8002bca:	e032      	b.n	8002c32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2240      	movs	r2, #64	; 0x40
 8002bd0:	2101      	movs	r1, #1
 8002bd2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2241      	movs	r2, #65	; 0x41
 8002bd8:	2124      	movs	r1, #36	; 0x24
 8002bda:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2101      	movs	r1, #1
 8002be8:	438a      	bics	r2, r1
 8002bea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4911      	ldr	r1, [pc, #68]	; (8002c3c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002bf8:	400a      	ands	r2, r1
 8002bfa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	6819      	ldr	r1, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	683a      	ldr	r2, [r7, #0]
 8002c08:	430a      	orrs	r2, r1
 8002c0a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2101      	movs	r1, #1
 8002c18:	430a      	orrs	r2, r1
 8002c1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2241      	movs	r2, #65	; 0x41
 8002c20:	2120      	movs	r1, #32
 8002c22:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2240      	movs	r2, #64	; 0x40
 8002c28:	2100      	movs	r1, #0
 8002c2a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	e000      	b.n	8002c32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002c30:	2302      	movs	r3, #2
  }
}
 8002c32:	0018      	movs	r0, r3
 8002c34:	46bd      	mov	sp, r7
 8002c36:	b002      	add	sp, #8
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	46c0      	nop			; (mov r8, r8)
 8002c3c:	ffffefff 	.word	0xffffefff

08002c40 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2241      	movs	r2, #65	; 0x41
 8002c4e:	5c9b      	ldrb	r3, [r3, r2]
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	2b20      	cmp	r3, #32
 8002c54:	d139      	bne.n	8002cca <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2240      	movs	r2, #64	; 0x40
 8002c5a:	5c9b      	ldrb	r3, [r3, r2]
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d101      	bne.n	8002c64 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002c60:	2302      	movs	r3, #2
 8002c62:	e033      	b.n	8002ccc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2240      	movs	r2, #64	; 0x40
 8002c68:	2101      	movs	r1, #1
 8002c6a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2241      	movs	r2, #65	; 0x41
 8002c70:	2124      	movs	r1, #36	; 0x24
 8002c72:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	2101      	movs	r1, #1
 8002c80:	438a      	bics	r2, r1
 8002c82:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	4a11      	ldr	r2, [pc, #68]	; (8002cd4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002c90:	4013      	ands	r3, r2
 8002c92:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	021b      	lsls	r3, r3, #8
 8002c98:	68fa      	ldr	r2, [r7, #12]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	68fa      	ldr	r2, [r7, #12]
 8002ca4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	2101      	movs	r1, #1
 8002cb2:	430a      	orrs	r2, r1
 8002cb4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2241      	movs	r2, #65	; 0x41
 8002cba:	2120      	movs	r1, #32
 8002cbc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2240      	movs	r2, #64	; 0x40
 8002cc2:	2100      	movs	r1, #0
 8002cc4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	e000      	b.n	8002ccc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002cca:	2302      	movs	r3, #2
  }
}
 8002ccc:	0018      	movs	r0, r3
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	b004      	add	sp, #16
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	fffff0ff 	.word	0xfffff0ff

08002cd8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b088      	sub	sp, #32
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d101      	bne.n	8002cea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e305      	b.n	80032f6 <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	d100      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x1e>
 8002cf4:	e08d      	b.n	8002e12 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002cf6:	4bc5      	ldr	r3, [pc, #788]	; (800300c <HAL_RCC_OscConfig+0x334>)
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	220c      	movs	r2, #12
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	2b04      	cmp	r3, #4
 8002d00:	d00e      	beq.n	8002d20 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d02:	4bc2      	ldr	r3, [pc, #776]	; (800300c <HAL_RCC_OscConfig+0x334>)
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	220c      	movs	r2, #12
 8002d08:	4013      	ands	r3, r2
 8002d0a:	2b08      	cmp	r3, #8
 8002d0c:	d116      	bne.n	8002d3c <HAL_RCC_OscConfig+0x64>
 8002d0e:	4bbf      	ldr	r3, [pc, #764]	; (800300c <HAL_RCC_OscConfig+0x334>)
 8002d10:	685a      	ldr	r2, [r3, #4]
 8002d12:	23c0      	movs	r3, #192	; 0xc0
 8002d14:	025b      	lsls	r3, r3, #9
 8002d16:	401a      	ands	r2, r3
 8002d18:	2380      	movs	r3, #128	; 0x80
 8002d1a:	025b      	lsls	r3, r3, #9
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d10d      	bne.n	8002d3c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d20:	4bba      	ldr	r3, [pc, #744]	; (800300c <HAL_RCC_OscConfig+0x334>)
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	2380      	movs	r3, #128	; 0x80
 8002d26:	029b      	lsls	r3, r3, #10
 8002d28:	4013      	ands	r3, r2
 8002d2a:	d100      	bne.n	8002d2e <HAL_RCC_OscConfig+0x56>
 8002d2c:	e070      	b.n	8002e10 <HAL_RCC_OscConfig+0x138>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d000      	beq.n	8002d38 <HAL_RCC_OscConfig+0x60>
 8002d36:	e06b      	b.n	8002e10 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e2dc      	b.n	80032f6 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d107      	bne.n	8002d54 <HAL_RCC_OscConfig+0x7c>
 8002d44:	4bb1      	ldr	r3, [pc, #708]	; (800300c <HAL_RCC_OscConfig+0x334>)
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	4bb0      	ldr	r3, [pc, #704]	; (800300c <HAL_RCC_OscConfig+0x334>)
 8002d4a:	2180      	movs	r1, #128	; 0x80
 8002d4c:	0249      	lsls	r1, r1, #9
 8002d4e:	430a      	orrs	r2, r1
 8002d50:	601a      	str	r2, [r3, #0]
 8002d52:	e02f      	b.n	8002db4 <HAL_RCC_OscConfig+0xdc>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d10c      	bne.n	8002d76 <HAL_RCC_OscConfig+0x9e>
 8002d5c:	4bab      	ldr	r3, [pc, #684]	; (800300c <HAL_RCC_OscConfig+0x334>)
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	4baa      	ldr	r3, [pc, #680]	; (800300c <HAL_RCC_OscConfig+0x334>)
 8002d62:	49ab      	ldr	r1, [pc, #684]	; (8003010 <HAL_RCC_OscConfig+0x338>)
 8002d64:	400a      	ands	r2, r1
 8002d66:	601a      	str	r2, [r3, #0]
 8002d68:	4ba8      	ldr	r3, [pc, #672]	; (800300c <HAL_RCC_OscConfig+0x334>)
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	4ba7      	ldr	r3, [pc, #668]	; (800300c <HAL_RCC_OscConfig+0x334>)
 8002d6e:	49a9      	ldr	r1, [pc, #676]	; (8003014 <HAL_RCC_OscConfig+0x33c>)
 8002d70:	400a      	ands	r2, r1
 8002d72:	601a      	str	r2, [r3, #0]
 8002d74:	e01e      	b.n	8002db4 <HAL_RCC_OscConfig+0xdc>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	2b05      	cmp	r3, #5
 8002d7c:	d10e      	bne.n	8002d9c <HAL_RCC_OscConfig+0xc4>
 8002d7e:	4ba3      	ldr	r3, [pc, #652]	; (800300c <HAL_RCC_OscConfig+0x334>)
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	4ba2      	ldr	r3, [pc, #648]	; (800300c <HAL_RCC_OscConfig+0x334>)
 8002d84:	2180      	movs	r1, #128	; 0x80
 8002d86:	02c9      	lsls	r1, r1, #11
 8002d88:	430a      	orrs	r2, r1
 8002d8a:	601a      	str	r2, [r3, #0]
 8002d8c:	4b9f      	ldr	r3, [pc, #636]	; (800300c <HAL_RCC_OscConfig+0x334>)
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	4b9e      	ldr	r3, [pc, #632]	; (800300c <HAL_RCC_OscConfig+0x334>)
 8002d92:	2180      	movs	r1, #128	; 0x80
 8002d94:	0249      	lsls	r1, r1, #9
 8002d96:	430a      	orrs	r2, r1
 8002d98:	601a      	str	r2, [r3, #0]
 8002d9a:	e00b      	b.n	8002db4 <HAL_RCC_OscConfig+0xdc>
 8002d9c:	4b9b      	ldr	r3, [pc, #620]	; (800300c <HAL_RCC_OscConfig+0x334>)
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	4b9a      	ldr	r3, [pc, #616]	; (800300c <HAL_RCC_OscConfig+0x334>)
 8002da2:	499b      	ldr	r1, [pc, #620]	; (8003010 <HAL_RCC_OscConfig+0x338>)
 8002da4:	400a      	ands	r2, r1
 8002da6:	601a      	str	r2, [r3, #0]
 8002da8:	4b98      	ldr	r3, [pc, #608]	; (800300c <HAL_RCC_OscConfig+0x334>)
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	4b97      	ldr	r3, [pc, #604]	; (800300c <HAL_RCC_OscConfig+0x334>)
 8002dae:	4999      	ldr	r1, [pc, #612]	; (8003014 <HAL_RCC_OscConfig+0x33c>)
 8002db0:	400a      	ands	r2, r1
 8002db2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d014      	beq.n	8002de6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dbc:	f7fe fe50 	bl	8001a60 <HAL_GetTick>
 8002dc0:	0003      	movs	r3, r0
 8002dc2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dc4:	e008      	b.n	8002dd8 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dc6:	f7fe fe4b 	bl	8001a60 <HAL_GetTick>
 8002dca:	0002      	movs	r2, r0
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	2b64      	cmp	r3, #100	; 0x64
 8002dd2:	d901      	bls.n	8002dd8 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e28e      	b.n	80032f6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dd8:	4b8c      	ldr	r3, [pc, #560]	; (800300c <HAL_RCC_OscConfig+0x334>)
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	2380      	movs	r3, #128	; 0x80
 8002dde:	029b      	lsls	r3, r3, #10
 8002de0:	4013      	ands	r3, r2
 8002de2:	d0f0      	beq.n	8002dc6 <HAL_RCC_OscConfig+0xee>
 8002de4:	e015      	b.n	8002e12 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de6:	f7fe fe3b 	bl	8001a60 <HAL_GetTick>
 8002dea:	0003      	movs	r3, r0
 8002dec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dee:	e008      	b.n	8002e02 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002df0:	f7fe fe36 	bl	8001a60 <HAL_GetTick>
 8002df4:	0002      	movs	r2, r0
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	2b64      	cmp	r3, #100	; 0x64
 8002dfc:	d901      	bls.n	8002e02 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e279      	b.n	80032f6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e02:	4b82      	ldr	r3, [pc, #520]	; (800300c <HAL_RCC_OscConfig+0x334>)
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	2380      	movs	r3, #128	; 0x80
 8002e08:	029b      	lsls	r3, r3, #10
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	d1f0      	bne.n	8002df0 <HAL_RCC_OscConfig+0x118>
 8002e0e:	e000      	b.n	8002e12 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e10:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2202      	movs	r2, #2
 8002e18:	4013      	ands	r3, r2
 8002e1a:	d100      	bne.n	8002e1e <HAL_RCC_OscConfig+0x146>
 8002e1c:	e06c      	b.n	8002ef8 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002e1e:	4b7b      	ldr	r3, [pc, #492]	; (800300c <HAL_RCC_OscConfig+0x334>)
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	220c      	movs	r2, #12
 8002e24:	4013      	ands	r3, r2
 8002e26:	d00e      	beq.n	8002e46 <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002e28:	4b78      	ldr	r3, [pc, #480]	; (800300c <HAL_RCC_OscConfig+0x334>)
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	220c      	movs	r2, #12
 8002e2e:	4013      	ands	r3, r2
 8002e30:	2b08      	cmp	r3, #8
 8002e32:	d11f      	bne.n	8002e74 <HAL_RCC_OscConfig+0x19c>
 8002e34:	4b75      	ldr	r3, [pc, #468]	; (800300c <HAL_RCC_OscConfig+0x334>)
 8002e36:	685a      	ldr	r2, [r3, #4]
 8002e38:	23c0      	movs	r3, #192	; 0xc0
 8002e3a:	025b      	lsls	r3, r3, #9
 8002e3c:	401a      	ands	r2, r3
 8002e3e:	2380      	movs	r3, #128	; 0x80
 8002e40:	021b      	lsls	r3, r3, #8
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d116      	bne.n	8002e74 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e46:	4b71      	ldr	r3, [pc, #452]	; (800300c <HAL_RCC_OscConfig+0x334>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2202      	movs	r2, #2
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	d005      	beq.n	8002e5c <HAL_RCC_OscConfig+0x184>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d001      	beq.n	8002e5c <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e24c      	b.n	80032f6 <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e5c:	4b6b      	ldr	r3, [pc, #428]	; (800300c <HAL_RCC_OscConfig+0x334>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	22f8      	movs	r2, #248	; 0xf8
 8002e62:	4393      	bics	r3, r2
 8002e64:	0019      	movs	r1, r3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	691b      	ldr	r3, [r3, #16]
 8002e6a:	00da      	lsls	r2, r3, #3
 8002e6c:	4b67      	ldr	r3, [pc, #412]	; (800300c <HAL_RCC_OscConfig+0x334>)
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e72:	e041      	b.n	8002ef8 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d024      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e7c:	4b63      	ldr	r3, [pc, #396]	; (800300c <HAL_RCC_OscConfig+0x334>)
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	4b62      	ldr	r3, [pc, #392]	; (800300c <HAL_RCC_OscConfig+0x334>)
 8002e82:	2101      	movs	r1, #1
 8002e84:	430a      	orrs	r2, r1
 8002e86:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e88:	f7fe fdea 	bl	8001a60 <HAL_GetTick>
 8002e8c:	0003      	movs	r3, r0
 8002e8e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e90:	e008      	b.n	8002ea4 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e92:	f7fe fde5 	bl	8001a60 <HAL_GetTick>
 8002e96:	0002      	movs	r2, r0
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d901      	bls.n	8002ea4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	e228      	b.n	80032f6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ea4:	4b59      	ldr	r3, [pc, #356]	; (800300c <HAL_RCC_OscConfig+0x334>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2202      	movs	r2, #2
 8002eaa:	4013      	ands	r3, r2
 8002eac:	d0f1      	beq.n	8002e92 <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eae:	4b57      	ldr	r3, [pc, #348]	; (800300c <HAL_RCC_OscConfig+0x334>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	22f8      	movs	r2, #248	; 0xf8
 8002eb4:	4393      	bics	r3, r2
 8002eb6:	0019      	movs	r1, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	691b      	ldr	r3, [r3, #16]
 8002ebc:	00da      	lsls	r2, r3, #3
 8002ebe:	4b53      	ldr	r3, [pc, #332]	; (800300c <HAL_RCC_OscConfig+0x334>)
 8002ec0:	430a      	orrs	r2, r1
 8002ec2:	601a      	str	r2, [r3, #0]
 8002ec4:	e018      	b.n	8002ef8 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ec6:	4b51      	ldr	r3, [pc, #324]	; (800300c <HAL_RCC_OscConfig+0x334>)
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	4b50      	ldr	r3, [pc, #320]	; (800300c <HAL_RCC_OscConfig+0x334>)
 8002ecc:	2101      	movs	r1, #1
 8002ece:	438a      	bics	r2, r1
 8002ed0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed2:	f7fe fdc5 	bl	8001a60 <HAL_GetTick>
 8002ed6:	0003      	movs	r3, r0
 8002ed8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eda:	e008      	b.n	8002eee <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002edc:	f7fe fdc0 	bl	8001a60 <HAL_GetTick>
 8002ee0:	0002      	movs	r2, r0
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d901      	bls.n	8002eee <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e203      	b.n	80032f6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eee:	4b47      	ldr	r3, [pc, #284]	; (800300c <HAL_RCC_OscConfig+0x334>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2202      	movs	r2, #2
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	d1f1      	bne.n	8002edc <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2208      	movs	r2, #8
 8002efe:	4013      	ands	r3, r2
 8002f00:	d036      	beq.n	8002f70 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	69db      	ldr	r3, [r3, #28]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d019      	beq.n	8002f3e <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f0a:	4b40      	ldr	r3, [pc, #256]	; (800300c <HAL_RCC_OscConfig+0x334>)
 8002f0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f0e:	4b3f      	ldr	r3, [pc, #252]	; (800300c <HAL_RCC_OscConfig+0x334>)
 8002f10:	2101      	movs	r1, #1
 8002f12:	430a      	orrs	r2, r1
 8002f14:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f16:	f7fe fda3 	bl	8001a60 <HAL_GetTick>
 8002f1a:	0003      	movs	r3, r0
 8002f1c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f1e:	e008      	b.n	8002f32 <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f20:	f7fe fd9e 	bl	8001a60 <HAL_GetTick>
 8002f24:	0002      	movs	r2, r0
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d901      	bls.n	8002f32 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e1e1      	b.n	80032f6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f32:	4b36      	ldr	r3, [pc, #216]	; (800300c <HAL_RCC_OscConfig+0x334>)
 8002f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f36:	2202      	movs	r2, #2
 8002f38:	4013      	ands	r3, r2
 8002f3a:	d0f1      	beq.n	8002f20 <HAL_RCC_OscConfig+0x248>
 8002f3c:	e018      	b.n	8002f70 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f3e:	4b33      	ldr	r3, [pc, #204]	; (800300c <HAL_RCC_OscConfig+0x334>)
 8002f40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f42:	4b32      	ldr	r3, [pc, #200]	; (800300c <HAL_RCC_OscConfig+0x334>)
 8002f44:	2101      	movs	r1, #1
 8002f46:	438a      	bics	r2, r1
 8002f48:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f4a:	f7fe fd89 	bl	8001a60 <HAL_GetTick>
 8002f4e:	0003      	movs	r3, r0
 8002f50:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f52:	e008      	b.n	8002f66 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f54:	f7fe fd84 	bl	8001a60 <HAL_GetTick>
 8002f58:	0002      	movs	r2, r0
 8002f5a:	69bb      	ldr	r3, [r7, #24]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d901      	bls.n	8002f66 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e1c7      	b.n	80032f6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f66:	4b29      	ldr	r3, [pc, #164]	; (800300c <HAL_RCC_OscConfig+0x334>)
 8002f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6a:	2202      	movs	r2, #2
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	d1f1      	bne.n	8002f54 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2204      	movs	r2, #4
 8002f76:	4013      	ands	r3, r2
 8002f78:	d100      	bne.n	8002f7c <HAL_RCC_OscConfig+0x2a4>
 8002f7a:	e0b5      	b.n	80030e8 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f7c:	201f      	movs	r0, #31
 8002f7e:	183b      	adds	r3, r7, r0
 8002f80:	2200      	movs	r2, #0
 8002f82:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f84:	4b21      	ldr	r3, [pc, #132]	; (800300c <HAL_RCC_OscConfig+0x334>)
 8002f86:	69da      	ldr	r2, [r3, #28]
 8002f88:	2380      	movs	r3, #128	; 0x80
 8002f8a:	055b      	lsls	r3, r3, #21
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	d110      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f90:	4b1e      	ldr	r3, [pc, #120]	; (800300c <HAL_RCC_OscConfig+0x334>)
 8002f92:	69da      	ldr	r2, [r3, #28]
 8002f94:	4b1d      	ldr	r3, [pc, #116]	; (800300c <HAL_RCC_OscConfig+0x334>)
 8002f96:	2180      	movs	r1, #128	; 0x80
 8002f98:	0549      	lsls	r1, r1, #21
 8002f9a:	430a      	orrs	r2, r1
 8002f9c:	61da      	str	r2, [r3, #28]
 8002f9e:	4b1b      	ldr	r3, [pc, #108]	; (800300c <HAL_RCC_OscConfig+0x334>)
 8002fa0:	69da      	ldr	r2, [r3, #28]
 8002fa2:	2380      	movs	r3, #128	; 0x80
 8002fa4:	055b      	lsls	r3, r3, #21
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	60fb      	str	r3, [r7, #12]
 8002faa:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002fac:	183b      	adds	r3, r7, r0
 8002fae:	2201      	movs	r2, #1
 8002fb0:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fb2:	4b19      	ldr	r3, [pc, #100]	; (8003018 <HAL_RCC_OscConfig+0x340>)
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	2380      	movs	r3, #128	; 0x80
 8002fb8:	005b      	lsls	r3, r3, #1
 8002fba:	4013      	ands	r3, r2
 8002fbc:	d11a      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fbe:	4b16      	ldr	r3, [pc, #88]	; (8003018 <HAL_RCC_OscConfig+0x340>)
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	4b15      	ldr	r3, [pc, #84]	; (8003018 <HAL_RCC_OscConfig+0x340>)
 8002fc4:	2180      	movs	r1, #128	; 0x80
 8002fc6:	0049      	lsls	r1, r1, #1
 8002fc8:	430a      	orrs	r2, r1
 8002fca:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fcc:	f7fe fd48 	bl	8001a60 <HAL_GetTick>
 8002fd0:	0003      	movs	r3, r0
 8002fd2:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fd4:	e008      	b.n	8002fe8 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fd6:	f7fe fd43 	bl	8001a60 <HAL_GetTick>
 8002fda:	0002      	movs	r2, r0
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	2b64      	cmp	r3, #100	; 0x64
 8002fe2:	d901      	bls.n	8002fe8 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	e186      	b.n	80032f6 <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fe8:	4b0b      	ldr	r3, [pc, #44]	; (8003018 <HAL_RCC_OscConfig+0x340>)
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	2380      	movs	r3, #128	; 0x80
 8002fee:	005b      	lsls	r3, r3, #1
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	d0f0      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d10f      	bne.n	800301c <HAL_RCC_OscConfig+0x344>
 8002ffc:	4b03      	ldr	r3, [pc, #12]	; (800300c <HAL_RCC_OscConfig+0x334>)
 8002ffe:	6a1a      	ldr	r2, [r3, #32]
 8003000:	4b02      	ldr	r3, [pc, #8]	; (800300c <HAL_RCC_OscConfig+0x334>)
 8003002:	2101      	movs	r1, #1
 8003004:	430a      	orrs	r2, r1
 8003006:	621a      	str	r2, [r3, #32]
 8003008:	e036      	b.n	8003078 <HAL_RCC_OscConfig+0x3a0>
 800300a:	46c0      	nop			; (mov r8, r8)
 800300c:	40021000 	.word	0x40021000
 8003010:	fffeffff 	.word	0xfffeffff
 8003014:	fffbffff 	.word	0xfffbffff
 8003018:	40007000 	.word	0x40007000
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d10c      	bne.n	800303e <HAL_RCC_OscConfig+0x366>
 8003024:	4bb6      	ldr	r3, [pc, #728]	; (8003300 <HAL_RCC_OscConfig+0x628>)
 8003026:	6a1a      	ldr	r2, [r3, #32]
 8003028:	4bb5      	ldr	r3, [pc, #724]	; (8003300 <HAL_RCC_OscConfig+0x628>)
 800302a:	2101      	movs	r1, #1
 800302c:	438a      	bics	r2, r1
 800302e:	621a      	str	r2, [r3, #32]
 8003030:	4bb3      	ldr	r3, [pc, #716]	; (8003300 <HAL_RCC_OscConfig+0x628>)
 8003032:	6a1a      	ldr	r2, [r3, #32]
 8003034:	4bb2      	ldr	r3, [pc, #712]	; (8003300 <HAL_RCC_OscConfig+0x628>)
 8003036:	2104      	movs	r1, #4
 8003038:	438a      	bics	r2, r1
 800303a:	621a      	str	r2, [r3, #32]
 800303c:	e01c      	b.n	8003078 <HAL_RCC_OscConfig+0x3a0>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	2b05      	cmp	r3, #5
 8003044:	d10c      	bne.n	8003060 <HAL_RCC_OscConfig+0x388>
 8003046:	4bae      	ldr	r3, [pc, #696]	; (8003300 <HAL_RCC_OscConfig+0x628>)
 8003048:	6a1a      	ldr	r2, [r3, #32]
 800304a:	4bad      	ldr	r3, [pc, #692]	; (8003300 <HAL_RCC_OscConfig+0x628>)
 800304c:	2104      	movs	r1, #4
 800304e:	430a      	orrs	r2, r1
 8003050:	621a      	str	r2, [r3, #32]
 8003052:	4bab      	ldr	r3, [pc, #684]	; (8003300 <HAL_RCC_OscConfig+0x628>)
 8003054:	6a1a      	ldr	r2, [r3, #32]
 8003056:	4baa      	ldr	r3, [pc, #680]	; (8003300 <HAL_RCC_OscConfig+0x628>)
 8003058:	2101      	movs	r1, #1
 800305a:	430a      	orrs	r2, r1
 800305c:	621a      	str	r2, [r3, #32]
 800305e:	e00b      	b.n	8003078 <HAL_RCC_OscConfig+0x3a0>
 8003060:	4ba7      	ldr	r3, [pc, #668]	; (8003300 <HAL_RCC_OscConfig+0x628>)
 8003062:	6a1a      	ldr	r2, [r3, #32]
 8003064:	4ba6      	ldr	r3, [pc, #664]	; (8003300 <HAL_RCC_OscConfig+0x628>)
 8003066:	2101      	movs	r1, #1
 8003068:	438a      	bics	r2, r1
 800306a:	621a      	str	r2, [r3, #32]
 800306c:	4ba4      	ldr	r3, [pc, #656]	; (8003300 <HAL_RCC_OscConfig+0x628>)
 800306e:	6a1a      	ldr	r2, [r3, #32]
 8003070:	4ba3      	ldr	r3, [pc, #652]	; (8003300 <HAL_RCC_OscConfig+0x628>)
 8003072:	2104      	movs	r1, #4
 8003074:	438a      	bics	r2, r1
 8003076:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d014      	beq.n	80030aa <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003080:	f7fe fcee 	bl	8001a60 <HAL_GetTick>
 8003084:	0003      	movs	r3, r0
 8003086:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003088:	e009      	b.n	800309e <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800308a:	f7fe fce9 	bl	8001a60 <HAL_GetTick>
 800308e:	0002      	movs	r2, r0
 8003090:	69bb      	ldr	r3, [r7, #24]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	4a9b      	ldr	r2, [pc, #620]	; (8003304 <HAL_RCC_OscConfig+0x62c>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d901      	bls.n	800309e <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e12b      	b.n	80032f6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800309e:	4b98      	ldr	r3, [pc, #608]	; (8003300 <HAL_RCC_OscConfig+0x628>)
 80030a0:	6a1b      	ldr	r3, [r3, #32]
 80030a2:	2202      	movs	r2, #2
 80030a4:	4013      	ands	r3, r2
 80030a6:	d0f0      	beq.n	800308a <HAL_RCC_OscConfig+0x3b2>
 80030a8:	e013      	b.n	80030d2 <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030aa:	f7fe fcd9 	bl	8001a60 <HAL_GetTick>
 80030ae:	0003      	movs	r3, r0
 80030b0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030b2:	e009      	b.n	80030c8 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030b4:	f7fe fcd4 	bl	8001a60 <HAL_GetTick>
 80030b8:	0002      	movs	r2, r0
 80030ba:	69bb      	ldr	r3, [r7, #24]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	4a91      	ldr	r2, [pc, #580]	; (8003304 <HAL_RCC_OscConfig+0x62c>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d901      	bls.n	80030c8 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 80030c4:	2303      	movs	r3, #3
 80030c6:	e116      	b.n	80032f6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030c8:	4b8d      	ldr	r3, [pc, #564]	; (8003300 <HAL_RCC_OscConfig+0x628>)
 80030ca:	6a1b      	ldr	r3, [r3, #32]
 80030cc:	2202      	movs	r2, #2
 80030ce:	4013      	ands	r3, r2
 80030d0:	d1f0      	bne.n	80030b4 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80030d2:	231f      	movs	r3, #31
 80030d4:	18fb      	adds	r3, r7, r3
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d105      	bne.n	80030e8 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030dc:	4b88      	ldr	r3, [pc, #544]	; (8003300 <HAL_RCC_OscConfig+0x628>)
 80030de:	69da      	ldr	r2, [r3, #28]
 80030e0:	4b87      	ldr	r3, [pc, #540]	; (8003300 <HAL_RCC_OscConfig+0x628>)
 80030e2:	4989      	ldr	r1, [pc, #548]	; (8003308 <HAL_RCC_OscConfig+0x630>)
 80030e4:	400a      	ands	r2, r1
 80030e6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2210      	movs	r2, #16
 80030ee:	4013      	ands	r3, r2
 80030f0:	d063      	beq.n	80031ba <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	695b      	ldr	r3, [r3, #20]
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d12a      	bne.n	8003150 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80030fa:	4b81      	ldr	r3, [pc, #516]	; (8003300 <HAL_RCC_OscConfig+0x628>)
 80030fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030fe:	4b80      	ldr	r3, [pc, #512]	; (8003300 <HAL_RCC_OscConfig+0x628>)
 8003100:	2104      	movs	r1, #4
 8003102:	430a      	orrs	r2, r1
 8003104:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003106:	4b7e      	ldr	r3, [pc, #504]	; (8003300 <HAL_RCC_OscConfig+0x628>)
 8003108:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800310a:	4b7d      	ldr	r3, [pc, #500]	; (8003300 <HAL_RCC_OscConfig+0x628>)
 800310c:	2101      	movs	r1, #1
 800310e:	430a      	orrs	r2, r1
 8003110:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003112:	f7fe fca5 	bl	8001a60 <HAL_GetTick>
 8003116:	0003      	movs	r3, r0
 8003118:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800311a:	e008      	b.n	800312e <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800311c:	f7fe fca0 	bl	8001a60 <HAL_GetTick>
 8003120:	0002      	movs	r2, r0
 8003122:	69bb      	ldr	r3, [r7, #24]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	2b02      	cmp	r3, #2
 8003128:	d901      	bls.n	800312e <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e0e3      	b.n	80032f6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800312e:	4b74      	ldr	r3, [pc, #464]	; (8003300 <HAL_RCC_OscConfig+0x628>)
 8003130:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003132:	2202      	movs	r2, #2
 8003134:	4013      	ands	r3, r2
 8003136:	d0f1      	beq.n	800311c <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003138:	4b71      	ldr	r3, [pc, #452]	; (8003300 <HAL_RCC_OscConfig+0x628>)
 800313a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800313c:	22f8      	movs	r2, #248	; 0xf8
 800313e:	4393      	bics	r3, r2
 8003140:	0019      	movs	r1, r3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	699b      	ldr	r3, [r3, #24]
 8003146:	00da      	lsls	r2, r3, #3
 8003148:	4b6d      	ldr	r3, [pc, #436]	; (8003300 <HAL_RCC_OscConfig+0x628>)
 800314a:	430a      	orrs	r2, r1
 800314c:	635a      	str	r2, [r3, #52]	; 0x34
 800314e:	e034      	b.n	80031ba <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	695b      	ldr	r3, [r3, #20]
 8003154:	3305      	adds	r3, #5
 8003156:	d111      	bne.n	800317c <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003158:	4b69      	ldr	r3, [pc, #420]	; (8003300 <HAL_RCC_OscConfig+0x628>)
 800315a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800315c:	4b68      	ldr	r3, [pc, #416]	; (8003300 <HAL_RCC_OscConfig+0x628>)
 800315e:	2104      	movs	r1, #4
 8003160:	438a      	bics	r2, r1
 8003162:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003164:	4b66      	ldr	r3, [pc, #408]	; (8003300 <HAL_RCC_OscConfig+0x628>)
 8003166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003168:	22f8      	movs	r2, #248	; 0xf8
 800316a:	4393      	bics	r3, r2
 800316c:	0019      	movs	r1, r3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	699b      	ldr	r3, [r3, #24]
 8003172:	00da      	lsls	r2, r3, #3
 8003174:	4b62      	ldr	r3, [pc, #392]	; (8003300 <HAL_RCC_OscConfig+0x628>)
 8003176:	430a      	orrs	r2, r1
 8003178:	635a      	str	r2, [r3, #52]	; 0x34
 800317a:	e01e      	b.n	80031ba <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800317c:	4b60      	ldr	r3, [pc, #384]	; (8003300 <HAL_RCC_OscConfig+0x628>)
 800317e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003180:	4b5f      	ldr	r3, [pc, #380]	; (8003300 <HAL_RCC_OscConfig+0x628>)
 8003182:	2104      	movs	r1, #4
 8003184:	430a      	orrs	r2, r1
 8003186:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003188:	4b5d      	ldr	r3, [pc, #372]	; (8003300 <HAL_RCC_OscConfig+0x628>)
 800318a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800318c:	4b5c      	ldr	r3, [pc, #368]	; (8003300 <HAL_RCC_OscConfig+0x628>)
 800318e:	2101      	movs	r1, #1
 8003190:	438a      	bics	r2, r1
 8003192:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003194:	f7fe fc64 	bl	8001a60 <HAL_GetTick>
 8003198:	0003      	movs	r3, r0
 800319a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800319c:	e008      	b.n	80031b0 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800319e:	f7fe fc5f 	bl	8001a60 <HAL_GetTick>
 80031a2:	0002      	movs	r2, r0
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	d901      	bls.n	80031b0 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 80031ac:	2303      	movs	r3, #3
 80031ae:	e0a2      	b.n	80032f6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80031b0:	4b53      	ldr	r3, [pc, #332]	; (8003300 <HAL_RCC_OscConfig+0x628>)
 80031b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031b4:	2202      	movs	r2, #2
 80031b6:	4013      	ands	r3, r2
 80031b8:	d1f1      	bne.n	800319e <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a1b      	ldr	r3, [r3, #32]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d100      	bne.n	80031c4 <HAL_RCC_OscConfig+0x4ec>
 80031c2:	e097      	b.n	80032f4 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031c4:	4b4e      	ldr	r3, [pc, #312]	; (8003300 <HAL_RCC_OscConfig+0x628>)
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	220c      	movs	r2, #12
 80031ca:	4013      	ands	r3, r2
 80031cc:	2b08      	cmp	r3, #8
 80031ce:	d100      	bne.n	80031d2 <HAL_RCC_OscConfig+0x4fa>
 80031d0:	e06b      	b.n	80032aa <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a1b      	ldr	r3, [r3, #32]
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d14c      	bne.n	8003274 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031da:	4b49      	ldr	r3, [pc, #292]	; (8003300 <HAL_RCC_OscConfig+0x628>)
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	4b48      	ldr	r3, [pc, #288]	; (8003300 <HAL_RCC_OscConfig+0x628>)
 80031e0:	494a      	ldr	r1, [pc, #296]	; (800330c <HAL_RCC_OscConfig+0x634>)
 80031e2:	400a      	ands	r2, r1
 80031e4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031e6:	f7fe fc3b 	bl	8001a60 <HAL_GetTick>
 80031ea:	0003      	movs	r3, r0
 80031ec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031ee:	e008      	b.n	8003202 <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031f0:	f7fe fc36 	bl	8001a60 <HAL_GetTick>
 80031f4:	0002      	movs	r2, r0
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e079      	b.n	80032f6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003202:	4b3f      	ldr	r3, [pc, #252]	; (8003300 <HAL_RCC_OscConfig+0x628>)
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	2380      	movs	r3, #128	; 0x80
 8003208:	049b      	lsls	r3, r3, #18
 800320a:	4013      	ands	r3, r2
 800320c:	d1f0      	bne.n	80031f0 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800320e:	4b3c      	ldr	r3, [pc, #240]	; (8003300 <HAL_RCC_OscConfig+0x628>)
 8003210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003212:	220f      	movs	r2, #15
 8003214:	4393      	bics	r3, r2
 8003216:	0019      	movs	r1, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800321c:	4b38      	ldr	r3, [pc, #224]	; (8003300 <HAL_RCC_OscConfig+0x628>)
 800321e:	430a      	orrs	r2, r1
 8003220:	62da      	str	r2, [r3, #44]	; 0x2c
 8003222:	4b37      	ldr	r3, [pc, #220]	; (8003300 <HAL_RCC_OscConfig+0x628>)
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	4a3a      	ldr	r2, [pc, #232]	; (8003310 <HAL_RCC_OscConfig+0x638>)
 8003228:	4013      	ands	r3, r2
 800322a:	0019      	movs	r1, r3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003234:	431a      	orrs	r2, r3
 8003236:	4b32      	ldr	r3, [pc, #200]	; (8003300 <HAL_RCC_OscConfig+0x628>)
 8003238:	430a      	orrs	r2, r1
 800323a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800323c:	4b30      	ldr	r3, [pc, #192]	; (8003300 <HAL_RCC_OscConfig+0x628>)
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	4b2f      	ldr	r3, [pc, #188]	; (8003300 <HAL_RCC_OscConfig+0x628>)
 8003242:	2180      	movs	r1, #128	; 0x80
 8003244:	0449      	lsls	r1, r1, #17
 8003246:	430a      	orrs	r2, r1
 8003248:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800324a:	f7fe fc09 	bl	8001a60 <HAL_GetTick>
 800324e:	0003      	movs	r3, r0
 8003250:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003252:	e008      	b.n	8003266 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003254:	f7fe fc04 	bl	8001a60 <HAL_GetTick>
 8003258:	0002      	movs	r2, r0
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	2b02      	cmp	r3, #2
 8003260:	d901      	bls.n	8003266 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e047      	b.n	80032f6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003266:	4b26      	ldr	r3, [pc, #152]	; (8003300 <HAL_RCC_OscConfig+0x628>)
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	2380      	movs	r3, #128	; 0x80
 800326c:	049b      	lsls	r3, r3, #18
 800326e:	4013      	ands	r3, r2
 8003270:	d0f0      	beq.n	8003254 <HAL_RCC_OscConfig+0x57c>
 8003272:	e03f      	b.n	80032f4 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003274:	4b22      	ldr	r3, [pc, #136]	; (8003300 <HAL_RCC_OscConfig+0x628>)
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	4b21      	ldr	r3, [pc, #132]	; (8003300 <HAL_RCC_OscConfig+0x628>)
 800327a:	4924      	ldr	r1, [pc, #144]	; (800330c <HAL_RCC_OscConfig+0x634>)
 800327c:	400a      	ands	r2, r1
 800327e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003280:	f7fe fbee 	bl	8001a60 <HAL_GetTick>
 8003284:	0003      	movs	r3, r0
 8003286:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003288:	e008      	b.n	800329c <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800328a:	f7fe fbe9 	bl	8001a60 <HAL_GetTick>
 800328e:	0002      	movs	r2, r0
 8003290:	69bb      	ldr	r3, [r7, #24]
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	2b02      	cmp	r3, #2
 8003296:	d901      	bls.n	800329c <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	e02c      	b.n	80032f6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800329c:	4b18      	ldr	r3, [pc, #96]	; (8003300 <HAL_RCC_OscConfig+0x628>)
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	2380      	movs	r3, #128	; 0x80
 80032a2:	049b      	lsls	r3, r3, #18
 80032a4:	4013      	ands	r3, r2
 80032a6:	d1f0      	bne.n	800328a <HAL_RCC_OscConfig+0x5b2>
 80032a8:	e024      	b.n	80032f4 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a1b      	ldr	r3, [r3, #32]
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d101      	bne.n	80032b6 <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e01f      	b.n	80032f6 <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80032b6:	4b12      	ldr	r3, [pc, #72]	; (8003300 <HAL_RCC_OscConfig+0x628>)
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80032bc:	4b10      	ldr	r3, [pc, #64]	; (8003300 <HAL_RCC_OscConfig+0x628>)
 80032be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c0:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80032c2:	697a      	ldr	r2, [r7, #20]
 80032c4:	23c0      	movs	r3, #192	; 0xc0
 80032c6:	025b      	lsls	r3, r3, #9
 80032c8:	401a      	ands	r2, r3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d10e      	bne.n	80032f0 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	220f      	movs	r2, #15
 80032d6:	401a      	ands	r2, r3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80032dc:	429a      	cmp	r2, r3
 80032de:	d107      	bne.n	80032f0 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80032e0:	697a      	ldr	r2, [r7, #20]
 80032e2:	23f0      	movs	r3, #240	; 0xf0
 80032e4:	039b      	lsls	r3, r3, #14
 80032e6:	401a      	ands	r2, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d001      	beq.n	80032f4 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e000      	b.n	80032f6 <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	0018      	movs	r0, r3
 80032f8:	46bd      	mov	sp, r7
 80032fa:	b008      	add	sp, #32
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	46c0      	nop			; (mov r8, r8)
 8003300:	40021000 	.word	0x40021000
 8003304:	00001388 	.word	0x00001388
 8003308:	efffffff 	.word	0xefffffff
 800330c:	feffffff 	.word	0xfeffffff
 8003310:	ffc27fff 	.word	0xffc27fff

08003314 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d101      	bne.n	8003328 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e0b3      	b.n	8003490 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003328:	4b5b      	ldr	r3, [pc, #364]	; (8003498 <HAL_RCC_ClockConfig+0x184>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2201      	movs	r2, #1
 800332e:	4013      	ands	r3, r2
 8003330:	683a      	ldr	r2, [r7, #0]
 8003332:	429a      	cmp	r2, r3
 8003334:	d911      	bls.n	800335a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003336:	4b58      	ldr	r3, [pc, #352]	; (8003498 <HAL_RCC_ClockConfig+0x184>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	2201      	movs	r2, #1
 800333c:	4393      	bics	r3, r2
 800333e:	0019      	movs	r1, r3
 8003340:	4b55      	ldr	r3, [pc, #340]	; (8003498 <HAL_RCC_ClockConfig+0x184>)
 8003342:	683a      	ldr	r2, [r7, #0]
 8003344:	430a      	orrs	r2, r1
 8003346:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003348:	4b53      	ldr	r3, [pc, #332]	; (8003498 <HAL_RCC_ClockConfig+0x184>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2201      	movs	r2, #1
 800334e:	4013      	ands	r3, r2
 8003350:	683a      	ldr	r2, [r7, #0]
 8003352:	429a      	cmp	r2, r3
 8003354:	d001      	beq.n	800335a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e09a      	b.n	8003490 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	2202      	movs	r2, #2
 8003360:	4013      	ands	r3, r2
 8003362:	d015      	beq.n	8003390 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2204      	movs	r2, #4
 800336a:	4013      	ands	r3, r2
 800336c:	d006      	beq.n	800337c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800336e:	4b4b      	ldr	r3, [pc, #300]	; (800349c <HAL_RCC_ClockConfig+0x188>)
 8003370:	685a      	ldr	r2, [r3, #4]
 8003372:	4b4a      	ldr	r3, [pc, #296]	; (800349c <HAL_RCC_ClockConfig+0x188>)
 8003374:	21e0      	movs	r1, #224	; 0xe0
 8003376:	00c9      	lsls	r1, r1, #3
 8003378:	430a      	orrs	r2, r1
 800337a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800337c:	4b47      	ldr	r3, [pc, #284]	; (800349c <HAL_RCC_ClockConfig+0x188>)
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	22f0      	movs	r2, #240	; 0xf0
 8003382:	4393      	bics	r3, r2
 8003384:	0019      	movs	r1, r3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	689a      	ldr	r2, [r3, #8]
 800338a:	4b44      	ldr	r3, [pc, #272]	; (800349c <HAL_RCC_ClockConfig+0x188>)
 800338c:	430a      	orrs	r2, r1
 800338e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	2201      	movs	r2, #1
 8003396:	4013      	ands	r3, r2
 8003398:	d040      	beq.n	800341c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d107      	bne.n	80033b2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033a2:	4b3e      	ldr	r3, [pc, #248]	; (800349c <HAL_RCC_ClockConfig+0x188>)
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	2380      	movs	r3, #128	; 0x80
 80033a8:	029b      	lsls	r3, r3, #10
 80033aa:	4013      	ands	r3, r2
 80033ac:	d114      	bne.n	80033d8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e06e      	b.n	8003490 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d107      	bne.n	80033ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033ba:	4b38      	ldr	r3, [pc, #224]	; (800349c <HAL_RCC_ClockConfig+0x188>)
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	2380      	movs	r3, #128	; 0x80
 80033c0:	049b      	lsls	r3, r3, #18
 80033c2:	4013      	ands	r3, r2
 80033c4:	d108      	bne.n	80033d8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e062      	b.n	8003490 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033ca:	4b34      	ldr	r3, [pc, #208]	; (800349c <HAL_RCC_ClockConfig+0x188>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2202      	movs	r2, #2
 80033d0:	4013      	ands	r3, r2
 80033d2:	d101      	bne.n	80033d8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e05b      	b.n	8003490 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033d8:	4b30      	ldr	r3, [pc, #192]	; (800349c <HAL_RCC_ClockConfig+0x188>)
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	2203      	movs	r2, #3
 80033de:	4393      	bics	r3, r2
 80033e0:	0019      	movs	r1, r3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685a      	ldr	r2, [r3, #4]
 80033e6:	4b2d      	ldr	r3, [pc, #180]	; (800349c <HAL_RCC_ClockConfig+0x188>)
 80033e8:	430a      	orrs	r2, r1
 80033ea:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033ec:	f7fe fb38 	bl	8001a60 <HAL_GetTick>
 80033f0:	0003      	movs	r3, r0
 80033f2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033f4:	e009      	b.n	800340a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033f6:	f7fe fb33 	bl	8001a60 <HAL_GetTick>
 80033fa:	0002      	movs	r2, r0
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	4a27      	ldr	r2, [pc, #156]	; (80034a0 <HAL_RCC_ClockConfig+0x18c>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d901      	bls.n	800340a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	e042      	b.n	8003490 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800340a:	4b24      	ldr	r3, [pc, #144]	; (800349c <HAL_RCC_ClockConfig+0x188>)
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	220c      	movs	r2, #12
 8003410:	401a      	ands	r2, r3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	429a      	cmp	r2, r3
 800341a:	d1ec      	bne.n	80033f6 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800341c:	4b1e      	ldr	r3, [pc, #120]	; (8003498 <HAL_RCC_ClockConfig+0x184>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	2201      	movs	r2, #1
 8003422:	4013      	ands	r3, r2
 8003424:	683a      	ldr	r2, [r7, #0]
 8003426:	429a      	cmp	r2, r3
 8003428:	d211      	bcs.n	800344e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800342a:	4b1b      	ldr	r3, [pc, #108]	; (8003498 <HAL_RCC_ClockConfig+0x184>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2201      	movs	r2, #1
 8003430:	4393      	bics	r3, r2
 8003432:	0019      	movs	r1, r3
 8003434:	4b18      	ldr	r3, [pc, #96]	; (8003498 <HAL_RCC_ClockConfig+0x184>)
 8003436:	683a      	ldr	r2, [r7, #0]
 8003438:	430a      	orrs	r2, r1
 800343a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800343c:	4b16      	ldr	r3, [pc, #88]	; (8003498 <HAL_RCC_ClockConfig+0x184>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	2201      	movs	r2, #1
 8003442:	4013      	ands	r3, r2
 8003444:	683a      	ldr	r2, [r7, #0]
 8003446:	429a      	cmp	r2, r3
 8003448:	d001      	beq.n	800344e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e020      	b.n	8003490 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	2204      	movs	r2, #4
 8003454:	4013      	ands	r3, r2
 8003456:	d009      	beq.n	800346c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003458:	4b10      	ldr	r3, [pc, #64]	; (800349c <HAL_RCC_ClockConfig+0x188>)
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	4a11      	ldr	r2, [pc, #68]	; (80034a4 <HAL_RCC_ClockConfig+0x190>)
 800345e:	4013      	ands	r3, r2
 8003460:	0019      	movs	r1, r3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	68da      	ldr	r2, [r3, #12]
 8003466:	4b0d      	ldr	r3, [pc, #52]	; (800349c <HAL_RCC_ClockConfig+0x188>)
 8003468:	430a      	orrs	r2, r1
 800346a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800346c:	f000 f820 	bl	80034b0 <HAL_RCC_GetSysClockFreq>
 8003470:	0001      	movs	r1, r0
 8003472:	4b0a      	ldr	r3, [pc, #40]	; (800349c <HAL_RCC_ClockConfig+0x188>)
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	091b      	lsrs	r3, r3, #4
 8003478:	220f      	movs	r2, #15
 800347a:	4013      	ands	r3, r2
 800347c:	4a0a      	ldr	r2, [pc, #40]	; (80034a8 <HAL_RCC_ClockConfig+0x194>)
 800347e:	5cd3      	ldrb	r3, [r2, r3]
 8003480:	000a      	movs	r2, r1
 8003482:	40da      	lsrs	r2, r3
 8003484:	4b09      	ldr	r3, [pc, #36]	; (80034ac <HAL_RCC_ClockConfig+0x198>)
 8003486:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003488:	2003      	movs	r0, #3
 800348a:	f7fe faa3 	bl	80019d4 <HAL_InitTick>
  
  return HAL_OK;
 800348e:	2300      	movs	r3, #0
}
 8003490:	0018      	movs	r0, r3
 8003492:	46bd      	mov	sp, r7
 8003494:	b004      	add	sp, #16
 8003496:	bd80      	pop	{r7, pc}
 8003498:	40022000 	.word	0x40022000
 800349c:	40021000 	.word	0x40021000
 80034a0:	00001388 	.word	0x00001388
 80034a4:	fffff8ff 	.word	0xfffff8ff
 80034a8:	08006d90 	.word	0x08006d90
 80034ac:	20000000 	.word	0x20000000

080034b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034b0:	b590      	push	{r4, r7, lr}
 80034b2:	b08f      	sub	sp, #60	; 0x3c
 80034b4:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80034b6:	2314      	movs	r3, #20
 80034b8:	18fb      	adds	r3, r7, r3
 80034ba:	4a2c      	ldr	r2, [pc, #176]	; (800356c <HAL_RCC_GetSysClockFreq+0xbc>)
 80034bc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80034be:	c313      	stmia	r3!, {r0, r1, r4}
 80034c0:	6812      	ldr	r2, [r2, #0]
 80034c2:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80034c4:	1d3b      	adds	r3, r7, #4
 80034c6:	4a2a      	ldr	r2, [pc, #168]	; (8003570 <HAL_RCC_GetSysClockFreq+0xc0>)
 80034c8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80034ca:	c313      	stmia	r3!, {r0, r1, r4}
 80034cc:	6812      	ldr	r2, [r2, #0]
 80034ce:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80034d0:	2300      	movs	r3, #0
 80034d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034d4:	2300      	movs	r3, #0
 80034d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80034d8:	2300      	movs	r3, #0
 80034da:	637b      	str	r3, [r7, #52]	; 0x34
 80034dc:	2300      	movs	r3, #0
 80034de:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80034e0:	2300      	movs	r3, #0
 80034e2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80034e4:	4b23      	ldr	r3, [pc, #140]	; (8003574 <HAL_RCC_GetSysClockFreq+0xc4>)
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80034ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ec:	220c      	movs	r2, #12
 80034ee:	4013      	ands	r3, r2
 80034f0:	2b04      	cmp	r3, #4
 80034f2:	d002      	beq.n	80034fa <HAL_RCC_GetSysClockFreq+0x4a>
 80034f4:	2b08      	cmp	r3, #8
 80034f6:	d003      	beq.n	8003500 <HAL_RCC_GetSysClockFreq+0x50>
 80034f8:	e02f      	b.n	800355a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80034fa:	4b1f      	ldr	r3, [pc, #124]	; (8003578 <HAL_RCC_GetSysClockFreq+0xc8>)
 80034fc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80034fe:	e02f      	b.n	8003560 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003502:	0c9b      	lsrs	r3, r3, #18
 8003504:	220f      	movs	r2, #15
 8003506:	4013      	ands	r3, r2
 8003508:	2214      	movs	r2, #20
 800350a:	18ba      	adds	r2, r7, r2
 800350c:	5cd3      	ldrb	r3, [r2, r3]
 800350e:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003510:	4b18      	ldr	r3, [pc, #96]	; (8003574 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003514:	220f      	movs	r2, #15
 8003516:	4013      	ands	r3, r2
 8003518:	1d3a      	adds	r2, r7, #4
 800351a:	5cd3      	ldrb	r3, [r2, r3]
 800351c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800351e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003520:	23c0      	movs	r3, #192	; 0xc0
 8003522:	025b      	lsls	r3, r3, #9
 8003524:	401a      	ands	r2, r3
 8003526:	2380      	movs	r3, #128	; 0x80
 8003528:	025b      	lsls	r3, r3, #9
 800352a:	429a      	cmp	r2, r3
 800352c:	d109      	bne.n	8003542 <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800352e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003530:	4811      	ldr	r0, [pc, #68]	; (8003578 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003532:	f7fc fde9 	bl	8000108 <__udivsi3>
 8003536:	0003      	movs	r3, r0
 8003538:	001a      	movs	r2, r3
 800353a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353c:	4353      	muls	r3, r2
 800353e:	637b      	str	r3, [r7, #52]	; 0x34
 8003540:	e008      	b.n	8003554 <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003542:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003544:	480c      	ldr	r0, [pc, #48]	; (8003578 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003546:	f7fc fddf 	bl	8000108 <__udivsi3>
 800354a:	0003      	movs	r3, r0
 800354c:	001a      	movs	r2, r3
 800354e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003550:	4353      	muls	r3, r2
 8003552:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8003554:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003556:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003558:	e002      	b.n	8003560 <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800355a:	4b07      	ldr	r3, [pc, #28]	; (8003578 <HAL_RCC_GetSysClockFreq+0xc8>)
 800355c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800355e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003562:	0018      	movs	r0, r3
 8003564:	46bd      	mov	sp, r7
 8003566:	b00f      	add	sp, #60	; 0x3c
 8003568:	bd90      	pop	{r4, r7, pc}
 800356a:	46c0      	nop			; (mov r8, r8)
 800356c:	08006c74 	.word	0x08006c74
 8003570:	08006c84 	.word	0x08006c84
 8003574:	40021000 	.word	0x40021000
 8003578:	007a1200 	.word	0x007a1200

0800357c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b086      	sub	sp, #24
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003584:	2300      	movs	r3, #0
 8003586:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003588:	2300      	movs	r3, #0
 800358a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	2380      	movs	r3, #128	; 0x80
 8003592:	025b      	lsls	r3, r3, #9
 8003594:	4013      	ands	r3, r2
 8003596:	d100      	bne.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003598:	e08e      	b.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800359a:	2017      	movs	r0, #23
 800359c:	183b      	adds	r3, r7, r0
 800359e:	2200      	movs	r2, #0
 80035a0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035a2:	4b5f      	ldr	r3, [pc, #380]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80035a4:	69da      	ldr	r2, [r3, #28]
 80035a6:	2380      	movs	r3, #128	; 0x80
 80035a8:	055b      	lsls	r3, r3, #21
 80035aa:	4013      	ands	r3, r2
 80035ac:	d110      	bne.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80035ae:	4b5c      	ldr	r3, [pc, #368]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80035b0:	69da      	ldr	r2, [r3, #28]
 80035b2:	4b5b      	ldr	r3, [pc, #364]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80035b4:	2180      	movs	r1, #128	; 0x80
 80035b6:	0549      	lsls	r1, r1, #21
 80035b8:	430a      	orrs	r2, r1
 80035ba:	61da      	str	r2, [r3, #28]
 80035bc:	4b58      	ldr	r3, [pc, #352]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80035be:	69da      	ldr	r2, [r3, #28]
 80035c0:	2380      	movs	r3, #128	; 0x80
 80035c2:	055b      	lsls	r3, r3, #21
 80035c4:	4013      	ands	r3, r2
 80035c6:	60bb      	str	r3, [r7, #8]
 80035c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035ca:	183b      	adds	r3, r7, r0
 80035cc:	2201      	movs	r2, #1
 80035ce:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035d0:	4b54      	ldr	r3, [pc, #336]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	2380      	movs	r3, #128	; 0x80
 80035d6:	005b      	lsls	r3, r3, #1
 80035d8:	4013      	ands	r3, r2
 80035da:	d11a      	bne.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035dc:	4b51      	ldr	r3, [pc, #324]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	4b50      	ldr	r3, [pc, #320]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80035e2:	2180      	movs	r1, #128	; 0x80
 80035e4:	0049      	lsls	r1, r1, #1
 80035e6:	430a      	orrs	r2, r1
 80035e8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035ea:	f7fe fa39 	bl	8001a60 <HAL_GetTick>
 80035ee:	0003      	movs	r3, r0
 80035f0:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035f2:	e008      	b.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035f4:	f7fe fa34 	bl	8001a60 <HAL_GetTick>
 80035f8:	0002      	movs	r2, r0
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	2b64      	cmp	r3, #100	; 0x64
 8003600:	d901      	bls.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e087      	b.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003606:	4b47      	ldr	r3, [pc, #284]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	2380      	movs	r3, #128	; 0x80
 800360c:	005b      	lsls	r3, r3, #1
 800360e:	4013      	ands	r3, r2
 8003610:	d0f0      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003612:	4b43      	ldr	r3, [pc, #268]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003614:	6a1a      	ldr	r2, [r3, #32]
 8003616:	23c0      	movs	r3, #192	; 0xc0
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	4013      	ands	r3, r2
 800361c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d034      	beq.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x112>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	685a      	ldr	r2, [r3, #4]
 8003628:	23c0      	movs	r3, #192	; 0xc0
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	4013      	ands	r3, r2
 800362e:	68fa      	ldr	r2, [r7, #12]
 8003630:	429a      	cmp	r2, r3
 8003632:	d02c      	beq.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003634:	4b3a      	ldr	r3, [pc, #232]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003636:	6a1b      	ldr	r3, [r3, #32]
 8003638:	4a3b      	ldr	r2, [pc, #236]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800363a:	4013      	ands	r3, r2
 800363c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800363e:	4b38      	ldr	r3, [pc, #224]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003640:	6a1a      	ldr	r2, [r3, #32]
 8003642:	4b37      	ldr	r3, [pc, #220]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003644:	2180      	movs	r1, #128	; 0x80
 8003646:	0249      	lsls	r1, r1, #9
 8003648:	430a      	orrs	r2, r1
 800364a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800364c:	4b34      	ldr	r3, [pc, #208]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800364e:	6a1a      	ldr	r2, [r3, #32]
 8003650:	4b33      	ldr	r3, [pc, #204]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003652:	4936      	ldr	r1, [pc, #216]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003654:	400a      	ands	r2, r1
 8003656:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003658:	4b31      	ldr	r3, [pc, #196]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800365a:	68fa      	ldr	r2, [r7, #12]
 800365c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2201      	movs	r2, #1
 8003662:	4013      	ands	r3, r2
 8003664:	d013      	beq.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003666:	f7fe f9fb 	bl	8001a60 <HAL_GetTick>
 800366a:	0003      	movs	r3, r0
 800366c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800366e:	e009      	b.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003670:	f7fe f9f6 	bl	8001a60 <HAL_GetTick>
 8003674:	0002      	movs	r2, r0
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	4a2d      	ldr	r2, [pc, #180]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d901      	bls.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	e048      	b.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003684:	4b26      	ldr	r3, [pc, #152]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003686:	6a1b      	ldr	r3, [r3, #32]
 8003688:	2202      	movs	r2, #2
 800368a:	4013      	ands	r3, r2
 800368c:	d0f0      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800368e:	4b24      	ldr	r3, [pc, #144]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003690:	6a1b      	ldr	r3, [r3, #32]
 8003692:	4a25      	ldr	r2, [pc, #148]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003694:	4013      	ands	r3, r2
 8003696:	0019      	movs	r1, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685a      	ldr	r2, [r3, #4]
 800369c:	4b20      	ldr	r3, [pc, #128]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800369e:	430a      	orrs	r2, r1
 80036a0:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80036a2:	2317      	movs	r3, #23
 80036a4:	18fb      	adds	r3, r7, r3
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d105      	bne.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036ac:	4b1c      	ldr	r3, [pc, #112]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80036ae:	69da      	ldr	r2, [r3, #28]
 80036b0:	4b1b      	ldr	r3, [pc, #108]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80036b2:	4920      	ldr	r1, [pc, #128]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80036b4:	400a      	ands	r2, r1
 80036b6:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2201      	movs	r2, #1
 80036be:	4013      	ands	r3, r2
 80036c0:	d009      	beq.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80036c2:	4b17      	ldr	r3, [pc, #92]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80036c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c6:	2203      	movs	r2, #3
 80036c8:	4393      	bics	r3, r2
 80036ca:	0019      	movs	r1, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	689a      	ldr	r2, [r3, #8]
 80036d0:	4b13      	ldr	r3, [pc, #76]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80036d2:	430a      	orrs	r2, r1
 80036d4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2220      	movs	r2, #32
 80036dc:	4013      	ands	r3, r2
 80036de:	d009      	beq.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80036e0:	4b0f      	ldr	r3, [pc, #60]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80036e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e4:	2210      	movs	r2, #16
 80036e6:	4393      	bics	r3, r2
 80036e8:	0019      	movs	r1, r3
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	68da      	ldr	r2, [r3, #12]
 80036ee:	4b0c      	ldr	r3, [pc, #48]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80036f0:	430a      	orrs	r2, r1
 80036f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	2380      	movs	r3, #128	; 0x80
 80036fa:	029b      	lsls	r3, r3, #10
 80036fc:	4013      	ands	r3, r2
 80036fe:	d009      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003700:	4b07      	ldr	r3, [pc, #28]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003704:	2280      	movs	r2, #128	; 0x80
 8003706:	4393      	bics	r3, r2
 8003708:	0019      	movs	r1, r3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	691a      	ldr	r2, [r3, #16]
 800370e:	4b04      	ldr	r3, [pc, #16]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003710:	430a      	orrs	r2, r1
 8003712:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003714:	2300      	movs	r3, #0
}
 8003716:	0018      	movs	r0, r3
 8003718:	46bd      	mov	sp, r7
 800371a:	b006      	add	sp, #24
 800371c:	bd80      	pop	{r7, pc}
 800371e:	46c0      	nop			; (mov r8, r8)
 8003720:	40021000 	.word	0x40021000
 8003724:	40007000 	.word	0x40007000
 8003728:	fffffcff 	.word	0xfffffcff
 800372c:	fffeffff 	.word	0xfffeffff
 8003730:	00001388 	.word	0x00001388
 8003734:	efffffff 	.word	0xefffffff

08003738 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d101      	bne.n	800374a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e042      	b.n	80037d0 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	223d      	movs	r2, #61	; 0x3d
 800374e:	5c9b      	ldrb	r3, [r3, r2]
 8003750:	b2db      	uxtb	r3, r3
 8003752:	2b00      	cmp	r3, #0
 8003754:	d107      	bne.n	8003766 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	223c      	movs	r2, #60	; 0x3c
 800375a:	2100      	movs	r1, #0
 800375c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	0018      	movs	r0, r3
 8003762:	f7fe f84d 	bl	8001800 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	223d      	movs	r2, #61	; 0x3d
 800376a:	2102      	movs	r1, #2
 800376c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	3304      	adds	r3, #4
 8003776:	0019      	movs	r1, r3
 8003778:	0010      	movs	r0, r2
 800377a:	f000 fb61 	bl	8003e40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2246      	movs	r2, #70	; 0x46
 8003782:	2101      	movs	r1, #1
 8003784:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	223e      	movs	r2, #62	; 0x3e
 800378a:	2101      	movs	r1, #1
 800378c:	5499      	strb	r1, [r3, r2]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	223f      	movs	r2, #63	; 0x3f
 8003792:	2101      	movs	r1, #1
 8003794:	5499      	strb	r1, [r3, r2]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2240      	movs	r2, #64	; 0x40
 800379a:	2101      	movs	r1, #1
 800379c:	5499      	strb	r1, [r3, r2]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2241      	movs	r2, #65	; 0x41
 80037a2:	2101      	movs	r1, #1
 80037a4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2242      	movs	r2, #66	; 0x42
 80037aa:	2101      	movs	r1, #1
 80037ac:	5499      	strb	r1, [r3, r2]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2243      	movs	r2, #67	; 0x43
 80037b2:	2101      	movs	r1, #1
 80037b4:	5499      	strb	r1, [r3, r2]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2244      	movs	r2, #68	; 0x44
 80037ba:	2101      	movs	r1, #1
 80037bc:	5499      	strb	r1, [r3, r2]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2245      	movs	r2, #69	; 0x45
 80037c2:	2101      	movs	r1, #1
 80037c4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	223d      	movs	r2, #61	; 0x3d
 80037ca:	2101      	movs	r1, #1
 80037cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80037ce:	2300      	movs	r3, #0
}
 80037d0:	0018      	movs	r0, r3
 80037d2:	46bd      	mov	sp, r7
 80037d4:	b002      	add	sp, #8
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	223d      	movs	r2, #61	; 0x3d
 80037e4:	5c9b      	ldrb	r3, [r3, r2]
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d001      	beq.n	80037f0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e02d      	b.n	800384c <HAL_TIM_Base_Start+0x74>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	223d      	movs	r2, #61	; 0x3d
 80037f4:	2102      	movs	r1, #2
 80037f6:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a15      	ldr	r2, [pc, #84]	; (8003854 <HAL_TIM_Base_Start+0x7c>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d009      	beq.n	8003816 <HAL_TIM_Base_Start+0x3e>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a14      	ldr	r2, [pc, #80]	; (8003858 <HAL_TIM_Base_Start+0x80>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d004      	beq.n	8003816 <HAL_TIM_Base_Start+0x3e>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a12      	ldr	r2, [pc, #72]	; (800385c <HAL_TIM_Base_Start+0x84>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d111      	bne.n	800383a <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	2207      	movs	r2, #7
 800381e:	4013      	ands	r3, r2
 8003820:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2b06      	cmp	r3, #6
 8003826:	d010      	beq.n	800384a <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	2101      	movs	r1, #1
 8003834:	430a      	orrs	r2, r1
 8003836:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003838:	e007      	b.n	800384a <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2101      	movs	r1, #1
 8003846:	430a      	orrs	r2, r1
 8003848:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800384a:	2300      	movs	r3, #0
}
 800384c:	0018      	movs	r0, r3
 800384e:	46bd      	mov	sp, r7
 8003850:	b004      	add	sp, #16
 8003852:	bd80      	pop	{r7, pc}
 8003854:	40012c00 	.word	0x40012c00
 8003858:	40000400 	.word	0x40000400
 800385c:	40014000 	.word	0x40014000

08003860 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	223d      	movs	r2, #61	; 0x3d
 800386c:	5c9b      	ldrb	r3, [r3, r2]
 800386e:	b2db      	uxtb	r3, r3
 8003870:	2b01      	cmp	r3, #1
 8003872:	d001      	beq.n	8003878 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e035      	b.n	80038e4 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	223d      	movs	r2, #61	; 0x3d
 800387c:	2102      	movs	r1, #2
 800387e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	68da      	ldr	r2, [r3, #12]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	2101      	movs	r1, #1
 800388c:	430a      	orrs	r2, r1
 800388e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a15      	ldr	r2, [pc, #84]	; (80038ec <HAL_TIM_Base_Start_IT+0x8c>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d009      	beq.n	80038ae <HAL_TIM_Base_Start_IT+0x4e>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a14      	ldr	r2, [pc, #80]	; (80038f0 <HAL_TIM_Base_Start_IT+0x90>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d004      	beq.n	80038ae <HAL_TIM_Base_Start_IT+0x4e>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a12      	ldr	r2, [pc, #72]	; (80038f4 <HAL_TIM_Base_Start_IT+0x94>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d111      	bne.n	80038d2 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	2207      	movs	r2, #7
 80038b6:	4013      	ands	r3, r2
 80038b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2b06      	cmp	r3, #6
 80038be:	d010      	beq.n	80038e2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	2101      	movs	r1, #1
 80038cc:	430a      	orrs	r2, r1
 80038ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038d0:	e007      	b.n	80038e2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2101      	movs	r1, #1
 80038de:	430a      	orrs	r2, r1
 80038e0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038e2:	2300      	movs	r3, #0
}
 80038e4:	0018      	movs	r0, r3
 80038e6:	46bd      	mov	sp, r7
 80038e8:	b004      	add	sp, #16
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	40012c00 	.word	0x40012c00
 80038f0:	40000400 	.word	0x40000400
 80038f4:	40014000 	.word	0x40014000

080038f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d101      	bne.n	800390a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e042      	b.n	8003990 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	223d      	movs	r2, #61	; 0x3d
 800390e:	5c9b      	ldrb	r3, [r3, r2]
 8003910:	b2db      	uxtb	r3, r3
 8003912:	2b00      	cmp	r3, #0
 8003914:	d107      	bne.n	8003926 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	223c      	movs	r2, #60	; 0x3c
 800391a:	2100      	movs	r1, #0
 800391c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	0018      	movs	r0, r3
 8003922:	f000 f839 	bl	8003998 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	223d      	movs	r2, #61	; 0x3d
 800392a:	2102      	movs	r1, #2
 800392c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	3304      	adds	r3, #4
 8003936:	0019      	movs	r1, r3
 8003938:	0010      	movs	r0, r2
 800393a:	f000 fa81 	bl	8003e40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2246      	movs	r2, #70	; 0x46
 8003942:	2101      	movs	r1, #1
 8003944:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	223e      	movs	r2, #62	; 0x3e
 800394a:	2101      	movs	r1, #1
 800394c:	5499      	strb	r1, [r3, r2]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	223f      	movs	r2, #63	; 0x3f
 8003952:	2101      	movs	r1, #1
 8003954:	5499      	strb	r1, [r3, r2]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2240      	movs	r2, #64	; 0x40
 800395a:	2101      	movs	r1, #1
 800395c:	5499      	strb	r1, [r3, r2]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2241      	movs	r2, #65	; 0x41
 8003962:	2101      	movs	r1, #1
 8003964:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2242      	movs	r2, #66	; 0x42
 800396a:	2101      	movs	r1, #1
 800396c:	5499      	strb	r1, [r3, r2]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2243      	movs	r2, #67	; 0x43
 8003972:	2101      	movs	r1, #1
 8003974:	5499      	strb	r1, [r3, r2]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2244      	movs	r2, #68	; 0x44
 800397a:	2101      	movs	r1, #1
 800397c:	5499      	strb	r1, [r3, r2]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2245      	movs	r2, #69	; 0x45
 8003982:	2101      	movs	r1, #1
 8003984:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	223d      	movs	r2, #61	; 0x3d
 800398a:	2101      	movs	r1, #1
 800398c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800398e:	2300      	movs	r3, #0
}
 8003990:	0018      	movs	r0, r3
 8003992:	46bd      	mov	sp, r7
 8003994:	b002      	add	sp, #8
 8003996:	bd80      	pop	{r7, pc}

08003998 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b082      	sub	sp, #8
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80039a0:	46c0      	nop			; (mov r8, r8)
 80039a2:	46bd      	mov	sp, r7
 80039a4:	b002      	add	sp, #8
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d108      	bne.n	80039ca <HAL_TIM_PWM_Start+0x22>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	223e      	movs	r2, #62	; 0x3e
 80039bc:	5c9b      	ldrb	r3, [r3, r2]
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	3b01      	subs	r3, #1
 80039c2:	1e5a      	subs	r2, r3, #1
 80039c4:	4193      	sbcs	r3, r2
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	e01f      	b.n	8003a0a <HAL_TIM_PWM_Start+0x62>
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	2b04      	cmp	r3, #4
 80039ce:	d108      	bne.n	80039e2 <HAL_TIM_PWM_Start+0x3a>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	223f      	movs	r2, #63	; 0x3f
 80039d4:	5c9b      	ldrb	r3, [r3, r2]
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	3b01      	subs	r3, #1
 80039da:	1e5a      	subs	r2, r3, #1
 80039dc:	4193      	sbcs	r3, r2
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	e013      	b.n	8003a0a <HAL_TIM_PWM_Start+0x62>
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	2b08      	cmp	r3, #8
 80039e6:	d108      	bne.n	80039fa <HAL_TIM_PWM_Start+0x52>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2240      	movs	r2, #64	; 0x40
 80039ec:	5c9b      	ldrb	r3, [r3, r2]
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	3b01      	subs	r3, #1
 80039f2:	1e5a      	subs	r2, r3, #1
 80039f4:	4193      	sbcs	r3, r2
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	e007      	b.n	8003a0a <HAL_TIM_PWM_Start+0x62>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2241      	movs	r2, #65	; 0x41
 80039fe:	5c9b      	ldrb	r3, [r3, r2]
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	3b01      	subs	r3, #1
 8003a04:	1e5a      	subs	r2, r3, #1
 8003a06:	4193      	sbcs	r3, r2
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d001      	beq.n	8003a12 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e06e      	b.n	8003af0 <HAL_TIM_PWM_Start+0x148>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d104      	bne.n	8003a22 <HAL_TIM_PWM_Start+0x7a>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	223e      	movs	r2, #62	; 0x3e
 8003a1c:	2102      	movs	r1, #2
 8003a1e:	5499      	strb	r1, [r3, r2]
 8003a20:	e013      	b.n	8003a4a <HAL_TIM_PWM_Start+0xa2>
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	2b04      	cmp	r3, #4
 8003a26:	d104      	bne.n	8003a32 <HAL_TIM_PWM_Start+0x8a>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	223f      	movs	r2, #63	; 0x3f
 8003a2c:	2102      	movs	r1, #2
 8003a2e:	5499      	strb	r1, [r3, r2]
 8003a30:	e00b      	b.n	8003a4a <HAL_TIM_PWM_Start+0xa2>
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	2b08      	cmp	r3, #8
 8003a36:	d104      	bne.n	8003a42 <HAL_TIM_PWM_Start+0x9a>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2240      	movs	r2, #64	; 0x40
 8003a3c:	2102      	movs	r1, #2
 8003a3e:	5499      	strb	r1, [r3, r2]
 8003a40:	e003      	b.n	8003a4a <HAL_TIM_PWM_Start+0xa2>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2241      	movs	r2, #65	; 0x41
 8003a46:	2102      	movs	r1, #2
 8003a48:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	6839      	ldr	r1, [r7, #0]
 8003a50:	2201      	movs	r2, #1
 8003a52:	0018      	movs	r0, r3
 8003a54:	f000 fd00 	bl	8004458 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a26      	ldr	r2, [pc, #152]	; (8003af8 <HAL_TIM_PWM_Start+0x150>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d00e      	beq.n	8003a80 <HAL_TIM_PWM_Start+0xd8>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a25      	ldr	r2, [pc, #148]	; (8003afc <HAL_TIM_PWM_Start+0x154>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d009      	beq.n	8003a80 <HAL_TIM_PWM_Start+0xd8>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a23      	ldr	r2, [pc, #140]	; (8003b00 <HAL_TIM_PWM_Start+0x158>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d004      	beq.n	8003a80 <HAL_TIM_PWM_Start+0xd8>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a22      	ldr	r2, [pc, #136]	; (8003b04 <HAL_TIM_PWM_Start+0x15c>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d101      	bne.n	8003a84 <HAL_TIM_PWM_Start+0xdc>
 8003a80:	2301      	movs	r3, #1
 8003a82:	e000      	b.n	8003a86 <HAL_TIM_PWM_Start+0xde>
 8003a84:	2300      	movs	r3, #0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d008      	beq.n	8003a9c <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2180      	movs	r1, #128	; 0x80
 8003a96:	0209      	lsls	r1, r1, #8
 8003a98:	430a      	orrs	r2, r1
 8003a9a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a15      	ldr	r2, [pc, #84]	; (8003af8 <HAL_TIM_PWM_Start+0x150>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d009      	beq.n	8003aba <HAL_TIM_PWM_Start+0x112>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a17      	ldr	r2, [pc, #92]	; (8003b08 <HAL_TIM_PWM_Start+0x160>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d004      	beq.n	8003aba <HAL_TIM_PWM_Start+0x112>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a11      	ldr	r2, [pc, #68]	; (8003afc <HAL_TIM_PWM_Start+0x154>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d111      	bne.n	8003ade <HAL_TIM_PWM_Start+0x136>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	2207      	movs	r2, #7
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2b06      	cmp	r3, #6
 8003aca:	d010      	beq.n	8003aee <HAL_TIM_PWM_Start+0x146>
    {
      __HAL_TIM_ENABLE(htim);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	2101      	movs	r1, #1
 8003ad8:	430a      	orrs	r2, r1
 8003ada:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003adc:	e007      	b.n	8003aee <HAL_TIM_PWM_Start+0x146>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2101      	movs	r1, #1
 8003aea:	430a      	orrs	r2, r1
 8003aec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003aee:	2300      	movs	r3, #0
}
 8003af0:	0018      	movs	r0, r3
 8003af2:	46bd      	mov	sp, r7
 8003af4:	b004      	add	sp, #16
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	40012c00 	.word	0x40012c00
 8003afc:	40014000 	.word	0x40014000
 8003b00:	40014400 	.word	0x40014400
 8003b04:	40014800 	.word	0x40014800
 8003b08:	40000400 	.word	0x40000400

08003b0c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b086      	sub	sp, #24
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	60f8      	str	r0, [r7, #12]
 8003b14:	60b9      	str	r1, [r7, #8]
 8003b16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b18:	2317      	movs	r3, #23
 8003b1a:	18fb      	adds	r3, r7, r3
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	223c      	movs	r2, #60	; 0x3c
 8003b24:	5c9b      	ldrb	r3, [r3, r2]
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d101      	bne.n	8003b2e <HAL_TIM_PWM_ConfigChannel+0x22>
 8003b2a:	2302      	movs	r3, #2
 8003b2c:	e0ad      	b.n	8003c8a <HAL_TIM_PWM_ConfigChannel+0x17e>
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	223c      	movs	r2, #60	; 0x3c
 8003b32:	2101      	movs	r1, #1
 8003b34:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2b0c      	cmp	r3, #12
 8003b3a:	d100      	bne.n	8003b3e <HAL_TIM_PWM_ConfigChannel+0x32>
 8003b3c:	e076      	b.n	8003c2c <HAL_TIM_PWM_ConfigChannel+0x120>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2b0c      	cmp	r3, #12
 8003b42:	d900      	bls.n	8003b46 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8003b44:	e095      	b.n	8003c72 <HAL_TIM_PWM_ConfigChannel+0x166>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2b08      	cmp	r3, #8
 8003b4a:	d04e      	beq.n	8003bea <HAL_TIM_PWM_ConfigChannel+0xde>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2b08      	cmp	r3, #8
 8003b50:	d900      	bls.n	8003b54 <HAL_TIM_PWM_ConfigChannel+0x48>
 8003b52:	e08e      	b.n	8003c72 <HAL_TIM_PWM_ConfigChannel+0x166>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d003      	beq.n	8003b62 <HAL_TIM_PWM_ConfigChannel+0x56>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2b04      	cmp	r3, #4
 8003b5e:	d021      	beq.n	8003ba4 <HAL_TIM_PWM_ConfigChannel+0x98>
 8003b60:	e087      	b.n	8003c72 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	68ba      	ldr	r2, [r7, #8]
 8003b68:	0011      	movs	r1, r2
 8003b6a:	0018      	movs	r0, r3
 8003b6c:	f000 f9de 	bl	8003f2c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	699a      	ldr	r2, [r3, #24]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	2108      	movs	r1, #8
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	699a      	ldr	r2, [r3, #24]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2104      	movs	r1, #4
 8003b8c:	438a      	bics	r2, r1
 8003b8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	6999      	ldr	r1, [r3, #24]
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	691a      	ldr	r2, [r3, #16]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	430a      	orrs	r2, r1
 8003ba0:	619a      	str	r2, [r3, #24]
      break;
 8003ba2:	e06b      	b.n	8003c7c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68ba      	ldr	r2, [r7, #8]
 8003baa:	0011      	movs	r1, r2
 8003bac:	0018      	movs	r0, r3
 8003bae:	f000 fa45 	bl	800403c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	699a      	ldr	r2, [r3, #24]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2180      	movs	r1, #128	; 0x80
 8003bbe:	0109      	lsls	r1, r1, #4
 8003bc0:	430a      	orrs	r2, r1
 8003bc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	699a      	ldr	r2, [r3, #24]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4931      	ldr	r1, [pc, #196]	; (8003c94 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003bd0:	400a      	ands	r2, r1
 8003bd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	6999      	ldr	r1, [r3, #24]
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	021a      	lsls	r2, r3, #8
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	430a      	orrs	r2, r1
 8003be6:	619a      	str	r2, [r3, #24]
      break;
 8003be8:	e048      	b.n	8003c7c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	68ba      	ldr	r2, [r7, #8]
 8003bf0:	0011      	movs	r1, r2
 8003bf2:	0018      	movs	r0, r3
 8003bf4:	f000 faa6 	bl	8004144 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	69da      	ldr	r2, [r3, #28]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2108      	movs	r1, #8
 8003c04:	430a      	orrs	r2, r1
 8003c06:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	69da      	ldr	r2, [r3, #28]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2104      	movs	r1, #4
 8003c14:	438a      	bics	r2, r1
 8003c16:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	69d9      	ldr	r1, [r3, #28]
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	691a      	ldr	r2, [r3, #16]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	430a      	orrs	r2, r1
 8003c28:	61da      	str	r2, [r3, #28]
      break;
 8003c2a:	e027      	b.n	8003c7c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	68ba      	ldr	r2, [r7, #8]
 8003c32:	0011      	movs	r1, r2
 8003c34:	0018      	movs	r0, r3
 8003c36:	f000 fb0b 	bl	8004250 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	69da      	ldr	r2, [r3, #28]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	2180      	movs	r1, #128	; 0x80
 8003c46:	0109      	lsls	r1, r1, #4
 8003c48:	430a      	orrs	r2, r1
 8003c4a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	69da      	ldr	r2, [r3, #28]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	490f      	ldr	r1, [pc, #60]	; (8003c94 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003c58:	400a      	ands	r2, r1
 8003c5a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	69d9      	ldr	r1, [r3, #28]
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	691b      	ldr	r3, [r3, #16]
 8003c66:	021a      	lsls	r2, r3, #8
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	430a      	orrs	r2, r1
 8003c6e:	61da      	str	r2, [r3, #28]
      break;
 8003c70:	e004      	b.n	8003c7c <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8003c72:	2317      	movs	r3, #23
 8003c74:	18fb      	adds	r3, r7, r3
 8003c76:	2201      	movs	r2, #1
 8003c78:	701a      	strb	r2, [r3, #0]
      break;
 8003c7a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	223c      	movs	r2, #60	; 0x3c
 8003c80:	2100      	movs	r1, #0
 8003c82:	5499      	strb	r1, [r3, r2]

  return status;
 8003c84:	2317      	movs	r3, #23
 8003c86:	18fb      	adds	r3, r7, r3
 8003c88:	781b      	ldrb	r3, [r3, #0]
}
 8003c8a:	0018      	movs	r0, r3
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	b006      	add	sp, #24
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	46c0      	nop			; (mov r8, r8)
 8003c94:	fffffbff 	.word	0xfffffbff

08003c98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b084      	sub	sp, #16
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ca2:	230f      	movs	r3, #15
 8003ca4:	18fb      	adds	r3, r7, r3
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	223c      	movs	r2, #60	; 0x3c
 8003cae:	5c9b      	ldrb	r3, [r3, r2]
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d101      	bne.n	8003cb8 <HAL_TIM_ConfigClockSource+0x20>
 8003cb4:	2302      	movs	r3, #2
 8003cb6:	e0bc      	b.n	8003e32 <HAL_TIM_ConfigClockSource+0x19a>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	223c      	movs	r2, #60	; 0x3c
 8003cbc:	2101      	movs	r1, #1
 8003cbe:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	223d      	movs	r2, #61	; 0x3d
 8003cc4:	2102      	movs	r1, #2
 8003cc6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	2277      	movs	r2, #119	; 0x77
 8003cd4:	4393      	bics	r3, r2
 8003cd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	4a58      	ldr	r2, [pc, #352]	; (8003e3c <HAL_TIM_ConfigClockSource+0x1a4>)
 8003cdc:	4013      	ands	r3, r2
 8003cde:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	68ba      	ldr	r2, [r7, #8]
 8003ce6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2280      	movs	r2, #128	; 0x80
 8003cee:	0192      	lsls	r2, r2, #6
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d040      	beq.n	8003d76 <HAL_TIM_ConfigClockSource+0xde>
 8003cf4:	2280      	movs	r2, #128	; 0x80
 8003cf6:	0192      	lsls	r2, r2, #6
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d900      	bls.n	8003cfe <HAL_TIM_ConfigClockSource+0x66>
 8003cfc:	e088      	b.n	8003e10 <HAL_TIM_ConfigClockSource+0x178>
 8003cfe:	2280      	movs	r2, #128	; 0x80
 8003d00:	0152      	lsls	r2, r2, #5
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d100      	bne.n	8003d08 <HAL_TIM_ConfigClockSource+0x70>
 8003d06:	e088      	b.n	8003e1a <HAL_TIM_ConfigClockSource+0x182>
 8003d08:	2280      	movs	r2, #128	; 0x80
 8003d0a:	0152      	lsls	r2, r2, #5
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d900      	bls.n	8003d12 <HAL_TIM_ConfigClockSource+0x7a>
 8003d10:	e07e      	b.n	8003e10 <HAL_TIM_ConfigClockSource+0x178>
 8003d12:	2b70      	cmp	r3, #112	; 0x70
 8003d14:	d018      	beq.n	8003d48 <HAL_TIM_ConfigClockSource+0xb0>
 8003d16:	d900      	bls.n	8003d1a <HAL_TIM_ConfigClockSource+0x82>
 8003d18:	e07a      	b.n	8003e10 <HAL_TIM_ConfigClockSource+0x178>
 8003d1a:	2b60      	cmp	r3, #96	; 0x60
 8003d1c:	d04f      	beq.n	8003dbe <HAL_TIM_ConfigClockSource+0x126>
 8003d1e:	d900      	bls.n	8003d22 <HAL_TIM_ConfigClockSource+0x8a>
 8003d20:	e076      	b.n	8003e10 <HAL_TIM_ConfigClockSource+0x178>
 8003d22:	2b50      	cmp	r3, #80	; 0x50
 8003d24:	d03b      	beq.n	8003d9e <HAL_TIM_ConfigClockSource+0x106>
 8003d26:	d900      	bls.n	8003d2a <HAL_TIM_ConfigClockSource+0x92>
 8003d28:	e072      	b.n	8003e10 <HAL_TIM_ConfigClockSource+0x178>
 8003d2a:	2b40      	cmp	r3, #64	; 0x40
 8003d2c:	d057      	beq.n	8003dde <HAL_TIM_ConfigClockSource+0x146>
 8003d2e:	d900      	bls.n	8003d32 <HAL_TIM_ConfigClockSource+0x9a>
 8003d30:	e06e      	b.n	8003e10 <HAL_TIM_ConfigClockSource+0x178>
 8003d32:	2b30      	cmp	r3, #48	; 0x30
 8003d34:	d063      	beq.n	8003dfe <HAL_TIM_ConfigClockSource+0x166>
 8003d36:	d86b      	bhi.n	8003e10 <HAL_TIM_ConfigClockSource+0x178>
 8003d38:	2b20      	cmp	r3, #32
 8003d3a:	d060      	beq.n	8003dfe <HAL_TIM_ConfigClockSource+0x166>
 8003d3c:	d868      	bhi.n	8003e10 <HAL_TIM_ConfigClockSource+0x178>
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d05d      	beq.n	8003dfe <HAL_TIM_ConfigClockSource+0x166>
 8003d42:	2b10      	cmp	r3, #16
 8003d44:	d05b      	beq.n	8003dfe <HAL_TIM_ConfigClockSource+0x166>
 8003d46:	e063      	b.n	8003e10 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6818      	ldr	r0, [r3, #0]
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	6899      	ldr	r1, [r3, #8]
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	685a      	ldr	r2, [r3, #4]
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	f000 fb5e 	bl	8004418 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	2277      	movs	r2, #119	; 0x77
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	68ba      	ldr	r2, [r7, #8]
 8003d72:	609a      	str	r2, [r3, #8]
      break;
 8003d74:	e052      	b.n	8003e1c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6818      	ldr	r0, [r3, #0]
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	6899      	ldr	r1, [r3, #8]
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	685a      	ldr	r2, [r3, #4]
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	f000 fb47 	bl	8004418 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	689a      	ldr	r2, [r3, #8]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2180      	movs	r1, #128	; 0x80
 8003d96:	01c9      	lsls	r1, r1, #7
 8003d98:	430a      	orrs	r2, r1
 8003d9a:	609a      	str	r2, [r3, #8]
      break;
 8003d9c:	e03e      	b.n	8003e1c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6818      	ldr	r0, [r3, #0]
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	6859      	ldr	r1, [r3, #4]
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	001a      	movs	r2, r3
 8003dac:	f000 faba 	bl	8004324 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2150      	movs	r1, #80	; 0x50
 8003db6:	0018      	movs	r0, r3
 8003db8:	f000 fb14 	bl	80043e4 <TIM_ITRx_SetConfig>
      break;
 8003dbc:	e02e      	b.n	8003e1c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6818      	ldr	r0, [r3, #0]
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	6859      	ldr	r1, [r3, #4]
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	001a      	movs	r2, r3
 8003dcc:	f000 fad8 	bl	8004380 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	2160      	movs	r1, #96	; 0x60
 8003dd6:	0018      	movs	r0, r3
 8003dd8:	f000 fb04 	bl	80043e4 <TIM_ITRx_SetConfig>
      break;
 8003ddc:	e01e      	b.n	8003e1c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6818      	ldr	r0, [r3, #0]
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	6859      	ldr	r1, [r3, #4]
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	001a      	movs	r2, r3
 8003dec:	f000 fa9a 	bl	8004324 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2140      	movs	r1, #64	; 0x40
 8003df6:	0018      	movs	r0, r3
 8003df8:	f000 faf4 	bl	80043e4 <TIM_ITRx_SetConfig>
      break;
 8003dfc:	e00e      	b.n	8003e1c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	0019      	movs	r1, r3
 8003e08:	0010      	movs	r0, r2
 8003e0a:	f000 faeb 	bl	80043e4 <TIM_ITRx_SetConfig>
      break;
 8003e0e:	e005      	b.n	8003e1c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003e10:	230f      	movs	r3, #15
 8003e12:	18fb      	adds	r3, r7, r3
 8003e14:	2201      	movs	r2, #1
 8003e16:	701a      	strb	r2, [r3, #0]
      break;
 8003e18:	e000      	b.n	8003e1c <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003e1a:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	223d      	movs	r2, #61	; 0x3d
 8003e20:	2101      	movs	r1, #1
 8003e22:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	223c      	movs	r2, #60	; 0x3c
 8003e28:	2100      	movs	r1, #0
 8003e2a:	5499      	strb	r1, [r3, r2]

  return status;
 8003e2c:	230f      	movs	r3, #15
 8003e2e:	18fb      	adds	r3, r7, r3
 8003e30:	781b      	ldrb	r3, [r3, #0]
}
 8003e32:	0018      	movs	r0, r3
 8003e34:	46bd      	mov	sp, r7
 8003e36:	b004      	add	sp, #16
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	46c0      	nop			; (mov r8, r8)
 8003e3c:	ffff00ff 	.word	0xffff00ff

08003e40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	4a2f      	ldr	r2, [pc, #188]	; (8003f10 <TIM_Base_SetConfig+0xd0>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d003      	beq.n	8003e60 <TIM_Base_SetConfig+0x20>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	4a2e      	ldr	r2, [pc, #184]	; (8003f14 <TIM_Base_SetConfig+0xd4>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d108      	bne.n	8003e72 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2270      	movs	r2, #112	; 0x70
 8003e64:	4393      	bics	r3, r2
 8003e66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	68fa      	ldr	r2, [r7, #12]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a26      	ldr	r2, [pc, #152]	; (8003f10 <TIM_Base_SetConfig+0xd0>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d013      	beq.n	8003ea2 <TIM_Base_SetConfig+0x62>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a25      	ldr	r2, [pc, #148]	; (8003f14 <TIM_Base_SetConfig+0xd4>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d00f      	beq.n	8003ea2 <TIM_Base_SetConfig+0x62>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4a24      	ldr	r2, [pc, #144]	; (8003f18 <TIM_Base_SetConfig+0xd8>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d00b      	beq.n	8003ea2 <TIM_Base_SetConfig+0x62>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4a23      	ldr	r2, [pc, #140]	; (8003f1c <TIM_Base_SetConfig+0xdc>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d007      	beq.n	8003ea2 <TIM_Base_SetConfig+0x62>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a22      	ldr	r2, [pc, #136]	; (8003f20 <TIM_Base_SetConfig+0xe0>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d003      	beq.n	8003ea2 <TIM_Base_SetConfig+0x62>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a21      	ldr	r2, [pc, #132]	; (8003f24 <TIM_Base_SetConfig+0xe4>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d108      	bne.n	8003eb4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	4a20      	ldr	r2, [pc, #128]	; (8003f28 <TIM_Base_SetConfig+0xe8>)
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	68db      	ldr	r3, [r3, #12]
 8003eae:	68fa      	ldr	r2, [r7, #12]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2280      	movs	r2, #128	; 0x80
 8003eb8:	4393      	bics	r3, r2
 8003eba:	001a      	movs	r2, r3
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	695b      	ldr	r3, [r3, #20]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	68fa      	ldr	r2, [r7, #12]
 8003ec8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	689a      	ldr	r2, [r3, #8]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a0c      	ldr	r2, [pc, #48]	; (8003f10 <TIM_Base_SetConfig+0xd0>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d00b      	beq.n	8003efa <TIM_Base_SetConfig+0xba>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a0d      	ldr	r2, [pc, #52]	; (8003f1c <TIM_Base_SetConfig+0xdc>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d007      	beq.n	8003efa <TIM_Base_SetConfig+0xba>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a0c      	ldr	r2, [pc, #48]	; (8003f20 <TIM_Base_SetConfig+0xe0>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d003      	beq.n	8003efa <TIM_Base_SetConfig+0xba>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a0b      	ldr	r2, [pc, #44]	; (8003f24 <TIM_Base_SetConfig+0xe4>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d103      	bne.n	8003f02 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	691a      	ldr	r2, [r3, #16]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2201      	movs	r2, #1
 8003f06:	615a      	str	r2, [r3, #20]
}
 8003f08:	46c0      	nop			; (mov r8, r8)
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	b004      	add	sp, #16
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	40012c00 	.word	0x40012c00
 8003f14:	40000400 	.word	0x40000400
 8003f18:	40002000 	.word	0x40002000
 8003f1c:	40014000 	.word	0x40014000
 8003f20:	40014400 	.word	0x40014400
 8003f24:	40014800 	.word	0x40014800
 8003f28:	fffffcff 	.word	0xfffffcff

08003f2c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b086      	sub	sp, #24
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6a1b      	ldr	r3, [r3, #32]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	4393      	bics	r3, r2
 8003f3e:	001a      	movs	r2, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6a1b      	ldr	r3, [r3, #32]
 8003f48:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	699b      	ldr	r3, [r3, #24]
 8003f54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2270      	movs	r2, #112	; 0x70
 8003f5a:	4393      	bics	r3, r2
 8003f5c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2203      	movs	r2, #3
 8003f62:	4393      	bics	r3, r2
 8003f64:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	68fa      	ldr	r2, [r7, #12]
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	2202      	movs	r2, #2
 8003f74:	4393      	bics	r3, r2
 8003f76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	697a      	ldr	r2, [r7, #20]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a27      	ldr	r2, [pc, #156]	; (8004024 <TIM_OC1_SetConfig+0xf8>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d00b      	beq.n	8003fa2 <TIM_OC1_SetConfig+0x76>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a26      	ldr	r2, [pc, #152]	; (8004028 <TIM_OC1_SetConfig+0xfc>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d007      	beq.n	8003fa2 <TIM_OC1_SetConfig+0x76>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a25      	ldr	r2, [pc, #148]	; (800402c <TIM_OC1_SetConfig+0x100>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d003      	beq.n	8003fa2 <TIM_OC1_SetConfig+0x76>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a24      	ldr	r2, [pc, #144]	; (8004030 <TIM_OC1_SetConfig+0x104>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d10c      	bne.n	8003fbc <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	2208      	movs	r2, #8
 8003fa6:	4393      	bics	r3, r2
 8003fa8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	697a      	ldr	r2, [r7, #20]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	2204      	movs	r2, #4
 8003fb8:	4393      	bics	r3, r2
 8003fba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	4a19      	ldr	r2, [pc, #100]	; (8004024 <TIM_OC1_SetConfig+0xf8>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d00b      	beq.n	8003fdc <TIM_OC1_SetConfig+0xb0>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	4a18      	ldr	r2, [pc, #96]	; (8004028 <TIM_OC1_SetConfig+0xfc>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d007      	beq.n	8003fdc <TIM_OC1_SetConfig+0xb0>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	4a17      	ldr	r2, [pc, #92]	; (800402c <TIM_OC1_SetConfig+0x100>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d003      	beq.n	8003fdc <TIM_OC1_SetConfig+0xb0>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	4a16      	ldr	r2, [pc, #88]	; (8004030 <TIM_OC1_SetConfig+0x104>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d111      	bne.n	8004000 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	4a15      	ldr	r2, [pc, #84]	; (8004034 <TIM_OC1_SetConfig+0x108>)
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	4a14      	ldr	r2, [pc, #80]	; (8004038 <TIM_OC1_SetConfig+0x10c>)
 8003fe8:	4013      	ands	r3, r2
 8003fea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	695b      	ldr	r3, [r3, #20]
 8003ff0:	693a      	ldr	r2, [r7, #16]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	699b      	ldr	r3, [r3, #24]
 8003ffa:	693a      	ldr	r2, [r7, #16]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	693a      	ldr	r2, [r7, #16]
 8004004:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	68fa      	ldr	r2, [r7, #12]
 800400a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	685a      	ldr	r2, [r3, #4]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	697a      	ldr	r2, [r7, #20]
 8004018:	621a      	str	r2, [r3, #32]
}
 800401a:	46c0      	nop			; (mov r8, r8)
 800401c:	46bd      	mov	sp, r7
 800401e:	b006      	add	sp, #24
 8004020:	bd80      	pop	{r7, pc}
 8004022:	46c0      	nop			; (mov r8, r8)
 8004024:	40012c00 	.word	0x40012c00
 8004028:	40014000 	.word	0x40014000
 800402c:	40014400 	.word	0x40014400
 8004030:	40014800 	.word	0x40014800
 8004034:	fffffeff 	.word	0xfffffeff
 8004038:	fffffdff 	.word	0xfffffdff

0800403c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b086      	sub	sp, #24
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6a1b      	ldr	r3, [r3, #32]
 800404a:	2210      	movs	r2, #16
 800404c:	4393      	bics	r3, r2
 800404e:	001a      	movs	r2, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6a1b      	ldr	r3, [r3, #32]
 8004058:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	699b      	ldr	r3, [r3, #24]
 8004064:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	4a2e      	ldr	r2, [pc, #184]	; (8004124 <TIM_OC2_SetConfig+0xe8>)
 800406a:	4013      	ands	r3, r2
 800406c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	4a2d      	ldr	r2, [pc, #180]	; (8004128 <TIM_OC2_SetConfig+0xec>)
 8004072:	4013      	ands	r3, r2
 8004074:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	021b      	lsls	r3, r3, #8
 800407c:	68fa      	ldr	r2, [r7, #12]
 800407e:	4313      	orrs	r3, r2
 8004080:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	2220      	movs	r2, #32
 8004086:	4393      	bics	r3, r2
 8004088:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	011b      	lsls	r3, r3, #4
 8004090:	697a      	ldr	r2, [r7, #20]
 8004092:	4313      	orrs	r3, r2
 8004094:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4a24      	ldr	r2, [pc, #144]	; (800412c <TIM_OC2_SetConfig+0xf0>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d10d      	bne.n	80040ba <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	2280      	movs	r2, #128	; 0x80
 80040a2:	4393      	bics	r3, r2
 80040a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	68db      	ldr	r3, [r3, #12]
 80040aa:	011b      	lsls	r3, r3, #4
 80040ac:	697a      	ldr	r2, [r7, #20]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	2240      	movs	r2, #64	; 0x40
 80040b6:	4393      	bics	r3, r2
 80040b8:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4a1b      	ldr	r2, [pc, #108]	; (800412c <TIM_OC2_SetConfig+0xf0>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d00b      	beq.n	80040da <TIM_OC2_SetConfig+0x9e>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a1a      	ldr	r2, [pc, #104]	; (8004130 <TIM_OC2_SetConfig+0xf4>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d007      	beq.n	80040da <TIM_OC2_SetConfig+0x9e>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4a19      	ldr	r2, [pc, #100]	; (8004134 <TIM_OC2_SetConfig+0xf8>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d003      	beq.n	80040da <TIM_OC2_SetConfig+0x9e>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	4a18      	ldr	r2, [pc, #96]	; (8004138 <TIM_OC2_SetConfig+0xfc>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d113      	bne.n	8004102 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	4a17      	ldr	r2, [pc, #92]	; (800413c <TIM_OC2_SetConfig+0x100>)
 80040de:	4013      	ands	r3, r2
 80040e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	4a16      	ldr	r2, [pc, #88]	; (8004140 <TIM_OC2_SetConfig+0x104>)
 80040e6:	4013      	ands	r3, r2
 80040e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	695b      	ldr	r3, [r3, #20]
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	693a      	ldr	r2, [r7, #16]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	699b      	ldr	r3, [r3, #24]
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	693a      	ldr	r2, [r7, #16]
 80040fe:	4313      	orrs	r3, r2
 8004100:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	693a      	ldr	r2, [r7, #16]
 8004106:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	68fa      	ldr	r2, [r7, #12]
 800410c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	685a      	ldr	r2, [r3, #4]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	697a      	ldr	r2, [r7, #20]
 800411a:	621a      	str	r2, [r3, #32]
}
 800411c:	46c0      	nop			; (mov r8, r8)
 800411e:	46bd      	mov	sp, r7
 8004120:	b006      	add	sp, #24
 8004122:	bd80      	pop	{r7, pc}
 8004124:	ffff8fff 	.word	0xffff8fff
 8004128:	fffffcff 	.word	0xfffffcff
 800412c:	40012c00 	.word	0x40012c00
 8004130:	40014000 	.word	0x40014000
 8004134:	40014400 	.word	0x40014400
 8004138:	40014800 	.word	0x40014800
 800413c:	fffffbff 	.word	0xfffffbff
 8004140:	fffff7ff 	.word	0xfffff7ff

08004144 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b086      	sub	sp, #24
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a1b      	ldr	r3, [r3, #32]
 8004152:	4a35      	ldr	r2, [pc, #212]	; (8004228 <TIM_OC3_SetConfig+0xe4>)
 8004154:	401a      	ands	r2, r3
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a1b      	ldr	r3, [r3, #32]
 800415e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	69db      	ldr	r3, [r3, #28]
 800416a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2270      	movs	r2, #112	; 0x70
 8004170:	4393      	bics	r3, r2
 8004172:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2203      	movs	r2, #3
 8004178:	4393      	bics	r3, r2
 800417a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	68fa      	ldr	r2, [r7, #12]
 8004182:	4313      	orrs	r3, r2
 8004184:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	4a28      	ldr	r2, [pc, #160]	; (800422c <TIM_OC3_SetConfig+0xe8>)
 800418a:	4013      	ands	r3, r2
 800418c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	021b      	lsls	r3, r3, #8
 8004194:	697a      	ldr	r2, [r7, #20]
 8004196:	4313      	orrs	r3, r2
 8004198:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a24      	ldr	r2, [pc, #144]	; (8004230 <TIM_OC3_SetConfig+0xec>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d10d      	bne.n	80041be <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	4a23      	ldr	r2, [pc, #140]	; (8004234 <TIM_OC3_SetConfig+0xf0>)
 80041a6:	4013      	ands	r3, r2
 80041a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	021b      	lsls	r3, r3, #8
 80041b0:	697a      	ldr	r2, [r7, #20]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	4a1f      	ldr	r2, [pc, #124]	; (8004238 <TIM_OC3_SetConfig+0xf4>)
 80041ba:	4013      	ands	r3, r2
 80041bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a1b      	ldr	r2, [pc, #108]	; (8004230 <TIM_OC3_SetConfig+0xec>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d00b      	beq.n	80041de <TIM_OC3_SetConfig+0x9a>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a1c      	ldr	r2, [pc, #112]	; (800423c <TIM_OC3_SetConfig+0xf8>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d007      	beq.n	80041de <TIM_OC3_SetConfig+0x9a>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a1b      	ldr	r2, [pc, #108]	; (8004240 <TIM_OC3_SetConfig+0xfc>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d003      	beq.n	80041de <TIM_OC3_SetConfig+0x9a>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a1a      	ldr	r2, [pc, #104]	; (8004244 <TIM_OC3_SetConfig+0x100>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d113      	bne.n	8004206 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	4a19      	ldr	r2, [pc, #100]	; (8004248 <TIM_OC3_SetConfig+0x104>)
 80041e2:	4013      	ands	r3, r2
 80041e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	4a18      	ldr	r2, [pc, #96]	; (800424c <TIM_OC3_SetConfig+0x108>)
 80041ea:	4013      	ands	r3, r2
 80041ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	695b      	ldr	r3, [r3, #20]
 80041f2:	011b      	lsls	r3, r3, #4
 80041f4:	693a      	ldr	r2, [r7, #16]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	699b      	ldr	r3, [r3, #24]
 80041fe:	011b      	lsls	r3, r3, #4
 8004200:	693a      	ldr	r2, [r7, #16]
 8004202:	4313      	orrs	r3, r2
 8004204:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	693a      	ldr	r2, [r7, #16]
 800420a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	68fa      	ldr	r2, [r7, #12]
 8004210:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	685a      	ldr	r2, [r3, #4]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	697a      	ldr	r2, [r7, #20]
 800421e:	621a      	str	r2, [r3, #32]
}
 8004220:	46c0      	nop			; (mov r8, r8)
 8004222:	46bd      	mov	sp, r7
 8004224:	b006      	add	sp, #24
 8004226:	bd80      	pop	{r7, pc}
 8004228:	fffffeff 	.word	0xfffffeff
 800422c:	fffffdff 	.word	0xfffffdff
 8004230:	40012c00 	.word	0x40012c00
 8004234:	fffff7ff 	.word	0xfffff7ff
 8004238:	fffffbff 	.word	0xfffffbff
 800423c:	40014000 	.word	0x40014000
 8004240:	40014400 	.word	0x40014400
 8004244:	40014800 	.word	0x40014800
 8004248:	ffffefff 	.word	0xffffefff
 800424c:	ffffdfff 	.word	0xffffdfff

08004250 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b086      	sub	sp, #24
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a1b      	ldr	r3, [r3, #32]
 800425e:	4a28      	ldr	r2, [pc, #160]	; (8004300 <TIM_OC4_SetConfig+0xb0>)
 8004260:	401a      	ands	r2, r3
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a1b      	ldr	r3, [r3, #32]
 800426a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	69db      	ldr	r3, [r3, #28]
 8004276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	4a22      	ldr	r2, [pc, #136]	; (8004304 <TIM_OC4_SetConfig+0xb4>)
 800427c:	4013      	ands	r3, r2
 800427e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	4a21      	ldr	r2, [pc, #132]	; (8004308 <TIM_OC4_SetConfig+0xb8>)
 8004284:	4013      	ands	r3, r2
 8004286:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	021b      	lsls	r3, r3, #8
 800428e:	68fa      	ldr	r2, [r7, #12]
 8004290:	4313      	orrs	r3, r2
 8004292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	4a1d      	ldr	r2, [pc, #116]	; (800430c <TIM_OC4_SetConfig+0xbc>)
 8004298:	4013      	ands	r3, r2
 800429a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	031b      	lsls	r3, r3, #12
 80042a2:	693a      	ldr	r2, [r7, #16]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	4a19      	ldr	r2, [pc, #100]	; (8004310 <TIM_OC4_SetConfig+0xc0>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d00b      	beq.n	80042c8 <TIM_OC4_SetConfig+0x78>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	4a18      	ldr	r2, [pc, #96]	; (8004314 <TIM_OC4_SetConfig+0xc4>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d007      	beq.n	80042c8 <TIM_OC4_SetConfig+0x78>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	4a17      	ldr	r2, [pc, #92]	; (8004318 <TIM_OC4_SetConfig+0xc8>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d003      	beq.n	80042c8 <TIM_OC4_SetConfig+0x78>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	4a16      	ldr	r2, [pc, #88]	; (800431c <TIM_OC4_SetConfig+0xcc>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d109      	bne.n	80042dc <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	4a15      	ldr	r2, [pc, #84]	; (8004320 <TIM_OC4_SetConfig+0xd0>)
 80042cc:	4013      	ands	r3, r2
 80042ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	695b      	ldr	r3, [r3, #20]
 80042d4:	019b      	lsls	r3, r3, #6
 80042d6:	697a      	ldr	r2, [r7, #20]
 80042d8:	4313      	orrs	r3, r2
 80042da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	697a      	ldr	r2, [r7, #20]
 80042e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	68fa      	ldr	r2, [r7, #12]
 80042e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	685a      	ldr	r2, [r3, #4]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	693a      	ldr	r2, [r7, #16]
 80042f4:	621a      	str	r2, [r3, #32]
}
 80042f6:	46c0      	nop			; (mov r8, r8)
 80042f8:	46bd      	mov	sp, r7
 80042fa:	b006      	add	sp, #24
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	46c0      	nop			; (mov r8, r8)
 8004300:	ffffefff 	.word	0xffffefff
 8004304:	ffff8fff 	.word	0xffff8fff
 8004308:	fffffcff 	.word	0xfffffcff
 800430c:	ffffdfff 	.word	0xffffdfff
 8004310:	40012c00 	.word	0x40012c00
 8004314:	40014000 	.word	0x40014000
 8004318:	40014400 	.word	0x40014400
 800431c:	40014800 	.word	0x40014800
 8004320:	ffffbfff 	.word	0xffffbfff

08004324 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b086      	sub	sp, #24
 8004328:	af00      	add	r7, sp, #0
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	60b9      	str	r1, [r7, #8]
 800432e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6a1b      	ldr	r3, [r3, #32]
 8004334:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6a1b      	ldr	r3, [r3, #32]
 800433a:	2201      	movs	r2, #1
 800433c:	4393      	bics	r3, r2
 800433e:	001a      	movs	r2, r3
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	699b      	ldr	r3, [r3, #24]
 8004348:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	22f0      	movs	r2, #240	; 0xf0
 800434e:	4393      	bics	r3, r2
 8004350:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	011b      	lsls	r3, r3, #4
 8004356:	693a      	ldr	r2, [r7, #16]
 8004358:	4313      	orrs	r3, r2
 800435a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	220a      	movs	r2, #10
 8004360:	4393      	bics	r3, r2
 8004362:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004364:	697a      	ldr	r2, [r7, #20]
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	4313      	orrs	r3, r2
 800436a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	693a      	ldr	r2, [r7, #16]
 8004370:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	697a      	ldr	r2, [r7, #20]
 8004376:	621a      	str	r2, [r3, #32]
}
 8004378:	46c0      	nop			; (mov r8, r8)
 800437a:	46bd      	mov	sp, r7
 800437c:	b006      	add	sp, #24
 800437e:	bd80      	pop	{r7, pc}

08004380 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b086      	sub	sp, #24
 8004384:	af00      	add	r7, sp, #0
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	60b9      	str	r1, [r7, #8]
 800438a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6a1b      	ldr	r3, [r3, #32]
 8004390:	2210      	movs	r2, #16
 8004392:	4393      	bics	r3, r2
 8004394:	001a      	movs	r2, r3
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	699b      	ldr	r3, [r3, #24]
 800439e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	6a1b      	ldr	r3, [r3, #32]
 80043a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	4a0d      	ldr	r2, [pc, #52]	; (80043e0 <TIM_TI2_ConfigInputStage+0x60>)
 80043aa:	4013      	ands	r3, r2
 80043ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	031b      	lsls	r3, r3, #12
 80043b2:	697a      	ldr	r2, [r7, #20]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	22a0      	movs	r2, #160	; 0xa0
 80043bc:	4393      	bics	r3, r2
 80043be:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	011b      	lsls	r3, r3, #4
 80043c4:	693a      	ldr	r2, [r7, #16]
 80043c6:	4313      	orrs	r3, r2
 80043c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	697a      	ldr	r2, [r7, #20]
 80043ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	693a      	ldr	r2, [r7, #16]
 80043d4:	621a      	str	r2, [r3, #32]
}
 80043d6:	46c0      	nop			; (mov r8, r8)
 80043d8:	46bd      	mov	sp, r7
 80043da:	b006      	add	sp, #24
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	46c0      	nop			; (mov r8, r8)
 80043e0:	ffff0fff 	.word	0xffff0fff

080043e4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b084      	sub	sp, #16
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2270      	movs	r2, #112	; 0x70
 80043f8:	4393      	bics	r3, r2
 80043fa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80043fc:	683a      	ldr	r2, [r7, #0]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	4313      	orrs	r3, r2
 8004402:	2207      	movs	r2, #7
 8004404:	4313      	orrs	r3, r2
 8004406:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	68fa      	ldr	r2, [r7, #12]
 800440c:	609a      	str	r2, [r3, #8]
}
 800440e:	46c0      	nop			; (mov r8, r8)
 8004410:	46bd      	mov	sp, r7
 8004412:	b004      	add	sp, #16
 8004414:	bd80      	pop	{r7, pc}
	...

08004418 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b086      	sub	sp, #24
 800441c:	af00      	add	r7, sp, #0
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	60b9      	str	r1, [r7, #8]
 8004422:	607a      	str	r2, [r7, #4]
 8004424:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	4a09      	ldr	r2, [pc, #36]	; (8004454 <TIM_ETR_SetConfig+0x3c>)
 8004430:	4013      	ands	r3, r2
 8004432:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	021a      	lsls	r2, r3, #8
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	431a      	orrs	r2, r3
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	4313      	orrs	r3, r2
 8004440:	697a      	ldr	r2, [r7, #20]
 8004442:	4313      	orrs	r3, r2
 8004444:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	697a      	ldr	r2, [r7, #20]
 800444a:	609a      	str	r2, [r3, #8]
}
 800444c:	46c0      	nop			; (mov r8, r8)
 800444e:	46bd      	mov	sp, r7
 8004450:	b006      	add	sp, #24
 8004452:	bd80      	pop	{r7, pc}
 8004454:	ffff00ff 	.word	0xffff00ff

08004458 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b086      	sub	sp, #24
 800445c:	af00      	add	r7, sp, #0
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	221f      	movs	r2, #31
 8004468:	4013      	ands	r3, r2
 800446a:	2201      	movs	r2, #1
 800446c:	409a      	lsls	r2, r3
 800446e:	0013      	movs	r3, r2
 8004470:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	6a1b      	ldr	r3, [r3, #32]
 8004476:	697a      	ldr	r2, [r7, #20]
 8004478:	43d2      	mvns	r2, r2
 800447a:	401a      	ands	r2, r3
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	6a1a      	ldr	r2, [r3, #32]
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	211f      	movs	r1, #31
 8004488:	400b      	ands	r3, r1
 800448a:	6879      	ldr	r1, [r7, #4]
 800448c:	4099      	lsls	r1, r3
 800448e:	000b      	movs	r3, r1
 8004490:	431a      	orrs	r2, r3
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	621a      	str	r2, [r3, #32]
}
 8004496:	46c0      	nop			; (mov r8, r8)
 8004498:	46bd      	mov	sp, r7
 800449a:	b006      	add	sp, #24
 800449c:	bd80      	pop	{r7, pc}
	...

080044a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b084      	sub	sp, #16
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	223c      	movs	r2, #60	; 0x3c
 80044ae:	5c9b      	ldrb	r3, [r3, r2]
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d101      	bne.n	80044b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80044b4:	2302      	movs	r3, #2
 80044b6:	e041      	b.n	800453c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	223c      	movs	r2, #60	; 0x3c
 80044bc:	2101      	movs	r1, #1
 80044be:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	223d      	movs	r2, #61	; 0x3d
 80044c4:	2102      	movs	r1, #2
 80044c6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2270      	movs	r2, #112	; 0x70
 80044dc:	4393      	bics	r3, r2
 80044de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	68fa      	ldr	r2, [r7, #12]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	68fa      	ldr	r2, [r7, #12]
 80044f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a13      	ldr	r2, [pc, #76]	; (8004544 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d009      	beq.n	8004510 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a11      	ldr	r2, [pc, #68]	; (8004548 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d004      	beq.n	8004510 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a10      	ldr	r2, [pc, #64]	; (800454c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d10c      	bne.n	800452a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	2280      	movs	r2, #128	; 0x80
 8004514:	4393      	bics	r3, r2
 8004516:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	68ba      	ldr	r2, [r7, #8]
 800451e:	4313      	orrs	r3, r2
 8004520:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	68ba      	ldr	r2, [r7, #8]
 8004528:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	223d      	movs	r2, #61	; 0x3d
 800452e:	2101      	movs	r1, #1
 8004530:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	223c      	movs	r2, #60	; 0x3c
 8004536:	2100      	movs	r1, #0
 8004538:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800453a:	2300      	movs	r3, #0
}
 800453c:	0018      	movs	r0, r3
 800453e:	46bd      	mov	sp, r7
 8004540:	b004      	add	sp, #16
 8004542:	bd80      	pop	{r7, pc}
 8004544:	40012c00 	.word	0x40012c00
 8004548:	40000400 	.word	0x40000400
 800454c:	40014000 	.word	0x40014000

08004550 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800455a:	2300      	movs	r3, #0
 800455c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	223c      	movs	r2, #60	; 0x3c
 8004562:	5c9b      	ldrb	r3, [r3, r2]
 8004564:	2b01      	cmp	r3, #1
 8004566:	d101      	bne.n	800456c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004568:	2302      	movs	r3, #2
 800456a:	e03e      	b.n	80045ea <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	223c      	movs	r2, #60	; 0x3c
 8004570:	2101      	movs	r1, #1
 8004572:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	22ff      	movs	r2, #255	; 0xff
 8004578:	4393      	bics	r3, r2
 800457a:	001a      	movs	r2, r3
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	4313      	orrs	r3, r2
 8004582:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	4a1b      	ldr	r2, [pc, #108]	; (80045f4 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8004588:	401a      	ands	r2, r3
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	4313      	orrs	r3, r2
 8004590:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	4a18      	ldr	r2, [pc, #96]	; (80045f8 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8004596:	401a      	ands	r2, r3
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	4313      	orrs	r3, r2
 800459e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	4a16      	ldr	r2, [pc, #88]	; (80045fc <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 80045a4:	401a      	ands	r2, r3
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	4a13      	ldr	r2, [pc, #76]	; (8004600 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 80045b2:	401a      	ands	r2, r3
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	691b      	ldr	r3, [r3, #16]
 80045b8:	4313      	orrs	r3, r2
 80045ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	4a11      	ldr	r2, [pc, #68]	; (8004604 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 80045c0:	401a      	ands	r2, r3
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	695b      	ldr	r3, [r3, #20]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	4a0e      	ldr	r2, [pc, #56]	; (8004608 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 80045ce:	401a      	ands	r2, r3
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	69db      	ldr	r3, [r3, #28]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	68fa      	ldr	r2, [r7, #12]
 80045de:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	223c      	movs	r2, #60	; 0x3c
 80045e4:	2100      	movs	r1, #0
 80045e6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80045e8:	2300      	movs	r3, #0
}
 80045ea:	0018      	movs	r0, r3
 80045ec:	46bd      	mov	sp, r7
 80045ee:	b004      	add	sp, #16
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	46c0      	nop			; (mov r8, r8)
 80045f4:	fffffcff 	.word	0xfffffcff
 80045f8:	fffffbff 	.word	0xfffffbff
 80045fc:	fffff7ff 	.word	0xfffff7ff
 8004600:	ffffefff 	.word	0xffffefff
 8004604:	ffffdfff 	.word	0xffffdfff
 8004608:	ffffbfff 	.word	0xffffbfff

0800460c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800460c:	b580      	push	{r7, lr}
 800460e:	b084      	sub	sp, #16
 8004610:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004612:	f3ef 8305 	mrs	r3, IPSR
 8004616:	60bb      	str	r3, [r7, #8]
  return(result);
 8004618:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800461a:	2b00      	cmp	r3, #0
 800461c:	d109      	bne.n	8004632 <osKernelInitialize+0x26>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800461e:	f3ef 8310 	mrs	r3, PRIMASK
 8004622:	607b      	str	r3, [r7, #4]
  return(result);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d007      	beq.n	800463a <osKernelInitialize+0x2e>
 800462a:	4b0d      	ldr	r3, [pc, #52]	; (8004660 <osKernelInitialize+0x54>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	2b02      	cmp	r3, #2
 8004630:	d103      	bne.n	800463a <osKernelInitialize+0x2e>
    stat = osErrorISR;
 8004632:	2306      	movs	r3, #6
 8004634:	425b      	negs	r3, r3
 8004636:	60fb      	str	r3, [r7, #12]
 8004638:	e00c      	b.n	8004654 <osKernelInitialize+0x48>
  }
  else {
    if (KernelState == osKernelInactive) {
 800463a:	4b09      	ldr	r3, [pc, #36]	; (8004660 <osKernelInitialize+0x54>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d105      	bne.n	800464e <osKernelInitialize+0x42>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8004642:	4b07      	ldr	r3, [pc, #28]	; (8004660 <osKernelInitialize+0x54>)
 8004644:	2201      	movs	r2, #1
 8004646:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004648:	2300      	movs	r3, #0
 800464a:	60fb      	str	r3, [r7, #12]
 800464c:	e002      	b.n	8004654 <osKernelInitialize+0x48>
    } else {
      stat = osError;
 800464e:	2301      	movs	r3, #1
 8004650:	425b      	negs	r3, r3
 8004652:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004654:	68fb      	ldr	r3, [r7, #12]
}
 8004656:	0018      	movs	r0, r3
 8004658:	46bd      	mov	sp, r7
 800465a:	b004      	add	sp, #16
 800465c:	bd80      	pop	{r7, pc}
 800465e:	46c0      	nop			; (mov r8, r8)
 8004660:	20000038 	.word	0x20000038

08004664 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004664:	b5b0      	push	{r4, r5, r7, lr}
 8004666:	b090      	sub	sp, #64	; 0x40
 8004668:	af04      	add	r7, sp, #16
 800466a:	60f8      	str	r0, [r7, #12]
 800466c:	60b9      	str	r1, [r7, #8]
 800466e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004670:	2300      	movs	r3, #0
 8004672:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004674:	f3ef 8305 	mrs	r3, IPSR
 8004678:	61fb      	str	r3, [r7, #28]
  return(result);
 800467a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800467c:	2b00      	cmp	r3, #0
 800467e:	d000      	beq.n	8004682 <osThreadNew+0x1e>
 8004680:	e090      	b.n	80047a4 <osThreadNew+0x140>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004682:	f3ef 8310 	mrs	r3, PRIMASK
 8004686:	61bb      	str	r3, [r7, #24]
  return(result);
 8004688:	69bb      	ldr	r3, [r7, #24]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d004      	beq.n	8004698 <osThreadNew+0x34>
 800468e:	4b48      	ldr	r3, [pc, #288]	; (80047b0 <osThreadNew+0x14c>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	2b02      	cmp	r3, #2
 8004694:	d100      	bne.n	8004698 <osThreadNew+0x34>
 8004696:	e085      	b.n	80047a4 <osThreadNew+0x140>
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d100      	bne.n	80046a0 <osThreadNew+0x3c>
 800469e:	e081      	b.n	80047a4 <osThreadNew+0x140>
    stack = configMINIMAL_STACK_SIZE;
 80046a0:	2380      	movs	r3, #128	; 0x80
 80046a2:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80046a4:	2318      	movs	r3, #24
 80046a6:	627b      	str	r3, [r7, #36]	; 0x24

    empty = '\0';
 80046a8:	2117      	movs	r1, #23
 80046aa:	187b      	adds	r3, r7, r1
 80046ac:	2200      	movs	r2, #0
 80046ae:	701a      	strb	r2, [r3, #0]
    name  = &empty;
 80046b0:	187b      	adds	r3, r7, r1
 80046b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem   = -1;
 80046b4:	2301      	movs	r3, #1
 80046b6:	425b      	negs	r3, r3
 80046b8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d044      	beq.n	800474a <osThreadNew+0xe6>
      if (attr->name != NULL) {
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d002      	beq.n	80046ce <osThreadNew+0x6a>
        name = attr->name;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	699b      	ldr	r3, [r3, #24]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d002      	beq.n	80046dc <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	699b      	ldr	r3, [r3, #24]
 80046da:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80046dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d007      	beq.n	80046f2 <osThreadNew+0x8e>
 80046e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e4:	2b38      	cmp	r3, #56	; 0x38
 80046e6:	d804      	bhi.n	80046f2 <osThreadNew+0x8e>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	2201      	movs	r2, #1
 80046ee:	4013      	ands	r3, r2
 80046f0:	d001      	beq.n	80046f6 <osThreadNew+0x92>
        return (NULL);
 80046f2:	2300      	movs	r3, #0
 80046f4:	e057      	b.n	80047a6 <osThreadNew+0x142>
      }

      if (attr->stack_size > 0U) {
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	695b      	ldr	r3, [r3, #20]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d003      	beq.n	8004706 <osThreadNew+0xa2>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	695b      	ldr	r3, [r3, #20]
 8004702:	089b      	lsrs	r3, r3, #2
 8004704:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d00e      	beq.n	800472c <osThreadNew+0xc8>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	68db      	ldr	r3, [r3, #12]
 8004712:	2b5b      	cmp	r3, #91	; 0x5b
 8004714:	d90a      	bls.n	800472c <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800471a:	2b00      	cmp	r3, #0
 800471c:	d006      	beq.n	800472c <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	695b      	ldr	r3, [r3, #20]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d002      	beq.n	800472c <osThreadNew+0xc8>
        mem = 1;
 8004726:	2301      	movs	r3, #1
 8004728:	623b      	str	r3, [r7, #32]
 800472a:	e010      	b.n	800474e <osThreadNew+0xea>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d10c      	bne.n	800474e <osThreadNew+0xea>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d108      	bne.n	800474e <osThreadNew+0xea>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	691b      	ldr	r3, [r3, #16]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d104      	bne.n	800474e <osThreadNew+0xea>
          mem = 0;
 8004744:	2300      	movs	r3, #0
 8004746:	623b      	str	r3, [r7, #32]
 8004748:	e001      	b.n	800474e <osThreadNew+0xea>
        }
      }
    }
    else {
      mem = 0;
 800474a:	2300      	movs	r3, #0
 800474c:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800474e:	6a3b      	ldr	r3, [r7, #32]
 8004750:	2b01      	cmp	r3, #1
 8004752:	d112      	bne.n	800477a <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	691a      	ldr	r2, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	689b      	ldr	r3, [r3, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800475c:	68bd      	ldr	r5, [r7, #8]
 800475e:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8004760:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004762:	68f8      	ldr	r0, [r7, #12]
 8004764:	9302      	str	r3, [sp, #8]
 8004766:	9201      	str	r2, [sp, #4]
 8004768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476a:	9300      	str	r3, [sp, #0]
 800476c:	002b      	movs	r3, r5
 800476e:	0022      	movs	r2, r4
 8004770:	f000 fe1b 	bl	80053aa <xTaskCreateStatic>
 8004774:	0003      	movs	r3, r0
 8004776:	613b      	str	r3, [r7, #16]
 8004778:	e014      	b.n	80047a4 <osThreadNew+0x140>
    }
    else {
      if (mem == 0) {
 800477a:	6a3b      	ldr	r3, [r7, #32]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d111      	bne.n	80047a4 <osThreadNew+0x140>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004782:	b29a      	uxth	r2, r3
 8004784:	68bc      	ldr	r4, [r7, #8]
 8004786:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004788:	68f8      	ldr	r0, [r7, #12]
 800478a:	2310      	movs	r3, #16
 800478c:	18fb      	adds	r3, r7, r3
 800478e:	9301      	str	r3, [sp, #4]
 8004790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004792:	9300      	str	r3, [sp, #0]
 8004794:	0023      	movs	r3, r4
 8004796:	f000 fe4b 	bl	8005430 <xTaskCreate>
 800479a:	0003      	movs	r3, r0
 800479c:	2b01      	cmp	r3, #1
 800479e:	d001      	beq.n	80047a4 <osThreadNew+0x140>
          hTask = NULL;
 80047a0:	2300      	movs	r3, #0
 80047a2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80047a4:	693b      	ldr	r3, [r7, #16]
}
 80047a6:	0018      	movs	r0, r3
 80047a8:	46bd      	mov	sp, r7
 80047aa:	b00c      	add	sp, #48	; 0x30
 80047ac:	bdb0      	pop	{r4, r5, r7, pc}
 80047ae:	46c0      	nop			; (mov r8, r8)
 80047b0:	20000038 	.word	0x20000038

080047b4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b086      	sub	sp, #24
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80047bc:	f3ef 8305 	mrs	r3, IPSR
 80047c0:	613b      	str	r3, [r7, #16]
  return(result);
 80047c2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d109      	bne.n	80047dc <osDelay+0x28>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047c8:	f3ef 8310 	mrs	r3, PRIMASK
 80047cc:	60fb      	str	r3, [r7, #12]
  return(result);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d007      	beq.n	80047e4 <osDelay+0x30>
 80047d4:	4b0a      	ldr	r3, [pc, #40]	; (8004800 <osDelay+0x4c>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2b02      	cmp	r3, #2
 80047da:	d103      	bne.n	80047e4 <osDelay+0x30>
    stat = osErrorISR;
 80047dc:	2306      	movs	r3, #6
 80047de:	425b      	negs	r3, r3
 80047e0:	617b      	str	r3, [r7, #20]
 80047e2:	e008      	b.n	80047f6 <osDelay+0x42>
  }
  else {
    stat = osOK;
 80047e4:	2300      	movs	r3, #0
 80047e6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d003      	beq.n	80047f6 <osDelay+0x42>
      vTaskDelay(ticks);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	0018      	movs	r0, r3
 80047f2:	f000 ff53 	bl	800569c <vTaskDelay>
    }
  }

  return (stat);
 80047f6:	697b      	ldr	r3, [r7, #20]
}
 80047f8:	0018      	movs	r0, r3
 80047fa:	46bd      	mov	sp, r7
 80047fc:	b006      	add	sp, #24
 80047fe:	bd80      	pop	{r7, pc}
 8004800:	20000038 	.word	0x20000038

08004804 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004804:	b580      	push	{r7, lr}
 8004806:	b084      	sub	sp, #16
 8004808:	af00      	add	r7, sp, #0
 800480a:	60f8      	str	r0, [r7, #12]
 800480c:	60b9      	str	r1, [r7, #8]
 800480e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	4a06      	ldr	r2, [pc, #24]	; (800482c <vApplicationGetIdleTaskMemory+0x28>)
 8004814:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	4a05      	ldr	r2, [pc, #20]	; (8004830 <vApplicationGetIdleTaskMemory+0x2c>)
 800481a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2280      	movs	r2, #128	; 0x80
 8004820:	601a      	str	r2, [r3, #0]
}
 8004822:	46c0      	nop			; (mov r8, r8)
 8004824:	46bd      	mov	sp, r7
 8004826:	b004      	add	sp, #16
 8004828:	bd80      	pop	{r7, pc}
 800482a:	46c0      	nop			; (mov r8, r8)
 800482c:	2000003c 	.word	0x2000003c
 8004830:	20000098 	.word	0x20000098

08004834 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	60f8      	str	r0, [r7, #12]
 800483c:	60b9      	str	r1, [r7, #8]
 800483e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	4a06      	ldr	r2, [pc, #24]	; (800485c <vApplicationGetTimerTaskMemory+0x28>)
 8004844:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	4a05      	ldr	r2, [pc, #20]	; (8004860 <vApplicationGetTimerTaskMemory+0x2c>)
 800484a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2280      	movs	r2, #128	; 0x80
 8004850:	0052      	lsls	r2, r2, #1
 8004852:	601a      	str	r2, [r3, #0]
}
 8004854:	46c0      	nop			; (mov r8, r8)
 8004856:	46bd      	mov	sp, r7
 8004858:	b004      	add	sp, #16
 800485a:	bd80      	pop	{r7, pc}
 800485c:	20000298 	.word	0x20000298
 8004860:	200002f4 	.word	0x200002f4

08004864 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b082      	sub	sp, #8
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	3308      	adds	r3, #8
 8004870:	001a      	movs	r2, r3
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2201      	movs	r2, #1
 800487a:	4252      	negs	r2, r2
 800487c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	3308      	adds	r3, #8
 8004882:	001a      	movs	r2, r3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	3308      	adds	r3, #8
 800488c:	001a      	movs	r2, r3
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004898:	46c0      	nop			; (mov r8, r8)
 800489a:	46bd      	mov	sp, r7
 800489c:	b002      	add	sp, #8
 800489e:	bd80      	pop	{r7, pc}

080048a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b082      	sub	sp, #8
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80048ae:	46c0      	nop			; (mov r8, r8)
 80048b0:	46bd      	mov	sp, r7
 80048b2:	b002      	add	sp, #8
 80048b4:	bd80      	pop	{r7, pc}

080048b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80048b6:	b580      	push	{r7, lr}
 80048b8:	b084      	sub	sp, #16
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	6078      	str	r0, [r7, #4]
 80048be:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	68fa      	ldr	r2, [r7, #12]
 80048ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	689a      	ldr	r2, [r3, #8]
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	683a      	ldr	r2, [r7, #0]
 80048da:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	683a      	ldr	r2, [r7, #0]
 80048e0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	1c5a      	adds	r2, r3, #1
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	601a      	str	r2, [r3, #0]
}
 80048f2:	46c0      	nop			; (mov r8, r8)
 80048f4:	46bd      	mov	sp, r7
 80048f6:	b004      	add	sp, #16
 80048f8:	bd80      	pop	{r7, pc}

080048fa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80048fa:	b580      	push	{r7, lr}
 80048fc:	b084      	sub	sp, #16
 80048fe:	af00      	add	r7, sp, #0
 8004900:	6078      	str	r0, [r7, #4]
 8004902:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	3301      	adds	r3, #1
 800490e:	d103      	bne.n	8004918 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	691b      	ldr	r3, [r3, #16]
 8004914:	60fb      	str	r3, [r7, #12]
 8004916:	e00c      	b.n	8004932 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	3308      	adds	r3, #8
 800491c:	60fb      	str	r3, [r7, #12]
 800491e:	e002      	b.n	8004926 <vListInsert+0x2c>
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	60fb      	str	r3, [r7, #12]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	68ba      	ldr	r2, [r7, #8]
 800492e:	429a      	cmp	r2, r3
 8004930:	d2f6      	bcs.n	8004920 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	685a      	ldr	r2, [r3, #4]
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	683a      	ldr	r2, [r7, #0]
 8004940:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	68fa      	ldr	r2, [r7, #12]
 8004946:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	683a      	ldr	r2, [r7, #0]
 800494c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	687a      	ldr	r2, [r7, #4]
 8004952:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	1c5a      	adds	r2, r3, #1
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	601a      	str	r2, [r3, #0]
}
 800495e:	46c0      	nop			; (mov r8, r8)
 8004960:	46bd      	mov	sp, r7
 8004962:	b004      	add	sp, #16
 8004964:	bd80      	pop	{r7, pc}

08004966 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004966:	b580      	push	{r7, lr}
 8004968:	b084      	sub	sp, #16
 800496a:	af00      	add	r7, sp, #0
 800496c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	691b      	ldr	r3, [r3, #16]
 8004972:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	6892      	ldr	r2, [r2, #8]
 800497c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	6852      	ldr	r2, [r2, #4]
 8004986:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	429a      	cmp	r2, r3
 8004990:	d103      	bne.n	800499a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	689a      	ldr	r2, [r3, #8]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	1e5a      	subs	r2, r3, #1
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
}
 80049ae:	0018      	movs	r0, r3
 80049b0:	46bd      	mov	sp, r7
 80049b2:	b004      	add	sp, #16
 80049b4:	bd80      	pop	{r7, pc}

080049b6 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80049b6:	b580      	push	{r7, lr}
 80049b8:	b084      	sub	sp, #16
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]
 80049be:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d101      	bne.n	80049ce <xQueueGenericReset+0x18>
 80049ca:	b672      	cpsid	i
 80049cc:	e7fe      	b.n	80049cc <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 80049ce:	f001 fe9f 	bl	8006710 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049de:	434b      	muls	r3, r1
 80049e0:	18d2      	adds	r2, r2, r3
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2200      	movs	r2, #0
 80049ea:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049fc:	1e59      	subs	r1, r3, #1
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a02:	434b      	muls	r3, r1
 8004a04:	18d2      	adds	r2, r2, r3
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2244      	movs	r2, #68	; 0x44
 8004a0e:	21ff      	movs	r1, #255	; 0xff
 8004a10:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2245      	movs	r2, #69	; 0x45
 8004a16:	21ff      	movs	r1, #255	; 0xff
 8004a18:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d10d      	bne.n	8004a3c <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	691b      	ldr	r3, [r3, #16]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d013      	beq.n	8004a50 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	3310      	adds	r3, #16
 8004a2c:	0018      	movs	r0, r3
 8004a2e:	f001 f89f 	bl	8005b70 <xTaskRemoveFromEventList>
 8004a32:	1e03      	subs	r3, r0, #0
 8004a34:	d00c      	beq.n	8004a50 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004a36:	f001 fe5b 	bl	80066f0 <vPortYield>
 8004a3a:	e009      	b.n	8004a50 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	3310      	adds	r3, #16
 8004a40:	0018      	movs	r0, r3
 8004a42:	f7ff ff0f 	bl	8004864 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	3324      	adds	r3, #36	; 0x24
 8004a4a:	0018      	movs	r0, r3
 8004a4c:	f7ff ff0a 	bl	8004864 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004a50:	f001 fe70 	bl	8006734 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004a54:	2301      	movs	r3, #1
}
 8004a56:	0018      	movs	r0, r3
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	b004      	add	sp, #16
 8004a5c:	bd80      	pop	{r7, pc}

08004a5e <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004a5e:	b590      	push	{r4, r7, lr}
 8004a60:	b089      	sub	sp, #36	; 0x24
 8004a62:	af02      	add	r7, sp, #8
 8004a64:	60f8      	str	r0, [r7, #12]
 8004a66:	60b9      	str	r1, [r7, #8]
 8004a68:	607a      	str	r2, [r7, #4]
 8004a6a:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d101      	bne.n	8004a76 <xQueueGenericCreateStatic+0x18>
 8004a72:	b672      	cpsid	i
 8004a74:	e7fe      	b.n	8004a74 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d101      	bne.n	8004a80 <xQueueGenericCreateStatic+0x22>
 8004a7c:	b672      	cpsid	i
 8004a7e:	e7fe      	b.n	8004a7e <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d002      	beq.n	8004a8c <xQueueGenericCreateStatic+0x2e>
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d001      	beq.n	8004a90 <xQueueGenericCreateStatic+0x32>
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e000      	b.n	8004a92 <xQueueGenericCreateStatic+0x34>
 8004a90:	2300      	movs	r3, #0
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d101      	bne.n	8004a9a <xQueueGenericCreateStatic+0x3c>
 8004a96:	b672      	cpsid	i
 8004a98:	e7fe      	b.n	8004a98 <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d102      	bne.n	8004aa6 <xQueueGenericCreateStatic+0x48>
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d101      	bne.n	8004aaa <xQueueGenericCreateStatic+0x4c>
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e000      	b.n	8004aac <xQueueGenericCreateStatic+0x4e>
 8004aaa:	2300      	movs	r3, #0
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d101      	bne.n	8004ab4 <xQueueGenericCreateStatic+0x56>
 8004ab0:	b672      	cpsid	i
 8004ab2:	e7fe      	b.n	8004ab2 <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004ab4:	2350      	movs	r3, #80	; 0x50
 8004ab6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	2b50      	cmp	r3, #80	; 0x50
 8004abc:	d001      	beq.n	8004ac2 <xQueueGenericCreateStatic+0x64>
 8004abe:	b672      	cpsid	i
 8004ac0:	e7fe      	b.n	8004ac0 <xQueueGenericCreateStatic+0x62>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d00e      	beq.n	8004aea <xQueueGenericCreateStatic+0x8c>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	2246      	movs	r2, #70	; 0x46
 8004ad0:	2101      	movs	r1, #1
 8004ad2:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004ad4:	2328      	movs	r3, #40	; 0x28
 8004ad6:	18fb      	adds	r3, r7, r3
 8004ad8:	781c      	ldrb	r4, [r3, #0]
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	68b9      	ldr	r1, [r7, #8]
 8004ade:	68f8      	ldr	r0, [r7, #12]
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	9300      	str	r3, [sp, #0]
 8004ae4:	0023      	movs	r3, r4
 8004ae6:	f000 f83b 	bl	8004b60 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004aea:	697b      	ldr	r3, [r7, #20]
	}
 8004aec:	0018      	movs	r0, r3
 8004aee:	46bd      	mov	sp, r7
 8004af0:	b007      	add	sp, #28
 8004af2:	bd90      	pop	{r4, r7, pc}

08004af4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004af4:	b590      	push	{r4, r7, lr}
 8004af6:	b08b      	sub	sp, #44	; 0x2c
 8004af8:	af02      	add	r7, sp, #8
 8004afa:	60f8      	str	r0, [r7, #12]
 8004afc:	60b9      	str	r1, [r7, #8]
 8004afe:	1dfb      	adds	r3, r7, #7
 8004b00:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d101      	bne.n	8004b0c <xQueueGenericCreate+0x18>
 8004b08:	b672      	cpsid	i
 8004b0a:	e7fe      	b.n	8004b0a <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d102      	bne.n	8004b18 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004b12:	2300      	movs	r3, #0
 8004b14:	61fb      	str	r3, [r7, #28]
 8004b16:	e003      	b.n	8004b20 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	68ba      	ldr	r2, [r7, #8]
 8004b1c:	4353      	muls	r3, r2
 8004b1e:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8004b20:	69fb      	ldr	r3, [r7, #28]
 8004b22:	3350      	adds	r3, #80	; 0x50
 8004b24:	0018      	movs	r0, r3
 8004b26:	f001 fe8b 	bl	8006840 <pvPortMalloc>
 8004b2a:	0003      	movs	r3, r0
 8004b2c:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 8004b2e:	69bb      	ldr	r3, [r7, #24]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d010      	beq.n	8004b56 <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8004b34:	69bb      	ldr	r3, [r7, #24]
 8004b36:	3350      	adds	r3, #80	; 0x50
 8004b38:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004b3a:	69bb      	ldr	r3, [r7, #24]
 8004b3c:	2246      	movs	r2, #70	; 0x46
 8004b3e:	2100      	movs	r1, #0
 8004b40:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004b42:	1dfb      	adds	r3, r7, #7
 8004b44:	781c      	ldrb	r4, [r3, #0]
 8004b46:	697a      	ldr	r2, [r7, #20]
 8004b48:	68b9      	ldr	r1, [r7, #8]
 8004b4a:	68f8      	ldr	r0, [r7, #12]
 8004b4c:	69bb      	ldr	r3, [r7, #24]
 8004b4e:	9300      	str	r3, [sp, #0]
 8004b50:	0023      	movs	r3, r4
 8004b52:	f000 f805 	bl	8004b60 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004b56:	69bb      	ldr	r3, [r7, #24]
	}
 8004b58:	0018      	movs	r0, r3
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	b009      	add	sp, #36	; 0x24
 8004b5e:	bd90      	pop	{r4, r7, pc}

08004b60 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b084      	sub	sp, #16
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	60f8      	str	r0, [r7, #12]
 8004b68:	60b9      	str	r1, [r7, #8]
 8004b6a:	607a      	str	r2, [r7, #4]
 8004b6c:	001a      	movs	r2, r3
 8004b6e:	1cfb      	adds	r3, r7, #3
 8004b70:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d103      	bne.n	8004b80 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004b78:	69bb      	ldr	r3, [r7, #24]
 8004b7a:	69ba      	ldr	r2, [r7, #24]
 8004b7c:	601a      	str	r2, [r3, #0]
 8004b7e:	e002      	b.n	8004b86 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004b80:	69bb      	ldr	r3, [r7, #24]
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004b86:	69bb      	ldr	r3, [r7, #24]
 8004b88:	68fa      	ldr	r2, [r7, #12]
 8004b8a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004b8c:	69bb      	ldr	r3, [r7, #24]
 8004b8e:	68ba      	ldr	r2, [r7, #8]
 8004b90:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004b92:	69bb      	ldr	r3, [r7, #24]
 8004b94:	2101      	movs	r1, #1
 8004b96:	0018      	movs	r0, r3
 8004b98:	f7ff ff0d 	bl	80049b6 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004b9c:	69bb      	ldr	r3, [r7, #24]
 8004b9e:	1cfa      	adds	r2, r7, #3
 8004ba0:	214c      	movs	r1, #76	; 0x4c
 8004ba2:	7812      	ldrb	r2, [r2, #0]
 8004ba4:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004ba6:	46c0      	nop			; (mov r8, r8)
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	b004      	add	sp, #16
 8004bac:	bd80      	pop	{r7, pc}

08004bae <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004bae:	b580      	push	{r7, lr}
 8004bb0:	b082      	sub	sp, #8
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d00e      	beq.n	8004bda <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	2100      	movs	r1, #0
 8004bd6:	f000 f820 	bl	8004c1a <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004bda:	46c0      	nop			; (mov r8, r8)
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	b002      	add	sp, #8
 8004be0:	bd80      	pop	{r7, pc}

08004be2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004be2:	b580      	push	{r7, lr}
 8004be4:	b086      	sub	sp, #24
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	0002      	movs	r2, r0
 8004bea:	1dfb      	adds	r3, r7, #7
 8004bec:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	617b      	str	r3, [r7, #20]
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004bf6:	1dfb      	adds	r3, r7, #7
 8004bf8:	781a      	ldrb	r2, [r3, #0]
 8004bfa:	6939      	ldr	r1, [r7, #16]
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	0018      	movs	r0, r3
 8004c00:	f7ff ff78 	bl	8004af4 <xQueueGenericCreate>
 8004c04:	0003      	movs	r3, r0
 8004c06:	60fb      	str	r3, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	0018      	movs	r0, r3
 8004c0c:	f7ff ffcf 	bl	8004bae <prvInitialiseMutex>

		return pxNewQueue;
 8004c10:	68fb      	ldr	r3, [r7, #12]
	}
 8004c12:	0018      	movs	r0, r3
 8004c14:	46bd      	mov	sp, r7
 8004c16:	b006      	add	sp, #24
 8004c18:	bd80      	pop	{r7, pc}

08004c1a <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004c1a:	b580      	push	{r7, lr}
 8004c1c:	b08a      	sub	sp, #40	; 0x28
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	60f8      	str	r0, [r7, #12]
 8004c22:	60b9      	str	r1, [r7, #8]
 8004c24:	607a      	str	r2, [r7, #4]
 8004c26:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8004c30:	6a3b      	ldr	r3, [r7, #32]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d101      	bne.n	8004c3a <xQueueGenericSend+0x20>
 8004c36:	b672      	cpsid	i
 8004c38:	e7fe      	b.n	8004c38 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d103      	bne.n	8004c48 <xQueueGenericSend+0x2e>
 8004c40:	6a3b      	ldr	r3, [r7, #32]
 8004c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d101      	bne.n	8004c4c <xQueueGenericSend+0x32>
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e000      	b.n	8004c4e <xQueueGenericSend+0x34>
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d101      	bne.n	8004c56 <xQueueGenericSend+0x3c>
 8004c52:	b672      	cpsid	i
 8004c54:	e7fe      	b.n	8004c54 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	2b02      	cmp	r3, #2
 8004c5a:	d103      	bne.n	8004c64 <xQueueGenericSend+0x4a>
 8004c5c:	6a3b      	ldr	r3, [r7, #32]
 8004c5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d101      	bne.n	8004c68 <xQueueGenericSend+0x4e>
 8004c64:	2301      	movs	r3, #1
 8004c66:	e000      	b.n	8004c6a <xQueueGenericSend+0x50>
 8004c68:	2300      	movs	r3, #0
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d101      	bne.n	8004c72 <xQueueGenericSend+0x58>
 8004c6e:	b672      	cpsid	i
 8004c70:	e7fe      	b.n	8004c70 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c72:	f001 f915 	bl	8005ea0 <xTaskGetSchedulerState>
 8004c76:	1e03      	subs	r3, r0, #0
 8004c78:	d102      	bne.n	8004c80 <xQueueGenericSend+0x66>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d101      	bne.n	8004c84 <xQueueGenericSend+0x6a>
 8004c80:	2301      	movs	r3, #1
 8004c82:	e000      	b.n	8004c86 <xQueueGenericSend+0x6c>
 8004c84:	2300      	movs	r3, #0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d101      	bne.n	8004c8e <xQueueGenericSend+0x74>
 8004c8a:	b672      	cpsid	i
 8004c8c:	e7fe      	b.n	8004c8c <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004c8e:	f001 fd3f 	bl	8006710 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004c92:	6a3b      	ldr	r3, [r7, #32]
 8004c94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c96:	6a3b      	ldr	r3, [r7, #32]
 8004c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d302      	bcc.n	8004ca4 <xQueueGenericSend+0x8a>
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	2b02      	cmp	r3, #2
 8004ca2:	d11e      	bne.n	8004ce2 <xQueueGenericSend+0xc8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004ca4:	683a      	ldr	r2, [r7, #0]
 8004ca6:	68b9      	ldr	r1, [r7, #8]
 8004ca8:	6a3b      	ldr	r3, [r7, #32]
 8004caa:	0018      	movs	r0, r3
 8004cac:	f000 fa04 	bl	80050b8 <prvCopyDataToQueue>
 8004cb0:	0003      	movs	r3, r0
 8004cb2:	61fb      	str	r3, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004cb4:	6a3b      	ldr	r3, [r7, #32]
 8004cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d009      	beq.n	8004cd0 <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004cbc:	6a3b      	ldr	r3, [r7, #32]
 8004cbe:	3324      	adds	r3, #36	; 0x24
 8004cc0:	0018      	movs	r0, r3
 8004cc2:	f000 ff55 	bl	8005b70 <xTaskRemoveFromEventList>
 8004cc6:	1e03      	subs	r3, r0, #0
 8004cc8:	d007      	beq.n	8004cda <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004cca:	f001 fd11 	bl	80066f0 <vPortYield>
 8004cce:	e004      	b.n	8004cda <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004cd0:	69fb      	ldr	r3, [r7, #28]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d001      	beq.n	8004cda <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004cd6:	f001 fd0b 	bl	80066f0 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004cda:	f001 fd2b 	bl	8006734 <vPortExitCritical>
				return pdPASS;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e05b      	b.n	8004d9a <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d103      	bne.n	8004cf0 <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004ce8:	f001 fd24 	bl	8006734 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004cec:	2300      	movs	r3, #0
 8004cee:	e054      	b.n	8004d9a <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d106      	bne.n	8004d04 <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004cf6:	2314      	movs	r3, #20
 8004cf8:	18fb      	adds	r3, r7, r3
 8004cfa:	0018      	movs	r0, r3
 8004cfc:	f000 ff94 	bl	8005c28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004d00:	2301      	movs	r3, #1
 8004d02:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004d04:	f001 fd16 	bl	8006734 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004d08:	f000 fd42 	bl	8005790 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004d0c:	f001 fd00 	bl	8006710 <vPortEnterCritical>
 8004d10:	6a3b      	ldr	r3, [r7, #32]
 8004d12:	2244      	movs	r2, #68	; 0x44
 8004d14:	5c9b      	ldrb	r3, [r3, r2]
 8004d16:	b25b      	sxtb	r3, r3
 8004d18:	3301      	adds	r3, #1
 8004d1a:	d103      	bne.n	8004d24 <xQueueGenericSend+0x10a>
 8004d1c:	6a3b      	ldr	r3, [r7, #32]
 8004d1e:	2244      	movs	r2, #68	; 0x44
 8004d20:	2100      	movs	r1, #0
 8004d22:	5499      	strb	r1, [r3, r2]
 8004d24:	6a3b      	ldr	r3, [r7, #32]
 8004d26:	2245      	movs	r2, #69	; 0x45
 8004d28:	5c9b      	ldrb	r3, [r3, r2]
 8004d2a:	b25b      	sxtb	r3, r3
 8004d2c:	3301      	adds	r3, #1
 8004d2e:	d103      	bne.n	8004d38 <xQueueGenericSend+0x11e>
 8004d30:	6a3b      	ldr	r3, [r7, #32]
 8004d32:	2245      	movs	r2, #69	; 0x45
 8004d34:	2100      	movs	r1, #0
 8004d36:	5499      	strb	r1, [r3, r2]
 8004d38:	f001 fcfc 	bl	8006734 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004d3c:	1d3a      	adds	r2, r7, #4
 8004d3e:	2314      	movs	r3, #20
 8004d40:	18fb      	adds	r3, r7, r3
 8004d42:	0011      	movs	r1, r2
 8004d44:	0018      	movs	r0, r3
 8004d46:	f000 ff83 	bl	8005c50 <xTaskCheckForTimeOut>
 8004d4a:	1e03      	subs	r3, r0, #0
 8004d4c:	d11e      	bne.n	8004d8c <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004d4e:	6a3b      	ldr	r3, [r7, #32]
 8004d50:	0018      	movs	r0, r3
 8004d52:	f000 fab6 	bl	80052c2 <prvIsQueueFull>
 8004d56:	1e03      	subs	r3, r0, #0
 8004d58:	d011      	beq.n	8004d7e <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004d5a:	6a3b      	ldr	r3, [r7, #32]
 8004d5c:	3310      	adds	r3, #16
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	0011      	movs	r1, r2
 8004d62:	0018      	movs	r0, r3
 8004d64:	f000 fec0 	bl	8005ae8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004d68:	6a3b      	ldr	r3, [r7, #32]
 8004d6a:	0018      	movs	r0, r3
 8004d6c:	f000 fa35 	bl	80051da <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004d70:	f000 fd1a 	bl	80057a8 <xTaskResumeAll>
 8004d74:	1e03      	subs	r3, r0, #0
 8004d76:	d18a      	bne.n	8004c8e <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 8004d78:	f001 fcba 	bl	80066f0 <vPortYield>
 8004d7c:	e787      	b.n	8004c8e <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004d7e:	6a3b      	ldr	r3, [r7, #32]
 8004d80:	0018      	movs	r0, r3
 8004d82:	f000 fa2a 	bl	80051da <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004d86:	f000 fd0f 	bl	80057a8 <xTaskResumeAll>
 8004d8a:	e780      	b.n	8004c8e <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004d8c:	6a3b      	ldr	r3, [r7, #32]
 8004d8e:	0018      	movs	r0, r3
 8004d90:	f000 fa23 	bl	80051da <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004d94:	f000 fd08 	bl	80057a8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004d98:	2300      	movs	r3, #0
		}
	}
}
 8004d9a:	0018      	movs	r0, r3
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	b00a      	add	sp, #40	; 0x28
 8004da0:	bd80      	pop	{r7, pc}

08004da2 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004da2:	b590      	push	{r4, r7, lr}
 8004da4:	b089      	sub	sp, #36	; 0x24
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	60f8      	str	r0, [r7, #12]
 8004daa:	60b9      	str	r1, [r7, #8]
 8004dac:	607a      	str	r2, [r7, #4]
 8004dae:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 8004db4:	69bb      	ldr	r3, [r7, #24]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d101      	bne.n	8004dbe <xQueueGenericSendFromISR+0x1c>
 8004dba:	b672      	cpsid	i
 8004dbc:	e7fe      	b.n	8004dbc <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d103      	bne.n	8004dcc <xQueueGenericSendFromISR+0x2a>
 8004dc4:	69bb      	ldr	r3, [r7, #24]
 8004dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d101      	bne.n	8004dd0 <xQueueGenericSendFromISR+0x2e>
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e000      	b.n	8004dd2 <xQueueGenericSendFromISR+0x30>
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d101      	bne.n	8004dda <xQueueGenericSendFromISR+0x38>
 8004dd6:	b672      	cpsid	i
 8004dd8:	e7fe      	b.n	8004dd8 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	2b02      	cmp	r3, #2
 8004dde:	d103      	bne.n	8004de8 <xQueueGenericSendFromISR+0x46>
 8004de0:	69bb      	ldr	r3, [r7, #24]
 8004de2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	d101      	bne.n	8004dec <xQueueGenericSendFromISR+0x4a>
 8004de8:	2301      	movs	r3, #1
 8004dea:	e000      	b.n	8004dee <xQueueGenericSendFromISR+0x4c>
 8004dec:	2300      	movs	r3, #0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d101      	bne.n	8004df6 <xQueueGenericSendFromISR+0x54>
 8004df2:	b672      	cpsid	i
 8004df4:	e7fe      	b.n	8004df4 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004df6:	f001 fcb5 	bl	8006764 <ulSetInterruptMaskFromISR>
 8004dfa:	0003      	movs	r3, r0
 8004dfc:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004dfe:	69bb      	ldr	r3, [r7, #24]
 8004e00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e02:	69bb      	ldr	r3, [r7, #24]
 8004e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d302      	bcc.n	8004e10 <xQueueGenericSendFromISR+0x6e>
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	2b02      	cmp	r3, #2
 8004e0e:	d12e      	bne.n	8004e6e <xQueueGenericSendFromISR+0xcc>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004e10:	2413      	movs	r4, #19
 8004e12:	193b      	adds	r3, r7, r4
 8004e14:	69ba      	ldr	r2, [r7, #24]
 8004e16:	2145      	movs	r1, #69	; 0x45
 8004e18:	5c52      	ldrb	r2, [r2, r1]
 8004e1a:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004e1c:	683a      	ldr	r2, [r7, #0]
 8004e1e:	68b9      	ldr	r1, [r7, #8]
 8004e20:	69bb      	ldr	r3, [r7, #24]
 8004e22:	0018      	movs	r0, r3
 8004e24:	f000 f948 	bl	80050b8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004e28:	193b      	adds	r3, r7, r4
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	b25b      	sxtb	r3, r3
 8004e2e:	3301      	adds	r3, #1
 8004e30:	d111      	bne.n	8004e56 <xQueueGenericSendFromISR+0xb4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e32:	69bb      	ldr	r3, [r7, #24]
 8004e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d016      	beq.n	8004e68 <xQueueGenericSendFromISR+0xc6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e3a:	69bb      	ldr	r3, [r7, #24]
 8004e3c:	3324      	adds	r3, #36	; 0x24
 8004e3e:	0018      	movs	r0, r3
 8004e40:	f000 fe96 	bl	8005b70 <xTaskRemoveFromEventList>
 8004e44:	1e03      	subs	r3, r0, #0
 8004e46:	d00f      	beq.n	8004e68 <xQueueGenericSendFromISR+0xc6>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d00c      	beq.n	8004e68 <xQueueGenericSendFromISR+0xc6>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2201      	movs	r2, #1
 8004e52:	601a      	str	r2, [r3, #0]
 8004e54:	e008      	b.n	8004e68 <xQueueGenericSendFromISR+0xc6>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004e56:	2313      	movs	r3, #19
 8004e58:	18fb      	adds	r3, r7, r3
 8004e5a:	781b      	ldrb	r3, [r3, #0]
 8004e5c:	3301      	adds	r3, #1
 8004e5e:	b2db      	uxtb	r3, r3
 8004e60:	b259      	sxtb	r1, r3
 8004e62:	69bb      	ldr	r3, [r7, #24]
 8004e64:	2245      	movs	r2, #69	; 0x45
 8004e66:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	61fb      	str	r3, [r7, #28]
		{
 8004e6c:	e001      	b.n	8004e72 <xQueueGenericSendFromISR+0xd0>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	0018      	movs	r0, r3
 8004e76:	f001 fc7b 	bl	8006770 <vClearInterruptMaskFromISR>

	return xReturn;
 8004e7a:	69fb      	ldr	r3, [r7, #28]
}
 8004e7c:	0018      	movs	r0, r3
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	b009      	add	sp, #36	; 0x24
 8004e82:	bd90      	pop	{r4, r7, pc}

08004e84 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b088      	sub	sp, #32
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	61bb      	str	r3, [r7, #24]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8004e92:	69bb      	ldr	r3, [r7, #24]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d101      	bne.n	8004e9c <xQueueGiveFromISR+0x18>
 8004e98:	b672      	cpsid	i
 8004e9a:	e7fe      	b.n	8004e9a <xQueueGiveFromISR+0x16>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004e9c:	69bb      	ldr	r3, [r7, #24]
 8004e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d001      	beq.n	8004ea8 <xQueueGiveFromISR+0x24>
 8004ea4:	b672      	cpsid	i
 8004ea6:	e7fe      	b.n	8004ea6 <xQueueGiveFromISR+0x22>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8004ea8:	69bb      	ldr	r3, [r7, #24]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d103      	bne.n	8004eb8 <xQueueGiveFromISR+0x34>
 8004eb0:	69bb      	ldr	r3, [r7, #24]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d101      	bne.n	8004ebc <xQueueGiveFromISR+0x38>
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e000      	b.n	8004ebe <xQueueGiveFromISR+0x3a>
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d101      	bne.n	8004ec6 <xQueueGiveFromISR+0x42>
 8004ec2:	b672      	cpsid	i
 8004ec4:	e7fe      	b.n	8004ec4 <xQueueGiveFromISR+0x40>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004ec6:	f001 fc4d 	bl	8006764 <ulSetInterruptMaskFromISR>
 8004eca:	0003      	movs	r3, r0
 8004ecc:	617b      	str	r3, [r7, #20]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ece:	69bb      	ldr	r3, [r7, #24]
 8004ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed2:	613b      	str	r3, [r7, #16]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004ed4:	69bb      	ldr	r3, [r7, #24]
 8004ed6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ed8:	693a      	ldr	r2, [r7, #16]
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d22c      	bcs.n	8004f38 <xQueueGiveFromISR+0xb4>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004ede:	200f      	movs	r0, #15
 8004ee0:	183b      	adds	r3, r7, r0
 8004ee2:	69ba      	ldr	r2, [r7, #24]
 8004ee4:	2145      	movs	r1, #69	; 0x45
 8004ee6:	5c52      	ldrb	r2, [r2, r1]
 8004ee8:	701a      	strb	r2, [r3, #0]
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	1c5a      	adds	r2, r3, #1
 8004eee:	69bb      	ldr	r3, [r7, #24]
 8004ef0:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004ef2:	183b      	adds	r3, r7, r0
 8004ef4:	781b      	ldrb	r3, [r3, #0]
 8004ef6:	b25b      	sxtb	r3, r3
 8004ef8:	3301      	adds	r3, #1
 8004efa:	d111      	bne.n	8004f20 <xQueueGiveFromISR+0x9c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004efc:	69bb      	ldr	r3, [r7, #24]
 8004efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d016      	beq.n	8004f32 <xQueueGiveFromISR+0xae>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f04:	69bb      	ldr	r3, [r7, #24]
 8004f06:	3324      	adds	r3, #36	; 0x24
 8004f08:	0018      	movs	r0, r3
 8004f0a:	f000 fe31 	bl	8005b70 <xTaskRemoveFromEventList>
 8004f0e:	1e03      	subs	r3, r0, #0
 8004f10:	d00f      	beq.n	8004f32 <xQueueGiveFromISR+0xae>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d00c      	beq.n	8004f32 <xQueueGiveFromISR+0xae>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	601a      	str	r2, [r3, #0]
 8004f1e:	e008      	b.n	8004f32 <xQueueGiveFromISR+0xae>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004f20:	230f      	movs	r3, #15
 8004f22:	18fb      	adds	r3, r7, r3
 8004f24:	781b      	ldrb	r3, [r3, #0]
 8004f26:	3301      	adds	r3, #1
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	b259      	sxtb	r1, r3
 8004f2c:	69bb      	ldr	r3, [r7, #24]
 8004f2e:	2245      	movs	r2, #69	; 0x45
 8004f30:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8004f32:	2301      	movs	r3, #1
 8004f34:	61fb      	str	r3, [r7, #28]
 8004f36:	e001      	b.n	8004f3c <xQueueGiveFromISR+0xb8>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	0018      	movs	r0, r3
 8004f40:	f001 fc16 	bl	8006770 <vClearInterruptMaskFromISR>

	return xReturn;
 8004f44:	69fb      	ldr	r3, [r7, #28]
}
 8004f46:	0018      	movs	r0, r3
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	b008      	add	sp, #32
 8004f4c:	bd80      	pop	{r7, pc}

08004f4e <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004f4e:	b580      	push	{r7, lr}
 8004f50:	b08a      	sub	sp, #40	; 0x28
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	60f8      	str	r0, [r7, #12]
 8004f56:	60b9      	str	r1, [r7, #8]
 8004f58:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004f62:	6a3b      	ldr	r3, [r7, #32]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d101      	bne.n	8004f6c <xQueueReceive+0x1e>
 8004f68:	b672      	cpsid	i
 8004f6a:	e7fe      	b.n	8004f6a <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d103      	bne.n	8004f7a <xQueueReceive+0x2c>
 8004f72:	6a3b      	ldr	r3, [r7, #32]
 8004f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d101      	bne.n	8004f7e <xQueueReceive+0x30>
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e000      	b.n	8004f80 <xQueueReceive+0x32>
 8004f7e:	2300      	movs	r3, #0
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d101      	bne.n	8004f88 <xQueueReceive+0x3a>
 8004f84:	b672      	cpsid	i
 8004f86:	e7fe      	b.n	8004f86 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004f88:	f000 ff8a 	bl	8005ea0 <xTaskGetSchedulerState>
 8004f8c:	1e03      	subs	r3, r0, #0
 8004f8e:	d102      	bne.n	8004f96 <xQueueReceive+0x48>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d101      	bne.n	8004f9a <xQueueReceive+0x4c>
 8004f96:	2301      	movs	r3, #1
 8004f98:	e000      	b.n	8004f9c <xQueueReceive+0x4e>
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d101      	bne.n	8004fa4 <xQueueReceive+0x56>
 8004fa0:	b672      	cpsid	i
 8004fa2:	e7fe      	b.n	8004fa2 <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004fa4:	f001 fbb4 	bl	8006710 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004fa8:	6a3b      	ldr	r3, [r7, #32]
 8004faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fac:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004fae:	69fb      	ldr	r3, [r7, #28]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d01a      	beq.n	8004fea <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004fb4:	68ba      	ldr	r2, [r7, #8]
 8004fb6:	6a3b      	ldr	r3, [r7, #32]
 8004fb8:	0011      	movs	r1, r2
 8004fba:	0018      	movs	r0, r3
 8004fbc:	f000 f8e7 	bl	800518e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	1e5a      	subs	r2, r3, #1
 8004fc4:	6a3b      	ldr	r3, [r7, #32]
 8004fc6:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004fc8:	6a3b      	ldr	r3, [r7, #32]
 8004fca:	691b      	ldr	r3, [r3, #16]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d008      	beq.n	8004fe2 <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004fd0:	6a3b      	ldr	r3, [r7, #32]
 8004fd2:	3310      	adds	r3, #16
 8004fd4:	0018      	movs	r0, r3
 8004fd6:	f000 fdcb 	bl	8005b70 <xTaskRemoveFromEventList>
 8004fda:	1e03      	subs	r3, r0, #0
 8004fdc:	d001      	beq.n	8004fe2 <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004fde:	f001 fb87 	bl	80066f0 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004fe2:	f001 fba7 	bl	8006734 <vPortExitCritical>
				return pdPASS;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e062      	b.n	80050b0 <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d103      	bne.n	8004ff8 <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004ff0:	f001 fba0 	bl	8006734 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	e05b      	b.n	80050b0 <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d106      	bne.n	800500c <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004ffe:	2314      	movs	r3, #20
 8005000:	18fb      	adds	r3, r7, r3
 8005002:	0018      	movs	r0, r3
 8005004:	f000 fe10 	bl	8005c28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005008:	2301      	movs	r3, #1
 800500a:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800500c:	f001 fb92 	bl	8006734 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005010:	f000 fbbe 	bl	8005790 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005014:	f001 fb7c 	bl	8006710 <vPortEnterCritical>
 8005018:	6a3b      	ldr	r3, [r7, #32]
 800501a:	2244      	movs	r2, #68	; 0x44
 800501c:	5c9b      	ldrb	r3, [r3, r2]
 800501e:	b25b      	sxtb	r3, r3
 8005020:	3301      	adds	r3, #1
 8005022:	d103      	bne.n	800502c <xQueueReceive+0xde>
 8005024:	6a3b      	ldr	r3, [r7, #32]
 8005026:	2244      	movs	r2, #68	; 0x44
 8005028:	2100      	movs	r1, #0
 800502a:	5499      	strb	r1, [r3, r2]
 800502c:	6a3b      	ldr	r3, [r7, #32]
 800502e:	2245      	movs	r2, #69	; 0x45
 8005030:	5c9b      	ldrb	r3, [r3, r2]
 8005032:	b25b      	sxtb	r3, r3
 8005034:	3301      	adds	r3, #1
 8005036:	d103      	bne.n	8005040 <xQueueReceive+0xf2>
 8005038:	6a3b      	ldr	r3, [r7, #32]
 800503a:	2245      	movs	r2, #69	; 0x45
 800503c:	2100      	movs	r1, #0
 800503e:	5499      	strb	r1, [r3, r2]
 8005040:	f001 fb78 	bl	8006734 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005044:	1d3a      	adds	r2, r7, #4
 8005046:	2314      	movs	r3, #20
 8005048:	18fb      	adds	r3, r7, r3
 800504a:	0011      	movs	r1, r2
 800504c:	0018      	movs	r0, r3
 800504e:	f000 fdff 	bl	8005c50 <xTaskCheckForTimeOut>
 8005052:	1e03      	subs	r3, r0, #0
 8005054:	d11e      	bne.n	8005094 <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005056:	6a3b      	ldr	r3, [r7, #32]
 8005058:	0018      	movs	r0, r3
 800505a:	f000 f91c 	bl	8005296 <prvIsQueueEmpty>
 800505e:	1e03      	subs	r3, r0, #0
 8005060:	d011      	beq.n	8005086 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005062:	6a3b      	ldr	r3, [r7, #32]
 8005064:	3324      	adds	r3, #36	; 0x24
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	0011      	movs	r1, r2
 800506a:	0018      	movs	r0, r3
 800506c:	f000 fd3c 	bl	8005ae8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005070:	6a3b      	ldr	r3, [r7, #32]
 8005072:	0018      	movs	r0, r3
 8005074:	f000 f8b1 	bl	80051da <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005078:	f000 fb96 	bl	80057a8 <xTaskResumeAll>
 800507c:	1e03      	subs	r3, r0, #0
 800507e:	d191      	bne.n	8004fa4 <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 8005080:	f001 fb36 	bl	80066f0 <vPortYield>
 8005084:	e78e      	b.n	8004fa4 <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005086:	6a3b      	ldr	r3, [r7, #32]
 8005088:	0018      	movs	r0, r3
 800508a:	f000 f8a6 	bl	80051da <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800508e:	f000 fb8b 	bl	80057a8 <xTaskResumeAll>
 8005092:	e787      	b.n	8004fa4 <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005094:	6a3b      	ldr	r3, [r7, #32]
 8005096:	0018      	movs	r0, r3
 8005098:	f000 f89f 	bl	80051da <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800509c:	f000 fb84 	bl	80057a8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80050a0:	6a3b      	ldr	r3, [r7, #32]
 80050a2:	0018      	movs	r0, r3
 80050a4:	f000 f8f7 	bl	8005296 <prvIsQueueEmpty>
 80050a8:	1e03      	subs	r3, r0, #0
 80050aa:	d100      	bne.n	80050ae <xQueueReceive+0x160>
 80050ac:	e77a      	b.n	8004fa4 <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80050ae:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80050b0:	0018      	movs	r0, r3
 80050b2:	46bd      	mov	sp, r7
 80050b4:	b00a      	add	sp, #40	; 0x28
 80050b6:	bd80      	pop	{r7, pc}

080050b8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b086      	sub	sp, #24
 80050bc:	af00      	add	r7, sp, #0
 80050be:	60f8      	str	r0, [r7, #12]
 80050c0:	60b9      	str	r1, [r7, #8]
 80050c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80050c4:	2300      	movs	r3, #0
 80050c6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050cc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d10e      	bne.n	80050f4 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d14e      	bne.n	800517c <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	0018      	movs	r0, r3
 80050e4:	f000 fef8 	bl	8005ed8 <xTaskPriorityDisinherit>
 80050e8:	0003      	movs	r3, r0
 80050ea:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2200      	movs	r2, #0
 80050f0:	605a      	str	r2, [r3, #4]
 80050f2:	e043      	b.n	800517c <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d119      	bne.n	800512e <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	6898      	ldr	r0, [r3, #8]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	0019      	movs	r1, r3
 8005106:	f001 fd65 	bl	8006bd4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	689a      	ldr	r2, [r3, #8]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005112:	18d2      	adds	r2, r2, r3
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	689a      	ldr	r2, [r3, #8]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	429a      	cmp	r2, r3
 8005122:	d32b      	bcc.n	800517c <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	609a      	str	r2, [r3, #8]
 800512c:	e026      	b.n	800517c <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	68d8      	ldr	r0, [r3, #12]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	0019      	movs	r1, r3
 800513a:	f001 fd4b 	bl	8006bd4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	68da      	ldr	r2, [r3, #12]
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005146:	425b      	negs	r3, r3
 8005148:	18d2      	adds	r2, r2, r3
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	68da      	ldr	r2, [r3, #12]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	429a      	cmp	r2, r3
 8005158:	d207      	bcs.n	800516a <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	685a      	ldr	r2, [r3, #4]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005162:	425b      	negs	r3, r3
 8005164:	18d2      	adds	r2, r2, r3
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2b02      	cmp	r3, #2
 800516e:	d105      	bne.n	800517c <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d002      	beq.n	800517c <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	3b01      	subs	r3, #1
 800517a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	1c5a      	adds	r2, r3, #1
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005184:	697b      	ldr	r3, [r7, #20]
}
 8005186:	0018      	movs	r0, r3
 8005188:	46bd      	mov	sp, r7
 800518a:	b006      	add	sp, #24
 800518c:	bd80      	pop	{r7, pc}

0800518e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800518e:	b580      	push	{r7, lr}
 8005190:	b082      	sub	sp, #8
 8005192:	af00      	add	r7, sp, #0
 8005194:	6078      	str	r0, [r7, #4]
 8005196:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519c:	2b00      	cmp	r3, #0
 800519e:	d018      	beq.n	80051d2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	68da      	ldr	r2, [r3, #12]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a8:	18d2      	adds	r2, r2, r3
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	68da      	ldr	r2, [r3, #12]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d303      	bcc.n	80051c2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	68d9      	ldr	r1, [r3, #12]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	0018      	movs	r0, r3
 80051ce:	f001 fd01 	bl	8006bd4 <memcpy>
	}
}
 80051d2:	46c0      	nop			; (mov r8, r8)
 80051d4:	46bd      	mov	sp, r7
 80051d6:	b002      	add	sp, #8
 80051d8:	bd80      	pop	{r7, pc}

080051da <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80051da:	b580      	push	{r7, lr}
 80051dc:	b084      	sub	sp, #16
 80051de:	af00      	add	r7, sp, #0
 80051e0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80051e2:	f001 fa95 	bl	8006710 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80051e6:	230f      	movs	r3, #15
 80051e8:	18fb      	adds	r3, r7, r3
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	2145      	movs	r1, #69	; 0x45
 80051ee:	5c52      	ldrb	r2, [r2, r1]
 80051f0:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80051f2:	e013      	b.n	800521c <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d016      	beq.n	800522a <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	3324      	adds	r3, #36	; 0x24
 8005200:	0018      	movs	r0, r3
 8005202:	f000 fcb5 	bl	8005b70 <xTaskRemoveFromEventList>
 8005206:	1e03      	subs	r3, r0, #0
 8005208:	d001      	beq.n	800520e <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800520a:	f000 fd71 	bl	8005cf0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800520e:	210f      	movs	r1, #15
 8005210:	187b      	adds	r3, r7, r1
 8005212:	781b      	ldrb	r3, [r3, #0]
 8005214:	3b01      	subs	r3, #1
 8005216:	b2da      	uxtb	r2, r3
 8005218:	187b      	adds	r3, r7, r1
 800521a:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800521c:	230f      	movs	r3, #15
 800521e:	18fb      	adds	r3, r7, r3
 8005220:	781b      	ldrb	r3, [r3, #0]
 8005222:	b25b      	sxtb	r3, r3
 8005224:	2b00      	cmp	r3, #0
 8005226:	dce5      	bgt.n	80051f4 <prvUnlockQueue+0x1a>
 8005228:	e000      	b.n	800522c <prvUnlockQueue+0x52>
					break;
 800522a:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2245      	movs	r2, #69	; 0x45
 8005230:	21ff      	movs	r1, #255	; 0xff
 8005232:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8005234:	f001 fa7e 	bl	8006734 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005238:	f001 fa6a 	bl	8006710 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800523c:	230e      	movs	r3, #14
 800523e:	18fb      	adds	r3, r7, r3
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	2144      	movs	r1, #68	; 0x44
 8005244:	5c52      	ldrb	r2, [r2, r1]
 8005246:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005248:	e013      	b.n	8005272 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	691b      	ldr	r3, [r3, #16]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d016      	beq.n	8005280 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	3310      	adds	r3, #16
 8005256:	0018      	movs	r0, r3
 8005258:	f000 fc8a 	bl	8005b70 <xTaskRemoveFromEventList>
 800525c:	1e03      	subs	r3, r0, #0
 800525e:	d001      	beq.n	8005264 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8005260:	f000 fd46 	bl	8005cf0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005264:	210e      	movs	r1, #14
 8005266:	187b      	adds	r3, r7, r1
 8005268:	781b      	ldrb	r3, [r3, #0]
 800526a:	3b01      	subs	r3, #1
 800526c:	b2da      	uxtb	r2, r3
 800526e:	187b      	adds	r3, r7, r1
 8005270:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005272:	230e      	movs	r3, #14
 8005274:	18fb      	adds	r3, r7, r3
 8005276:	781b      	ldrb	r3, [r3, #0]
 8005278:	b25b      	sxtb	r3, r3
 800527a:	2b00      	cmp	r3, #0
 800527c:	dce5      	bgt.n	800524a <prvUnlockQueue+0x70>
 800527e:	e000      	b.n	8005282 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8005280:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2244      	movs	r2, #68	; 0x44
 8005286:	21ff      	movs	r1, #255	; 0xff
 8005288:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 800528a:	f001 fa53 	bl	8006734 <vPortExitCritical>
}
 800528e:	46c0      	nop			; (mov r8, r8)
 8005290:	46bd      	mov	sp, r7
 8005292:	b004      	add	sp, #16
 8005294:	bd80      	pop	{r7, pc}

08005296 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005296:	b580      	push	{r7, lr}
 8005298:	b084      	sub	sp, #16
 800529a:	af00      	add	r7, sp, #0
 800529c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800529e:	f001 fa37 	bl	8006710 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d102      	bne.n	80052b0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80052aa:	2301      	movs	r3, #1
 80052ac:	60fb      	str	r3, [r7, #12]
 80052ae:	e001      	b.n	80052b4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80052b0:	2300      	movs	r3, #0
 80052b2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80052b4:	f001 fa3e 	bl	8006734 <vPortExitCritical>

	return xReturn;
 80052b8:	68fb      	ldr	r3, [r7, #12]
}
 80052ba:	0018      	movs	r0, r3
 80052bc:	46bd      	mov	sp, r7
 80052be:	b004      	add	sp, #16
 80052c0:	bd80      	pop	{r7, pc}

080052c2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80052c2:	b580      	push	{r7, lr}
 80052c4:	b084      	sub	sp, #16
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80052ca:	f001 fa21 	bl	8006710 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d102      	bne.n	80052e0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80052da:	2301      	movs	r3, #1
 80052dc:	60fb      	str	r3, [r7, #12]
 80052de:	e001      	b.n	80052e4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80052e0:	2300      	movs	r3, #0
 80052e2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80052e4:	f001 fa26 	bl	8006734 <vPortExitCritical>

	return xReturn;
 80052e8:	68fb      	ldr	r3, [r7, #12]
}
 80052ea:	0018      	movs	r0, r3
 80052ec:	46bd      	mov	sp, r7
 80052ee:	b004      	add	sp, #16
 80052f0:	bd80      	pop	{r7, pc}
	...

080052f4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80052fe:	2300      	movs	r3, #0
 8005300:	60fb      	str	r3, [r7, #12]
 8005302:	e015      	b.n	8005330 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005304:	4b0e      	ldr	r3, [pc, #56]	; (8005340 <vQueueAddToRegistry+0x4c>)
 8005306:	68fa      	ldr	r2, [r7, #12]
 8005308:	00d2      	lsls	r2, r2, #3
 800530a:	58d3      	ldr	r3, [r2, r3]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d10c      	bne.n	800532a <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005310:	4b0b      	ldr	r3, [pc, #44]	; (8005340 <vQueueAddToRegistry+0x4c>)
 8005312:	68fa      	ldr	r2, [r7, #12]
 8005314:	00d2      	lsls	r2, r2, #3
 8005316:	6839      	ldr	r1, [r7, #0]
 8005318:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800531a:	4a09      	ldr	r2, [pc, #36]	; (8005340 <vQueueAddToRegistry+0x4c>)
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	00db      	lsls	r3, r3, #3
 8005320:	18d3      	adds	r3, r2, r3
 8005322:	3304      	adds	r3, #4
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005328:	e006      	b.n	8005338 <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	3301      	adds	r3, #1
 800532e:	60fb      	str	r3, [r7, #12]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2b07      	cmp	r3, #7
 8005334:	d9e6      	bls.n	8005304 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005336:	46c0      	nop			; (mov r8, r8)
 8005338:	46c0      	nop			; (mov r8, r8)
 800533a:	46bd      	mov	sp, r7
 800533c:	b004      	add	sp, #16
 800533e:	bd80      	pop	{r7, pc}
 8005340:	20001b24 	.word	0x20001b24

08005344 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005344:	b580      	push	{r7, lr}
 8005346:	b086      	sub	sp, #24
 8005348:	af00      	add	r7, sp, #0
 800534a:	60f8      	str	r0, [r7, #12]
 800534c:	60b9      	str	r1, [r7, #8]
 800534e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005354:	f001 f9dc 	bl	8006710 <vPortEnterCritical>
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	2244      	movs	r2, #68	; 0x44
 800535c:	5c9b      	ldrb	r3, [r3, r2]
 800535e:	b25b      	sxtb	r3, r3
 8005360:	3301      	adds	r3, #1
 8005362:	d103      	bne.n	800536c <vQueueWaitForMessageRestricted+0x28>
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	2244      	movs	r2, #68	; 0x44
 8005368:	2100      	movs	r1, #0
 800536a:	5499      	strb	r1, [r3, r2]
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	2245      	movs	r2, #69	; 0x45
 8005370:	5c9b      	ldrb	r3, [r3, r2]
 8005372:	b25b      	sxtb	r3, r3
 8005374:	3301      	adds	r3, #1
 8005376:	d103      	bne.n	8005380 <vQueueWaitForMessageRestricted+0x3c>
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	2245      	movs	r2, #69	; 0x45
 800537c:	2100      	movs	r1, #0
 800537e:	5499      	strb	r1, [r3, r2]
 8005380:	f001 f9d8 	bl	8006734 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005388:	2b00      	cmp	r3, #0
 800538a:	d106      	bne.n	800539a <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	3324      	adds	r3, #36	; 0x24
 8005390:	687a      	ldr	r2, [r7, #4]
 8005392:	68b9      	ldr	r1, [r7, #8]
 8005394:	0018      	movs	r0, r3
 8005396:	f000 fbc5 	bl	8005b24 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	0018      	movs	r0, r3
 800539e:	f7ff ff1c 	bl	80051da <prvUnlockQueue>
	}
 80053a2:	46c0      	nop			; (mov r8, r8)
 80053a4:	46bd      	mov	sp, r7
 80053a6:	b006      	add	sp, #24
 80053a8:	bd80      	pop	{r7, pc}

080053aa <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80053aa:	b590      	push	{r4, r7, lr}
 80053ac:	b08d      	sub	sp, #52	; 0x34
 80053ae:	af04      	add	r7, sp, #16
 80053b0:	60f8      	str	r0, [r7, #12]
 80053b2:	60b9      	str	r1, [r7, #8]
 80053b4:	607a      	str	r2, [r7, #4]
 80053b6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80053b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d101      	bne.n	80053c2 <xTaskCreateStatic+0x18>
 80053be:	b672      	cpsid	i
 80053c0:	e7fe      	b.n	80053c0 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 80053c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d101      	bne.n	80053cc <xTaskCreateStatic+0x22>
 80053c8:	b672      	cpsid	i
 80053ca:	e7fe      	b.n	80053ca <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80053cc:	235c      	movs	r3, #92	; 0x5c
 80053ce:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	2b5c      	cmp	r3, #92	; 0x5c
 80053d4:	d001      	beq.n	80053da <xTaskCreateStatic+0x30>
 80053d6:	b672      	cpsid	i
 80053d8:	e7fe      	b.n	80053d8 <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80053da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d020      	beq.n	8005422 <xTaskCreateStatic+0x78>
 80053e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d01d      	beq.n	8005422 <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80053e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053e8:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80053ea:	69fb      	ldr	r3, [r7, #28]
 80053ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80053ee:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80053f0:	69fb      	ldr	r3, [r7, #28]
 80053f2:	2259      	movs	r2, #89	; 0x59
 80053f4:	2102      	movs	r1, #2
 80053f6:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80053f8:	683c      	ldr	r4, [r7, #0]
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	68b9      	ldr	r1, [r7, #8]
 80053fe:	68f8      	ldr	r0, [r7, #12]
 8005400:	2300      	movs	r3, #0
 8005402:	9303      	str	r3, [sp, #12]
 8005404:	69fb      	ldr	r3, [r7, #28]
 8005406:	9302      	str	r3, [sp, #8]
 8005408:	2318      	movs	r3, #24
 800540a:	18fb      	adds	r3, r7, r3
 800540c:	9301      	str	r3, [sp, #4]
 800540e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005410:	9300      	str	r3, [sp, #0]
 8005412:	0023      	movs	r3, r4
 8005414:	f000 f858 	bl	80054c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005418:	69fb      	ldr	r3, [r7, #28]
 800541a:	0018      	movs	r0, r3
 800541c:	f000 f8d6 	bl	80055cc <prvAddNewTaskToReadyList>
 8005420:	e001      	b.n	8005426 <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 8005422:	2300      	movs	r3, #0
 8005424:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005426:	69bb      	ldr	r3, [r7, #24]
	}
 8005428:	0018      	movs	r0, r3
 800542a:	46bd      	mov	sp, r7
 800542c:	b009      	add	sp, #36	; 0x24
 800542e:	bd90      	pop	{r4, r7, pc}

08005430 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005430:	b590      	push	{r4, r7, lr}
 8005432:	b08d      	sub	sp, #52	; 0x34
 8005434:	af04      	add	r7, sp, #16
 8005436:	60f8      	str	r0, [r7, #12]
 8005438:	60b9      	str	r1, [r7, #8]
 800543a:	603b      	str	r3, [r7, #0]
 800543c:	1dbb      	adds	r3, r7, #6
 800543e:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005440:	1dbb      	adds	r3, r7, #6
 8005442:	881b      	ldrh	r3, [r3, #0]
 8005444:	009b      	lsls	r3, r3, #2
 8005446:	0018      	movs	r0, r3
 8005448:	f001 f9fa 	bl	8006840 <pvPortMalloc>
 800544c:	0003      	movs	r3, r0
 800544e:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d010      	beq.n	8005478 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005456:	205c      	movs	r0, #92	; 0x5c
 8005458:	f001 f9f2 	bl	8006840 <pvPortMalloc>
 800545c:	0003      	movs	r3, r0
 800545e:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8005460:	69fb      	ldr	r3, [r7, #28]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d003      	beq.n	800546e <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005466:	69fb      	ldr	r3, [r7, #28]
 8005468:	697a      	ldr	r2, [r7, #20]
 800546a:	631a      	str	r2, [r3, #48]	; 0x30
 800546c:	e006      	b.n	800547c <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	0018      	movs	r0, r3
 8005472:	f001 fa8b 	bl	800698c <vPortFree>
 8005476:	e001      	b.n	800547c <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005478:	2300      	movs	r3, #0
 800547a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800547c:	69fb      	ldr	r3, [r7, #28]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d01a      	beq.n	80054b8 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005482:	69fb      	ldr	r3, [r7, #28]
 8005484:	2259      	movs	r2, #89	; 0x59
 8005486:	2100      	movs	r1, #0
 8005488:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800548a:	1dbb      	adds	r3, r7, #6
 800548c:	881a      	ldrh	r2, [r3, #0]
 800548e:	683c      	ldr	r4, [r7, #0]
 8005490:	68b9      	ldr	r1, [r7, #8]
 8005492:	68f8      	ldr	r0, [r7, #12]
 8005494:	2300      	movs	r3, #0
 8005496:	9303      	str	r3, [sp, #12]
 8005498:	69fb      	ldr	r3, [r7, #28]
 800549a:	9302      	str	r3, [sp, #8]
 800549c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800549e:	9301      	str	r3, [sp, #4]
 80054a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a2:	9300      	str	r3, [sp, #0]
 80054a4:	0023      	movs	r3, r4
 80054a6:	f000 f80f 	bl	80054c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80054aa:	69fb      	ldr	r3, [r7, #28]
 80054ac:	0018      	movs	r0, r3
 80054ae:	f000 f88d 	bl	80055cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80054b2:	2301      	movs	r3, #1
 80054b4:	61bb      	str	r3, [r7, #24]
 80054b6:	e002      	b.n	80054be <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80054b8:	2301      	movs	r3, #1
 80054ba:	425b      	negs	r3, r3
 80054bc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80054be:	69bb      	ldr	r3, [r7, #24]
	}
 80054c0:	0018      	movs	r0, r3
 80054c2:	46bd      	mov	sp, r7
 80054c4:	b009      	add	sp, #36	; 0x24
 80054c6:	bd90      	pop	{r4, r7, pc}

080054c8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b086      	sub	sp, #24
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	60f8      	str	r0, [r7, #12]
 80054d0:	60b9      	str	r1, [r7, #8]
 80054d2:	607a      	str	r2, [r7, #4]
 80054d4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80054d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054d8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	009b      	lsls	r3, r3, #2
 80054de:	001a      	movs	r2, r3
 80054e0:	21a5      	movs	r1, #165	; 0xa5
 80054e2:	f001 fb80 	bl	8006be6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80054e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	4936      	ldr	r1, [pc, #216]	; (80055c8 <prvInitialiseNewTask+0x100>)
 80054ee:	468c      	mov	ip, r1
 80054f0:	4463      	add	r3, ip
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	18d3      	adds	r3, r2, r3
 80054f6:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	2207      	movs	r2, #7
 80054fc:	4393      	bics	r3, r2
 80054fe:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	2207      	movs	r2, #7
 8005504:	4013      	ands	r3, r2
 8005506:	d001      	beq.n	800550c <prvInitialiseNewTask+0x44>
 8005508:	b672      	cpsid	i
 800550a:	e7fe      	b.n	800550a <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800550c:	2300      	movs	r3, #0
 800550e:	617b      	str	r3, [r7, #20]
 8005510:	e013      	b.n	800553a <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005512:	68ba      	ldr	r2, [r7, #8]
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	18d3      	adds	r3, r2, r3
 8005518:	7818      	ldrb	r0, [r3, #0]
 800551a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800551c:	2134      	movs	r1, #52	; 0x34
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	18d3      	adds	r3, r2, r3
 8005522:	185b      	adds	r3, r3, r1
 8005524:	1c02      	adds	r2, r0, #0
 8005526:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005528:	68ba      	ldr	r2, [r7, #8]
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	18d3      	adds	r3, r2, r3
 800552e:	781b      	ldrb	r3, [r3, #0]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d006      	beq.n	8005542 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	3301      	adds	r3, #1
 8005538:	617b      	str	r3, [r7, #20]
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	2b0f      	cmp	r3, #15
 800553e:	d9e8      	bls.n	8005512 <prvInitialiseNewTask+0x4a>
 8005540:	e000      	b.n	8005544 <prvInitialiseNewTask+0x7c>
		{
			break;
 8005542:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005546:	2243      	movs	r2, #67	; 0x43
 8005548:	2100      	movs	r1, #0
 800554a:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800554c:	6a3b      	ldr	r3, [r7, #32]
 800554e:	2b37      	cmp	r3, #55	; 0x37
 8005550:	d901      	bls.n	8005556 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005552:	2337      	movs	r3, #55	; 0x37
 8005554:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005558:	6a3a      	ldr	r2, [r7, #32]
 800555a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800555c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800555e:	6a3a      	ldr	r2, [r7, #32]
 8005560:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005564:	2200      	movs	r2, #0
 8005566:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800556a:	3304      	adds	r3, #4
 800556c:	0018      	movs	r0, r3
 800556e:	f7ff f997 	bl	80048a0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005574:	3318      	adds	r3, #24
 8005576:	0018      	movs	r0, r3
 8005578:	f7ff f992 	bl	80048a0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800557c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800557e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005580:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005582:	6a3b      	ldr	r3, [r7, #32]
 8005584:	2238      	movs	r2, #56	; 0x38
 8005586:	1ad2      	subs	r2, r2, r3
 8005588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800558a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800558c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800558e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005590:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005594:	2200      	movs	r2, #0
 8005596:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800559a:	2258      	movs	r2, #88	; 0x58
 800559c:	2100      	movs	r1, #0
 800559e:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80055a0:	683a      	ldr	r2, [r7, #0]
 80055a2:	68f9      	ldr	r1, [r7, #12]
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	0018      	movs	r0, r3
 80055a8:	f001 f816 	bl	80065d8 <pxPortInitialiseStack>
 80055ac:	0002      	movs	r2, r0
 80055ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b0:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80055b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d002      	beq.n	80055be <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80055b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055bc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80055be:	46c0      	nop			; (mov r8, r8)
 80055c0:	46bd      	mov	sp, r7
 80055c2:	b006      	add	sp, #24
 80055c4:	bd80      	pop	{r7, pc}
 80055c6:	46c0      	nop			; (mov r8, r8)
 80055c8:	3fffffff 	.word	0x3fffffff

080055cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b082      	sub	sp, #8
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80055d4:	f001 f89c 	bl	8006710 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80055d8:	4b2a      	ldr	r3, [pc, #168]	; (8005684 <prvAddNewTaskToReadyList+0xb8>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	1c5a      	adds	r2, r3, #1
 80055de:	4b29      	ldr	r3, [pc, #164]	; (8005684 <prvAddNewTaskToReadyList+0xb8>)
 80055e0:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80055e2:	4b29      	ldr	r3, [pc, #164]	; (8005688 <prvAddNewTaskToReadyList+0xbc>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d109      	bne.n	80055fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80055ea:	4b27      	ldr	r3, [pc, #156]	; (8005688 <prvAddNewTaskToReadyList+0xbc>)
 80055ec:	687a      	ldr	r2, [r7, #4]
 80055ee:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80055f0:	4b24      	ldr	r3, [pc, #144]	; (8005684 <prvAddNewTaskToReadyList+0xb8>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d110      	bne.n	800561a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80055f8:	f000 fb94 	bl	8005d24 <prvInitialiseTaskLists>
 80055fc:	e00d      	b.n	800561a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80055fe:	4b23      	ldr	r3, [pc, #140]	; (800568c <prvAddNewTaskToReadyList+0xc0>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d109      	bne.n	800561a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005606:	4b20      	ldr	r3, [pc, #128]	; (8005688 <prvAddNewTaskToReadyList+0xbc>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005610:	429a      	cmp	r2, r3
 8005612:	d802      	bhi.n	800561a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005614:	4b1c      	ldr	r3, [pc, #112]	; (8005688 <prvAddNewTaskToReadyList+0xbc>)
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800561a:	4b1d      	ldr	r3, [pc, #116]	; (8005690 <prvAddNewTaskToReadyList+0xc4>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	1c5a      	adds	r2, r3, #1
 8005620:	4b1b      	ldr	r3, [pc, #108]	; (8005690 <prvAddNewTaskToReadyList+0xc4>)
 8005622:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005624:	4b1a      	ldr	r3, [pc, #104]	; (8005690 <prvAddNewTaskToReadyList+0xc4>)
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005630:	4b18      	ldr	r3, [pc, #96]	; (8005694 <prvAddNewTaskToReadyList+0xc8>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	429a      	cmp	r2, r3
 8005636:	d903      	bls.n	8005640 <prvAddNewTaskToReadyList+0x74>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800563c:	4b15      	ldr	r3, [pc, #84]	; (8005694 <prvAddNewTaskToReadyList+0xc8>)
 800563e:	601a      	str	r2, [r3, #0]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005644:	0013      	movs	r3, r2
 8005646:	009b      	lsls	r3, r3, #2
 8005648:	189b      	adds	r3, r3, r2
 800564a:	009b      	lsls	r3, r3, #2
 800564c:	4a12      	ldr	r2, [pc, #72]	; (8005698 <prvAddNewTaskToReadyList+0xcc>)
 800564e:	189a      	adds	r2, r3, r2
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	3304      	adds	r3, #4
 8005654:	0019      	movs	r1, r3
 8005656:	0010      	movs	r0, r2
 8005658:	f7ff f92d 	bl	80048b6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800565c:	f001 f86a 	bl	8006734 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005660:	4b0a      	ldr	r3, [pc, #40]	; (800568c <prvAddNewTaskToReadyList+0xc0>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d008      	beq.n	800567a <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005668:	4b07      	ldr	r3, [pc, #28]	; (8005688 <prvAddNewTaskToReadyList+0xbc>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005672:	429a      	cmp	r2, r3
 8005674:	d201      	bcs.n	800567a <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005676:	f001 f83b 	bl	80066f0 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800567a:	46c0      	nop			; (mov r8, r8)
 800567c:	46bd      	mov	sp, r7
 800567e:	b002      	add	sp, #8
 8005680:	bd80      	pop	{r7, pc}
 8005682:	46c0      	nop			; (mov r8, r8)
 8005684:	20000bc8 	.word	0x20000bc8
 8005688:	200006f4 	.word	0x200006f4
 800568c:	20000bd4 	.word	0x20000bd4
 8005690:	20000be4 	.word	0x20000be4
 8005694:	20000bd0 	.word	0x20000bd0
 8005698:	200006f8 	.word	0x200006f8

0800569c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800569c:	b580      	push	{r7, lr}
 800569e:	b084      	sub	sp, #16
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80056a4:	2300      	movs	r3, #0
 80056a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d010      	beq.n	80056d0 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80056ae:	4b0d      	ldr	r3, [pc, #52]	; (80056e4 <vTaskDelay+0x48>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d001      	beq.n	80056ba <vTaskDelay+0x1e>
 80056b6:	b672      	cpsid	i
 80056b8:	e7fe      	b.n	80056b8 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 80056ba:	f000 f869 	bl	8005790 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2100      	movs	r1, #0
 80056c2:	0018      	movs	r0, r3
 80056c4:	f000 fc64 	bl	8005f90 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80056c8:	f000 f86e 	bl	80057a8 <xTaskResumeAll>
 80056cc:	0003      	movs	r3, r0
 80056ce:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d101      	bne.n	80056da <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 80056d6:	f001 f80b 	bl	80066f0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80056da:	46c0      	nop			; (mov r8, r8)
 80056dc:	46bd      	mov	sp, r7
 80056de:	b004      	add	sp, #16
 80056e0:	bd80      	pop	{r7, pc}
 80056e2:	46c0      	nop			; (mov r8, r8)
 80056e4:	20000bf0 	.word	0x20000bf0

080056e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80056e8:	b590      	push	{r4, r7, lr}
 80056ea:	b089      	sub	sp, #36	; 0x24
 80056ec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80056ee:	2300      	movs	r3, #0
 80056f0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80056f2:	2300      	movs	r3, #0
 80056f4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80056f6:	003a      	movs	r2, r7
 80056f8:	1d39      	adds	r1, r7, #4
 80056fa:	2308      	movs	r3, #8
 80056fc:	18fb      	adds	r3, r7, r3
 80056fe:	0018      	movs	r0, r3
 8005700:	f7ff f880 	bl	8004804 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005704:	683c      	ldr	r4, [r7, #0]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	68ba      	ldr	r2, [r7, #8]
 800570a:	491b      	ldr	r1, [pc, #108]	; (8005778 <vTaskStartScheduler+0x90>)
 800570c:	481b      	ldr	r0, [pc, #108]	; (800577c <vTaskStartScheduler+0x94>)
 800570e:	9202      	str	r2, [sp, #8]
 8005710:	9301      	str	r3, [sp, #4]
 8005712:	2300      	movs	r3, #0
 8005714:	9300      	str	r3, [sp, #0]
 8005716:	2300      	movs	r3, #0
 8005718:	0022      	movs	r2, r4
 800571a:	f7ff fe46 	bl	80053aa <xTaskCreateStatic>
 800571e:	0002      	movs	r2, r0
 8005720:	4b17      	ldr	r3, [pc, #92]	; (8005780 <vTaskStartScheduler+0x98>)
 8005722:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005724:	4b16      	ldr	r3, [pc, #88]	; (8005780 <vTaskStartScheduler+0x98>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d002      	beq.n	8005732 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800572c:	2301      	movs	r3, #1
 800572e:	60fb      	str	r3, [r7, #12]
 8005730:	e001      	b.n	8005736 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005732:	2300      	movs	r3, #0
 8005734:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2b01      	cmp	r3, #1
 800573a:	d103      	bne.n	8005744 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 800573c:	f000 fc7c 	bl	8006038 <xTimerCreateTimerTask>
 8005740:	0003      	movs	r3, r0
 8005742:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2b01      	cmp	r3, #1
 8005748:	d10d      	bne.n	8005766 <vTaskStartScheduler+0x7e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 800574a:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800574c:	4b0d      	ldr	r3, [pc, #52]	; (8005784 <vTaskStartScheduler+0x9c>)
 800574e:	2201      	movs	r2, #1
 8005750:	4252      	negs	r2, r2
 8005752:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005754:	4b0c      	ldr	r3, [pc, #48]	; (8005788 <vTaskStartScheduler+0xa0>)
 8005756:	2201      	movs	r2, #1
 8005758:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800575a:	4b0c      	ldr	r3, [pc, #48]	; (800578c <vTaskStartScheduler+0xa4>)
 800575c:	2200      	movs	r2, #0
 800575e:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005760:	f000 ffa2 	bl	80066a8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005764:	e004      	b.n	8005770 <vTaskStartScheduler+0x88>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	3301      	adds	r3, #1
 800576a:	d101      	bne.n	8005770 <vTaskStartScheduler+0x88>
 800576c:	b672      	cpsid	i
 800576e:	e7fe      	b.n	800576e <vTaskStartScheduler+0x86>
}
 8005770:	46c0      	nop			; (mov r8, r8)
 8005772:	46bd      	mov	sp, r7
 8005774:	b005      	add	sp, #20
 8005776:	bd90      	pop	{r4, r7, pc}
 8005778:	08006c94 	.word	0x08006c94
 800577c:	08005d05 	.word	0x08005d05
 8005780:	20000bec 	.word	0x20000bec
 8005784:	20000be8 	.word	0x20000be8
 8005788:	20000bd4 	.word	0x20000bd4
 800578c:	20000bcc 	.word	0x20000bcc

08005790 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005790:	b580      	push	{r7, lr}
 8005792:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005794:	4b03      	ldr	r3, [pc, #12]	; (80057a4 <vTaskSuspendAll+0x14>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	1c5a      	adds	r2, r3, #1
 800579a:	4b02      	ldr	r3, [pc, #8]	; (80057a4 <vTaskSuspendAll+0x14>)
 800579c:	601a      	str	r2, [r3, #0]
}
 800579e:	46c0      	nop			; (mov r8, r8)
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}
 80057a4:	20000bf0 	.word	0x20000bf0

080057a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b084      	sub	sp, #16
 80057ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80057ae:	2300      	movs	r3, #0
 80057b0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80057b2:	2300      	movs	r3, #0
 80057b4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80057b6:	4b3a      	ldr	r3, [pc, #232]	; (80058a0 <xTaskResumeAll+0xf8>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d101      	bne.n	80057c2 <xTaskResumeAll+0x1a>
 80057be:	b672      	cpsid	i
 80057c0:	e7fe      	b.n	80057c0 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80057c2:	f000 ffa5 	bl	8006710 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80057c6:	4b36      	ldr	r3, [pc, #216]	; (80058a0 <xTaskResumeAll+0xf8>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	1e5a      	subs	r2, r3, #1
 80057cc:	4b34      	ldr	r3, [pc, #208]	; (80058a0 <xTaskResumeAll+0xf8>)
 80057ce:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057d0:	4b33      	ldr	r3, [pc, #204]	; (80058a0 <xTaskResumeAll+0xf8>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d15b      	bne.n	8005890 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80057d8:	4b32      	ldr	r3, [pc, #200]	; (80058a4 <xTaskResumeAll+0xfc>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d057      	beq.n	8005890 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80057e0:	e02f      	b.n	8005842 <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80057e2:	4b31      	ldr	r3, [pc, #196]	; (80058a8 <xTaskResumeAll+0x100>)
 80057e4:	68db      	ldr	r3, [r3, #12]
 80057e6:	68db      	ldr	r3, [r3, #12]
 80057e8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	3318      	adds	r3, #24
 80057ee:	0018      	movs	r0, r3
 80057f0:	f7ff f8b9 	bl	8004966 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	3304      	adds	r3, #4
 80057f8:	0018      	movs	r0, r3
 80057fa:	f7ff f8b4 	bl	8004966 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005802:	4b2a      	ldr	r3, [pc, #168]	; (80058ac <xTaskResumeAll+0x104>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	429a      	cmp	r2, r3
 8005808:	d903      	bls.n	8005812 <xTaskResumeAll+0x6a>
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800580e:	4b27      	ldr	r3, [pc, #156]	; (80058ac <xTaskResumeAll+0x104>)
 8005810:	601a      	str	r2, [r3, #0]
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005816:	0013      	movs	r3, r2
 8005818:	009b      	lsls	r3, r3, #2
 800581a:	189b      	adds	r3, r3, r2
 800581c:	009b      	lsls	r3, r3, #2
 800581e:	4a24      	ldr	r2, [pc, #144]	; (80058b0 <xTaskResumeAll+0x108>)
 8005820:	189a      	adds	r2, r3, r2
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	3304      	adds	r3, #4
 8005826:	0019      	movs	r1, r3
 8005828:	0010      	movs	r0, r2
 800582a:	f7ff f844 	bl	80048b6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005832:	4b20      	ldr	r3, [pc, #128]	; (80058b4 <xTaskResumeAll+0x10c>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005838:	429a      	cmp	r2, r3
 800583a:	d302      	bcc.n	8005842 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 800583c:	4b1e      	ldr	r3, [pc, #120]	; (80058b8 <xTaskResumeAll+0x110>)
 800583e:	2201      	movs	r2, #1
 8005840:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005842:	4b19      	ldr	r3, [pc, #100]	; (80058a8 <xTaskResumeAll+0x100>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d1cb      	bne.n	80057e2 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d001      	beq.n	8005854 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005850:	f000 fb02 	bl	8005e58 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005854:	4b19      	ldr	r3, [pc, #100]	; (80058bc <xTaskResumeAll+0x114>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d00f      	beq.n	8005880 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005860:	f000 f83c 	bl	80058dc <xTaskIncrementTick>
 8005864:	1e03      	subs	r3, r0, #0
 8005866:	d002      	beq.n	800586e <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8005868:	4b13      	ldr	r3, [pc, #76]	; (80058b8 <xTaskResumeAll+0x110>)
 800586a:	2201      	movs	r2, #1
 800586c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	3b01      	subs	r3, #1
 8005872:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d1f2      	bne.n	8005860 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 800587a:	4b10      	ldr	r3, [pc, #64]	; (80058bc <xTaskResumeAll+0x114>)
 800587c:	2200      	movs	r2, #0
 800587e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005880:	4b0d      	ldr	r3, [pc, #52]	; (80058b8 <xTaskResumeAll+0x110>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d003      	beq.n	8005890 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005888:	2301      	movs	r3, #1
 800588a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800588c:	f000 ff30 	bl	80066f0 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005890:	f000 ff50 	bl	8006734 <vPortExitCritical>

	return xAlreadyYielded;
 8005894:	68bb      	ldr	r3, [r7, #8]
}
 8005896:	0018      	movs	r0, r3
 8005898:	46bd      	mov	sp, r7
 800589a:	b004      	add	sp, #16
 800589c:	bd80      	pop	{r7, pc}
 800589e:	46c0      	nop			; (mov r8, r8)
 80058a0:	20000bf0 	.word	0x20000bf0
 80058a4:	20000bc8 	.word	0x20000bc8
 80058a8:	20000b88 	.word	0x20000b88
 80058ac:	20000bd0 	.word	0x20000bd0
 80058b0:	200006f8 	.word	0x200006f8
 80058b4:	200006f4 	.word	0x200006f4
 80058b8:	20000bdc 	.word	0x20000bdc
 80058bc:	20000bd8 	.word	0x20000bd8

080058c0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b082      	sub	sp, #8
 80058c4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80058c6:	4b04      	ldr	r3, [pc, #16]	; (80058d8 <xTaskGetTickCount+0x18>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80058cc:	687b      	ldr	r3, [r7, #4]
}
 80058ce:	0018      	movs	r0, r3
 80058d0:	46bd      	mov	sp, r7
 80058d2:	b002      	add	sp, #8
 80058d4:	bd80      	pop	{r7, pc}
 80058d6:	46c0      	nop			; (mov r8, r8)
 80058d8:	20000bcc 	.word	0x20000bcc

080058dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b086      	sub	sp, #24
 80058e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80058e2:	2300      	movs	r3, #0
 80058e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058e6:	4b4c      	ldr	r3, [pc, #304]	; (8005a18 <xTaskIncrementTick+0x13c>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d000      	beq.n	80058f0 <xTaskIncrementTick+0x14>
 80058ee:	e083      	b.n	80059f8 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80058f0:	4b4a      	ldr	r3, [pc, #296]	; (8005a1c <xTaskIncrementTick+0x140>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	3301      	adds	r3, #1
 80058f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80058f8:	4b48      	ldr	r3, [pc, #288]	; (8005a1c <xTaskIncrementTick+0x140>)
 80058fa:	693a      	ldr	r2, [r7, #16]
 80058fc:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d117      	bne.n	8005934 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8005904:	4b46      	ldr	r3, [pc, #280]	; (8005a20 <xTaskIncrementTick+0x144>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d001      	beq.n	8005912 <xTaskIncrementTick+0x36>
 800590e:	b672      	cpsid	i
 8005910:	e7fe      	b.n	8005910 <xTaskIncrementTick+0x34>
 8005912:	4b43      	ldr	r3, [pc, #268]	; (8005a20 <xTaskIncrementTick+0x144>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	60fb      	str	r3, [r7, #12]
 8005918:	4b42      	ldr	r3, [pc, #264]	; (8005a24 <xTaskIncrementTick+0x148>)
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	4b40      	ldr	r3, [pc, #256]	; (8005a20 <xTaskIncrementTick+0x144>)
 800591e:	601a      	str	r2, [r3, #0]
 8005920:	4b40      	ldr	r3, [pc, #256]	; (8005a24 <xTaskIncrementTick+0x148>)
 8005922:	68fa      	ldr	r2, [r7, #12]
 8005924:	601a      	str	r2, [r3, #0]
 8005926:	4b40      	ldr	r3, [pc, #256]	; (8005a28 <xTaskIncrementTick+0x14c>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	1c5a      	adds	r2, r3, #1
 800592c:	4b3e      	ldr	r3, [pc, #248]	; (8005a28 <xTaskIncrementTick+0x14c>)
 800592e:	601a      	str	r2, [r3, #0]
 8005930:	f000 fa92 	bl	8005e58 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005934:	4b3d      	ldr	r3, [pc, #244]	; (8005a2c <xTaskIncrementTick+0x150>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	693a      	ldr	r2, [r7, #16]
 800593a:	429a      	cmp	r2, r3
 800593c:	d34e      	bcc.n	80059dc <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800593e:	4b38      	ldr	r3, [pc, #224]	; (8005a20 <xTaskIncrementTick+0x144>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d101      	bne.n	800594c <xTaskIncrementTick+0x70>
 8005948:	2301      	movs	r3, #1
 800594a:	e000      	b.n	800594e <xTaskIncrementTick+0x72>
 800594c:	2300      	movs	r3, #0
 800594e:	2b00      	cmp	r3, #0
 8005950:	d004      	beq.n	800595c <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005952:	4b36      	ldr	r3, [pc, #216]	; (8005a2c <xTaskIncrementTick+0x150>)
 8005954:	2201      	movs	r2, #1
 8005956:	4252      	negs	r2, r2
 8005958:	601a      	str	r2, [r3, #0]
					break;
 800595a:	e03f      	b.n	80059dc <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800595c:	4b30      	ldr	r3, [pc, #192]	; (8005a20 <xTaskIncrementTick+0x144>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	68db      	ldr	r3, [r3, #12]
 8005962:	68db      	ldr	r3, [r3, #12]
 8005964:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800596c:	693a      	ldr	r2, [r7, #16]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	429a      	cmp	r2, r3
 8005972:	d203      	bcs.n	800597c <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005974:	4b2d      	ldr	r3, [pc, #180]	; (8005a2c <xTaskIncrementTick+0x150>)
 8005976:	687a      	ldr	r2, [r7, #4]
 8005978:	601a      	str	r2, [r3, #0]
						break;
 800597a:	e02f      	b.n	80059dc <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	3304      	adds	r3, #4
 8005980:	0018      	movs	r0, r3
 8005982:	f7fe fff0 	bl	8004966 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800598a:	2b00      	cmp	r3, #0
 800598c:	d004      	beq.n	8005998 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	3318      	adds	r3, #24
 8005992:	0018      	movs	r0, r3
 8005994:	f7fe ffe7 	bl	8004966 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800599c:	4b24      	ldr	r3, [pc, #144]	; (8005a30 <xTaskIncrementTick+0x154>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d903      	bls.n	80059ac <xTaskIncrementTick+0xd0>
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059a8:	4b21      	ldr	r3, [pc, #132]	; (8005a30 <xTaskIncrementTick+0x154>)
 80059aa:	601a      	str	r2, [r3, #0]
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059b0:	0013      	movs	r3, r2
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	189b      	adds	r3, r3, r2
 80059b6:	009b      	lsls	r3, r3, #2
 80059b8:	4a1e      	ldr	r2, [pc, #120]	; (8005a34 <xTaskIncrementTick+0x158>)
 80059ba:	189a      	adds	r2, r3, r2
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	3304      	adds	r3, #4
 80059c0:	0019      	movs	r1, r3
 80059c2:	0010      	movs	r0, r2
 80059c4:	f7fe ff77 	bl	80048b6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059cc:	4b1a      	ldr	r3, [pc, #104]	; (8005a38 <xTaskIncrementTick+0x15c>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d3b3      	bcc.n	800593e <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 80059d6:	2301      	movs	r3, #1
 80059d8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059da:	e7b0      	b.n	800593e <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80059dc:	4b16      	ldr	r3, [pc, #88]	; (8005a38 <xTaskIncrementTick+0x15c>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059e2:	4914      	ldr	r1, [pc, #80]	; (8005a34 <xTaskIncrementTick+0x158>)
 80059e4:	0013      	movs	r3, r2
 80059e6:	009b      	lsls	r3, r3, #2
 80059e8:	189b      	adds	r3, r3, r2
 80059ea:	009b      	lsls	r3, r3, #2
 80059ec:	585b      	ldr	r3, [r3, r1]
 80059ee:	2b01      	cmp	r3, #1
 80059f0:	d907      	bls.n	8005a02 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80059f2:	2301      	movs	r3, #1
 80059f4:	617b      	str	r3, [r7, #20]
 80059f6:	e004      	b.n	8005a02 <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80059f8:	4b10      	ldr	r3, [pc, #64]	; (8005a3c <xTaskIncrementTick+0x160>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	1c5a      	adds	r2, r3, #1
 80059fe:	4b0f      	ldr	r3, [pc, #60]	; (8005a3c <xTaskIncrementTick+0x160>)
 8005a00:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005a02:	4b0f      	ldr	r3, [pc, #60]	; (8005a40 <xTaskIncrementTick+0x164>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d001      	beq.n	8005a0e <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005a0e:	697b      	ldr	r3, [r7, #20]
}
 8005a10:	0018      	movs	r0, r3
 8005a12:	46bd      	mov	sp, r7
 8005a14:	b006      	add	sp, #24
 8005a16:	bd80      	pop	{r7, pc}
 8005a18:	20000bf0 	.word	0x20000bf0
 8005a1c:	20000bcc 	.word	0x20000bcc
 8005a20:	20000b80 	.word	0x20000b80
 8005a24:	20000b84 	.word	0x20000b84
 8005a28:	20000be0 	.word	0x20000be0
 8005a2c:	20000be8 	.word	0x20000be8
 8005a30:	20000bd0 	.word	0x20000bd0
 8005a34:	200006f8 	.word	0x200006f8
 8005a38:	200006f4 	.word	0x200006f4
 8005a3c:	20000bd8 	.word	0x20000bd8
 8005a40:	20000bdc 	.word	0x20000bdc

08005a44 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b082      	sub	sp, #8
 8005a48:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005a4a:	4b22      	ldr	r3, [pc, #136]	; (8005ad4 <vTaskSwitchContext+0x90>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d003      	beq.n	8005a5a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005a52:	4b21      	ldr	r3, [pc, #132]	; (8005ad8 <vTaskSwitchContext+0x94>)
 8005a54:	2201      	movs	r2, #1
 8005a56:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005a58:	e037      	b.n	8005aca <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 8005a5a:	4b1f      	ldr	r3, [pc, #124]	; (8005ad8 <vTaskSwitchContext+0x94>)
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005a60:	4b1e      	ldr	r3, [pc, #120]	; (8005adc <vTaskSwitchContext+0x98>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	607b      	str	r3, [r7, #4]
 8005a66:	e007      	b.n	8005a78 <vTaskSwitchContext+0x34>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d101      	bne.n	8005a72 <vTaskSwitchContext+0x2e>
 8005a6e:	b672      	cpsid	i
 8005a70:	e7fe      	b.n	8005a70 <vTaskSwitchContext+0x2c>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	3b01      	subs	r3, #1
 8005a76:	607b      	str	r3, [r7, #4]
 8005a78:	4919      	ldr	r1, [pc, #100]	; (8005ae0 <vTaskSwitchContext+0x9c>)
 8005a7a:	687a      	ldr	r2, [r7, #4]
 8005a7c:	0013      	movs	r3, r2
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	189b      	adds	r3, r3, r2
 8005a82:	009b      	lsls	r3, r3, #2
 8005a84:	585b      	ldr	r3, [r3, r1]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d0ee      	beq.n	8005a68 <vTaskSwitchContext+0x24>
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	0013      	movs	r3, r2
 8005a8e:	009b      	lsls	r3, r3, #2
 8005a90:	189b      	adds	r3, r3, r2
 8005a92:	009b      	lsls	r3, r3, #2
 8005a94:	4a12      	ldr	r2, [pc, #72]	; (8005ae0 <vTaskSwitchContext+0x9c>)
 8005a96:	189b      	adds	r3, r3, r2
 8005a98:	603b      	str	r3, [r7, #0]
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	685a      	ldr	r2, [r3, #4]
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	605a      	str	r2, [r3, #4]
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	685a      	ldr	r2, [r3, #4]
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	3308      	adds	r3, #8
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d104      	bne.n	8005aba <vTaskSwitchContext+0x76>
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	685a      	ldr	r2, [r3, #4]
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	605a      	str	r2, [r3, #4]
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	68da      	ldr	r2, [r3, #12]
 8005ac0:	4b08      	ldr	r3, [pc, #32]	; (8005ae4 <vTaskSwitchContext+0xa0>)
 8005ac2:	601a      	str	r2, [r3, #0]
 8005ac4:	4b05      	ldr	r3, [pc, #20]	; (8005adc <vTaskSwitchContext+0x98>)
 8005ac6:	687a      	ldr	r2, [r7, #4]
 8005ac8:	601a      	str	r2, [r3, #0]
}
 8005aca:	46c0      	nop			; (mov r8, r8)
 8005acc:	46bd      	mov	sp, r7
 8005ace:	b002      	add	sp, #8
 8005ad0:	bd80      	pop	{r7, pc}
 8005ad2:	46c0      	nop			; (mov r8, r8)
 8005ad4:	20000bf0 	.word	0x20000bf0
 8005ad8:	20000bdc 	.word	0x20000bdc
 8005adc:	20000bd0 	.word	0x20000bd0
 8005ae0:	200006f8 	.word	0x200006f8
 8005ae4:	200006f4 	.word	0x200006f4

08005ae8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b082      	sub	sp, #8
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d101      	bne.n	8005afc <vTaskPlaceOnEventList+0x14>
 8005af8:	b672      	cpsid	i
 8005afa:	e7fe      	b.n	8005afa <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005afc:	4b08      	ldr	r3, [pc, #32]	; (8005b20 <vTaskPlaceOnEventList+0x38>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	3318      	adds	r3, #24
 8005b02:	001a      	movs	r2, r3
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	0011      	movs	r1, r2
 8005b08:	0018      	movs	r0, r3
 8005b0a:	f7fe fef6 	bl	80048fa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	2101      	movs	r1, #1
 8005b12:	0018      	movs	r0, r3
 8005b14:	f000 fa3c 	bl	8005f90 <prvAddCurrentTaskToDelayedList>
}
 8005b18:	46c0      	nop			; (mov r8, r8)
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	b002      	add	sp, #8
 8005b1e:	bd80      	pop	{r7, pc}
 8005b20:	200006f4 	.word	0x200006f4

08005b24 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b084      	sub	sp, #16
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	60f8      	str	r0, [r7, #12]
 8005b2c:	60b9      	str	r1, [r7, #8]
 8005b2e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d101      	bne.n	8005b3a <vTaskPlaceOnEventListRestricted+0x16>
 8005b36:	b672      	cpsid	i
 8005b38:	e7fe      	b.n	8005b38 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005b3a:	4b0c      	ldr	r3, [pc, #48]	; (8005b6c <vTaskPlaceOnEventListRestricted+0x48>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	3318      	adds	r3, #24
 8005b40:	001a      	movs	r2, r3
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	0011      	movs	r1, r2
 8005b46:	0018      	movs	r0, r3
 8005b48:	f7fe feb5 	bl	80048b6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d002      	beq.n	8005b58 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 8005b52:	2301      	movs	r3, #1
 8005b54:	425b      	negs	r3, r3
 8005b56:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005b58:	687a      	ldr	r2, [r7, #4]
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	0011      	movs	r1, r2
 8005b5e:	0018      	movs	r0, r3
 8005b60:	f000 fa16 	bl	8005f90 <prvAddCurrentTaskToDelayedList>
	}
 8005b64:	46c0      	nop			; (mov r8, r8)
 8005b66:	46bd      	mov	sp, r7
 8005b68:	b004      	add	sp, #16
 8005b6a:	bd80      	pop	{r7, pc}
 8005b6c:	200006f4 	.word	0x200006f4

08005b70 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b084      	sub	sp, #16
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	68db      	ldr	r3, [r3, #12]
 8005b7e:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d101      	bne.n	8005b8a <xTaskRemoveFromEventList+0x1a>
 8005b86:	b672      	cpsid	i
 8005b88:	e7fe      	b.n	8005b88 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	3318      	adds	r3, #24
 8005b8e:	0018      	movs	r0, r3
 8005b90:	f7fe fee9 	bl	8004966 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b94:	4b1e      	ldr	r3, [pc, #120]	; (8005c10 <xTaskRemoveFromEventList+0xa0>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d11d      	bne.n	8005bd8 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	3304      	adds	r3, #4
 8005ba0:	0018      	movs	r0, r3
 8005ba2:	f7fe fee0 	bl	8004966 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005baa:	4b1a      	ldr	r3, [pc, #104]	; (8005c14 <xTaskRemoveFromEventList+0xa4>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	429a      	cmp	r2, r3
 8005bb0:	d903      	bls.n	8005bba <xTaskRemoveFromEventList+0x4a>
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bb6:	4b17      	ldr	r3, [pc, #92]	; (8005c14 <xTaskRemoveFromEventList+0xa4>)
 8005bb8:	601a      	str	r2, [r3, #0]
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bbe:	0013      	movs	r3, r2
 8005bc0:	009b      	lsls	r3, r3, #2
 8005bc2:	189b      	adds	r3, r3, r2
 8005bc4:	009b      	lsls	r3, r3, #2
 8005bc6:	4a14      	ldr	r2, [pc, #80]	; (8005c18 <xTaskRemoveFromEventList+0xa8>)
 8005bc8:	189a      	adds	r2, r3, r2
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	3304      	adds	r3, #4
 8005bce:	0019      	movs	r1, r3
 8005bd0:	0010      	movs	r0, r2
 8005bd2:	f7fe fe70 	bl	80048b6 <vListInsertEnd>
 8005bd6:	e007      	b.n	8005be8 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	3318      	adds	r3, #24
 8005bdc:	001a      	movs	r2, r3
 8005bde:	4b0f      	ldr	r3, [pc, #60]	; (8005c1c <xTaskRemoveFromEventList+0xac>)
 8005be0:	0011      	movs	r1, r2
 8005be2:	0018      	movs	r0, r3
 8005be4:	f7fe fe67 	bl	80048b6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bec:	4b0c      	ldr	r3, [pc, #48]	; (8005c20 <xTaskRemoveFromEventList+0xb0>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	d905      	bls.n	8005c02 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005bfa:	4b0a      	ldr	r3, [pc, #40]	; (8005c24 <xTaskRemoveFromEventList+0xb4>)
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	601a      	str	r2, [r3, #0]
 8005c00:	e001      	b.n	8005c06 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 8005c02:	2300      	movs	r3, #0
 8005c04:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005c06:	68fb      	ldr	r3, [r7, #12]
}
 8005c08:	0018      	movs	r0, r3
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	b004      	add	sp, #16
 8005c0e:	bd80      	pop	{r7, pc}
 8005c10:	20000bf0 	.word	0x20000bf0
 8005c14:	20000bd0 	.word	0x20000bd0
 8005c18:	200006f8 	.word	0x200006f8
 8005c1c:	20000b88 	.word	0x20000b88
 8005c20:	200006f4 	.word	0x200006f4
 8005c24:	20000bdc 	.word	0x20000bdc

08005c28 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b082      	sub	sp, #8
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005c30:	4b05      	ldr	r3, [pc, #20]	; (8005c48 <vTaskInternalSetTimeOutState+0x20>)
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005c38:	4b04      	ldr	r3, [pc, #16]	; (8005c4c <vTaskInternalSetTimeOutState+0x24>)
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	605a      	str	r2, [r3, #4]
}
 8005c40:	46c0      	nop			; (mov r8, r8)
 8005c42:	46bd      	mov	sp, r7
 8005c44:	b002      	add	sp, #8
 8005c46:	bd80      	pop	{r7, pc}
 8005c48:	20000be0 	.word	0x20000be0
 8005c4c:	20000bcc 	.word	0x20000bcc

08005c50 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b086      	sub	sp, #24
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
 8005c58:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d101      	bne.n	8005c64 <xTaskCheckForTimeOut+0x14>
 8005c60:	b672      	cpsid	i
 8005c62:	e7fe      	b.n	8005c62 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d101      	bne.n	8005c6e <xTaskCheckForTimeOut+0x1e>
 8005c6a:	b672      	cpsid	i
 8005c6c:	e7fe      	b.n	8005c6c <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 8005c6e:	f000 fd4f 	bl	8006710 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005c72:	4b1d      	ldr	r3, [pc, #116]	; (8005ce8 <xTaskCheckForTimeOut+0x98>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	693a      	ldr	r2, [r7, #16]
 8005c7e:	1ad3      	subs	r3, r2, r3
 8005c80:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	3301      	adds	r3, #1
 8005c88:	d102      	bne.n	8005c90 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	617b      	str	r3, [r7, #20]
 8005c8e:	e024      	b.n	8005cda <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	4b15      	ldr	r3, [pc, #84]	; (8005cec <xTaskCheckForTimeOut+0x9c>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d007      	beq.n	8005cac <xTaskCheckForTimeOut+0x5c>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	693a      	ldr	r2, [r7, #16]
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	d302      	bcc.n	8005cac <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	617b      	str	r3, [r7, #20]
 8005caa:	e016      	b.n	8005cda <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	68fa      	ldr	r2, [r7, #12]
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d20c      	bcs.n	8005cd0 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	1ad2      	subs	r2, r2, r3
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	0018      	movs	r0, r3
 8005cc6:	f7ff ffaf 	bl	8005c28 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	617b      	str	r3, [r7, #20]
 8005cce:	e004      	b.n	8005cda <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8005cda:	f000 fd2b 	bl	8006734 <vPortExitCritical>

	return xReturn;
 8005cde:	697b      	ldr	r3, [r7, #20]
}
 8005ce0:	0018      	movs	r0, r3
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	b006      	add	sp, #24
 8005ce6:	bd80      	pop	{r7, pc}
 8005ce8:	20000bcc 	.word	0x20000bcc
 8005cec:	20000be0 	.word	0x20000be0

08005cf0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005cf4:	4b02      	ldr	r3, [pc, #8]	; (8005d00 <vTaskMissedYield+0x10>)
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	601a      	str	r2, [r3, #0]
}
 8005cfa:	46c0      	nop			; (mov r8, r8)
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}
 8005d00:	20000bdc 	.word	0x20000bdc

08005d04 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b082      	sub	sp, #8
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005d0c:	f000 f84e 	bl	8005dac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005d10:	4b03      	ldr	r3, [pc, #12]	; (8005d20 <prvIdleTask+0x1c>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d9f9      	bls.n	8005d0c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005d18:	f000 fcea 	bl	80066f0 <vPortYield>
		prvCheckTasksWaitingTermination();
 8005d1c:	e7f6      	b.n	8005d0c <prvIdleTask+0x8>
 8005d1e:	46c0      	nop			; (mov r8, r8)
 8005d20:	200006f8 	.word	0x200006f8

08005d24 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b082      	sub	sp, #8
 8005d28:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	607b      	str	r3, [r7, #4]
 8005d2e:	e00c      	b.n	8005d4a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005d30:	687a      	ldr	r2, [r7, #4]
 8005d32:	0013      	movs	r3, r2
 8005d34:	009b      	lsls	r3, r3, #2
 8005d36:	189b      	adds	r3, r3, r2
 8005d38:	009b      	lsls	r3, r3, #2
 8005d3a:	4a14      	ldr	r2, [pc, #80]	; (8005d8c <prvInitialiseTaskLists+0x68>)
 8005d3c:	189b      	adds	r3, r3, r2
 8005d3e:	0018      	movs	r0, r3
 8005d40:	f7fe fd90 	bl	8004864 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	3301      	adds	r3, #1
 8005d48:	607b      	str	r3, [r7, #4]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2b37      	cmp	r3, #55	; 0x37
 8005d4e:	d9ef      	bls.n	8005d30 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005d50:	4b0f      	ldr	r3, [pc, #60]	; (8005d90 <prvInitialiseTaskLists+0x6c>)
 8005d52:	0018      	movs	r0, r3
 8005d54:	f7fe fd86 	bl	8004864 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005d58:	4b0e      	ldr	r3, [pc, #56]	; (8005d94 <prvInitialiseTaskLists+0x70>)
 8005d5a:	0018      	movs	r0, r3
 8005d5c:	f7fe fd82 	bl	8004864 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005d60:	4b0d      	ldr	r3, [pc, #52]	; (8005d98 <prvInitialiseTaskLists+0x74>)
 8005d62:	0018      	movs	r0, r3
 8005d64:	f7fe fd7e 	bl	8004864 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005d68:	4b0c      	ldr	r3, [pc, #48]	; (8005d9c <prvInitialiseTaskLists+0x78>)
 8005d6a:	0018      	movs	r0, r3
 8005d6c:	f7fe fd7a 	bl	8004864 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005d70:	4b0b      	ldr	r3, [pc, #44]	; (8005da0 <prvInitialiseTaskLists+0x7c>)
 8005d72:	0018      	movs	r0, r3
 8005d74:	f7fe fd76 	bl	8004864 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005d78:	4b0a      	ldr	r3, [pc, #40]	; (8005da4 <prvInitialiseTaskLists+0x80>)
 8005d7a:	4a05      	ldr	r2, [pc, #20]	; (8005d90 <prvInitialiseTaskLists+0x6c>)
 8005d7c:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005d7e:	4b0a      	ldr	r3, [pc, #40]	; (8005da8 <prvInitialiseTaskLists+0x84>)
 8005d80:	4a04      	ldr	r2, [pc, #16]	; (8005d94 <prvInitialiseTaskLists+0x70>)
 8005d82:	601a      	str	r2, [r3, #0]
}
 8005d84:	46c0      	nop			; (mov r8, r8)
 8005d86:	46bd      	mov	sp, r7
 8005d88:	b002      	add	sp, #8
 8005d8a:	bd80      	pop	{r7, pc}
 8005d8c:	200006f8 	.word	0x200006f8
 8005d90:	20000b58 	.word	0x20000b58
 8005d94:	20000b6c 	.word	0x20000b6c
 8005d98:	20000b88 	.word	0x20000b88
 8005d9c:	20000b9c 	.word	0x20000b9c
 8005da0:	20000bb4 	.word	0x20000bb4
 8005da4:	20000b80 	.word	0x20000b80
 8005da8:	20000b84 	.word	0x20000b84

08005dac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b082      	sub	sp, #8
 8005db0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005db2:	e01a      	b.n	8005dea <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8005db4:	f000 fcac 	bl	8006710 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005db8:	4b10      	ldr	r3, [pc, #64]	; (8005dfc <prvCheckTasksWaitingTermination+0x50>)
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	68db      	ldr	r3, [r3, #12]
 8005dbe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	3304      	adds	r3, #4
 8005dc4:	0018      	movs	r0, r3
 8005dc6:	f7fe fdce 	bl	8004966 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005dca:	4b0d      	ldr	r3, [pc, #52]	; (8005e00 <prvCheckTasksWaitingTermination+0x54>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	1e5a      	subs	r2, r3, #1
 8005dd0:	4b0b      	ldr	r3, [pc, #44]	; (8005e00 <prvCheckTasksWaitingTermination+0x54>)
 8005dd2:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005dd4:	4b0b      	ldr	r3, [pc, #44]	; (8005e04 <prvCheckTasksWaitingTermination+0x58>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	1e5a      	subs	r2, r3, #1
 8005dda:	4b0a      	ldr	r3, [pc, #40]	; (8005e04 <prvCheckTasksWaitingTermination+0x58>)
 8005ddc:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8005dde:	f000 fca9 	bl	8006734 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	0018      	movs	r0, r3
 8005de6:	f000 f80f 	bl	8005e08 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005dea:	4b06      	ldr	r3, [pc, #24]	; (8005e04 <prvCheckTasksWaitingTermination+0x58>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d1e0      	bne.n	8005db4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005df2:	46c0      	nop			; (mov r8, r8)
 8005df4:	46c0      	nop			; (mov r8, r8)
 8005df6:	46bd      	mov	sp, r7
 8005df8:	b002      	add	sp, #8
 8005dfa:	bd80      	pop	{r7, pc}
 8005dfc:	20000b9c 	.word	0x20000b9c
 8005e00:	20000bc8 	.word	0x20000bc8
 8005e04:	20000bb0 	.word	0x20000bb0

08005e08 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b082      	sub	sp, #8
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2259      	movs	r2, #89	; 0x59
 8005e14:	5c9b      	ldrb	r3, [r3, r2]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d109      	bne.n	8005e2e <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e1e:	0018      	movs	r0, r3
 8005e20:	f000 fdb4 	bl	800698c <vPortFree>
				vPortFree( pxTCB );
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	0018      	movs	r0, r3
 8005e28:	f000 fdb0 	bl	800698c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005e2c:	e010      	b.n	8005e50 <prvDeleteTCB+0x48>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2259      	movs	r2, #89	; 0x59
 8005e32:	5c9b      	ldrb	r3, [r3, r2]
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d104      	bne.n	8005e42 <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	0018      	movs	r0, r3
 8005e3c:	f000 fda6 	bl	800698c <vPortFree>
	}
 8005e40:	e006      	b.n	8005e50 <prvDeleteTCB+0x48>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2259      	movs	r2, #89	; 0x59
 8005e46:	5c9b      	ldrb	r3, [r3, r2]
 8005e48:	2b02      	cmp	r3, #2
 8005e4a:	d001      	beq.n	8005e50 <prvDeleteTCB+0x48>
 8005e4c:	b672      	cpsid	i
 8005e4e:	e7fe      	b.n	8005e4e <prvDeleteTCB+0x46>
	}
 8005e50:	46c0      	nop			; (mov r8, r8)
 8005e52:	46bd      	mov	sp, r7
 8005e54:	b002      	add	sp, #8
 8005e56:	bd80      	pop	{r7, pc}

08005e58 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b082      	sub	sp, #8
 8005e5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e5e:	4b0e      	ldr	r3, [pc, #56]	; (8005e98 <prvResetNextTaskUnblockTime+0x40>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d101      	bne.n	8005e6c <prvResetNextTaskUnblockTime+0x14>
 8005e68:	2301      	movs	r3, #1
 8005e6a:	e000      	b.n	8005e6e <prvResetNextTaskUnblockTime+0x16>
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d004      	beq.n	8005e7c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005e72:	4b0a      	ldr	r3, [pc, #40]	; (8005e9c <prvResetNextTaskUnblockTime+0x44>)
 8005e74:	2201      	movs	r2, #1
 8005e76:	4252      	negs	r2, r2
 8005e78:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005e7a:	e008      	b.n	8005e8e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005e7c:	4b06      	ldr	r3, [pc, #24]	; (8005e98 <prvResetNextTaskUnblockTime+0x40>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	68db      	ldr	r3, [r3, #12]
 8005e82:	68db      	ldr	r3, [r3, #12]
 8005e84:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	685a      	ldr	r2, [r3, #4]
 8005e8a:	4b04      	ldr	r3, [pc, #16]	; (8005e9c <prvResetNextTaskUnblockTime+0x44>)
 8005e8c:	601a      	str	r2, [r3, #0]
}
 8005e8e:	46c0      	nop			; (mov r8, r8)
 8005e90:	46bd      	mov	sp, r7
 8005e92:	b002      	add	sp, #8
 8005e94:	bd80      	pop	{r7, pc}
 8005e96:	46c0      	nop			; (mov r8, r8)
 8005e98:	20000b80 	.word	0x20000b80
 8005e9c:	20000be8 	.word	0x20000be8

08005ea0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b082      	sub	sp, #8
 8005ea4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005ea6:	4b0a      	ldr	r3, [pc, #40]	; (8005ed0 <xTaskGetSchedulerState+0x30>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d102      	bne.n	8005eb4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	607b      	str	r3, [r7, #4]
 8005eb2:	e008      	b.n	8005ec6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005eb4:	4b07      	ldr	r3, [pc, #28]	; (8005ed4 <xTaskGetSchedulerState+0x34>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d102      	bne.n	8005ec2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005ebc:	2302      	movs	r3, #2
 8005ebe:	607b      	str	r3, [r7, #4]
 8005ec0:	e001      	b.n	8005ec6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005ec6:	687b      	ldr	r3, [r7, #4]
	}
 8005ec8:	0018      	movs	r0, r3
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	b002      	add	sp, #8
 8005ece:	bd80      	pop	{r7, pc}
 8005ed0:	20000bd4 	.word	0x20000bd4
 8005ed4:	20000bf0 	.word	0x20000bf0

08005ed8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b084      	sub	sp, #16
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d044      	beq.n	8005f78 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005eee:	4b25      	ldr	r3, [pc, #148]	; (8005f84 <xTaskPriorityDisinherit+0xac>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	68ba      	ldr	r2, [r7, #8]
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d001      	beq.n	8005efc <xTaskPriorityDisinherit+0x24>
 8005ef8:	b672      	cpsid	i
 8005efa:	e7fe      	b.n	8005efa <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d101      	bne.n	8005f08 <xTaskPriorityDisinherit+0x30>
 8005f04:	b672      	cpsid	i
 8005f06:	e7fe      	b.n	8005f06 <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f0c:	1e5a      	subs	r2, r3, #1
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	d02c      	beq.n	8005f78 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d128      	bne.n	8005f78 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	3304      	adds	r3, #4
 8005f2a:	0018      	movs	r0, r3
 8005f2c:	f7fe fd1b 	bl	8004966 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f3c:	2238      	movs	r2, #56	; 0x38
 8005f3e:	1ad2      	subs	r2, r2, r3
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f48:	4b0f      	ldr	r3, [pc, #60]	; (8005f88 <xTaskPriorityDisinherit+0xb0>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d903      	bls.n	8005f58 <xTaskPriorityDisinherit+0x80>
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f54:	4b0c      	ldr	r3, [pc, #48]	; (8005f88 <xTaskPriorityDisinherit+0xb0>)
 8005f56:	601a      	str	r2, [r3, #0]
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f5c:	0013      	movs	r3, r2
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	189b      	adds	r3, r3, r2
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	4a09      	ldr	r2, [pc, #36]	; (8005f8c <xTaskPriorityDisinherit+0xb4>)
 8005f66:	189a      	adds	r2, r3, r2
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	3304      	adds	r3, #4
 8005f6c:	0019      	movs	r1, r3
 8005f6e:	0010      	movs	r0, r2
 8005f70:	f7fe fca1 	bl	80048b6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005f74:	2301      	movs	r3, #1
 8005f76:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005f78:	68fb      	ldr	r3, [r7, #12]
	}
 8005f7a:	0018      	movs	r0, r3
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	b004      	add	sp, #16
 8005f80:	bd80      	pop	{r7, pc}
 8005f82:	46c0      	nop			; (mov r8, r8)
 8005f84:	200006f4 	.word	0x200006f4
 8005f88:	20000bd0 	.word	0x20000bd0
 8005f8c:	200006f8 	.word	0x200006f8

08005f90 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b084      	sub	sp, #16
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
 8005f98:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005f9a:	4b21      	ldr	r3, [pc, #132]	; (8006020 <prvAddCurrentTaskToDelayedList+0x90>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005fa0:	4b20      	ldr	r3, [pc, #128]	; (8006024 <prvAddCurrentTaskToDelayedList+0x94>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	3304      	adds	r3, #4
 8005fa6:	0018      	movs	r0, r3
 8005fa8:	f7fe fcdd 	bl	8004966 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	3301      	adds	r3, #1
 8005fb0:	d10b      	bne.n	8005fca <prvAddCurrentTaskToDelayedList+0x3a>
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d008      	beq.n	8005fca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005fb8:	4b1a      	ldr	r3, [pc, #104]	; (8006024 <prvAddCurrentTaskToDelayedList+0x94>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	1d1a      	adds	r2, r3, #4
 8005fbe:	4b1a      	ldr	r3, [pc, #104]	; (8006028 <prvAddCurrentTaskToDelayedList+0x98>)
 8005fc0:	0011      	movs	r1, r2
 8005fc2:	0018      	movs	r0, r3
 8005fc4:	f7fe fc77 	bl	80048b6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005fc8:	e026      	b.n	8006018 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005fca:	68fa      	ldr	r2, [r7, #12]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	18d3      	adds	r3, r2, r3
 8005fd0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005fd2:	4b14      	ldr	r3, [pc, #80]	; (8006024 <prvAddCurrentTaskToDelayedList+0x94>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	68ba      	ldr	r2, [r7, #8]
 8005fd8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005fda:	68ba      	ldr	r2, [r7, #8]
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d209      	bcs.n	8005ff6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005fe2:	4b12      	ldr	r3, [pc, #72]	; (800602c <prvAddCurrentTaskToDelayedList+0x9c>)
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	4b0f      	ldr	r3, [pc, #60]	; (8006024 <prvAddCurrentTaskToDelayedList+0x94>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	3304      	adds	r3, #4
 8005fec:	0019      	movs	r1, r3
 8005fee:	0010      	movs	r0, r2
 8005ff0:	f7fe fc83 	bl	80048fa <vListInsert>
}
 8005ff4:	e010      	b.n	8006018 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ff6:	4b0e      	ldr	r3, [pc, #56]	; (8006030 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005ff8:	681a      	ldr	r2, [r3, #0]
 8005ffa:	4b0a      	ldr	r3, [pc, #40]	; (8006024 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	3304      	adds	r3, #4
 8006000:	0019      	movs	r1, r3
 8006002:	0010      	movs	r0, r2
 8006004:	f7fe fc79 	bl	80048fa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006008:	4b0a      	ldr	r3, [pc, #40]	; (8006034 <prvAddCurrentTaskToDelayedList+0xa4>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	68ba      	ldr	r2, [r7, #8]
 800600e:	429a      	cmp	r2, r3
 8006010:	d202      	bcs.n	8006018 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006012:	4b08      	ldr	r3, [pc, #32]	; (8006034 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006014:	68ba      	ldr	r2, [r7, #8]
 8006016:	601a      	str	r2, [r3, #0]
}
 8006018:	46c0      	nop			; (mov r8, r8)
 800601a:	46bd      	mov	sp, r7
 800601c:	b004      	add	sp, #16
 800601e:	bd80      	pop	{r7, pc}
 8006020:	20000bcc 	.word	0x20000bcc
 8006024:	200006f4 	.word	0x200006f4
 8006028:	20000bb4 	.word	0x20000bb4
 800602c:	20000b84 	.word	0x20000b84
 8006030:	20000b80 	.word	0x20000b80
 8006034:	20000be8 	.word	0x20000be8

08006038 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006038:	b590      	push	{r4, r7, lr}
 800603a:	b089      	sub	sp, #36	; 0x24
 800603c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800603e:	2300      	movs	r3, #0
 8006040:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006042:	f000 fa87 	bl	8006554 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006046:	4b17      	ldr	r3, [pc, #92]	; (80060a4 <xTimerCreateTimerTask+0x6c>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d020      	beq.n	8006090 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800604e:	2300      	movs	r3, #0
 8006050:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006052:	2300      	movs	r3, #0
 8006054:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006056:	003a      	movs	r2, r7
 8006058:	1d39      	adds	r1, r7, #4
 800605a:	2308      	movs	r3, #8
 800605c:	18fb      	adds	r3, r7, r3
 800605e:	0018      	movs	r0, r3
 8006060:	f7fe fbe8 	bl	8004834 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006064:	683c      	ldr	r4, [r7, #0]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	68ba      	ldr	r2, [r7, #8]
 800606a:	490f      	ldr	r1, [pc, #60]	; (80060a8 <xTimerCreateTimerTask+0x70>)
 800606c:	480f      	ldr	r0, [pc, #60]	; (80060ac <xTimerCreateTimerTask+0x74>)
 800606e:	9202      	str	r2, [sp, #8]
 8006070:	9301      	str	r3, [sp, #4]
 8006072:	2302      	movs	r3, #2
 8006074:	9300      	str	r3, [sp, #0]
 8006076:	2300      	movs	r3, #0
 8006078:	0022      	movs	r2, r4
 800607a:	f7ff f996 	bl	80053aa <xTaskCreateStatic>
 800607e:	0002      	movs	r2, r0
 8006080:	4b0b      	ldr	r3, [pc, #44]	; (80060b0 <xTimerCreateTimerTask+0x78>)
 8006082:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006084:	4b0a      	ldr	r3, [pc, #40]	; (80060b0 <xTimerCreateTimerTask+0x78>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d001      	beq.n	8006090 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 800608c:	2301      	movs	r3, #1
 800608e:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d101      	bne.n	800609a <xTimerCreateTimerTask+0x62>
 8006096:	b672      	cpsid	i
 8006098:	e7fe      	b.n	8006098 <xTimerCreateTimerTask+0x60>
	return xReturn;
 800609a:	68fb      	ldr	r3, [r7, #12]
}
 800609c:	0018      	movs	r0, r3
 800609e:	46bd      	mov	sp, r7
 80060a0:	b005      	add	sp, #20
 80060a2:	bd90      	pop	{r4, r7, pc}
 80060a4:	20000c24 	.word	0x20000c24
 80060a8:	08006c9c 	.word	0x08006c9c
 80060ac:	080061b9 	.word	0x080061b9
 80060b0:	20000c28 	.word	0x20000c28

080060b4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80060b4:	b590      	push	{r4, r7, lr}
 80060b6:	b08b      	sub	sp, #44	; 0x2c
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	60f8      	str	r0, [r7, #12]
 80060bc:	60b9      	str	r1, [r7, #8]
 80060be:	607a      	str	r2, [r7, #4]
 80060c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80060c2:	2300      	movs	r3, #0
 80060c4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d101      	bne.n	80060d0 <xTimerGenericCommand+0x1c>
 80060cc:	b672      	cpsid	i
 80060ce:	e7fe      	b.n	80060ce <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80060d0:	4b1c      	ldr	r3, [pc, #112]	; (8006144 <xTimerGenericCommand+0x90>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d030      	beq.n	800613a <xTimerGenericCommand+0x86>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80060d8:	2414      	movs	r4, #20
 80060da:	193b      	adds	r3, r7, r4
 80060dc:	68ba      	ldr	r2, [r7, #8]
 80060de:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80060e0:	193b      	adds	r3, r7, r4
 80060e2:	687a      	ldr	r2, [r7, #4]
 80060e4:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80060e6:	193b      	adds	r3, r7, r4
 80060e8:	68fa      	ldr	r2, [r7, #12]
 80060ea:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	2b05      	cmp	r3, #5
 80060f0:	dc19      	bgt.n	8006126 <xTimerGenericCommand+0x72>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80060f2:	f7ff fed5 	bl	8005ea0 <xTaskGetSchedulerState>
 80060f6:	0003      	movs	r3, r0
 80060f8:	2b02      	cmp	r3, #2
 80060fa:	d109      	bne.n	8006110 <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80060fc:	4b11      	ldr	r3, [pc, #68]	; (8006144 <xTimerGenericCommand+0x90>)
 80060fe:	6818      	ldr	r0, [r3, #0]
 8006100:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006102:	1939      	adds	r1, r7, r4
 8006104:	2300      	movs	r3, #0
 8006106:	f7fe fd88 	bl	8004c1a <xQueueGenericSend>
 800610a:	0003      	movs	r3, r0
 800610c:	627b      	str	r3, [r7, #36]	; 0x24
 800610e:	e014      	b.n	800613a <xTimerGenericCommand+0x86>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006110:	4b0c      	ldr	r3, [pc, #48]	; (8006144 <xTimerGenericCommand+0x90>)
 8006112:	6818      	ldr	r0, [r3, #0]
 8006114:	2314      	movs	r3, #20
 8006116:	18f9      	adds	r1, r7, r3
 8006118:	2300      	movs	r3, #0
 800611a:	2200      	movs	r2, #0
 800611c:	f7fe fd7d 	bl	8004c1a <xQueueGenericSend>
 8006120:	0003      	movs	r3, r0
 8006122:	627b      	str	r3, [r7, #36]	; 0x24
 8006124:	e009      	b.n	800613a <xTimerGenericCommand+0x86>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006126:	4b07      	ldr	r3, [pc, #28]	; (8006144 <xTimerGenericCommand+0x90>)
 8006128:	6818      	ldr	r0, [r3, #0]
 800612a:	683a      	ldr	r2, [r7, #0]
 800612c:	2314      	movs	r3, #20
 800612e:	18f9      	adds	r1, r7, r3
 8006130:	2300      	movs	r3, #0
 8006132:	f7fe fe36 	bl	8004da2 <xQueueGenericSendFromISR>
 8006136:	0003      	movs	r3, r0
 8006138:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800613a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800613c:	0018      	movs	r0, r3
 800613e:	46bd      	mov	sp, r7
 8006140:	b00b      	add	sp, #44	; 0x2c
 8006142:	bd90      	pop	{r4, r7, pc}
 8006144:	20000c24 	.word	0x20000c24

08006148 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b086      	sub	sp, #24
 800614c:	af02      	add	r7, sp, #8
 800614e:	6078      	str	r0, [r7, #4]
 8006150:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006152:	4b18      	ldr	r3, [pc, #96]	; (80061b4 <prvProcessExpiredTimer+0x6c>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	68db      	ldr	r3, [r3, #12]
 8006158:	68db      	ldr	r3, [r3, #12]
 800615a:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	3304      	adds	r3, #4
 8006160:	0018      	movs	r0, r3
 8006162:	f7fe fc00 	bl	8004966 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	69db      	ldr	r3, [r3, #28]
 800616a:	2b01      	cmp	r3, #1
 800616c:	d119      	bne.n	80061a2 <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	699a      	ldr	r2, [r3, #24]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	18d1      	adds	r1, r2, r3
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	683a      	ldr	r2, [r7, #0]
 800617a:	68f8      	ldr	r0, [r7, #12]
 800617c:	f000 f8b6 	bl	80062ec <prvInsertTimerInActiveList>
 8006180:	1e03      	subs	r3, r0, #0
 8006182:	d00e      	beq.n	80061a2 <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006184:	687a      	ldr	r2, [r7, #4]
 8006186:	68f8      	ldr	r0, [r7, #12]
 8006188:	2300      	movs	r3, #0
 800618a:	9300      	str	r3, [sp, #0]
 800618c:	2300      	movs	r3, #0
 800618e:	2100      	movs	r1, #0
 8006190:	f7ff ff90 	bl	80060b4 <xTimerGenericCommand>
 8006194:	0003      	movs	r3, r0
 8006196:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d101      	bne.n	80061a2 <prvProcessExpiredTimer+0x5a>
 800619e:	b672      	cpsid	i
 80061a0:	e7fe      	b.n	80061a0 <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a6:	68fa      	ldr	r2, [r7, #12]
 80061a8:	0010      	movs	r0, r2
 80061aa:	4798      	blx	r3
}
 80061ac:	46c0      	nop			; (mov r8, r8)
 80061ae:	46bd      	mov	sp, r7
 80061b0:	b004      	add	sp, #16
 80061b2:	bd80      	pop	{r7, pc}
 80061b4:	20000c1c 	.word	0x20000c1c

080061b8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b084      	sub	sp, #16
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80061c0:	2308      	movs	r3, #8
 80061c2:	18fb      	adds	r3, r7, r3
 80061c4:	0018      	movs	r0, r3
 80061c6:	f000 f851 	bl	800626c <prvGetNextExpireTime>
 80061ca:	0003      	movs	r3, r0
 80061cc:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80061ce:	68ba      	ldr	r2, [r7, #8]
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	0011      	movs	r1, r2
 80061d4:	0018      	movs	r0, r3
 80061d6:	f000 f803 	bl	80061e0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80061da:	f000 f8c9 	bl	8006370 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80061de:	e7ef      	b.n	80061c0 <prvTimerTask+0x8>

080061e0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b084      	sub	sp, #16
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80061ea:	f7ff fad1 	bl	8005790 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80061ee:	2308      	movs	r3, #8
 80061f0:	18fb      	adds	r3, r7, r3
 80061f2:	0018      	movs	r0, r3
 80061f4:	f000 f85a 	bl	80062ac <prvSampleTimeNow>
 80061f8:	0003      	movs	r3, r0
 80061fa:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d129      	bne.n	8006256 <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d10c      	bne.n	8006222 <prvProcessTimerOrBlockTask+0x42>
 8006208:	687a      	ldr	r2, [r7, #4]
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	429a      	cmp	r2, r3
 800620e:	d808      	bhi.n	8006222 <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 8006210:	f7ff faca 	bl	80057a8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006214:	68fa      	ldr	r2, [r7, #12]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	0011      	movs	r1, r2
 800621a:	0018      	movs	r0, r3
 800621c:	f7ff ff94 	bl	8006148 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006220:	e01b      	b.n	800625a <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d006      	beq.n	8006236 <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006228:	4b0e      	ldr	r3, [pc, #56]	; (8006264 <prvProcessTimerOrBlockTask+0x84>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	425a      	negs	r2, r3
 8006230:	4153      	adcs	r3, r2
 8006232:	b2db      	uxtb	r3, r3
 8006234:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006236:	4b0c      	ldr	r3, [pc, #48]	; (8006268 <prvProcessTimerOrBlockTask+0x88>)
 8006238:	6818      	ldr	r0, [r3, #0]
 800623a:	687a      	ldr	r2, [r7, #4]
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	1ad3      	subs	r3, r2, r3
 8006240:	683a      	ldr	r2, [r7, #0]
 8006242:	0019      	movs	r1, r3
 8006244:	f7ff f87e 	bl	8005344 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006248:	f7ff faae 	bl	80057a8 <xTaskResumeAll>
 800624c:	1e03      	subs	r3, r0, #0
 800624e:	d104      	bne.n	800625a <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 8006250:	f000 fa4e 	bl	80066f0 <vPortYield>
}
 8006254:	e001      	b.n	800625a <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 8006256:	f7ff faa7 	bl	80057a8 <xTaskResumeAll>
}
 800625a:	46c0      	nop			; (mov r8, r8)
 800625c:	46bd      	mov	sp, r7
 800625e:	b004      	add	sp, #16
 8006260:	bd80      	pop	{r7, pc}
 8006262:	46c0      	nop			; (mov r8, r8)
 8006264:	20000c20 	.word	0x20000c20
 8006268:	20000c24 	.word	0x20000c24

0800626c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b084      	sub	sp, #16
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006274:	4b0c      	ldr	r3, [pc, #48]	; (80062a8 <prvGetNextExpireTime+0x3c>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	425a      	negs	r2, r3
 800627c:	4153      	adcs	r3, r2
 800627e:	b2db      	uxtb	r3, r3
 8006280:	001a      	movs	r2, r3
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d105      	bne.n	800629a <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800628e:	4b06      	ldr	r3, [pc, #24]	; (80062a8 <prvGetNextExpireTime+0x3c>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	60fb      	str	r3, [r7, #12]
 8006298:	e001      	b.n	800629e <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800629a:	2300      	movs	r3, #0
 800629c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800629e:	68fb      	ldr	r3, [r7, #12]
}
 80062a0:	0018      	movs	r0, r3
 80062a2:	46bd      	mov	sp, r7
 80062a4:	b004      	add	sp, #16
 80062a6:	bd80      	pop	{r7, pc}
 80062a8:	20000c1c 	.word	0x20000c1c

080062ac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b084      	sub	sp, #16
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80062b4:	f7ff fb04 	bl	80058c0 <xTaskGetTickCount>
 80062b8:	0003      	movs	r3, r0
 80062ba:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 80062bc:	4b0a      	ldr	r3, [pc, #40]	; (80062e8 <prvSampleTimeNow+0x3c>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	68fa      	ldr	r2, [r7, #12]
 80062c2:	429a      	cmp	r2, r3
 80062c4:	d205      	bcs.n	80062d2 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 80062c6:	f000 f8eb 	bl	80064a0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2201      	movs	r2, #1
 80062ce:	601a      	str	r2, [r3, #0]
 80062d0:	e002      	b.n	80062d8 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2200      	movs	r2, #0
 80062d6:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80062d8:	4b03      	ldr	r3, [pc, #12]	; (80062e8 <prvSampleTimeNow+0x3c>)
 80062da:	68fa      	ldr	r2, [r7, #12]
 80062dc:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 80062de:	68fb      	ldr	r3, [r7, #12]
}
 80062e0:	0018      	movs	r0, r3
 80062e2:	46bd      	mov	sp, r7
 80062e4:	b004      	add	sp, #16
 80062e6:	bd80      	pop	{r7, pc}
 80062e8:	20000c2c 	.word	0x20000c2c

080062ec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b086      	sub	sp, #24
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	60f8      	str	r0, [r7, #12]
 80062f4:	60b9      	str	r1, [r7, #8]
 80062f6:	607a      	str	r2, [r7, #4]
 80062f8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80062fa:	2300      	movs	r3, #0
 80062fc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	68ba      	ldr	r2, [r7, #8]
 8006302:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	68fa      	ldr	r2, [r7, #12]
 8006308:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800630a:	68ba      	ldr	r2, [r7, #8]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	429a      	cmp	r2, r3
 8006310:	d812      	bhi.n	8006338 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006312:	687a      	ldr	r2, [r7, #4]
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	1ad2      	subs	r2, r2, r3
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	699b      	ldr	r3, [r3, #24]
 800631c:	429a      	cmp	r2, r3
 800631e:	d302      	bcc.n	8006326 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006320:	2301      	movs	r3, #1
 8006322:	617b      	str	r3, [r7, #20]
 8006324:	e01b      	b.n	800635e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006326:	4b10      	ldr	r3, [pc, #64]	; (8006368 <prvInsertTimerInActiveList+0x7c>)
 8006328:	681a      	ldr	r2, [r3, #0]
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	3304      	adds	r3, #4
 800632e:	0019      	movs	r1, r3
 8006330:	0010      	movs	r0, r2
 8006332:	f7fe fae2 	bl	80048fa <vListInsert>
 8006336:	e012      	b.n	800635e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006338:	687a      	ldr	r2, [r7, #4]
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	429a      	cmp	r2, r3
 800633e:	d206      	bcs.n	800634e <prvInsertTimerInActiveList+0x62>
 8006340:	68ba      	ldr	r2, [r7, #8]
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	429a      	cmp	r2, r3
 8006346:	d302      	bcc.n	800634e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006348:	2301      	movs	r3, #1
 800634a:	617b      	str	r3, [r7, #20]
 800634c:	e007      	b.n	800635e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800634e:	4b07      	ldr	r3, [pc, #28]	; (800636c <prvInsertTimerInActiveList+0x80>)
 8006350:	681a      	ldr	r2, [r3, #0]
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	3304      	adds	r3, #4
 8006356:	0019      	movs	r1, r3
 8006358:	0010      	movs	r0, r2
 800635a:	f7fe face 	bl	80048fa <vListInsert>
		}
	}

	return xProcessTimerNow;
 800635e:	697b      	ldr	r3, [r7, #20]
}
 8006360:	0018      	movs	r0, r3
 8006362:	46bd      	mov	sp, r7
 8006364:	b006      	add	sp, #24
 8006366:	bd80      	pop	{r7, pc}
 8006368:	20000c20 	.word	0x20000c20
 800636c:	20000c1c 	.word	0x20000c1c

08006370 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006370:	b590      	push	{r4, r7, lr}
 8006372:	b08d      	sub	sp, #52	; 0x34
 8006374:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006376:	e07f      	b.n	8006478 <prvProcessReceivedCommands+0x108>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006378:	2208      	movs	r2, #8
 800637a:	18bb      	adds	r3, r7, r2
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	2b00      	cmp	r3, #0
 8006380:	da0f      	bge.n	80063a2 <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006382:	18bb      	adds	r3, r7, r2
 8006384:	3304      	adds	r3, #4
 8006386:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800638a:	2b00      	cmp	r3, #0
 800638c:	d101      	bne.n	8006392 <prvProcessReceivedCommands+0x22>
 800638e:	b672      	cpsid	i
 8006390:	e7fe      	b.n	8006390 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006394:	681a      	ldr	r2, [r3, #0]
 8006396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006398:	6858      	ldr	r0, [r3, #4]
 800639a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800639c:	689b      	ldr	r3, [r3, #8]
 800639e:	0019      	movs	r1, r3
 80063a0:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80063a2:	2208      	movs	r2, #8
 80063a4:	18bb      	adds	r3, r7, r2
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	db64      	blt.n	8006476 <prvProcessReceivedCommands+0x106>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80063ac:	18bb      	adds	r3, r7, r2
 80063ae:	689b      	ldr	r3, [r3, #8]
 80063b0:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80063b2:	6a3b      	ldr	r3, [r7, #32]
 80063b4:	695b      	ldr	r3, [r3, #20]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d004      	beq.n	80063c4 <prvProcessReceivedCommands+0x54>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80063ba:	6a3b      	ldr	r3, [r7, #32]
 80063bc:	3304      	adds	r3, #4
 80063be:	0018      	movs	r0, r3
 80063c0:	f7fe fad1 	bl	8004966 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80063c4:	1d3b      	adds	r3, r7, #4
 80063c6:	0018      	movs	r0, r3
 80063c8:	f7ff ff70 	bl	80062ac <prvSampleTimeNow>
 80063cc:	0003      	movs	r3, r0
 80063ce:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 80063d0:	2308      	movs	r3, #8
 80063d2:	18fb      	adds	r3, r7, r3
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	2b09      	cmp	r3, #9
 80063d8:	d84e      	bhi.n	8006478 <prvProcessReceivedCommands+0x108>
 80063da:	009a      	lsls	r2, r3, #2
 80063dc:	4b2e      	ldr	r3, [pc, #184]	; (8006498 <prvProcessReceivedCommands+0x128>)
 80063de:	18d3      	adds	r3, r2, r3
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80063e4:	2408      	movs	r4, #8
 80063e6:	193b      	adds	r3, r7, r4
 80063e8:	685a      	ldr	r2, [r3, #4]
 80063ea:	6a3b      	ldr	r3, [r7, #32]
 80063ec:	699b      	ldr	r3, [r3, #24]
 80063ee:	18d1      	adds	r1, r2, r3
 80063f0:	193b      	adds	r3, r7, r4
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	69fa      	ldr	r2, [r7, #28]
 80063f6:	6a38      	ldr	r0, [r7, #32]
 80063f8:	f7ff ff78 	bl	80062ec <prvInsertTimerInActiveList>
 80063fc:	1e03      	subs	r3, r0, #0
 80063fe:	d03b      	beq.n	8006478 <prvProcessReceivedCommands+0x108>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006400:	6a3b      	ldr	r3, [r7, #32]
 8006402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006404:	6a3a      	ldr	r2, [r7, #32]
 8006406:	0010      	movs	r0, r2
 8006408:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800640a:	6a3b      	ldr	r3, [r7, #32]
 800640c:	69db      	ldr	r3, [r3, #28]
 800640e:	2b01      	cmp	r3, #1
 8006410:	d132      	bne.n	8006478 <prvProcessReceivedCommands+0x108>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006412:	193b      	adds	r3, r7, r4
 8006414:	685a      	ldr	r2, [r3, #4]
 8006416:	6a3b      	ldr	r3, [r7, #32]
 8006418:	699b      	ldr	r3, [r3, #24]
 800641a:	18d2      	adds	r2, r2, r3
 800641c:	6a38      	ldr	r0, [r7, #32]
 800641e:	2300      	movs	r3, #0
 8006420:	9300      	str	r3, [sp, #0]
 8006422:	2300      	movs	r3, #0
 8006424:	2100      	movs	r1, #0
 8006426:	f7ff fe45 	bl	80060b4 <xTimerGenericCommand>
 800642a:	0003      	movs	r3, r0
 800642c:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 800642e:	69bb      	ldr	r3, [r7, #24]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d121      	bne.n	8006478 <prvProcessReceivedCommands+0x108>
 8006434:	b672      	cpsid	i
 8006436:	e7fe      	b.n	8006436 <prvProcessReceivedCommands+0xc6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006438:	2308      	movs	r3, #8
 800643a:	18fb      	adds	r3, r7, r3
 800643c:	685a      	ldr	r2, [r3, #4]
 800643e:	6a3b      	ldr	r3, [r7, #32]
 8006440:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006442:	6a3b      	ldr	r3, [r7, #32]
 8006444:	699b      	ldr	r3, [r3, #24]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d101      	bne.n	800644e <prvProcessReceivedCommands+0xde>
 800644a:	b672      	cpsid	i
 800644c:	e7fe      	b.n	800644c <prvProcessReceivedCommands+0xdc>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800644e:	6a3b      	ldr	r3, [r7, #32]
 8006450:	699a      	ldr	r2, [r3, #24]
 8006452:	69fb      	ldr	r3, [r7, #28]
 8006454:	18d1      	adds	r1, r2, r3
 8006456:	69fb      	ldr	r3, [r7, #28]
 8006458:	69fa      	ldr	r2, [r7, #28]
 800645a:	6a38      	ldr	r0, [r7, #32]
 800645c:	f7ff ff46 	bl	80062ec <prvInsertTimerInActiveList>
					break;
 8006460:	e00a      	b.n	8006478 <prvProcessReceivedCommands+0x108>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006462:	6a3b      	ldr	r3, [r7, #32]
 8006464:	222c      	movs	r2, #44	; 0x2c
 8006466:	5c9b      	ldrb	r3, [r3, r2]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d105      	bne.n	8006478 <prvProcessReceivedCommands+0x108>
						{
							vPortFree( pxTimer );
 800646c:	6a3b      	ldr	r3, [r7, #32]
 800646e:	0018      	movs	r0, r3
 8006470:	f000 fa8c 	bl	800698c <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006474:	e000      	b.n	8006478 <prvProcessReceivedCommands+0x108>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006476:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006478:	4b08      	ldr	r3, [pc, #32]	; (800649c <prvProcessReceivedCommands+0x12c>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	2208      	movs	r2, #8
 800647e:	18b9      	adds	r1, r7, r2
 8006480:	2200      	movs	r2, #0
 8006482:	0018      	movs	r0, r3
 8006484:	f7fe fd63 	bl	8004f4e <xQueueReceive>
 8006488:	1e03      	subs	r3, r0, #0
 800648a:	d000      	beq.n	800648e <prvProcessReceivedCommands+0x11e>
 800648c:	e774      	b.n	8006378 <prvProcessReceivedCommands+0x8>
	}
}
 800648e:	46c0      	nop			; (mov r8, r8)
 8006490:	46c0      	nop			; (mov r8, r8)
 8006492:	46bd      	mov	sp, r7
 8006494:	b00b      	add	sp, #44	; 0x2c
 8006496:	bd90      	pop	{r4, r7, pc}
 8006498:	08006da0 	.word	0x08006da0
 800649c:	20000c24 	.word	0x20000c24

080064a0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b088      	sub	sp, #32
 80064a4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80064a6:	e03e      	b.n	8006526 <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80064a8:	4b28      	ldr	r3, [pc, #160]	; (800654c <prvSwitchTimerLists+0xac>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	68db      	ldr	r3, [r3, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80064b2:	4b26      	ldr	r3, [pc, #152]	; (800654c <prvSwitchTimerLists+0xac>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	68db      	ldr	r3, [r3, #12]
 80064b8:	68db      	ldr	r3, [r3, #12]
 80064ba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	3304      	adds	r3, #4
 80064c0:	0018      	movs	r0, r3
 80064c2:	f7fe fa50 	bl	8004966 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ca:	68fa      	ldr	r2, [r7, #12]
 80064cc:	0010      	movs	r0, r2
 80064ce:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	69db      	ldr	r3, [r3, #28]
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	d126      	bne.n	8006526 <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	699b      	ldr	r3, [r3, #24]
 80064dc:	693a      	ldr	r2, [r7, #16]
 80064de:	18d3      	adds	r3, r2, r3
 80064e0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80064e2:	68ba      	ldr	r2, [r7, #8]
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	429a      	cmp	r2, r3
 80064e8:	d90e      	bls.n	8006508 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	68ba      	ldr	r2, [r7, #8]
 80064ee:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	68fa      	ldr	r2, [r7, #12]
 80064f4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80064f6:	4b15      	ldr	r3, [pc, #84]	; (800654c <prvSwitchTimerLists+0xac>)
 80064f8:	681a      	ldr	r2, [r3, #0]
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	3304      	adds	r3, #4
 80064fe:	0019      	movs	r1, r3
 8006500:	0010      	movs	r0, r2
 8006502:	f7fe f9fa 	bl	80048fa <vListInsert>
 8006506:	e00e      	b.n	8006526 <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006508:	693a      	ldr	r2, [r7, #16]
 800650a:	68f8      	ldr	r0, [r7, #12]
 800650c:	2300      	movs	r3, #0
 800650e:	9300      	str	r3, [sp, #0]
 8006510:	2300      	movs	r3, #0
 8006512:	2100      	movs	r1, #0
 8006514:	f7ff fdce 	bl	80060b4 <xTimerGenericCommand>
 8006518:	0003      	movs	r3, r0
 800651a:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d101      	bne.n	8006526 <prvSwitchTimerLists+0x86>
 8006522:	b672      	cpsid	i
 8006524:	e7fe      	b.n	8006524 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006526:	4b09      	ldr	r3, [pc, #36]	; (800654c <prvSwitchTimerLists+0xac>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d1bb      	bne.n	80064a8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006530:	4b06      	ldr	r3, [pc, #24]	; (800654c <prvSwitchTimerLists+0xac>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006536:	4b06      	ldr	r3, [pc, #24]	; (8006550 <prvSwitchTimerLists+0xb0>)
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	4b04      	ldr	r3, [pc, #16]	; (800654c <prvSwitchTimerLists+0xac>)
 800653c:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 800653e:	4b04      	ldr	r3, [pc, #16]	; (8006550 <prvSwitchTimerLists+0xb0>)
 8006540:	697a      	ldr	r2, [r7, #20]
 8006542:	601a      	str	r2, [r3, #0]
}
 8006544:	46c0      	nop			; (mov r8, r8)
 8006546:	46bd      	mov	sp, r7
 8006548:	b006      	add	sp, #24
 800654a:	bd80      	pop	{r7, pc}
 800654c:	20000c1c 	.word	0x20000c1c
 8006550:	20000c20 	.word	0x20000c20

08006554 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b082      	sub	sp, #8
 8006558:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800655a:	f000 f8d9 	bl	8006710 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800655e:	4b16      	ldr	r3, [pc, #88]	; (80065b8 <prvCheckForValidListAndQueue+0x64>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d123      	bne.n	80065ae <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 8006566:	4b15      	ldr	r3, [pc, #84]	; (80065bc <prvCheckForValidListAndQueue+0x68>)
 8006568:	0018      	movs	r0, r3
 800656a:	f7fe f97b 	bl	8004864 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800656e:	4b14      	ldr	r3, [pc, #80]	; (80065c0 <prvCheckForValidListAndQueue+0x6c>)
 8006570:	0018      	movs	r0, r3
 8006572:	f7fe f977 	bl	8004864 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006576:	4b13      	ldr	r3, [pc, #76]	; (80065c4 <prvCheckForValidListAndQueue+0x70>)
 8006578:	4a10      	ldr	r2, [pc, #64]	; (80065bc <prvCheckForValidListAndQueue+0x68>)
 800657a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800657c:	4b12      	ldr	r3, [pc, #72]	; (80065c8 <prvCheckForValidListAndQueue+0x74>)
 800657e:	4a10      	ldr	r2, [pc, #64]	; (80065c0 <prvCheckForValidListAndQueue+0x6c>)
 8006580:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006582:	4b12      	ldr	r3, [pc, #72]	; (80065cc <prvCheckForValidListAndQueue+0x78>)
 8006584:	4a12      	ldr	r2, [pc, #72]	; (80065d0 <prvCheckForValidListAndQueue+0x7c>)
 8006586:	2100      	movs	r1, #0
 8006588:	9100      	str	r1, [sp, #0]
 800658a:	2110      	movs	r1, #16
 800658c:	200a      	movs	r0, #10
 800658e:	f7fe fa66 	bl	8004a5e <xQueueGenericCreateStatic>
 8006592:	0002      	movs	r2, r0
 8006594:	4b08      	ldr	r3, [pc, #32]	; (80065b8 <prvCheckForValidListAndQueue+0x64>)
 8006596:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006598:	4b07      	ldr	r3, [pc, #28]	; (80065b8 <prvCheckForValidListAndQueue+0x64>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d006      	beq.n	80065ae <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80065a0:	4b05      	ldr	r3, [pc, #20]	; (80065b8 <prvCheckForValidListAndQueue+0x64>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a0b      	ldr	r2, [pc, #44]	; (80065d4 <prvCheckForValidListAndQueue+0x80>)
 80065a6:	0011      	movs	r1, r2
 80065a8:	0018      	movs	r0, r3
 80065aa:	f7fe fea3 	bl	80052f4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80065ae:	f000 f8c1 	bl	8006734 <vPortExitCritical>
}
 80065b2:	46c0      	nop			; (mov r8, r8)
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}
 80065b8:	20000c24 	.word	0x20000c24
 80065bc:	20000bf4 	.word	0x20000bf4
 80065c0:	20000c08 	.word	0x20000c08
 80065c4:	20000c1c 	.word	0x20000c1c
 80065c8:	20000c20 	.word	0x20000c20
 80065cc:	20000cd0 	.word	0x20000cd0
 80065d0:	20000c30 	.word	0x20000c30
 80065d4:	08006ca4 	.word	0x08006ca4

080065d8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b084      	sub	sp, #16
 80065dc:	af00      	add	r7, sp, #0
 80065de:	60f8      	str	r0, [r7, #12]
 80065e0:	60b9      	str	r1, [r7, #8]
 80065e2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	3b04      	subs	r3, #4
 80065e8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2280      	movs	r2, #128	; 0x80
 80065ee:	0452      	lsls	r2, r2, #17
 80065f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	3b04      	subs	r3, #4
 80065f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 80065f8:	68ba      	ldr	r2, [r7, #8]
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	3b04      	subs	r3, #4
 8006602:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006604:	4a08      	ldr	r2, [pc, #32]	; (8006628 <pxPortInitialiseStack+0x50>)
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	3b14      	subs	r3, #20
 800660e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006610:	687a      	ldr	r2, [r7, #4]
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	3b20      	subs	r3, #32
 800661a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800661c:	68fb      	ldr	r3, [r7, #12]
}
 800661e:	0018      	movs	r0, r3
 8006620:	46bd      	mov	sp, r7
 8006622:	b004      	add	sp, #16
 8006624:	bd80      	pop	{r7, pc}
 8006626:	46c0      	nop			; (mov r8, r8)
 8006628:	0800662d 	.word	0x0800662d

0800662c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b082      	sub	sp, #8
 8006630:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006632:	2300      	movs	r3, #0
 8006634:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006636:	4b08      	ldr	r3, [pc, #32]	; (8006658 <prvTaskExitError+0x2c>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	3301      	adds	r3, #1
 800663c:	d001      	beq.n	8006642 <prvTaskExitError+0x16>
 800663e:	b672      	cpsid	i
 8006640:	e7fe      	b.n	8006640 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8006642:	b672      	cpsid	i
	while( ulDummy == 0 )
 8006644:	46c0      	nop			; (mov r8, r8)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d0fc      	beq.n	8006646 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800664c:	46c0      	nop			; (mov r8, r8)
 800664e:	46c0      	nop			; (mov r8, r8)
 8006650:	46bd      	mov	sp, r7
 8006652:	b002      	add	sp, #8
 8006654:	bd80      	pop	{r7, pc}
 8006656:	46c0      	nop			; (mov r8, r8)
 8006658:	2000000c 	.word	0x2000000c

0800665c <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 800665c:	b580      	push	{r7, lr}
 800665e:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8006660:	46c0      	nop			; (mov r8, r8)
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}
	...

08006670 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8006670:	4a0b      	ldr	r2, [pc, #44]	; (80066a0 <pxCurrentTCBConst2>)
 8006672:	6813      	ldr	r3, [r2, #0]
 8006674:	6818      	ldr	r0, [r3, #0]
 8006676:	3020      	adds	r0, #32
 8006678:	f380 8809 	msr	PSP, r0
 800667c:	2002      	movs	r0, #2
 800667e:	f380 8814 	msr	CONTROL, r0
 8006682:	f3bf 8f6f 	isb	sy
 8006686:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8006688:	46ae      	mov	lr, r5
 800668a:	bc08      	pop	{r3}
 800668c:	bc04      	pop	{r2}
 800668e:	b662      	cpsie	i
 8006690:	4718      	bx	r3
 8006692:	46c0      	nop			; (mov r8, r8)
 8006694:	46c0      	nop			; (mov r8, r8)
 8006696:	46c0      	nop			; (mov r8, r8)
 8006698:	46c0      	nop			; (mov r8, r8)
 800669a:	46c0      	nop			; (mov r8, r8)
 800669c:	46c0      	nop			; (mov r8, r8)
 800669e:	46c0      	nop			; (mov r8, r8)

080066a0 <pxCurrentTCBConst2>:
 80066a0:	200006f4 	.word	0x200006f4
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 80066a4:	46c0      	nop			; (mov r8, r8)
 80066a6:	46c0      	nop			; (mov r8, r8)

080066a8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 80066ac:	4b0e      	ldr	r3, [pc, #56]	; (80066e8 <xPortStartScheduler+0x40>)
 80066ae:	681a      	ldr	r2, [r3, #0]
 80066b0:	4b0d      	ldr	r3, [pc, #52]	; (80066e8 <xPortStartScheduler+0x40>)
 80066b2:	21ff      	movs	r1, #255	; 0xff
 80066b4:	0409      	lsls	r1, r1, #16
 80066b6:	430a      	orrs	r2, r1
 80066b8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 80066ba:	4b0b      	ldr	r3, [pc, #44]	; (80066e8 <xPortStartScheduler+0x40>)
 80066bc:	681a      	ldr	r2, [r3, #0]
 80066be:	4b0a      	ldr	r3, [pc, #40]	; (80066e8 <xPortStartScheduler+0x40>)
 80066c0:	21ff      	movs	r1, #255	; 0xff
 80066c2:	0609      	lsls	r1, r1, #24
 80066c4:	430a      	orrs	r2, r1
 80066c6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 80066c8:	f000 f898 	bl	80067fc <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80066cc:	4b07      	ldr	r3, [pc, #28]	; (80066ec <xPortStartScheduler+0x44>)
 80066ce:	2200      	movs	r2, #0
 80066d0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 80066d2:	f7ff ffcd 	bl	8006670 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80066d6:	f7ff f9b5 	bl	8005a44 <vTaskSwitchContext>
	prvTaskExitError();
 80066da:	f7ff ffa7 	bl	800662c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80066de:	2300      	movs	r3, #0
}
 80066e0:	0018      	movs	r0, r3
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}
 80066e6:	46c0      	nop			; (mov r8, r8)
 80066e8:	e000ed20 	.word	0xe000ed20
 80066ec:	2000000c 	.word	0x2000000c

080066f0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 80066f4:	4b05      	ldr	r3, [pc, #20]	; (800670c <vPortYield+0x1c>)
 80066f6:	2280      	movs	r2, #128	; 0x80
 80066f8:	0552      	lsls	r2, r2, #21
 80066fa:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 80066fc:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8006700:	f3bf 8f6f 	isb	sy
}
 8006704:	46c0      	nop			; (mov r8, r8)
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}
 800670a:	46c0      	nop			; (mov r8, r8)
 800670c:	e000ed04 	.word	0xe000ed04

08006710 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006710:	b580      	push	{r7, lr}
 8006712:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8006714:	b672      	cpsid	i
    uxCriticalNesting++;
 8006716:	4b06      	ldr	r3, [pc, #24]	; (8006730 <vPortEnterCritical+0x20>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	1c5a      	adds	r2, r3, #1
 800671c:	4b04      	ldr	r3, [pc, #16]	; (8006730 <vPortEnterCritical+0x20>)
 800671e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8006720:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8006724:	f3bf 8f6f 	isb	sy
}
 8006728:	46c0      	nop			; (mov r8, r8)
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}
 800672e:	46c0      	nop			; (mov r8, r8)
 8006730:	2000000c 	.word	0x2000000c

08006734 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006734:	b580      	push	{r7, lr}
 8006736:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006738:	4b09      	ldr	r3, [pc, #36]	; (8006760 <vPortExitCritical+0x2c>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d101      	bne.n	8006744 <vPortExitCritical+0x10>
 8006740:	b672      	cpsid	i
 8006742:	e7fe      	b.n	8006742 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8006744:	4b06      	ldr	r3, [pc, #24]	; (8006760 <vPortExitCritical+0x2c>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	1e5a      	subs	r2, r3, #1
 800674a:	4b05      	ldr	r3, [pc, #20]	; (8006760 <vPortExitCritical+0x2c>)
 800674c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 800674e:	4b04      	ldr	r3, [pc, #16]	; (8006760 <vPortExitCritical+0x2c>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d100      	bne.n	8006758 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8006756:	b662      	cpsie	i
    }
}
 8006758:	46c0      	nop			; (mov r8, r8)
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}
 800675e:	46c0      	nop			; (mov r8, r8)
 8006760:	2000000c 	.word	0x2000000c

08006764 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8006764:	f3ef 8010 	mrs	r0, PRIMASK
 8006768:	b672      	cpsid	i
 800676a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 800676c:	46c0      	nop			; (mov r8, r8)
 800676e:	0018      	movs	r0, r3

08006770 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8006770:	f380 8810 	msr	PRIMASK, r0
 8006774:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8006776:	46c0      	nop			; (mov r8, r8)
	...

08006780 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006780:	f3ef 8009 	mrs	r0, PSP
 8006784:	4b0e      	ldr	r3, [pc, #56]	; (80067c0 <pxCurrentTCBConst>)
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	3820      	subs	r0, #32
 800678a:	6010      	str	r0, [r2, #0]
 800678c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800678e:	4644      	mov	r4, r8
 8006790:	464d      	mov	r5, r9
 8006792:	4656      	mov	r6, sl
 8006794:	465f      	mov	r7, fp
 8006796:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8006798:	b508      	push	{r3, lr}
 800679a:	b672      	cpsid	i
 800679c:	f7ff f952 	bl	8005a44 <vTaskSwitchContext>
 80067a0:	b662      	cpsie	i
 80067a2:	bc0c      	pop	{r2, r3}
 80067a4:	6811      	ldr	r1, [r2, #0]
 80067a6:	6808      	ldr	r0, [r1, #0]
 80067a8:	3010      	adds	r0, #16
 80067aa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80067ac:	46a0      	mov	r8, r4
 80067ae:	46a9      	mov	r9, r5
 80067b0:	46b2      	mov	sl, r6
 80067b2:	46bb      	mov	fp, r7
 80067b4:	f380 8809 	msr	PSP, r0
 80067b8:	3820      	subs	r0, #32
 80067ba:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80067bc:	4718      	bx	r3
 80067be:	46c0      	nop			; (mov r8, r8)

080067c0 <pxCurrentTCBConst>:
 80067c0:	200006f4 	.word	0x200006f4
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 80067c4:	46c0      	nop			; (mov r8, r8)
 80067c6:	46c0      	nop			; (mov r8, r8)

080067c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b082      	sub	sp, #8
 80067cc:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 80067ce:	f7ff ffc9 	bl	8006764 <ulSetInterruptMaskFromISR>
 80067d2:	0003      	movs	r3, r0
 80067d4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80067d6:	f7ff f881 	bl	80058dc <xTaskIncrementTick>
 80067da:	1e03      	subs	r3, r0, #0
 80067dc:	d003      	beq.n	80067e6 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 80067de:	4b06      	ldr	r3, [pc, #24]	; (80067f8 <xPortSysTickHandler+0x30>)
 80067e0:	2280      	movs	r2, #128	; 0x80
 80067e2:	0552      	lsls	r2, r2, #21
 80067e4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	0018      	movs	r0, r3
 80067ea:	f7ff ffc1 	bl	8006770 <vClearInterruptMaskFromISR>
}
 80067ee:	46c0      	nop			; (mov r8, r8)
 80067f0:	46bd      	mov	sp, r7
 80067f2:	b002      	add	sp, #8
 80067f4:	bd80      	pop	{r7, pc}
 80067f6:	46c0      	nop			; (mov r8, r8)
 80067f8:	e000ed04 	.word	0xe000ed04

080067fc <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8006800:	4b0b      	ldr	r3, [pc, #44]	; (8006830 <prvSetupTimerInterrupt+0x34>)
 8006802:	2200      	movs	r2, #0
 8006804:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8006806:	4b0b      	ldr	r3, [pc, #44]	; (8006834 <prvSetupTimerInterrupt+0x38>)
 8006808:	2200      	movs	r2, #0
 800680a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800680c:	4b0a      	ldr	r3, [pc, #40]	; (8006838 <prvSetupTimerInterrupt+0x3c>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	22fa      	movs	r2, #250	; 0xfa
 8006812:	0091      	lsls	r1, r2, #2
 8006814:	0018      	movs	r0, r3
 8006816:	f7f9 fc77 	bl	8000108 <__udivsi3>
 800681a:	0003      	movs	r3, r0
 800681c:	001a      	movs	r2, r3
 800681e:	4b07      	ldr	r3, [pc, #28]	; (800683c <prvSetupTimerInterrupt+0x40>)
 8006820:	3a01      	subs	r2, #1
 8006822:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8006824:	4b02      	ldr	r3, [pc, #8]	; (8006830 <prvSetupTimerInterrupt+0x34>)
 8006826:	2207      	movs	r2, #7
 8006828:	601a      	str	r2, [r3, #0]
}
 800682a:	46c0      	nop			; (mov r8, r8)
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}
 8006830:	e000e010 	.word	0xe000e010
 8006834:	e000e018 	.word	0xe000e018
 8006838:	20000000 	.word	0x20000000
 800683c:	e000e014 	.word	0xe000e014

08006840 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b086      	sub	sp, #24
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006848:	2300      	movs	r3, #0
 800684a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800684c:	f7fe ffa0 	bl	8005790 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006850:	4b49      	ldr	r3, [pc, #292]	; (8006978 <pvPortMalloc+0x138>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d101      	bne.n	800685c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006858:	f000 f8e0 	bl	8006a1c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800685c:	4b47      	ldr	r3, [pc, #284]	; (800697c <pvPortMalloc+0x13c>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	687a      	ldr	r2, [r7, #4]
 8006862:	4013      	ands	r3, r2
 8006864:	d000      	beq.n	8006868 <pvPortMalloc+0x28>
 8006866:	e079      	b.n	800695c <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d012      	beq.n	8006894 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 800686e:	2208      	movs	r2, #8
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	189b      	adds	r3, r3, r2
 8006874:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2207      	movs	r2, #7
 800687a:	4013      	ands	r3, r2
 800687c:	d00a      	beq.n	8006894 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2207      	movs	r2, #7
 8006882:	4393      	bics	r3, r2
 8006884:	3308      	adds	r3, #8
 8006886:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2207      	movs	r2, #7
 800688c:	4013      	ands	r3, r2
 800688e:	d001      	beq.n	8006894 <pvPortMalloc+0x54>
 8006890:	b672      	cpsid	i
 8006892:	e7fe      	b.n	8006892 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d060      	beq.n	800695c <pvPortMalloc+0x11c>
 800689a:	4b39      	ldr	r3, [pc, #228]	; (8006980 <pvPortMalloc+0x140>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	687a      	ldr	r2, [r7, #4]
 80068a0:	429a      	cmp	r2, r3
 80068a2:	d85b      	bhi.n	800695c <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80068a4:	4b37      	ldr	r3, [pc, #220]	; (8006984 <pvPortMalloc+0x144>)
 80068a6:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 80068a8:	4b36      	ldr	r3, [pc, #216]	; (8006984 <pvPortMalloc+0x144>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80068ae:	e004      	b.n	80068ba <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	687a      	ldr	r2, [r7, #4]
 80068c0:	429a      	cmp	r2, r3
 80068c2:	d903      	bls.n	80068cc <pvPortMalloc+0x8c>
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d1f1      	bne.n	80068b0 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80068cc:	4b2a      	ldr	r3, [pc, #168]	; (8006978 <pvPortMalloc+0x138>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	697a      	ldr	r2, [r7, #20]
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d042      	beq.n	800695c <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	2208      	movs	r2, #8
 80068dc:	189b      	adds	r3, r3, r2
 80068de:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	681a      	ldr	r2, [r3, #0]
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	685a      	ldr	r2, [r3, #4]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	1ad2      	subs	r2, r2, r3
 80068f0:	2308      	movs	r3, #8
 80068f2:	005b      	lsls	r3, r3, #1
 80068f4:	429a      	cmp	r2, r3
 80068f6:	d916      	bls.n	8006926 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80068f8:	697a      	ldr	r2, [r7, #20]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	18d3      	adds	r3, r2, r3
 80068fe:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	2207      	movs	r2, #7
 8006904:	4013      	ands	r3, r2
 8006906:	d001      	beq.n	800690c <pvPortMalloc+0xcc>
 8006908:	b672      	cpsid	i
 800690a:	e7fe      	b.n	800690a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	685a      	ldr	r2, [r3, #4]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	1ad2      	subs	r2, r2, r3
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	687a      	ldr	r2, [r7, #4]
 800691c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	0018      	movs	r0, r3
 8006922:	f000 f8db 	bl	8006adc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006926:	4b16      	ldr	r3, [pc, #88]	; (8006980 <pvPortMalloc+0x140>)
 8006928:	681a      	ldr	r2, [r3, #0]
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	1ad2      	subs	r2, r2, r3
 8006930:	4b13      	ldr	r3, [pc, #76]	; (8006980 <pvPortMalloc+0x140>)
 8006932:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006934:	4b12      	ldr	r3, [pc, #72]	; (8006980 <pvPortMalloc+0x140>)
 8006936:	681a      	ldr	r2, [r3, #0]
 8006938:	4b13      	ldr	r3, [pc, #76]	; (8006988 <pvPortMalloc+0x148>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	429a      	cmp	r2, r3
 800693e:	d203      	bcs.n	8006948 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006940:	4b0f      	ldr	r3, [pc, #60]	; (8006980 <pvPortMalloc+0x140>)
 8006942:	681a      	ldr	r2, [r3, #0]
 8006944:	4b10      	ldr	r3, [pc, #64]	; (8006988 <pvPortMalloc+0x148>)
 8006946:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	685a      	ldr	r2, [r3, #4]
 800694c:	4b0b      	ldr	r3, [pc, #44]	; (800697c <pvPortMalloc+0x13c>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	431a      	orrs	r2, r3
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	2200      	movs	r2, #0
 800695a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800695c:	f7fe ff24 	bl	80057a8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2207      	movs	r2, #7
 8006964:	4013      	ands	r3, r2
 8006966:	d001      	beq.n	800696c <pvPortMalloc+0x12c>
 8006968:	b672      	cpsid	i
 800696a:	e7fe      	b.n	800696a <pvPortMalloc+0x12a>
	return pvReturn;
 800696c:	68fb      	ldr	r3, [r7, #12]
}
 800696e:	0018      	movs	r0, r3
 8006970:	46bd      	mov	sp, r7
 8006972:	b006      	add	sp, #24
 8006974:	bd80      	pop	{r7, pc}
 8006976:	46c0      	nop			; (mov r8, r8)
 8006978:	20001928 	.word	0x20001928
 800697c:	20001934 	.word	0x20001934
 8006980:	2000192c 	.word	0x2000192c
 8006984:	20001920 	.word	0x20001920
 8006988:	20001930 	.word	0x20001930

0800698c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b084      	sub	sp, #16
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d035      	beq.n	8006a0a <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800699e:	2308      	movs	r3, #8
 80069a0:	425b      	negs	r3, r3
 80069a2:	68fa      	ldr	r2, [r7, #12]
 80069a4:	18d3      	adds	r3, r2, r3
 80069a6:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	685a      	ldr	r2, [r3, #4]
 80069b0:	4b18      	ldr	r3, [pc, #96]	; (8006a14 <vPortFree+0x88>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4013      	ands	r3, r2
 80069b6:	d101      	bne.n	80069bc <vPortFree+0x30>
 80069b8:	b672      	cpsid	i
 80069ba:	e7fe      	b.n	80069ba <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d001      	beq.n	80069c8 <vPortFree+0x3c>
 80069c4:	b672      	cpsid	i
 80069c6:	e7fe      	b.n	80069c6 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	685a      	ldr	r2, [r3, #4]
 80069cc:	4b11      	ldr	r3, [pc, #68]	; (8006a14 <vPortFree+0x88>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4013      	ands	r3, r2
 80069d2:	d01a      	beq.n	8006a0a <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d116      	bne.n	8006a0a <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	685a      	ldr	r2, [r3, #4]
 80069e0:	4b0c      	ldr	r3, [pc, #48]	; (8006a14 <vPortFree+0x88>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	43db      	mvns	r3, r3
 80069e6:	401a      	ands	r2, r3
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80069ec:	f7fe fed0 	bl	8005790 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	685a      	ldr	r2, [r3, #4]
 80069f4:	4b08      	ldr	r3, [pc, #32]	; (8006a18 <vPortFree+0x8c>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	18d2      	adds	r2, r2, r3
 80069fa:	4b07      	ldr	r3, [pc, #28]	; (8006a18 <vPortFree+0x8c>)
 80069fc:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	0018      	movs	r0, r3
 8006a02:	f000 f86b 	bl	8006adc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006a06:	f7fe fecf 	bl	80057a8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006a0a:	46c0      	nop			; (mov r8, r8)
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	b004      	add	sp, #16
 8006a10:	bd80      	pop	{r7, pc}
 8006a12:	46c0      	nop			; (mov r8, r8)
 8006a14:	20001934 	.word	0x20001934
 8006a18:	2000192c 	.word	0x2000192c

08006a1c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b084      	sub	sp, #16
 8006a20:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006a22:	23c0      	movs	r3, #192	; 0xc0
 8006a24:	011b      	lsls	r3, r3, #4
 8006a26:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006a28:	4b26      	ldr	r3, [pc, #152]	; (8006ac4 <prvHeapInit+0xa8>)
 8006a2a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	2207      	movs	r2, #7
 8006a30:	4013      	ands	r3, r2
 8006a32:	d00c      	beq.n	8006a4e <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	3307      	adds	r3, #7
 8006a38:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2207      	movs	r2, #7
 8006a3e:	4393      	bics	r3, r2
 8006a40:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006a42:	68ba      	ldr	r2, [r7, #8]
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	1ad2      	subs	r2, r2, r3
 8006a48:	4b1e      	ldr	r3, [pc, #120]	; (8006ac4 <prvHeapInit+0xa8>)
 8006a4a:	18d3      	adds	r3, r2, r3
 8006a4c:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006a52:	4b1d      	ldr	r3, [pc, #116]	; (8006ac8 <prvHeapInit+0xac>)
 8006a54:	687a      	ldr	r2, [r7, #4]
 8006a56:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006a58:	4b1b      	ldr	r3, [pc, #108]	; (8006ac8 <prvHeapInit+0xac>)
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	68ba      	ldr	r2, [r7, #8]
 8006a62:	18d3      	adds	r3, r2, r3
 8006a64:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006a66:	2208      	movs	r2, #8
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	1a9b      	subs	r3, r3, r2
 8006a6c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2207      	movs	r2, #7
 8006a72:	4393      	bics	r3, r2
 8006a74:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006a76:	68fa      	ldr	r2, [r7, #12]
 8006a78:	4b14      	ldr	r3, [pc, #80]	; (8006acc <prvHeapInit+0xb0>)
 8006a7a:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8006a7c:	4b13      	ldr	r3, [pc, #76]	; (8006acc <prvHeapInit+0xb0>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	2200      	movs	r2, #0
 8006a82:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006a84:	4b11      	ldr	r3, [pc, #68]	; (8006acc <prvHeapInit+0xb0>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	68fa      	ldr	r2, [r7, #12]
 8006a94:	1ad2      	subs	r2, r2, r3
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006a9a:	4b0c      	ldr	r3, [pc, #48]	; (8006acc <prvHeapInit+0xb0>)
 8006a9c:	681a      	ldr	r2, [r3, #0]
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	685a      	ldr	r2, [r3, #4]
 8006aa6:	4b0a      	ldr	r3, [pc, #40]	; (8006ad0 <prvHeapInit+0xb4>)
 8006aa8:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	685a      	ldr	r2, [r3, #4]
 8006aae:	4b09      	ldr	r3, [pc, #36]	; (8006ad4 <prvHeapInit+0xb8>)
 8006ab0:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006ab2:	4b09      	ldr	r3, [pc, #36]	; (8006ad8 <prvHeapInit+0xbc>)
 8006ab4:	2280      	movs	r2, #128	; 0x80
 8006ab6:	0612      	lsls	r2, r2, #24
 8006ab8:	601a      	str	r2, [r3, #0]
}
 8006aba:	46c0      	nop			; (mov r8, r8)
 8006abc:	46bd      	mov	sp, r7
 8006abe:	b004      	add	sp, #16
 8006ac0:	bd80      	pop	{r7, pc}
 8006ac2:	46c0      	nop			; (mov r8, r8)
 8006ac4:	20000d20 	.word	0x20000d20
 8006ac8:	20001920 	.word	0x20001920
 8006acc:	20001928 	.word	0x20001928
 8006ad0:	20001930 	.word	0x20001930
 8006ad4:	2000192c 	.word	0x2000192c
 8006ad8:	20001934 	.word	0x20001934

08006adc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b084      	sub	sp, #16
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006ae4:	4b27      	ldr	r3, [pc, #156]	; (8006b84 <prvInsertBlockIntoFreeList+0xa8>)
 8006ae6:	60fb      	str	r3, [r7, #12]
 8006ae8:	e002      	b.n	8006af0 <prvInsertBlockIntoFreeList+0x14>
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	60fb      	str	r3, [r7, #12]
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	687a      	ldr	r2, [r7, #4]
 8006af6:	429a      	cmp	r2, r3
 8006af8:	d8f7      	bhi.n	8006aea <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	68ba      	ldr	r2, [r7, #8]
 8006b04:	18d3      	adds	r3, r2, r3
 8006b06:	687a      	ldr	r2, [r7, #4]
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d108      	bne.n	8006b1e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	685a      	ldr	r2, [r3, #4]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	18d2      	adds	r2, r2, r3
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	685b      	ldr	r3, [r3, #4]
 8006b26:	68ba      	ldr	r2, [r7, #8]
 8006b28:	18d2      	adds	r2, r2, r3
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	429a      	cmp	r2, r3
 8006b30:	d118      	bne.n	8006b64 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681a      	ldr	r2, [r3, #0]
 8006b36:	4b14      	ldr	r3, [pc, #80]	; (8006b88 <prvInsertBlockIntoFreeList+0xac>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	d00d      	beq.n	8006b5a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	685a      	ldr	r2, [r3, #4]
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	18d2      	adds	r2, r2, r3
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	601a      	str	r2, [r3, #0]
 8006b58:	e008      	b.n	8006b6c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006b5a:	4b0b      	ldr	r3, [pc, #44]	; (8006b88 <prvInsertBlockIntoFreeList+0xac>)
 8006b5c:	681a      	ldr	r2, [r3, #0]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	601a      	str	r2, [r3, #0]
 8006b62:	e003      	b.n	8006b6c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681a      	ldr	r2, [r3, #0]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006b6c:	68fa      	ldr	r2, [r7, #12]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	429a      	cmp	r2, r3
 8006b72:	d002      	beq.n	8006b7a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	687a      	ldr	r2, [r7, #4]
 8006b78:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b7a:	46c0      	nop			; (mov r8, r8)
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	b004      	add	sp, #16
 8006b80:	bd80      	pop	{r7, pc}
 8006b82:	46c0      	nop			; (mov r8, r8)
 8006b84:	20001920 	.word	0x20001920
 8006b88:	20001928 	.word	0x20001928

08006b8c <__libc_init_array>:
 8006b8c:	b570      	push	{r4, r5, r6, lr}
 8006b8e:	2600      	movs	r6, #0
 8006b90:	4d0c      	ldr	r5, [pc, #48]	; (8006bc4 <__libc_init_array+0x38>)
 8006b92:	4c0d      	ldr	r4, [pc, #52]	; (8006bc8 <__libc_init_array+0x3c>)
 8006b94:	1b64      	subs	r4, r4, r5
 8006b96:	10a4      	asrs	r4, r4, #2
 8006b98:	42a6      	cmp	r6, r4
 8006b9a:	d109      	bne.n	8006bb0 <__libc_init_array+0x24>
 8006b9c:	2600      	movs	r6, #0
 8006b9e:	f000 f82b 	bl	8006bf8 <_init>
 8006ba2:	4d0a      	ldr	r5, [pc, #40]	; (8006bcc <__libc_init_array+0x40>)
 8006ba4:	4c0a      	ldr	r4, [pc, #40]	; (8006bd0 <__libc_init_array+0x44>)
 8006ba6:	1b64      	subs	r4, r4, r5
 8006ba8:	10a4      	asrs	r4, r4, #2
 8006baa:	42a6      	cmp	r6, r4
 8006bac:	d105      	bne.n	8006bba <__libc_init_array+0x2e>
 8006bae:	bd70      	pop	{r4, r5, r6, pc}
 8006bb0:	00b3      	lsls	r3, r6, #2
 8006bb2:	58eb      	ldr	r3, [r5, r3]
 8006bb4:	4798      	blx	r3
 8006bb6:	3601      	adds	r6, #1
 8006bb8:	e7ee      	b.n	8006b98 <__libc_init_array+0xc>
 8006bba:	00b3      	lsls	r3, r6, #2
 8006bbc:	58eb      	ldr	r3, [r5, r3]
 8006bbe:	4798      	blx	r3
 8006bc0:	3601      	adds	r6, #1
 8006bc2:	e7f2      	b.n	8006baa <__libc_init_array+0x1e>
 8006bc4:	08006dc8 	.word	0x08006dc8
 8006bc8:	08006dc8 	.word	0x08006dc8
 8006bcc:	08006dc8 	.word	0x08006dc8
 8006bd0:	08006dcc 	.word	0x08006dcc

08006bd4 <memcpy>:
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	b510      	push	{r4, lr}
 8006bd8:	429a      	cmp	r2, r3
 8006bda:	d100      	bne.n	8006bde <memcpy+0xa>
 8006bdc:	bd10      	pop	{r4, pc}
 8006bde:	5ccc      	ldrb	r4, [r1, r3]
 8006be0:	54c4      	strb	r4, [r0, r3]
 8006be2:	3301      	adds	r3, #1
 8006be4:	e7f8      	b.n	8006bd8 <memcpy+0x4>

08006be6 <memset>:
 8006be6:	0003      	movs	r3, r0
 8006be8:	1882      	adds	r2, r0, r2
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d100      	bne.n	8006bf0 <memset+0xa>
 8006bee:	4770      	bx	lr
 8006bf0:	7019      	strb	r1, [r3, #0]
 8006bf2:	3301      	adds	r3, #1
 8006bf4:	e7f9      	b.n	8006bea <memset+0x4>
	...

08006bf8 <_init>:
 8006bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bfa:	46c0      	nop			; (mov r8, r8)
 8006bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bfe:	bc08      	pop	{r3}
 8006c00:	469e      	mov	lr, r3
 8006c02:	4770      	bx	lr

08006c04 <_fini>:
 8006c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c06:	46c0      	nop			; (mov r8, r8)
 8006c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c0a:	bc08      	pop	{r3}
 8006c0c:	469e      	mov	lr, r3
 8006c0e:	4770      	bx	lr
