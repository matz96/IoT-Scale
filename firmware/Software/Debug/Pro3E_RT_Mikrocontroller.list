
Pro3E_RT_Mikrocontroller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009528  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000080c  080095e8  080095e8  000195e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009df4  08009df4  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  08009df4  08009df4  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009df4  08009df4  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009df4  08009df4  00019df4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009df8  08009df8  00019df8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08009dfc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001fa0  20000080  08009e7c  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002020  08009e7c  00022020  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d9ab  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f56  00000000  00000000  0003da53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001698  00000000  00000000  000419b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014b8  00000000  00000000  00043048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000146d7  00000000  00000000  00044500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a8e2  00000000  00000000  00058bd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00073c59  00000000  00000000  000734b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e7112  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000566c  00000000  00000000  000e7168  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000080 	.word	0x20000080
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080095d0 	.word	0x080095d0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000084 	.word	0x20000084
 8000104:	080095d0 	.word	0x080095d0

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_cfrcmple>:
 8000234:	4684      	mov	ip, r0
 8000236:	1c08      	adds	r0, r1, #0
 8000238:	4661      	mov	r1, ip
 800023a:	e7ff      	b.n	800023c <__aeabi_cfcmpeq>

0800023c <__aeabi_cfcmpeq>:
 800023c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800023e:	f000 fb67 	bl	8000910 <__lesf2>
 8000242:	2800      	cmp	r0, #0
 8000244:	d401      	bmi.n	800024a <__aeabi_cfcmpeq+0xe>
 8000246:	2100      	movs	r1, #0
 8000248:	42c8      	cmn	r0, r1
 800024a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800024c <__aeabi_fcmpeq>:
 800024c:	b510      	push	{r4, lr}
 800024e:	f000 faeb 	bl	8000828 <__eqsf2>
 8000252:	4240      	negs	r0, r0
 8000254:	3001      	adds	r0, #1
 8000256:	bd10      	pop	{r4, pc}

08000258 <__aeabi_fcmplt>:
 8000258:	b510      	push	{r4, lr}
 800025a:	f000 fb59 	bl	8000910 <__lesf2>
 800025e:	2800      	cmp	r0, #0
 8000260:	db01      	blt.n	8000266 <__aeabi_fcmplt+0xe>
 8000262:	2000      	movs	r0, #0
 8000264:	bd10      	pop	{r4, pc}
 8000266:	2001      	movs	r0, #1
 8000268:	bd10      	pop	{r4, pc}
 800026a:	46c0      	nop			; (mov r8, r8)

0800026c <__aeabi_fcmple>:
 800026c:	b510      	push	{r4, lr}
 800026e:	f000 fb4f 	bl	8000910 <__lesf2>
 8000272:	2800      	cmp	r0, #0
 8000274:	dd01      	ble.n	800027a <__aeabi_fcmple+0xe>
 8000276:	2000      	movs	r0, #0
 8000278:	bd10      	pop	{r4, pc}
 800027a:	2001      	movs	r0, #1
 800027c:	bd10      	pop	{r4, pc}
 800027e:	46c0      	nop			; (mov r8, r8)

08000280 <__aeabi_fcmpgt>:
 8000280:	b510      	push	{r4, lr}
 8000282:	f000 faf9 	bl	8000878 <__gesf2>
 8000286:	2800      	cmp	r0, #0
 8000288:	dc01      	bgt.n	800028e <__aeabi_fcmpgt+0xe>
 800028a:	2000      	movs	r0, #0
 800028c:	bd10      	pop	{r4, pc}
 800028e:	2001      	movs	r0, #1
 8000290:	bd10      	pop	{r4, pc}
 8000292:	46c0      	nop			; (mov r8, r8)

08000294 <__aeabi_fcmpge>:
 8000294:	b510      	push	{r4, lr}
 8000296:	f000 faef 	bl	8000878 <__gesf2>
 800029a:	2800      	cmp	r0, #0
 800029c:	da01      	bge.n	80002a2 <__aeabi_fcmpge+0xe>
 800029e:	2000      	movs	r0, #0
 80002a0:	bd10      	pop	{r4, pc}
 80002a2:	2001      	movs	r0, #1
 80002a4:	bd10      	pop	{r4, pc}
 80002a6:	46c0      	nop			; (mov r8, r8)

080002a8 <__aeabi_f2uiz>:
 80002a8:	219e      	movs	r1, #158	; 0x9e
 80002aa:	b510      	push	{r4, lr}
 80002ac:	05c9      	lsls	r1, r1, #23
 80002ae:	1c04      	adds	r4, r0, #0
 80002b0:	f7ff fff0 	bl	8000294 <__aeabi_fcmpge>
 80002b4:	2800      	cmp	r0, #0
 80002b6:	d103      	bne.n	80002c0 <__aeabi_f2uiz+0x18>
 80002b8:	1c20      	adds	r0, r4, #0
 80002ba:	f000 fe55 	bl	8000f68 <__aeabi_f2iz>
 80002be:	bd10      	pop	{r4, pc}
 80002c0:	219e      	movs	r1, #158	; 0x9e
 80002c2:	1c20      	adds	r0, r4, #0
 80002c4:	05c9      	lsls	r1, r1, #23
 80002c6:	f000 fc87 	bl	8000bd8 <__aeabi_fsub>
 80002ca:	f000 fe4d 	bl	8000f68 <__aeabi_f2iz>
 80002ce:	2380      	movs	r3, #128	; 0x80
 80002d0:	061b      	lsls	r3, r3, #24
 80002d2:	469c      	mov	ip, r3
 80002d4:	4460      	add	r0, ip
 80002d6:	e7f2      	b.n	80002be <__aeabi_f2uiz+0x16>

080002d8 <__aeabi_fadd>:
 80002d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002da:	4646      	mov	r6, r8
 80002dc:	46d6      	mov	lr, sl
 80002de:	464f      	mov	r7, r9
 80002e0:	024d      	lsls	r5, r1, #9
 80002e2:	0242      	lsls	r2, r0, #9
 80002e4:	b5c0      	push	{r6, r7, lr}
 80002e6:	0a52      	lsrs	r2, r2, #9
 80002e8:	0a6e      	lsrs	r6, r5, #9
 80002ea:	0047      	lsls	r7, r0, #1
 80002ec:	46b0      	mov	r8, r6
 80002ee:	0e3f      	lsrs	r7, r7, #24
 80002f0:	004e      	lsls	r6, r1, #1
 80002f2:	0fc4      	lsrs	r4, r0, #31
 80002f4:	00d0      	lsls	r0, r2, #3
 80002f6:	4694      	mov	ip, r2
 80002f8:	003b      	movs	r3, r7
 80002fa:	4682      	mov	sl, r0
 80002fc:	0e36      	lsrs	r6, r6, #24
 80002fe:	0fc9      	lsrs	r1, r1, #31
 8000300:	09ad      	lsrs	r5, r5, #6
 8000302:	428c      	cmp	r4, r1
 8000304:	d06d      	beq.n	80003e2 <__aeabi_fadd+0x10a>
 8000306:	1bb8      	subs	r0, r7, r6
 8000308:	4681      	mov	r9, r0
 800030a:	2800      	cmp	r0, #0
 800030c:	dd4d      	ble.n	80003aa <__aeabi_fadd+0xd2>
 800030e:	2e00      	cmp	r6, #0
 8000310:	d100      	bne.n	8000314 <__aeabi_fadd+0x3c>
 8000312:	e088      	b.n	8000426 <__aeabi_fadd+0x14e>
 8000314:	2fff      	cmp	r7, #255	; 0xff
 8000316:	d05a      	beq.n	80003ce <__aeabi_fadd+0xf6>
 8000318:	2380      	movs	r3, #128	; 0x80
 800031a:	04db      	lsls	r3, r3, #19
 800031c:	431d      	orrs	r5, r3
 800031e:	464b      	mov	r3, r9
 8000320:	2201      	movs	r2, #1
 8000322:	2b1b      	cmp	r3, #27
 8000324:	dc0a      	bgt.n	800033c <__aeabi_fadd+0x64>
 8000326:	002b      	movs	r3, r5
 8000328:	464a      	mov	r2, r9
 800032a:	4649      	mov	r1, r9
 800032c:	40d3      	lsrs	r3, r2
 800032e:	2220      	movs	r2, #32
 8000330:	1a52      	subs	r2, r2, r1
 8000332:	4095      	lsls	r5, r2
 8000334:	002a      	movs	r2, r5
 8000336:	1e55      	subs	r5, r2, #1
 8000338:	41aa      	sbcs	r2, r5
 800033a:	431a      	orrs	r2, r3
 800033c:	4653      	mov	r3, sl
 800033e:	1a9a      	subs	r2, r3, r2
 8000340:	0153      	lsls	r3, r2, #5
 8000342:	d400      	bmi.n	8000346 <__aeabi_fadd+0x6e>
 8000344:	e0b9      	b.n	80004ba <__aeabi_fadd+0x1e2>
 8000346:	0192      	lsls	r2, r2, #6
 8000348:	0996      	lsrs	r6, r2, #6
 800034a:	0030      	movs	r0, r6
 800034c:	f000 feae 	bl	80010ac <__clzsi2>
 8000350:	3805      	subs	r0, #5
 8000352:	4086      	lsls	r6, r0
 8000354:	4287      	cmp	r7, r0
 8000356:	dd00      	ble.n	800035a <__aeabi_fadd+0x82>
 8000358:	e0d4      	b.n	8000504 <__aeabi_fadd+0x22c>
 800035a:	0033      	movs	r3, r6
 800035c:	1bc7      	subs	r7, r0, r7
 800035e:	2020      	movs	r0, #32
 8000360:	3701      	adds	r7, #1
 8000362:	40fb      	lsrs	r3, r7
 8000364:	1bc7      	subs	r7, r0, r7
 8000366:	40be      	lsls	r6, r7
 8000368:	0032      	movs	r2, r6
 800036a:	1e56      	subs	r6, r2, #1
 800036c:	41b2      	sbcs	r2, r6
 800036e:	2700      	movs	r7, #0
 8000370:	431a      	orrs	r2, r3
 8000372:	0753      	lsls	r3, r2, #29
 8000374:	d004      	beq.n	8000380 <__aeabi_fadd+0xa8>
 8000376:	230f      	movs	r3, #15
 8000378:	4013      	ands	r3, r2
 800037a:	2b04      	cmp	r3, #4
 800037c:	d000      	beq.n	8000380 <__aeabi_fadd+0xa8>
 800037e:	3204      	adds	r2, #4
 8000380:	0153      	lsls	r3, r2, #5
 8000382:	d400      	bmi.n	8000386 <__aeabi_fadd+0xae>
 8000384:	e09c      	b.n	80004c0 <__aeabi_fadd+0x1e8>
 8000386:	1c7b      	adds	r3, r7, #1
 8000388:	2ffe      	cmp	r7, #254	; 0xfe
 800038a:	d100      	bne.n	800038e <__aeabi_fadd+0xb6>
 800038c:	e09a      	b.n	80004c4 <__aeabi_fadd+0x1ec>
 800038e:	0192      	lsls	r2, r2, #6
 8000390:	0a52      	lsrs	r2, r2, #9
 8000392:	4694      	mov	ip, r2
 8000394:	b2db      	uxtb	r3, r3
 8000396:	05d8      	lsls	r0, r3, #23
 8000398:	4663      	mov	r3, ip
 800039a:	07e4      	lsls	r4, r4, #31
 800039c:	4318      	orrs	r0, r3
 800039e:	4320      	orrs	r0, r4
 80003a0:	bce0      	pop	{r5, r6, r7}
 80003a2:	46ba      	mov	sl, r7
 80003a4:	46b1      	mov	r9, r6
 80003a6:	46a8      	mov	r8, r5
 80003a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003aa:	2800      	cmp	r0, #0
 80003ac:	d049      	beq.n	8000442 <__aeabi_fadd+0x16a>
 80003ae:	1bf3      	subs	r3, r6, r7
 80003b0:	2f00      	cmp	r7, #0
 80003b2:	d000      	beq.n	80003b6 <__aeabi_fadd+0xde>
 80003b4:	e0b6      	b.n	8000524 <__aeabi_fadd+0x24c>
 80003b6:	4652      	mov	r2, sl
 80003b8:	2a00      	cmp	r2, #0
 80003ba:	d060      	beq.n	800047e <__aeabi_fadd+0x1a6>
 80003bc:	3b01      	subs	r3, #1
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d100      	bne.n	80003c4 <__aeabi_fadd+0xec>
 80003c2:	e0fc      	b.n	80005be <__aeabi_fadd+0x2e6>
 80003c4:	2eff      	cmp	r6, #255	; 0xff
 80003c6:	d000      	beq.n	80003ca <__aeabi_fadd+0xf2>
 80003c8:	e0b4      	b.n	8000534 <__aeabi_fadd+0x25c>
 80003ca:	000c      	movs	r4, r1
 80003cc:	4642      	mov	r2, r8
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d078      	beq.n	80004c4 <__aeabi_fadd+0x1ec>
 80003d2:	2080      	movs	r0, #128	; 0x80
 80003d4:	03c0      	lsls	r0, r0, #15
 80003d6:	4310      	orrs	r0, r2
 80003d8:	0242      	lsls	r2, r0, #9
 80003da:	0a53      	lsrs	r3, r2, #9
 80003dc:	469c      	mov	ip, r3
 80003de:	23ff      	movs	r3, #255	; 0xff
 80003e0:	e7d9      	b.n	8000396 <__aeabi_fadd+0xbe>
 80003e2:	1bb9      	subs	r1, r7, r6
 80003e4:	2900      	cmp	r1, #0
 80003e6:	dd71      	ble.n	80004cc <__aeabi_fadd+0x1f4>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d03f      	beq.n	800046c <__aeabi_fadd+0x194>
 80003ec:	2fff      	cmp	r7, #255	; 0xff
 80003ee:	d0ee      	beq.n	80003ce <__aeabi_fadd+0xf6>
 80003f0:	2380      	movs	r3, #128	; 0x80
 80003f2:	04db      	lsls	r3, r3, #19
 80003f4:	431d      	orrs	r5, r3
 80003f6:	2201      	movs	r2, #1
 80003f8:	291b      	cmp	r1, #27
 80003fa:	dc07      	bgt.n	800040c <__aeabi_fadd+0x134>
 80003fc:	002a      	movs	r2, r5
 80003fe:	2320      	movs	r3, #32
 8000400:	40ca      	lsrs	r2, r1
 8000402:	1a59      	subs	r1, r3, r1
 8000404:	408d      	lsls	r5, r1
 8000406:	1e6b      	subs	r3, r5, #1
 8000408:	419d      	sbcs	r5, r3
 800040a:	432a      	orrs	r2, r5
 800040c:	4452      	add	r2, sl
 800040e:	0153      	lsls	r3, r2, #5
 8000410:	d553      	bpl.n	80004ba <__aeabi_fadd+0x1e2>
 8000412:	3701      	adds	r7, #1
 8000414:	2fff      	cmp	r7, #255	; 0xff
 8000416:	d055      	beq.n	80004c4 <__aeabi_fadd+0x1ec>
 8000418:	2301      	movs	r3, #1
 800041a:	497b      	ldr	r1, [pc, #492]	; (8000608 <__aeabi_fadd+0x330>)
 800041c:	4013      	ands	r3, r2
 800041e:	0852      	lsrs	r2, r2, #1
 8000420:	400a      	ands	r2, r1
 8000422:	431a      	orrs	r2, r3
 8000424:	e7a5      	b.n	8000372 <__aeabi_fadd+0x9a>
 8000426:	2d00      	cmp	r5, #0
 8000428:	d02c      	beq.n	8000484 <__aeabi_fadd+0x1ac>
 800042a:	2301      	movs	r3, #1
 800042c:	425b      	negs	r3, r3
 800042e:	469c      	mov	ip, r3
 8000430:	44e1      	add	r9, ip
 8000432:	464b      	mov	r3, r9
 8000434:	2b00      	cmp	r3, #0
 8000436:	d100      	bne.n	800043a <__aeabi_fadd+0x162>
 8000438:	e0ad      	b.n	8000596 <__aeabi_fadd+0x2be>
 800043a:	2fff      	cmp	r7, #255	; 0xff
 800043c:	d000      	beq.n	8000440 <__aeabi_fadd+0x168>
 800043e:	e76e      	b.n	800031e <__aeabi_fadd+0x46>
 8000440:	e7c5      	b.n	80003ce <__aeabi_fadd+0xf6>
 8000442:	20fe      	movs	r0, #254	; 0xfe
 8000444:	1c7e      	adds	r6, r7, #1
 8000446:	4230      	tst	r0, r6
 8000448:	d160      	bne.n	800050c <__aeabi_fadd+0x234>
 800044a:	2f00      	cmp	r7, #0
 800044c:	d000      	beq.n	8000450 <__aeabi_fadd+0x178>
 800044e:	e093      	b.n	8000578 <__aeabi_fadd+0x2a0>
 8000450:	4652      	mov	r2, sl
 8000452:	2a00      	cmp	r2, #0
 8000454:	d100      	bne.n	8000458 <__aeabi_fadd+0x180>
 8000456:	e0b6      	b.n	80005c6 <__aeabi_fadd+0x2ee>
 8000458:	2d00      	cmp	r5, #0
 800045a:	d09c      	beq.n	8000396 <__aeabi_fadd+0xbe>
 800045c:	1b52      	subs	r2, r2, r5
 800045e:	0150      	lsls	r0, r2, #5
 8000460:	d400      	bmi.n	8000464 <__aeabi_fadd+0x18c>
 8000462:	e0c3      	b.n	80005ec <__aeabi_fadd+0x314>
 8000464:	4653      	mov	r3, sl
 8000466:	000c      	movs	r4, r1
 8000468:	1aea      	subs	r2, r5, r3
 800046a:	e782      	b.n	8000372 <__aeabi_fadd+0x9a>
 800046c:	2d00      	cmp	r5, #0
 800046e:	d009      	beq.n	8000484 <__aeabi_fadd+0x1ac>
 8000470:	3901      	subs	r1, #1
 8000472:	2900      	cmp	r1, #0
 8000474:	d100      	bne.n	8000478 <__aeabi_fadd+0x1a0>
 8000476:	e08b      	b.n	8000590 <__aeabi_fadd+0x2b8>
 8000478:	2fff      	cmp	r7, #255	; 0xff
 800047a:	d1bc      	bne.n	80003f6 <__aeabi_fadd+0x11e>
 800047c:	e7a7      	b.n	80003ce <__aeabi_fadd+0xf6>
 800047e:	000c      	movs	r4, r1
 8000480:	4642      	mov	r2, r8
 8000482:	0037      	movs	r7, r6
 8000484:	2fff      	cmp	r7, #255	; 0xff
 8000486:	d0a2      	beq.n	80003ce <__aeabi_fadd+0xf6>
 8000488:	0252      	lsls	r2, r2, #9
 800048a:	0a53      	lsrs	r3, r2, #9
 800048c:	469c      	mov	ip, r3
 800048e:	b2fb      	uxtb	r3, r7
 8000490:	e781      	b.n	8000396 <__aeabi_fadd+0xbe>
 8000492:	21fe      	movs	r1, #254	; 0xfe
 8000494:	3701      	adds	r7, #1
 8000496:	4239      	tst	r1, r7
 8000498:	d165      	bne.n	8000566 <__aeabi_fadd+0x28e>
 800049a:	2b00      	cmp	r3, #0
 800049c:	d17e      	bne.n	800059c <__aeabi_fadd+0x2c4>
 800049e:	2800      	cmp	r0, #0
 80004a0:	d100      	bne.n	80004a4 <__aeabi_fadd+0x1cc>
 80004a2:	e0aa      	b.n	80005fa <__aeabi_fadd+0x322>
 80004a4:	2d00      	cmp	r5, #0
 80004a6:	d100      	bne.n	80004aa <__aeabi_fadd+0x1d2>
 80004a8:	e775      	b.n	8000396 <__aeabi_fadd+0xbe>
 80004aa:	002a      	movs	r2, r5
 80004ac:	4452      	add	r2, sl
 80004ae:	2700      	movs	r7, #0
 80004b0:	0153      	lsls	r3, r2, #5
 80004b2:	d502      	bpl.n	80004ba <__aeabi_fadd+0x1e2>
 80004b4:	4b55      	ldr	r3, [pc, #340]	; (800060c <__aeabi_fadd+0x334>)
 80004b6:	3701      	adds	r7, #1
 80004b8:	401a      	ands	r2, r3
 80004ba:	0753      	lsls	r3, r2, #29
 80004bc:	d000      	beq.n	80004c0 <__aeabi_fadd+0x1e8>
 80004be:	e75a      	b.n	8000376 <__aeabi_fadd+0x9e>
 80004c0:	08d2      	lsrs	r2, r2, #3
 80004c2:	e7df      	b.n	8000484 <__aeabi_fadd+0x1ac>
 80004c4:	2200      	movs	r2, #0
 80004c6:	23ff      	movs	r3, #255	; 0xff
 80004c8:	4694      	mov	ip, r2
 80004ca:	e764      	b.n	8000396 <__aeabi_fadd+0xbe>
 80004cc:	2900      	cmp	r1, #0
 80004ce:	d0e0      	beq.n	8000492 <__aeabi_fadd+0x1ba>
 80004d0:	1bf3      	subs	r3, r6, r7
 80004d2:	2f00      	cmp	r7, #0
 80004d4:	d03e      	beq.n	8000554 <__aeabi_fadd+0x27c>
 80004d6:	2eff      	cmp	r6, #255	; 0xff
 80004d8:	d100      	bne.n	80004dc <__aeabi_fadd+0x204>
 80004da:	e777      	b.n	80003cc <__aeabi_fadd+0xf4>
 80004dc:	2280      	movs	r2, #128	; 0x80
 80004de:	0001      	movs	r1, r0
 80004e0:	04d2      	lsls	r2, r2, #19
 80004e2:	4311      	orrs	r1, r2
 80004e4:	468a      	mov	sl, r1
 80004e6:	2201      	movs	r2, #1
 80004e8:	2b1b      	cmp	r3, #27
 80004ea:	dc08      	bgt.n	80004fe <__aeabi_fadd+0x226>
 80004ec:	4652      	mov	r2, sl
 80004ee:	2120      	movs	r1, #32
 80004f0:	4650      	mov	r0, sl
 80004f2:	40da      	lsrs	r2, r3
 80004f4:	1acb      	subs	r3, r1, r3
 80004f6:	4098      	lsls	r0, r3
 80004f8:	1e43      	subs	r3, r0, #1
 80004fa:	4198      	sbcs	r0, r3
 80004fc:	4302      	orrs	r2, r0
 80004fe:	0037      	movs	r7, r6
 8000500:	1952      	adds	r2, r2, r5
 8000502:	e784      	b.n	800040e <__aeabi_fadd+0x136>
 8000504:	4a41      	ldr	r2, [pc, #260]	; (800060c <__aeabi_fadd+0x334>)
 8000506:	1a3f      	subs	r7, r7, r0
 8000508:	4032      	ands	r2, r6
 800050a:	e732      	b.n	8000372 <__aeabi_fadd+0x9a>
 800050c:	4653      	mov	r3, sl
 800050e:	1b5e      	subs	r6, r3, r5
 8000510:	0173      	lsls	r3, r6, #5
 8000512:	d42d      	bmi.n	8000570 <__aeabi_fadd+0x298>
 8000514:	2e00      	cmp	r6, #0
 8000516:	d000      	beq.n	800051a <__aeabi_fadd+0x242>
 8000518:	e717      	b.n	800034a <__aeabi_fadd+0x72>
 800051a:	2200      	movs	r2, #0
 800051c:	2400      	movs	r4, #0
 800051e:	2300      	movs	r3, #0
 8000520:	4694      	mov	ip, r2
 8000522:	e738      	b.n	8000396 <__aeabi_fadd+0xbe>
 8000524:	2eff      	cmp	r6, #255	; 0xff
 8000526:	d100      	bne.n	800052a <__aeabi_fadd+0x252>
 8000528:	e74f      	b.n	80003ca <__aeabi_fadd+0xf2>
 800052a:	2280      	movs	r2, #128	; 0x80
 800052c:	4650      	mov	r0, sl
 800052e:	04d2      	lsls	r2, r2, #19
 8000530:	4310      	orrs	r0, r2
 8000532:	4682      	mov	sl, r0
 8000534:	2201      	movs	r2, #1
 8000536:	2b1b      	cmp	r3, #27
 8000538:	dc08      	bgt.n	800054c <__aeabi_fadd+0x274>
 800053a:	4652      	mov	r2, sl
 800053c:	2420      	movs	r4, #32
 800053e:	4650      	mov	r0, sl
 8000540:	40da      	lsrs	r2, r3
 8000542:	1ae3      	subs	r3, r4, r3
 8000544:	4098      	lsls	r0, r3
 8000546:	1e43      	subs	r3, r0, #1
 8000548:	4198      	sbcs	r0, r3
 800054a:	4302      	orrs	r2, r0
 800054c:	000c      	movs	r4, r1
 800054e:	0037      	movs	r7, r6
 8000550:	1aaa      	subs	r2, r5, r2
 8000552:	e6f5      	b.n	8000340 <__aeabi_fadd+0x68>
 8000554:	2800      	cmp	r0, #0
 8000556:	d093      	beq.n	8000480 <__aeabi_fadd+0x1a8>
 8000558:	3b01      	subs	r3, #1
 800055a:	2b00      	cmp	r3, #0
 800055c:	d04f      	beq.n	80005fe <__aeabi_fadd+0x326>
 800055e:	2eff      	cmp	r6, #255	; 0xff
 8000560:	d1c1      	bne.n	80004e6 <__aeabi_fadd+0x20e>
 8000562:	4642      	mov	r2, r8
 8000564:	e733      	b.n	80003ce <__aeabi_fadd+0xf6>
 8000566:	2fff      	cmp	r7, #255	; 0xff
 8000568:	d0ac      	beq.n	80004c4 <__aeabi_fadd+0x1ec>
 800056a:	4455      	add	r5, sl
 800056c:	086a      	lsrs	r2, r5, #1
 800056e:	e7a4      	b.n	80004ba <__aeabi_fadd+0x1e2>
 8000570:	4653      	mov	r3, sl
 8000572:	000c      	movs	r4, r1
 8000574:	1aee      	subs	r6, r5, r3
 8000576:	e6e8      	b.n	800034a <__aeabi_fadd+0x72>
 8000578:	4653      	mov	r3, sl
 800057a:	2b00      	cmp	r3, #0
 800057c:	d128      	bne.n	80005d0 <__aeabi_fadd+0x2f8>
 800057e:	2d00      	cmp	r5, #0
 8000580:	d000      	beq.n	8000584 <__aeabi_fadd+0x2ac>
 8000582:	e722      	b.n	80003ca <__aeabi_fadd+0xf2>
 8000584:	2380      	movs	r3, #128	; 0x80
 8000586:	03db      	lsls	r3, r3, #15
 8000588:	469c      	mov	ip, r3
 800058a:	2400      	movs	r4, #0
 800058c:	23ff      	movs	r3, #255	; 0xff
 800058e:	e702      	b.n	8000396 <__aeabi_fadd+0xbe>
 8000590:	002a      	movs	r2, r5
 8000592:	4452      	add	r2, sl
 8000594:	e73b      	b.n	800040e <__aeabi_fadd+0x136>
 8000596:	4653      	mov	r3, sl
 8000598:	1b5a      	subs	r2, r3, r5
 800059a:	e6d1      	b.n	8000340 <__aeabi_fadd+0x68>
 800059c:	2800      	cmp	r0, #0
 800059e:	d100      	bne.n	80005a2 <__aeabi_fadd+0x2ca>
 80005a0:	e714      	b.n	80003cc <__aeabi_fadd+0xf4>
 80005a2:	2d00      	cmp	r5, #0
 80005a4:	d100      	bne.n	80005a8 <__aeabi_fadd+0x2d0>
 80005a6:	e712      	b.n	80003ce <__aeabi_fadd+0xf6>
 80005a8:	2380      	movs	r3, #128	; 0x80
 80005aa:	03db      	lsls	r3, r3, #15
 80005ac:	421a      	tst	r2, r3
 80005ae:	d100      	bne.n	80005b2 <__aeabi_fadd+0x2da>
 80005b0:	e70d      	b.n	80003ce <__aeabi_fadd+0xf6>
 80005b2:	4641      	mov	r1, r8
 80005b4:	4219      	tst	r1, r3
 80005b6:	d000      	beq.n	80005ba <__aeabi_fadd+0x2e2>
 80005b8:	e709      	b.n	80003ce <__aeabi_fadd+0xf6>
 80005ba:	4642      	mov	r2, r8
 80005bc:	e707      	b.n	80003ce <__aeabi_fadd+0xf6>
 80005be:	000c      	movs	r4, r1
 80005c0:	0037      	movs	r7, r6
 80005c2:	1aaa      	subs	r2, r5, r2
 80005c4:	e6bc      	b.n	8000340 <__aeabi_fadd+0x68>
 80005c6:	2d00      	cmp	r5, #0
 80005c8:	d013      	beq.n	80005f2 <__aeabi_fadd+0x31a>
 80005ca:	000c      	movs	r4, r1
 80005cc:	46c4      	mov	ip, r8
 80005ce:	e6e2      	b.n	8000396 <__aeabi_fadd+0xbe>
 80005d0:	2d00      	cmp	r5, #0
 80005d2:	d100      	bne.n	80005d6 <__aeabi_fadd+0x2fe>
 80005d4:	e6fb      	b.n	80003ce <__aeabi_fadd+0xf6>
 80005d6:	2380      	movs	r3, #128	; 0x80
 80005d8:	03db      	lsls	r3, r3, #15
 80005da:	421a      	tst	r2, r3
 80005dc:	d100      	bne.n	80005e0 <__aeabi_fadd+0x308>
 80005de:	e6f6      	b.n	80003ce <__aeabi_fadd+0xf6>
 80005e0:	4640      	mov	r0, r8
 80005e2:	4218      	tst	r0, r3
 80005e4:	d000      	beq.n	80005e8 <__aeabi_fadd+0x310>
 80005e6:	e6f2      	b.n	80003ce <__aeabi_fadd+0xf6>
 80005e8:	000c      	movs	r4, r1
 80005ea:	e6ef      	b.n	80003cc <__aeabi_fadd+0xf4>
 80005ec:	2a00      	cmp	r2, #0
 80005ee:	d000      	beq.n	80005f2 <__aeabi_fadd+0x31a>
 80005f0:	e763      	b.n	80004ba <__aeabi_fadd+0x1e2>
 80005f2:	2200      	movs	r2, #0
 80005f4:	2400      	movs	r4, #0
 80005f6:	4694      	mov	ip, r2
 80005f8:	e6cd      	b.n	8000396 <__aeabi_fadd+0xbe>
 80005fa:	46c4      	mov	ip, r8
 80005fc:	e6cb      	b.n	8000396 <__aeabi_fadd+0xbe>
 80005fe:	002a      	movs	r2, r5
 8000600:	0037      	movs	r7, r6
 8000602:	4452      	add	r2, sl
 8000604:	e703      	b.n	800040e <__aeabi_fadd+0x136>
 8000606:	46c0      	nop			; (mov r8, r8)
 8000608:	7dffffff 	.word	0x7dffffff
 800060c:	fbffffff 	.word	0xfbffffff

08000610 <__aeabi_fdiv>:
 8000610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000612:	464f      	mov	r7, r9
 8000614:	4646      	mov	r6, r8
 8000616:	46d6      	mov	lr, sl
 8000618:	0245      	lsls	r5, r0, #9
 800061a:	b5c0      	push	{r6, r7, lr}
 800061c:	0047      	lsls	r7, r0, #1
 800061e:	1c0c      	adds	r4, r1, #0
 8000620:	0a6d      	lsrs	r5, r5, #9
 8000622:	0e3f      	lsrs	r7, r7, #24
 8000624:	0fc6      	lsrs	r6, r0, #31
 8000626:	2f00      	cmp	r7, #0
 8000628:	d066      	beq.n	80006f8 <__aeabi_fdiv+0xe8>
 800062a:	2fff      	cmp	r7, #255	; 0xff
 800062c:	d06c      	beq.n	8000708 <__aeabi_fdiv+0xf8>
 800062e:	2300      	movs	r3, #0
 8000630:	00ea      	lsls	r2, r5, #3
 8000632:	2580      	movs	r5, #128	; 0x80
 8000634:	4699      	mov	r9, r3
 8000636:	469a      	mov	sl, r3
 8000638:	04ed      	lsls	r5, r5, #19
 800063a:	4315      	orrs	r5, r2
 800063c:	3f7f      	subs	r7, #127	; 0x7f
 800063e:	0260      	lsls	r0, r4, #9
 8000640:	0061      	lsls	r1, r4, #1
 8000642:	0a43      	lsrs	r3, r0, #9
 8000644:	4698      	mov	r8, r3
 8000646:	0e09      	lsrs	r1, r1, #24
 8000648:	0fe4      	lsrs	r4, r4, #31
 800064a:	2900      	cmp	r1, #0
 800064c:	d048      	beq.n	80006e0 <__aeabi_fdiv+0xd0>
 800064e:	29ff      	cmp	r1, #255	; 0xff
 8000650:	d010      	beq.n	8000674 <__aeabi_fdiv+0x64>
 8000652:	2280      	movs	r2, #128	; 0x80
 8000654:	00d8      	lsls	r0, r3, #3
 8000656:	04d2      	lsls	r2, r2, #19
 8000658:	4302      	orrs	r2, r0
 800065a:	4690      	mov	r8, r2
 800065c:	2000      	movs	r0, #0
 800065e:	397f      	subs	r1, #127	; 0x7f
 8000660:	464a      	mov	r2, r9
 8000662:	0033      	movs	r3, r6
 8000664:	1a7f      	subs	r7, r7, r1
 8000666:	4302      	orrs	r2, r0
 8000668:	496c      	ldr	r1, [pc, #432]	; (800081c <__aeabi_fdiv+0x20c>)
 800066a:	0092      	lsls	r2, r2, #2
 800066c:	588a      	ldr	r2, [r1, r2]
 800066e:	4063      	eors	r3, r4
 8000670:	b2db      	uxtb	r3, r3
 8000672:	4697      	mov	pc, r2
 8000674:	2b00      	cmp	r3, #0
 8000676:	d16d      	bne.n	8000754 <__aeabi_fdiv+0x144>
 8000678:	2002      	movs	r0, #2
 800067a:	3fff      	subs	r7, #255	; 0xff
 800067c:	e033      	b.n	80006e6 <__aeabi_fdiv+0xd6>
 800067e:	2300      	movs	r3, #0
 8000680:	4698      	mov	r8, r3
 8000682:	0026      	movs	r6, r4
 8000684:	4645      	mov	r5, r8
 8000686:	4682      	mov	sl, r0
 8000688:	4653      	mov	r3, sl
 800068a:	2b02      	cmp	r3, #2
 800068c:	d100      	bne.n	8000690 <__aeabi_fdiv+0x80>
 800068e:	e07f      	b.n	8000790 <__aeabi_fdiv+0x180>
 8000690:	2b03      	cmp	r3, #3
 8000692:	d100      	bne.n	8000696 <__aeabi_fdiv+0x86>
 8000694:	e094      	b.n	80007c0 <__aeabi_fdiv+0x1b0>
 8000696:	2b01      	cmp	r3, #1
 8000698:	d017      	beq.n	80006ca <__aeabi_fdiv+0xba>
 800069a:	0038      	movs	r0, r7
 800069c:	307f      	adds	r0, #127	; 0x7f
 800069e:	2800      	cmp	r0, #0
 80006a0:	dd5f      	ble.n	8000762 <__aeabi_fdiv+0x152>
 80006a2:	076b      	lsls	r3, r5, #29
 80006a4:	d004      	beq.n	80006b0 <__aeabi_fdiv+0xa0>
 80006a6:	230f      	movs	r3, #15
 80006a8:	402b      	ands	r3, r5
 80006aa:	2b04      	cmp	r3, #4
 80006ac:	d000      	beq.n	80006b0 <__aeabi_fdiv+0xa0>
 80006ae:	3504      	adds	r5, #4
 80006b0:	012b      	lsls	r3, r5, #4
 80006b2:	d503      	bpl.n	80006bc <__aeabi_fdiv+0xac>
 80006b4:	0038      	movs	r0, r7
 80006b6:	4b5a      	ldr	r3, [pc, #360]	; (8000820 <__aeabi_fdiv+0x210>)
 80006b8:	3080      	adds	r0, #128	; 0x80
 80006ba:	401d      	ands	r5, r3
 80006bc:	28fe      	cmp	r0, #254	; 0xfe
 80006be:	dc67      	bgt.n	8000790 <__aeabi_fdiv+0x180>
 80006c0:	01ad      	lsls	r5, r5, #6
 80006c2:	0a6d      	lsrs	r5, r5, #9
 80006c4:	b2c0      	uxtb	r0, r0
 80006c6:	e002      	b.n	80006ce <__aeabi_fdiv+0xbe>
 80006c8:	001e      	movs	r6, r3
 80006ca:	2000      	movs	r0, #0
 80006cc:	2500      	movs	r5, #0
 80006ce:	05c0      	lsls	r0, r0, #23
 80006d0:	4328      	orrs	r0, r5
 80006d2:	07f6      	lsls	r6, r6, #31
 80006d4:	4330      	orrs	r0, r6
 80006d6:	bce0      	pop	{r5, r6, r7}
 80006d8:	46ba      	mov	sl, r7
 80006da:	46b1      	mov	r9, r6
 80006dc:	46a8      	mov	r8, r5
 80006de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d12b      	bne.n	800073c <__aeabi_fdiv+0x12c>
 80006e4:	2001      	movs	r0, #1
 80006e6:	464a      	mov	r2, r9
 80006e8:	0033      	movs	r3, r6
 80006ea:	494e      	ldr	r1, [pc, #312]	; (8000824 <__aeabi_fdiv+0x214>)
 80006ec:	4302      	orrs	r2, r0
 80006ee:	0092      	lsls	r2, r2, #2
 80006f0:	588a      	ldr	r2, [r1, r2]
 80006f2:	4063      	eors	r3, r4
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	4697      	mov	pc, r2
 80006f8:	2d00      	cmp	r5, #0
 80006fa:	d113      	bne.n	8000724 <__aeabi_fdiv+0x114>
 80006fc:	2304      	movs	r3, #4
 80006fe:	4699      	mov	r9, r3
 8000700:	3b03      	subs	r3, #3
 8000702:	2700      	movs	r7, #0
 8000704:	469a      	mov	sl, r3
 8000706:	e79a      	b.n	800063e <__aeabi_fdiv+0x2e>
 8000708:	2d00      	cmp	r5, #0
 800070a:	d105      	bne.n	8000718 <__aeabi_fdiv+0x108>
 800070c:	2308      	movs	r3, #8
 800070e:	4699      	mov	r9, r3
 8000710:	3b06      	subs	r3, #6
 8000712:	27ff      	movs	r7, #255	; 0xff
 8000714:	469a      	mov	sl, r3
 8000716:	e792      	b.n	800063e <__aeabi_fdiv+0x2e>
 8000718:	230c      	movs	r3, #12
 800071a:	4699      	mov	r9, r3
 800071c:	3b09      	subs	r3, #9
 800071e:	27ff      	movs	r7, #255	; 0xff
 8000720:	469a      	mov	sl, r3
 8000722:	e78c      	b.n	800063e <__aeabi_fdiv+0x2e>
 8000724:	0028      	movs	r0, r5
 8000726:	f000 fcc1 	bl	80010ac <__clzsi2>
 800072a:	2776      	movs	r7, #118	; 0x76
 800072c:	1f43      	subs	r3, r0, #5
 800072e:	409d      	lsls	r5, r3
 8000730:	2300      	movs	r3, #0
 8000732:	427f      	negs	r7, r7
 8000734:	4699      	mov	r9, r3
 8000736:	469a      	mov	sl, r3
 8000738:	1a3f      	subs	r7, r7, r0
 800073a:	e780      	b.n	800063e <__aeabi_fdiv+0x2e>
 800073c:	0018      	movs	r0, r3
 800073e:	f000 fcb5 	bl	80010ac <__clzsi2>
 8000742:	4642      	mov	r2, r8
 8000744:	1f43      	subs	r3, r0, #5
 8000746:	2176      	movs	r1, #118	; 0x76
 8000748:	409a      	lsls	r2, r3
 800074a:	4249      	negs	r1, r1
 800074c:	1a09      	subs	r1, r1, r0
 800074e:	4690      	mov	r8, r2
 8000750:	2000      	movs	r0, #0
 8000752:	e785      	b.n	8000660 <__aeabi_fdiv+0x50>
 8000754:	21ff      	movs	r1, #255	; 0xff
 8000756:	2003      	movs	r0, #3
 8000758:	e782      	b.n	8000660 <__aeabi_fdiv+0x50>
 800075a:	001e      	movs	r6, r3
 800075c:	20ff      	movs	r0, #255	; 0xff
 800075e:	2500      	movs	r5, #0
 8000760:	e7b5      	b.n	80006ce <__aeabi_fdiv+0xbe>
 8000762:	2301      	movs	r3, #1
 8000764:	1a1b      	subs	r3, r3, r0
 8000766:	2b1b      	cmp	r3, #27
 8000768:	dcaf      	bgt.n	80006ca <__aeabi_fdiv+0xba>
 800076a:	379e      	adds	r7, #158	; 0x9e
 800076c:	0029      	movs	r1, r5
 800076e:	40bd      	lsls	r5, r7
 8000770:	40d9      	lsrs	r1, r3
 8000772:	1e6a      	subs	r2, r5, #1
 8000774:	4195      	sbcs	r5, r2
 8000776:	430d      	orrs	r5, r1
 8000778:	076b      	lsls	r3, r5, #29
 800077a:	d004      	beq.n	8000786 <__aeabi_fdiv+0x176>
 800077c:	230f      	movs	r3, #15
 800077e:	402b      	ands	r3, r5
 8000780:	2b04      	cmp	r3, #4
 8000782:	d000      	beq.n	8000786 <__aeabi_fdiv+0x176>
 8000784:	3504      	adds	r5, #4
 8000786:	016b      	lsls	r3, r5, #5
 8000788:	d544      	bpl.n	8000814 <__aeabi_fdiv+0x204>
 800078a:	2001      	movs	r0, #1
 800078c:	2500      	movs	r5, #0
 800078e:	e79e      	b.n	80006ce <__aeabi_fdiv+0xbe>
 8000790:	20ff      	movs	r0, #255	; 0xff
 8000792:	2500      	movs	r5, #0
 8000794:	e79b      	b.n	80006ce <__aeabi_fdiv+0xbe>
 8000796:	2580      	movs	r5, #128	; 0x80
 8000798:	2600      	movs	r6, #0
 800079a:	20ff      	movs	r0, #255	; 0xff
 800079c:	03ed      	lsls	r5, r5, #15
 800079e:	e796      	b.n	80006ce <__aeabi_fdiv+0xbe>
 80007a0:	2300      	movs	r3, #0
 80007a2:	4698      	mov	r8, r3
 80007a4:	2080      	movs	r0, #128	; 0x80
 80007a6:	03c0      	lsls	r0, r0, #15
 80007a8:	4205      	tst	r5, r0
 80007aa:	d009      	beq.n	80007c0 <__aeabi_fdiv+0x1b0>
 80007ac:	4643      	mov	r3, r8
 80007ae:	4203      	tst	r3, r0
 80007b0:	d106      	bne.n	80007c0 <__aeabi_fdiv+0x1b0>
 80007b2:	4645      	mov	r5, r8
 80007b4:	4305      	orrs	r5, r0
 80007b6:	026d      	lsls	r5, r5, #9
 80007b8:	0026      	movs	r6, r4
 80007ba:	20ff      	movs	r0, #255	; 0xff
 80007bc:	0a6d      	lsrs	r5, r5, #9
 80007be:	e786      	b.n	80006ce <__aeabi_fdiv+0xbe>
 80007c0:	2080      	movs	r0, #128	; 0x80
 80007c2:	03c0      	lsls	r0, r0, #15
 80007c4:	4305      	orrs	r5, r0
 80007c6:	026d      	lsls	r5, r5, #9
 80007c8:	20ff      	movs	r0, #255	; 0xff
 80007ca:	0a6d      	lsrs	r5, r5, #9
 80007cc:	e77f      	b.n	80006ce <__aeabi_fdiv+0xbe>
 80007ce:	4641      	mov	r1, r8
 80007d0:	016a      	lsls	r2, r5, #5
 80007d2:	0148      	lsls	r0, r1, #5
 80007d4:	4282      	cmp	r2, r0
 80007d6:	d219      	bcs.n	800080c <__aeabi_fdiv+0x1fc>
 80007d8:	211b      	movs	r1, #27
 80007da:	2500      	movs	r5, #0
 80007dc:	3f01      	subs	r7, #1
 80007de:	2601      	movs	r6, #1
 80007e0:	0014      	movs	r4, r2
 80007e2:	006d      	lsls	r5, r5, #1
 80007e4:	0052      	lsls	r2, r2, #1
 80007e6:	2c00      	cmp	r4, #0
 80007e8:	db01      	blt.n	80007ee <__aeabi_fdiv+0x1de>
 80007ea:	4290      	cmp	r0, r2
 80007ec:	d801      	bhi.n	80007f2 <__aeabi_fdiv+0x1e2>
 80007ee:	1a12      	subs	r2, r2, r0
 80007f0:	4335      	orrs	r5, r6
 80007f2:	3901      	subs	r1, #1
 80007f4:	2900      	cmp	r1, #0
 80007f6:	d1f3      	bne.n	80007e0 <__aeabi_fdiv+0x1d0>
 80007f8:	1e50      	subs	r0, r2, #1
 80007fa:	4182      	sbcs	r2, r0
 80007fc:	0038      	movs	r0, r7
 80007fe:	307f      	adds	r0, #127	; 0x7f
 8000800:	001e      	movs	r6, r3
 8000802:	4315      	orrs	r5, r2
 8000804:	2800      	cmp	r0, #0
 8000806:	dd00      	ble.n	800080a <__aeabi_fdiv+0x1fa>
 8000808:	e74b      	b.n	80006a2 <__aeabi_fdiv+0x92>
 800080a:	e7aa      	b.n	8000762 <__aeabi_fdiv+0x152>
 800080c:	211a      	movs	r1, #26
 800080e:	2501      	movs	r5, #1
 8000810:	1a12      	subs	r2, r2, r0
 8000812:	e7e4      	b.n	80007de <__aeabi_fdiv+0x1ce>
 8000814:	01ad      	lsls	r5, r5, #6
 8000816:	2000      	movs	r0, #0
 8000818:	0a6d      	lsrs	r5, r5, #9
 800081a:	e758      	b.n	80006ce <__aeabi_fdiv+0xbe>
 800081c:	080096a0 	.word	0x080096a0
 8000820:	f7ffffff 	.word	0xf7ffffff
 8000824:	080096e0 	.word	0x080096e0

08000828 <__eqsf2>:
 8000828:	b570      	push	{r4, r5, r6, lr}
 800082a:	0042      	lsls	r2, r0, #1
 800082c:	024e      	lsls	r6, r1, #9
 800082e:	004c      	lsls	r4, r1, #1
 8000830:	0245      	lsls	r5, r0, #9
 8000832:	0a6d      	lsrs	r5, r5, #9
 8000834:	0e12      	lsrs	r2, r2, #24
 8000836:	0fc3      	lsrs	r3, r0, #31
 8000838:	0a76      	lsrs	r6, r6, #9
 800083a:	0e24      	lsrs	r4, r4, #24
 800083c:	0fc9      	lsrs	r1, r1, #31
 800083e:	2aff      	cmp	r2, #255	; 0xff
 8000840:	d00f      	beq.n	8000862 <__eqsf2+0x3a>
 8000842:	2cff      	cmp	r4, #255	; 0xff
 8000844:	d011      	beq.n	800086a <__eqsf2+0x42>
 8000846:	2001      	movs	r0, #1
 8000848:	42a2      	cmp	r2, r4
 800084a:	d000      	beq.n	800084e <__eqsf2+0x26>
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	42b5      	cmp	r5, r6
 8000850:	d1fc      	bne.n	800084c <__eqsf2+0x24>
 8000852:	428b      	cmp	r3, r1
 8000854:	d00d      	beq.n	8000872 <__eqsf2+0x4a>
 8000856:	2a00      	cmp	r2, #0
 8000858:	d1f8      	bne.n	800084c <__eqsf2+0x24>
 800085a:	0028      	movs	r0, r5
 800085c:	1e45      	subs	r5, r0, #1
 800085e:	41a8      	sbcs	r0, r5
 8000860:	e7f4      	b.n	800084c <__eqsf2+0x24>
 8000862:	2001      	movs	r0, #1
 8000864:	2d00      	cmp	r5, #0
 8000866:	d1f1      	bne.n	800084c <__eqsf2+0x24>
 8000868:	e7eb      	b.n	8000842 <__eqsf2+0x1a>
 800086a:	2001      	movs	r0, #1
 800086c:	2e00      	cmp	r6, #0
 800086e:	d1ed      	bne.n	800084c <__eqsf2+0x24>
 8000870:	e7e9      	b.n	8000846 <__eqsf2+0x1e>
 8000872:	2000      	movs	r0, #0
 8000874:	e7ea      	b.n	800084c <__eqsf2+0x24>
 8000876:	46c0      	nop			; (mov r8, r8)

08000878 <__gesf2>:
 8000878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800087a:	0042      	lsls	r2, r0, #1
 800087c:	0246      	lsls	r6, r0, #9
 800087e:	024d      	lsls	r5, r1, #9
 8000880:	004c      	lsls	r4, r1, #1
 8000882:	0fc3      	lsrs	r3, r0, #31
 8000884:	0a76      	lsrs	r6, r6, #9
 8000886:	0e12      	lsrs	r2, r2, #24
 8000888:	0a6d      	lsrs	r5, r5, #9
 800088a:	0e24      	lsrs	r4, r4, #24
 800088c:	0fc8      	lsrs	r0, r1, #31
 800088e:	2aff      	cmp	r2, #255	; 0xff
 8000890:	d01f      	beq.n	80008d2 <__gesf2+0x5a>
 8000892:	2cff      	cmp	r4, #255	; 0xff
 8000894:	d010      	beq.n	80008b8 <__gesf2+0x40>
 8000896:	2a00      	cmp	r2, #0
 8000898:	d11f      	bne.n	80008da <__gesf2+0x62>
 800089a:	4271      	negs	r1, r6
 800089c:	4171      	adcs	r1, r6
 800089e:	2c00      	cmp	r4, #0
 80008a0:	d101      	bne.n	80008a6 <__gesf2+0x2e>
 80008a2:	2d00      	cmp	r5, #0
 80008a4:	d01e      	beq.n	80008e4 <__gesf2+0x6c>
 80008a6:	2900      	cmp	r1, #0
 80008a8:	d10e      	bne.n	80008c8 <__gesf2+0x50>
 80008aa:	4283      	cmp	r3, r0
 80008ac:	d01e      	beq.n	80008ec <__gesf2+0x74>
 80008ae:	2102      	movs	r1, #2
 80008b0:	1e58      	subs	r0, r3, #1
 80008b2:	4008      	ands	r0, r1
 80008b4:	3801      	subs	r0, #1
 80008b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008b8:	2d00      	cmp	r5, #0
 80008ba:	d126      	bne.n	800090a <__gesf2+0x92>
 80008bc:	2a00      	cmp	r2, #0
 80008be:	d1f4      	bne.n	80008aa <__gesf2+0x32>
 80008c0:	4271      	negs	r1, r6
 80008c2:	4171      	adcs	r1, r6
 80008c4:	2900      	cmp	r1, #0
 80008c6:	d0f0      	beq.n	80008aa <__gesf2+0x32>
 80008c8:	2800      	cmp	r0, #0
 80008ca:	d1f4      	bne.n	80008b6 <__gesf2+0x3e>
 80008cc:	2001      	movs	r0, #1
 80008ce:	4240      	negs	r0, r0
 80008d0:	e7f1      	b.n	80008b6 <__gesf2+0x3e>
 80008d2:	2e00      	cmp	r6, #0
 80008d4:	d119      	bne.n	800090a <__gesf2+0x92>
 80008d6:	2cff      	cmp	r4, #255	; 0xff
 80008d8:	d0ee      	beq.n	80008b8 <__gesf2+0x40>
 80008da:	2c00      	cmp	r4, #0
 80008dc:	d1e5      	bne.n	80008aa <__gesf2+0x32>
 80008de:	2d00      	cmp	r5, #0
 80008e0:	d1e3      	bne.n	80008aa <__gesf2+0x32>
 80008e2:	e7e4      	b.n	80008ae <__gesf2+0x36>
 80008e4:	2000      	movs	r0, #0
 80008e6:	2e00      	cmp	r6, #0
 80008e8:	d0e5      	beq.n	80008b6 <__gesf2+0x3e>
 80008ea:	e7e0      	b.n	80008ae <__gesf2+0x36>
 80008ec:	42a2      	cmp	r2, r4
 80008ee:	dc05      	bgt.n	80008fc <__gesf2+0x84>
 80008f0:	dbea      	blt.n	80008c8 <__gesf2+0x50>
 80008f2:	42ae      	cmp	r6, r5
 80008f4:	d802      	bhi.n	80008fc <__gesf2+0x84>
 80008f6:	d3e7      	bcc.n	80008c8 <__gesf2+0x50>
 80008f8:	2000      	movs	r0, #0
 80008fa:	e7dc      	b.n	80008b6 <__gesf2+0x3e>
 80008fc:	4241      	negs	r1, r0
 80008fe:	4141      	adcs	r1, r0
 8000900:	4248      	negs	r0, r1
 8000902:	2102      	movs	r1, #2
 8000904:	4008      	ands	r0, r1
 8000906:	3801      	subs	r0, #1
 8000908:	e7d5      	b.n	80008b6 <__gesf2+0x3e>
 800090a:	2002      	movs	r0, #2
 800090c:	4240      	negs	r0, r0
 800090e:	e7d2      	b.n	80008b6 <__gesf2+0x3e>

08000910 <__lesf2>:
 8000910:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000912:	0042      	lsls	r2, r0, #1
 8000914:	0246      	lsls	r6, r0, #9
 8000916:	024d      	lsls	r5, r1, #9
 8000918:	004c      	lsls	r4, r1, #1
 800091a:	0fc3      	lsrs	r3, r0, #31
 800091c:	0a76      	lsrs	r6, r6, #9
 800091e:	0e12      	lsrs	r2, r2, #24
 8000920:	0a6d      	lsrs	r5, r5, #9
 8000922:	0e24      	lsrs	r4, r4, #24
 8000924:	0fc8      	lsrs	r0, r1, #31
 8000926:	2aff      	cmp	r2, #255	; 0xff
 8000928:	d00d      	beq.n	8000946 <__lesf2+0x36>
 800092a:	2cff      	cmp	r4, #255	; 0xff
 800092c:	d00f      	beq.n	800094e <__lesf2+0x3e>
 800092e:	2a00      	cmp	r2, #0
 8000930:	d123      	bne.n	800097a <__lesf2+0x6a>
 8000932:	4271      	negs	r1, r6
 8000934:	4171      	adcs	r1, r6
 8000936:	2c00      	cmp	r4, #0
 8000938:	d10f      	bne.n	800095a <__lesf2+0x4a>
 800093a:	2d00      	cmp	r5, #0
 800093c:	d10d      	bne.n	800095a <__lesf2+0x4a>
 800093e:	2000      	movs	r0, #0
 8000940:	2e00      	cmp	r6, #0
 8000942:	d014      	beq.n	800096e <__lesf2+0x5e>
 8000944:	e00d      	b.n	8000962 <__lesf2+0x52>
 8000946:	2e00      	cmp	r6, #0
 8000948:	d110      	bne.n	800096c <__lesf2+0x5c>
 800094a:	2cff      	cmp	r4, #255	; 0xff
 800094c:	d115      	bne.n	800097a <__lesf2+0x6a>
 800094e:	2d00      	cmp	r5, #0
 8000950:	d10c      	bne.n	800096c <__lesf2+0x5c>
 8000952:	2a00      	cmp	r2, #0
 8000954:	d103      	bne.n	800095e <__lesf2+0x4e>
 8000956:	4271      	negs	r1, r6
 8000958:	4171      	adcs	r1, r6
 800095a:	2900      	cmp	r1, #0
 800095c:	d108      	bne.n	8000970 <__lesf2+0x60>
 800095e:	4283      	cmp	r3, r0
 8000960:	d010      	beq.n	8000984 <__lesf2+0x74>
 8000962:	2102      	movs	r1, #2
 8000964:	1e58      	subs	r0, r3, #1
 8000966:	4008      	ands	r0, r1
 8000968:	3801      	subs	r0, #1
 800096a:	e000      	b.n	800096e <__lesf2+0x5e>
 800096c:	2002      	movs	r0, #2
 800096e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000970:	2800      	cmp	r0, #0
 8000972:	d1fc      	bne.n	800096e <__lesf2+0x5e>
 8000974:	2001      	movs	r0, #1
 8000976:	4240      	negs	r0, r0
 8000978:	e7f9      	b.n	800096e <__lesf2+0x5e>
 800097a:	2c00      	cmp	r4, #0
 800097c:	d1ef      	bne.n	800095e <__lesf2+0x4e>
 800097e:	2d00      	cmp	r5, #0
 8000980:	d1ed      	bne.n	800095e <__lesf2+0x4e>
 8000982:	e7ee      	b.n	8000962 <__lesf2+0x52>
 8000984:	42a2      	cmp	r2, r4
 8000986:	dc05      	bgt.n	8000994 <__lesf2+0x84>
 8000988:	dbf2      	blt.n	8000970 <__lesf2+0x60>
 800098a:	42ae      	cmp	r6, r5
 800098c:	d802      	bhi.n	8000994 <__lesf2+0x84>
 800098e:	d3ef      	bcc.n	8000970 <__lesf2+0x60>
 8000990:	2000      	movs	r0, #0
 8000992:	e7ec      	b.n	800096e <__lesf2+0x5e>
 8000994:	4241      	negs	r1, r0
 8000996:	4141      	adcs	r1, r0
 8000998:	4248      	negs	r0, r1
 800099a:	2102      	movs	r1, #2
 800099c:	4008      	ands	r0, r1
 800099e:	3801      	subs	r0, #1
 80009a0:	e7e5      	b.n	800096e <__lesf2+0x5e>
 80009a2:	46c0      	nop			; (mov r8, r8)

080009a4 <__aeabi_fmul>:
 80009a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009a6:	4657      	mov	r7, sl
 80009a8:	464e      	mov	r6, r9
 80009aa:	4645      	mov	r5, r8
 80009ac:	46de      	mov	lr, fp
 80009ae:	0244      	lsls	r4, r0, #9
 80009b0:	b5e0      	push	{r5, r6, r7, lr}
 80009b2:	0045      	lsls	r5, r0, #1
 80009b4:	1c0f      	adds	r7, r1, #0
 80009b6:	0a64      	lsrs	r4, r4, #9
 80009b8:	0e2d      	lsrs	r5, r5, #24
 80009ba:	0fc6      	lsrs	r6, r0, #31
 80009bc:	2d00      	cmp	r5, #0
 80009be:	d047      	beq.n	8000a50 <__aeabi_fmul+0xac>
 80009c0:	2dff      	cmp	r5, #255	; 0xff
 80009c2:	d04d      	beq.n	8000a60 <__aeabi_fmul+0xbc>
 80009c4:	2300      	movs	r3, #0
 80009c6:	2080      	movs	r0, #128	; 0x80
 80009c8:	469a      	mov	sl, r3
 80009ca:	469b      	mov	fp, r3
 80009cc:	00e4      	lsls	r4, r4, #3
 80009ce:	04c0      	lsls	r0, r0, #19
 80009d0:	4304      	orrs	r4, r0
 80009d2:	3d7f      	subs	r5, #127	; 0x7f
 80009d4:	0278      	lsls	r0, r7, #9
 80009d6:	0a43      	lsrs	r3, r0, #9
 80009d8:	4699      	mov	r9, r3
 80009da:	007a      	lsls	r2, r7, #1
 80009dc:	0ffb      	lsrs	r3, r7, #31
 80009de:	4698      	mov	r8, r3
 80009e0:	0e12      	lsrs	r2, r2, #24
 80009e2:	464b      	mov	r3, r9
 80009e4:	d044      	beq.n	8000a70 <__aeabi_fmul+0xcc>
 80009e6:	2aff      	cmp	r2, #255	; 0xff
 80009e8:	d011      	beq.n	8000a0e <__aeabi_fmul+0x6a>
 80009ea:	00d8      	lsls	r0, r3, #3
 80009ec:	2380      	movs	r3, #128	; 0x80
 80009ee:	04db      	lsls	r3, r3, #19
 80009f0:	4303      	orrs	r3, r0
 80009f2:	4699      	mov	r9, r3
 80009f4:	2000      	movs	r0, #0
 80009f6:	3a7f      	subs	r2, #127	; 0x7f
 80009f8:	18ad      	adds	r5, r5, r2
 80009fa:	4647      	mov	r7, r8
 80009fc:	4653      	mov	r3, sl
 80009fe:	4077      	eors	r7, r6
 8000a00:	1c69      	adds	r1, r5, #1
 8000a02:	2b0f      	cmp	r3, #15
 8000a04:	d83f      	bhi.n	8000a86 <__aeabi_fmul+0xe2>
 8000a06:	4a72      	ldr	r2, [pc, #456]	; (8000bd0 <__aeabi_fmul+0x22c>)
 8000a08:	009b      	lsls	r3, r3, #2
 8000a0a:	58d3      	ldr	r3, [r2, r3]
 8000a0c:	469f      	mov	pc, r3
 8000a0e:	35ff      	adds	r5, #255	; 0xff
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d000      	beq.n	8000a16 <__aeabi_fmul+0x72>
 8000a14:	e079      	b.n	8000b0a <__aeabi_fmul+0x166>
 8000a16:	4652      	mov	r2, sl
 8000a18:	2302      	movs	r3, #2
 8000a1a:	431a      	orrs	r2, r3
 8000a1c:	4692      	mov	sl, r2
 8000a1e:	2002      	movs	r0, #2
 8000a20:	e7eb      	b.n	80009fa <__aeabi_fmul+0x56>
 8000a22:	4647      	mov	r7, r8
 8000a24:	464c      	mov	r4, r9
 8000a26:	4683      	mov	fp, r0
 8000a28:	465b      	mov	r3, fp
 8000a2a:	2b02      	cmp	r3, #2
 8000a2c:	d028      	beq.n	8000a80 <__aeabi_fmul+0xdc>
 8000a2e:	2b03      	cmp	r3, #3
 8000a30:	d100      	bne.n	8000a34 <__aeabi_fmul+0x90>
 8000a32:	e0c6      	b.n	8000bc2 <__aeabi_fmul+0x21e>
 8000a34:	2b01      	cmp	r3, #1
 8000a36:	d14f      	bne.n	8000ad8 <__aeabi_fmul+0x134>
 8000a38:	2000      	movs	r0, #0
 8000a3a:	2400      	movs	r4, #0
 8000a3c:	05c0      	lsls	r0, r0, #23
 8000a3e:	07ff      	lsls	r7, r7, #31
 8000a40:	4320      	orrs	r0, r4
 8000a42:	4338      	orrs	r0, r7
 8000a44:	bcf0      	pop	{r4, r5, r6, r7}
 8000a46:	46bb      	mov	fp, r7
 8000a48:	46b2      	mov	sl, r6
 8000a4a:	46a9      	mov	r9, r5
 8000a4c:	46a0      	mov	r8, r4
 8000a4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a50:	2c00      	cmp	r4, #0
 8000a52:	d171      	bne.n	8000b38 <__aeabi_fmul+0x194>
 8000a54:	2304      	movs	r3, #4
 8000a56:	469a      	mov	sl, r3
 8000a58:	3b03      	subs	r3, #3
 8000a5a:	2500      	movs	r5, #0
 8000a5c:	469b      	mov	fp, r3
 8000a5e:	e7b9      	b.n	80009d4 <__aeabi_fmul+0x30>
 8000a60:	2c00      	cmp	r4, #0
 8000a62:	d163      	bne.n	8000b2c <__aeabi_fmul+0x188>
 8000a64:	2308      	movs	r3, #8
 8000a66:	469a      	mov	sl, r3
 8000a68:	3b06      	subs	r3, #6
 8000a6a:	25ff      	movs	r5, #255	; 0xff
 8000a6c:	469b      	mov	fp, r3
 8000a6e:	e7b1      	b.n	80009d4 <__aeabi_fmul+0x30>
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d150      	bne.n	8000b16 <__aeabi_fmul+0x172>
 8000a74:	4652      	mov	r2, sl
 8000a76:	3301      	adds	r3, #1
 8000a78:	431a      	orrs	r2, r3
 8000a7a:	4692      	mov	sl, r2
 8000a7c:	2001      	movs	r0, #1
 8000a7e:	e7bc      	b.n	80009fa <__aeabi_fmul+0x56>
 8000a80:	20ff      	movs	r0, #255	; 0xff
 8000a82:	2400      	movs	r4, #0
 8000a84:	e7da      	b.n	8000a3c <__aeabi_fmul+0x98>
 8000a86:	4648      	mov	r0, r9
 8000a88:	0c26      	lsrs	r6, r4, #16
 8000a8a:	0424      	lsls	r4, r4, #16
 8000a8c:	0c22      	lsrs	r2, r4, #16
 8000a8e:	0404      	lsls	r4, r0, #16
 8000a90:	0c24      	lsrs	r4, r4, #16
 8000a92:	464b      	mov	r3, r9
 8000a94:	0020      	movs	r0, r4
 8000a96:	0c1b      	lsrs	r3, r3, #16
 8000a98:	4350      	muls	r0, r2
 8000a9a:	4374      	muls	r4, r6
 8000a9c:	435a      	muls	r2, r3
 8000a9e:	435e      	muls	r6, r3
 8000aa0:	1912      	adds	r2, r2, r4
 8000aa2:	0c03      	lsrs	r3, r0, #16
 8000aa4:	189b      	adds	r3, r3, r2
 8000aa6:	429c      	cmp	r4, r3
 8000aa8:	d903      	bls.n	8000ab2 <__aeabi_fmul+0x10e>
 8000aaa:	2280      	movs	r2, #128	; 0x80
 8000aac:	0252      	lsls	r2, r2, #9
 8000aae:	4694      	mov	ip, r2
 8000ab0:	4466      	add	r6, ip
 8000ab2:	0400      	lsls	r0, r0, #16
 8000ab4:	041a      	lsls	r2, r3, #16
 8000ab6:	0c00      	lsrs	r0, r0, #16
 8000ab8:	1812      	adds	r2, r2, r0
 8000aba:	0194      	lsls	r4, r2, #6
 8000abc:	1e60      	subs	r0, r4, #1
 8000abe:	4184      	sbcs	r4, r0
 8000ac0:	0c1b      	lsrs	r3, r3, #16
 8000ac2:	0e92      	lsrs	r2, r2, #26
 8000ac4:	199b      	adds	r3, r3, r6
 8000ac6:	4314      	orrs	r4, r2
 8000ac8:	019b      	lsls	r3, r3, #6
 8000aca:	431c      	orrs	r4, r3
 8000acc:	011b      	lsls	r3, r3, #4
 8000ace:	d572      	bpl.n	8000bb6 <__aeabi_fmul+0x212>
 8000ad0:	2001      	movs	r0, #1
 8000ad2:	0863      	lsrs	r3, r4, #1
 8000ad4:	4004      	ands	r4, r0
 8000ad6:	431c      	orrs	r4, r3
 8000ad8:	0008      	movs	r0, r1
 8000ada:	307f      	adds	r0, #127	; 0x7f
 8000adc:	2800      	cmp	r0, #0
 8000ade:	dd3c      	ble.n	8000b5a <__aeabi_fmul+0x1b6>
 8000ae0:	0763      	lsls	r3, r4, #29
 8000ae2:	d004      	beq.n	8000aee <__aeabi_fmul+0x14a>
 8000ae4:	230f      	movs	r3, #15
 8000ae6:	4023      	ands	r3, r4
 8000ae8:	2b04      	cmp	r3, #4
 8000aea:	d000      	beq.n	8000aee <__aeabi_fmul+0x14a>
 8000aec:	3404      	adds	r4, #4
 8000aee:	0123      	lsls	r3, r4, #4
 8000af0:	d503      	bpl.n	8000afa <__aeabi_fmul+0x156>
 8000af2:	3180      	adds	r1, #128	; 0x80
 8000af4:	0008      	movs	r0, r1
 8000af6:	4b37      	ldr	r3, [pc, #220]	; (8000bd4 <__aeabi_fmul+0x230>)
 8000af8:	401c      	ands	r4, r3
 8000afa:	28fe      	cmp	r0, #254	; 0xfe
 8000afc:	dcc0      	bgt.n	8000a80 <__aeabi_fmul+0xdc>
 8000afe:	01a4      	lsls	r4, r4, #6
 8000b00:	0a64      	lsrs	r4, r4, #9
 8000b02:	b2c0      	uxtb	r0, r0
 8000b04:	e79a      	b.n	8000a3c <__aeabi_fmul+0x98>
 8000b06:	0037      	movs	r7, r6
 8000b08:	e78e      	b.n	8000a28 <__aeabi_fmul+0x84>
 8000b0a:	4652      	mov	r2, sl
 8000b0c:	2303      	movs	r3, #3
 8000b0e:	431a      	orrs	r2, r3
 8000b10:	4692      	mov	sl, r2
 8000b12:	2003      	movs	r0, #3
 8000b14:	e771      	b.n	80009fa <__aeabi_fmul+0x56>
 8000b16:	4648      	mov	r0, r9
 8000b18:	f000 fac8 	bl	80010ac <__clzsi2>
 8000b1c:	464a      	mov	r2, r9
 8000b1e:	1f43      	subs	r3, r0, #5
 8000b20:	409a      	lsls	r2, r3
 8000b22:	1a2d      	subs	r5, r5, r0
 8000b24:	4691      	mov	r9, r2
 8000b26:	2000      	movs	r0, #0
 8000b28:	3d76      	subs	r5, #118	; 0x76
 8000b2a:	e766      	b.n	80009fa <__aeabi_fmul+0x56>
 8000b2c:	230c      	movs	r3, #12
 8000b2e:	469a      	mov	sl, r3
 8000b30:	3b09      	subs	r3, #9
 8000b32:	25ff      	movs	r5, #255	; 0xff
 8000b34:	469b      	mov	fp, r3
 8000b36:	e74d      	b.n	80009d4 <__aeabi_fmul+0x30>
 8000b38:	0020      	movs	r0, r4
 8000b3a:	f000 fab7 	bl	80010ac <__clzsi2>
 8000b3e:	2576      	movs	r5, #118	; 0x76
 8000b40:	1f43      	subs	r3, r0, #5
 8000b42:	409c      	lsls	r4, r3
 8000b44:	2300      	movs	r3, #0
 8000b46:	426d      	negs	r5, r5
 8000b48:	469a      	mov	sl, r3
 8000b4a:	469b      	mov	fp, r3
 8000b4c:	1a2d      	subs	r5, r5, r0
 8000b4e:	e741      	b.n	80009d4 <__aeabi_fmul+0x30>
 8000b50:	2480      	movs	r4, #128	; 0x80
 8000b52:	2700      	movs	r7, #0
 8000b54:	20ff      	movs	r0, #255	; 0xff
 8000b56:	03e4      	lsls	r4, r4, #15
 8000b58:	e770      	b.n	8000a3c <__aeabi_fmul+0x98>
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	1a1b      	subs	r3, r3, r0
 8000b5e:	2b1b      	cmp	r3, #27
 8000b60:	dd00      	ble.n	8000b64 <__aeabi_fmul+0x1c0>
 8000b62:	e769      	b.n	8000a38 <__aeabi_fmul+0x94>
 8000b64:	319e      	adds	r1, #158	; 0x9e
 8000b66:	0020      	movs	r0, r4
 8000b68:	408c      	lsls	r4, r1
 8000b6a:	40d8      	lsrs	r0, r3
 8000b6c:	1e63      	subs	r3, r4, #1
 8000b6e:	419c      	sbcs	r4, r3
 8000b70:	4304      	orrs	r4, r0
 8000b72:	0763      	lsls	r3, r4, #29
 8000b74:	d004      	beq.n	8000b80 <__aeabi_fmul+0x1dc>
 8000b76:	230f      	movs	r3, #15
 8000b78:	4023      	ands	r3, r4
 8000b7a:	2b04      	cmp	r3, #4
 8000b7c:	d000      	beq.n	8000b80 <__aeabi_fmul+0x1dc>
 8000b7e:	3404      	adds	r4, #4
 8000b80:	0163      	lsls	r3, r4, #5
 8000b82:	d51a      	bpl.n	8000bba <__aeabi_fmul+0x216>
 8000b84:	2001      	movs	r0, #1
 8000b86:	2400      	movs	r4, #0
 8000b88:	e758      	b.n	8000a3c <__aeabi_fmul+0x98>
 8000b8a:	2080      	movs	r0, #128	; 0x80
 8000b8c:	03c0      	lsls	r0, r0, #15
 8000b8e:	4204      	tst	r4, r0
 8000b90:	d009      	beq.n	8000ba6 <__aeabi_fmul+0x202>
 8000b92:	464b      	mov	r3, r9
 8000b94:	4203      	tst	r3, r0
 8000b96:	d106      	bne.n	8000ba6 <__aeabi_fmul+0x202>
 8000b98:	464c      	mov	r4, r9
 8000b9a:	4304      	orrs	r4, r0
 8000b9c:	0264      	lsls	r4, r4, #9
 8000b9e:	4647      	mov	r7, r8
 8000ba0:	20ff      	movs	r0, #255	; 0xff
 8000ba2:	0a64      	lsrs	r4, r4, #9
 8000ba4:	e74a      	b.n	8000a3c <__aeabi_fmul+0x98>
 8000ba6:	2080      	movs	r0, #128	; 0x80
 8000ba8:	03c0      	lsls	r0, r0, #15
 8000baa:	4304      	orrs	r4, r0
 8000bac:	0264      	lsls	r4, r4, #9
 8000bae:	0037      	movs	r7, r6
 8000bb0:	20ff      	movs	r0, #255	; 0xff
 8000bb2:	0a64      	lsrs	r4, r4, #9
 8000bb4:	e742      	b.n	8000a3c <__aeabi_fmul+0x98>
 8000bb6:	0029      	movs	r1, r5
 8000bb8:	e78e      	b.n	8000ad8 <__aeabi_fmul+0x134>
 8000bba:	01a4      	lsls	r4, r4, #6
 8000bbc:	2000      	movs	r0, #0
 8000bbe:	0a64      	lsrs	r4, r4, #9
 8000bc0:	e73c      	b.n	8000a3c <__aeabi_fmul+0x98>
 8000bc2:	2080      	movs	r0, #128	; 0x80
 8000bc4:	03c0      	lsls	r0, r0, #15
 8000bc6:	4304      	orrs	r4, r0
 8000bc8:	0264      	lsls	r4, r4, #9
 8000bca:	20ff      	movs	r0, #255	; 0xff
 8000bcc:	0a64      	lsrs	r4, r4, #9
 8000bce:	e735      	b.n	8000a3c <__aeabi_fmul+0x98>
 8000bd0:	08009720 	.word	0x08009720
 8000bd4:	f7ffffff 	.word	0xf7ffffff

08000bd8 <__aeabi_fsub>:
 8000bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bda:	4646      	mov	r6, r8
 8000bdc:	46d6      	mov	lr, sl
 8000bde:	464f      	mov	r7, r9
 8000be0:	0243      	lsls	r3, r0, #9
 8000be2:	0a5b      	lsrs	r3, r3, #9
 8000be4:	00da      	lsls	r2, r3, #3
 8000be6:	4694      	mov	ip, r2
 8000be8:	024a      	lsls	r2, r1, #9
 8000bea:	b5c0      	push	{r6, r7, lr}
 8000bec:	0044      	lsls	r4, r0, #1
 8000bee:	0a56      	lsrs	r6, r2, #9
 8000bf0:	1c05      	adds	r5, r0, #0
 8000bf2:	46b0      	mov	r8, r6
 8000bf4:	0e24      	lsrs	r4, r4, #24
 8000bf6:	004e      	lsls	r6, r1, #1
 8000bf8:	0992      	lsrs	r2, r2, #6
 8000bfa:	001f      	movs	r7, r3
 8000bfc:	0020      	movs	r0, r4
 8000bfe:	4692      	mov	sl, r2
 8000c00:	0fed      	lsrs	r5, r5, #31
 8000c02:	0e36      	lsrs	r6, r6, #24
 8000c04:	0fc9      	lsrs	r1, r1, #31
 8000c06:	2eff      	cmp	r6, #255	; 0xff
 8000c08:	d100      	bne.n	8000c0c <__aeabi_fsub+0x34>
 8000c0a:	e07f      	b.n	8000d0c <__aeabi_fsub+0x134>
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	4051      	eors	r1, r2
 8000c10:	428d      	cmp	r5, r1
 8000c12:	d051      	beq.n	8000cb8 <__aeabi_fsub+0xe0>
 8000c14:	1ba2      	subs	r2, r4, r6
 8000c16:	4691      	mov	r9, r2
 8000c18:	2a00      	cmp	r2, #0
 8000c1a:	dc00      	bgt.n	8000c1e <__aeabi_fsub+0x46>
 8000c1c:	e07e      	b.n	8000d1c <__aeabi_fsub+0x144>
 8000c1e:	2e00      	cmp	r6, #0
 8000c20:	d100      	bne.n	8000c24 <__aeabi_fsub+0x4c>
 8000c22:	e099      	b.n	8000d58 <__aeabi_fsub+0x180>
 8000c24:	2cff      	cmp	r4, #255	; 0xff
 8000c26:	d100      	bne.n	8000c2a <__aeabi_fsub+0x52>
 8000c28:	e08c      	b.n	8000d44 <__aeabi_fsub+0x16c>
 8000c2a:	2380      	movs	r3, #128	; 0x80
 8000c2c:	4652      	mov	r2, sl
 8000c2e:	04db      	lsls	r3, r3, #19
 8000c30:	431a      	orrs	r2, r3
 8000c32:	4692      	mov	sl, r2
 8000c34:	464a      	mov	r2, r9
 8000c36:	2301      	movs	r3, #1
 8000c38:	2a1b      	cmp	r2, #27
 8000c3a:	dc08      	bgt.n	8000c4e <__aeabi_fsub+0x76>
 8000c3c:	4653      	mov	r3, sl
 8000c3e:	2120      	movs	r1, #32
 8000c40:	40d3      	lsrs	r3, r2
 8000c42:	1a89      	subs	r1, r1, r2
 8000c44:	4652      	mov	r2, sl
 8000c46:	408a      	lsls	r2, r1
 8000c48:	1e51      	subs	r1, r2, #1
 8000c4a:	418a      	sbcs	r2, r1
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	4662      	mov	r2, ip
 8000c50:	1ad3      	subs	r3, r2, r3
 8000c52:	015a      	lsls	r2, r3, #5
 8000c54:	d400      	bmi.n	8000c58 <__aeabi_fsub+0x80>
 8000c56:	e0f3      	b.n	8000e40 <__aeabi_fsub+0x268>
 8000c58:	019b      	lsls	r3, r3, #6
 8000c5a:	099e      	lsrs	r6, r3, #6
 8000c5c:	0030      	movs	r0, r6
 8000c5e:	f000 fa25 	bl	80010ac <__clzsi2>
 8000c62:	3805      	subs	r0, #5
 8000c64:	4086      	lsls	r6, r0
 8000c66:	4284      	cmp	r4, r0
 8000c68:	dd00      	ble.n	8000c6c <__aeabi_fsub+0x94>
 8000c6a:	e0f7      	b.n	8000e5c <__aeabi_fsub+0x284>
 8000c6c:	0032      	movs	r2, r6
 8000c6e:	1b04      	subs	r4, r0, r4
 8000c70:	2020      	movs	r0, #32
 8000c72:	3401      	adds	r4, #1
 8000c74:	40e2      	lsrs	r2, r4
 8000c76:	1b04      	subs	r4, r0, r4
 8000c78:	40a6      	lsls	r6, r4
 8000c7a:	0033      	movs	r3, r6
 8000c7c:	1e5e      	subs	r6, r3, #1
 8000c7e:	41b3      	sbcs	r3, r6
 8000c80:	2400      	movs	r4, #0
 8000c82:	4313      	orrs	r3, r2
 8000c84:	075a      	lsls	r2, r3, #29
 8000c86:	d004      	beq.n	8000c92 <__aeabi_fsub+0xba>
 8000c88:	220f      	movs	r2, #15
 8000c8a:	401a      	ands	r2, r3
 8000c8c:	2a04      	cmp	r2, #4
 8000c8e:	d000      	beq.n	8000c92 <__aeabi_fsub+0xba>
 8000c90:	3304      	adds	r3, #4
 8000c92:	015a      	lsls	r2, r3, #5
 8000c94:	d400      	bmi.n	8000c98 <__aeabi_fsub+0xc0>
 8000c96:	e0d6      	b.n	8000e46 <__aeabi_fsub+0x26e>
 8000c98:	1c62      	adds	r2, r4, #1
 8000c9a:	2cfe      	cmp	r4, #254	; 0xfe
 8000c9c:	d100      	bne.n	8000ca0 <__aeabi_fsub+0xc8>
 8000c9e:	e0da      	b.n	8000e56 <__aeabi_fsub+0x27e>
 8000ca0:	019b      	lsls	r3, r3, #6
 8000ca2:	0a5f      	lsrs	r7, r3, #9
 8000ca4:	b2d0      	uxtb	r0, r2
 8000ca6:	05c0      	lsls	r0, r0, #23
 8000ca8:	4338      	orrs	r0, r7
 8000caa:	07ed      	lsls	r5, r5, #31
 8000cac:	4328      	orrs	r0, r5
 8000cae:	bce0      	pop	{r5, r6, r7}
 8000cb0:	46ba      	mov	sl, r7
 8000cb2:	46b1      	mov	r9, r6
 8000cb4:	46a8      	mov	r8, r5
 8000cb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cb8:	1ba2      	subs	r2, r4, r6
 8000cba:	4691      	mov	r9, r2
 8000cbc:	2a00      	cmp	r2, #0
 8000cbe:	dd63      	ble.n	8000d88 <__aeabi_fsub+0x1b0>
 8000cc0:	2e00      	cmp	r6, #0
 8000cc2:	d100      	bne.n	8000cc6 <__aeabi_fsub+0xee>
 8000cc4:	e099      	b.n	8000dfa <__aeabi_fsub+0x222>
 8000cc6:	2cff      	cmp	r4, #255	; 0xff
 8000cc8:	d03c      	beq.n	8000d44 <__aeabi_fsub+0x16c>
 8000cca:	2380      	movs	r3, #128	; 0x80
 8000ccc:	4652      	mov	r2, sl
 8000cce:	04db      	lsls	r3, r3, #19
 8000cd0:	431a      	orrs	r2, r3
 8000cd2:	4692      	mov	sl, r2
 8000cd4:	464a      	mov	r2, r9
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	2a1b      	cmp	r2, #27
 8000cda:	dc08      	bgt.n	8000cee <__aeabi_fsub+0x116>
 8000cdc:	4653      	mov	r3, sl
 8000cde:	2120      	movs	r1, #32
 8000ce0:	40d3      	lsrs	r3, r2
 8000ce2:	1a89      	subs	r1, r1, r2
 8000ce4:	4652      	mov	r2, sl
 8000ce6:	408a      	lsls	r2, r1
 8000ce8:	1e51      	subs	r1, r2, #1
 8000cea:	418a      	sbcs	r2, r1
 8000cec:	4313      	orrs	r3, r2
 8000cee:	4463      	add	r3, ip
 8000cf0:	015a      	lsls	r2, r3, #5
 8000cf2:	d400      	bmi.n	8000cf6 <__aeabi_fsub+0x11e>
 8000cf4:	e0a4      	b.n	8000e40 <__aeabi_fsub+0x268>
 8000cf6:	3401      	adds	r4, #1
 8000cf8:	2cff      	cmp	r4, #255	; 0xff
 8000cfa:	d100      	bne.n	8000cfe <__aeabi_fsub+0x126>
 8000cfc:	e0ab      	b.n	8000e56 <__aeabi_fsub+0x27e>
 8000cfe:	2201      	movs	r2, #1
 8000d00:	4997      	ldr	r1, [pc, #604]	; (8000f60 <__aeabi_fsub+0x388>)
 8000d02:	401a      	ands	r2, r3
 8000d04:	085b      	lsrs	r3, r3, #1
 8000d06:	400b      	ands	r3, r1
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	e7bb      	b.n	8000c84 <__aeabi_fsub+0xac>
 8000d0c:	2a00      	cmp	r2, #0
 8000d0e:	d032      	beq.n	8000d76 <__aeabi_fsub+0x19e>
 8000d10:	428d      	cmp	r5, r1
 8000d12:	d035      	beq.n	8000d80 <__aeabi_fsub+0x1a8>
 8000d14:	22ff      	movs	r2, #255	; 0xff
 8000d16:	4252      	negs	r2, r2
 8000d18:	4691      	mov	r9, r2
 8000d1a:	44a1      	add	r9, r4
 8000d1c:	464a      	mov	r2, r9
 8000d1e:	2a00      	cmp	r2, #0
 8000d20:	d051      	beq.n	8000dc6 <__aeabi_fsub+0x1ee>
 8000d22:	1b30      	subs	r0, r6, r4
 8000d24:	2c00      	cmp	r4, #0
 8000d26:	d000      	beq.n	8000d2a <__aeabi_fsub+0x152>
 8000d28:	e09c      	b.n	8000e64 <__aeabi_fsub+0x28c>
 8000d2a:	4663      	mov	r3, ip
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d100      	bne.n	8000d32 <__aeabi_fsub+0x15a>
 8000d30:	e0df      	b.n	8000ef2 <__aeabi_fsub+0x31a>
 8000d32:	3801      	subs	r0, #1
 8000d34:	2800      	cmp	r0, #0
 8000d36:	d100      	bne.n	8000d3a <__aeabi_fsub+0x162>
 8000d38:	e0f7      	b.n	8000f2a <__aeabi_fsub+0x352>
 8000d3a:	2eff      	cmp	r6, #255	; 0xff
 8000d3c:	d000      	beq.n	8000d40 <__aeabi_fsub+0x168>
 8000d3e:	e099      	b.n	8000e74 <__aeabi_fsub+0x29c>
 8000d40:	000d      	movs	r5, r1
 8000d42:	4643      	mov	r3, r8
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d100      	bne.n	8000d4a <__aeabi_fsub+0x172>
 8000d48:	e085      	b.n	8000e56 <__aeabi_fsub+0x27e>
 8000d4a:	2780      	movs	r7, #128	; 0x80
 8000d4c:	03ff      	lsls	r7, r7, #15
 8000d4e:	431f      	orrs	r7, r3
 8000d50:	027f      	lsls	r7, r7, #9
 8000d52:	20ff      	movs	r0, #255	; 0xff
 8000d54:	0a7f      	lsrs	r7, r7, #9
 8000d56:	e7a6      	b.n	8000ca6 <__aeabi_fsub+0xce>
 8000d58:	4652      	mov	r2, sl
 8000d5a:	2a00      	cmp	r2, #0
 8000d5c:	d074      	beq.n	8000e48 <__aeabi_fsub+0x270>
 8000d5e:	2201      	movs	r2, #1
 8000d60:	4252      	negs	r2, r2
 8000d62:	4690      	mov	r8, r2
 8000d64:	44c1      	add	r9, r8
 8000d66:	464a      	mov	r2, r9
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	d100      	bne.n	8000d6e <__aeabi_fsub+0x196>
 8000d6c:	e0c8      	b.n	8000f00 <__aeabi_fsub+0x328>
 8000d6e:	2cff      	cmp	r4, #255	; 0xff
 8000d70:	d000      	beq.n	8000d74 <__aeabi_fsub+0x19c>
 8000d72:	e75f      	b.n	8000c34 <__aeabi_fsub+0x5c>
 8000d74:	e7e6      	b.n	8000d44 <__aeabi_fsub+0x16c>
 8000d76:	2201      	movs	r2, #1
 8000d78:	4051      	eors	r1, r2
 8000d7a:	42a9      	cmp	r1, r5
 8000d7c:	d000      	beq.n	8000d80 <__aeabi_fsub+0x1a8>
 8000d7e:	e749      	b.n	8000c14 <__aeabi_fsub+0x3c>
 8000d80:	22ff      	movs	r2, #255	; 0xff
 8000d82:	4252      	negs	r2, r2
 8000d84:	4691      	mov	r9, r2
 8000d86:	44a1      	add	r9, r4
 8000d88:	464a      	mov	r2, r9
 8000d8a:	2a00      	cmp	r2, #0
 8000d8c:	d043      	beq.n	8000e16 <__aeabi_fsub+0x23e>
 8000d8e:	1b31      	subs	r1, r6, r4
 8000d90:	2c00      	cmp	r4, #0
 8000d92:	d100      	bne.n	8000d96 <__aeabi_fsub+0x1be>
 8000d94:	e08c      	b.n	8000eb0 <__aeabi_fsub+0x2d8>
 8000d96:	2eff      	cmp	r6, #255	; 0xff
 8000d98:	d100      	bne.n	8000d9c <__aeabi_fsub+0x1c4>
 8000d9a:	e092      	b.n	8000ec2 <__aeabi_fsub+0x2ea>
 8000d9c:	2380      	movs	r3, #128	; 0x80
 8000d9e:	4662      	mov	r2, ip
 8000da0:	04db      	lsls	r3, r3, #19
 8000da2:	431a      	orrs	r2, r3
 8000da4:	4694      	mov	ip, r2
 8000da6:	2301      	movs	r3, #1
 8000da8:	291b      	cmp	r1, #27
 8000daa:	dc09      	bgt.n	8000dc0 <__aeabi_fsub+0x1e8>
 8000dac:	2020      	movs	r0, #32
 8000dae:	4663      	mov	r3, ip
 8000db0:	4662      	mov	r2, ip
 8000db2:	40cb      	lsrs	r3, r1
 8000db4:	1a41      	subs	r1, r0, r1
 8000db6:	408a      	lsls	r2, r1
 8000db8:	0011      	movs	r1, r2
 8000dba:	1e48      	subs	r0, r1, #1
 8000dbc:	4181      	sbcs	r1, r0
 8000dbe:	430b      	orrs	r3, r1
 8000dc0:	0034      	movs	r4, r6
 8000dc2:	4453      	add	r3, sl
 8000dc4:	e794      	b.n	8000cf0 <__aeabi_fsub+0x118>
 8000dc6:	22fe      	movs	r2, #254	; 0xfe
 8000dc8:	1c66      	adds	r6, r4, #1
 8000dca:	4232      	tst	r2, r6
 8000dcc:	d164      	bne.n	8000e98 <__aeabi_fsub+0x2c0>
 8000dce:	2c00      	cmp	r4, #0
 8000dd0:	d000      	beq.n	8000dd4 <__aeabi_fsub+0x1fc>
 8000dd2:	e082      	b.n	8000eda <__aeabi_fsub+0x302>
 8000dd4:	4663      	mov	r3, ip
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d100      	bne.n	8000ddc <__aeabi_fsub+0x204>
 8000dda:	e0ab      	b.n	8000f34 <__aeabi_fsub+0x35c>
 8000ddc:	4653      	mov	r3, sl
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d100      	bne.n	8000de4 <__aeabi_fsub+0x20c>
 8000de2:	e760      	b.n	8000ca6 <__aeabi_fsub+0xce>
 8000de4:	4663      	mov	r3, ip
 8000de6:	4652      	mov	r2, sl
 8000de8:	1a9b      	subs	r3, r3, r2
 8000dea:	015a      	lsls	r2, r3, #5
 8000dec:	d400      	bmi.n	8000df0 <__aeabi_fsub+0x218>
 8000dee:	e0aa      	b.n	8000f46 <__aeabi_fsub+0x36e>
 8000df0:	4663      	mov	r3, ip
 8000df2:	4652      	mov	r2, sl
 8000df4:	000d      	movs	r5, r1
 8000df6:	1ad3      	subs	r3, r2, r3
 8000df8:	e744      	b.n	8000c84 <__aeabi_fsub+0xac>
 8000dfa:	4652      	mov	r2, sl
 8000dfc:	2a00      	cmp	r2, #0
 8000dfe:	d023      	beq.n	8000e48 <__aeabi_fsub+0x270>
 8000e00:	2201      	movs	r2, #1
 8000e02:	4252      	negs	r2, r2
 8000e04:	4690      	mov	r8, r2
 8000e06:	44c1      	add	r9, r8
 8000e08:	464a      	mov	r2, r9
 8000e0a:	2a00      	cmp	r2, #0
 8000e0c:	d075      	beq.n	8000efa <__aeabi_fsub+0x322>
 8000e0e:	2cff      	cmp	r4, #255	; 0xff
 8000e10:	d000      	beq.n	8000e14 <__aeabi_fsub+0x23c>
 8000e12:	e75f      	b.n	8000cd4 <__aeabi_fsub+0xfc>
 8000e14:	e796      	b.n	8000d44 <__aeabi_fsub+0x16c>
 8000e16:	26fe      	movs	r6, #254	; 0xfe
 8000e18:	3401      	adds	r4, #1
 8000e1a:	4226      	tst	r6, r4
 8000e1c:	d153      	bne.n	8000ec6 <__aeabi_fsub+0x2ee>
 8000e1e:	2800      	cmp	r0, #0
 8000e20:	d172      	bne.n	8000f08 <__aeabi_fsub+0x330>
 8000e22:	4663      	mov	r3, ip
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d100      	bne.n	8000e2a <__aeabi_fsub+0x252>
 8000e28:	e093      	b.n	8000f52 <__aeabi_fsub+0x37a>
 8000e2a:	4653      	mov	r3, sl
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d100      	bne.n	8000e32 <__aeabi_fsub+0x25a>
 8000e30:	e739      	b.n	8000ca6 <__aeabi_fsub+0xce>
 8000e32:	4463      	add	r3, ip
 8000e34:	2400      	movs	r4, #0
 8000e36:	015a      	lsls	r2, r3, #5
 8000e38:	d502      	bpl.n	8000e40 <__aeabi_fsub+0x268>
 8000e3a:	4a4a      	ldr	r2, [pc, #296]	; (8000f64 <__aeabi_fsub+0x38c>)
 8000e3c:	3401      	adds	r4, #1
 8000e3e:	4013      	ands	r3, r2
 8000e40:	075a      	lsls	r2, r3, #29
 8000e42:	d000      	beq.n	8000e46 <__aeabi_fsub+0x26e>
 8000e44:	e720      	b.n	8000c88 <__aeabi_fsub+0xb0>
 8000e46:	08db      	lsrs	r3, r3, #3
 8000e48:	2cff      	cmp	r4, #255	; 0xff
 8000e4a:	d100      	bne.n	8000e4e <__aeabi_fsub+0x276>
 8000e4c:	e77a      	b.n	8000d44 <__aeabi_fsub+0x16c>
 8000e4e:	025b      	lsls	r3, r3, #9
 8000e50:	0a5f      	lsrs	r7, r3, #9
 8000e52:	b2e0      	uxtb	r0, r4
 8000e54:	e727      	b.n	8000ca6 <__aeabi_fsub+0xce>
 8000e56:	20ff      	movs	r0, #255	; 0xff
 8000e58:	2700      	movs	r7, #0
 8000e5a:	e724      	b.n	8000ca6 <__aeabi_fsub+0xce>
 8000e5c:	4b41      	ldr	r3, [pc, #260]	; (8000f64 <__aeabi_fsub+0x38c>)
 8000e5e:	1a24      	subs	r4, r4, r0
 8000e60:	4033      	ands	r3, r6
 8000e62:	e70f      	b.n	8000c84 <__aeabi_fsub+0xac>
 8000e64:	2eff      	cmp	r6, #255	; 0xff
 8000e66:	d100      	bne.n	8000e6a <__aeabi_fsub+0x292>
 8000e68:	e76a      	b.n	8000d40 <__aeabi_fsub+0x168>
 8000e6a:	2380      	movs	r3, #128	; 0x80
 8000e6c:	4662      	mov	r2, ip
 8000e6e:	04db      	lsls	r3, r3, #19
 8000e70:	431a      	orrs	r2, r3
 8000e72:	4694      	mov	ip, r2
 8000e74:	2301      	movs	r3, #1
 8000e76:	281b      	cmp	r0, #27
 8000e78:	dc09      	bgt.n	8000e8e <__aeabi_fsub+0x2b6>
 8000e7a:	2420      	movs	r4, #32
 8000e7c:	4663      	mov	r3, ip
 8000e7e:	4662      	mov	r2, ip
 8000e80:	40c3      	lsrs	r3, r0
 8000e82:	1a20      	subs	r0, r4, r0
 8000e84:	4082      	lsls	r2, r0
 8000e86:	0010      	movs	r0, r2
 8000e88:	1e44      	subs	r4, r0, #1
 8000e8a:	41a0      	sbcs	r0, r4
 8000e8c:	4303      	orrs	r3, r0
 8000e8e:	4652      	mov	r2, sl
 8000e90:	000d      	movs	r5, r1
 8000e92:	0034      	movs	r4, r6
 8000e94:	1ad3      	subs	r3, r2, r3
 8000e96:	e6dc      	b.n	8000c52 <__aeabi_fsub+0x7a>
 8000e98:	4663      	mov	r3, ip
 8000e9a:	4652      	mov	r2, sl
 8000e9c:	1a9e      	subs	r6, r3, r2
 8000e9e:	0173      	lsls	r3, r6, #5
 8000ea0:	d417      	bmi.n	8000ed2 <__aeabi_fsub+0x2fa>
 8000ea2:	2e00      	cmp	r6, #0
 8000ea4:	d000      	beq.n	8000ea8 <__aeabi_fsub+0x2d0>
 8000ea6:	e6d9      	b.n	8000c5c <__aeabi_fsub+0x84>
 8000ea8:	2500      	movs	r5, #0
 8000eaa:	2000      	movs	r0, #0
 8000eac:	2700      	movs	r7, #0
 8000eae:	e6fa      	b.n	8000ca6 <__aeabi_fsub+0xce>
 8000eb0:	4663      	mov	r3, ip
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d044      	beq.n	8000f40 <__aeabi_fsub+0x368>
 8000eb6:	3901      	subs	r1, #1
 8000eb8:	2900      	cmp	r1, #0
 8000eba:	d04c      	beq.n	8000f56 <__aeabi_fsub+0x37e>
 8000ebc:	2eff      	cmp	r6, #255	; 0xff
 8000ebe:	d000      	beq.n	8000ec2 <__aeabi_fsub+0x2ea>
 8000ec0:	e771      	b.n	8000da6 <__aeabi_fsub+0x1ce>
 8000ec2:	4643      	mov	r3, r8
 8000ec4:	e73e      	b.n	8000d44 <__aeabi_fsub+0x16c>
 8000ec6:	2cff      	cmp	r4, #255	; 0xff
 8000ec8:	d0c5      	beq.n	8000e56 <__aeabi_fsub+0x27e>
 8000eca:	4652      	mov	r2, sl
 8000ecc:	4462      	add	r2, ip
 8000ece:	0853      	lsrs	r3, r2, #1
 8000ed0:	e7b6      	b.n	8000e40 <__aeabi_fsub+0x268>
 8000ed2:	4663      	mov	r3, ip
 8000ed4:	000d      	movs	r5, r1
 8000ed6:	1ad6      	subs	r6, r2, r3
 8000ed8:	e6c0      	b.n	8000c5c <__aeabi_fsub+0x84>
 8000eda:	4662      	mov	r2, ip
 8000edc:	2a00      	cmp	r2, #0
 8000ede:	d116      	bne.n	8000f0e <__aeabi_fsub+0x336>
 8000ee0:	4653      	mov	r3, sl
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d000      	beq.n	8000ee8 <__aeabi_fsub+0x310>
 8000ee6:	e72b      	b.n	8000d40 <__aeabi_fsub+0x168>
 8000ee8:	2780      	movs	r7, #128	; 0x80
 8000eea:	2500      	movs	r5, #0
 8000eec:	20ff      	movs	r0, #255	; 0xff
 8000eee:	03ff      	lsls	r7, r7, #15
 8000ef0:	e6d9      	b.n	8000ca6 <__aeabi_fsub+0xce>
 8000ef2:	000d      	movs	r5, r1
 8000ef4:	4643      	mov	r3, r8
 8000ef6:	0034      	movs	r4, r6
 8000ef8:	e7a6      	b.n	8000e48 <__aeabi_fsub+0x270>
 8000efa:	4653      	mov	r3, sl
 8000efc:	4463      	add	r3, ip
 8000efe:	e6f7      	b.n	8000cf0 <__aeabi_fsub+0x118>
 8000f00:	4663      	mov	r3, ip
 8000f02:	4652      	mov	r2, sl
 8000f04:	1a9b      	subs	r3, r3, r2
 8000f06:	e6a4      	b.n	8000c52 <__aeabi_fsub+0x7a>
 8000f08:	4662      	mov	r2, ip
 8000f0a:	2a00      	cmp	r2, #0
 8000f0c:	d0d9      	beq.n	8000ec2 <__aeabi_fsub+0x2ea>
 8000f0e:	4652      	mov	r2, sl
 8000f10:	2a00      	cmp	r2, #0
 8000f12:	d100      	bne.n	8000f16 <__aeabi_fsub+0x33e>
 8000f14:	e716      	b.n	8000d44 <__aeabi_fsub+0x16c>
 8000f16:	2280      	movs	r2, #128	; 0x80
 8000f18:	03d2      	lsls	r2, r2, #15
 8000f1a:	4213      	tst	r3, r2
 8000f1c:	d100      	bne.n	8000f20 <__aeabi_fsub+0x348>
 8000f1e:	e711      	b.n	8000d44 <__aeabi_fsub+0x16c>
 8000f20:	4640      	mov	r0, r8
 8000f22:	4210      	tst	r0, r2
 8000f24:	d000      	beq.n	8000f28 <__aeabi_fsub+0x350>
 8000f26:	e70d      	b.n	8000d44 <__aeabi_fsub+0x16c>
 8000f28:	e70a      	b.n	8000d40 <__aeabi_fsub+0x168>
 8000f2a:	4652      	mov	r2, sl
 8000f2c:	000d      	movs	r5, r1
 8000f2e:	0034      	movs	r4, r6
 8000f30:	1ad3      	subs	r3, r2, r3
 8000f32:	e68e      	b.n	8000c52 <__aeabi_fsub+0x7a>
 8000f34:	4653      	mov	r3, sl
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d008      	beq.n	8000f4c <__aeabi_fsub+0x374>
 8000f3a:	000d      	movs	r5, r1
 8000f3c:	4647      	mov	r7, r8
 8000f3e:	e6b2      	b.n	8000ca6 <__aeabi_fsub+0xce>
 8000f40:	4643      	mov	r3, r8
 8000f42:	0034      	movs	r4, r6
 8000f44:	e780      	b.n	8000e48 <__aeabi_fsub+0x270>
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d000      	beq.n	8000f4c <__aeabi_fsub+0x374>
 8000f4a:	e779      	b.n	8000e40 <__aeabi_fsub+0x268>
 8000f4c:	2500      	movs	r5, #0
 8000f4e:	2700      	movs	r7, #0
 8000f50:	e6a9      	b.n	8000ca6 <__aeabi_fsub+0xce>
 8000f52:	4647      	mov	r7, r8
 8000f54:	e6a7      	b.n	8000ca6 <__aeabi_fsub+0xce>
 8000f56:	4653      	mov	r3, sl
 8000f58:	0034      	movs	r4, r6
 8000f5a:	4463      	add	r3, ip
 8000f5c:	e6c8      	b.n	8000cf0 <__aeabi_fsub+0x118>
 8000f5e:	46c0      	nop			; (mov r8, r8)
 8000f60:	7dffffff 	.word	0x7dffffff
 8000f64:	fbffffff 	.word	0xfbffffff

08000f68 <__aeabi_f2iz>:
 8000f68:	0241      	lsls	r1, r0, #9
 8000f6a:	0042      	lsls	r2, r0, #1
 8000f6c:	0fc3      	lsrs	r3, r0, #31
 8000f6e:	0a49      	lsrs	r1, r1, #9
 8000f70:	2000      	movs	r0, #0
 8000f72:	0e12      	lsrs	r2, r2, #24
 8000f74:	2a7e      	cmp	r2, #126	; 0x7e
 8000f76:	d903      	bls.n	8000f80 <__aeabi_f2iz+0x18>
 8000f78:	2a9d      	cmp	r2, #157	; 0x9d
 8000f7a:	d902      	bls.n	8000f82 <__aeabi_f2iz+0x1a>
 8000f7c:	4a09      	ldr	r2, [pc, #36]	; (8000fa4 <__aeabi_f2iz+0x3c>)
 8000f7e:	1898      	adds	r0, r3, r2
 8000f80:	4770      	bx	lr
 8000f82:	2080      	movs	r0, #128	; 0x80
 8000f84:	0400      	lsls	r0, r0, #16
 8000f86:	4301      	orrs	r1, r0
 8000f88:	2a95      	cmp	r2, #149	; 0x95
 8000f8a:	dc07      	bgt.n	8000f9c <__aeabi_f2iz+0x34>
 8000f8c:	2096      	movs	r0, #150	; 0x96
 8000f8e:	1a82      	subs	r2, r0, r2
 8000f90:	40d1      	lsrs	r1, r2
 8000f92:	4248      	negs	r0, r1
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d1f3      	bne.n	8000f80 <__aeabi_f2iz+0x18>
 8000f98:	0008      	movs	r0, r1
 8000f9a:	e7f1      	b.n	8000f80 <__aeabi_f2iz+0x18>
 8000f9c:	3a96      	subs	r2, #150	; 0x96
 8000f9e:	4091      	lsls	r1, r2
 8000fa0:	e7f7      	b.n	8000f92 <__aeabi_f2iz+0x2a>
 8000fa2:	46c0      	nop			; (mov r8, r8)
 8000fa4:	7fffffff 	.word	0x7fffffff

08000fa8 <__aeabi_i2f>:
 8000fa8:	b570      	push	{r4, r5, r6, lr}
 8000faa:	2800      	cmp	r0, #0
 8000fac:	d013      	beq.n	8000fd6 <__aeabi_i2f+0x2e>
 8000fae:	17c3      	asrs	r3, r0, #31
 8000fb0:	18c5      	adds	r5, r0, r3
 8000fb2:	405d      	eors	r5, r3
 8000fb4:	0fc4      	lsrs	r4, r0, #31
 8000fb6:	0028      	movs	r0, r5
 8000fb8:	f000 f878 	bl	80010ac <__clzsi2>
 8000fbc:	239e      	movs	r3, #158	; 0x9e
 8000fbe:	0001      	movs	r1, r0
 8000fc0:	1a1b      	subs	r3, r3, r0
 8000fc2:	2b96      	cmp	r3, #150	; 0x96
 8000fc4:	dc0f      	bgt.n	8000fe6 <__aeabi_i2f+0x3e>
 8000fc6:	2808      	cmp	r0, #8
 8000fc8:	dd01      	ble.n	8000fce <__aeabi_i2f+0x26>
 8000fca:	3908      	subs	r1, #8
 8000fcc:	408d      	lsls	r5, r1
 8000fce:	026d      	lsls	r5, r5, #9
 8000fd0:	0a6d      	lsrs	r5, r5, #9
 8000fd2:	b2d8      	uxtb	r0, r3
 8000fd4:	e002      	b.n	8000fdc <__aeabi_i2f+0x34>
 8000fd6:	2400      	movs	r4, #0
 8000fd8:	2000      	movs	r0, #0
 8000fda:	2500      	movs	r5, #0
 8000fdc:	05c0      	lsls	r0, r0, #23
 8000fde:	4328      	orrs	r0, r5
 8000fe0:	07e4      	lsls	r4, r4, #31
 8000fe2:	4320      	orrs	r0, r4
 8000fe4:	bd70      	pop	{r4, r5, r6, pc}
 8000fe6:	2b99      	cmp	r3, #153	; 0x99
 8000fe8:	dd0b      	ble.n	8001002 <__aeabi_i2f+0x5a>
 8000fea:	2205      	movs	r2, #5
 8000fec:	002e      	movs	r6, r5
 8000fee:	1a12      	subs	r2, r2, r0
 8000ff0:	40d6      	lsrs	r6, r2
 8000ff2:	0002      	movs	r2, r0
 8000ff4:	321b      	adds	r2, #27
 8000ff6:	4095      	lsls	r5, r2
 8000ff8:	0028      	movs	r0, r5
 8000ffa:	1e45      	subs	r5, r0, #1
 8000ffc:	41a8      	sbcs	r0, r5
 8000ffe:	0035      	movs	r5, r6
 8001000:	4305      	orrs	r5, r0
 8001002:	2905      	cmp	r1, #5
 8001004:	dd01      	ble.n	800100a <__aeabi_i2f+0x62>
 8001006:	1f4a      	subs	r2, r1, #5
 8001008:	4095      	lsls	r5, r2
 800100a:	002a      	movs	r2, r5
 800100c:	4e08      	ldr	r6, [pc, #32]	; (8001030 <__aeabi_i2f+0x88>)
 800100e:	4032      	ands	r2, r6
 8001010:	0768      	lsls	r0, r5, #29
 8001012:	d009      	beq.n	8001028 <__aeabi_i2f+0x80>
 8001014:	200f      	movs	r0, #15
 8001016:	4028      	ands	r0, r5
 8001018:	2804      	cmp	r0, #4
 800101a:	d005      	beq.n	8001028 <__aeabi_i2f+0x80>
 800101c:	3204      	adds	r2, #4
 800101e:	0150      	lsls	r0, r2, #5
 8001020:	d502      	bpl.n	8001028 <__aeabi_i2f+0x80>
 8001022:	239f      	movs	r3, #159	; 0x9f
 8001024:	4032      	ands	r2, r6
 8001026:	1a5b      	subs	r3, r3, r1
 8001028:	0192      	lsls	r2, r2, #6
 800102a:	0a55      	lsrs	r5, r2, #9
 800102c:	b2d8      	uxtb	r0, r3
 800102e:	e7d5      	b.n	8000fdc <__aeabi_i2f+0x34>
 8001030:	fbffffff 	.word	0xfbffffff

08001034 <__aeabi_ui2f>:
 8001034:	b570      	push	{r4, r5, r6, lr}
 8001036:	1e05      	subs	r5, r0, #0
 8001038:	d00e      	beq.n	8001058 <__aeabi_ui2f+0x24>
 800103a:	f000 f837 	bl	80010ac <__clzsi2>
 800103e:	239e      	movs	r3, #158	; 0x9e
 8001040:	0004      	movs	r4, r0
 8001042:	1a1b      	subs	r3, r3, r0
 8001044:	2b96      	cmp	r3, #150	; 0x96
 8001046:	dc0c      	bgt.n	8001062 <__aeabi_ui2f+0x2e>
 8001048:	2808      	cmp	r0, #8
 800104a:	dd01      	ble.n	8001050 <__aeabi_ui2f+0x1c>
 800104c:	3c08      	subs	r4, #8
 800104e:	40a5      	lsls	r5, r4
 8001050:	026d      	lsls	r5, r5, #9
 8001052:	0a6d      	lsrs	r5, r5, #9
 8001054:	b2d8      	uxtb	r0, r3
 8001056:	e001      	b.n	800105c <__aeabi_ui2f+0x28>
 8001058:	2000      	movs	r0, #0
 800105a:	2500      	movs	r5, #0
 800105c:	05c0      	lsls	r0, r0, #23
 800105e:	4328      	orrs	r0, r5
 8001060:	bd70      	pop	{r4, r5, r6, pc}
 8001062:	2b99      	cmp	r3, #153	; 0x99
 8001064:	dd09      	ble.n	800107a <__aeabi_ui2f+0x46>
 8001066:	0002      	movs	r2, r0
 8001068:	0029      	movs	r1, r5
 800106a:	321b      	adds	r2, #27
 800106c:	4091      	lsls	r1, r2
 800106e:	1e4a      	subs	r2, r1, #1
 8001070:	4191      	sbcs	r1, r2
 8001072:	2205      	movs	r2, #5
 8001074:	1a12      	subs	r2, r2, r0
 8001076:	40d5      	lsrs	r5, r2
 8001078:	430d      	orrs	r5, r1
 800107a:	2c05      	cmp	r4, #5
 800107c:	dd01      	ble.n	8001082 <__aeabi_ui2f+0x4e>
 800107e:	1f62      	subs	r2, r4, #5
 8001080:	4095      	lsls	r5, r2
 8001082:	0029      	movs	r1, r5
 8001084:	4e08      	ldr	r6, [pc, #32]	; (80010a8 <__aeabi_ui2f+0x74>)
 8001086:	4031      	ands	r1, r6
 8001088:	076a      	lsls	r2, r5, #29
 800108a:	d009      	beq.n	80010a0 <__aeabi_ui2f+0x6c>
 800108c:	200f      	movs	r0, #15
 800108e:	4028      	ands	r0, r5
 8001090:	2804      	cmp	r0, #4
 8001092:	d005      	beq.n	80010a0 <__aeabi_ui2f+0x6c>
 8001094:	3104      	adds	r1, #4
 8001096:	014a      	lsls	r2, r1, #5
 8001098:	d502      	bpl.n	80010a0 <__aeabi_ui2f+0x6c>
 800109a:	239f      	movs	r3, #159	; 0x9f
 800109c:	4031      	ands	r1, r6
 800109e:	1b1b      	subs	r3, r3, r4
 80010a0:	0189      	lsls	r1, r1, #6
 80010a2:	0a4d      	lsrs	r5, r1, #9
 80010a4:	b2d8      	uxtb	r0, r3
 80010a6:	e7d9      	b.n	800105c <__aeabi_ui2f+0x28>
 80010a8:	fbffffff 	.word	0xfbffffff

080010ac <__clzsi2>:
 80010ac:	211c      	movs	r1, #28
 80010ae:	2301      	movs	r3, #1
 80010b0:	041b      	lsls	r3, r3, #16
 80010b2:	4298      	cmp	r0, r3
 80010b4:	d301      	bcc.n	80010ba <__clzsi2+0xe>
 80010b6:	0c00      	lsrs	r0, r0, #16
 80010b8:	3910      	subs	r1, #16
 80010ba:	0a1b      	lsrs	r3, r3, #8
 80010bc:	4298      	cmp	r0, r3
 80010be:	d301      	bcc.n	80010c4 <__clzsi2+0x18>
 80010c0:	0a00      	lsrs	r0, r0, #8
 80010c2:	3908      	subs	r1, #8
 80010c4:	091b      	lsrs	r3, r3, #4
 80010c6:	4298      	cmp	r0, r3
 80010c8:	d301      	bcc.n	80010ce <__clzsi2+0x22>
 80010ca:	0900      	lsrs	r0, r0, #4
 80010cc:	3904      	subs	r1, #4
 80010ce:	a202      	add	r2, pc, #8	; (adr r2, 80010d8 <__clzsi2+0x2c>)
 80010d0:	5c10      	ldrb	r0, [r2, r0]
 80010d2:	1840      	adds	r0, r0, r1
 80010d4:	4770      	bx	lr
 80010d6:	46c0      	nop			; (mov r8, r8)
 80010d8:	02020304 	.word	0x02020304
 80010dc:	01010101 	.word	0x01010101
	...

080010e8 <app_main>:
uint32_t weight = 0;
uint32_t tara = 0;
int32_t pwm = 0; //remove after testing
int32_t dist = 0; //remove after testing

void app_main(void) {	I2CSemaphore = xSemaphoreCreateMutex();
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af02      	add	r7, sp, #8
 80010ee:	2001      	movs	r0, #1
 80010f0:	f005 f999 	bl	8006426 <xQueueCreateMutex>
 80010f4:	0002      	movs	r2, r0
 80010f6:	4b23      	ldr	r3, [pc, #140]	; (8001184 <app_main+0x9c>)
 80010f8:	601a      	str	r2, [r3, #0]
	ReglerSemaphore = xSemaphoreCreateBinary();
 80010fa:	2203      	movs	r2, #3
 80010fc:	2100      	movs	r1, #0
 80010fe:	2001      	movs	r0, #1
 8001100:	f005 f91a 	bl	8006338 <xQueueGenericCreate>
 8001104:	0002      	movs	r2, r0
 8001106:	4b20      	ldr	r3, [pc, #128]	; (8001188 <app_main+0xa0>)
 8001108:	601a      	str	r2, [r3, #0]
	DisplaySemaphore = xSemaphoreCreateBinary();
 800110a:	2203      	movs	r2, #3
 800110c:	2100      	movs	r1, #0
 800110e:	2001      	movs	r0, #1
 8001110:	f005 f912 	bl	8006338 <xQueueGenericCreate>
 8001114:	0002      	movs	r2, r0
 8001116:	4b1d      	ldr	r3, [pc, #116]	; (800118c <app_main+0xa4>)
 8001118:	601a      	str	r2, [r3, #0]
	RPSemaphore = xSemaphoreCreateBinary();
 800111a:	2203      	movs	r2, #3
 800111c:	2100      	movs	r1, #0
 800111e:	2001      	movs	r0, #1
 8001120:	f005 f90a 	bl	8006338 <xQueueGenericCreate>
 8001124:	0002      	movs	r2, r0
 8001126:	4b1a      	ldr	r3, [pc, #104]	; (8001190 <app_main+0xa8>)
 8001128:	601a      	str	r2, [r3, #0]
	xSemaphoreGive(ReglerSemaphore);
 800112a:	4b17      	ldr	r3, [pc, #92]	; (8001188 <app_main+0xa0>)
 800112c:	6818      	ldr	r0, [r3, #0]
 800112e:	2300      	movs	r3, #0
 8001130:	2200      	movs	r2, #0
 8001132:	2100      	movs	r1, #0
 8001134:	f005 f993 	bl	800645e <xQueueGenericSend>
	xSemaphoreGive(I2CSemaphore);
 8001138:	4b12      	ldr	r3, [pc, #72]	; (8001184 <app_main+0x9c>)
 800113a:	6818      	ldr	r0, [r3, #0]
 800113c:	2300      	movs	r3, #0
 800113e:	2200      	movs	r2, #0
 8001140:	2100      	movs	r1, #0
 8001142:	f005 f98c 	bl	800645e <xQueueGenericSend>
	xSemaphoreGive(RPSemaphore);
 8001146:	4b12      	ldr	r3, [pc, #72]	; (8001190 <app_main+0xa8>)
 8001148:	6818      	ldr	r0, [r3, #0]
 800114a:	2300      	movs	r3, #0
 800114c:	2200      	movs	r2, #0
 800114e:	2100      	movs	r1, #0
 8001150:	f005 f985 	bl	800645e <xQueueGenericSend>
	//xTaskCreate(I2C2Task, "I2C2-Task", (configMINIMAL_STACK_SIZE + 80), NULL, (tskIDLE_PRIORITY + 1), NULL);
	xTaskCreate(MainTask, "Main-Task", (configMINIMAL_STACK_SIZE + 80), NULL,(tskIDLE_PRIORITY + 1), NULL);
 8001154:	490f      	ldr	r1, [pc, #60]	; (8001194 <app_main+0xac>)
 8001156:	4810      	ldr	r0, [pc, #64]	; (8001198 <app_main+0xb0>)
 8001158:	2300      	movs	r3, #0
 800115a:	9301      	str	r3, [sp, #4]
 800115c:	2301      	movs	r3, #1
 800115e:	9300      	str	r3, [sp, #0]
 8001160:	2300      	movs	r3, #0
 8001162:	22d0      	movs	r2, #208	; 0xd0
 8001164:	f005 fe76 	bl	8006e54 <xTaskCreate>
	xTaskCreate(ReglerISTTask, "Regler-Task", (configMINIMAL_STACK_SIZE + 80),
 8001168:	490c      	ldr	r1, [pc, #48]	; (800119c <app_main+0xb4>)
 800116a:	480d      	ldr	r0, [pc, #52]	; (80011a0 <app_main+0xb8>)
 800116c:	2300      	movs	r3, #0
 800116e:	9301      	str	r3, [sp, #4]
 8001170:	2302      	movs	r3, #2
 8001172:	9300      	str	r3, [sp, #0]
 8001174:	2300      	movs	r3, #0
 8001176:	22d0      	movs	r2, #208	; 0xd0
 8001178:	f005 fe6c 	bl	8006e54 <xTaskCreate>
	NULL, (tskIDLE_PRIORITY + 2), NULL);
	vTaskStartScheduler();
 800117c:	f005 ffc6 	bl	800710c <vTaskStartScheduler>
	/* The FreeRTOS scheduler should never return to here, except on out of memory at creating the idle task! */
	for (;;)
 8001180:	e7fe      	b.n	8001180 <app_main+0x98>
 8001182:	46c0      	nop			; (mov r8, r8)
 8001184:	20001e10 	.word	0x20001e10
 8001188:	20001de4 	.word	0x20001de4
 800118c:	20001e14 	.word	0x20001e14
 8001190:	20001de0 	.word	0x20001de0
 8001194:	080095e8 	.word	0x080095e8
 8001198:	0800123d 	.word	0x0800123d
 800119c:	080095f4 	.word	0x080095f4
 80011a0:	08001405 	.word	0x08001405

080011a4 <TIM7_IRQHandler>:
}

/*
 * Timer for PI-Controller
 */
void TIM7_IRQHandler(void) {
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
	portBASE_TYPE higherPriorityTaskWoken = 0;
 80011aa:	2300      	movs	r3, #0
 80011ac:	607b      	str	r3, [r7, #4]
	if (ReglerSemaphore != NULL) {
 80011ae:	4b0c      	ldr	r3, [pc, #48]	; (80011e0 <TIM7_IRQHandler+0x3c>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d006      	beq.n	80011c4 <TIM7_IRQHandler+0x20>
		xSemaphoreGiveFromISR(ReglerSemaphore, &higherPriorityTaskWoken);
 80011b6:	4b0a      	ldr	r3, [pc, #40]	; (80011e0 <TIM7_IRQHandler+0x3c>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	1d3a      	adds	r2, r7, #4
 80011bc:	0011      	movs	r1, r2
 80011be:	0018      	movs	r0, r3
 80011c0:	f005 fa82 	bl	80066c8 <xQueueGiveFromISR>
	}
	if (higherPriorityTaskWoken != 0) {
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <TIM7_IRQHandler+0x2a>
		taskYIELD();
 80011ca:	f007 f899 	bl	8008300 <vPortYield>
	}
	//Clear TIM7 Update Event Flag
	TIM7->SR = ~TIM_IT_UPDATE;
 80011ce:	4b05      	ldr	r3, [pc, #20]	; (80011e4 <TIM7_IRQHandler+0x40>)
 80011d0:	2202      	movs	r2, #2
 80011d2:	4252      	negs	r2, r2
 80011d4:	611a      	str	r2, [r3, #16]
}
 80011d6:	46c0      	nop			; (mov r8, r8)
 80011d8:	46bd      	mov	sp, r7
 80011da:	b002      	add	sp, #8
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	46c0      	nop			; (mov r8, r8)
 80011e0:	20001de4 	.word	0x20001de4
 80011e4:	40001400 	.word	0x40001400

080011e8 <HAL_GPIO_EXTI_Callback>:

/*
 * Read the button
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	0002      	movs	r2, r0
 80011f0:	1dbb      	adds	r3, r7, #6
 80011f2:	801a      	strh	r2, [r3, #0]
	if (GPIO_Pin == BTN_TARA) {
 80011f4:	1dbb      	adds	r3, r7, #6
 80011f6:	881b      	ldrh	r3, [r3, #0]
 80011f8:	2b08      	cmp	r3, #8
 80011fa:	d103      	bne.n	8001204 <HAL_GPIO_EXTI_Callback+0x1c>
		tara = weight;
 80011fc:	4b0c      	ldr	r3, [pc, #48]	; (8001230 <HAL_GPIO_EXTI_Callback+0x48>)
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	4b0c      	ldr	r3, [pc, #48]	; (8001234 <HAL_GPIO_EXTI_Callback+0x4c>)
 8001202:	601a      	str	r2, [r3, #0]
	}
	if (GPIO_Pin == BTN_UINT) {
 8001204:	1dbb      	adds	r3, r7, #6
 8001206:	881b      	ldrh	r3, [r3, #0]
 8001208:	2b04      	cmp	r3, #4
 800120a:	d10d      	bne.n	8001228 <HAL_GPIO_EXTI_Callback+0x40>
		unit_oz = !unit_oz;
 800120c:	4b0a      	ldr	r3, [pc, #40]	; (8001238 <HAL_GPIO_EXTI_Callback+0x50>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	1e5a      	subs	r2, r3, #1
 8001212:	4193      	sbcs	r3, r2
 8001214:	b2db      	uxtb	r3, r3
 8001216:	2201      	movs	r2, #1
 8001218:	4053      	eors	r3, r2
 800121a:	b2db      	uxtb	r3, r3
 800121c:	1c1a      	adds	r2, r3, #0
 800121e:	2301      	movs	r3, #1
 8001220:	4013      	ands	r3, r2
 8001222:	b2da      	uxtb	r2, r3
 8001224:	4b04      	ldr	r3, [pc, #16]	; (8001238 <HAL_GPIO_EXTI_Callback+0x50>)
 8001226:	701a      	strb	r2, [r3, #0]
	}
}
 8001228:	46c0      	nop			; (mov r8, r8)
 800122a:	46bd      	mov	sp, r7
 800122c:	b002      	add	sp, #8
 800122e:	bd80      	pop	{r7, pc}
 8001230:	200000a0 	.word	0x200000a0
 8001234:	200000a4 	.word	0x200000a4
 8001238:	2000009c 	.word	0x2000009c

0800123c <MainTask>:

/*
 *
 */
static void MainTask(__attribute__ ((unused)) void *pvParameters) {
 800123c:	b590      	push	{r4, r7, lr}
 800123e:	b08b      	sub	sp, #44	; 0x2c
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
	HAL_Delay(DISPLAY_START_DELAY);
 8001244:	20c8      	movs	r0, #200	; 0xc8
 8001246:	f001 fa7b 	bl	8002740 <HAL_Delay>
	oled_init();
 800124a:	f000 fa87 	bl	800175c <oled_init>
	char text[DISPLAY_TEXT_LENGTH];
	uint32_t current = 0;
 800124e:	2300      	movs	r3, #0
 8001250:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t temp = 0;
 8001252:	2300      	movs	r3, #0
 8001254:	623b      	str	r3, [r7, #32]
	while (1) {
		if (xSemaphoreTake(DisplaySemaphore,
 8001256:	4b5c      	ldr	r3, [pc, #368]	; (80013c8 <MainTask+0x18c>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	21c8      	movs	r1, #200	; 0xc8
 800125c:	0018      	movs	r0, r3
 800125e:	f005 fb4d 	bl	80068fc <xQueueSemaphoreTake>
 8001262:	0003      	movs	r3, r0
 8001264:	2b01      	cmp	r3, #1
 8001266:	d1f6      	bne.n	8001256 <MainTask+0x1a>
				MAX_DELAY_DISPLAY_SEMAPHORE) == pdTRUE) {
			if (unit_oz) {
 8001268:	4b58      	ldr	r3, [pc, #352]	; (80013cc <MainTask+0x190>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d01c      	beq.n	80012aa <MainTask+0x6e>
				static uint32_t ounce = 0;
				ounce = (float) (weight - tara) * CONVERSION_GR_OZ;
 8001270:	4b57      	ldr	r3, [pc, #348]	; (80013d0 <MainTask+0x194>)
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	4b57      	ldr	r3, [pc, #348]	; (80013d4 <MainTask+0x198>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	0018      	movs	r0, r3
 800127c:	f7ff feda 	bl	8001034 <__aeabi_ui2f>
 8001280:	1c03      	adds	r3, r0, #0
 8001282:	4955      	ldr	r1, [pc, #340]	; (80013d8 <MainTask+0x19c>)
 8001284:	1c18      	adds	r0, r3, #0
 8001286:	f7ff fb8d 	bl	80009a4 <__aeabi_fmul>
 800128a:	1c03      	adds	r3, r0, #0
 800128c:	1c18      	adds	r0, r3, #0
 800128e:	f7ff f80b 	bl	80002a8 <__aeabi_f2uiz>
 8001292:	0002      	movs	r2, r0
 8001294:	4b51      	ldr	r3, [pc, #324]	; (80013dc <MainTask+0x1a0>)
 8001296:	601a      	str	r2, [r3, #0]
				snprintf(text, sizeof(text), "Gew.: %3d oz", (int) ounce);
 8001298:	4b50      	ldr	r3, [pc, #320]	; (80013dc <MainTask+0x1a0>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a50      	ldr	r2, [pc, #320]	; (80013e0 <MainTask+0x1a4>)
 800129e:	210c      	movs	r1, #12
 80012a0:	1878      	adds	r0, r7, r1
 80012a2:	2114      	movs	r1, #20
 80012a4:	f007 fd3e 	bl	8008d24 <sniprintf>
 80012a8:	e00a      	b.n	80012c0 <MainTask+0x84>
			} else {
				snprintf(text, sizeof(text), "Gew.: %3d g",
						(int) (weight - tara));
 80012aa:	4b49      	ldr	r3, [pc, #292]	; (80013d0 <MainTask+0x194>)
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	4b49      	ldr	r3, [pc, #292]	; (80013d4 <MainTask+0x198>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	1ad3      	subs	r3, r2, r3
				snprintf(text, sizeof(text), "Gew.: %3d g",
 80012b4:	4a4b      	ldr	r2, [pc, #300]	; (80013e4 <MainTask+0x1a8>)
 80012b6:	210c      	movs	r1, #12
 80012b8:	1878      	adds	r0, r7, r1
 80012ba:	2114      	movs	r1, #20
 80012bc:	f007 fd32 	bl	8008d24 <sniprintf>
			}
			oled_printf(1, Black, text);
 80012c0:	240c      	movs	r4, #12
 80012c2:	193b      	adds	r3, r7, r4
 80012c4:	001a      	movs	r2, r3
 80012c6:	2100      	movs	r1, #0
 80012c8:	2001      	movs	r0, #1
 80012ca:	f000 fa7f 	bl	80017cc <oled_printf>
			snprintf(text, sizeof(text), "weight:");
 80012ce:	4a46      	ldr	r2, [pc, #280]	; (80013e8 <MainTask+0x1ac>)
 80012d0:	193b      	adds	r3, r7, r4
 80012d2:	2114      	movs	r1, #20
 80012d4:	0018      	movs	r0, r3
 80012d6:	f007 fd25 	bl	8008d24 <sniprintf>
			oled_printf(2, Black, text);
 80012da:	193b      	adds	r3, r7, r4
 80012dc:	001a      	movs	r2, r3
 80012de:	2100      	movs	r1, #0
 80012e0:	2002      	movs	r0, #2
 80012e2:	f000 fa73 	bl	80017cc <oled_printf>
			snprintf(text, sizeof(text), "%06d", (int) weight);
 80012e6:	4b3a      	ldr	r3, [pc, #232]	; (80013d0 <MainTask+0x194>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a40      	ldr	r2, [pc, #256]	; (80013ec <MainTask+0x1b0>)
 80012ec:	1938      	adds	r0, r7, r4
 80012ee:	2114      	movs	r1, #20
 80012f0:	f007 fd18 	bl	8008d24 <sniprintf>
			oled_printf(3, Black, text);
 80012f4:	193b      	adds	r3, r7, r4
 80012f6:	001a      	movs	r2, r3
 80012f8:	2100      	movs	r1, #0
 80012fa:	2003      	movs	r0, #3
 80012fc:	f000 fa66 	bl	80017cc <oled_printf>
			snprintf(text, sizeof(text), "Current:");
 8001300:	4a3b      	ldr	r2, [pc, #236]	; (80013f0 <MainTask+0x1b4>)
 8001302:	193b      	adds	r3, r7, r4
 8001304:	2114      	movs	r1, #20
 8001306:	0018      	movs	r0, r3
 8001308:	f007 fd0c 	bl	8008d24 <sniprintf>
			oled_printf(4, Black, text);
 800130c:	193b      	adds	r3, r7, r4
 800130e:	001a      	movs	r2, r3
 8001310:	2100      	movs	r1, #0
 8001312:	2004      	movs	r0, #4
 8001314:	f000 fa5a 	bl	80017cc <oled_printf>
			snprintf(text, sizeof(text), "%06d", (int) current);
 8001318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131a:	4a34      	ldr	r2, [pc, #208]	; (80013ec <MainTask+0x1b0>)
 800131c:	1938      	adds	r0, r7, r4
 800131e:	2114      	movs	r1, #20
 8001320:	f007 fd00 	bl	8008d24 <sniprintf>
			oled_printf(5, Black, text);
 8001324:	193b      	adds	r3, r7, r4
 8001326:	001a      	movs	r2, r3
 8001328:	2100      	movs	r1, #0
 800132a:	2005      	movs	r0, #5
 800132c:	f000 fa4e 	bl	80017cc <oled_printf>
			snprintf(text, sizeof(text), "PWM-Value:");
 8001330:	4a30      	ldr	r2, [pc, #192]	; (80013f4 <MainTask+0x1b8>)
 8001332:	193b      	adds	r3, r7, r4
 8001334:	2114      	movs	r1, #20
 8001336:	0018      	movs	r0, r3
 8001338:	f007 fcf4 	bl	8008d24 <sniprintf>
			oled_printf(6, Black, text);
 800133c:	193b      	adds	r3, r7, r4
 800133e:	001a      	movs	r2, r3
 8001340:	2100      	movs	r1, #0
 8001342:	2006      	movs	r0, #6
 8001344:	f000 fa42 	bl	80017cc <oled_printf>
			snprintf(text, sizeof(text), "%06d", (int) pwm);
 8001348:	4b2b      	ldr	r3, [pc, #172]	; (80013f8 <MainTask+0x1bc>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a27      	ldr	r2, [pc, #156]	; (80013ec <MainTask+0x1b0>)
 800134e:	1938      	adds	r0, r7, r4
 8001350:	2114      	movs	r1, #20
 8001352:	f007 fce7 	bl	8008d24 <sniprintf>
			oled_printf(7, Black, text);
 8001356:	193b      	adds	r3, r7, r4
 8001358:	001a      	movs	r2, r3
 800135a:	2100      	movs	r1, #0
 800135c:	2007      	movs	r0, #7
 800135e:	f000 fa35 	bl	80017cc <oled_printf>
			snprintf(text, sizeof(text), "Dist:");
 8001362:	4a26      	ldr	r2, [pc, #152]	; (80013fc <MainTask+0x1c0>)
 8001364:	193b      	adds	r3, r7, r4
 8001366:	2114      	movs	r1, #20
 8001368:	0018      	movs	r0, r3
 800136a:	f007 fcdb 	bl	8008d24 <sniprintf>
			oled_printf(8, Black, text);
 800136e:	193b      	adds	r3, r7, r4
 8001370:	001a      	movs	r2, r3
 8001372:	2100      	movs	r1, #0
 8001374:	2008      	movs	r0, #8
 8001376:	f000 fa29 	bl	80017cc <oled_printf>
			snprintf(text, sizeof(text), "%06d", (int) dist);
 800137a:	4b21      	ldr	r3, [pc, #132]	; (8001400 <MainTask+0x1c4>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a1b      	ldr	r2, [pc, #108]	; (80013ec <MainTask+0x1b0>)
 8001380:	1938      	adds	r0, r7, r4
 8001382:	2114      	movs	r1, #20
 8001384:	f007 fcce 	bl	8008d24 <sniprintf>
			oled_printf(9, Black, text);
 8001388:	193b      	adds	r3, r7, r4
 800138a:	001a      	movs	r2, r3
 800138c:	2100      	movs	r1, #0
 800138e:	2009      	movs	r0, #9
 8001390:	f000 fa1c 	bl	80017cc <oled_printf>
			current = current_average(readCurrent());
 8001394:	f000 f8dc 	bl	8001550 <readCurrent>
 8001398:	0003      	movs	r3, r0
 800139a:	0018      	movs	r0, r3
 800139c:	f000 f9a2 	bl	80016e4 <current_average>
 80013a0:	0003      	movs	r3, r0
 80013a2:	627b      	str	r3, [r7, #36]	; 0x24
			temp = readTemp();
 80013a4:	f000 f910 	bl	80015c8 <readTemp>
 80013a8:	0003      	movs	r3, r0
 80013aa:	623b      	str	r3, [r7, #32]
			calc_weight(current, temp);
 80013ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ae:	b29b      	uxth	r3, r3
 80013b0:	6a3a      	ldr	r2, [r7, #32]
 80013b2:	b292      	uxth	r2, r2
 80013b4:	0011      	movs	r1, r2
 80013b6:	0018      	movs	r0, r3
 80013b8:	f000 f932 	bl	8001620 <calc_weight>
			HAL_Delay(500);
 80013bc:	23fa      	movs	r3, #250	; 0xfa
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	0018      	movs	r0, r3
 80013c2:	f001 f9bd 	bl	8002740 <HAL_Delay>
		if (xSemaphoreTake(DisplaySemaphore,
 80013c6:	e746      	b.n	8001256 <MainTask+0x1a>
 80013c8:	20001e14 	.word	0x20001e14
 80013cc:	2000009c 	.word	0x2000009c
 80013d0:	200000a0 	.word	0x200000a0
 80013d4:	200000a4 	.word	0x200000a4
 80013d8:	3d107b78 	.word	0x3d107b78
 80013dc:	200000b0 	.word	0x200000b0
 80013e0:	08009600 	.word	0x08009600
 80013e4:	08009610 	.word	0x08009610
 80013e8:	0800961c 	.word	0x0800961c
 80013ec:	08009624 	.word	0x08009624
 80013f0:	0800962c 	.word	0x0800962c
 80013f4:	08009638 	.word	0x08009638
 80013f8:	200000a8 	.word	0x200000a8
 80013fc:	08009644 	.word	0x08009644
 8001400:	200000ac 	.word	0x200000ac

08001404 <ReglerISTTask>:
}

/*
 * Interupt service task for PI-Controller
 */
static void ReglerISTTask(__attribute__ ((unused)) void *pvParameters) {
 8001404:	b590      	push	{r4, r7, lr}
 8001406:	b08b      	sub	sp, #44	; 0x2c
 8001408:	af06      	add	r7, sp, #24
 800140a:	6078      	str	r0, [r7, #4]
	initVCNL4040(VCNL4040_ADDR); //Wegmesssensor initialisieren
 800140c:	20c0      	movs	r0, #192	; 0xc0
 800140e:	f000 faea 	bl	80019e6 <initVCNL4040>
	int32_t idle_value = (DISTANCE_SCALER*readVCNL4040(VCNL4040_ADDR, (VCNL4040_PS_DATA)))
 8001412:	2108      	movs	r1, #8
 8001414:	20c0      	movs	r0, #192	; 0xc0
 8001416:	f000 fb51 	bl	8001abc <readVCNL4040>
 800141a:	0002      	movs	r2, r0
 800141c:	0013      	movs	r3, r2
 800141e:	005b      	lsls	r3, r3, #1
 8001420:	189b      	adds	r3, r3, r2
 8001422:	3b0a      	subs	r3, #10
 8001424:	60fb      	str	r3, [r7, #12]
			- START_DIST_OFFSET; //Read start distance
	piregler_init(&piregler, idle_value, 0, KP, 0, KI, LOW, HIGH, TS); //PIRegler initialisieren
 8001426:	68f8      	ldr	r0, [r7, #12]
 8001428:	f7ff fdbe 	bl	8000fa8 <__aeabi_i2f>
 800142c:	1c01      	adds	r1, r0, #0
 800142e:	4c1f      	ldr	r4, [pc, #124]	; (80014ac <ReglerISTTask+0xa8>)
 8001430:	2200      	movs	r2, #0
 8001432:	481f      	ldr	r0, [pc, #124]	; (80014b0 <ReglerISTTask+0xac>)
 8001434:	4b1f      	ldr	r3, [pc, #124]	; (80014b4 <ReglerISTTask+0xb0>)
 8001436:	9304      	str	r3, [sp, #16]
 8001438:	4b1f      	ldr	r3, [pc, #124]	; (80014b8 <ReglerISTTask+0xb4>)
 800143a:	9303      	str	r3, [sp, #12]
 800143c:	4b1f      	ldr	r3, [pc, #124]	; (80014bc <ReglerISTTask+0xb8>)
 800143e:	9302      	str	r3, [sp, #8]
 8001440:	2381      	movs	r3, #129	; 0x81
 8001442:	05db      	lsls	r3, r3, #23
 8001444:	9301      	str	r3, [sp, #4]
 8001446:	2300      	movs	r3, #0
 8001448:	9300      	str	r3, [sp, #0]
 800144a:	1c23      	adds	r3, r4, #0
 800144c:	f000 fa1c 	bl	8001888 <piregler_init>
	while (1) {
		if (xSemaphoreTake(ReglerSemaphore,MAX_DELAY_REGLER_SEMAPHORE) == pdTRUE) {
 8001450:	4b1b      	ldr	r3, [pc, #108]	; (80014c0 <ReglerISTTask+0xbc>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2164      	movs	r1, #100	; 0x64
 8001456:	0018      	movs	r0, r3
 8001458:	f005 fa50 	bl	80068fc <xQueueSemaphoreTake>
 800145c:	0003      	movs	r3, r0
 800145e:	2b01      	cmp	r3, #1
 8001460:	d1f6      	bne.n	8001450 <ReglerISTTask+0x4c>
			dist = readVCNL4040(VCNL4040_ADDR, (VCNL4040_PS_DATA)); //Read distance of sensor
 8001462:	2108      	movs	r1, #8
 8001464:	20c0      	movs	r0, #192	; 0xc0
 8001466:	f000 fb29 	bl	8001abc <readVCNL4040>
 800146a:	0002      	movs	r2, r0
 800146c:	4b15      	ldr	r3, [pc, #84]	; (80014c4 <ReglerISTTask+0xc0>)
 800146e:	601a      	str	r2, [r3, #0]
			piregler.val = (float) dist*DISTANCE_SCALER; //Set value to the piregler
 8001470:	4b14      	ldr	r3, [pc, #80]	; (80014c4 <ReglerISTTask+0xc0>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	0018      	movs	r0, r3
 8001476:	f7ff fd97 	bl	8000fa8 <__aeabi_i2f>
 800147a:	1c03      	adds	r3, r0, #0
 800147c:	4912      	ldr	r1, [pc, #72]	; (80014c8 <ReglerISTTask+0xc4>)
 800147e:	1c18      	adds	r0, r3, #0
 8001480:	f7ff fa90 	bl	80009a4 <__aeabi_fmul>
 8001484:	1c03      	adds	r3, r0, #0
 8001486:	1c1a      	adds	r2, r3, #0
 8001488:	4b09      	ldr	r3, [pc, #36]	; (80014b0 <ReglerISTTask+0xac>)
 800148a:	605a      	str	r2, [r3, #4]
			user_pwm_setvalue(ctl_pi(&piregler)); //Run piregler and set the new pwm duty-cycle
 800148c:	4b08      	ldr	r3, [pc, #32]	; (80014b0 <ReglerISTTask+0xac>)
 800148e:	0018      	movs	r0, r3
 8001490:	f000 fa81 	bl	8001996 <ctl_pi>
 8001494:	1c03      	adds	r3, r0, #0
 8001496:	1c18      	adds	r0, r3, #0
 8001498:	f000 f81a 	bl	80014d0 <user_pwm_setvalue>
			xSemaphoreGive(DisplaySemaphore);
 800149c:	4b0b      	ldr	r3, [pc, #44]	; (80014cc <ReglerISTTask+0xc8>)
 800149e:	6818      	ldr	r0, [r3, #0]
 80014a0:	2300      	movs	r3, #0
 80014a2:	2200      	movs	r2, #0
 80014a4:	2100      	movs	r1, #0
 80014a6:	f004 ffda 	bl	800645e <xQueueGenericSend>
		if (xSemaphoreTake(ReglerSemaphore,MAX_DELAY_REGLER_SEMAPHORE) == pdTRUE) {
 80014aa:	e7d1      	b.n	8001450 <ReglerISTTask+0x4c>
 80014ac:	41080000 	.word	0x41080000
 80014b0:	20001de8 	.word	0x20001de8
 80014b4:	3ba3d70a 	.word	0x3ba3d70a
 80014b8:	45228000 	.word	0x45228000
 80014bc:	44e38000 	.word	0x44e38000
 80014c0:	20001de4 	.word	0x20001de4
 80014c4:	200000ac 	.word	0x200000ac
 80014c8:	40400000 	.word	0x40400000
 80014cc:	20001e14 	.word	0x20001e14

080014d0 <user_pwm_setvalue>:

/**
 * Set dutycyle of PWM-Output
 * Note: Value must be between PWM_MAX_VAL and PWM_MIN_VAL
 */
static void user_pwm_setvalue(float value) {
 80014d0:	b590      	push	{r4, r7, lr}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
	static int32_t pwmvalue = PWM_START_VALUE;
	pwmvalue = pwmvalue - (value / PWM_SCALER);
 80014d8:	4b19      	ldr	r3, [pc, #100]	; (8001540 <user_pwm_setvalue+0x70>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	0018      	movs	r0, r3
 80014de:	f7ff fd63 	bl	8000fa8 <__aeabi_i2f>
 80014e2:	1c04      	adds	r4, r0, #0
 80014e4:	4917      	ldr	r1, [pc, #92]	; (8001544 <user_pwm_setvalue+0x74>)
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f7ff f892 	bl	8000610 <__aeabi_fdiv>
 80014ec:	1c03      	adds	r3, r0, #0
 80014ee:	1c19      	adds	r1, r3, #0
 80014f0:	1c20      	adds	r0, r4, #0
 80014f2:	f7ff fb71 	bl	8000bd8 <__aeabi_fsub>
 80014f6:	1c03      	adds	r3, r0, #0
 80014f8:	1c18      	adds	r0, r3, #0
 80014fa:	f7ff fd35 	bl	8000f68 <__aeabi_f2iz>
 80014fe:	0002      	movs	r2, r0
 8001500:	4b0f      	ldr	r3, [pc, #60]	; (8001540 <user_pwm_setvalue+0x70>)
 8001502:	601a      	str	r2, [r3, #0]
	//Limit output of PWM
	if (pwmvalue > PWM_MAX_VAL) {
 8001504:	4b0e      	ldr	r3, [pc, #56]	; (8001540 <user_pwm_setvalue+0x70>)
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	23e1      	movs	r3, #225	; 0xe1
 800150a:	00db      	lsls	r3, r3, #3
 800150c:	429a      	cmp	r2, r3
 800150e:	dd03      	ble.n	8001518 <user_pwm_setvalue+0x48>
		pwmvalue = PWM_MAX_VAL;
 8001510:	4b0b      	ldr	r3, [pc, #44]	; (8001540 <user_pwm_setvalue+0x70>)
 8001512:	22e1      	movs	r2, #225	; 0xe1
 8001514:	00d2      	lsls	r2, r2, #3
 8001516:	601a      	str	r2, [r3, #0]
	}
	if (pwmvalue <= PWM_MIN_VAL) {
 8001518:	4b09      	ldr	r3, [pc, #36]	; (8001540 <user_pwm_setvalue+0x70>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	2b00      	cmp	r3, #0
 800151e:	dc02      	bgt.n	8001526 <user_pwm_setvalue+0x56>
		pwmvalue = PWM_MIN_VAL;
 8001520:	4b07      	ldr	r3, [pc, #28]	; (8001540 <user_pwm_setvalue+0x70>)
 8001522:	2200      	movs	r2, #0
 8001524:	601a      	str	r2, [r3, #0]
	}

	pwm = pwmvalue; // Remove in final version
 8001526:	4b06      	ldr	r3, [pc, #24]	; (8001540 <user_pwm_setvalue+0x70>)
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	4b07      	ldr	r3, [pc, #28]	; (8001548 <user_pwm_setvalue+0x78>)
 800152c:	601a      	str	r2, [r3, #0]

	TIM1->CCR4 = pwmvalue; //Set DutyCylcle in timer-register
 800152e:	4b04      	ldr	r3, [pc, #16]	; (8001540 <user_pwm_setvalue+0x70>)
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	4b06      	ldr	r3, [pc, #24]	; (800154c <user_pwm_setvalue+0x7c>)
 8001534:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001536:	46c0      	nop			; (mov r8, r8)
 8001538:	46bd      	mov	sp, r7
 800153a:	b003      	add	sp, #12
 800153c:	bd90      	pop	{r4, r7, pc}
 800153e:	46c0      	nop			; (mov r8, r8)
 8001540:	20000000 	.word	0x20000000
 8001544:	44960000 	.word	0x44960000
 8001548:	200000a8 	.word	0x200000a8
 800154c:	40012c00 	.word	0x40012c00

08001550 <readCurrent>:

/**
 * Read out ADC with the current value trough the FET
 */
static uint32_t readCurrent(void) {
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
	ADC_Select_CH0();
 8001556:	f000 fe31 	bl	80021bc <ADC_Select_CH0>
	HAL_ADC_Start(&hadc);
 800155a:	4b19      	ldr	r3, [pc, #100]	; (80015c0 <readCurrent+0x70>)
 800155c:	0018      	movs	r0, r3
 800155e:	f001 fa53 	bl	8002a08 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, MAX_ADC_TIMEOUT);
 8001562:	23fa      	movs	r3, #250	; 0xfa
 8001564:	009a      	lsls	r2, r3, #2
 8001566:	4b16      	ldr	r3, [pc, #88]	; (80015c0 <readCurrent+0x70>)
 8001568:	0011      	movs	r1, r2
 800156a:	0018      	movs	r0, r3
 800156c:	f001 fae0 	bl	8002b30 <HAL_ADC_PollForConversion>
	uint32_t current = HAL_ADC_GetValue(&hadc);
 8001570:	4b13      	ldr	r3, [pc, #76]	; (80015c0 <readCurrent+0x70>)
 8001572:	0018      	movs	r0, r3
 8001574:	f001 fb74 	bl	8002c60 <HAL_ADC_GetValue>
 8001578:	0003      	movs	r3, r0
 800157a:	607b      	str	r3, [r7, #4]
	HAL_ADC_Stop(&hadc);
 800157c:	4b10      	ldr	r3, [pc, #64]	; (80015c0 <readCurrent+0x70>)
 800157e:	0018      	movs	r0, r3
 8001580:	f001 fa96 	bl	8002ab0 <HAL_ADC_Stop>
	//Calculate the current trough the Magnet in [mA]
	current = (COVERTION_A_TO_MA * (float) current) / ADC_MAX_VALUE;
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f7ff fd55 	bl	8001034 <__aeabi_ui2f>
 800158a:	1c03      	adds	r3, r0, #0
 800158c:	490d      	ldr	r1, [pc, #52]	; (80015c4 <readCurrent+0x74>)
 800158e:	1c18      	adds	r0, r3, #0
 8001590:	f7ff fa08 	bl	80009a4 <__aeabi_fmul>
 8001594:	1c03      	adds	r3, r0, #0
 8001596:	218b      	movs	r1, #139	; 0x8b
 8001598:	05c9      	lsls	r1, r1, #23
 800159a:	1c18      	adds	r0, r3, #0
 800159c:	f7ff f838 	bl	8000610 <__aeabi_fdiv>
 80015a0:	1c03      	adds	r3, r0, #0
 80015a2:	1c18      	adds	r0, r3, #0
 80015a4:	f7fe fe80 	bl	80002a8 <__aeabi_f2uiz>
 80015a8:	0003      	movs	r3, r0
 80015aa:	607b      	str	r3, [r7, #4]
	current = current ^ 0b11;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2203      	movs	r2, #3
 80015b0:	4053      	eors	r3, r2
 80015b2:	607b      	str	r3, [r7, #4]
	return (current);
 80015b4:	687b      	ldr	r3, [r7, #4]
}
 80015b6:	0018      	movs	r0, r3
 80015b8:	46bd      	mov	sp, r7
 80015ba:	b002      	add	sp, #8
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	46c0      	nop			; (mov r8, r8)
 80015c0:	20001f44 	.word	0x20001f44
 80015c4:	447a0000 	.word	0x447a0000

080015c8 <readTemp>:

/**
 * Read out ADC with the current temperature from the magnet
 */
static uint32_t readTemp(void) {
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
	ADC_Select_CH3();
 80015ce:	f000 fe19 	bl	8002204 <ADC_Select_CH3>
	HAL_ADC_Start(&hadc);
 80015d2:	4b12      	ldr	r3, [pc, #72]	; (800161c <readTemp+0x54>)
 80015d4:	0018      	movs	r0, r3
 80015d6:	f001 fa17 	bl	8002a08 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, MAX_ADC_TIMEOUT);
 80015da:	23fa      	movs	r3, #250	; 0xfa
 80015dc:	009a      	lsls	r2, r3, #2
 80015de:	4b0f      	ldr	r3, [pc, #60]	; (800161c <readTemp+0x54>)
 80015e0:	0011      	movs	r1, r2
 80015e2:	0018      	movs	r0, r3
 80015e4:	f001 faa4 	bl	8002b30 <HAL_ADC_PollForConversion>
	uint32_t temp = HAL_ADC_GetValue(&hadc);
 80015e8:	4b0c      	ldr	r3, [pc, #48]	; (800161c <readTemp+0x54>)
 80015ea:	0018      	movs	r0, r3
 80015ec:	f001 fb38 	bl	8002c60 <HAL_ADC_GetValue>
 80015f0:	0003      	movs	r3, r0
 80015f2:	607b      	str	r3, [r7, #4]
	temp = HAL_ADC_GetValue(&hadc);
 80015f4:	4b09      	ldr	r3, [pc, #36]	; (800161c <readTemp+0x54>)
 80015f6:	0018      	movs	r0, r3
 80015f8:	f001 fb32 	bl	8002c60 <HAL_ADC_GetValue>
 80015fc:	0003      	movs	r3, r0
 80015fe:	607b      	str	r3, [r7, #4]
	HAL_ADC_Stop(&hadc);
 8001600:	4b06      	ldr	r3, [pc, #24]	; (800161c <readTemp+0x54>)
 8001602:	0018      	movs	r0, r3
 8001604:	f001 fa54 	bl	8002ab0 <HAL_ADC_Stop>
	temp = temp ^ 0b11;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2203      	movs	r2, #3
 800160c:	4053      	eors	r3, r2
 800160e:	607b      	str	r3, [r7, #4]
	//temp = (COVERTION_A_TO_MA * (float) temp) / ADC_MAX_VALUE;
	return (temp);
 8001610:	687b      	ldr	r3, [r7, #4]
}
 8001612:	0018      	movs	r0, r3
 8001614:	46bd      	mov	sp, r7
 8001616:	b002      	add	sp, #8
 8001618:	bd80      	pop	{r7, pc}
 800161a:	46c0      	nop			; (mov r8, r8)
 800161c:	20001f44 	.word	0x20001f44

08001620 <calc_weight>:

/**
 * Calculation weight
 */
static calc_weight(uint16_t current, uint16_t temp) {
 8001620:	b590      	push	{r4, r7, lr}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	0002      	movs	r2, r0
 8001628:	1dbb      	adds	r3, r7, #6
 800162a:	801a      	strh	r2, [r3, #0]
 800162c:	1d3b      	adds	r3, r7, #4
 800162e:	1c0a      	adds	r2, r1, #0
 8001630:	801a      	strh	r2, [r3, #0]
	static const float a0 = 3;
	static const float a1 = 0.259086;
	static const float a2 = 0.00249554;
	static const float a3 = -0.000001443;
	weight = a0+(current*a1)+(current*current)*a2+(current*current*current)*a3;
 8001632:	1dbb      	adds	r3, r7, #6
 8001634:	881b      	ldrh	r3, [r3, #0]
 8001636:	0018      	movs	r0, r3
 8001638:	f7ff fcb6 	bl	8000fa8 <__aeabi_i2f>
 800163c:	1c02      	adds	r2, r0, #0
 800163e:	4b24      	ldr	r3, [pc, #144]	; (80016d0 <calc_weight+0xb0>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	1c19      	adds	r1, r3, #0
 8001644:	1c10      	adds	r0, r2, #0
 8001646:	f7ff f9ad 	bl	80009a4 <__aeabi_fmul>
 800164a:	1c03      	adds	r3, r0, #0
 800164c:	1c1a      	adds	r2, r3, #0
 800164e:	4b21      	ldr	r3, [pc, #132]	; (80016d4 <calc_weight+0xb4>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	1c19      	adds	r1, r3, #0
 8001654:	1c10      	adds	r0, r2, #0
 8001656:	f7fe fe3f 	bl	80002d8 <__aeabi_fadd>
 800165a:	1c03      	adds	r3, r0, #0
 800165c:	1c1c      	adds	r4, r3, #0
 800165e:	1dbb      	adds	r3, r7, #6
 8001660:	881b      	ldrh	r3, [r3, #0]
 8001662:	1dba      	adds	r2, r7, #6
 8001664:	8812      	ldrh	r2, [r2, #0]
 8001666:	4353      	muls	r3, r2
 8001668:	0018      	movs	r0, r3
 800166a:	f7ff fc9d 	bl	8000fa8 <__aeabi_i2f>
 800166e:	1c02      	adds	r2, r0, #0
 8001670:	4b19      	ldr	r3, [pc, #100]	; (80016d8 <calc_weight+0xb8>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	1c19      	adds	r1, r3, #0
 8001676:	1c10      	adds	r0, r2, #0
 8001678:	f7ff f994 	bl	80009a4 <__aeabi_fmul>
 800167c:	1c03      	adds	r3, r0, #0
 800167e:	1c19      	adds	r1, r3, #0
 8001680:	1c20      	adds	r0, r4, #0
 8001682:	f7fe fe29 	bl	80002d8 <__aeabi_fadd>
 8001686:	1c03      	adds	r3, r0, #0
 8001688:	1c1c      	adds	r4, r3, #0
 800168a:	1dbb      	adds	r3, r7, #6
 800168c:	881b      	ldrh	r3, [r3, #0]
 800168e:	1dba      	adds	r2, r7, #6
 8001690:	8812      	ldrh	r2, [r2, #0]
 8001692:	4353      	muls	r3, r2
 8001694:	1dba      	adds	r2, r7, #6
 8001696:	8812      	ldrh	r2, [r2, #0]
 8001698:	4353      	muls	r3, r2
 800169a:	0018      	movs	r0, r3
 800169c:	f7ff fc84 	bl	8000fa8 <__aeabi_i2f>
 80016a0:	1c02      	adds	r2, r0, #0
 80016a2:	4b0e      	ldr	r3, [pc, #56]	; (80016dc <calc_weight+0xbc>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	1c19      	adds	r1, r3, #0
 80016a8:	1c10      	adds	r0, r2, #0
 80016aa:	f7ff f97b 	bl	80009a4 <__aeabi_fmul>
 80016ae:	1c03      	adds	r3, r0, #0
 80016b0:	1c19      	adds	r1, r3, #0
 80016b2:	1c20      	adds	r0, r4, #0
 80016b4:	f7fe fe10 	bl	80002d8 <__aeabi_fadd>
 80016b8:	1c03      	adds	r3, r0, #0
 80016ba:	1c18      	adds	r0, r3, #0
 80016bc:	f7fe fdf4 	bl	80002a8 <__aeabi_f2uiz>
 80016c0:	0002      	movs	r2, r0
 80016c2:	4b07      	ldr	r3, [pc, #28]	; (80016e0 <calc_weight+0xc0>)
 80016c4:	601a      	str	r2, [r3, #0]
}
 80016c6:	46c0      	nop			; (mov r8, r8)
 80016c8:	46bd      	mov	sp, r7
 80016ca:	b003      	add	sp, #12
 80016cc:	bd90      	pop	{r4, r7, pc}
 80016ce:	46c0      	nop			; (mov r8, r8)
 80016d0:	08009760 	.word	0x08009760
 80016d4:	08009764 	.word	0x08009764
 80016d8:	08009768 	.word	0x08009768
 80016dc:	0800976c 	.word	0x0800976c
 80016e0:	200000a0 	.word	0x200000a0

080016e4 <current_average>:

static uint32_t current_average(uint32_t current){
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
	static uint32_t n = 0;
	static const uint16_t num_sample = 3;
	static uint32_t sample_current[3] = {0,0,0};
	uint32_t avg_current = 0;
 80016ec:	2300      	movs	r3, #0
 80016ee:	60fb      	str	r3, [r7, #12]
	sample_current[n] = current;
 80016f0:	4b17      	ldr	r3, [pc, #92]	; (8001750 <current_average+0x6c>)
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	4b17      	ldr	r3, [pc, #92]	; (8001754 <current_average+0x70>)
 80016f6:	0092      	lsls	r2, r2, #2
 80016f8:	6879      	ldr	r1, [r7, #4]
 80016fa:	50d1      	str	r1, [r2, r3]
	if(++n == 3){
 80016fc:	4b14      	ldr	r3, [pc, #80]	; (8001750 <current_average+0x6c>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	1c5a      	adds	r2, r3, #1
 8001702:	4b13      	ldr	r3, [pc, #76]	; (8001750 <current_average+0x6c>)
 8001704:	601a      	str	r2, [r3, #0]
 8001706:	4b12      	ldr	r3, [pc, #72]	; (8001750 <current_average+0x6c>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2b03      	cmp	r3, #3
 800170c:	d102      	bne.n	8001714 <current_average+0x30>
		n = 0;
 800170e:	4b10      	ldr	r3, [pc, #64]	; (8001750 <current_average+0x6c>)
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
	}
	for(int i = 0; i < num_sample; i++){
 8001714:	2300      	movs	r3, #0
 8001716:	60bb      	str	r3, [r7, #8]
 8001718:	e009      	b.n	800172e <current_average+0x4a>
		avg_current += sample_current[i];
 800171a:	4b0e      	ldr	r3, [pc, #56]	; (8001754 <current_average+0x70>)
 800171c:	68ba      	ldr	r2, [r7, #8]
 800171e:	0092      	lsls	r2, r2, #2
 8001720:	58d3      	ldr	r3, [r2, r3]
 8001722:	68fa      	ldr	r2, [r7, #12]
 8001724:	18d3      	adds	r3, r2, r3
 8001726:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < num_sample; i++){
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	3301      	adds	r3, #1
 800172c:	60bb      	str	r3, [r7, #8]
 800172e:	4b0a      	ldr	r3, [pc, #40]	; (8001758 <current_average+0x74>)
 8001730:	881b      	ldrh	r3, [r3, #0]
 8001732:	001a      	movs	r2, r3
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	4293      	cmp	r3, r2
 8001738:	dbef      	blt.n	800171a <current_average+0x36>
	}
	return(avg_current/num_sample);
 800173a:	4b07      	ldr	r3, [pc, #28]	; (8001758 <current_average+0x74>)
 800173c:	881b      	ldrh	r3, [r3, #0]
 800173e:	0019      	movs	r1, r3
 8001740:	68f8      	ldr	r0, [r7, #12]
 8001742:	f7fe fceb 	bl	800011c <__udivsi3>
 8001746:	0003      	movs	r3, r0
}
 8001748:	0018      	movs	r0, r3
 800174a:	46bd      	mov	sp, r7
 800174c:	b004      	add	sp, #16
 800174e:	bd80      	pop	{r7, pc}
 8001750:	200000b4 	.word	0x200000b4
 8001754:	200000b8 	.word	0x200000b8
 8001758:	08009770 	.word	0x08009770

0800175c <oled_init>:
extern SemaphoreHandle_t I2CSemaphore;

/*
 * Init for display
 */
void oled_init() {
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
	OLEDSemaphore = xSemaphoreCreateMutex();
 8001760:	2001      	movs	r0, #1
 8001762:	f004 fe60 	bl	8006426 <xQueueCreateMutex>
 8001766:	0002      	movs	r2, r0
 8001768:	4b15      	ldr	r3, [pc, #84]	; (80017c0 <oled_init+0x64>)
 800176a:	601a      	str	r2, [r3, #0]
	xSemaphoreGive(OLEDSemaphore);
 800176c:	4b14      	ldr	r3, [pc, #80]	; (80017c0 <oled_init+0x64>)
 800176e:	6818      	ldr	r0, [r3, #0]
 8001770:	2300      	movs	r3, #0
 8001772:	2200      	movs	r2, #0
 8001774:	2100      	movs	r1, #0
 8001776:	f004 fe72 	bl	800645e <xQueueGenericSend>
	HAL_GPIO_WritePin(GPIOB, OLED_RST_PIN, GPIO_PIN_SET); // Set LCD-Reset-Pin
 800177a:	4b12      	ldr	r3, [pc, #72]	; (80017c4 <oled_init+0x68>)
 800177c:	2201      	movs	r2, #1
 800177e:	2104      	movs	r1, #4
 8001780:	0018      	movs	r0, r3
 8001782:	f001 ffa7 	bl	80036d4 <HAL_GPIO_WritePin>
	if (xSemaphoreTake(I2CSemaphore,DELAY_MAX_I2C_SEMAPHORE) == pdTRUE) {
 8001786:	4b10      	ldr	r3, [pc, #64]	; (80017c8 <oled_init+0x6c>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	22fa      	movs	r2, #250	; 0xfa
 800178c:	0092      	lsls	r2, r2, #2
 800178e:	0011      	movs	r1, r2
 8001790:	0018      	movs	r0, r3
 8001792:	f005 f8b3 	bl	80068fc <xQueueSemaphoreTake>
 8001796:	0003      	movs	r3, r0
 8001798:	2b01      	cmp	r3, #1
 800179a:	d10e      	bne.n	80017ba <oled_init+0x5e>
		ssd1306_Init();
 800179c:	f007 f838 	bl	8008810 <ssd1306_Init>
		ssd1306_SetDisplayOn(OLED_ON);
 80017a0:	2001      	movs	r0, #1
 80017a2:	f007 fa4b 	bl	8008c3c <ssd1306_SetDisplayOn>
		ssd1306_Fill(White);
 80017a6:	2001      	movs	r0, #1
 80017a8:	f007 f89e 	bl	80088e8 <ssd1306_Fill>
		xSemaphoreGive(I2CSemaphore);
 80017ac:	4b06      	ldr	r3, [pc, #24]	; (80017c8 <oled_init+0x6c>)
 80017ae:	6818      	ldr	r0, [r3, #0]
 80017b0:	2300      	movs	r3, #0
 80017b2:	2200      	movs	r2, #0
 80017b4:	2100      	movs	r1, #0
 80017b6:	f004 fe52 	bl	800645e <xQueueGenericSend>
	}
}
 80017ba:	46c0      	nop			; (mov r8, r8)
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	20001e0c 	.word	0x20001e0c
 80017c4:	48000400 	.word	0x48000400
 80017c8:	20001e10 	.word	0x20001e10

080017cc <oled_printf>:

/*
 * Print one line of text on the display
 */
int oled_printf(uint32_t line, SSD1306_COLOR color, const char *fmt, ...) {
 80017cc:	b40c      	push	{r2, r3}
 80017ce:	b590      	push	{r4, r7, lr}
 80017d0:	b08b      	sub	sp, #44	; 0x2c
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
 80017d6:	000a      	movs	r2, r1
 80017d8:	1cfb      	adds	r3, r7, #3
 80017da:	701a      	strb	r2, [r3, #0]
	char s[22];
	va_list ap;
	if (xSemaphoreTake(OLEDSemaphore,DELAY_MAX_I2C_SEMAPHORE) == pdTRUE) {
 80017dc:	4b27      	ldr	r3, [pc, #156]	; (800187c <oled_printf+0xb0>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	22fa      	movs	r2, #250	; 0xfa
 80017e2:	0092      	lsls	r2, r2, #2
 80017e4:	0011      	movs	r1, r2
 80017e6:	0018      	movs	r0, r3
 80017e8:	f005 f888 	bl	80068fc <xQueueSemaphoreTake>
 80017ec:	0003      	movs	r3, r0
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d13c      	bne.n	800186c <oled_printf+0xa0>
		va_start(ap, fmt);
 80017f2:	2334      	movs	r3, #52	; 0x34
 80017f4:	2208      	movs	r2, #8
 80017f6:	4694      	mov	ip, r2
 80017f8:	44bc      	add	ip, r7
 80017fa:	4463      	add	r3, ip
 80017fc:	60fb      	str	r3, [r7, #12]
		vsnprintf(s, sizeof(s), fmt, ap);
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001802:	2410      	movs	r4, #16
 8001804:	1938      	adds	r0, r7, r4
 8001806:	2116      	movs	r1, #22
 8001808:	f007 faec 	bl	8008de4 <vsniprintf>
		va_end(ap);
		if (xSemaphoreTake(I2CSemaphore,DELAY_MAX_I2C_SEMAPHORE) == pdTRUE) {
 800180c:	4b1c      	ldr	r3, [pc, #112]	; (8001880 <oled_printf+0xb4>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	22fa      	movs	r2, #250	; 0xfa
 8001812:	0092      	lsls	r2, r2, #2
 8001814:	0011      	movs	r1, r2
 8001816:	0018      	movs	r0, r3
 8001818:	f005 f870 	bl	80068fc <xQueueSemaphoreTake>
 800181c:	0003      	movs	r3, r0
 800181e:	2b01      	cmp	r3, #1
 8001820:	d11d      	bne.n	800185e <oled_printf+0x92>
			ssd1306_SetCursor(OLED_BORDER_OFFSET,
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	b2db      	uxtb	r3, r3
 8001826:	1c1a      	adds	r2, r3, #0
 8001828:	0092      	lsls	r2, r2, #2
 800182a:	18d3      	adds	r3, r2, r3
 800182c:	18db      	adds	r3, r3, r3
 800182e:	b2db      	uxtb	r3, r3
 8001830:	3b05      	subs	r3, #5
 8001832:	b2db      	uxtb	r3, r3
 8001834:	0019      	movs	r1, r3
 8001836:	2005      	movs	r0, #5
 8001838:	f007 f9ce 	bl	8008bd8 <ssd1306_SetCursor>
					(line - 1) * OLED_LINE_HEIGHT + OLED_BORDER_OFFSET);
			ssd1306_WriteString(s, Font_6x8, color);
 800183c:	1cfb      	adds	r3, r7, #3
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	4a10      	ldr	r2, [pc, #64]	; (8001884 <oled_printf+0xb8>)
 8001842:	1938      	adds	r0, r7, r4
 8001844:	6811      	ldr	r1, [r2, #0]
 8001846:	6852      	ldr	r2, [r2, #4]
 8001848:	f007 f99c 	bl	8008b84 <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 800184c:	f007 f870 	bl	8008930 <ssd1306_UpdateScreen>
			xSemaphoreGive(I2CSemaphore);
 8001850:	4b0b      	ldr	r3, [pc, #44]	; (8001880 <oled_printf+0xb4>)
 8001852:	6818      	ldr	r0, [r3, #0]
 8001854:	2300      	movs	r3, #0
 8001856:	2200      	movs	r2, #0
 8001858:	2100      	movs	r1, #0
 800185a:	f004 fe00 	bl	800645e <xQueueGenericSend>
		}
		xSemaphoreGive(OLEDSemaphore);
 800185e:	4b07      	ldr	r3, [pc, #28]	; (800187c <oled_printf+0xb0>)
 8001860:	6818      	ldr	r0, [r3, #0]
 8001862:	2300      	movs	r3, #0
 8001864:	2200      	movs	r2, #0
 8001866:	2100      	movs	r1, #0
 8001868:	f004 fdf9 	bl	800645e <xQueueGenericSend>
	}
	return 0;
 800186c:	2300      	movs	r3, #0
}
 800186e:	0018      	movs	r0, r3
 8001870:	46bd      	mov	sp, r7
 8001872:	b00b      	add	sp, #44	; 0x2c
 8001874:	bc90      	pop	{r4, r7}
 8001876:	bc08      	pop	{r3}
 8001878:	b002      	add	sp, #8
 800187a:	4718      	bx	r3
 800187c:	20001e0c 	.word	0x20001e0c
 8001880:	20001e10 	.word	0x20001e10
 8001884:	20000014 	.word	0x20000014

08001888 <piregler_init>:

static float integrate(S_piregler *me);
static float limit(float val, float highlim, float lowlim);

void piregler_init(S_piregler *me, float idlevalue, float val, float kp,
		float mem, float ki, float low, float high, float ts) {
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	607a      	str	r2, [r7, #4]
 8001894:	603b      	str	r3, [r7, #0]
	me->idlevalue = idlevalue;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	68ba      	ldr	r2, [r7, #8]
 800189a:	601a      	str	r2, [r3, #0]
	me->val = val;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	605a      	str	r2, [r3, #4]
	me->kp = kp;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	683a      	ldr	r2, [r7, #0]
 80018a6:	609a      	str	r2, [r3, #8]
	me->mem = mem;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	69ba      	ldr	r2, [r7, #24]
 80018ac:	60da      	str	r2, [r3, #12]
	me->ki = ki;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	69fa      	ldr	r2, [r7, #28]
 80018b2:	611a      	str	r2, [r3, #16]
	me->low = low;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	6a3a      	ldr	r2, [r7, #32]
 80018b8:	615a      	str	r2, [r3, #20]
	me->high = high;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018be:	619a      	str	r2, [r3, #24]
	me->ts = ts;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80018c4:	61da      	str	r2, [r3, #28]
}
 80018c6:	46c0      	nop			; (mov r8, r8)
 80018c8:	46bd      	mov	sp, r7
 80018ca:	b004      	add	sp, #16
 80018cc:	bd80      	pop	{r7, pc}
	...

080018d0 <integrate>:

/*
 * Integration
 */
static float integrate(S_piregler *me) {
 80018d0:	b590      	push	{r4, r7, lr}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
	static float integral = 0;
	integral  += me->ki*(((me->mem + me->error)/2)*me->ts);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	691c      	ldr	r4, [r3, #16]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	68da      	ldr	r2, [r3, #12]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6a1b      	ldr	r3, [r3, #32]
 80018e4:	1c19      	adds	r1, r3, #0
 80018e6:	1c10      	adds	r0, r2, #0
 80018e8:	f7fe fcf6 	bl	80002d8 <__aeabi_fadd>
 80018ec:	1c03      	adds	r3, r0, #0
 80018ee:	2180      	movs	r1, #128	; 0x80
 80018f0:	05c9      	lsls	r1, r1, #23
 80018f2:	1c18      	adds	r0, r3, #0
 80018f4:	f7fe fe8c 	bl	8000610 <__aeabi_fdiv>
 80018f8:	1c03      	adds	r3, r0, #0
 80018fa:	1c1a      	adds	r2, r3, #0
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	69db      	ldr	r3, [r3, #28]
 8001900:	1c19      	adds	r1, r3, #0
 8001902:	1c10      	adds	r0, r2, #0
 8001904:	f7ff f84e 	bl	80009a4 <__aeabi_fmul>
 8001908:	1c03      	adds	r3, r0, #0
 800190a:	1c19      	adds	r1, r3, #0
 800190c:	1c20      	adds	r0, r4, #0
 800190e:	f7ff f849 	bl	80009a4 <__aeabi_fmul>
 8001912:	1c03      	adds	r3, r0, #0
 8001914:	1c1a      	adds	r2, r3, #0
 8001916:	4b0f      	ldr	r3, [pc, #60]	; (8001954 <integrate+0x84>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	1c19      	adds	r1, r3, #0
 800191c:	1c10      	adds	r0, r2, #0
 800191e:	f7fe fcdb 	bl	80002d8 <__aeabi_fadd>
 8001922:	1c03      	adds	r3, r0, #0
 8001924:	1c1a      	adds	r2, r3, #0
 8001926:	4b0b      	ldr	r3, [pc, #44]	; (8001954 <integrate+0x84>)
 8001928:	601a      	str	r2, [r3, #0]
	integral = limit(integral,1000,-1000);
 800192a:	4b0a      	ldr	r3, [pc, #40]	; (8001954 <integrate+0x84>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a0a      	ldr	r2, [pc, #40]	; (8001958 <integrate+0x88>)
 8001930:	490a      	ldr	r1, [pc, #40]	; (800195c <integrate+0x8c>)
 8001932:	1c18      	adds	r0, r3, #0
 8001934:	f000 f814 	bl	8001960 <limit>
 8001938:	1c02      	adds	r2, r0, #0
 800193a:	4b06      	ldr	r3, [pc, #24]	; (8001954 <integrate+0x84>)
 800193c:	601a      	str	r2, [r3, #0]
	me->mem = me->error;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6a1a      	ldr	r2, [r3, #32]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	60da      	str	r2, [r3, #12]
	return integral;
 8001946:	4b03      	ldr	r3, [pc, #12]	; (8001954 <integrate+0x84>)
 8001948:	681b      	ldr	r3, [r3, #0]

}
 800194a:	1c18      	adds	r0, r3, #0
 800194c:	46bd      	mov	sp, r7
 800194e:	b003      	add	sp, #12
 8001950:	bd90      	pop	{r4, r7, pc}
 8001952:	46c0      	nop			; (mov r8, r8)
 8001954:	200000c4 	.word	0x200000c4
 8001958:	c47a0000 	.word	0xc47a0000
 800195c:	447a0000 	.word	0x447a0000

08001960 <limit>:

/*
 * Limit for Regler
 */
static float limit(float val, float highlim, float lowlim) {
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	60f8      	str	r0, [r7, #12]
 8001968:	60b9      	str	r1, [r7, #8]
 800196a:	607a      	str	r2, [r7, #4]
	if (val < lowlim)
 800196c:	6879      	ldr	r1, [r7, #4]
 800196e:	68f8      	ldr	r0, [r7, #12]
 8001970:	f7fe fc72 	bl	8000258 <__aeabi_fcmplt>
 8001974:	1e03      	subs	r3, r0, #0
 8001976:	d001      	beq.n	800197c <limit+0x1c>
		return lowlim;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	e008      	b.n	800198e <limit+0x2e>
	if (val > highlim)
 800197c:	68b9      	ldr	r1, [r7, #8]
 800197e:	68f8      	ldr	r0, [r7, #12]
 8001980:	f7fe fc7e 	bl	8000280 <__aeabi_fcmpgt>
 8001984:	1e03      	subs	r3, r0, #0
 8001986:	d001      	beq.n	800198c <limit+0x2c>
		return highlim;
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	e000      	b.n	800198e <limit+0x2e>
	return (val);
 800198c:	68fb      	ldr	r3, [r7, #12]
}
 800198e:	1c18      	adds	r0, r3, #0
 8001990:	46bd      	mov	sp, r7
 8001992:	b004      	add	sp, #16
 8001994:	bd80      	pop	{r7, pc}

08001996 <ctl_pi>:

float ctl_pi(S_piregler *me) {
 8001996:	b590      	push	{r4, r7, lr}
 8001998:	b083      	sub	sp, #12
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
	me->error = me->idlevalue - me->val;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	1c19      	adds	r1, r3, #0
 80019a8:	1c10      	adds	r0, r2, #0
 80019aa:	f7ff f915 	bl	8000bd8 <__aeabi_fsub>
 80019ae:	1c03      	adds	r3, r0, #0
 80019b0:	1c1a      	adds	r2, r3, #0
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	621a      	str	r2, [r3, #32]
	return (me->error*me->kp+integrate(me));
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6a1a      	ldr	r2, [r3, #32]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	1c19      	adds	r1, r3, #0
 80019c0:	1c10      	adds	r0, r2, #0
 80019c2:	f7fe ffef 	bl	80009a4 <__aeabi_fmul>
 80019c6:	1c03      	adds	r3, r0, #0
 80019c8:	1c1c      	adds	r4, r3, #0
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	0018      	movs	r0, r3
 80019ce:	f7ff ff7f 	bl	80018d0 <integrate>
 80019d2:	1c03      	adds	r3, r0, #0
 80019d4:	1c19      	adds	r1, r3, #0
 80019d6:	1c20      	adds	r0, r4, #0
 80019d8:	f7fe fc7e 	bl	80002d8 <__aeabi_fadd>
 80019dc:	1c03      	adds	r3, r0, #0
}
 80019de:	1c18      	adds	r0, r3, #0
 80019e0:	46bd      	mov	sp, r7
 80019e2:	b003      	add	sp, #12
 80019e4:	bd90      	pop	{r4, r7, pc}

080019e6 <initVCNL4040>:
#include "semphr.h"

extern I2C_HandleTypeDef hi2c1;
extern SemaphoreHandle_t I2CSemaphore;

void initVCNL4040(uint8_t addr){
 80019e6:	b580      	push	{r7, lr}
 80019e8:	b082      	sub	sp, #8
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	0002      	movs	r2, r0
 80019ee:	1dfb      	adds	r3, r7, #7
 80019f0:	701a      	strb	r2, [r3, #0]
	writeVCNL4040(addr,VCNL4040_PS_CONF3, 0b00010011, 0b00000111); // PS_CONF3_L & PS_MS
 80019f2:	1dfb      	adds	r3, r7, #7
 80019f4:	7818      	ldrb	r0, [r3, #0]
 80019f6:	2307      	movs	r3, #7
 80019f8:	2213      	movs	r2, #19
 80019fa:	2104      	movs	r1, #4
 80019fc:	f000 f80c 	bl	8001a18 <writeVCNL4040>
	writeVCNL4040(addr,VCNL4040_PS_CONF1, 0b11001110, 0b00001000); // PS_CONF1_L & PS_CONF2_H
 8001a00:	1dfb      	adds	r3, r7, #7
 8001a02:	7818      	ldrb	r0, [r3, #0]
 8001a04:	2308      	movs	r3, #8
 8001a06:	22ce      	movs	r2, #206	; 0xce
 8001a08:	2103      	movs	r1, #3
 8001a0a:	f000 f805 	bl	8001a18 <writeVCNL4040>
}
 8001a0e:	46c0      	nop			; (mov r8, r8)
 8001a10:	46bd      	mov	sp, r7
 8001a12:	b002      	add	sp, #8
 8001a14:	bd80      	pop	{r7, pc}
	...

08001a18 <writeVCNL4040>:

bool writeVCNL4040(uint8_t addr, uint8_t command, uint8_t lowbyte, uint8_t highbyte){
 8001a18:	b5b0      	push	{r4, r5, r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af02      	add	r7, sp, #8
 8001a1e:	0005      	movs	r5, r0
 8001a20:	000c      	movs	r4, r1
 8001a22:	0010      	movs	r0, r2
 8001a24:	0019      	movs	r1, r3
 8001a26:	1dfb      	adds	r3, r7, #7
 8001a28:	1c2a      	adds	r2, r5, #0
 8001a2a:	701a      	strb	r2, [r3, #0]
 8001a2c:	1dbb      	adds	r3, r7, #6
 8001a2e:	1c22      	adds	r2, r4, #0
 8001a30:	701a      	strb	r2, [r3, #0]
 8001a32:	1d7b      	adds	r3, r7, #5
 8001a34:	1c02      	adds	r2, r0, #0
 8001a36:	701a      	strb	r2, [r3, #0]
 8001a38:	1d3b      	adds	r3, r7, #4
 8001a3a:	1c0a      	adds	r2, r1, #0
 8001a3c:	701a      	strb	r2, [r3, #0]
	static HAL_StatusTypeDef ret;
	static uint8_t data[3];
	data[0] = command;
 8001a3e:	4b1b      	ldr	r3, [pc, #108]	; (8001aac <writeVCNL4040+0x94>)
 8001a40:	1dba      	adds	r2, r7, #6
 8001a42:	7812      	ldrb	r2, [r2, #0]
 8001a44:	701a      	strb	r2, [r3, #0]
	data[1] = lowbyte;
 8001a46:	4b19      	ldr	r3, [pc, #100]	; (8001aac <writeVCNL4040+0x94>)
 8001a48:	1d7a      	adds	r2, r7, #5
 8001a4a:	7812      	ldrb	r2, [r2, #0]
 8001a4c:	705a      	strb	r2, [r3, #1]
	data[2] = highbyte;
 8001a4e:	4b17      	ldr	r3, [pc, #92]	; (8001aac <writeVCNL4040+0x94>)
 8001a50:	1d3a      	adds	r2, r7, #4
 8001a52:	7812      	ldrb	r2, [r2, #0]
 8001a54:	709a      	strb	r2, [r3, #2]
	if(xSemaphoreTake(I2CSemaphore,DELAY_MAX_I2C_VCNL4040) == pdTRUE){
 8001a56:	4b16      	ldr	r3, [pc, #88]	; (8001ab0 <writeVCNL4040+0x98>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	21c8      	movs	r1, #200	; 0xc8
 8001a5c:	0018      	movs	r0, r3
 8001a5e:	f004 ff4d 	bl	80068fc <xQueueSemaphoreTake>
 8001a62:	0003      	movs	r3, r0
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d115      	bne.n	8001a94 <writeVCNL4040+0x7c>
		ret = HAL_I2C_Master_Transmit(&hi2c1, addr, data, 3, HAL_MAX_DELAY);
 8001a68:	1dfb      	adds	r3, r7, #7
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	b299      	uxth	r1, r3
 8001a6e:	4a0f      	ldr	r2, [pc, #60]	; (8001aac <writeVCNL4040+0x94>)
 8001a70:	4810      	ldr	r0, [pc, #64]	; (8001ab4 <writeVCNL4040+0x9c>)
 8001a72:	2301      	movs	r3, #1
 8001a74:	425b      	negs	r3, r3
 8001a76:	9300      	str	r3, [sp, #0]
 8001a78:	2303      	movs	r3, #3
 8001a7a:	f001 fefb 	bl	8003874 <HAL_I2C_Master_Transmit>
 8001a7e:	0003      	movs	r3, r0
 8001a80:	001a      	movs	r2, r3
 8001a82:	4b0d      	ldr	r3, [pc, #52]	; (8001ab8 <writeVCNL4040+0xa0>)
 8001a84:	701a      	strb	r2, [r3, #0]
		xSemaphoreGive(I2CSemaphore);
 8001a86:	4b0a      	ldr	r3, [pc, #40]	; (8001ab0 <writeVCNL4040+0x98>)
 8001a88:	6818      	ldr	r0, [r3, #0]
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	2100      	movs	r1, #0
 8001a90:	f004 fce5 	bl	800645e <xQueueGenericSend>
	}
    if(ret != HAL_OK){
 8001a94:	4b08      	ldr	r3, [pc, #32]	; (8001ab8 <writeVCNL4040+0xa0>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <writeVCNL4040+0x88>
	   return (false); //Sensor did not ACK
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	e000      	b.n	8001aa2 <writeVCNL4040+0x8a>
    }
    return true;
 8001aa0:	2301      	movs	r3, #1
}
 8001aa2:	0018      	movs	r0, r3
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	b002      	add	sp, #8
 8001aa8:	bdb0      	pop	{r4, r5, r7, pc}
 8001aaa:	46c0      	nop			; (mov r8, r8)
 8001aac:	200000c8 	.word	0x200000c8
 8001ab0:	20001e10 	.word	0x20001e10
 8001ab4:	20001e1c 	.word	0x20001e1c
 8001ab8:	200000cb 	.word	0x200000cb

08001abc <readVCNL4040>:

int32_t readVCNL4040(uint8_t addr, uint8_t command){
 8001abc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001abe:	b089      	sub	sp, #36	; 0x24
 8001ac0:	af04      	add	r7, sp, #16
 8001ac2:	0002      	movs	r2, r0
 8001ac4:	1dfb      	adds	r3, r7, #7
 8001ac6:	701a      	strb	r2, [r3, #0]
 8001ac8:	1dbb      	adds	r3, r7, #6
 8001aca:	1c0a      	adds	r2, r1, #0
 8001acc:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef ret;
	uint16_t MemoryAdresse = (command<<8) + (addr+1);
 8001ace:	1dbb      	adds	r3, r7, #6
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	021b      	lsls	r3, r3, #8
 8001ad6:	b29a      	uxth	r2, r3
 8001ad8:	1dfb      	adds	r3, r7, #7
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	b29b      	uxth	r3, r3
 8001ade:	18d3      	adds	r3, r2, r3
 8001ae0:	b29a      	uxth	r2, r3
 8001ae2:	250c      	movs	r5, #12
 8001ae4:	197b      	adds	r3, r7, r5
 8001ae6:	3201      	adds	r2, #1
 8001ae8:	801a      	strh	r2, [r3, #0]
	uint8_t databuf[2] = {0x00, 0x00};
 8001aea:	2608      	movs	r6, #8
 8001aec:	19bb      	adds	r3, r7, r6
 8001aee:	2200      	movs	r2, #0
 8001af0:	801a      	strh	r2, [r3, #0]
	if(xSemaphoreTake(I2CSemaphore,DELAY_MAX_I2C_VCNL4040) == pdTRUE){
 8001af2:	4b1f      	ldr	r3, [pc, #124]	; (8001b70 <readVCNL4040+0xb4>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	21c8      	movs	r1, #200	; 0xc8
 8001af8:	0018      	movs	r0, r3
 8001afa:	f004 feff 	bl	80068fc <xQueueSemaphoreTake>
 8001afe:	0003      	movs	r3, r0
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d11a      	bne.n	8001b3a <readVCNL4040+0x7e>
		ret = HAL_I2C_Mem_Read(&hi2c1, addr, MemoryAdresse, 2, databuf, 2, HAL_MAX_DELAY);
 8001b04:	1dfb      	adds	r3, r7, #7
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	b299      	uxth	r1, r3
 8001b0a:	230f      	movs	r3, #15
 8001b0c:	18fc      	adds	r4, r7, r3
 8001b0e:	197b      	adds	r3, r7, r5
 8001b10:	881a      	ldrh	r2, [r3, #0]
 8001b12:	4818      	ldr	r0, [pc, #96]	; (8001b74 <readVCNL4040+0xb8>)
 8001b14:	2301      	movs	r3, #1
 8001b16:	425b      	negs	r3, r3
 8001b18:	9302      	str	r3, [sp, #8]
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	9301      	str	r3, [sp, #4]
 8001b1e:	19bb      	adds	r3, r7, r6
 8001b20:	9300      	str	r3, [sp, #0]
 8001b22:	2302      	movs	r3, #2
 8001b24:	f002 f8dc 	bl	8003ce0 <HAL_I2C_Mem_Read>
 8001b28:	0003      	movs	r3, r0
 8001b2a:	7023      	strb	r3, [r4, #0]
		xSemaphoreGive(I2CSemaphore);
 8001b2c:	4b10      	ldr	r3, [pc, #64]	; (8001b70 <readVCNL4040+0xb4>)
 8001b2e:	6818      	ldr	r0, [r3, #0]
 8001b30:	2300      	movs	r3, #0
 8001b32:	2200      	movs	r2, #0
 8001b34:	2100      	movs	r1, #0
 8001b36:	f004 fc92 	bl	800645e <xQueueGenericSend>
	}
    if (ret != HAL_OK) //Send a restart command. Do not release bus.
 8001b3a:	230f      	movs	r3, #15
 8001b3c:	18fb      	adds	r3, r7, r3
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d002      	beq.n	8001b4a <readVCNL4040+0x8e>
    {
      return (-1); //Sensor did not ACK
 8001b44:	2301      	movs	r3, #1
 8001b46:	425b      	negs	r3, r3
 8001b48:	e00e      	b.n	8001b68 <readVCNL4040+0xac>
    }
    if(ret == HAL_OK)
 8001b4a:	230f      	movs	r3, #15
 8001b4c:	18fb      	adds	r3, r7, r3
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d107      	bne.n	8001b64 <readVCNL4040+0xa8>
    {
    	return((databuf[1]<<8) + databuf[0]);
 8001b54:	2208      	movs	r2, #8
 8001b56:	18bb      	adds	r3, r7, r2
 8001b58:	785b      	ldrb	r3, [r3, #1]
 8001b5a:	021b      	lsls	r3, r3, #8
 8001b5c:	18ba      	adds	r2, r7, r2
 8001b5e:	7812      	ldrb	r2, [r2, #0]
 8001b60:	189b      	adds	r3, r3, r2
 8001b62:	e001      	b.n	8001b68 <readVCNL4040+0xac>
    }
     return (-1); //Sensor did not respond
 8001b64:	2301      	movs	r3, #1
 8001b66:	425b      	negs	r3, r3
}
 8001b68:	0018      	movs	r0, r3
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	b005      	add	sp, #20
 8001b6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b70:	20001e10 	.word	0x20001e10
 8001b74:	20001e1c 	.word	0x20001e1c

08001b78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b7c:	f000 fd7c 	bl	8002678 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b80:	f000 f842 	bl	8001c08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b84:	f000 fa9e 	bl	80020c4 <MX_GPIO_Init>
  MX_ADC_Init();
 8001b88:	f000 f8bc 	bl	8001d04 <MX_ADC_Init>
  MX_TIM1_Init();
 8001b8c:	f000 f9a4 	bl	8001ed8 <MX_TIM1_Init>
  MX_I2C2_Init();
 8001b90:	f000 f962 	bl	8001e58 <MX_I2C2_Init>
  MX_TIM6_Init();
 8001b94:	f000 fa52 	bl	800203c <MX_TIM6_Init>
  MX_TIM7_Init();
 8001b98:	f000 fa72 	bl	8002080 <MX_TIM7_Init>
  MX_I2C1_Init();
 8001b9c:	f000 f91a 	bl	8001dd4 <MX_I2C1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001ba0:	f000 f89a 	bl	8001cd8 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001ba4:	4b11      	ldr	r3, [pc, #68]	; (8001bec <main+0x74>)
 8001ba6:	210c      	movs	r1, #12
 8001ba8:	0018      	movs	r0, r3
 8001baa:	f003 fb1f 	bl	80051ec <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start(&htim6);
 8001bae:	4b10      	ldr	r3, [pc, #64]	; (8001bf0 <main+0x78>)
 8001bb0:	0018      	movs	r0, r3
 8001bb2:	f003 fa33 	bl	800501c <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim7);
 8001bb6:	4b0f      	ldr	r3, [pc, #60]	; (8001bf4 <main+0x7c>)
 8001bb8:	0018      	movs	r0, r3
 8001bba:	f003 fa73 	bl	80050a4 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Init(&hadc);
 8001bbe:	4b0e      	ldr	r3, [pc, #56]	; (8001bf8 <main+0x80>)
 8001bc0:	0018      	movs	r0, r3
 8001bc2:	f000 fde1 	bl	8002788 <HAL_ADC_Init>
  HAL_ADCEx_Calibration_Start(&hadc);
 8001bc6:	4b0c      	ldr	r3, [pc, #48]	; (8001bf8 <main+0x80>)
 8001bc8:	0018      	movs	r0, r3
 8001bca:	f001 fa8d 	bl	80030e8 <HAL_ADCEx_Calibration_Start>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001bce:	f004 f93f 	bl	8005e50 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001bd2:	4a0a      	ldr	r2, [pc, #40]	; (8001bfc <main+0x84>)
 8001bd4:	4b0a      	ldr	r3, [pc, #40]	; (8001c00 <main+0x88>)
 8001bd6:	2100      	movs	r1, #0
 8001bd8:	0018      	movs	r0, r3
 8001bda:	f004 f965 	bl	8005ea8 <osThreadNew>
 8001bde:	0002      	movs	r2, r0
 8001be0:	4b08      	ldr	r3, [pc, #32]	; (8001c04 <main+0x8c>)
 8001be2:	601a      	str	r2, [r3, #0]
  osKernelStart();

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  app_main();
 8001be4:	f7ff fa80 	bl	80010e8 <app_main>
  while (1)
 8001be8:	e7fe      	b.n	8001be8 <main+0x70>
 8001bea:	46c0      	nop			; (mov r8, r8)
 8001bec:	20001efc 	.word	0x20001efc
 8001bf0:	20001eb4 	.word	0x20001eb4
 8001bf4:	20001f84 	.word	0x20001f84
 8001bf8:	20001f44 	.word	0x20001f44
 8001bfc:	08009774 	.word	0x08009774
 8001c00:	0800224d 	.word	0x0800224d
 8001c04:	20001e18 	.word	0x20001e18

08001c08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c08:	b590      	push	{r4, r7, lr}
 8001c0a:	b097      	sub	sp, #92	; 0x5c
 8001c0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c0e:	2428      	movs	r4, #40	; 0x28
 8001c10:	193b      	adds	r3, r7, r4
 8001c12:	0018      	movs	r0, r3
 8001c14:	2330      	movs	r3, #48	; 0x30
 8001c16:	001a      	movs	r2, r3
 8001c18:	2100      	movs	r1, #0
 8001c1a:	f007 f87b 	bl	8008d14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c1e:	2318      	movs	r3, #24
 8001c20:	18fb      	adds	r3, r7, r3
 8001c22:	0018      	movs	r0, r3
 8001c24:	2310      	movs	r3, #16
 8001c26:	001a      	movs	r2, r3
 8001c28:	2100      	movs	r1, #0
 8001c2a:	f007 f873 	bl	8008d14 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c2e:	1d3b      	adds	r3, r7, #4
 8001c30:	0018      	movs	r0, r3
 8001c32:	2314      	movs	r3, #20
 8001c34:	001a      	movs	r2, r3
 8001c36:	2100      	movs	r1, #0
 8001c38:	f007 f86c 	bl	8008d14 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8001c3c:	0021      	movs	r1, r4
 8001c3e:	187b      	adds	r3, r7, r1
 8001c40:	2212      	movs	r2, #18
 8001c42:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c44:	187b      	adds	r3, r7, r1
 8001c46:	2201      	movs	r2, #1
 8001c48:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8001c4a:	187b      	adds	r3, r7, r1
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c50:	187b      	adds	r3, r7, r1
 8001c52:	2210      	movs	r2, #16
 8001c54:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8001c56:	187b      	adds	r3, r7, r1
 8001c58:	2210      	movs	r2, #16
 8001c5a:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c5c:	187b      	adds	r3, r7, r1
 8001c5e:	2202      	movs	r2, #2
 8001c60:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c62:	187b      	adds	r3, r7, r1
 8001c64:	2280      	movs	r2, #128	; 0x80
 8001c66:	0212      	lsls	r2, r2, #8
 8001c68:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001c6a:	187b      	adds	r3, r7, r1
 8001c6c:	2280      	movs	r2, #128	; 0x80
 8001c6e:	0352      	lsls	r2, r2, #13
 8001c70:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001c72:	187b      	adds	r3, r7, r1
 8001c74:	2200      	movs	r2, #0
 8001c76:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c78:	187b      	adds	r3, r7, r1
 8001c7a:	0018      	movs	r0, r3
 8001c7c:	f002 fc4e 	bl	800451c <HAL_RCC_OscConfig>
 8001c80:	1e03      	subs	r3, r0, #0
 8001c82:	d001      	beq.n	8001c88 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001c84:	f000 faea 	bl	800225c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c88:	2118      	movs	r1, #24
 8001c8a:	187b      	adds	r3, r7, r1
 8001c8c:	2207      	movs	r2, #7
 8001c8e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c90:	187b      	adds	r3, r7, r1
 8001c92:	2202      	movs	r2, #2
 8001c94:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c96:	187b      	adds	r3, r7, r1
 8001c98:	2200      	movs	r2, #0
 8001c9a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c9c:	187b      	adds	r3, r7, r1
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001ca2:	187b      	adds	r3, r7, r1
 8001ca4:	2101      	movs	r1, #1
 8001ca6:	0018      	movs	r0, r3
 8001ca8:	f002 ff56 	bl	8004b58 <HAL_RCC_ClockConfig>
 8001cac:	1e03      	subs	r3, r0, #0
 8001cae:	d001      	beq.n	8001cb4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001cb0:	f000 fad4 	bl	800225c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001cb4:	1d3b      	adds	r3, r7, #4
 8001cb6:	2220      	movs	r2, #32
 8001cb8:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 8001cba:	1d3b      	adds	r3, r7, #4
 8001cbc:	2210      	movs	r2, #16
 8001cbe:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cc0:	1d3b      	adds	r3, r7, #4
 8001cc2:	0018      	movs	r0, r3
 8001cc4:	f003 f87c 	bl	8004dc0 <HAL_RCCEx_PeriphCLKConfig>
 8001cc8:	1e03      	subs	r3, r0, #0
 8001cca:	d001      	beq.n	8001cd0 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001ccc:	f000 fac6 	bl	800225c <Error_Handler>
  }
}
 8001cd0:	46c0      	nop			; (mov r8, r8)
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	b017      	add	sp, #92	; 0x5c
 8001cd6:	bd90      	pop	{r4, r7, pc}

08001cd8 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  /* TIM7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM7_IRQn, 3, 0);
 8001cdc:	2200      	movs	r2, #0
 8001cde:	2103      	movs	r1, #3
 8001ce0:	2012      	movs	r0, #18
 8001ce2:	f001 fb55 	bl	8003390 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001ce6:	2012      	movs	r0, #18
 8001ce8:	f001 fb67 	bl	80033ba <HAL_NVIC_EnableIRQ>
  /* EXTI2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 3, 0);
 8001cec:	2200      	movs	r2, #0
 8001cee:	2103      	movs	r1, #3
 8001cf0:	2006      	movs	r0, #6
 8001cf2:	f001 fb4d 	bl	8003390 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8001cf6:	2006      	movs	r0, #6
 8001cf8:	f001 fb5f 	bl	80033ba <HAL_NVIC_EnableIRQ>
}
 8001cfc:	46c0      	nop			; (mov r8, r8)
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
	...

08001d04 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001d0a:	1d3b      	adds	r3, r7, #4
 8001d0c:	0018      	movs	r0, r3
 8001d0e:	230c      	movs	r3, #12
 8001d10:	001a      	movs	r2, r3
 8001d12:	2100      	movs	r1, #0
 8001d14:	f006 fffe 	bl	8008d14 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8001d18:	4b2c      	ldr	r3, [pc, #176]	; (8001dcc <MX_ADC_Init+0xc8>)
 8001d1a:	4a2d      	ldr	r2, [pc, #180]	; (8001dd0 <MX_ADC_Init+0xcc>)
 8001d1c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001d1e:	4b2b      	ldr	r3, [pc, #172]	; (8001dcc <MX_ADC_Init+0xc8>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001d24:	4b29      	ldr	r3, [pc, #164]	; (8001dcc <MX_ADC_Init+0xc8>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d2a:	4b28      	ldr	r3, [pc, #160]	; (8001dcc <MX_ADC_Init+0xc8>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001d30:	4b26      	ldr	r3, [pc, #152]	; (8001dcc <MX_ADC_Init+0xc8>)
 8001d32:	2201      	movs	r2, #1
 8001d34:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d36:	4b25      	ldr	r3, [pc, #148]	; (8001dcc <MX_ADC_Init+0xc8>)
 8001d38:	2204      	movs	r2, #4
 8001d3a:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001d3c:	4b23      	ldr	r3, [pc, #140]	; (8001dcc <MX_ADC_Init+0xc8>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001d42:	4b22      	ldr	r3, [pc, #136]	; (8001dcc <MX_ADC_Init+0xc8>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8001d48:	4b20      	ldr	r3, [pc, #128]	; (8001dcc <MX_ADC_Init+0xc8>)
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001d4e:	4b1f      	ldr	r3, [pc, #124]	; (8001dcc <MX_ADC_Init+0xc8>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d54:	4b1d      	ldr	r3, [pc, #116]	; (8001dcc <MX_ADC_Init+0xc8>)
 8001d56:	22c2      	movs	r2, #194	; 0xc2
 8001d58:	32ff      	adds	r2, #255	; 0xff
 8001d5a:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d5c:	4b1b      	ldr	r3, [pc, #108]	; (8001dcc <MX_ADC_Init+0xc8>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001d62:	4b1a      	ldr	r3, [pc, #104]	; (8001dcc <MX_ADC_Init+0xc8>)
 8001d64:	2224      	movs	r2, #36	; 0x24
 8001d66:	2100      	movs	r1, #0
 8001d68:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001d6a:	4b18      	ldr	r3, [pc, #96]	; (8001dcc <MX_ADC_Init+0xc8>)
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001d70:	4b16      	ldr	r3, [pc, #88]	; (8001dcc <MX_ADC_Init+0xc8>)
 8001d72:	0018      	movs	r0, r3
 8001d74:	f000 fd08 	bl	8002788 <HAL_ADC_Init>
 8001d78:	1e03      	subs	r3, r0, #0
 8001d7a:	d001      	beq.n	8001d80 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8001d7c:	f000 fa6e 	bl	800225c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001d80:	1d3b      	adds	r3, r7, #4
 8001d82:	2200      	movs	r2, #0
 8001d84:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001d86:	1d3b      	adds	r3, r7, #4
 8001d88:	2280      	movs	r2, #128	; 0x80
 8001d8a:	0152      	lsls	r2, r2, #5
 8001d8c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001d8e:	1d3b      	adds	r3, r7, #4
 8001d90:	2280      	movs	r2, #128	; 0x80
 8001d92:	0552      	lsls	r2, r2, #21
 8001d94:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001d96:	1d3a      	adds	r2, r7, #4
 8001d98:	4b0c      	ldr	r3, [pc, #48]	; (8001dcc <MX_ADC_Init+0xc8>)
 8001d9a:	0011      	movs	r1, r2
 8001d9c:	0018      	movs	r0, r3
 8001d9e:	f000 ff6b 	bl	8002c78 <HAL_ADC_ConfigChannel>
 8001da2:	1e03      	subs	r3, r0, #0
 8001da4:	d001      	beq.n	8001daa <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8001da6:	f000 fa59 	bl	800225c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001daa:	1d3b      	adds	r3, r7, #4
 8001dac:	2203      	movs	r2, #3
 8001dae:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001db0:	1d3a      	adds	r2, r7, #4
 8001db2:	4b06      	ldr	r3, [pc, #24]	; (8001dcc <MX_ADC_Init+0xc8>)
 8001db4:	0011      	movs	r1, r2
 8001db6:	0018      	movs	r0, r3
 8001db8:	f000 ff5e 	bl	8002c78 <HAL_ADC_ConfigChannel>
 8001dbc:	1e03      	subs	r3, r0, #0
 8001dbe:	d001      	beq.n	8001dc4 <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 8001dc0:	f000 fa4c 	bl	800225c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001dc4:	46c0      	nop			; (mov r8, r8)
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	b004      	add	sp, #16
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	20001f44 	.word	0x20001f44
 8001dd0:	40012400 	.word	0x40012400

08001dd4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001dd8:	4b1c      	ldr	r3, [pc, #112]	; (8001e4c <MX_I2C1_Init+0x78>)
 8001dda:	4a1d      	ldr	r2, [pc, #116]	; (8001e50 <MX_I2C1_Init+0x7c>)
 8001ddc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00401A58;
 8001dde:	4b1b      	ldr	r3, [pc, #108]	; (8001e4c <MX_I2C1_Init+0x78>)
 8001de0:	4a1c      	ldr	r2, [pc, #112]	; (8001e54 <MX_I2C1_Init+0x80>)
 8001de2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001de4:	4b19      	ldr	r3, [pc, #100]	; (8001e4c <MX_I2C1_Init+0x78>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001dea:	4b18      	ldr	r3, [pc, #96]	; (8001e4c <MX_I2C1_Init+0x78>)
 8001dec:	2201      	movs	r2, #1
 8001dee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001df0:	4b16      	ldr	r3, [pc, #88]	; (8001e4c <MX_I2C1_Init+0x78>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001df6:	4b15      	ldr	r3, [pc, #84]	; (8001e4c <MX_I2C1_Init+0x78>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001dfc:	4b13      	ldr	r3, [pc, #76]	; (8001e4c <MX_I2C1_Init+0x78>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e02:	4b12      	ldr	r3, [pc, #72]	; (8001e4c <MX_I2C1_Init+0x78>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e08:	4b10      	ldr	r3, [pc, #64]	; (8001e4c <MX_I2C1_Init+0x78>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e0e:	4b0f      	ldr	r3, [pc, #60]	; (8001e4c <MX_I2C1_Init+0x78>)
 8001e10:	0018      	movs	r0, r3
 8001e12:	f001 fc99 	bl	8003748 <HAL_I2C_Init>
 8001e16:	1e03      	subs	r3, r0, #0
 8001e18:	d001      	beq.n	8001e1e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001e1a:	f000 fa1f 	bl	800225c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 8001e1e:	2380      	movs	r3, #128	; 0x80
 8001e20:	015a      	lsls	r2, r3, #5
 8001e22:	4b0a      	ldr	r3, [pc, #40]	; (8001e4c <MX_I2C1_Init+0x78>)
 8001e24:	0011      	movs	r1, r2
 8001e26:	0018      	movs	r0, r3
 8001e28:	f002 fae0 	bl	80043ec <HAL_I2CEx_ConfigAnalogFilter>
 8001e2c:	1e03      	subs	r3, r0, #0
 8001e2e:	d001      	beq.n	8001e34 <MX_I2C1_Init+0x60>
  {
    Error_Handler();
 8001e30:	f000 fa14 	bl	800225c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001e34:	4b05      	ldr	r3, [pc, #20]	; (8001e4c <MX_I2C1_Init+0x78>)
 8001e36:	2100      	movs	r1, #0
 8001e38:	0018      	movs	r0, r3
 8001e3a:	f002 fb23 	bl	8004484 <HAL_I2CEx_ConfigDigitalFilter>
 8001e3e:	1e03      	subs	r3, r0, #0
 8001e40:	d001      	beq.n	8001e46 <MX_I2C1_Init+0x72>
  {
    Error_Handler();
 8001e42:	f000 fa0b 	bl	800225c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001e46:	46c0      	nop			; (mov r8, r8)
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	20001e1c 	.word	0x20001e1c
 8001e50:	40005400 	.word	0x40005400
 8001e54:	00401a58 	.word	0x00401a58

08001e58 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001e5c:	4b1b      	ldr	r3, [pc, #108]	; (8001ecc <MX_I2C2_Init+0x74>)
 8001e5e:	4a1c      	ldr	r2, [pc, #112]	; (8001ed0 <MX_I2C2_Init+0x78>)
 8001e60:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x2010091A;
 8001e62:	4b1a      	ldr	r3, [pc, #104]	; (8001ecc <MX_I2C2_Init+0x74>)
 8001e64:	4a1b      	ldr	r2, [pc, #108]	; (8001ed4 <MX_I2C2_Init+0x7c>)
 8001e66:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001e68:	4b18      	ldr	r3, [pc, #96]	; (8001ecc <MX_I2C2_Init+0x74>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e6e:	4b17      	ldr	r3, [pc, #92]	; (8001ecc <MX_I2C2_Init+0x74>)
 8001e70:	2201      	movs	r2, #1
 8001e72:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e74:	4b15      	ldr	r3, [pc, #84]	; (8001ecc <MX_I2C2_Init+0x74>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001e7a:	4b14      	ldr	r3, [pc, #80]	; (8001ecc <MX_I2C2_Init+0x74>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001e80:	4b12      	ldr	r3, [pc, #72]	; (8001ecc <MX_I2C2_Init+0x74>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e86:	4b11      	ldr	r3, [pc, #68]	; (8001ecc <MX_I2C2_Init+0x74>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e8c:	4b0f      	ldr	r3, [pc, #60]	; (8001ecc <MX_I2C2_Init+0x74>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001e92:	4b0e      	ldr	r3, [pc, #56]	; (8001ecc <MX_I2C2_Init+0x74>)
 8001e94:	0018      	movs	r0, r3
 8001e96:	f001 fc57 	bl	8003748 <HAL_I2C_Init>
 8001e9a:	1e03      	subs	r3, r0, #0
 8001e9c:	d001      	beq.n	8001ea2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001e9e:	f000 f9dd 	bl	800225c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001ea2:	4b0a      	ldr	r3, [pc, #40]	; (8001ecc <MX_I2C2_Init+0x74>)
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	0018      	movs	r0, r3
 8001ea8:	f002 faa0 	bl	80043ec <HAL_I2CEx_ConfigAnalogFilter>
 8001eac:	1e03      	subs	r3, r0, #0
 8001eae:	d001      	beq.n	8001eb4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001eb0:	f000 f9d4 	bl	800225c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001eb4:	4b05      	ldr	r3, [pc, #20]	; (8001ecc <MX_I2C2_Init+0x74>)
 8001eb6:	2100      	movs	r1, #0
 8001eb8:	0018      	movs	r0, r3
 8001eba:	f002 fae3 	bl	8004484 <HAL_I2CEx_ConfigDigitalFilter>
 8001ebe:	1e03      	subs	r3, r0, #0
 8001ec0:	d001      	beq.n	8001ec6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001ec2:	f000 f9cb 	bl	800225c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001ec6:	46c0      	nop			; (mov r8, r8)
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	20001e68 	.word	0x20001e68
 8001ed0:	40005800 	.word	0x40005800
 8001ed4:	2010091a 	.word	0x2010091a

08001ed8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b096      	sub	sp, #88	; 0x58
 8001edc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ede:	2348      	movs	r3, #72	; 0x48
 8001ee0:	18fb      	adds	r3, r7, r3
 8001ee2:	0018      	movs	r0, r3
 8001ee4:	2310      	movs	r3, #16
 8001ee6:	001a      	movs	r2, r3
 8001ee8:	2100      	movs	r1, #0
 8001eea:	f006 ff13 	bl	8008d14 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001eee:	2340      	movs	r3, #64	; 0x40
 8001ef0:	18fb      	adds	r3, r7, r3
 8001ef2:	0018      	movs	r0, r3
 8001ef4:	2308      	movs	r3, #8
 8001ef6:	001a      	movs	r2, r3
 8001ef8:	2100      	movs	r1, #0
 8001efa:	f006 ff0b 	bl	8008d14 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001efe:	2324      	movs	r3, #36	; 0x24
 8001f00:	18fb      	adds	r3, r7, r3
 8001f02:	0018      	movs	r0, r3
 8001f04:	231c      	movs	r3, #28
 8001f06:	001a      	movs	r2, r3
 8001f08:	2100      	movs	r1, #0
 8001f0a:	f006 ff03 	bl	8008d14 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f0e:	1d3b      	adds	r3, r7, #4
 8001f10:	0018      	movs	r0, r3
 8001f12:	2320      	movs	r3, #32
 8001f14:	001a      	movs	r2, r3
 8001f16:	2100      	movs	r1, #0
 8001f18:	f006 fefc 	bl	8008d14 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001f1c:	4b45      	ldr	r3, [pc, #276]	; (8002034 <MX_TIM1_Init+0x15c>)
 8001f1e:	4a46      	ldr	r2, [pc, #280]	; (8002038 <MX_TIM1_Init+0x160>)
 8001f20:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001f22:	4b44      	ldr	r3, [pc, #272]	; (8002034 <MX_TIM1_Init+0x15c>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f28:	4b42      	ldr	r3, [pc, #264]	; (8002034 <MX_TIM1_Init+0x15c>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000;
 8001f2e:	4b41      	ldr	r3, [pc, #260]	; (8002034 <MX_TIM1_Init+0x15c>)
 8001f30:	22fa      	movs	r2, #250	; 0xfa
 8001f32:	00d2      	lsls	r2, r2, #3
 8001f34:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f36:	4b3f      	ldr	r3, [pc, #252]	; (8002034 <MX_TIM1_Init+0x15c>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001f3c:	4b3d      	ldr	r3, [pc, #244]	; (8002034 <MX_TIM1_Init+0x15c>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001f42:	4b3c      	ldr	r3, [pc, #240]	; (8002034 <MX_TIM1_Init+0x15c>)
 8001f44:	2280      	movs	r2, #128	; 0x80
 8001f46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001f48:	4b3a      	ldr	r3, [pc, #232]	; (8002034 <MX_TIM1_Init+0x15c>)
 8001f4a:	0018      	movs	r0, r3
 8001f4c:	f003 f816 	bl	8004f7c <HAL_TIM_Base_Init>
 8001f50:	1e03      	subs	r3, r0, #0
 8001f52:	d001      	beq.n	8001f58 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 8001f54:	f000 f982 	bl	800225c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f58:	2148      	movs	r1, #72	; 0x48
 8001f5a:	187b      	adds	r3, r7, r1
 8001f5c:	2280      	movs	r2, #128	; 0x80
 8001f5e:	0152      	lsls	r2, r2, #5
 8001f60:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001f62:	187a      	adds	r2, r7, r1
 8001f64:	4b33      	ldr	r3, [pc, #204]	; (8002034 <MX_TIM1_Init+0x15c>)
 8001f66:	0011      	movs	r1, r2
 8001f68:	0018      	movs	r0, r3
 8001f6a:	f003 fab7 	bl	80054dc <HAL_TIM_ConfigClockSource>
 8001f6e:	1e03      	subs	r3, r0, #0
 8001f70:	d001      	beq.n	8001f76 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001f72:	f000 f973 	bl	800225c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001f76:	4b2f      	ldr	r3, [pc, #188]	; (8002034 <MX_TIM1_Init+0x15c>)
 8001f78:	0018      	movs	r0, r3
 8001f7a:	f003 f8df 	bl	800513c <HAL_TIM_PWM_Init>
 8001f7e:	1e03      	subs	r3, r0, #0
 8001f80:	d001      	beq.n	8001f86 <MX_TIM1_Init+0xae>
  {
    Error_Handler();
 8001f82:	f000 f96b 	bl	800225c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f86:	2140      	movs	r1, #64	; 0x40
 8001f88:	187b      	adds	r3, r7, r1
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f8e:	187b      	adds	r3, r7, r1
 8001f90:	2200      	movs	r2, #0
 8001f92:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f94:	187a      	adds	r2, r7, r1
 8001f96:	4b27      	ldr	r3, [pc, #156]	; (8002034 <MX_TIM1_Init+0x15c>)
 8001f98:	0011      	movs	r1, r2
 8001f9a:	0018      	movs	r0, r3
 8001f9c:	f003 fea2 	bl	8005ce4 <HAL_TIMEx_MasterConfigSynchronization>
 8001fa0:	1e03      	subs	r3, r0, #0
 8001fa2:	d001      	beq.n	8001fa8 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8001fa4:	f000 f95a 	bl	800225c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fa8:	2124      	movs	r1, #36	; 0x24
 8001faa:	187b      	adds	r3, r7, r1
 8001fac:	2260      	movs	r2, #96	; 0x60
 8001fae:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001fb0:	187b      	adds	r3, r7, r1
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fb6:	187b      	adds	r3, r7, r1
 8001fb8:	2200      	movs	r2, #0
 8001fba:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fbc:	187b      	adds	r3, r7, r1
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001fc2:	187b      	adds	r3, r7, r1
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001fc8:	187b      	adds	r3, r7, r1
 8001fca:	2200      	movs	r2, #0
 8001fcc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001fce:	1879      	adds	r1, r7, r1
 8001fd0:	4b18      	ldr	r3, [pc, #96]	; (8002034 <MX_TIM1_Init+0x15c>)
 8001fd2:	220c      	movs	r2, #12
 8001fd4:	0018      	movs	r0, r3
 8001fd6:	f003 f9bb 	bl	8005350 <HAL_TIM_PWM_ConfigChannel>
 8001fda:	1e03      	subs	r3, r0, #0
 8001fdc:	d001      	beq.n	8001fe2 <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 8001fde:	f000 f93d 	bl	800225c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001fe2:	1d3b      	adds	r3, r7, #4
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001fe8:	1d3b      	adds	r3, r7, #4
 8001fea:	2200      	movs	r2, #0
 8001fec:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001fee:	1d3b      	adds	r3, r7, #4
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001ff4:	1d3b      	adds	r3, r7, #4
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ffa:	1d3b      	adds	r3, r7, #4
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002000:	1d3b      	adds	r3, r7, #4
 8002002:	2280      	movs	r2, #128	; 0x80
 8002004:	0192      	lsls	r2, r2, #6
 8002006:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002008:	1d3b      	adds	r3, r7, #4
 800200a:	2200      	movs	r2, #0
 800200c:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800200e:	1d3a      	adds	r2, r7, #4
 8002010:	4b08      	ldr	r3, [pc, #32]	; (8002034 <MX_TIM1_Init+0x15c>)
 8002012:	0011      	movs	r1, r2
 8002014:	0018      	movs	r0, r3
 8002016:	f003 febd 	bl	8005d94 <HAL_TIMEx_ConfigBreakDeadTime>
 800201a:	1e03      	subs	r3, r0, #0
 800201c:	d001      	beq.n	8002022 <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 800201e:	f000 f91d 	bl	800225c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002022:	4b04      	ldr	r3, [pc, #16]	; (8002034 <MX_TIM1_Init+0x15c>)
 8002024:	0018      	movs	r0, r3
 8002026:	f000 fa61 	bl	80024ec <HAL_TIM_MspPostInit>

}
 800202a:	46c0      	nop			; (mov r8, r8)
 800202c:	46bd      	mov	sp, r7
 800202e:	b016      	add	sp, #88	; 0x58
 8002030:	bd80      	pop	{r7, pc}
 8002032:	46c0      	nop			; (mov r8, r8)
 8002034:	20001efc 	.word	0x20001efc
 8002038:	40012c00 	.word	0x40012c00

0800203c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM6_Init 0 */

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002040:	4b0c      	ldr	r3, [pc, #48]	; (8002074 <MX_TIM6_Init+0x38>)
 8002042:	4a0d      	ldr	r2, [pc, #52]	; (8002078 <MX_TIM6_Init+0x3c>)
 8002044:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 48-1;
 8002046:	4b0b      	ldr	r3, [pc, #44]	; (8002074 <MX_TIM6_Init+0x38>)
 8002048:	222f      	movs	r2, #47	; 0x2f
 800204a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800204c:	4b09      	ldr	r3, [pc, #36]	; (8002074 <MX_TIM6_Init+0x38>)
 800204e:	2200      	movs	r2, #0
 8002050:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8002052:	4b08      	ldr	r3, [pc, #32]	; (8002074 <MX_TIM6_Init+0x38>)
 8002054:	4a09      	ldr	r2, [pc, #36]	; (800207c <MX_TIM6_Init+0x40>)
 8002056:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002058:	4b06      	ldr	r3, [pc, #24]	; (8002074 <MX_TIM6_Init+0x38>)
 800205a:	2200      	movs	r2, #0
 800205c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800205e:	4b05      	ldr	r3, [pc, #20]	; (8002074 <MX_TIM6_Init+0x38>)
 8002060:	0018      	movs	r0, r3
 8002062:	f002 ff8b 	bl	8004f7c <HAL_TIM_Base_Init>
 8002066:	1e03      	subs	r3, r0, #0
 8002068:	d001      	beq.n	800206e <MX_TIM6_Init+0x32>
  {
    Error_Handler();
 800206a:	f000 f8f7 	bl	800225c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800206e:	46c0      	nop			; (mov r8, r8)
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	20001eb4 	.word	0x20001eb4
 8002078:	40001000 	.word	0x40001000
 800207c:	0000ffff 	.word	0x0000ffff

08002080 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE END TIM7_Init 0 */

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002084:	4b0d      	ldr	r3, [pc, #52]	; (80020bc <MX_TIM7_Init+0x3c>)
 8002086:	4a0e      	ldr	r2, [pc, #56]	; (80020c0 <MX_TIM7_Init+0x40>)
 8002088:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 240;
 800208a:	4b0c      	ldr	r3, [pc, #48]	; (80020bc <MX_TIM7_Init+0x3c>)
 800208c:	22f0      	movs	r2, #240	; 0xf0
 800208e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002090:	4b0a      	ldr	r3, [pc, #40]	; (80020bc <MX_TIM7_Init+0x3c>)
 8002092:	2200      	movs	r2, #0
 8002094:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000;
 8002096:	4b09      	ldr	r3, [pc, #36]	; (80020bc <MX_TIM7_Init+0x3c>)
 8002098:	22fa      	movs	r2, #250	; 0xfa
 800209a:	0092      	lsls	r2, r2, #2
 800209c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800209e:	4b07      	ldr	r3, [pc, #28]	; (80020bc <MX_TIM7_Init+0x3c>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80020a4:	4b05      	ldr	r3, [pc, #20]	; (80020bc <MX_TIM7_Init+0x3c>)
 80020a6:	0018      	movs	r0, r3
 80020a8:	f002 ff68 	bl	8004f7c <HAL_TIM_Base_Init>
 80020ac:	1e03      	subs	r3, r0, #0
 80020ae:	d001      	beq.n	80020b4 <MX_TIM7_Init+0x34>
  {
    Error_Handler();
 80020b0:	f000 f8d4 	bl	800225c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80020b4:	46c0      	nop			; (mov r8, r8)
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	46c0      	nop			; (mov r8, r8)
 80020bc:	20001f84 	.word	0x20001f84
 80020c0:	40001400 	.word	0x40001400

080020c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020c4:	b590      	push	{r4, r7, lr}
 80020c6:	b089      	sub	sp, #36	; 0x24
 80020c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ca:	240c      	movs	r4, #12
 80020cc:	193b      	adds	r3, r7, r4
 80020ce:	0018      	movs	r0, r3
 80020d0:	2314      	movs	r3, #20
 80020d2:	001a      	movs	r2, r3
 80020d4:	2100      	movs	r1, #0
 80020d6:	f006 fe1d 	bl	8008d14 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020da:	4b34      	ldr	r3, [pc, #208]	; (80021ac <MX_GPIO_Init+0xe8>)
 80020dc:	695a      	ldr	r2, [r3, #20]
 80020de:	4b33      	ldr	r3, [pc, #204]	; (80021ac <MX_GPIO_Init+0xe8>)
 80020e0:	2180      	movs	r1, #128	; 0x80
 80020e2:	0309      	lsls	r1, r1, #12
 80020e4:	430a      	orrs	r2, r1
 80020e6:	615a      	str	r2, [r3, #20]
 80020e8:	4b30      	ldr	r3, [pc, #192]	; (80021ac <MX_GPIO_Init+0xe8>)
 80020ea:	695a      	ldr	r2, [r3, #20]
 80020ec:	2380      	movs	r3, #128	; 0x80
 80020ee:	031b      	lsls	r3, r3, #12
 80020f0:	4013      	ands	r3, r2
 80020f2:	60bb      	str	r3, [r7, #8]
 80020f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020f6:	4b2d      	ldr	r3, [pc, #180]	; (80021ac <MX_GPIO_Init+0xe8>)
 80020f8:	695a      	ldr	r2, [r3, #20]
 80020fa:	4b2c      	ldr	r3, [pc, #176]	; (80021ac <MX_GPIO_Init+0xe8>)
 80020fc:	2180      	movs	r1, #128	; 0x80
 80020fe:	0289      	lsls	r1, r1, #10
 8002100:	430a      	orrs	r2, r1
 8002102:	615a      	str	r2, [r3, #20]
 8002104:	4b29      	ldr	r3, [pc, #164]	; (80021ac <MX_GPIO_Init+0xe8>)
 8002106:	695a      	ldr	r2, [r3, #20]
 8002108:	2380      	movs	r3, #128	; 0x80
 800210a:	029b      	lsls	r3, r3, #10
 800210c:	4013      	ands	r3, r2
 800210e:	607b      	str	r3, [r7, #4]
 8002110:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002112:	4b26      	ldr	r3, [pc, #152]	; (80021ac <MX_GPIO_Init+0xe8>)
 8002114:	695a      	ldr	r2, [r3, #20]
 8002116:	4b25      	ldr	r3, [pc, #148]	; (80021ac <MX_GPIO_Init+0xe8>)
 8002118:	2180      	movs	r1, #128	; 0x80
 800211a:	02c9      	lsls	r1, r1, #11
 800211c:	430a      	orrs	r2, r1
 800211e:	615a      	str	r2, [r3, #20]
 8002120:	4b22      	ldr	r3, [pc, #136]	; (80021ac <MX_GPIO_Init+0xe8>)
 8002122:	695a      	ldr	r2, [r3, #20]
 8002124:	2380      	movs	r3, #128	; 0x80
 8002126:	02db      	lsls	r3, r3, #11
 8002128:	4013      	ands	r3, r2
 800212a:	603b      	str	r3, [r7, #0]
 800212c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_11, GPIO_PIN_RESET);
 800212e:	4920      	ldr	r1, [pc, #128]	; (80021b0 <MX_GPIO_Init+0xec>)
 8002130:	4b20      	ldr	r3, [pc, #128]	; (80021b4 <MX_GPIO_Init+0xf0>)
 8002132:	2200      	movs	r2, #0
 8002134:	0018      	movs	r0, r3
 8002136:	f001 facd 	bl	80036d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800213a:	193b      	adds	r3, r7, r4
 800213c:	2203      	movs	r2, #3
 800213e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002140:	193b      	adds	r3, r7, r4
 8002142:	2200      	movs	r2, #0
 8002144:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002146:	193b      	adds	r3, r7, r4
 8002148:	2200      	movs	r2, #0
 800214a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800214c:	193b      	adds	r3, r7, r4
 800214e:	4a1a      	ldr	r2, [pc, #104]	; (80021b8 <MX_GPIO_Init+0xf4>)
 8002150:	0019      	movs	r1, r3
 8002152:	0010      	movs	r0, r2
 8002154:	f001 f94e 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002158:	0021      	movs	r1, r4
 800215a:	187b      	adds	r3, r7, r1
 800215c:	220c      	movs	r2, #12
 800215e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002160:	187b      	adds	r3, r7, r1
 8002162:	2288      	movs	r2, #136	; 0x88
 8002164:	0352      	lsls	r2, r2, #13
 8002166:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002168:	187b      	adds	r3, r7, r1
 800216a:	2200      	movs	r2, #0
 800216c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800216e:	000c      	movs	r4, r1
 8002170:	187b      	adds	r3, r7, r1
 8002172:	4a11      	ldr	r2, [pc, #68]	; (80021b8 <MX_GPIO_Init+0xf4>)
 8002174:	0019      	movs	r1, r3
 8002176:	0010      	movs	r0, r2
 8002178:	f001 f93c 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_11;
 800217c:	0021      	movs	r1, r4
 800217e:	187b      	adds	r3, r7, r1
 8002180:	4a0b      	ldr	r2, [pc, #44]	; (80021b0 <MX_GPIO_Init+0xec>)
 8002182:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002184:	187b      	adds	r3, r7, r1
 8002186:	2201      	movs	r2, #1
 8002188:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218a:	187b      	adds	r3, r7, r1
 800218c:	2200      	movs	r2, #0
 800218e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002190:	187b      	adds	r3, r7, r1
 8002192:	2200      	movs	r2, #0
 8002194:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002196:	187b      	adds	r3, r7, r1
 8002198:	4a06      	ldr	r2, [pc, #24]	; (80021b4 <MX_GPIO_Init+0xf0>)
 800219a:	0019      	movs	r1, r3
 800219c:	0010      	movs	r0, r2
 800219e:	f001 f929 	bl	80033f4 <HAL_GPIO_Init>

}
 80021a2:	46c0      	nop			; (mov r8, r8)
 80021a4:	46bd      	mov	sp, r7
 80021a6:	b009      	add	sp, #36	; 0x24
 80021a8:	bd90      	pop	{r4, r7, pc}
 80021aa:	46c0      	nop			; (mov r8, r8)
 80021ac:	40021000 	.word	0x40021000
 80021b0:	00000807 	.word	0x00000807
 80021b4:	48000400 	.word	0x48000400
 80021b8:	48000800 	.word	0x48000800

080021bc <ADC_Select_CH0>:

/* USER CODE BEGIN 4 */

void ADC_Select_CH0 (void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80021c2:	1d3b      	adds	r3, r7, #4
 80021c4:	0018      	movs	r0, r3
 80021c6:	230c      	movs	r3, #12
 80021c8:	001a      	movs	r2, r3
 80021ca:	2100      	movs	r1, #0
 80021cc:	f006 fda2 	bl	8008d14 <memset>
	sConfig.Channel = ADC_CHANNEL_0;
 80021d0:	1d3b      	adds	r3, r7, #4
 80021d2:	2200      	movs	r2, #0
 80021d4:	601a      	str	r2, [r3, #0]
	sConfig.Rank = 1;
 80021d6:	1d3b      	adds	r3, r7, #4
 80021d8:	2201      	movs	r2, #1
 80021da:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80021dc:	1d3b      	adds	r3, r7, #4
 80021de:	2280      	movs	r2, #128	; 0x80
 80021e0:	0552      	lsls	r2, r2, #21
 80021e2:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80021e4:	1d3a      	adds	r2, r7, #4
 80021e6:	4b06      	ldr	r3, [pc, #24]	; (8002200 <ADC_Select_CH0+0x44>)
 80021e8:	0011      	movs	r1, r2
 80021ea:	0018      	movs	r0, r3
 80021ec:	f000 fd44 	bl	8002c78 <HAL_ADC_ConfigChannel>
 80021f0:	1e03      	subs	r3, r0, #0
 80021f2:	d001      	beq.n	80021f8 <ADC_Select_CH0+0x3c>
	{
		Error_Handler();
 80021f4:	f000 f832 	bl	800225c <Error_Handler>
	}
}
 80021f8:	46c0      	nop			; (mov r8, r8)
 80021fa:	46bd      	mov	sp, r7
 80021fc:	b004      	add	sp, #16
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	20001f44 	.word	0x20001f44

08002204 <ADC_Select_CH3>:

void ADC_Select_CH3 (void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 800220a:	1d3b      	adds	r3, r7, #4
 800220c:	0018      	movs	r0, r3
 800220e:	230c      	movs	r3, #12
 8002210:	001a      	movs	r2, r3
 8002212:	2100      	movs	r1, #0
 8002214:	f006 fd7e 	bl	8008d14 <memset>
	sConfig.Channel = ADC_CHANNEL_3;
 8002218:	1d3b      	adds	r3, r7, #4
 800221a:	2203      	movs	r2, #3
 800221c:	601a      	str	r2, [r3, #0]
	sConfig.Rank = 1;
 800221e:	1d3b      	adds	r3, r7, #4
 8002220:	2201      	movs	r2, #1
 8002222:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002224:	1d3b      	adds	r3, r7, #4
 8002226:	2280      	movs	r2, #128	; 0x80
 8002228:	0552      	lsls	r2, r2, #21
 800222a:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800222c:	1d3a      	adds	r2, r7, #4
 800222e:	4b06      	ldr	r3, [pc, #24]	; (8002248 <ADC_Select_CH3+0x44>)
 8002230:	0011      	movs	r1, r2
 8002232:	0018      	movs	r0, r3
 8002234:	f000 fd20 	bl	8002c78 <HAL_ADC_ConfigChannel>
 8002238:	1e03      	subs	r3, r0, #0
 800223a:	d001      	beq.n	8002240 <ADC_Select_CH3+0x3c>
	{
		Error_Handler();
 800223c:	f000 f80e 	bl	800225c <Error_Handler>
	}
}
 8002240:	46c0      	nop			; (mov r8, r8)
 8002242:	46bd      	mov	sp, r7
 8002244:	b004      	add	sp, #16
 8002246:	bd80      	pop	{r7, pc}
 8002248:	20001f44 	.word	0x20001f44

0800224c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002254:	2001      	movs	r0, #1
 8002256:	f003 fecf 	bl	8005ff8 <osDelay>
 800225a:	e7fb      	b.n	8002254 <StartDefaultTask+0x8>

0800225c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002260:	b672      	cpsid	i
}
 8002262:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002264:	e7fe      	b.n	8002264 <Error_Handler+0x8>
	...

08002268 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800226e:	4b12      	ldr	r3, [pc, #72]	; (80022b8 <HAL_MspInit+0x50>)
 8002270:	699a      	ldr	r2, [r3, #24]
 8002272:	4b11      	ldr	r3, [pc, #68]	; (80022b8 <HAL_MspInit+0x50>)
 8002274:	2101      	movs	r1, #1
 8002276:	430a      	orrs	r2, r1
 8002278:	619a      	str	r2, [r3, #24]
 800227a:	4b0f      	ldr	r3, [pc, #60]	; (80022b8 <HAL_MspInit+0x50>)
 800227c:	699b      	ldr	r3, [r3, #24]
 800227e:	2201      	movs	r2, #1
 8002280:	4013      	ands	r3, r2
 8002282:	607b      	str	r3, [r7, #4]
 8002284:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002286:	4b0c      	ldr	r3, [pc, #48]	; (80022b8 <HAL_MspInit+0x50>)
 8002288:	69da      	ldr	r2, [r3, #28]
 800228a:	4b0b      	ldr	r3, [pc, #44]	; (80022b8 <HAL_MspInit+0x50>)
 800228c:	2180      	movs	r1, #128	; 0x80
 800228e:	0549      	lsls	r1, r1, #21
 8002290:	430a      	orrs	r2, r1
 8002292:	61da      	str	r2, [r3, #28]
 8002294:	4b08      	ldr	r3, [pc, #32]	; (80022b8 <HAL_MspInit+0x50>)
 8002296:	69da      	ldr	r2, [r3, #28]
 8002298:	2380      	movs	r3, #128	; 0x80
 800229a:	055b      	lsls	r3, r3, #21
 800229c:	4013      	ands	r3, r2
 800229e:	603b      	str	r3, [r7, #0]
 80022a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 80022a2:	2302      	movs	r3, #2
 80022a4:	425b      	negs	r3, r3
 80022a6:	2200      	movs	r2, #0
 80022a8:	2103      	movs	r1, #3
 80022aa:	0018      	movs	r0, r3
 80022ac:	f001 f870 	bl	8003390 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022b0:	46c0      	nop			; (mov r8, r8)
 80022b2:	46bd      	mov	sp, r7
 80022b4:	b002      	add	sp, #8
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	40021000 	.word	0x40021000

080022bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80022bc:	b590      	push	{r4, r7, lr}
 80022be:	b08b      	sub	sp, #44	; 0x2c
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c4:	2414      	movs	r4, #20
 80022c6:	193b      	adds	r3, r7, r4
 80022c8:	0018      	movs	r0, r3
 80022ca:	2314      	movs	r3, #20
 80022cc:	001a      	movs	r2, r3
 80022ce:	2100      	movs	r1, #0
 80022d0:	f006 fd20 	bl	8008d14 <memset>
  if(hadc->Instance==ADC1)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a19      	ldr	r2, [pc, #100]	; (8002340 <HAL_ADC_MspInit+0x84>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d12b      	bne.n	8002336 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80022de:	4b19      	ldr	r3, [pc, #100]	; (8002344 <HAL_ADC_MspInit+0x88>)
 80022e0:	699a      	ldr	r2, [r3, #24]
 80022e2:	4b18      	ldr	r3, [pc, #96]	; (8002344 <HAL_ADC_MspInit+0x88>)
 80022e4:	2180      	movs	r1, #128	; 0x80
 80022e6:	0089      	lsls	r1, r1, #2
 80022e8:	430a      	orrs	r2, r1
 80022ea:	619a      	str	r2, [r3, #24]
 80022ec:	4b15      	ldr	r3, [pc, #84]	; (8002344 <HAL_ADC_MspInit+0x88>)
 80022ee:	699a      	ldr	r2, [r3, #24]
 80022f0:	2380      	movs	r3, #128	; 0x80
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	4013      	ands	r3, r2
 80022f6:	613b      	str	r3, [r7, #16]
 80022f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022fa:	4b12      	ldr	r3, [pc, #72]	; (8002344 <HAL_ADC_MspInit+0x88>)
 80022fc:	695a      	ldr	r2, [r3, #20]
 80022fe:	4b11      	ldr	r3, [pc, #68]	; (8002344 <HAL_ADC_MspInit+0x88>)
 8002300:	2180      	movs	r1, #128	; 0x80
 8002302:	0289      	lsls	r1, r1, #10
 8002304:	430a      	orrs	r2, r1
 8002306:	615a      	str	r2, [r3, #20]
 8002308:	4b0e      	ldr	r3, [pc, #56]	; (8002344 <HAL_ADC_MspInit+0x88>)
 800230a:	695a      	ldr	r2, [r3, #20]
 800230c:	2380      	movs	r3, #128	; 0x80
 800230e:	029b      	lsls	r3, r3, #10
 8002310:	4013      	ands	r3, r2
 8002312:	60fb      	str	r3, [r7, #12]
 8002314:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    PA3     ------> ADC_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8002316:	193b      	adds	r3, r7, r4
 8002318:	2209      	movs	r2, #9
 800231a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800231c:	193b      	adds	r3, r7, r4
 800231e:	2203      	movs	r2, #3
 8002320:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002322:	193b      	adds	r3, r7, r4
 8002324:	2200      	movs	r2, #0
 8002326:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002328:	193a      	adds	r2, r7, r4
 800232a:	2390      	movs	r3, #144	; 0x90
 800232c:	05db      	lsls	r3, r3, #23
 800232e:	0011      	movs	r1, r2
 8002330:	0018      	movs	r0, r3
 8002332:	f001 f85f 	bl	80033f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002336:	46c0      	nop			; (mov r8, r8)
 8002338:	46bd      	mov	sp, r7
 800233a:	b00b      	add	sp, #44	; 0x2c
 800233c:	bd90      	pop	{r4, r7, pc}
 800233e:	46c0      	nop			; (mov r8, r8)
 8002340:	40012400 	.word	0x40012400
 8002344:	40021000 	.word	0x40021000

08002348 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002348:	b590      	push	{r4, r7, lr}
 800234a:	b08d      	sub	sp, #52	; 0x34
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002350:	241c      	movs	r4, #28
 8002352:	193b      	adds	r3, r7, r4
 8002354:	0018      	movs	r0, r3
 8002356:	2314      	movs	r3, #20
 8002358:	001a      	movs	r2, r3
 800235a:	2100      	movs	r1, #0
 800235c:	f006 fcda 	bl	8008d14 <memset>
  if(hi2c->Instance==I2C1)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a39      	ldr	r2, [pc, #228]	; (800244c <HAL_I2C_MspInit+0x104>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d133      	bne.n	80023d2 <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800236a:	4b39      	ldr	r3, [pc, #228]	; (8002450 <HAL_I2C_MspInit+0x108>)
 800236c:	695a      	ldr	r2, [r3, #20]
 800236e:	4b38      	ldr	r3, [pc, #224]	; (8002450 <HAL_I2C_MspInit+0x108>)
 8002370:	2180      	movs	r1, #128	; 0x80
 8002372:	02c9      	lsls	r1, r1, #11
 8002374:	430a      	orrs	r2, r1
 8002376:	615a      	str	r2, [r3, #20]
 8002378:	4b35      	ldr	r3, [pc, #212]	; (8002450 <HAL_I2C_MspInit+0x108>)
 800237a:	695a      	ldr	r2, [r3, #20]
 800237c:	2380      	movs	r3, #128	; 0x80
 800237e:	02db      	lsls	r3, r3, #11
 8002380:	4013      	ands	r3, r2
 8002382:	61bb      	str	r3, [r7, #24]
 8002384:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002386:	193b      	adds	r3, r7, r4
 8002388:	22c0      	movs	r2, #192	; 0xc0
 800238a:	0092      	lsls	r2, r2, #2
 800238c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800238e:	0021      	movs	r1, r4
 8002390:	187b      	adds	r3, r7, r1
 8002392:	2212      	movs	r2, #18
 8002394:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002396:	187b      	adds	r3, r7, r1
 8002398:	2200      	movs	r2, #0
 800239a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800239c:	187b      	adds	r3, r7, r1
 800239e:	2203      	movs	r2, #3
 80023a0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80023a2:	187b      	adds	r3, r7, r1
 80023a4:	2201      	movs	r2, #1
 80023a6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023a8:	187b      	adds	r3, r7, r1
 80023aa:	4a2a      	ldr	r2, [pc, #168]	; (8002454 <HAL_I2C_MspInit+0x10c>)
 80023ac:	0019      	movs	r1, r3
 80023ae:	0010      	movs	r0, r2
 80023b0:	f001 f820 	bl	80033f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80023b4:	4b26      	ldr	r3, [pc, #152]	; (8002450 <HAL_I2C_MspInit+0x108>)
 80023b6:	69da      	ldr	r2, [r3, #28]
 80023b8:	4b25      	ldr	r3, [pc, #148]	; (8002450 <HAL_I2C_MspInit+0x108>)
 80023ba:	2180      	movs	r1, #128	; 0x80
 80023bc:	0389      	lsls	r1, r1, #14
 80023be:	430a      	orrs	r2, r1
 80023c0:	61da      	str	r2, [r3, #28]
 80023c2:	4b23      	ldr	r3, [pc, #140]	; (8002450 <HAL_I2C_MspInit+0x108>)
 80023c4:	69da      	ldr	r2, [r3, #28]
 80023c6:	2380      	movs	r3, #128	; 0x80
 80023c8:	039b      	lsls	r3, r3, #14
 80023ca:	4013      	ands	r3, r2
 80023cc:	617b      	str	r3, [r7, #20]
 80023ce:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80023d0:	e037      	b.n	8002442 <HAL_I2C_MspInit+0xfa>
  else if(hi2c->Instance==I2C2)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a20      	ldr	r2, [pc, #128]	; (8002458 <HAL_I2C_MspInit+0x110>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d132      	bne.n	8002442 <HAL_I2C_MspInit+0xfa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023dc:	4b1c      	ldr	r3, [pc, #112]	; (8002450 <HAL_I2C_MspInit+0x108>)
 80023de:	695a      	ldr	r2, [r3, #20]
 80023e0:	4b1b      	ldr	r3, [pc, #108]	; (8002450 <HAL_I2C_MspInit+0x108>)
 80023e2:	2180      	movs	r1, #128	; 0x80
 80023e4:	02c9      	lsls	r1, r1, #11
 80023e6:	430a      	orrs	r2, r1
 80023e8:	615a      	str	r2, [r3, #20]
 80023ea:	4b19      	ldr	r3, [pc, #100]	; (8002450 <HAL_I2C_MspInit+0x108>)
 80023ec:	695a      	ldr	r2, [r3, #20]
 80023ee:	2380      	movs	r3, #128	; 0x80
 80023f0:	02db      	lsls	r3, r3, #11
 80023f2:	4013      	ands	r3, r2
 80023f4:	613b      	str	r3, [r7, #16]
 80023f6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80023f8:	211c      	movs	r1, #28
 80023fa:	187b      	adds	r3, r7, r1
 80023fc:	22c0      	movs	r2, #192	; 0xc0
 80023fe:	01d2      	lsls	r2, r2, #7
 8002400:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002402:	187b      	adds	r3, r7, r1
 8002404:	2212      	movs	r2, #18
 8002406:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002408:	187b      	adds	r3, r7, r1
 800240a:	2201      	movs	r2, #1
 800240c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800240e:	187b      	adds	r3, r7, r1
 8002410:	2203      	movs	r2, #3
 8002412:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_I2C2;
 8002414:	187b      	adds	r3, r7, r1
 8002416:	2205      	movs	r2, #5
 8002418:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800241a:	187b      	adds	r3, r7, r1
 800241c:	4a0d      	ldr	r2, [pc, #52]	; (8002454 <HAL_I2C_MspInit+0x10c>)
 800241e:	0019      	movs	r1, r3
 8002420:	0010      	movs	r0, r2
 8002422:	f000 ffe7 	bl	80033f4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002426:	4b0a      	ldr	r3, [pc, #40]	; (8002450 <HAL_I2C_MspInit+0x108>)
 8002428:	69da      	ldr	r2, [r3, #28]
 800242a:	4b09      	ldr	r3, [pc, #36]	; (8002450 <HAL_I2C_MspInit+0x108>)
 800242c:	2180      	movs	r1, #128	; 0x80
 800242e:	03c9      	lsls	r1, r1, #15
 8002430:	430a      	orrs	r2, r1
 8002432:	61da      	str	r2, [r3, #28]
 8002434:	4b06      	ldr	r3, [pc, #24]	; (8002450 <HAL_I2C_MspInit+0x108>)
 8002436:	69da      	ldr	r2, [r3, #28]
 8002438:	2380      	movs	r3, #128	; 0x80
 800243a:	03db      	lsls	r3, r3, #15
 800243c:	4013      	ands	r3, r2
 800243e:	60fb      	str	r3, [r7, #12]
 8002440:	68fb      	ldr	r3, [r7, #12]
}
 8002442:	46c0      	nop			; (mov r8, r8)
 8002444:	46bd      	mov	sp, r7
 8002446:	b00d      	add	sp, #52	; 0x34
 8002448:	bd90      	pop	{r4, r7, pc}
 800244a:	46c0      	nop			; (mov r8, r8)
 800244c:	40005400 	.word	0x40005400
 8002450:	40021000 	.word	0x40021000
 8002454:	48000400 	.word	0x48000400
 8002458:	40005800 	.word	0x40005800

0800245c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b086      	sub	sp, #24
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a1c      	ldr	r2, [pc, #112]	; (80024dc <HAL_TIM_Base_MspInit+0x80>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d10e      	bne.n	800248c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800246e:	4b1c      	ldr	r3, [pc, #112]	; (80024e0 <HAL_TIM_Base_MspInit+0x84>)
 8002470:	699a      	ldr	r2, [r3, #24]
 8002472:	4b1b      	ldr	r3, [pc, #108]	; (80024e0 <HAL_TIM_Base_MspInit+0x84>)
 8002474:	2180      	movs	r1, #128	; 0x80
 8002476:	0109      	lsls	r1, r1, #4
 8002478:	430a      	orrs	r2, r1
 800247a:	619a      	str	r2, [r3, #24]
 800247c:	4b18      	ldr	r3, [pc, #96]	; (80024e0 <HAL_TIM_Base_MspInit+0x84>)
 800247e:	699a      	ldr	r2, [r3, #24]
 8002480:	2380      	movs	r3, #128	; 0x80
 8002482:	011b      	lsls	r3, r3, #4
 8002484:	4013      	ands	r3, r2
 8002486:	617b      	str	r3, [r7, #20]
 8002488:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800248a:	e022      	b.n	80024d2 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM6)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a14      	ldr	r2, [pc, #80]	; (80024e4 <HAL_TIM_Base_MspInit+0x88>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d10c      	bne.n	80024b0 <HAL_TIM_Base_MspInit+0x54>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002496:	4b12      	ldr	r3, [pc, #72]	; (80024e0 <HAL_TIM_Base_MspInit+0x84>)
 8002498:	69da      	ldr	r2, [r3, #28]
 800249a:	4b11      	ldr	r3, [pc, #68]	; (80024e0 <HAL_TIM_Base_MspInit+0x84>)
 800249c:	2110      	movs	r1, #16
 800249e:	430a      	orrs	r2, r1
 80024a0:	61da      	str	r2, [r3, #28]
 80024a2:	4b0f      	ldr	r3, [pc, #60]	; (80024e0 <HAL_TIM_Base_MspInit+0x84>)
 80024a4:	69db      	ldr	r3, [r3, #28]
 80024a6:	2210      	movs	r2, #16
 80024a8:	4013      	ands	r3, r2
 80024aa:	613b      	str	r3, [r7, #16]
 80024ac:	693b      	ldr	r3, [r7, #16]
}
 80024ae:	e010      	b.n	80024d2 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM7)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a0c      	ldr	r2, [pc, #48]	; (80024e8 <HAL_TIM_Base_MspInit+0x8c>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d10b      	bne.n	80024d2 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80024ba:	4b09      	ldr	r3, [pc, #36]	; (80024e0 <HAL_TIM_Base_MspInit+0x84>)
 80024bc:	69da      	ldr	r2, [r3, #28]
 80024be:	4b08      	ldr	r3, [pc, #32]	; (80024e0 <HAL_TIM_Base_MspInit+0x84>)
 80024c0:	2120      	movs	r1, #32
 80024c2:	430a      	orrs	r2, r1
 80024c4:	61da      	str	r2, [r3, #28]
 80024c6:	4b06      	ldr	r3, [pc, #24]	; (80024e0 <HAL_TIM_Base_MspInit+0x84>)
 80024c8:	69db      	ldr	r3, [r3, #28]
 80024ca:	2220      	movs	r2, #32
 80024cc:	4013      	ands	r3, r2
 80024ce:	60fb      	str	r3, [r7, #12]
 80024d0:	68fb      	ldr	r3, [r7, #12]
}
 80024d2:	46c0      	nop			; (mov r8, r8)
 80024d4:	46bd      	mov	sp, r7
 80024d6:	b006      	add	sp, #24
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	46c0      	nop			; (mov r8, r8)
 80024dc:	40012c00 	.word	0x40012c00
 80024e0:	40021000 	.word	0x40021000
 80024e4:	40001000 	.word	0x40001000
 80024e8:	40001400 	.word	0x40001400

080024ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80024ec:	b590      	push	{r4, r7, lr}
 80024ee:	b089      	sub	sp, #36	; 0x24
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024f4:	240c      	movs	r4, #12
 80024f6:	193b      	adds	r3, r7, r4
 80024f8:	0018      	movs	r0, r3
 80024fa:	2314      	movs	r3, #20
 80024fc:	001a      	movs	r2, r3
 80024fe:	2100      	movs	r1, #0
 8002500:	f006 fc08 	bl	8008d14 <memset>
  if(htim->Instance==TIM1)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a16      	ldr	r2, [pc, #88]	; (8002564 <HAL_TIM_MspPostInit+0x78>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d125      	bne.n	800255a <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800250e:	4b16      	ldr	r3, [pc, #88]	; (8002568 <HAL_TIM_MspPostInit+0x7c>)
 8002510:	695a      	ldr	r2, [r3, #20]
 8002512:	4b15      	ldr	r3, [pc, #84]	; (8002568 <HAL_TIM_MspPostInit+0x7c>)
 8002514:	2180      	movs	r1, #128	; 0x80
 8002516:	0289      	lsls	r1, r1, #10
 8002518:	430a      	orrs	r2, r1
 800251a:	615a      	str	r2, [r3, #20]
 800251c:	4b12      	ldr	r3, [pc, #72]	; (8002568 <HAL_TIM_MspPostInit+0x7c>)
 800251e:	695a      	ldr	r2, [r3, #20]
 8002520:	2380      	movs	r3, #128	; 0x80
 8002522:	029b      	lsls	r3, r3, #10
 8002524:	4013      	ands	r3, r2
 8002526:	60bb      	str	r3, [r7, #8]
 8002528:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800252a:	193b      	adds	r3, r7, r4
 800252c:	2280      	movs	r2, #128	; 0x80
 800252e:	0112      	lsls	r2, r2, #4
 8002530:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002532:	0021      	movs	r1, r4
 8002534:	187b      	adds	r3, r7, r1
 8002536:	2202      	movs	r2, #2
 8002538:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253a:	187b      	adds	r3, r7, r1
 800253c:	2200      	movs	r2, #0
 800253e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002540:	187b      	adds	r3, r7, r1
 8002542:	2200      	movs	r2, #0
 8002544:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002546:	187b      	adds	r3, r7, r1
 8002548:	2202      	movs	r2, #2
 800254a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800254c:	187a      	adds	r2, r7, r1
 800254e:	2390      	movs	r3, #144	; 0x90
 8002550:	05db      	lsls	r3, r3, #23
 8002552:	0011      	movs	r1, r2
 8002554:	0018      	movs	r0, r3
 8002556:	f000 ff4d 	bl	80033f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800255a:	46c0      	nop			; (mov r8, r8)
 800255c:	46bd      	mov	sp, r7
 800255e:	b009      	add	sp, #36	; 0x24
 8002560:	bd90      	pop	{r4, r7, pc}
 8002562:	46c0      	nop			; (mov r8, r8)
 8002564:	40012c00 	.word	0x40012c00
 8002568:	40021000 	.word	0x40021000

0800256c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002570:	e7fe      	b.n	8002570 <NMI_Handler+0x4>

08002572 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002572:	b580      	push	{r7, lr}
 8002574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002576:	e7fe      	b.n	8002576 <HardFault_Handler+0x4>

08002578 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800257c:	f000 f8c4 	bl	8002708 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002580:	f005 f9a0 	bl	80078c4 <xTaskGetSchedulerState>
 8002584:	0003      	movs	r3, r0
 8002586:	2b01      	cmp	r3, #1
 8002588:	d001      	beq.n	800258e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800258a:	f005 ff25 	bl	80083d8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800258e:	46c0      	nop			; (mov r8, r8)
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}

08002594 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002598:	2004      	movs	r0, #4
 800259a:	f001 f8b9 	bl	8003710 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800259e:	2008      	movs	r0, #8
 80025a0:	f001 f8b6 	bl	8003710 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 80025a4:	46c0      	nop			; (mov r8, r8)
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
	...

080025ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b086      	sub	sp, #24
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025b4:	4a14      	ldr	r2, [pc, #80]	; (8002608 <_sbrk+0x5c>)
 80025b6:	4b15      	ldr	r3, [pc, #84]	; (800260c <_sbrk+0x60>)
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025c0:	4b13      	ldr	r3, [pc, #76]	; (8002610 <_sbrk+0x64>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d102      	bne.n	80025ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025c8:	4b11      	ldr	r3, [pc, #68]	; (8002610 <_sbrk+0x64>)
 80025ca:	4a12      	ldr	r2, [pc, #72]	; (8002614 <_sbrk+0x68>)
 80025cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025ce:	4b10      	ldr	r3, [pc, #64]	; (8002610 <_sbrk+0x64>)
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	18d3      	adds	r3, r2, r3
 80025d6:	693a      	ldr	r2, [r7, #16]
 80025d8:	429a      	cmp	r2, r3
 80025da:	d207      	bcs.n	80025ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025dc:	f006 fb54 	bl	8008c88 <__errno>
 80025e0:	0003      	movs	r3, r0
 80025e2:	220c      	movs	r2, #12
 80025e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025e6:	2301      	movs	r3, #1
 80025e8:	425b      	negs	r3, r3
 80025ea:	e009      	b.n	8002600 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025ec:	4b08      	ldr	r3, [pc, #32]	; (8002610 <_sbrk+0x64>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025f2:	4b07      	ldr	r3, [pc, #28]	; (8002610 <_sbrk+0x64>)
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	18d2      	adds	r2, r2, r3
 80025fa:	4b05      	ldr	r3, [pc, #20]	; (8002610 <_sbrk+0x64>)
 80025fc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80025fe:	68fb      	ldr	r3, [r7, #12]
}
 8002600:	0018      	movs	r0, r3
 8002602:	46bd      	mov	sp, r7
 8002604:	b006      	add	sp, #24
 8002606:	bd80      	pop	{r7, pc}
 8002608:	20004000 	.word	0x20004000
 800260c:	00000400 	.word	0x00000400
 8002610:	200000cc 	.word	0x200000cc
 8002614:	20002020 	.word	0x20002020

08002618 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800261c:	46c0      	nop			; (mov r8, r8)
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
	...

08002624 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002624:	480d      	ldr	r0, [pc, #52]	; (800265c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002626:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002628:	480d      	ldr	r0, [pc, #52]	; (8002660 <LoopForever+0x6>)
  ldr r1, =_edata
 800262a:	490e      	ldr	r1, [pc, #56]	; (8002664 <LoopForever+0xa>)
  ldr r2, =_sidata
 800262c:	4a0e      	ldr	r2, [pc, #56]	; (8002668 <LoopForever+0xe>)
  movs r3, #0
 800262e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002630:	e002      	b.n	8002638 <LoopCopyDataInit>

08002632 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002632:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002634:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002636:	3304      	adds	r3, #4

08002638 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002638:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800263a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800263c:	d3f9      	bcc.n	8002632 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800263e:	4a0b      	ldr	r2, [pc, #44]	; (800266c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002640:	4c0b      	ldr	r4, [pc, #44]	; (8002670 <LoopForever+0x16>)
  movs r3, #0
 8002642:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002644:	e001      	b.n	800264a <LoopFillZerobss>

08002646 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002646:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002648:	3204      	adds	r2, #4

0800264a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800264a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800264c:	d3fb      	bcc.n	8002646 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800264e:	f7ff ffe3 	bl	8002618 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002652:	f006 fb1f 	bl	8008c94 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002656:	f7ff fa8f 	bl	8001b78 <main>

0800265a <LoopForever>:

LoopForever:
    b LoopForever
 800265a:	e7fe      	b.n	800265a <LoopForever>
  ldr   r0, =_estack
 800265c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002660:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002664:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8002668:	08009dfc 	.word	0x08009dfc
  ldr r2, =_sbss
 800266c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8002670:	20002020 	.word	0x20002020

08002674 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002674:	e7fe      	b.n	8002674 <ADC1_IRQHandler>
	...

08002678 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800267c:	4b07      	ldr	r3, [pc, #28]	; (800269c <HAL_Init+0x24>)
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	4b06      	ldr	r3, [pc, #24]	; (800269c <HAL_Init+0x24>)
 8002682:	2110      	movs	r1, #16
 8002684:	430a      	orrs	r2, r1
 8002686:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002688:	2003      	movs	r0, #3
 800268a:	f000 f809 	bl	80026a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800268e:	f7ff fdeb 	bl	8002268 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002692:	2300      	movs	r3, #0
}
 8002694:	0018      	movs	r0, r3
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	46c0      	nop			; (mov r8, r8)
 800269c:	40022000 	.word	0x40022000

080026a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026a0:	b590      	push	{r4, r7, lr}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026a8:	4b14      	ldr	r3, [pc, #80]	; (80026fc <HAL_InitTick+0x5c>)
 80026aa:	681c      	ldr	r4, [r3, #0]
 80026ac:	4b14      	ldr	r3, [pc, #80]	; (8002700 <HAL_InitTick+0x60>)
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	0019      	movs	r1, r3
 80026b2:	23fa      	movs	r3, #250	; 0xfa
 80026b4:	0098      	lsls	r0, r3, #2
 80026b6:	f7fd fd31 	bl	800011c <__udivsi3>
 80026ba:	0003      	movs	r3, r0
 80026bc:	0019      	movs	r1, r3
 80026be:	0020      	movs	r0, r4
 80026c0:	f7fd fd2c 	bl	800011c <__udivsi3>
 80026c4:	0003      	movs	r3, r0
 80026c6:	0018      	movs	r0, r3
 80026c8:	f000 fe87 	bl	80033da <HAL_SYSTICK_Config>
 80026cc:	1e03      	subs	r3, r0, #0
 80026ce:	d001      	beq.n	80026d4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e00f      	b.n	80026f4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2b03      	cmp	r3, #3
 80026d8:	d80b      	bhi.n	80026f2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026da:	6879      	ldr	r1, [r7, #4]
 80026dc:	2301      	movs	r3, #1
 80026de:	425b      	negs	r3, r3
 80026e0:	2200      	movs	r2, #0
 80026e2:	0018      	movs	r0, r3
 80026e4:	f000 fe54 	bl	8003390 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026e8:	4b06      	ldr	r3, [pc, #24]	; (8002704 <HAL_InitTick+0x64>)
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80026ee:	2300      	movs	r3, #0
 80026f0:	e000      	b.n	80026f4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
}
 80026f4:	0018      	movs	r0, r3
 80026f6:	46bd      	mov	sp, r7
 80026f8:	b003      	add	sp, #12
 80026fa:	bd90      	pop	{r4, r7, pc}
 80026fc:	20000004 	.word	0x20000004
 8002700:	2000000c 	.word	0x2000000c
 8002704:	20000008 	.word	0x20000008

08002708 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800270c:	4b05      	ldr	r3, [pc, #20]	; (8002724 <HAL_IncTick+0x1c>)
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	001a      	movs	r2, r3
 8002712:	4b05      	ldr	r3, [pc, #20]	; (8002728 <HAL_IncTick+0x20>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	18d2      	adds	r2, r2, r3
 8002718:	4b03      	ldr	r3, [pc, #12]	; (8002728 <HAL_IncTick+0x20>)
 800271a:	601a      	str	r2, [r3, #0]
}
 800271c:	46c0      	nop			; (mov r8, r8)
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	46c0      	nop			; (mov r8, r8)
 8002724:	2000000c 	.word	0x2000000c
 8002728:	20001fcc 	.word	0x20001fcc

0800272c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0
  return uwTick;
 8002730:	4b02      	ldr	r3, [pc, #8]	; (800273c <HAL_GetTick+0x10>)
 8002732:	681b      	ldr	r3, [r3, #0]
}
 8002734:	0018      	movs	r0, r3
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	46c0      	nop			; (mov r8, r8)
 800273c:	20001fcc 	.word	0x20001fcc

08002740 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002748:	f7ff fff0 	bl	800272c <HAL_GetTick>
 800274c:	0003      	movs	r3, r0
 800274e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	3301      	adds	r3, #1
 8002758:	d005      	beq.n	8002766 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800275a:	4b0a      	ldr	r3, [pc, #40]	; (8002784 <HAL_Delay+0x44>)
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	001a      	movs	r2, r3
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	189b      	adds	r3, r3, r2
 8002764:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002766:	46c0      	nop			; (mov r8, r8)
 8002768:	f7ff ffe0 	bl	800272c <HAL_GetTick>
 800276c:	0002      	movs	r2, r0
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	68fa      	ldr	r2, [r7, #12]
 8002774:	429a      	cmp	r2, r3
 8002776:	d8f7      	bhi.n	8002768 <HAL_Delay+0x28>
  {
  }
}
 8002778:	46c0      	nop			; (mov r8, r8)
 800277a:	46c0      	nop			; (mov r8, r8)
 800277c:	46bd      	mov	sp, r7
 800277e:	b004      	add	sp, #16
 8002780:	bd80      	pop	{r7, pc}
 8002782:	46c0      	nop			; (mov r8, r8)
 8002784:	2000000c 	.word	0x2000000c

08002788 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002790:	230f      	movs	r3, #15
 8002792:	18fb      	adds	r3, r7, r3
 8002794:	2200      	movs	r2, #0
 8002796:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8002798:	2300      	movs	r3, #0
 800279a:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d101      	bne.n	80027a6 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e125      	b.n	80029f2 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d10a      	bne.n	80027c4 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2234      	movs	r2, #52	; 0x34
 80027b8:	2100      	movs	r1, #0
 80027ba:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	0018      	movs	r0, r3
 80027c0:	f7ff fd7c 	bl	80022bc <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027c8:	2210      	movs	r2, #16
 80027ca:	4013      	ands	r3, r2
 80027cc:	d000      	beq.n	80027d0 <HAL_ADC_Init+0x48>
 80027ce:	e103      	b.n	80029d8 <HAL_ADC_Init+0x250>
 80027d0:	230f      	movs	r3, #15
 80027d2:	18fb      	adds	r3, r7, r3
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d000      	beq.n	80027dc <HAL_ADC_Init+0x54>
 80027da:	e0fd      	b.n	80029d8 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	2204      	movs	r2, #4
 80027e4:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80027e6:	d000      	beq.n	80027ea <HAL_ADC_Init+0x62>
 80027e8:	e0f6      	b.n	80029d8 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ee:	4a83      	ldr	r2, [pc, #524]	; (80029fc <HAL_ADC_Init+0x274>)
 80027f0:	4013      	ands	r3, r2
 80027f2:	2202      	movs	r2, #2
 80027f4:	431a      	orrs	r2, r3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	2203      	movs	r2, #3
 8002802:	4013      	ands	r3, r2
 8002804:	2b01      	cmp	r3, #1
 8002806:	d112      	bne.n	800282e <HAL_ADC_Init+0xa6>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2201      	movs	r2, #1
 8002810:	4013      	ands	r3, r2
 8002812:	2b01      	cmp	r3, #1
 8002814:	d009      	beq.n	800282a <HAL_ADC_Init+0xa2>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	68da      	ldr	r2, [r3, #12]
 800281c:	2380      	movs	r3, #128	; 0x80
 800281e:	021b      	lsls	r3, r3, #8
 8002820:	401a      	ands	r2, r3
 8002822:	2380      	movs	r3, #128	; 0x80
 8002824:	021b      	lsls	r3, r3, #8
 8002826:	429a      	cmp	r2, r3
 8002828:	d101      	bne.n	800282e <HAL_ADC_Init+0xa6>
 800282a:	2301      	movs	r3, #1
 800282c:	e000      	b.n	8002830 <HAL_ADC_Init+0xa8>
 800282e:	2300      	movs	r3, #0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d116      	bne.n	8002862 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	2218      	movs	r2, #24
 800283c:	4393      	bics	r3, r2
 800283e:	0019      	movs	r1, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	689a      	ldr	r2, [r3, #8]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	430a      	orrs	r2, r1
 800284a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	691b      	ldr	r3, [r3, #16]
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	0899      	lsrs	r1, r3, #2
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685a      	ldr	r2, [r3, #4]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	430a      	orrs	r2, r1
 8002860:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	68da      	ldr	r2, [r3, #12]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4964      	ldr	r1, [pc, #400]	; (8002a00 <HAL_ADC_Init+0x278>)
 800286e:	400a      	ands	r2, r1
 8002870:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	7e1b      	ldrb	r3, [r3, #24]
 8002876:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	7e5b      	ldrb	r3, [r3, #25]
 800287c:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800287e:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	7e9b      	ldrb	r3, [r3, #26]
 8002884:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002886:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800288c:	2b01      	cmp	r3, #1
 800288e:	d002      	beq.n	8002896 <HAL_ADC_Init+0x10e>
 8002890:	2380      	movs	r3, #128	; 0x80
 8002892:	015b      	lsls	r3, r3, #5
 8002894:	e000      	b.n	8002898 <HAL_ADC_Init+0x110>
 8002896:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002898:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800289e:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	691b      	ldr	r3, [r3, #16]
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d101      	bne.n	80028ac <HAL_ADC_Init+0x124>
 80028a8:	2304      	movs	r3, #4
 80028aa:	e000      	b.n	80028ae <HAL_ADC_Init+0x126>
 80028ac:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80028ae:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2124      	movs	r1, #36	; 0x24
 80028b4:	5c5b      	ldrb	r3, [r3, r1]
 80028b6:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80028b8:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80028ba:	68ba      	ldr	r2, [r7, #8]
 80028bc:	4313      	orrs	r3, r2
 80028be:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	7edb      	ldrb	r3, [r3, #27]
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d115      	bne.n	80028f4 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	7e9b      	ldrb	r3, [r3, #26]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d105      	bne.n	80028dc <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	2280      	movs	r2, #128	; 0x80
 80028d4:	0252      	lsls	r2, r2, #9
 80028d6:	4313      	orrs	r3, r2
 80028d8:	60bb      	str	r3, [r7, #8]
 80028da:	e00b      	b.n	80028f4 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028e0:	2220      	movs	r2, #32
 80028e2:	431a      	orrs	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ec:	2201      	movs	r2, #1
 80028ee:	431a      	orrs	r2, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	69da      	ldr	r2, [r3, #28]
 80028f8:	23c2      	movs	r3, #194	; 0xc2
 80028fa:	33ff      	adds	r3, #255	; 0xff
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d007      	beq.n	8002910 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002908:	4313      	orrs	r3, r2
 800290a:	68ba      	ldr	r2, [r7, #8]
 800290c:	4313      	orrs	r3, r2
 800290e:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	68d9      	ldr	r1, [r3, #12]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	68ba      	ldr	r2, [r7, #8]
 800291c:	430a      	orrs	r2, r1
 800291e:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002924:	2380      	movs	r3, #128	; 0x80
 8002926:	055b      	lsls	r3, r3, #21
 8002928:	429a      	cmp	r2, r3
 800292a:	d01b      	beq.n	8002964 <HAL_ADC_Init+0x1dc>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002930:	2b01      	cmp	r3, #1
 8002932:	d017      	beq.n	8002964 <HAL_ADC_Init+0x1dc>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002938:	2b02      	cmp	r3, #2
 800293a:	d013      	beq.n	8002964 <HAL_ADC_Init+0x1dc>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002940:	2b03      	cmp	r3, #3
 8002942:	d00f      	beq.n	8002964 <HAL_ADC_Init+0x1dc>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002948:	2b04      	cmp	r3, #4
 800294a:	d00b      	beq.n	8002964 <HAL_ADC_Init+0x1dc>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002950:	2b05      	cmp	r3, #5
 8002952:	d007      	beq.n	8002964 <HAL_ADC_Init+0x1dc>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002958:	2b06      	cmp	r3, #6
 800295a:	d003      	beq.n	8002964 <HAL_ADC_Init+0x1dc>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002960:	2b07      	cmp	r3, #7
 8002962:	d112      	bne.n	800298a <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	695a      	ldr	r2, [r3, #20]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2107      	movs	r1, #7
 8002970:	438a      	bics	r2, r1
 8002972:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	6959      	ldr	r1, [r3, #20]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800297e:	2207      	movs	r2, #7
 8002980:	401a      	ands	r2, r3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	430a      	orrs	r2, r1
 8002988:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	4a1c      	ldr	r2, [pc, #112]	; (8002a04 <HAL_ADC_Init+0x27c>)
 8002992:	4013      	ands	r3, r2
 8002994:	68ba      	ldr	r2, [r7, #8]
 8002996:	429a      	cmp	r2, r3
 8002998:	d10b      	bne.n	80029b2 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029a4:	2203      	movs	r2, #3
 80029a6:	4393      	bics	r3, r2
 80029a8:	2201      	movs	r2, #1
 80029aa:	431a      	orrs	r2, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80029b0:	e01c      	b.n	80029ec <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029b6:	2212      	movs	r2, #18
 80029b8:	4393      	bics	r3, r2
 80029ba:	2210      	movs	r2, #16
 80029bc:	431a      	orrs	r2, r3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029c6:	2201      	movs	r2, #1
 80029c8:	431a      	orrs	r2, r3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80029ce:	230f      	movs	r3, #15
 80029d0:	18fb      	adds	r3, r7, r3
 80029d2:	2201      	movs	r2, #1
 80029d4:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80029d6:	e009      	b.n	80029ec <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029dc:	2210      	movs	r2, #16
 80029de:	431a      	orrs	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 80029e4:	230f      	movs	r3, #15
 80029e6:	18fb      	adds	r3, r7, r3
 80029e8:	2201      	movs	r2, #1
 80029ea:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80029ec:	230f      	movs	r3, #15
 80029ee:	18fb      	adds	r3, r7, r3
 80029f0:	781b      	ldrb	r3, [r3, #0]
}
 80029f2:	0018      	movs	r0, r3
 80029f4:	46bd      	mov	sp, r7
 80029f6:	b004      	add	sp, #16
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	46c0      	nop			; (mov r8, r8)
 80029fc:	fffffefd 	.word	0xfffffefd
 8002a00:	fffe0219 	.word	0xfffe0219
 8002a04:	833fffe7 	.word	0x833fffe7

08002a08 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002a08:	b590      	push	{r4, r7, lr}
 8002a0a:	b085      	sub	sp, #20
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a10:	230f      	movs	r3, #15
 8002a12:	18fb      	adds	r3, r7, r3
 8002a14:	2200      	movs	r2, #0
 8002a16:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	2204      	movs	r2, #4
 8002a20:	4013      	ands	r3, r2
 8002a22:	d138      	bne.n	8002a96 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2234      	movs	r2, #52	; 0x34
 8002a28:	5c9b      	ldrb	r3, [r3, r2]
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d101      	bne.n	8002a32 <HAL_ADC_Start+0x2a>
 8002a2e:	2302      	movs	r3, #2
 8002a30:	e038      	b.n	8002aa4 <HAL_ADC_Start+0x9c>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2234      	movs	r2, #52	; 0x34
 8002a36:	2101      	movs	r1, #1
 8002a38:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	7e5b      	ldrb	r3, [r3, #25]
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d007      	beq.n	8002a52 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8002a42:	230f      	movs	r3, #15
 8002a44:	18fc      	adds	r4, r7, r3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	0018      	movs	r0, r3
 8002a4a:	f000 fa0b 	bl	8002e64 <ADC_Enable>
 8002a4e:	0003      	movs	r3, r0
 8002a50:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002a52:	230f      	movs	r3, #15
 8002a54:	18fb      	adds	r3, r7, r3
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d120      	bne.n	8002a9e <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a60:	4a12      	ldr	r2, [pc, #72]	; (8002aac <HAL_ADC_Start+0xa4>)
 8002a62:	4013      	ands	r3, r2
 8002a64:	2280      	movs	r2, #128	; 0x80
 8002a66:	0052      	lsls	r2, r2, #1
 8002a68:	431a      	orrs	r2, r3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2234      	movs	r2, #52	; 0x34
 8002a78:	2100      	movs	r1, #0
 8002a7a:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	221c      	movs	r2, #28
 8002a82:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	689a      	ldr	r2, [r3, #8]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	2104      	movs	r1, #4
 8002a90:	430a      	orrs	r2, r1
 8002a92:	609a      	str	r2, [r3, #8]
 8002a94:	e003      	b.n	8002a9e <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002a96:	230f      	movs	r3, #15
 8002a98:	18fb      	adds	r3, r7, r3
 8002a9a:	2202      	movs	r2, #2
 8002a9c:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002a9e:	230f      	movs	r3, #15
 8002aa0:	18fb      	adds	r3, r7, r3
 8002aa2:	781b      	ldrb	r3, [r3, #0]
}
 8002aa4:	0018      	movs	r0, r3
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	b005      	add	sp, #20
 8002aaa:	bd90      	pop	{r4, r7, pc}
 8002aac:	fffff0fe 	.word	0xfffff0fe

08002ab0 <HAL_ADC_Stop>:
  * @brief  Stop ADC conversion of regular group, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{ 
 8002ab0:	b5b0      	push	{r4, r5, r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ab8:	230f      	movs	r3, #15
 8002aba:	18fb      	adds	r3, r7, r3
 8002abc:	2200      	movs	r2, #0
 8002abe:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2234      	movs	r2, #52	; 0x34
 8002ac4:	5c9b      	ldrb	r3, [r3, r2]
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d101      	bne.n	8002ace <HAL_ADC_Stop+0x1e>
 8002aca:	2302      	movs	r3, #2
 8002acc:	e029      	b.n	8002b22 <HAL_ADC_Stop+0x72>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2234      	movs	r2, #52	; 0x34
 8002ad2:	2101      	movs	r1, #1
 8002ad4:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8002ad6:	250f      	movs	r5, #15
 8002ad8:	197c      	adds	r4, r7, r5
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	0018      	movs	r0, r3
 8002ade:	f000 fab6 	bl	800304e <ADC_ConversionStop>
 8002ae2:	0003      	movs	r3, r0
 8002ae4:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002ae6:	197b      	adds	r3, r7, r5
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d112      	bne.n	8002b14 <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002aee:	197c      	adds	r4, r7, r5
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	0018      	movs	r0, r3
 8002af4:	f000 fa3a 	bl	8002f6c <ADC_Disable>
 8002af8:	0003      	movs	r3, r0
 8002afa:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002afc:	197b      	adds	r3, r7, r5
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d107      	bne.n	8002b14 <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b08:	4a08      	ldr	r2, [pc, #32]	; (8002b2c <HAL_ADC_Stop+0x7c>)
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	431a      	orrs	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2234      	movs	r2, #52	; 0x34
 8002b18:	2100      	movs	r1, #0
 8002b1a:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002b1c:	230f      	movs	r3, #15
 8002b1e:	18fb      	adds	r3, r7, r3
 8002b20:	781b      	ldrb	r3, [r3, #0]
}
 8002b22:	0018      	movs	r0, r3
 8002b24:	46bd      	mov	sp, r7
 8002b26:	b004      	add	sp, #16
 8002b28:	bdb0      	pop	{r4, r5, r7, pc}
 8002b2a:	46c0      	nop			; (mov r8, r8)
 8002b2c:	fffffefe 	.word	0xfffffefe

08002b30 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b084      	sub	sp, #16
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	695b      	ldr	r3, [r3, #20]
 8002b3e:	2b08      	cmp	r3, #8
 8002b40:	d102      	bne.n	8002b48 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8002b42:	2308      	movs	r3, #8
 8002b44:	60fb      	str	r3, [r7, #12]
 8002b46:	e014      	b.n	8002b72 <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	4013      	ands	r3, r2
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d10b      	bne.n	8002b6e <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b5a:	2220      	movs	r2, #32
 8002b5c:	431a      	orrs	r2, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2234      	movs	r2, #52	; 0x34
 8002b66:	2100      	movs	r1, #0
 8002b68:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e071      	b.n	8002c52 <HAL_ADC_PollForConversion+0x122>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8002b6e:	230c      	movs	r3, #12
 8002b70:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002b72:	f7ff fddb 	bl	800272c <HAL_GetTick>
 8002b76:	0003      	movs	r3, r0
 8002b78:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002b7a:	e01f      	b.n	8002bbc <HAL_ADC_PollForConversion+0x8c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	3301      	adds	r3, #1
 8002b80:	d01c      	beq.n	8002bbc <HAL_ADC_PollForConversion+0x8c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d007      	beq.n	8002b98 <HAL_ADC_PollForConversion+0x68>
 8002b88:	f7ff fdd0 	bl	800272c <HAL_GetTick>
 8002b8c:	0002      	movs	r2, r0
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	683a      	ldr	r2, [r7, #0]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d211      	bcs.n	8002bbc <HAL_ADC_PollForConversion+0x8c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	68fa      	ldr	r2, [r7, #12]
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	d10b      	bne.n	8002bbc <HAL_ADC_PollForConversion+0x8c>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba8:	2204      	movs	r2, #4
 8002baa:	431a      	orrs	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	639a      	str	r2, [r3, #56]	; 0x38

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2234      	movs	r2, #52	; 0x34
 8002bb4:	2100      	movs	r1, #0
 8002bb6:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e04a      	b.n	8002c52 <HAL_ADC_PollForConversion+0x122>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	68fa      	ldr	r2, [r7, #12]
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	d0d9      	beq.n	8002b7c <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bcc:	2280      	movs	r2, #128	; 0x80
 8002bce:	0092      	lsls	r2, r2, #2
 8002bd0:	431a      	orrs	r2, r3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	68da      	ldr	r2, [r3, #12]
 8002bdc:	23c0      	movs	r3, #192	; 0xc0
 8002bde:	011b      	lsls	r3, r3, #4
 8002be0:	4013      	ands	r3, r2
 8002be2:	d12d      	bne.n	8002c40 <HAL_ADC_PollForConversion+0x110>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d129      	bne.n	8002c40 <HAL_ADC_PollForConversion+0x110>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2208      	movs	r2, #8
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	2b08      	cmp	r3, #8
 8002bf8:	d122      	bne.n	8002c40 <HAL_ADC_PollForConversion+0x110>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	2204      	movs	r2, #4
 8002c02:	4013      	ands	r3, r2
 8002c04:	d110      	bne.n	8002c28 <HAL_ADC_PollForConversion+0xf8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	685a      	ldr	r2, [r3, #4]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	210c      	movs	r1, #12
 8002c12:	438a      	bics	r2, r1
 8002c14:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c1a:	4a10      	ldr	r2, [pc, #64]	; (8002c5c <HAL_ADC_PollForConversion+0x12c>)
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	2201      	movs	r2, #1
 8002c20:	431a      	orrs	r2, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	639a      	str	r2, [r3, #56]	; 0x38
 8002c26:	e00b      	b.n	8002c40 <HAL_ADC_PollForConversion+0x110>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c2c:	2220      	movs	r2, #32
 8002c2e:	431a      	orrs	r2, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c38:	2201      	movs	r2, #1
 8002c3a:	431a      	orrs	r2, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	7e1b      	ldrb	r3, [r3, #24]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d103      	bne.n	8002c50 <HAL_ADC_PollForConversion+0x120>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	220c      	movs	r2, #12
 8002c4e:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	0018      	movs	r0, r3
 8002c54:	46bd      	mov	sp, r7
 8002c56:	b004      	add	sp, #16
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	46c0      	nop			; (mov r8, r8)
 8002c5c:	fffffefe 	.word	0xfffffefe

08002c60 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002c6e:	0018      	movs	r0, r3
 8002c70:	46bd      	mov	sp, r7
 8002c72:	b002      	add	sp, #8
 8002c74:	bd80      	pop	{r7, pc}
	...

08002c78 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c82:	230f      	movs	r3, #15
 8002c84:	18fb      	adds	r3, r7, r3
 8002c86:	2200      	movs	r2, #0
 8002c88:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c92:	2380      	movs	r3, #128	; 0x80
 8002c94:	055b      	lsls	r3, r3, #21
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d011      	beq.n	8002cbe <HAL_ADC_ConfigChannel+0x46>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d00d      	beq.n	8002cbe <HAL_ADC_ConfigChannel+0x46>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d009      	beq.n	8002cbe <HAL_ADC_ConfigChannel+0x46>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cae:	2b03      	cmp	r3, #3
 8002cb0:	d005      	beq.n	8002cbe <HAL_ADC_ConfigChannel+0x46>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb6:	2b04      	cmp	r3, #4
 8002cb8:	d001      	beq.n	8002cbe <HAL_ADC_ConfigChannel+0x46>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2234      	movs	r2, #52	; 0x34
 8002cc2:	5c9b      	ldrb	r3, [r3, r2]
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d101      	bne.n	8002ccc <HAL_ADC_ConfigChannel+0x54>
 8002cc8:	2302      	movs	r3, #2
 8002cca:	e0bb      	b.n	8002e44 <HAL_ADC_ConfigChannel+0x1cc>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2234      	movs	r2, #52	; 0x34
 8002cd0:	2101      	movs	r1, #1
 8002cd2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	2204      	movs	r2, #4
 8002cdc:	4013      	ands	r3, r2
 8002cde:	d000      	beq.n	8002ce2 <HAL_ADC_ConfigChannel+0x6a>
 8002ce0:	e09f      	b.n	8002e22 <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	4a59      	ldr	r2, [pc, #356]	; (8002e4c <HAL_ADC_ConfigChannel+0x1d4>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d100      	bne.n	8002cee <HAL_ADC_ConfigChannel+0x76>
 8002cec:	e077      	b.n	8002dde <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	409a      	lsls	r2, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	430a      	orrs	r2, r1
 8002d02:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d08:	2380      	movs	r3, #128	; 0x80
 8002d0a:	055b      	lsls	r3, r3, #21
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d037      	beq.n	8002d80 <HAL_ADC_ConfigChannel+0x108>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d033      	beq.n	8002d80 <HAL_ADC_ConfigChannel+0x108>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d02f      	beq.n	8002d80 <HAL_ADC_ConfigChannel+0x108>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d24:	2b03      	cmp	r3, #3
 8002d26:	d02b      	beq.n	8002d80 <HAL_ADC_ConfigChannel+0x108>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d2c:	2b04      	cmp	r3, #4
 8002d2e:	d027      	beq.n	8002d80 <HAL_ADC_ConfigChannel+0x108>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d34:	2b05      	cmp	r3, #5
 8002d36:	d023      	beq.n	8002d80 <HAL_ADC_ConfigChannel+0x108>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d3c:	2b06      	cmp	r3, #6
 8002d3e:	d01f      	beq.n	8002d80 <HAL_ADC_ConfigChannel+0x108>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d44:	2b07      	cmp	r3, #7
 8002d46:	d01b      	beq.n	8002d80 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	689a      	ldr	r2, [r3, #8]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	695b      	ldr	r3, [r3, #20]
 8002d52:	2107      	movs	r1, #7
 8002d54:	400b      	ands	r3, r1
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d012      	beq.n	8002d80 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	695a      	ldr	r2, [r3, #20]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2107      	movs	r1, #7
 8002d66:	438a      	bics	r2, r1
 8002d68:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	6959      	ldr	r1, [r3, #20]
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	2207      	movs	r2, #7
 8002d76:	401a      	ands	r2, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	430a      	orrs	r2, r1
 8002d7e:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2b10      	cmp	r3, #16
 8002d86:	d003      	beq.n	8002d90 <HAL_ADC_ConfigChannel+0x118>
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2b11      	cmp	r3, #17
 8002d8e:	d152      	bne.n	8002e36 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002d90:	4b2f      	ldr	r3, [pc, #188]	; (8002e50 <HAL_ADC_ConfigChannel+0x1d8>)
 8002d92:	6819      	ldr	r1, [r3, #0]
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2b10      	cmp	r3, #16
 8002d9a:	d102      	bne.n	8002da2 <HAL_ADC_ConfigChannel+0x12a>
 8002d9c:	2380      	movs	r3, #128	; 0x80
 8002d9e:	041b      	lsls	r3, r3, #16
 8002da0:	e001      	b.n	8002da6 <HAL_ADC_ConfigChannel+0x12e>
 8002da2:	2380      	movs	r3, #128	; 0x80
 8002da4:	03db      	lsls	r3, r3, #15
 8002da6:	4a2a      	ldr	r2, [pc, #168]	; (8002e50 <HAL_ADC_ConfigChannel+0x1d8>)
 8002da8:	430b      	orrs	r3, r1
 8002daa:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2b10      	cmp	r3, #16
 8002db2:	d140      	bne.n	8002e36 <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002db4:	4b27      	ldr	r3, [pc, #156]	; (8002e54 <HAL_ADC_ConfigChannel+0x1dc>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4927      	ldr	r1, [pc, #156]	; (8002e58 <HAL_ADC_ConfigChannel+0x1e0>)
 8002dba:	0018      	movs	r0, r3
 8002dbc:	f7fd f9ae 	bl	800011c <__udivsi3>
 8002dc0:	0003      	movs	r3, r0
 8002dc2:	001a      	movs	r2, r3
 8002dc4:	0013      	movs	r3, r2
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	189b      	adds	r3, r3, r2
 8002dca:	005b      	lsls	r3, r3, #1
 8002dcc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002dce:	e002      	b.n	8002dd6 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	3b01      	subs	r3, #1
 8002dd4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d1f9      	bne.n	8002dd0 <HAL_ADC_ConfigChannel+0x158>
 8002ddc:	e02b      	b.n	8002e36 <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2101      	movs	r1, #1
 8002dea:	4099      	lsls	r1, r3
 8002dec:	000b      	movs	r3, r1
 8002dee:	43d9      	mvns	r1, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	400a      	ands	r2, r1
 8002df6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2b10      	cmp	r3, #16
 8002dfe:	d003      	beq.n	8002e08 <HAL_ADC_ConfigChannel+0x190>
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2b11      	cmp	r3, #17
 8002e06:	d116      	bne.n	8002e36 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002e08:	4b11      	ldr	r3, [pc, #68]	; (8002e50 <HAL_ADC_ConfigChannel+0x1d8>)
 8002e0a:	6819      	ldr	r1, [r3, #0]
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2b10      	cmp	r3, #16
 8002e12:	d101      	bne.n	8002e18 <HAL_ADC_ConfigChannel+0x1a0>
 8002e14:	4a11      	ldr	r2, [pc, #68]	; (8002e5c <HAL_ADC_ConfigChannel+0x1e4>)
 8002e16:	e000      	b.n	8002e1a <HAL_ADC_ConfigChannel+0x1a2>
 8002e18:	4a11      	ldr	r2, [pc, #68]	; (8002e60 <HAL_ADC_ConfigChannel+0x1e8>)
 8002e1a:	4b0d      	ldr	r3, [pc, #52]	; (8002e50 <HAL_ADC_ConfigChannel+0x1d8>)
 8002e1c:	400a      	ands	r2, r1
 8002e1e:	601a      	str	r2, [r3, #0]
 8002e20:	e009      	b.n	8002e36 <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e26:	2220      	movs	r2, #32
 8002e28:	431a      	orrs	r2, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8002e2e:	230f      	movs	r3, #15
 8002e30:	18fb      	adds	r3, r7, r3
 8002e32:	2201      	movs	r2, #1
 8002e34:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2234      	movs	r2, #52	; 0x34
 8002e3a:	2100      	movs	r1, #0
 8002e3c:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002e3e:	230f      	movs	r3, #15
 8002e40:	18fb      	adds	r3, r7, r3
 8002e42:	781b      	ldrb	r3, [r3, #0]
}
 8002e44:	0018      	movs	r0, r3
 8002e46:	46bd      	mov	sp, r7
 8002e48:	b004      	add	sp, #16
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	00001001 	.word	0x00001001
 8002e50:	40012708 	.word	0x40012708
 8002e54:	20000004 	.word	0x20000004
 8002e58:	000f4240 	.word	0x000f4240
 8002e5c:	ff7fffff 	.word	0xff7fffff
 8002e60:	ffbfffff 	.word	0xffbfffff

08002e64 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002e70:	2300      	movs	r3, #0
 8002e72:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	2203      	movs	r2, #3
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d112      	bne.n	8002ea8 <ADC_Enable+0x44>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2201      	movs	r2, #1
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d009      	beq.n	8002ea4 <ADC_Enable+0x40>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	68da      	ldr	r2, [r3, #12]
 8002e96:	2380      	movs	r3, #128	; 0x80
 8002e98:	021b      	lsls	r3, r3, #8
 8002e9a:	401a      	ands	r2, r3
 8002e9c:	2380      	movs	r3, #128	; 0x80
 8002e9e:	021b      	lsls	r3, r3, #8
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d101      	bne.n	8002ea8 <ADC_Enable+0x44>
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e000      	b.n	8002eaa <ADC_Enable+0x46>
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d152      	bne.n	8002f54 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	4a2a      	ldr	r2, [pc, #168]	; (8002f60 <ADC_Enable+0xfc>)
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	d00d      	beq.n	8002ed6 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ebe:	2210      	movs	r2, #16
 8002ec0:	431a      	orrs	r2, r3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eca:	2201      	movs	r2, #1
 8002ecc:	431a      	orrs	r2, r3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e03f      	b.n	8002f56 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	689a      	ldr	r2, [r3, #8]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2101      	movs	r1, #1
 8002ee2:	430a      	orrs	r2, r1
 8002ee4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002ee6:	4b1f      	ldr	r3, [pc, #124]	; (8002f64 <ADC_Enable+0x100>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	491f      	ldr	r1, [pc, #124]	; (8002f68 <ADC_Enable+0x104>)
 8002eec:	0018      	movs	r0, r3
 8002eee:	f7fd f915 	bl	800011c <__udivsi3>
 8002ef2:	0003      	movs	r3, r0
 8002ef4:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002ef6:	e002      	b.n	8002efe <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	3b01      	subs	r3, #1
 8002efc:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d1f9      	bne.n	8002ef8 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8002f04:	f7ff fc12 	bl	800272c <HAL_GetTick>
 8002f08:	0003      	movs	r3, r0
 8002f0a:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002f0c:	e01b      	b.n	8002f46 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002f0e:	f7ff fc0d 	bl	800272c <HAL_GetTick>
 8002f12:	0002      	movs	r2, r0
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d914      	bls.n	8002f46 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	2201      	movs	r2, #1
 8002f24:	4013      	ands	r3, r2
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d00d      	beq.n	8002f46 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f2e:	2210      	movs	r2, #16
 8002f30:	431a      	orrs	r2, r3
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	431a      	orrs	r2, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e007      	b.n	8002f56 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	4013      	ands	r3, r2
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d1dc      	bne.n	8002f0e <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	0018      	movs	r0, r3
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	b004      	add	sp, #16
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	46c0      	nop			; (mov r8, r8)
 8002f60:	80000017 	.word	0x80000017
 8002f64:	20000004 	.word	0x20000004
 8002f68:	000f4240 	.word	0x000f4240

08002f6c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f74:	2300      	movs	r3, #0
 8002f76:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	2203      	movs	r2, #3
 8002f80:	4013      	ands	r3, r2
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d112      	bne.n	8002fac <ADC_Disable+0x40>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	4013      	ands	r3, r2
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d009      	beq.n	8002fa8 <ADC_Disable+0x3c>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68da      	ldr	r2, [r3, #12]
 8002f9a:	2380      	movs	r3, #128	; 0x80
 8002f9c:	021b      	lsls	r3, r3, #8
 8002f9e:	401a      	ands	r2, r3
 8002fa0:	2380      	movs	r3, #128	; 0x80
 8002fa2:	021b      	lsls	r3, r3, #8
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d101      	bne.n	8002fac <ADC_Disable+0x40>
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e000      	b.n	8002fae <ADC_Disable+0x42>
 8002fac:	2300      	movs	r3, #0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d048      	beq.n	8003044 <ADC_Disable+0xd8>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	2205      	movs	r2, #5
 8002fba:	4013      	ands	r3, r2
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d110      	bne.n	8002fe2 <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	689a      	ldr	r2, [r3, #8]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2102      	movs	r1, #2
 8002fcc:	430a      	orrs	r2, r1
 8002fce:	609a      	str	r2, [r3, #8]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2203      	movs	r2, #3
 8002fd6:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002fd8:	f7ff fba8 	bl	800272c <HAL_GetTick>
 8002fdc:	0003      	movs	r3, r0
 8002fde:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002fe0:	e029      	b.n	8003036 <ADC_Disable+0xca>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe6:	2210      	movs	r2, #16
 8002fe8:	431a      	orrs	r2, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	639a      	str	r2, [r3, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	431a      	orrs	r2, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	63da      	str	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e023      	b.n	8003046 <ADC_Disable+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002ffe:	f7ff fb95 	bl	800272c <HAL_GetTick>
 8003002:	0002      	movs	r2, r0
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	2b02      	cmp	r3, #2
 800300a:	d914      	bls.n	8003036 <ADC_Disable+0xca>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	2201      	movs	r2, #1
 8003014:	4013      	ands	r3, r2
 8003016:	2b01      	cmp	r3, #1
 8003018:	d10d      	bne.n	8003036 <ADC_Disable+0xca>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800301e:	2210      	movs	r2, #16
 8003020:	431a      	orrs	r2, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800302a:	2201      	movs	r2, #1
 800302c:	431a      	orrs	r2, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e007      	b.n	8003046 <ADC_Disable+0xda>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	2201      	movs	r2, #1
 800303e:	4013      	ands	r3, r2
 8003040:	2b01      	cmp	r3, #1
 8003042:	d0dc      	beq.n	8002ffe <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003044:	2300      	movs	r3, #0
}
 8003046:	0018      	movs	r0, r3
 8003048:	46bd      	mov	sp, r7
 800304a:	b004      	add	sp, #16
 800304c:	bd80      	pop	{r7, pc}

0800304e <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 800304e:	b580      	push	{r7, lr}
 8003050:	b084      	sub	sp, #16
 8003052:	af00      	add	r7, sp, #0
 8003054:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003056:	2300      	movs	r3, #0
 8003058:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	2204      	movs	r2, #4
 8003062:	4013      	ands	r3, r2
 8003064:	d03a      	beq.n	80030dc <ADC_ConversionStop+0x8e>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	2204      	movs	r2, #4
 800306e:	4013      	ands	r3, r2
 8003070:	2b04      	cmp	r3, #4
 8003072:	d10d      	bne.n	8003090 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	2202      	movs	r2, #2
 800307c:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800307e:	d107      	bne.n	8003090 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	689a      	ldr	r2, [r3, #8]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2110      	movs	r1, #16
 800308c:	430a      	orrs	r2, r1
 800308e:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003090:	f7ff fb4c 	bl	800272c <HAL_GetTick>
 8003094:	0003      	movs	r3, r0
 8003096:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8003098:	e01a      	b.n	80030d0 <ADC_ConversionStop+0x82>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800309a:	f7ff fb47 	bl	800272c <HAL_GetTick>
 800309e:	0002      	movs	r2, r0
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	d913      	bls.n	80030d0 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	2204      	movs	r2, #4
 80030b0:	4013      	ands	r3, r2
 80030b2:	d00d      	beq.n	80030d0 <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b8:	2210      	movs	r2, #16
 80030ba:	431a      	orrs	r2, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030c4:	2201      	movs	r2, #1
 80030c6:	431a      	orrs	r2, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e006      	b.n	80030de <ADC_ConversionStop+0x90>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	2204      	movs	r2, #4
 80030d8:	4013      	ands	r3, r2
 80030da:	d1de      	bne.n	800309a <ADC_ConversionStop+0x4c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80030dc:	2300      	movs	r3, #0
}
 80030de:	0018      	movs	r0, r3
 80030e0:	46bd      	mov	sp, r7
 80030e2:	b004      	add	sp, #16
 80030e4:	bd80      	pop	{r7, pc}
	...

080030e8 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b086      	sub	sp, #24
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030f0:	2317      	movs	r3, #23
 80030f2:	18fb      	adds	r3, r7, r3
 80030f4:	2200      	movs	r2, #0
 80030f6:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 80030f8:	2300      	movs	r3, #0
 80030fa:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 80030fc:	2300      	movs	r3, #0
 80030fe:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2234      	movs	r2, #52	; 0x34
 8003104:	5c9b      	ldrb	r3, [r3, r2]
 8003106:	2b01      	cmp	r3, #1
 8003108:	d101      	bne.n	800310e <HAL_ADCEx_Calibration_Start+0x26>
 800310a:	2302      	movs	r3, #2
 800310c:	e08d      	b.n	800322a <HAL_ADCEx_Calibration_Start+0x142>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2234      	movs	r2, #52	; 0x34
 8003112:	2101      	movs	r1, #1
 8003114:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	2203      	movs	r2, #3
 800311e:	4013      	ands	r3, r2
 8003120:	2b01      	cmp	r3, #1
 8003122:	d112      	bne.n	800314a <HAL_ADCEx_Calibration_Start+0x62>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2201      	movs	r2, #1
 800312c:	4013      	ands	r3, r2
 800312e:	2b01      	cmp	r3, #1
 8003130:	d009      	beq.n	8003146 <HAL_ADCEx_Calibration_Start+0x5e>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	68da      	ldr	r2, [r3, #12]
 8003138:	2380      	movs	r3, #128	; 0x80
 800313a:	021b      	lsls	r3, r3, #8
 800313c:	401a      	ands	r2, r3
 800313e:	2380      	movs	r3, #128	; 0x80
 8003140:	021b      	lsls	r3, r3, #8
 8003142:	429a      	cmp	r2, r3
 8003144:	d101      	bne.n	800314a <HAL_ADCEx_Calibration_Start+0x62>
 8003146:	2301      	movs	r3, #1
 8003148:	e000      	b.n	800314c <HAL_ADCEx_Calibration_Start+0x64>
 800314a:	2300      	movs	r3, #0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d15b      	bne.n	8003208 <HAL_ADCEx_Calibration_Start+0x120>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003154:	4a37      	ldr	r2, [pc, #220]	; (8003234 <HAL_ADCEx_Calibration_Start+0x14c>)
 8003156:	4013      	ands	r3, r2
 8003158:	2202      	movs	r2, #2
 800315a:	431a      	orrs	r2, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	639a      	str	r2, [r3, #56]	; 0x38
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	2203      	movs	r2, #3
 8003168:	4013      	ands	r3, r2
 800316a:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	68da      	ldr	r2, [r3, #12]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2103      	movs	r1, #3
 8003178:	438a      	bics	r2, r1
 800317a:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	689a      	ldr	r2, [r3, #8]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	2180      	movs	r1, #128	; 0x80
 8003188:	0609      	lsls	r1, r1, #24
 800318a:	430a      	orrs	r2, r1
 800318c:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 800318e:	f7ff facd 	bl	800272c <HAL_GetTick>
 8003192:	0003      	movs	r3, r0
 8003194:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003196:	e01d      	b.n	80031d4 <HAL_ADCEx_Calibration_Start+0xec>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003198:	f7ff fac8 	bl	800272c <HAL_GetTick>
 800319c:	0002      	movs	r2, r0
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d916      	bls.n	80031d4 <HAL_ADCEx_Calibration_Start+0xec>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	0fdb      	lsrs	r3, r3, #31
 80031ae:	07da      	lsls	r2, r3, #31
 80031b0:	2380      	movs	r3, #128	; 0x80
 80031b2:	061b      	lsls	r3, r3, #24
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d10d      	bne.n	80031d4 <HAL_ADCEx_Calibration_Start+0xec>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031bc:	2212      	movs	r2, #18
 80031be:	4393      	bics	r3, r2
 80031c0:	2210      	movs	r2, #16
 80031c2:	431a      	orrs	r2, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	639a      	str	r2, [r3, #56]	; 0x38
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2234      	movs	r2, #52	; 0x34
 80031cc:	2100      	movs	r1, #0
 80031ce:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e02a      	b.n	800322a <HAL_ADCEx_Calibration_Start+0x142>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	0fdb      	lsrs	r3, r3, #31
 80031dc:	07da      	lsls	r2, r3, #31
 80031de:	2380      	movs	r3, #128	; 0x80
 80031e0:	061b      	lsls	r3, r3, #24
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d0d8      	beq.n	8003198 <HAL_ADCEx_Calibration_Start+0xb0>
        }
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	68d9      	ldr	r1, [r3, #12]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	68fa      	ldr	r2, [r7, #12]
 80031f2:	430a      	orrs	r2, r1
 80031f4:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031fa:	2203      	movs	r2, #3
 80031fc:	4393      	bics	r3, r2
 80031fe:	2201      	movs	r2, #1
 8003200:	431a      	orrs	r2, r3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	639a      	str	r2, [r3, #56]	; 0x38
 8003206:	e009      	b.n	800321c <HAL_ADCEx_Calibration_Start+0x134>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800320c:	2220      	movs	r2, #32
 800320e:	431a      	orrs	r2, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8003214:	2317      	movs	r3, #23
 8003216:	18fb      	adds	r3, r7, r3
 8003218:	2201      	movs	r2, #1
 800321a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2234      	movs	r2, #52	; 0x34
 8003220:	2100      	movs	r1, #0
 8003222:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003224:	2317      	movs	r3, #23
 8003226:	18fb      	adds	r3, r7, r3
 8003228:	781b      	ldrb	r3, [r3, #0]
}
 800322a:	0018      	movs	r0, r3
 800322c:	46bd      	mov	sp, r7
 800322e:	b006      	add	sp, #24
 8003230:	bd80      	pop	{r7, pc}
 8003232:	46c0      	nop			; (mov r8, r8)
 8003234:	fffffefd 	.word	0xfffffefd

08003238 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b082      	sub	sp, #8
 800323c:	af00      	add	r7, sp, #0
 800323e:	0002      	movs	r2, r0
 8003240:	1dfb      	adds	r3, r7, #7
 8003242:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003244:	1dfb      	adds	r3, r7, #7
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	2b7f      	cmp	r3, #127	; 0x7f
 800324a:	d809      	bhi.n	8003260 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800324c:	1dfb      	adds	r3, r7, #7
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	001a      	movs	r2, r3
 8003252:	231f      	movs	r3, #31
 8003254:	401a      	ands	r2, r3
 8003256:	4b04      	ldr	r3, [pc, #16]	; (8003268 <__NVIC_EnableIRQ+0x30>)
 8003258:	2101      	movs	r1, #1
 800325a:	4091      	lsls	r1, r2
 800325c:	000a      	movs	r2, r1
 800325e:	601a      	str	r2, [r3, #0]
  }
}
 8003260:	46c0      	nop			; (mov r8, r8)
 8003262:	46bd      	mov	sp, r7
 8003264:	b002      	add	sp, #8
 8003266:	bd80      	pop	{r7, pc}
 8003268:	e000e100 	.word	0xe000e100

0800326c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800326c:	b590      	push	{r4, r7, lr}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	0002      	movs	r2, r0
 8003274:	6039      	str	r1, [r7, #0]
 8003276:	1dfb      	adds	r3, r7, #7
 8003278:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800327a:	1dfb      	adds	r3, r7, #7
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	2b7f      	cmp	r3, #127	; 0x7f
 8003280:	d828      	bhi.n	80032d4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003282:	4a2f      	ldr	r2, [pc, #188]	; (8003340 <__NVIC_SetPriority+0xd4>)
 8003284:	1dfb      	adds	r3, r7, #7
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	b25b      	sxtb	r3, r3
 800328a:	089b      	lsrs	r3, r3, #2
 800328c:	33c0      	adds	r3, #192	; 0xc0
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	589b      	ldr	r3, [r3, r2]
 8003292:	1dfa      	adds	r2, r7, #7
 8003294:	7812      	ldrb	r2, [r2, #0]
 8003296:	0011      	movs	r1, r2
 8003298:	2203      	movs	r2, #3
 800329a:	400a      	ands	r2, r1
 800329c:	00d2      	lsls	r2, r2, #3
 800329e:	21ff      	movs	r1, #255	; 0xff
 80032a0:	4091      	lsls	r1, r2
 80032a2:	000a      	movs	r2, r1
 80032a4:	43d2      	mvns	r2, r2
 80032a6:	401a      	ands	r2, r3
 80032a8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	019b      	lsls	r3, r3, #6
 80032ae:	22ff      	movs	r2, #255	; 0xff
 80032b0:	401a      	ands	r2, r3
 80032b2:	1dfb      	adds	r3, r7, #7
 80032b4:	781b      	ldrb	r3, [r3, #0]
 80032b6:	0018      	movs	r0, r3
 80032b8:	2303      	movs	r3, #3
 80032ba:	4003      	ands	r3, r0
 80032bc:	00db      	lsls	r3, r3, #3
 80032be:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80032c0:	481f      	ldr	r0, [pc, #124]	; (8003340 <__NVIC_SetPriority+0xd4>)
 80032c2:	1dfb      	adds	r3, r7, #7
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	b25b      	sxtb	r3, r3
 80032c8:	089b      	lsrs	r3, r3, #2
 80032ca:	430a      	orrs	r2, r1
 80032cc:	33c0      	adds	r3, #192	; 0xc0
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80032d2:	e031      	b.n	8003338 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80032d4:	4a1b      	ldr	r2, [pc, #108]	; (8003344 <__NVIC_SetPriority+0xd8>)
 80032d6:	1dfb      	adds	r3, r7, #7
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	0019      	movs	r1, r3
 80032dc:	230f      	movs	r3, #15
 80032de:	400b      	ands	r3, r1
 80032e0:	3b08      	subs	r3, #8
 80032e2:	089b      	lsrs	r3, r3, #2
 80032e4:	3306      	adds	r3, #6
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	18d3      	adds	r3, r2, r3
 80032ea:	3304      	adds	r3, #4
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	1dfa      	adds	r2, r7, #7
 80032f0:	7812      	ldrb	r2, [r2, #0]
 80032f2:	0011      	movs	r1, r2
 80032f4:	2203      	movs	r2, #3
 80032f6:	400a      	ands	r2, r1
 80032f8:	00d2      	lsls	r2, r2, #3
 80032fa:	21ff      	movs	r1, #255	; 0xff
 80032fc:	4091      	lsls	r1, r2
 80032fe:	000a      	movs	r2, r1
 8003300:	43d2      	mvns	r2, r2
 8003302:	401a      	ands	r2, r3
 8003304:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	019b      	lsls	r3, r3, #6
 800330a:	22ff      	movs	r2, #255	; 0xff
 800330c:	401a      	ands	r2, r3
 800330e:	1dfb      	adds	r3, r7, #7
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	0018      	movs	r0, r3
 8003314:	2303      	movs	r3, #3
 8003316:	4003      	ands	r3, r0
 8003318:	00db      	lsls	r3, r3, #3
 800331a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800331c:	4809      	ldr	r0, [pc, #36]	; (8003344 <__NVIC_SetPriority+0xd8>)
 800331e:	1dfb      	adds	r3, r7, #7
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	001c      	movs	r4, r3
 8003324:	230f      	movs	r3, #15
 8003326:	4023      	ands	r3, r4
 8003328:	3b08      	subs	r3, #8
 800332a:	089b      	lsrs	r3, r3, #2
 800332c:	430a      	orrs	r2, r1
 800332e:	3306      	adds	r3, #6
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	18c3      	adds	r3, r0, r3
 8003334:	3304      	adds	r3, #4
 8003336:	601a      	str	r2, [r3, #0]
}
 8003338:	46c0      	nop			; (mov r8, r8)
 800333a:	46bd      	mov	sp, r7
 800333c:	b003      	add	sp, #12
 800333e:	bd90      	pop	{r4, r7, pc}
 8003340:	e000e100 	.word	0xe000e100
 8003344:	e000ed00 	.word	0xe000ed00

08003348 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	1e5a      	subs	r2, r3, #1
 8003354:	2380      	movs	r3, #128	; 0x80
 8003356:	045b      	lsls	r3, r3, #17
 8003358:	429a      	cmp	r2, r3
 800335a:	d301      	bcc.n	8003360 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800335c:	2301      	movs	r3, #1
 800335e:	e010      	b.n	8003382 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003360:	4b0a      	ldr	r3, [pc, #40]	; (800338c <SysTick_Config+0x44>)
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	3a01      	subs	r2, #1
 8003366:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003368:	2301      	movs	r3, #1
 800336a:	425b      	negs	r3, r3
 800336c:	2103      	movs	r1, #3
 800336e:	0018      	movs	r0, r3
 8003370:	f7ff ff7c 	bl	800326c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003374:	4b05      	ldr	r3, [pc, #20]	; (800338c <SysTick_Config+0x44>)
 8003376:	2200      	movs	r2, #0
 8003378:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800337a:	4b04      	ldr	r3, [pc, #16]	; (800338c <SysTick_Config+0x44>)
 800337c:	2207      	movs	r2, #7
 800337e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003380:	2300      	movs	r3, #0
}
 8003382:	0018      	movs	r0, r3
 8003384:	46bd      	mov	sp, r7
 8003386:	b002      	add	sp, #8
 8003388:	bd80      	pop	{r7, pc}
 800338a:	46c0      	nop			; (mov r8, r8)
 800338c:	e000e010 	.word	0xe000e010

08003390 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	60b9      	str	r1, [r7, #8]
 8003398:	607a      	str	r2, [r7, #4]
 800339a:	210f      	movs	r1, #15
 800339c:	187b      	adds	r3, r7, r1
 800339e:	1c02      	adds	r2, r0, #0
 80033a0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80033a2:	68ba      	ldr	r2, [r7, #8]
 80033a4:	187b      	adds	r3, r7, r1
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	b25b      	sxtb	r3, r3
 80033aa:	0011      	movs	r1, r2
 80033ac:	0018      	movs	r0, r3
 80033ae:	f7ff ff5d 	bl	800326c <__NVIC_SetPriority>
}
 80033b2:	46c0      	nop			; (mov r8, r8)
 80033b4:	46bd      	mov	sp, r7
 80033b6:	b004      	add	sp, #16
 80033b8:	bd80      	pop	{r7, pc}

080033ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033ba:	b580      	push	{r7, lr}
 80033bc:	b082      	sub	sp, #8
 80033be:	af00      	add	r7, sp, #0
 80033c0:	0002      	movs	r2, r0
 80033c2:	1dfb      	adds	r3, r7, #7
 80033c4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033c6:	1dfb      	adds	r3, r7, #7
 80033c8:	781b      	ldrb	r3, [r3, #0]
 80033ca:	b25b      	sxtb	r3, r3
 80033cc:	0018      	movs	r0, r3
 80033ce:	f7ff ff33 	bl	8003238 <__NVIC_EnableIRQ>
}
 80033d2:	46c0      	nop			; (mov r8, r8)
 80033d4:	46bd      	mov	sp, r7
 80033d6:	b002      	add	sp, #8
 80033d8:	bd80      	pop	{r7, pc}

080033da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033da:	b580      	push	{r7, lr}
 80033dc:	b082      	sub	sp, #8
 80033de:	af00      	add	r7, sp, #0
 80033e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	0018      	movs	r0, r3
 80033e6:	f7ff ffaf 	bl	8003348 <SysTick_Config>
 80033ea:	0003      	movs	r3, r0
}
 80033ec:	0018      	movs	r0, r3
 80033ee:	46bd      	mov	sp, r7
 80033f0:	b002      	add	sp, #8
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b086      	sub	sp, #24
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80033fe:	2300      	movs	r3, #0
 8003400:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003402:	e14f      	b.n	80036a4 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2101      	movs	r1, #1
 800340a:	697a      	ldr	r2, [r7, #20]
 800340c:	4091      	lsls	r1, r2
 800340e:	000a      	movs	r2, r1
 8003410:	4013      	ands	r3, r2
 8003412:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d100      	bne.n	800341c <HAL_GPIO_Init+0x28>
 800341a:	e140      	b.n	800369e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	2203      	movs	r2, #3
 8003422:	4013      	ands	r3, r2
 8003424:	2b01      	cmp	r3, #1
 8003426:	d005      	beq.n	8003434 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	2203      	movs	r2, #3
 800342e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003430:	2b02      	cmp	r3, #2
 8003432:	d130      	bne.n	8003496 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	005b      	lsls	r3, r3, #1
 800343e:	2203      	movs	r2, #3
 8003440:	409a      	lsls	r2, r3
 8003442:	0013      	movs	r3, r2
 8003444:	43da      	mvns	r2, r3
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	4013      	ands	r3, r2
 800344a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	68da      	ldr	r2, [r3, #12]
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	005b      	lsls	r3, r3, #1
 8003454:	409a      	lsls	r2, r3
 8003456:	0013      	movs	r3, r2
 8003458:	693a      	ldr	r2, [r7, #16]
 800345a:	4313      	orrs	r3, r2
 800345c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	693a      	ldr	r2, [r7, #16]
 8003462:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800346a:	2201      	movs	r2, #1
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	409a      	lsls	r2, r3
 8003470:	0013      	movs	r3, r2
 8003472:	43da      	mvns	r2, r3
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	4013      	ands	r3, r2
 8003478:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	091b      	lsrs	r3, r3, #4
 8003480:	2201      	movs	r2, #1
 8003482:	401a      	ands	r2, r3
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	409a      	lsls	r2, r3
 8003488:	0013      	movs	r3, r2
 800348a:	693a      	ldr	r2, [r7, #16]
 800348c:	4313      	orrs	r3, r2
 800348e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	693a      	ldr	r2, [r7, #16]
 8003494:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	2203      	movs	r2, #3
 800349c:	4013      	ands	r3, r2
 800349e:	2b03      	cmp	r3, #3
 80034a0:	d017      	beq.n	80034d2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	005b      	lsls	r3, r3, #1
 80034ac:	2203      	movs	r2, #3
 80034ae:	409a      	lsls	r2, r3
 80034b0:	0013      	movs	r3, r2
 80034b2:	43da      	mvns	r2, r3
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	4013      	ands	r3, r2
 80034b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	689a      	ldr	r2, [r3, #8]
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	005b      	lsls	r3, r3, #1
 80034c2:	409a      	lsls	r2, r3
 80034c4:	0013      	movs	r3, r2
 80034c6:	693a      	ldr	r2, [r7, #16]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	693a      	ldr	r2, [r7, #16]
 80034d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	2203      	movs	r2, #3
 80034d8:	4013      	ands	r3, r2
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d123      	bne.n	8003526 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	08da      	lsrs	r2, r3, #3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	3208      	adds	r2, #8
 80034e6:	0092      	lsls	r2, r2, #2
 80034e8:	58d3      	ldr	r3, [r2, r3]
 80034ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	2207      	movs	r2, #7
 80034f0:	4013      	ands	r3, r2
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	220f      	movs	r2, #15
 80034f6:	409a      	lsls	r2, r3
 80034f8:	0013      	movs	r3, r2
 80034fa:	43da      	mvns	r2, r3
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	4013      	ands	r3, r2
 8003500:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	691a      	ldr	r2, [r3, #16]
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	2107      	movs	r1, #7
 800350a:	400b      	ands	r3, r1
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	409a      	lsls	r2, r3
 8003510:	0013      	movs	r3, r2
 8003512:	693a      	ldr	r2, [r7, #16]
 8003514:	4313      	orrs	r3, r2
 8003516:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	08da      	lsrs	r2, r3, #3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	3208      	adds	r2, #8
 8003520:	0092      	lsls	r2, r2, #2
 8003522:	6939      	ldr	r1, [r7, #16]
 8003524:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	005b      	lsls	r3, r3, #1
 8003530:	2203      	movs	r2, #3
 8003532:	409a      	lsls	r2, r3
 8003534:	0013      	movs	r3, r2
 8003536:	43da      	mvns	r2, r3
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	4013      	ands	r3, r2
 800353c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	2203      	movs	r2, #3
 8003544:	401a      	ands	r2, r3
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	005b      	lsls	r3, r3, #1
 800354a:	409a      	lsls	r2, r3
 800354c:	0013      	movs	r3, r2
 800354e:	693a      	ldr	r2, [r7, #16]
 8003550:	4313      	orrs	r3, r2
 8003552:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	693a      	ldr	r2, [r7, #16]
 8003558:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	685a      	ldr	r2, [r3, #4]
 800355e:	23c0      	movs	r3, #192	; 0xc0
 8003560:	029b      	lsls	r3, r3, #10
 8003562:	4013      	ands	r3, r2
 8003564:	d100      	bne.n	8003568 <HAL_GPIO_Init+0x174>
 8003566:	e09a      	b.n	800369e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003568:	4b54      	ldr	r3, [pc, #336]	; (80036bc <HAL_GPIO_Init+0x2c8>)
 800356a:	699a      	ldr	r2, [r3, #24]
 800356c:	4b53      	ldr	r3, [pc, #332]	; (80036bc <HAL_GPIO_Init+0x2c8>)
 800356e:	2101      	movs	r1, #1
 8003570:	430a      	orrs	r2, r1
 8003572:	619a      	str	r2, [r3, #24]
 8003574:	4b51      	ldr	r3, [pc, #324]	; (80036bc <HAL_GPIO_Init+0x2c8>)
 8003576:	699b      	ldr	r3, [r3, #24]
 8003578:	2201      	movs	r2, #1
 800357a:	4013      	ands	r3, r2
 800357c:	60bb      	str	r3, [r7, #8]
 800357e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003580:	4a4f      	ldr	r2, [pc, #316]	; (80036c0 <HAL_GPIO_Init+0x2cc>)
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	089b      	lsrs	r3, r3, #2
 8003586:	3302      	adds	r3, #2
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	589b      	ldr	r3, [r3, r2]
 800358c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	2203      	movs	r2, #3
 8003592:	4013      	ands	r3, r2
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	220f      	movs	r2, #15
 8003598:	409a      	lsls	r2, r3
 800359a:	0013      	movs	r3, r2
 800359c:	43da      	mvns	r2, r3
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	4013      	ands	r3, r2
 80035a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	2390      	movs	r3, #144	; 0x90
 80035a8:	05db      	lsls	r3, r3, #23
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d013      	beq.n	80035d6 <HAL_GPIO_Init+0x1e2>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a44      	ldr	r2, [pc, #272]	; (80036c4 <HAL_GPIO_Init+0x2d0>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d00d      	beq.n	80035d2 <HAL_GPIO_Init+0x1de>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a43      	ldr	r2, [pc, #268]	; (80036c8 <HAL_GPIO_Init+0x2d4>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d007      	beq.n	80035ce <HAL_GPIO_Init+0x1da>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a42      	ldr	r2, [pc, #264]	; (80036cc <HAL_GPIO_Init+0x2d8>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d101      	bne.n	80035ca <HAL_GPIO_Init+0x1d6>
 80035c6:	2303      	movs	r3, #3
 80035c8:	e006      	b.n	80035d8 <HAL_GPIO_Init+0x1e4>
 80035ca:	2305      	movs	r3, #5
 80035cc:	e004      	b.n	80035d8 <HAL_GPIO_Init+0x1e4>
 80035ce:	2302      	movs	r3, #2
 80035d0:	e002      	b.n	80035d8 <HAL_GPIO_Init+0x1e4>
 80035d2:	2301      	movs	r3, #1
 80035d4:	e000      	b.n	80035d8 <HAL_GPIO_Init+0x1e4>
 80035d6:	2300      	movs	r3, #0
 80035d8:	697a      	ldr	r2, [r7, #20]
 80035da:	2103      	movs	r1, #3
 80035dc:	400a      	ands	r2, r1
 80035de:	0092      	lsls	r2, r2, #2
 80035e0:	4093      	lsls	r3, r2
 80035e2:	693a      	ldr	r2, [r7, #16]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80035e8:	4935      	ldr	r1, [pc, #212]	; (80036c0 <HAL_GPIO_Init+0x2cc>)
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	089b      	lsrs	r3, r3, #2
 80035ee:	3302      	adds	r3, #2
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	693a      	ldr	r2, [r7, #16]
 80035f4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035f6:	4b36      	ldr	r3, [pc, #216]	; (80036d0 <HAL_GPIO_Init+0x2dc>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	43da      	mvns	r2, r3
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	4013      	ands	r3, r2
 8003604:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	685a      	ldr	r2, [r3, #4]
 800360a:	2380      	movs	r3, #128	; 0x80
 800360c:	025b      	lsls	r3, r3, #9
 800360e:	4013      	ands	r3, r2
 8003610:	d003      	beq.n	800361a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8003612:	693a      	ldr	r2, [r7, #16]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	4313      	orrs	r3, r2
 8003618:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800361a:	4b2d      	ldr	r3, [pc, #180]	; (80036d0 <HAL_GPIO_Init+0x2dc>)
 800361c:	693a      	ldr	r2, [r7, #16]
 800361e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003620:	4b2b      	ldr	r3, [pc, #172]	; (80036d0 <HAL_GPIO_Init+0x2dc>)
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	43da      	mvns	r2, r3
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	4013      	ands	r3, r2
 800362e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	685a      	ldr	r2, [r3, #4]
 8003634:	2380      	movs	r3, #128	; 0x80
 8003636:	029b      	lsls	r3, r3, #10
 8003638:	4013      	ands	r3, r2
 800363a:	d003      	beq.n	8003644 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 800363c:	693a      	ldr	r2, [r7, #16]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	4313      	orrs	r3, r2
 8003642:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003644:	4b22      	ldr	r3, [pc, #136]	; (80036d0 <HAL_GPIO_Init+0x2dc>)
 8003646:	693a      	ldr	r2, [r7, #16]
 8003648:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800364a:	4b21      	ldr	r3, [pc, #132]	; (80036d0 <HAL_GPIO_Init+0x2dc>)
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	43da      	mvns	r2, r3
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	4013      	ands	r3, r2
 8003658:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	685a      	ldr	r2, [r3, #4]
 800365e:	2380      	movs	r3, #128	; 0x80
 8003660:	035b      	lsls	r3, r3, #13
 8003662:	4013      	ands	r3, r2
 8003664:	d003      	beq.n	800366e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8003666:	693a      	ldr	r2, [r7, #16]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	4313      	orrs	r3, r2
 800366c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800366e:	4b18      	ldr	r3, [pc, #96]	; (80036d0 <HAL_GPIO_Init+0x2dc>)
 8003670:	693a      	ldr	r2, [r7, #16]
 8003672:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003674:	4b16      	ldr	r3, [pc, #88]	; (80036d0 <HAL_GPIO_Init+0x2dc>)
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	43da      	mvns	r2, r3
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	4013      	ands	r3, r2
 8003682:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	685a      	ldr	r2, [r3, #4]
 8003688:	2380      	movs	r3, #128	; 0x80
 800368a:	039b      	lsls	r3, r3, #14
 800368c:	4013      	ands	r3, r2
 800368e:	d003      	beq.n	8003698 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8003690:	693a      	ldr	r2, [r7, #16]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	4313      	orrs	r3, r2
 8003696:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003698:	4b0d      	ldr	r3, [pc, #52]	; (80036d0 <HAL_GPIO_Init+0x2dc>)
 800369a:	693a      	ldr	r2, [r7, #16]
 800369c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	3301      	adds	r3, #1
 80036a2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	40da      	lsrs	r2, r3
 80036ac:	1e13      	subs	r3, r2, #0
 80036ae:	d000      	beq.n	80036b2 <HAL_GPIO_Init+0x2be>
 80036b0:	e6a8      	b.n	8003404 <HAL_GPIO_Init+0x10>
  } 
}
 80036b2:	46c0      	nop			; (mov r8, r8)
 80036b4:	46c0      	nop			; (mov r8, r8)
 80036b6:	46bd      	mov	sp, r7
 80036b8:	b006      	add	sp, #24
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	40021000 	.word	0x40021000
 80036c0:	40010000 	.word	0x40010000
 80036c4:	48000400 	.word	0x48000400
 80036c8:	48000800 	.word	0x48000800
 80036cc:	48000c00 	.word	0x48000c00
 80036d0:	40010400 	.word	0x40010400

080036d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b082      	sub	sp, #8
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	0008      	movs	r0, r1
 80036de:	0011      	movs	r1, r2
 80036e0:	1cbb      	adds	r3, r7, #2
 80036e2:	1c02      	adds	r2, r0, #0
 80036e4:	801a      	strh	r2, [r3, #0]
 80036e6:	1c7b      	adds	r3, r7, #1
 80036e8:	1c0a      	adds	r2, r1, #0
 80036ea:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80036ec:	1c7b      	adds	r3, r7, #1
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d004      	beq.n	80036fe <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80036f4:	1cbb      	adds	r3, r7, #2
 80036f6:	881a      	ldrh	r2, [r3, #0]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80036fc:	e003      	b.n	8003706 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80036fe:	1cbb      	adds	r3, r7, #2
 8003700:	881a      	ldrh	r2, [r3, #0]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003706:	46c0      	nop			; (mov r8, r8)
 8003708:	46bd      	mov	sp, r7
 800370a:	b002      	add	sp, #8
 800370c:	bd80      	pop	{r7, pc}
	...

08003710 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
 8003716:	0002      	movs	r2, r0
 8003718:	1dbb      	adds	r3, r7, #6
 800371a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800371c:	4b09      	ldr	r3, [pc, #36]	; (8003744 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800371e:	695b      	ldr	r3, [r3, #20]
 8003720:	1dba      	adds	r2, r7, #6
 8003722:	8812      	ldrh	r2, [r2, #0]
 8003724:	4013      	ands	r3, r2
 8003726:	d008      	beq.n	800373a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003728:	4b06      	ldr	r3, [pc, #24]	; (8003744 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800372a:	1dba      	adds	r2, r7, #6
 800372c:	8812      	ldrh	r2, [r2, #0]
 800372e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003730:	1dbb      	adds	r3, r7, #6
 8003732:	881b      	ldrh	r3, [r3, #0]
 8003734:	0018      	movs	r0, r3
 8003736:	f7fd fd57 	bl	80011e8 <HAL_GPIO_EXTI_Callback>
  }
}
 800373a:	46c0      	nop			; (mov r8, r8)
 800373c:	46bd      	mov	sp, r7
 800373e:	b002      	add	sp, #8
 8003740:	bd80      	pop	{r7, pc}
 8003742:	46c0      	nop			; (mov r8, r8)
 8003744:	40010400 	.word	0x40010400

08003748 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d101      	bne.n	800375a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e082      	b.n	8003860 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2241      	movs	r2, #65	; 0x41
 800375e:	5c9b      	ldrb	r3, [r3, r2]
 8003760:	b2db      	uxtb	r3, r3
 8003762:	2b00      	cmp	r3, #0
 8003764:	d107      	bne.n	8003776 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2240      	movs	r2, #64	; 0x40
 800376a:	2100      	movs	r1, #0
 800376c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	0018      	movs	r0, r3
 8003772:	f7fe fde9 	bl	8002348 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2241      	movs	r2, #65	; 0x41
 800377a:	2124      	movs	r1, #36	; 0x24
 800377c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2101      	movs	r1, #1
 800378a:	438a      	bics	r2, r1
 800378c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685a      	ldr	r2, [r3, #4]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4934      	ldr	r1, [pc, #208]	; (8003868 <HAL_I2C_Init+0x120>)
 8003798:	400a      	ands	r2, r1
 800379a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	689a      	ldr	r2, [r3, #8]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4931      	ldr	r1, [pc, #196]	; (800386c <HAL_I2C_Init+0x124>)
 80037a8:	400a      	ands	r2, r1
 80037aa:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d108      	bne.n	80037c6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	689a      	ldr	r2, [r3, #8]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2180      	movs	r1, #128	; 0x80
 80037be:	0209      	lsls	r1, r1, #8
 80037c0:	430a      	orrs	r2, r1
 80037c2:	609a      	str	r2, [r3, #8]
 80037c4:	e007      	b.n	80037d6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	689a      	ldr	r2, [r3, #8]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2184      	movs	r1, #132	; 0x84
 80037d0:	0209      	lsls	r1, r1, #8
 80037d2:	430a      	orrs	r2, r1
 80037d4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	2b02      	cmp	r3, #2
 80037dc:	d104      	bne.n	80037e8 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	2280      	movs	r2, #128	; 0x80
 80037e4:	0112      	lsls	r2, r2, #4
 80037e6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	685a      	ldr	r2, [r3, #4]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	491f      	ldr	r1, [pc, #124]	; (8003870 <HAL_I2C_Init+0x128>)
 80037f4:	430a      	orrs	r2, r1
 80037f6:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	68da      	ldr	r2, [r3, #12]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	491a      	ldr	r1, [pc, #104]	; (800386c <HAL_I2C_Init+0x124>)
 8003804:	400a      	ands	r2, r1
 8003806:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	691a      	ldr	r2, [r3, #16]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	695b      	ldr	r3, [r3, #20]
 8003810:	431a      	orrs	r2, r3
 8003812:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	699b      	ldr	r3, [r3, #24]
 8003818:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	430a      	orrs	r2, r1
 8003820:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	69d9      	ldr	r1, [r3, #28]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a1a      	ldr	r2, [r3, #32]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	430a      	orrs	r2, r1
 8003830:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	2101      	movs	r1, #1
 800383e:	430a      	orrs	r2, r1
 8003840:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2241      	movs	r2, #65	; 0x41
 800384c:	2120      	movs	r1, #32
 800384e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2242      	movs	r2, #66	; 0x42
 800385a:	2100      	movs	r1, #0
 800385c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800385e:	2300      	movs	r3, #0
}
 8003860:	0018      	movs	r0, r3
 8003862:	46bd      	mov	sp, r7
 8003864:	b002      	add	sp, #8
 8003866:	bd80      	pop	{r7, pc}
 8003868:	f0ffffff 	.word	0xf0ffffff
 800386c:	ffff7fff 	.word	0xffff7fff
 8003870:	02008000 	.word	0x02008000

08003874 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003874:	b590      	push	{r4, r7, lr}
 8003876:	b089      	sub	sp, #36	; 0x24
 8003878:	af02      	add	r7, sp, #8
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	0008      	movs	r0, r1
 800387e:	607a      	str	r2, [r7, #4]
 8003880:	0019      	movs	r1, r3
 8003882:	230a      	movs	r3, #10
 8003884:	18fb      	adds	r3, r7, r3
 8003886:	1c02      	adds	r2, r0, #0
 8003888:	801a      	strh	r2, [r3, #0]
 800388a:	2308      	movs	r3, #8
 800388c:	18fb      	adds	r3, r7, r3
 800388e:	1c0a      	adds	r2, r1, #0
 8003890:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2241      	movs	r2, #65	; 0x41
 8003896:	5c9b      	ldrb	r3, [r3, r2]
 8003898:	b2db      	uxtb	r3, r3
 800389a:	2b20      	cmp	r3, #32
 800389c:	d000      	beq.n	80038a0 <HAL_I2C_Master_Transmit+0x2c>
 800389e:	e0e7      	b.n	8003a70 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2240      	movs	r2, #64	; 0x40
 80038a4:	5c9b      	ldrb	r3, [r3, r2]
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d101      	bne.n	80038ae <HAL_I2C_Master_Transmit+0x3a>
 80038aa:	2302      	movs	r3, #2
 80038ac:	e0e1      	b.n	8003a72 <HAL_I2C_Master_Transmit+0x1fe>
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2240      	movs	r2, #64	; 0x40
 80038b2:	2101      	movs	r1, #1
 80038b4:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80038b6:	f7fe ff39 	bl	800272c <HAL_GetTick>
 80038ba:	0003      	movs	r3, r0
 80038bc:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80038be:	2380      	movs	r3, #128	; 0x80
 80038c0:	0219      	lsls	r1, r3, #8
 80038c2:	68f8      	ldr	r0, [r7, #12]
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	9300      	str	r3, [sp, #0]
 80038c8:	2319      	movs	r3, #25
 80038ca:	2201      	movs	r2, #1
 80038cc:	f000 fc24 	bl	8004118 <I2C_WaitOnFlagUntilTimeout>
 80038d0:	1e03      	subs	r3, r0, #0
 80038d2:	d001      	beq.n	80038d8 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e0cc      	b.n	8003a72 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2241      	movs	r2, #65	; 0x41
 80038dc:	2121      	movs	r1, #33	; 0x21
 80038de:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2242      	movs	r2, #66	; 0x42
 80038e4:	2110      	movs	r1, #16
 80038e6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2200      	movs	r2, #0
 80038ec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2208      	movs	r2, #8
 80038f8:	18ba      	adds	r2, r7, r2
 80038fa:	8812      	ldrh	r2, [r2, #0]
 80038fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2200      	movs	r2, #0
 8003902:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003908:	b29b      	uxth	r3, r3
 800390a:	2bff      	cmp	r3, #255	; 0xff
 800390c:	d911      	bls.n	8003932 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	22ff      	movs	r2, #255	; 0xff
 8003912:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003918:	b2da      	uxtb	r2, r3
 800391a:	2380      	movs	r3, #128	; 0x80
 800391c:	045c      	lsls	r4, r3, #17
 800391e:	230a      	movs	r3, #10
 8003920:	18fb      	adds	r3, r7, r3
 8003922:	8819      	ldrh	r1, [r3, #0]
 8003924:	68f8      	ldr	r0, [r7, #12]
 8003926:	4b55      	ldr	r3, [pc, #340]	; (8003a7c <HAL_I2C_Master_Transmit+0x208>)
 8003928:	9300      	str	r3, [sp, #0]
 800392a:	0023      	movs	r3, r4
 800392c:	f000 fd28 	bl	8004380 <I2C_TransferConfig>
 8003930:	e075      	b.n	8003a1e <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003936:	b29a      	uxth	r2, r3
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003940:	b2da      	uxtb	r2, r3
 8003942:	2380      	movs	r3, #128	; 0x80
 8003944:	049c      	lsls	r4, r3, #18
 8003946:	230a      	movs	r3, #10
 8003948:	18fb      	adds	r3, r7, r3
 800394a:	8819      	ldrh	r1, [r3, #0]
 800394c:	68f8      	ldr	r0, [r7, #12]
 800394e:	4b4b      	ldr	r3, [pc, #300]	; (8003a7c <HAL_I2C_Master_Transmit+0x208>)
 8003950:	9300      	str	r3, [sp, #0]
 8003952:	0023      	movs	r3, r4
 8003954:	f000 fd14 	bl	8004380 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003958:	e061      	b.n	8003a1e <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800395a:	697a      	ldr	r2, [r7, #20]
 800395c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	0018      	movs	r0, r3
 8003962:	f000 fc18 	bl	8004196 <I2C_WaitOnTXISFlagUntilTimeout>
 8003966:	1e03      	subs	r3, r0, #0
 8003968:	d001      	beq.n	800396e <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e081      	b.n	8003a72 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003972:	781a      	ldrb	r2, [r3, #0]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397e:	1c5a      	adds	r2, r3, #1
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003988:	b29b      	uxth	r3, r3
 800398a:	3b01      	subs	r3, #1
 800398c:	b29a      	uxth	r2, r3
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003996:	3b01      	subs	r3, #1
 8003998:	b29a      	uxth	r2, r3
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d03a      	beq.n	8003a1e <HAL_I2C_Master_Transmit+0x1aa>
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d136      	bne.n	8003a1e <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80039b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039b2:	68f8      	ldr	r0, [r7, #12]
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	9300      	str	r3, [sp, #0]
 80039b8:	0013      	movs	r3, r2
 80039ba:	2200      	movs	r2, #0
 80039bc:	2180      	movs	r1, #128	; 0x80
 80039be:	f000 fbab 	bl	8004118 <I2C_WaitOnFlagUntilTimeout>
 80039c2:	1e03      	subs	r3, r0, #0
 80039c4:	d001      	beq.n	80039ca <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e053      	b.n	8003a72 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	2bff      	cmp	r3, #255	; 0xff
 80039d2:	d911      	bls.n	80039f8 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	22ff      	movs	r2, #255	; 0xff
 80039d8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039de:	b2da      	uxtb	r2, r3
 80039e0:	2380      	movs	r3, #128	; 0x80
 80039e2:	045c      	lsls	r4, r3, #17
 80039e4:	230a      	movs	r3, #10
 80039e6:	18fb      	adds	r3, r7, r3
 80039e8:	8819      	ldrh	r1, [r3, #0]
 80039ea:	68f8      	ldr	r0, [r7, #12]
 80039ec:	2300      	movs	r3, #0
 80039ee:	9300      	str	r3, [sp, #0]
 80039f0:	0023      	movs	r3, r4
 80039f2:	f000 fcc5 	bl	8004380 <I2C_TransferConfig>
 80039f6:	e012      	b.n	8003a1e <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039fc:	b29a      	uxth	r2, r3
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a06:	b2da      	uxtb	r2, r3
 8003a08:	2380      	movs	r3, #128	; 0x80
 8003a0a:	049c      	lsls	r4, r3, #18
 8003a0c:	230a      	movs	r3, #10
 8003a0e:	18fb      	adds	r3, r7, r3
 8003a10:	8819      	ldrh	r1, [r3, #0]
 8003a12:	68f8      	ldr	r0, [r7, #12]
 8003a14:	2300      	movs	r3, #0
 8003a16:	9300      	str	r3, [sp, #0]
 8003a18:	0023      	movs	r3, r4
 8003a1a:	f000 fcb1 	bl	8004380 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d198      	bne.n	800395a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a28:	697a      	ldr	r2, [r7, #20]
 8003a2a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	0018      	movs	r0, r3
 8003a30:	f000 fbf0 	bl	8004214 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003a34:	1e03      	subs	r3, r0, #0
 8003a36:	d001      	beq.n	8003a3c <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e01a      	b.n	8003a72 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	2220      	movs	r2, #32
 8003a42:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	685a      	ldr	r2, [r3, #4]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	490c      	ldr	r1, [pc, #48]	; (8003a80 <HAL_I2C_Master_Transmit+0x20c>)
 8003a50:	400a      	ands	r2, r1
 8003a52:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2241      	movs	r2, #65	; 0x41
 8003a58:	2120      	movs	r1, #32
 8003a5a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2242      	movs	r2, #66	; 0x42
 8003a60:	2100      	movs	r1, #0
 8003a62:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2240      	movs	r2, #64	; 0x40
 8003a68:	2100      	movs	r1, #0
 8003a6a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	e000      	b.n	8003a72 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8003a70:	2302      	movs	r3, #2
  }
}
 8003a72:	0018      	movs	r0, r3
 8003a74:	46bd      	mov	sp, r7
 8003a76:	b007      	add	sp, #28
 8003a78:	bd90      	pop	{r4, r7, pc}
 8003a7a:	46c0      	nop			; (mov r8, r8)
 8003a7c:	80002000 	.word	0x80002000
 8003a80:	fe00e800 	.word	0xfe00e800

08003a84 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a84:	b590      	push	{r4, r7, lr}
 8003a86:	b089      	sub	sp, #36	; 0x24
 8003a88:	af02      	add	r7, sp, #8
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	000c      	movs	r4, r1
 8003a8e:	0010      	movs	r0, r2
 8003a90:	0019      	movs	r1, r3
 8003a92:	230a      	movs	r3, #10
 8003a94:	18fb      	adds	r3, r7, r3
 8003a96:	1c22      	adds	r2, r4, #0
 8003a98:	801a      	strh	r2, [r3, #0]
 8003a9a:	2308      	movs	r3, #8
 8003a9c:	18fb      	adds	r3, r7, r3
 8003a9e:	1c02      	adds	r2, r0, #0
 8003aa0:	801a      	strh	r2, [r3, #0]
 8003aa2:	1dbb      	adds	r3, r7, #6
 8003aa4:	1c0a      	adds	r2, r1, #0
 8003aa6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2241      	movs	r2, #65	; 0x41
 8003aac:	5c9b      	ldrb	r3, [r3, r2]
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	2b20      	cmp	r3, #32
 8003ab2:	d000      	beq.n	8003ab6 <HAL_I2C_Mem_Write+0x32>
 8003ab4:	e10c      	b.n	8003cd0 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d004      	beq.n	8003ac6 <HAL_I2C_Mem_Write+0x42>
 8003abc:	232c      	movs	r3, #44	; 0x2c
 8003abe:	18fb      	adds	r3, r7, r3
 8003ac0:	881b      	ldrh	r3, [r3, #0]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d105      	bne.n	8003ad2 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2280      	movs	r2, #128	; 0x80
 8003aca:	0092      	lsls	r2, r2, #2
 8003acc:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e0ff      	b.n	8003cd2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2240      	movs	r2, #64	; 0x40
 8003ad6:	5c9b      	ldrb	r3, [r3, r2]
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d101      	bne.n	8003ae0 <HAL_I2C_Mem_Write+0x5c>
 8003adc:	2302      	movs	r3, #2
 8003ade:	e0f8      	b.n	8003cd2 <HAL_I2C_Mem_Write+0x24e>
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2240      	movs	r2, #64	; 0x40
 8003ae4:	2101      	movs	r1, #1
 8003ae6:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003ae8:	f7fe fe20 	bl	800272c <HAL_GetTick>
 8003aec:	0003      	movs	r3, r0
 8003aee:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003af0:	2380      	movs	r3, #128	; 0x80
 8003af2:	0219      	lsls	r1, r3, #8
 8003af4:	68f8      	ldr	r0, [r7, #12]
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	9300      	str	r3, [sp, #0]
 8003afa:	2319      	movs	r3, #25
 8003afc:	2201      	movs	r2, #1
 8003afe:	f000 fb0b 	bl	8004118 <I2C_WaitOnFlagUntilTimeout>
 8003b02:	1e03      	subs	r3, r0, #0
 8003b04:	d001      	beq.n	8003b0a <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e0e3      	b.n	8003cd2 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2241      	movs	r2, #65	; 0x41
 8003b0e:	2121      	movs	r1, #33	; 0x21
 8003b10:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2242      	movs	r2, #66	; 0x42
 8003b16:	2140      	movs	r1, #64	; 0x40
 8003b18:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b24:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	222c      	movs	r2, #44	; 0x2c
 8003b2a:	18ba      	adds	r2, r7, r2
 8003b2c:	8812      	ldrh	r2, [r2, #0]
 8003b2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2200      	movs	r2, #0
 8003b34:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b36:	1dbb      	adds	r3, r7, #6
 8003b38:	881c      	ldrh	r4, [r3, #0]
 8003b3a:	2308      	movs	r3, #8
 8003b3c:	18fb      	adds	r3, r7, r3
 8003b3e:	881a      	ldrh	r2, [r3, #0]
 8003b40:	230a      	movs	r3, #10
 8003b42:	18fb      	adds	r3, r7, r3
 8003b44:	8819      	ldrh	r1, [r3, #0]
 8003b46:	68f8      	ldr	r0, [r7, #12]
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	9301      	str	r3, [sp, #4]
 8003b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b4e:	9300      	str	r3, [sp, #0]
 8003b50:	0023      	movs	r3, r4
 8003b52:	f000 f9f9 	bl	8003f48 <I2C_RequestMemoryWrite>
 8003b56:	1e03      	subs	r3, r0, #0
 8003b58:	d005      	beq.n	8003b66 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2240      	movs	r2, #64	; 0x40
 8003b5e:	2100      	movs	r1, #0
 8003b60:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e0b5      	b.n	8003cd2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	2bff      	cmp	r3, #255	; 0xff
 8003b6e:	d911      	bls.n	8003b94 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	22ff      	movs	r2, #255	; 0xff
 8003b74:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b7a:	b2da      	uxtb	r2, r3
 8003b7c:	2380      	movs	r3, #128	; 0x80
 8003b7e:	045c      	lsls	r4, r3, #17
 8003b80:	230a      	movs	r3, #10
 8003b82:	18fb      	adds	r3, r7, r3
 8003b84:	8819      	ldrh	r1, [r3, #0]
 8003b86:	68f8      	ldr	r0, [r7, #12]
 8003b88:	2300      	movs	r3, #0
 8003b8a:	9300      	str	r3, [sp, #0]
 8003b8c:	0023      	movs	r3, r4
 8003b8e:	f000 fbf7 	bl	8004380 <I2C_TransferConfig>
 8003b92:	e012      	b.n	8003bba <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b98:	b29a      	uxth	r2, r3
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ba2:	b2da      	uxtb	r2, r3
 8003ba4:	2380      	movs	r3, #128	; 0x80
 8003ba6:	049c      	lsls	r4, r3, #18
 8003ba8:	230a      	movs	r3, #10
 8003baa:	18fb      	adds	r3, r7, r3
 8003bac:	8819      	ldrh	r1, [r3, #0]
 8003bae:	68f8      	ldr	r0, [r7, #12]
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	9300      	str	r3, [sp, #0]
 8003bb4:	0023      	movs	r3, r4
 8003bb6:	f000 fbe3 	bl	8004380 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bba:	697a      	ldr	r2, [r7, #20]
 8003bbc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	0018      	movs	r0, r3
 8003bc2:	f000 fae8 	bl	8004196 <I2C_WaitOnTXISFlagUntilTimeout>
 8003bc6:	1e03      	subs	r3, r0, #0
 8003bc8:	d001      	beq.n	8003bce <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e081      	b.n	8003cd2 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd2:	781a      	ldrb	r2, [r3, #0]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bde:	1c5a      	adds	r2, r3, #1
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	3b01      	subs	r3, #1
 8003bec:	b29a      	uxth	r2, r3
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bf6:	3b01      	subs	r3, #1
 8003bf8:	b29a      	uxth	r2, r3
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d03a      	beq.n	8003c7e <HAL_I2C_Mem_Write+0x1fa>
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d136      	bne.n	8003c7e <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003c10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c12:	68f8      	ldr	r0, [r7, #12]
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	9300      	str	r3, [sp, #0]
 8003c18:	0013      	movs	r3, r2
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	2180      	movs	r1, #128	; 0x80
 8003c1e:	f000 fa7b 	bl	8004118 <I2C_WaitOnFlagUntilTimeout>
 8003c22:	1e03      	subs	r3, r0, #0
 8003c24:	d001      	beq.n	8003c2a <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e053      	b.n	8003cd2 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	2bff      	cmp	r3, #255	; 0xff
 8003c32:	d911      	bls.n	8003c58 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	22ff      	movs	r2, #255	; 0xff
 8003c38:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c3e:	b2da      	uxtb	r2, r3
 8003c40:	2380      	movs	r3, #128	; 0x80
 8003c42:	045c      	lsls	r4, r3, #17
 8003c44:	230a      	movs	r3, #10
 8003c46:	18fb      	adds	r3, r7, r3
 8003c48:	8819      	ldrh	r1, [r3, #0]
 8003c4a:	68f8      	ldr	r0, [r7, #12]
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	9300      	str	r3, [sp, #0]
 8003c50:	0023      	movs	r3, r4
 8003c52:	f000 fb95 	bl	8004380 <I2C_TransferConfig>
 8003c56:	e012      	b.n	8003c7e <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c5c:	b29a      	uxth	r2, r3
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c66:	b2da      	uxtb	r2, r3
 8003c68:	2380      	movs	r3, #128	; 0x80
 8003c6a:	049c      	lsls	r4, r3, #18
 8003c6c:	230a      	movs	r3, #10
 8003c6e:	18fb      	adds	r3, r7, r3
 8003c70:	8819      	ldrh	r1, [r3, #0]
 8003c72:	68f8      	ldr	r0, [r7, #12]
 8003c74:	2300      	movs	r3, #0
 8003c76:	9300      	str	r3, [sp, #0]
 8003c78:	0023      	movs	r3, r4
 8003c7a:	f000 fb81 	bl	8004380 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d198      	bne.n	8003bba <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c88:	697a      	ldr	r2, [r7, #20]
 8003c8a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	0018      	movs	r0, r3
 8003c90:	f000 fac0 	bl	8004214 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003c94:	1e03      	subs	r3, r0, #0
 8003c96:	d001      	beq.n	8003c9c <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e01a      	b.n	8003cd2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	2220      	movs	r2, #32
 8003ca2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	685a      	ldr	r2, [r3, #4]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	490b      	ldr	r1, [pc, #44]	; (8003cdc <HAL_I2C_Mem_Write+0x258>)
 8003cb0:	400a      	ands	r2, r1
 8003cb2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2241      	movs	r2, #65	; 0x41
 8003cb8:	2120      	movs	r1, #32
 8003cba:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2242      	movs	r2, #66	; 0x42
 8003cc0:	2100      	movs	r1, #0
 8003cc2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2240      	movs	r2, #64	; 0x40
 8003cc8:	2100      	movs	r1, #0
 8003cca:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	e000      	b.n	8003cd2 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8003cd0:	2302      	movs	r3, #2
  }
}
 8003cd2:	0018      	movs	r0, r3
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	b007      	add	sp, #28
 8003cd8:	bd90      	pop	{r4, r7, pc}
 8003cda:	46c0      	nop			; (mov r8, r8)
 8003cdc:	fe00e800 	.word	0xfe00e800

08003ce0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ce0:	b590      	push	{r4, r7, lr}
 8003ce2:	b089      	sub	sp, #36	; 0x24
 8003ce4:	af02      	add	r7, sp, #8
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	000c      	movs	r4, r1
 8003cea:	0010      	movs	r0, r2
 8003cec:	0019      	movs	r1, r3
 8003cee:	230a      	movs	r3, #10
 8003cf0:	18fb      	adds	r3, r7, r3
 8003cf2:	1c22      	adds	r2, r4, #0
 8003cf4:	801a      	strh	r2, [r3, #0]
 8003cf6:	2308      	movs	r3, #8
 8003cf8:	18fb      	adds	r3, r7, r3
 8003cfa:	1c02      	adds	r2, r0, #0
 8003cfc:	801a      	strh	r2, [r3, #0]
 8003cfe:	1dbb      	adds	r3, r7, #6
 8003d00:	1c0a      	adds	r2, r1, #0
 8003d02:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2241      	movs	r2, #65	; 0x41
 8003d08:	5c9b      	ldrb	r3, [r3, r2]
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	2b20      	cmp	r3, #32
 8003d0e:	d000      	beq.n	8003d12 <HAL_I2C_Mem_Read+0x32>
 8003d10:	e110      	b.n	8003f34 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d004      	beq.n	8003d22 <HAL_I2C_Mem_Read+0x42>
 8003d18:	232c      	movs	r3, #44	; 0x2c
 8003d1a:	18fb      	adds	r3, r7, r3
 8003d1c:	881b      	ldrh	r3, [r3, #0]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d105      	bne.n	8003d2e <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2280      	movs	r2, #128	; 0x80
 8003d26:	0092      	lsls	r2, r2, #2
 8003d28:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e103      	b.n	8003f36 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2240      	movs	r2, #64	; 0x40
 8003d32:	5c9b      	ldrb	r3, [r3, r2]
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d101      	bne.n	8003d3c <HAL_I2C_Mem_Read+0x5c>
 8003d38:	2302      	movs	r3, #2
 8003d3a:	e0fc      	b.n	8003f36 <HAL_I2C_Mem_Read+0x256>
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2240      	movs	r2, #64	; 0x40
 8003d40:	2101      	movs	r1, #1
 8003d42:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003d44:	f7fe fcf2 	bl	800272c <HAL_GetTick>
 8003d48:	0003      	movs	r3, r0
 8003d4a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003d4c:	2380      	movs	r3, #128	; 0x80
 8003d4e:	0219      	lsls	r1, r3, #8
 8003d50:	68f8      	ldr	r0, [r7, #12]
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	9300      	str	r3, [sp, #0]
 8003d56:	2319      	movs	r3, #25
 8003d58:	2201      	movs	r2, #1
 8003d5a:	f000 f9dd 	bl	8004118 <I2C_WaitOnFlagUntilTimeout>
 8003d5e:	1e03      	subs	r3, r0, #0
 8003d60:	d001      	beq.n	8003d66 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e0e7      	b.n	8003f36 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2241      	movs	r2, #65	; 0x41
 8003d6a:	2122      	movs	r1, #34	; 0x22
 8003d6c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2242      	movs	r2, #66	; 0x42
 8003d72:	2140      	movs	r1, #64	; 0x40
 8003d74:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d80:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	222c      	movs	r2, #44	; 0x2c
 8003d86:	18ba      	adds	r2, r7, r2
 8003d88:	8812      	ldrh	r2, [r2, #0]
 8003d8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d92:	1dbb      	adds	r3, r7, #6
 8003d94:	881c      	ldrh	r4, [r3, #0]
 8003d96:	2308      	movs	r3, #8
 8003d98:	18fb      	adds	r3, r7, r3
 8003d9a:	881a      	ldrh	r2, [r3, #0]
 8003d9c:	230a      	movs	r3, #10
 8003d9e:	18fb      	adds	r3, r7, r3
 8003da0:	8819      	ldrh	r1, [r3, #0]
 8003da2:	68f8      	ldr	r0, [r7, #12]
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	9301      	str	r3, [sp, #4]
 8003da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003daa:	9300      	str	r3, [sp, #0]
 8003dac:	0023      	movs	r3, r4
 8003dae:	f000 f92f 	bl	8004010 <I2C_RequestMemoryRead>
 8003db2:	1e03      	subs	r3, r0, #0
 8003db4:	d005      	beq.n	8003dc2 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2240      	movs	r2, #64	; 0x40
 8003dba:	2100      	movs	r1, #0
 8003dbc:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e0b9      	b.n	8003f36 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	2bff      	cmp	r3, #255	; 0xff
 8003dca:	d911      	bls.n	8003df0 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	22ff      	movs	r2, #255	; 0xff
 8003dd0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dd6:	b2da      	uxtb	r2, r3
 8003dd8:	2380      	movs	r3, #128	; 0x80
 8003dda:	045c      	lsls	r4, r3, #17
 8003ddc:	230a      	movs	r3, #10
 8003dde:	18fb      	adds	r3, r7, r3
 8003de0:	8819      	ldrh	r1, [r3, #0]
 8003de2:	68f8      	ldr	r0, [r7, #12]
 8003de4:	4b56      	ldr	r3, [pc, #344]	; (8003f40 <HAL_I2C_Mem_Read+0x260>)
 8003de6:	9300      	str	r3, [sp, #0]
 8003de8:	0023      	movs	r3, r4
 8003dea:	f000 fac9 	bl	8004380 <I2C_TransferConfig>
 8003dee:	e012      	b.n	8003e16 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003df4:	b29a      	uxth	r2, r3
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dfe:	b2da      	uxtb	r2, r3
 8003e00:	2380      	movs	r3, #128	; 0x80
 8003e02:	049c      	lsls	r4, r3, #18
 8003e04:	230a      	movs	r3, #10
 8003e06:	18fb      	adds	r3, r7, r3
 8003e08:	8819      	ldrh	r1, [r3, #0]
 8003e0a:	68f8      	ldr	r0, [r7, #12]
 8003e0c:	4b4c      	ldr	r3, [pc, #304]	; (8003f40 <HAL_I2C_Mem_Read+0x260>)
 8003e0e:	9300      	str	r3, [sp, #0]
 8003e10:	0023      	movs	r3, r4
 8003e12:	f000 fab5 	bl	8004380 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003e16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e18:	68f8      	ldr	r0, [r7, #12]
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	9300      	str	r3, [sp, #0]
 8003e1e:	0013      	movs	r3, r2
 8003e20:	2200      	movs	r2, #0
 8003e22:	2104      	movs	r1, #4
 8003e24:	f000 f978 	bl	8004118 <I2C_WaitOnFlagUntilTimeout>
 8003e28:	1e03      	subs	r3, r0, #0
 8003e2a:	d001      	beq.n	8003e30 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e082      	b.n	8003f36 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3a:	b2d2      	uxtb	r2, r2
 8003e3c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e42:	1c5a      	adds	r2, r3, #1
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e4c:	3b01      	subs	r3, #1
 8003e4e:	b29a      	uxth	r2, r3
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	3b01      	subs	r3, #1
 8003e5c:	b29a      	uxth	r2, r3
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d03a      	beq.n	8003ee2 <HAL_I2C_Mem_Read+0x202>
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d136      	bne.n	8003ee2 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003e74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e76:	68f8      	ldr	r0, [r7, #12]
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	9300      	str	r3, [sp, #0]
 8003e7c:	0013      	movs	r3, r2
 8003e7e:	2200      	movs	r2, #0
 8003e80:	2180      	movs	r1, #128	; 0x80
 8003e82:	f000 f949 	bl	8004118 <I2C_WaitOnFlagUntilTimeout>
 8003e86:	1e03      	subs	r3, r0, #0
 8003e88:	d001      	beq.n	8003e8e <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e053      	b.n	8003f36 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	2bff      	cmp	r3, #255	; 0xff
 8003e96:	d911      	bls.n	8003ebc <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	22ff      	movs	r2, #255	; 0xff
 8003e9c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ea2:	b2da      	uxtb	r2, r3
 8003ea4:	2380      	movs	r3, #128	; 0x80
 8003ea6:	045c      	lsls	r4, r3, #17
 8003ea8:	230a      	movs	r3, #10
 8003eaa:	18fb      	adds	r3, r7, r3
 8003eac:	8819      	ldrh	r1, [r3, #0]
 8003eae:	68f8      	ldr	r0, [r7, #12]
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	9300      	str	r3, [sp, #0]
 8003eb4:	0023      	movs	r3, r4
 8003eb6:	f000 fa63 	bl	8004380 <I2C_TransferConfig>
 8003eba:	e012      	b.n	8003ee2 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ec0:	b29a      	uxth	r2, r3
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eca:	b2da      	uxtb	r2, r3
 8003ecc:	2380      	movs	r3, #128	; 0x80
 8003ece:	049c      	lsls	r4, r3, #18
 8003ed0:	230a      	movs	r3, #10
 8003ed2:	18fb      	adds	r3, r7, r3
 8003ed4:	8819      	ldrh	r1, [r3, #0]
 8003ed6:	68f8      	ldr	r0, [r7, #12]
 8003ed8:	2300      	movs	r3, #0
 8003eda:	9300      	str	r3, [sp, #0]
 8003edc:	0023      	movs	r3, r4
 8003ede:	f000 fa4f 	bl	8004380 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d194      	bne.n	8003e16 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003eec:	697a      	ldr	r2, [r7, #20]
 8003eee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	0018      	movs	r0, r3
 8003ef4:	f000 f98e 	bl	8004214 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003ef8:	1e03      	subs	r3, r0, #0
 8003efa:	d001      	beq.n	8003f00 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e01a      	b.n	8003f36 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	2220      	movs	r2, #32
 8003f06:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	685a      	ldr	r2, [r3, #4]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	490c      	ldr	r1, [pc, #48]	; (8003f44 <HAL_I2C_Mem_Read+0x264>)
 8003f14:	400a      	ands	r2, r1
 8003f16:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2241      	movs	r2, #65	; 0x41
 8003f1c:	2120      	movs	r1, #32
 8003f1e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2242      	movs	r2, #66	; 0x42
 8003f24:	2100      	movs	r1, #0
 8003f26:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2240      	movs	r2, #64	; 0x40
 8003f2c:	2100      	movs	r1, #0
 8003f2e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003f30:	2300      	movs	r3, #0
 8003f32:	e000      	b.n	8003f36 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8003f34:	2302      	movs	r3, #2
  }
}
 8003f36:	0018      	movs	r0, r3
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	b007      	add	sp, #28
 8003f3c:	bd90      	pop	{r4, r7, pc}
 8003f3e:	46c0      	nop			; (mov r8, r8)
 8003f40:	80002400 	.word	0x80002400
 8003f44:	fe00e800 	.word	0xfe00e800

08003f48 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003f48:	b5b0      	push	{r4, r5, r7, lr}
 8003f4a:	b086      	sub	sp, #24
 8003f4c:	af02      	add	r7, sp, #8
 8003f4e:	60f8      	str	r0, [r7, #12]
 8003f50:	000c      	movs	r4, r1
 8003f52:	0010      	movs	r0, r2
 8003f54:	0019      	movs	r1, r3
 8003f56:	250a      	movs	r5, #10
 8003f58:	197b      	adds	r3, r7, r5
 8003f5a:	1c22      	adds	r2, r4, #0
 8003f5c:	801a      	strh	r2, [r3, #0]
 8003f5e:	2308      	movs	r3, #8
 8003f60:	18fb      	adds	r3, r7, r3
 8003f62:	1c02      	adds	r2, r0, #0
 8003f64:	801a      	strh	r2, [r3, #0]
 8003f66:	1dbb      	adds	r3, r7, #6
 8003f68:	1c0a      	adds	r2, r1, #0
 8003f6a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003f6c:	1dbb      	adds	r3, r7, #6
 8003f6e:	881b      	ldrh	r3, [r3, #0]
 8003f70:	b2da      	uxtb	r2, r3
 8003f72:	2380      	movs	r3, #128	; 0x80
 8003f74:	045c      	lsls	r4, r3, #17
 8003f76:	197b      	adds	r3, r7, r5
 8003f78:	8819      	ldrh	r1, [r3, #0]
 8003f7a:	68f8      	ldr	r0, [r7, #12]
 8003f7c:	4b23      	ldr	r3, [pc, #140]	; (800400c <I2C_RequestMemoryWrite+0xc4>)
 8003f7e:	9300      	str	r3, [sp, #0]
 8003f80:	0023      	movs	r3, r4
 8003f82:	f000 f9fd 	bl	8004380 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f88:	6a39      	ldr	r1, [r7, #32]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	0018      	movs	r0, r3
 8003f8e:	f000 f902 	bl	8004196 <I2C_WaitOnTXISFlagUntilTimeout>
 8003f92:	1e03      	subs	r3, r0, #0
 8003f94:	d001      	beq.n	8003f9a <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e033      	b.n	8004002 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f9a:	1dbb      	adds	r3, r7, #6
 8003f9c:	881b      	ldrh	r3, [r3, #0]
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d107      	bne.n	8003fb2 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003fa2:	2308      	movs	r3, #8
 8003fa4:	18fb      	adds	r3, r7, r3
 8003fa6:	881b      	ldrh	r3, [r3, #0]
 8003fa8:	b2da      	uxtb	r2, r3
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	629a      	str	r2, [r3, #40]	; 0x28
 8003fb0:	e019      	b.n	8003fe6 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003fb2:	2308      	movs	r3, #8
 8003fb4:	18fb      	adds	r3, r7, r3
 8003fb6:	881b      	ldrh	r3, [r3, #0]
 8003fb8:	0a1b      	lsrs	r3, r3, #8
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	b2da      	uxtb	r2, r3
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fc6:	6a39      	ldr	r1, [r7, #32]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	0018      	movs	r0, r3
 8003fcc:	f000 f8e3 	bl	8004196 <I2C_WaitOnTXISFlagUntilTimeout>
 8003fd0:	1e03      	subs	r3, r0, #0
 8003fd2:	d001      	beq.n	8003fd8 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e014      	b.n	8004002 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003fd8:	2308      	movs	r3, #8
 8003fda:	18fb      	adds	r3, r7, r3
 8003fdc:	881b      	ldrh	r3, [r3, #0]
 8003fde:	b2da      	uxtb	r2, r3
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003fe6:	6a3a      	ldr	r2, [r7, #32]
 8003fe8:	68f8      	ldr	r0, [r7, #12]
 8003fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fec:	9300      	str	r3, [sp, #0]
 8003fee:	0013      	movs	r3, r2
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	2180      	movs	r1, #128	; 0x80
 8003ff4:	f000 f890 	bl	8004118 <I2C_WaitOnFlagUntilTimeout>
 8003ff8:	1e03      	subs	r3, r0, #0
 8003ffa:	d001      	beq.n	8004000 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e000      	b.n	8004002 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8004000:	2300      	movs	r3, #0
}
 8004002:	0018      	movs	r0, r3
 8004004:	46bd      	mov	sp, r7
 8004006:	b004      	add	sp, #16
 8004008:	bdb0      	pop	{r4, r5, r7, pc}
 800400a:	46c0      	nop			; (mov r8, r8)
 800400c:	80002000 	.word	0x80002000

08004010 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004010:	b5b0      	push	{r4, r5, r7, lr}
 8004012:	b086      	sub	sp, #24
 8004014:	af02      	add	r7, sp, #8
 8004016:	60f8      	str	r0, [r7, #12]
 8004018:	000c      	movs	r4, r1
 800401a:	0010      	movs	r0, r2
 800401c:	0019      	movs	r1, r3
 800401e:	250a      	movs	r5, #10
 8004020:	197b      	adds	r3, r7, r5
 8004022:	1c22      	adds	r2, r4, #0
 8004024:	801a      	strh	r2, [r3, #0]
 8004026:	2308      	movs	r3, #8
 8004028:	18fb      	adds	r3, r7, r3
 800402a:	1c02      	adds	r2, r0, #0
 800402c:	801a      	strh	r2, [r3, #0]
 800402e:	1dbb      	adds	r3, r7, #6
 8004030:	1c0a      	adds	r2, r1, #0
 8004032:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004034:	1dbb      	adds	r3, r7, #6
 8004036:	881b      	ldrh	r3, [r3, #0]
 8004038:	b2da      	uxtb	r2, r3
 800403a:	197b      	adds	r3, r7, r5
 800403c:	8819      	ldrh	r1, [r3, #0]
 800403e:	68f8      	ldr	r0, [r7, #12]
 8004040:	4b23      	ldr	r3, [pc, #140]	; (80040d0 <I2C_RequestMemoryRead+0xc0>)
 8004042:	9300      	str	r3, [sp, #0]
 8004044:	2300      	movs	r3, #0
 8004046:	f000 f99b 	bl	8004380 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800404a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800404c:	6a39      	ldr	r1, [r7, #32]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	0018      	movs	r0, r3
 8004052:	f000 f8a0 	bl	8004196 <I2C_WaitOnTXISFlagUntilTimeout>
 8004056:	1e03      	subs	r3, r0, #0
 8004058:	d001      	beq.n	800405e <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e033      	b.n	80040c6 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800405e:	1dbb      	adds	r3, r7, #6
 8004060:	881b      	ldrh	r3, [r3, #0]
 8004062:	2b01      	cmp	r3, #1
 8004064:	d107      	bne.n	8004076 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004066:	2308      	movs	r3, #8
 8004068:	18fb      	adds	r3, r7, r3
 800406a:	881b      	ldrh	r3, [r3, #0]
 800406c:	b2da      	uxtb	r2, r3
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	629a      	str	r2, [r3, #40]	; 0x28
 8004074:	e019      	b.n	80040aa <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004076:	2308      	movs	r3, #8
 8004078:	18fb      	adds	r3, r7, r3
 800407a:	881b      	ldrh	r3, [r3, #0]
 800407c:	0a1b      	lsrs	r3, r3, #8
 800407e:	b29b      	uxth	r3, r3
 8004080:	b2da      	uxtb	r2, r3
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004088:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800408a:	6a39      	ldr	r1, [r7, #32]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	0018      	movs	r0, r3
 8004090:	f000 f881 	bl	8004196 <I2C_WaitOnTXISFlagUntilTimeout>
 8004094:	1e03      	subs	r3, r0, #0
 8004096:	d001      	beq.n	800409c <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e014      	b.n	80040c6 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800409c:	2308      	movs	r3, #8
 800409e:	18fb      	adds	r3, r7, r3
 80040a0:	881b      	ldrh	r3, [r3, #0]
 80040a2:	b2da      	uxtb	r2, r3
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80040aa:	6a3a      	ldr	r2, [r7, #32]
 80040ac:	68f8      	ldr	r0, [r7, #12]
 80040ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b0:	9300      	str	r3, [sp, #0]
 80040b2:	0013      	movs	r3, r2
 80040b4:	2200      	movs	r2, #0
 80040b6:	2140      	movs	r1, #64	; 0x40
 80040b8:	f000 f82e 	bl	8004118 <I2C_WaitOnFlagUntilTimeout>
 80040bc:	1e03      	subs	r3, r0, #0
 80040be:	d001      	beq.n	80040c4 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e000      	b.n	80040c6 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 80040c4:	2300      	movs	r3, #0
}
 80040c6:	0018      	movs	r0, r3
 80040c8:	46bd      	mov	sp, r7
 80040ca:	b004      	add	sp, #16
 80040cc:	bdb0      	pop	{r4, r5, r7, pc}
 80040ce:	46c0      	nop			; (mov r8, r8)
 80040d0:	80002000 	.word	0x80002000

080040d4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b082      	sub	sp, #8
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	699b      	ldr	r3, [r3, #24]
 80040e2:	2202      	movs	r2, #2
 80040e4:	4013      	ands	r3, r2
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d103      	bne.n	80040f2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	2200      	movs	r2, #0
 80040f0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	699b      	ldr	r3, [r3, #24]
 80040f8:	2201      	movs	r2, #1
 80040fa:	4013      	ands	r3, r2
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d007      	beq.n	8004110 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	699a      	ldr	r2, [r3, #24]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2101      	movs	r1, #1
 800410c:	430a      	orrs	r2, r1
 800410e:	619a      	str	r2, [r3, #24]
  }
}
 8004110:	46c0      	nop			; (mov r8, r8)
 8004112:	46bd      	mov	sp, r7
 8004114:	b002      	add	sp, #8
 8004116:	bd80      	pop	{r7, pc}

08004118 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	60b9      	str	r1, [r7, #8]
 8004122:	603b      	str	r3, [r7, #0]
 8004124:	1dfb      	adds	r3, r7, #7
 8004126:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004128:	e021      	b.n	800416e <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	3301      	adds	r3, #1
 800412e:	d01e      	beq.n	800416e <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004130:	f7fe fafc 	bl	800272c <HAL_GetTick>
 8004134:	0002      	movs	r2, r0
 8004136:	69bb      	ldr	r3, [r7, #24]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	683a      	ldr	r2, [r7, #0]
 800413c:	429a      	cmp	r2, r3
 800413e:	d302      	bcc.n	8004146 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d113      	bne.n	800416e <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800414a:	2220      	movs	r2, #32
 800414c:	431a      	orrs	r2, r3
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2241      	movs	r2, #65	; 0x41
 8004156:	2120      	movs	r1, #32
 8004158:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2242      	movs	r2, #66	; 0x42
 800415e:	2100      	movs	r1, #0
 8004160:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2240      	movs	r2, #64	; 0x40
 8004166:	2100      	movs	r1, #0
 8004168:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e00f      	b.n	800418e <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	699b      	ldr	r3, [r3, #24]
 8004174:	68ba      	ldr	r2, [r7, #8]
 8004176:	4013      	ands	r3, r2
 8004178:	68ba      	ldr	r2, [r7, #8]
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	425a      	negs	r2, r3
 800417e:	4153      	adcs	r3, r2
 8004180:	b2db      	uxtb	r3, r3
 8004182:	001a      	movs	r2, r3
 8004184:	1dfb      	adds	r3, r7, #7
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	429a      	cmp	r2, r3
 800418a:	d0ce      	beq.n	800412a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800418c:	2300      	movs	r3, #0
}
 800418e:	0018      	movs	r0, r3
 8004190:	46bd      	mov	sp, r7
 8004192:	b004      	add	sp, #16
 8004194:	bd80      	pop	{r7, pc}

08004196 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004196:	b580      	push	{r7, lr}
 8004198:	b084      	sub	sp, #16
 800419a:	af00      	add	r7, sp, #0
 800419c:	60f8      	str	r0, [r7, #12]
 800419e:	60b9      	str	r1, [r7, #8]
 80041a0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80041a2:	e02b      	b.n	80041fc <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80041a4:	687a      	ldr	r2, [r7, #4]
 80041a6:	68b9      	ldr	r1, [r7, #8]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	0018      	movs	r0, r3
 80041ac:	f000 f86e 	bl	800428c <I2C_IsAcknowledgeFailed>
 80041b0:	1e03      	subs	r3, r0, #0
 80041b2:	d001      	beq.n	80041b8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e029      	b.n	800420c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	3301      	adds	r3, #1
 80041bc:	d01e      	beq.n	80041fc <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041be:	f7fe fab5 	bl	800272c <HAL_GetTick>
 80041c2:	0002      	movs	r2, r0
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	1ad3      	subs	r3, r2, r3
 80041c8:	68ba      	ldr	r2, [r7, #8]
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d302      	bcc.n	80041d4 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d113      	bne.n	80041fc <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041d8:	2220      	movs	r2, #32
 80041da:	431a      	orrs	r2, r3
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2241      	movs	r2, #65	; 0x41
 80041e4:	2120      	movs	r1, #32
 80041e6:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2242      	movs	r2, #66	; 0x42
 80041ec:	2100      	movs	r1, #0
 80041ee:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2240      	movs	r2, #64	; 0x40
 80041f4:	2100      	movs	r1, #0
 80041f6:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e007      	b.n	800420c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	699b      	ldr	r3, [r3, #24]
 8004202:	2202      	movs	r2, #2
 8004204:	4013      	ands	r3, r2
 8004206:	2b02      	cmp	r3, #2
 8004208:	d1cc      	bne.n	80041a4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800420a:	2300      	movs	r3, #0
}
 800420c:	0018      	movs	r0, r3
 800420e:	46bd      	mov	sp, r7
 8004210:	b004      	add	sp, #16
 8004212:	bd80      	pop	{r7, pc}

08004214 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	60f8      	str	r0, [r7, #12]
 800421c:	60b9      	str	r1, [r7, #8]
 800421e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004220:	e028      	b.n	8004274 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	68b9      	ldr	r1, [r7, #8]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	0018      	movs	r0, r3
 800422a:	f000 f82f 	bl	800428c <I2C_IsAcknowledgeFailed>
 800422e:	1e03      	subs	r3, r0, #0
 8004230:	d001      	beq.n	8004236 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e026      	b.n	8004284 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004236:	f7fe fa79 	bl	800272c <HAL_GetTick>
 800423a:	0002      	movs	r2, r0
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	68ba      	ldr	r2, [r7, #8]
 8004242:	429a      	cmp	r2, r3
 8004244:	d302      	bcc.n	800424c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d113      	bne.n	8004274 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004250:	2220      	movs	r2, #32
 8004252:	431a      	orrs	r2, r3
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2241      	movs	r2, #65	; 0x41
 800425c:	2120      	movs	r1, #32
 800425e:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2242      	movs	r2, #66	; 0x42
 8004264:	2100      	movs	r1, #0
 8004266:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2240      	movs	r2, #64	; 0x40
 800426c:	2100      	movs	r1, #0
 800426e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e007      	b.n	8004284 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	699b      	ldr	r3, [r3, #24]
 800427a:	2220      	movs	r2, #32
 800427c:	4013      	ands	r3, r2
 800427e:	2b20      	cmp	r3, #32
 8004280:	d1cf      	bne.n	8004222 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004282:	2300      	movs	r3, #0
}
 8004284:	0018      	movs	r0, r3
 8004286:	46bd      	mov	sp, r7
 8004288:	b004      	add	sp, #16
 800428a:	bd80      	pop	{r7, pc}

0800428c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	60b9      	str	r1, [r7, #8]
 8004296:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	699b      	ldr	r3, [r3, #24]
 800429e:	2210      	movs	r2, #16
 80042a0:	4013      	ands	r3, r2
 80042a2:	2b10      	cmp	r3, #16
 80042a4:	d164      	bne.n	8004370 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	685a      	ldr	r2, [r3, #4]
 80042ac:	2380      	movs	r3, #128	; 0x80
 80042ae:	049b      	lsls	r3, r3, #18
 80042b0:	401a      	ands	r2, r3
 80042b2:	2380      	movs	r3, #128	; 0x80
 80042b4:	049b      	lsls	r3, r3, #18
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d02b      	beq.n	8004312 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	685a      	ldr	r2, [r3, #4]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	2180      	movs	r1, #128	; 0x80
 80042c6:	01c9      	lsls	r1, r1, #7
 80042c8:	430a      	orrs	r2, r1
 80042ca:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80042cc:	e021      	b.n	8004312 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	3301      	adds	r3, #1
 80042d2:	d01e      	beq.n	8004312 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042d4:	f7fe fa2a 	bl	800272c <HAL_GetTick>
 80042d8:	0002      	movs	r2, r0
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	68ba      	ldr	r2, [r7, #8]
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d302      	bcc.n	80042ea <I2C_IsAcknowledgeFailed+0x5e>
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d113      	bne.n	8004312 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ee:	2220      	movs	r2, #32
 80042f0:	431a      	orrs	r2, r3
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2241      	movs	r2, #65	; 0x41
 80042fa:	2120      	movs	r1, #32
 80042fc:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2242      	movs	r2, #66	; 0x42
 8004302:	2100      	movs	r1, #0
 8004304:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2240      	movs	r2, #64	; 0x40
 800430a:	2100      	movs	r1, #0
 800430c:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e02f      	b.n	8004372 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	699b      	ldr	r3, [r3, #24]
 8004318:	2220      	movs	r2, #32
 800431a:	4013      	ands	r3, r2
 800431c:	2b20      	cmp	r3, #32
 800431e:	d1d6      	bne.n	80042ce <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	2210      	movs	r2, #16
 8004326:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2220      	movs	r2, #32
 800432e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	0018      	movs	r0, r3
 8004334:	f7ff fece 	bl	80040d4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	685a      	ldr	r2, [r3, #4]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	490e      	ldr	r1, [pc, #56]	; (800437c <I2C_IsAcknowledgeFailed+0xf0>)
 8004344:	400a      	ands	r2, r1
 8004346:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800434c:	2204      	movs	r2, #4
 800434e:	431a      	orrs	r2, r3
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2241      	movs	r2, #65	; 0x41
 8004358:	2120      	movs	r1, #32
 800435a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2242      	movs	r2, #66	; 0x42
 8004360:	2100      	movs	r1, #0
 8004362:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2240      	movs	r2, #64	; 0x40
 8004368:	2100      	movs	r1, #0
 800436a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	e000      	b.n	8004372 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8004370:	2300      	movs	r3, #0
}
 8004372:	0018      	movs	r0, r3
 8004374:	46bd      	mov	sp, r7
 8004376:	b004      	add	sp, #16
 8004378:	bd80      	pop	{r7, pc}
 800437a:	46c0      	nop			; (mov r8, r8)
 800437c:	fe00e800 	.word	0xfe00e800

08004380 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004380:	b590      	push	{r4, r7, lr}
 8004382:	b085      	sub	sp, #20
 8004384:	af00      	add	r7, sp, #0
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	0008      	movs	r0, r1
 800438a:	0011      	movs	r1, r2
 800438c:	607b      	str	r3, [r7, #4]
 800438e:	240a      	movs	r4, #10
 8004390:	193b      	adds	r3, r7, r4
 8004392:	1c02      	adds	r2, r0, #0
 8004394:	801a      	strh	r2, [r3, #0]
 8004396:	2009      	movs	r0, #9
 8004398:	183b      	adds	r3, r7, r0
 800439a:	1c0a      	adds	r2, r1, #0
 800439c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	6a3a      	ldr	r2, [r7, #32]
 80043a6:	0d51      	lsrs	r1, r2, #21
 80043a8:	2280      	movs	r2, #128	; 0x80
 80043aa:	00d2      	lsls	r2, r2, #3
 80043ac:	400a      	ands	r2, r1
 80043ae:	490e      	ldr	r1, [pc, #56]	; (80043e8 <I2C_TransferConfig+0x68>)
 80043b0:	430a      	orrs	r2, r1
 80043b2:	43d2      	mvns	r2, r2
 80043b4:	401a      	ands	r2, r3
 80043b6:	0011      	movs	r1, r2
 80043b8:	193b      	adds	r3, r7, r4
 80043ba:	881b      	ldrh	r3, [r3, #0]
 80043bc:	059b      	lsls	r3, r3, #22
 80043be:	0d9a      	lsrs	r2, r3, #22
 80043c0:	183b      	adds	r3, r7, r0
 80043c2:	781b      	ldrb	r3, [r3, #0]
 80043c4:	0418      	lsls	r0, r3, #16
 80043c6:	23ff      	movs	r3, #255	; 0xff
 80043c8:	041b      	lsls	r3, r3, #16
 80043ca:	4003      	ands	r3, r0
 80043cc:	431a      	orrs	r2, r3
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	431a      	orrs	r2, r3
 80043d2:	6a3b      	ldr	r3, [r7, #32]
 80043d4:	431a      	orrs	r2, r3
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	430a      	orrs	r2, r1
 80043dc:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 80043de:	46c0      	nop			; (mov r8, r8)
 80043e0:	46bd      	mov	sp, r7
 80043e2:	b005      	add	sp, #20
 80043e4:	bd90      	pop	{r4, r7, pc}
 80043e6:	46c0      	nop			; (mov r8, r8)
 80043e8:	03ff63ff 	.word	0x03ff63ff

080043ec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2241      	movs	r2, #65	; 0x41
 80043fa:	5c9b      	ldrb	r3, [r3, r2]
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	2b20      	cmp	r3, #32
 8004400:	d138      	bne.n	8004474 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2240      	movs	r2, #64	; 0x40
 8004406:	5c9b      	ldrb	r3, [r3, r2]
 8004408:	2b01      	cmp	r3, #1
 800440a:	d101      	bne.n	8004410 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800440c:	2302      	movs	r3, #2
 800440e:	e032      	b.n	8004476 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2240      	movs	r2, #64	; 0x40
 8004414:	2101      	movs	r1, #1
 8004416:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2241      	movs	r2, #65	; 0x41
 800441c:	2124      	movs	r1, #36	; 0x24
 800441e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	2101      	movs	r1, #1
 800442c:	438a      	bics	r2, r1
 800442e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4911      	ldr	r1, [pc, #68]	; (8004480 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800443c:	400a      	ands	r2, r1
 800443e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	6819      	ldr	r1, [r3, #0]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	683a      	ldr	r2, [r7, #0]
 800444c:	430a      	orrs	r2, r1
 800444e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	2101      	movs	r1, #1
 800445c:	430a      	orrs	r2, r1
 800445e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2241      	movs	r2, #65	; 0x41
 8004464:	2120      	movs	r1, #32
 8004466:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2240      	movs	r2, #64	; 0x40
 800446c:	2100      	movs	r1, #0
 800446e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004470:	2300      	movs	r3, #0
 8004472:	e000      	b.n	8004476 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004474:	2302      	movs	r3, #2
  }
}
 8004476:	0018      	movs	r0, r3
 8004478:	46bd      	mov	sp, r7
 800447a:	b002      	add	sp, #8
 800447c:	bd80      	pop	{r7, pc}
 800447e:	46c0      	nop			; (mov r8, r8)
 8004480:	ffffefff 	.word	0xffffefff

08004484 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b084      	sub	sp, #16
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2241      	movs	r2, #65	; 0x41
 8004492:	5c9b      	ldrb	r3, [r3, r2]
 8004494:	b2db      	uxtb	r3, r3
 8004496:	2b20      	cmp	r3, #32
 8004498:	d139      	bne.n	800450e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2240      	movs	r2, #64	; 0x40
 800449e:	5c9b      	ldrb	r3, [r3, r2]
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d101      	bne.n	80044a8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80044a4:	2302      	movs	r3, #2
 80044a6:	e033      	b.n	8004510 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2240      	movs	r2, #64	; 0x40
 80044ac:	2101      	movs	r1, #1
 80044ae:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2241      	movs	r2, #65	; 0x41
 80044b4:	2124      	movs	r1, #36	; 0x24
 80044b6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	2101      	movs	r1, #1
 80044c4:	438a      	bics	r2, r1
 80044c6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	4a11      	ldr	r2, [pc, #68]	; (8004518 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80044d4:	4013      	ands	r3, r2
 80044d6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	021b      	lsls	r3, r3, #8
 80044dc:	68fa      	ldr	r2, [r7, #12]
 80044de:	4313      	orrs	r3, r2
 80044e0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	68fa      	ldr	r2, [r7, #12]
 80044e8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2101      	movs	r1, #1
 80044f6:	430a      	orrs	r2, r1
 80044f8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2241      	movs	r2, #65	; 0x41
 80044fe:	2120      	movs	r1, #32
 8004500:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2240      	movs	r2, #64	; 0x40
 8004506:	2100      	movs	r1, #0
 8004508:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800450a:	2300      	movs	r3, #0
 800450c:	e000      	b.n	8004510 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800450e:	2302      	movs	r3, #2
  }
}
 8004510:	0018      	movs	r0, r3
 8004512:	46bd      	mov	sp, r7
 8004514:	b004      	add	sp, #16
 8004516:	bd80      	pop	{r7, pc}
 8004518:	fffff0ff 	.word	0xfffff0ff

0800451c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b088      	sub	sp, #32
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d101      	bne.n	800452e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e305      	b.n	8004b3a <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	2201      	movs	r2, #1
 8004534:	4013      	ands	r3, r2
 8004536:	d100      	bne.n	800453a <HAL_RCC_OscConfig+0x1e>
 8004538:	e08d      	b.n	8004656 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800453a:	4bc5      	ldr	r3, [pc, #788]	; (8004850 <HAL_RCC_OscConfig+0x334>)
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	220c      	movs	r2, #12
 8004540:	4013      	ands	r3, r2
 8004542:	2b04      	cmp	r3, #4
 8004544:	d00e      	beq.n	8004564 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004546:	4bc2      	ldr	r3, [pc, #776]	; (8004850 <HAL_RCC_OscConfig+0x334>)
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	220c      	movs	r2, #12
 800454c:	4013      	ands	r3, r2
 800454e:	2b08      	cmp	r3, #8
 8004550:	d116      	bne.n	8004580 <HAL_RCC_OscConfig+0x64>
 8004552:	4bbf      	ldr	r3, [pc, #764]	; (8004850 <HAL_RCC_OscConfig+0x334>)
 8004554:	685a      	ldr	r2, [r3, #4]
 8004556:	23c0      	movs	r3, #192	; 0xc0
 8004558:	025b      	lsls	r3, r3, #9
 800455a:	401a      	ands	r2, r3
 800455c:	2380      	movs	r3, #128	; 0x80
 800455e:	025b      	lsls	r3, r3, #9
 8004560:	429a      	cmp	r2, r3
 8004562:	d10d      	bne.n	8004580 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004564:	4bba      	ldr	r3, [pc, #744]	; (8004850 <HAL_RCC_OscConfig+0x334>)
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	2380      	movs	r3, #128	; 0x80
 800456a:	029b      	lsls	r3, r3, #10
 800456c:	4013      	ands	r3, r2
 800456e:	d100      	bne.n	8004572 <HAL_RCC_OscConfig+0x56>
 8004570:	e070      	b.n	8004654 <HAL_RCC_OscConfig+0x138>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d000      	beq.n	800457c <HAL_RCC_OscConfig+0x60>
 800457a:	e06b      	b.n	8004654 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e2dc      	b.n	8004b3a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	2b01      	cmp	r3, #1
 8004586:	d107      	bne.n	8004598 <HAL_RCC_OscConfig+0x7c>
 8004588:	4bb1      	ldr	r3, [pc, #708]	; (8004850 <HAL_RCC_OscConfig+0x334>)
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	4bb0      	ldr	r3, [pc, #704]	; (8004850 <HAL_RCC_OscConfig+0x334>)
 800458e:	2180      	movs	r1, #128	; 0x80
 8004590:	0249      	lsls	r1, r1, #9
 8004592:	430a      	orrs	r2, r1
 8004594:	601a      	str	r2, [r3, #0]
 8004596:	e02f      	b.n	80045f8 <HAL_RCC_OscConfig+0xdc>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d10c      	bne.n	80045ba <HAL_RCC_OscConfig+0x9e>
 80045a0:	4bab      	ldr	r3, [pc, #684]	; (8004850 <HAL_RCC_OscConfig+0x334>)
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	4baa      	ldr	r3, [pc, #680]	; (8004850 <HAL_RCC_OscConfig+0x334>)
 80045a6:	49ab      	ldr	r1, [pc, #684]	; (8004854 <HAL_RCC_OscConfig+0x338>)
 80045a8:	400a      	ands	r2, r1
 80045aa:	601a      	str	r2, [r3, #0]
 80045ac:	4ba8      	ldr	r3, [pc, #672]	; (8004850 <HAL_RCC_OscConfig+0x334>)
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	4ba7      	ldr	r3, [pc, #668]	; (8004850 <HAL_RCC_OscConfig+0x334>)
 80045b2:	49a9      	ldr	r1, [pc, #676]	; (8004858 <HAL_RCC_OscConfig+0x33c>)
 80045b4:	400a      	ands	r2, r1
 80045b6:	601a      	str	r2, [r3, #0]
 80045b8:	e01e      	b.n	80045f8 <HAL_RCC_OscConfig+0xdc>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	2b05      	cmp	r3, #5
 80045c0:	d10e      	bne.n	80045e0 <HAL_RCC_OscConfig+0xc4>
 80045c2:	4ba3      	ldr	r3, [pc, #652]	; (8004850 <HAL_RCC_OscConfig+0x334>)
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	4ba2      	ldr	r3, [pc, #648]	; (8004850 <HAL_RCC_OscConfig+0x334>)
 80045c8:	2180      	movs	r1, #128	; 0x80
 80045ca:	02c9      	lsls	r1, r1, #11
 80045cc:	430a      	orrs	r2, r1
 80045ce:	601a      	str	r2, [r3, #0]
 80045d0:	4b9f      	ldr	r3, [pc, #636]	; (8004850 <HAL_RCC_OscConfig+0x334>)
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	4b9e      	ldr	r3, [pc, #632]	; (8004850 <HAL_RCC_OscConfig+0x334>)
 80045d6:	2180      	movs	r1, #128	; 0x80
 80045d8:	0249      	lsls	r1, r1, #9
 80045da:	430a      	orrs	r2, r1
 80045dc:	601a      	str	r2, [r3, #0]
 80045de:	e00b      	b.n	80045f8 <HAL_RCC_OscConfig+0xdc>
 80045e0:	4b9b      	ldr	r3, [pc, #620]	; (8004850 <HAL_RCC_OscConfig+0x334>)
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	4b9a      	ldr	r3, [pc, #616]	; (8004850 <HAL_RCC_OscConfig+0x334>)
 80045e6:	499b      	ldr	r1, [pc, #620]	; (8004854 <HAL_RCC_OscConfig+0x338>)
 80045e8:	400a      	ands	r2, r1
 80045ea:	601a      	str	r2, [r3, #0]
 80045ec:	4b98      	ldr	r3, [pc, #608]	; (8004850 <HAL_RCC_OscConfig+0x334>)
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	4b97      	ldr	r3, [pc, #604]	; (8004850 <HAL_RCC_OscConfig+0x334>)
 80045f2:	4999      	ldr	r1, [pc, #612]	; (8004858 <HAL_RCC_OscConfig+0x33c>)
 80045f4:	400a      	ands	r2, r1
 80045f6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d014      	beq.n	800462a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004600:	f7fe f894 	bl	800272c <HAL_GetTick>
 8004604:	0003      	movs	r3, r0
 8004606:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004608:	e008      	b.n	800461c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800460a:	f7fe f88f 	bl	800272c <HAL_GetTick>
 800460e:	0002      	movs	r2, r0
 8004610:	69bb      	ldr	r3, [r7, #24]
 8004612:	1ad3      	subs	r3, r2, r3
 8004614:	2b64      	cmp	r3, #100	; 0x64
 8004616:	d901      	bls.n	800461c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8004618:	2303      	movs	r3, #3
 800461a:	e28e      	b.n	8004b3a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800461c:	4b8c      	ldr	r3, [pc, #560]	; (8004850 <HAL_RCC_OscConfig+0x334>)
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	2380      	movs	r3, #128	; 0x80
 8004622:	029b      	lsls	r3, r3, #10
 8004624:	4013      	ands	r3, r2
 8004626:	d0f0      	beq.n	800460a <HAL_RCC_OscConfig+0xee>
 8004628:	e015      	b.n	8004656 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800462a:	f7fe f87f 	bl	800272c <HAL_GetTick>
 800462e:	0003      	movs	r3, r0
 8004630:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004632:	e008      	b.n	8004646 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004634:	f7fe f87a 	bl	800272c <HAL_GetTick>
 8004638:	0002      	movs	r2, r0
 800463a:	69bb      	ldr	r3, [r7, #24]
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	2b64      	cmp	r3, #100	; 0x64
 8004640:	d901      	bls.n	8004646 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	e279      	b.n	8004b3a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004646:	4b82      	ldr	r3, [pc, #520]	; (8004850 <HAL_RCC_OscConfig+0x334>)
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	2380      	movs	r3, #128	; 0x80
 800464c:	029b      	lsls	r3, r3, #10
 800464e:	4013      	ands	r3, r2
 8004650:	d1f0      	bne.n	8004634 <HAL_RCC_OscConfig+0x118>
 8004652:	e000      	b.n	8004656 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004654:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	2202      	movs	r2, #2
 800465c:	4013      	ands	r3, r2
 800465e:	d100      	bne.n	8004662 <HAL_RCC_OscConfig+0x146>
 8004660:	e06c      	b.n	800473c <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004662:	4b7b      	ldr	r3, [pc, #492]	; (8004850 <HAL_RCC_OscConfig+0x334>)
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	220c      	movs	r2, #12
 8004668:	4013      	ands	r3, r2
 800466a:	d00e      	beq.n	800468a <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800466c:	4b78      	ldr	r3, [pc, #480]	; (8004850 <HAL_RCC_OscConfig+0x334>)
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	220c      	movs	r2, #12
 8004672:	4013      	ands	r3, r2
 8004674:	2b08      	cmp	r3, #8
 8004676:	d11f      	bne.n	80046b8 <HAL_RCC_OscConfig+0x19c>
 8004678:	4b75      	ldr	r3, [pc, #468]	; (8004850 <HAL_RCC_OscConfig+0x334>)
 800467a:	685a      	ldr	r2, [r3, #4]
 800467c:	23c0      	movs	r3, #192	; 0xc0
 800467e:	025b      	lsls	r3, r3, #9
 8004680:	401a      	ands	r2, r3
 8004682:	2380      	movs	r3, #128	; 0x80
 8004684:	021b      	lsls	r3, r3, #8
 8004686:	429a      	cmp	r2, r3
 8004688:	d116      	bne.n	80046b8 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800468a:	4b71      	ldr	r3, [pc, #452]	; (8004850 <HAL_RCC_OscConfig+0x334>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2202      	movs	r2, #2
 8004690:	4013      	ands	r3, r2
 8004692:	d005      	beq.n	80046a0 <HAL_RCC_OscConfig+0x184>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	2b01      	cmp	r3, #1
 800469a:	d001      	beq.n	80046a0 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e24c      	b.n	8004b3a <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046a0:	4b6b      	ldr	r3, [pc, #428]	; (8004850 <HAL_RCC_OscConfig+0x334>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	22f8      	movs	r2, #248	; 0xf8
 80046a6:	4393      	bics	r3, r2
 80046a8:	0019      	movs	r1, r3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	00da      	lsls	r2, r3, #3
 80046b0:	4b67      	ldr	r3, [pc, #412]	; (8004850 <HAL_RCC_OscConfig+0x334>)
 80046b2:	430a      	orrs	r2, r1
 80046b4:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046b6:	e041      	b.n	800473c <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d024      	beq.n	800470a <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046c0:	4b63      	ldr	r3, [pc, #396]	; (8004850 <HAL_RCC_OscConfig+0x334>)
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	4b62      	ldr	r3, [pc, #392]	; (8004850 <HAL_RCC_OscConfig+0x334>)
 80046c6:	2101      	movs	r1, #1
 80046c8:	430a      	orrs	r2, r1
 80046ca:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046cc:	f7fe f82e 	bl	800272c <HAL_GetTick>
 80046d0:	0003      	movs	r3, r0
 80046d2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046d4:	e008      	b.n	80046e8 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046d6:	f7fe f829 	bl	800272c <HAL_GetTick>
 80046da:	0002      	movs	r2, r0
 80046dc:	69bb      	ldr	r3, [r7, #24]
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	2b02      	cmp	r3, #2
 80046e2:	d901      	bls.n	80046e8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80046e4:	2303      	movs	r3, #3
 80046e6:	e228      	b.n	8004b3a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046e8:	4b59      	ldr	r3, [pc, #356]	; (8004850 <HAL_RCC_OscConfig+0x334>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2202      	movs	r2, #2
 80046ee:	4013      	ands	r3, r2
 80046f0:	d0f1      	beq.n	80046d6 <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046f2:	4b57      	ldr	r3, [pc, #348]	; (8004850 <HAL_RCC_OscConfig+0x334>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	22f8      	movs	r2, #248	; 0xf8
 80046f8:	4393      	bics	r3, r2
 80046fa:	0019      	movs	r1, r3
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	691b      	ldr	r3, [r3, #16]
 8004700:	00da      	lsls	r2, r3, #3
 8004702:	4b53      	ldr	r3, [pc, #332]	; (8004850 <HAL_RCC_OscConfig+0x334>)
 8004704:	430a      	orrs	r2, r1
 8004706:	601a      	str	r2, [r3, #0]
 8004708:	e018      	b.n	800473c <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800470a:	4b51      	ldr	r3, [pc, #324]	; (8004850 <HAL_RCC_OscConfig+0x334>)
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	4b50      	ldr	r3, [pc, #320]	; (8004850 <HAL_RCC_OscConfig+0x334>)
 8004710:	2101      	movs	r1, #1
 8004712:	438a      	bics	r2, r1
 8004714:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004716:	f7fe f809 	bl	800272c <HAL_GetTick>
 800471a:	0003      	movs	r3, r0
 800471c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800471e:	e008      	b.n	8004732 <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004720:	f7fe f804 	bl	800272c <HAL_GetTick>
 8004724:	0002      	movs	r2, r0
 8004726:	69bb      	ldr	r3, [r7, #24]
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	2b02      	cmp	r3, #2
 800472c:	d901      	bls.n	8004732 <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	e203      	b.n	8004b3a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004732:	4b47      	ldr	r3, [pc, #284]	; (8004850 <HAL_RCC_OscConfig+0x334>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	2202      	movs	r2, #2
 8004738:	4013      	ands	r3, r2
 800473a:	d1f1      	bne.n	8004720 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2208      	movs	r2, #8
 8004742:	4013      	ands	r3, r2
 8004744:	d036      	beq.n	80047b4 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	69db      	ldr	r3, [r3, #28]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d019      	beq.n	8004782 <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800474e:	4b40      	ldr	r3, [pc, #256]	; (8004850 <HAL_RCC_OscConfig+0x334>)
 8004750:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004752:	4b3f      	ldr	r3, [pc, #252]	; (8004850 <HAL_RCC_OscConfig+0x334>)
 8004754:	2101      	movs	r1, #1
 8004756:	430a      	orrs	r2, r1
 8004758:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800475a:	f7fd ffe7 	bl	800272c <HAL_GetTick>
 800475e:	0003      	movs	r3, r0
 8004760:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004762:	e008      	b.n	8004776 <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004764:	f7fd ffe2 	bl	800272c <HAL_GetTick>
 8004768:	0002      	movs	r2, r0
 800476a:	69bb      	ldr	r3, [r7, #24]
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	2b02      	cmp	r3, #2
 8004770:	d901      	bls.n	8004776 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e1e1      	b.n	8004b3a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004776:	4b36      	ldr	r3, [pc, #216]	; (8004850 <HAL_RCC_OscConfig+0x334>)
 8004778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477a:	2202      	movs	r2, #2
 800477c:	4013      	ands	r3, r2
 800477e:	d0f1      	beq.n	8004764 <HAL_RCC_OscConfig+0x248>
 8004780:	e018      	b.n	80047b4 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004782:	4b33      	ldr	r3, [pc, #204]	; (8004850 <HAL_RCC_OscConfig+0x334>)
 8004784:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004786:	4b32      	ldr	r3, [pc, #200]	; (8004850 <HAL_RCC_OscConfig+0x334>)
 8004788:	2101      	movs	r1, #1
 800478a:	438a      	bics	r2, r1
 800478c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800478e:	f7fd ffcd 	bl	800272c <HAL_GetTick>
 8004792:	0003      	movs	r3, r0
 8004794:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004796:	e008      	b.n	80047aa <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004798:	f7fd ffc8 	bl	800272c <HAL_GetTick>
 800479c:	0002      	movs	r2, r0
 800479e:	69bb      	ldr	r3, [r7, #24]
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	2b02      	cmp	r3, #2
 80047a4:	d901      	bls.n	80047aa <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 80047a6:	2303      	movs	r3, #3
 80047a8:	e1c7      	b.n	8004b3a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047aa:	4b29      	ldr	r3, [pc, #164]	; (8004850 <HAL_RCC_OscConfig+0x334>)
 80047ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ae:	2202      	movs	r2, #2
 80047b0:	4013      	ands	r3, r2
 80047b2:	d1f1      	bne.n	8004798 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	2204      	movs	r2, #4
 80047ba:	4013      	ands	r3, r2
 80047bc:	d100      	bne.n	80047c0 <HAL_RCC_OscConfig+0x2a4>
 80047be:	e0b5      	b.n	800492c <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047c0:	201f      	movs	r0, #31
 80047c2:	183b      	adds	r3, r7, r0
 80047c4:	2200      	movs	r2, #0
 80047c6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047c8:	4b21      	ldr	r3, [pc, #132]	; (8004850 <HAL_RCC_OscConfig+0x334>)
 80047ca:	69da      	ldr	r2, [r3, #28]
 80047cc:	2380      	movs	r3, #128	; 0x80
 80047ce:	055b      	lsls	r3, r3, #21
 80047d0:	4013      	ands	r3, r2
 80047d2:	d110      	bne.n	80047f6 <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047d4:	4b1e      	ldr	r3, [pc, #120]	; (8004850 <HAL_RCC_OscConfig+0x334>)
 80047d6:	69da      	ldr	r2, [r3, #28]
 80047d8:	4b1d      	ldr	r3, [pc, #116]	; (8004850 <HAL_RCC_OscConfig+0x334>)
 80047da:	2180      	movs	r1, #128	; 0x80
 80047dc:	0549      	lsls	r1, r1, #21
 80047de:	430a      	orrs	r2, r1
 80047e0:	61da      	str	r2, [r3, #28]
 80047e2:	4b1b      	ldr	r3, [pc, #108]	; (8004850 <HAL_RCC_OscConfig+0x334>)
 80047e4:	69da      	ldr	r2, [r3, #28]
 80047e6:	2380      	movs	r3, #128	; 0x80
 80047e8:	055b      	lsls	r3, r3, #21
 80047ea:	4013      	ands	r3, r2
 80047ec:	60fb      	str	r3, [r7, #12]
 80047ee:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80047f0:	183b      	adds	r3, r7, r0
 80047f2:	2201      	movs	r2, #1
 80047f4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047f6:	4b19      	ldr	r3, [pc, #100]	; (800485c <HAL_RCC_OscConfig+0x340>)
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	2380      	movs	r3, #128	; 0x80
 80047fc:	005b      	lsls	r3, r3, #1
 80047fe:	4013      	ands	r3, r2
 8004800:	d11a      	bne.n	8004838 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004802:	4b16      	ldr	r3, [pc, #88]	; (800485c <HAL_RCC_OscConfig+0x340>)
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	4b15      	ldr	r3, [pc, #84]	; (800485c <HAL_RCC_OscConfig+0x340>)
 8004808:	2180      	movs	r1, #128	; 0x80
 800480a:	0049      	lsls	r1, r1, #1
 800480c:	430a      	orrs	r2, r1
 800480e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004810:	f7fd ff8c 	bl	800272c <HAL_GetTick>
 8004814:	0003      	movs	r3, r0
 8004816:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004818:	e008      	b.n	800482c <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800481a:	f7fd ff87 	bl	800272c <HAL_GetTick>
 800481e:	0002      	movs	r2, r0
 8004820:	69bb      	ldr	r3, [r7, #24]
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	2b64      	cmp	r3, #100	; 0x64
 8004826:	d901      	bls.n	800482c <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 8004828:	2303      	movs	r3, #3
 800482a:	e186      	b.n	8004b3a <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800482c:	4b0b      	ldr	r3, [pc, #44]	; (800485c <HAL_RCC_OscConfig+0x340>)
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	2380      	movs	r3, #128	; 0x80
 8004832:	005b      	lsls	r3, r3, #1
 8004834:	4013      	ands	r3, r2
 8004836:	d0f0      	beq.n	800481a <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	2b01      	cmp	r3, #1
 800483e:	d10f      	bne.n	8004860 <HAL_RCC_OscConfig+0x344>
 8004840:	4b03      	ldr	r3, [pc, #12]	; (8004850 <HAL_RCC_OscConfig+0x334>)
 8004842:	6a1a      	ldr	r2, [r3, #32]
 8004844:	4b02      	ldr	r3, [pc, #8]	; (8004850 <HAL_RCC_OscConfig+0x334>)
 8004846:	2101      	movs	r1, #1
 8004848:	430a      	orrs	r2, r1
 800484a:	621a      	str	r2, [r3, #32]
 800484c:	e036      	b.n	80048bc <HAL_RCC_OscConfig+0x3a0>
 800484e:	46c0      	nop			; (mov r8, r8)
 8004850:	40021000 	.word	0x40021000
 8004854:	fffeffff 	.word	0xfffeffff
 8004858:	fffbffff 	.word	0xfffbffff
 800485c:	40007000 	.word	0x40007000
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d10c      	bne.n	8004882 <HAL_RCC_OscConfig+0x366>
 8004868:	4bb6      	ldr	r3, [pc, #728]	; (8004b44 <HAL_RCC_OscConfig+0x628>)
 800486a:	6a1a      	ldr	r2, [r3, #32]
 800486c:	4bb5      	ldr	r3, [pc, #724]	; (8004b44 <HAL_RCC_OscConfig+0x628>)
 800486e:	2101      	movs	r1, #1
 8004870:	438a      	bics	r2, r1
 8004872:	621a      	str	r2, [r3, #32]
 8004874:	4bb3      	ldr	r3, [pc, #716]	; (8004b44 <HAL_RCC_OscConfig+0x628>)
 8004876:	6a1a      	ldr	r2, [r3, #32]
 8004878:	4bb2      	ldr	r3, [pc, #712]	; (8004b44 <HAL_RCC_OscConfig+0x628>)
 800487a:	2104      	movs	r1, #4
 800487c:	438a      	bics	r2, r1
 800487e:	621a      	str	r2, [r3, #32]
 8004880:	e01c      	b.n	80048bc <HAL_RCC_OscConfig+0x3a0>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	2b05      	cmp	r3, #5
 8004888:	d10c      	bne.n	80048a4 <HAL_RCC_OscConfig+0x388>
 800488a:	4bae      	ldr	r3, [pc, #696]	; (8004b44 <HAL_RCC_OscConfig+0x628>)
 800488c:	6a1a      	ldr	r2, [r3, #32]
 800488e:	4bad      	ldr	r3, [pc, #692]	; (8004b44 <HAL_RCC_OscConfig+0x628>)
 8004890:	2104      	movs	r1, #4
 8004892:	430a      	orrs	r2, r1
 8004894:	621a      	str	r2, [r3, #32]
 8004896:	4bab      	ldr	r3, [pc, #684]	; (8004b44 <HAL_RCC_OscConfig+0x628>)
 8004898:	6a1a      	ldr	r2, [r3, #32]
 800489a:	4baa      	ldr	r3, [pc, #680]	; (8004b44 <HAL_RCC_OscConfig+0x628>)
 800489c:	2101      	movs	r1, #1
 800489e:	430a      	orrs	r2, r1
 80048a0:	621a      	str	r2, [r3, #32]
 80048a2:	e00b      	b.n	80048bc <HAL_RCC_OscConfig+0x3a0>
 80048a4:	4ba7      	ldr	r3, [pc, #668]	; (8004b44 <HAL_RCC_OscConfig+0x628>)
 80048a6:	6a1a      	ldr	r2, [r3, #32]
 80048a8:	4ba6      	ldr	r3, [pc, #664]	; (8004b44 <HAL_RCC_OscConfig+0x628>)
 80048aa:	2101      	movs	r1, #1
 80048ac:	438a      	bics	r2, r1
 80048ae:	621a      	str	r2, [r3, #32]
 80048b0:	4ba4      	ldr	r3, [pc, #656]	; (8004b44 <HAL_RCC_OscConfig+0x628>)
 80048b2:	6a1a      	ldr	r2, [r3, #32]
 80048b4:	4ba3      	ldr	r3, [pc, #652]	; (8004b44 <HAL_RCC_OscConfig+0x628>)
 80048b6:	2104      	movs	r1, #4
 80048b8:	438a      	bics	r2, r1
 80048ba:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d014      	beq.n	80048ee <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048c4:	f7fd ff32 	bl	800272c <HAL_GetTick>
 80048c8:	0003      	movs	r3, r0
 80048ca:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048cc:	e009      	b.n	80048e2 <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048ce:	f7fd ff2d 	bl	800272c <HAL_GetTick>
 80048d2:	0002      	movs	r2, r0
 80048d4:	69bb      	ldr	r3, [r7, #24]
 80048d6:	1ad3      	subs	r3, r2, r3
 80048d8:	4a9b      	ldr	r2, [pc, #620]	; (8004b48 <HAL_RCC_OscConfig+0x62c>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d901      	bls.n	80048e2 <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 80048de:	2303      	movs	r3, #3
 80048e0:	e12b      	b.n	8004b3a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048e2:	4b98      	ldr	r3, [pc, #608]	; (8004b44 <HAL_RCC_OscConfig+0x628>)
 80048e4:	6a1b      	ldr	r3, [r3, #32]
 80048e6:	2202      	movs	r2, #2
 80048e8:	4013      	ands	r3, r2
 80048ea:	d0f0      	beq.n	80048ce <HAL_RCC_OscConfig+0x3b2>
 80048ec:	e013      	b.n	8004916 <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048ee:	f7fd ff1d 	bl	800272c <HAL_GetTick>
 80048f2:	0003      	movs	r3, r0
 80048f4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048f6:	e009      	b.n	800490c <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048f8:	f7fd ff18 	bl	800272c <HAL_GetTick>
 80048fc:	0002      	movs	r2, r0
 80048fe:	69bb      	ldr	r3, [r7, #24]
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	4a91      	ldr	r2, [pc, #580]	; (8004b48 <HAL_RCC_OscConfig+0x62c>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d901      	bls.n	800490c <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8004908:	2303      	movs	r3, #3
 800490a:	e116      	b.n	8004b3a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800490c:	4b8d      	ldr	r3, [pc, #564]	; (8004b44 <HAL_RCC_OscConfig+0x628>)
 800490e:	6a1b      	ldr	r3, [r3, #32]
 8004910:	2202      	movs	r2, #2
 8004912:	4013      	ands	r3, r2
 8004914:	d1f0      	bne.n	80048f8 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004916:	231f      	movs	r3, #31
 8004918:	18fb      	adds	r3, r7, r3
 800491a:	781b      	ldrb	r3, [r3, #0]
 800491c:	2b01      	cmp	r3, #1
 800491e:	d105      	bne.n	800492c <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004920:	4b88      	ldr	r3, [pc, #544]	; (8004b44 <HAL_RCC_OscConfig+0x628>)
 8004922:	69da      	ldr	r2, [r3, #28]
 8004924:	4b87      	ldr	r3, [pc, #540]	; (8004b44 <HAL_RCC_OscConfig+0x628>)
 8004926:	4989      	ldr	r1, [pc, #548]	; (8004b4c <HAL_RCC_OscConfig+0x630>)
 8004928:	400a      	ands	r2, r1
 800492a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2210      	movs	r2, #16
 8004932:	4013      	ands	r3, r2
 8004934:	d063      	beq.n	80049fe <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	695b      	ldr	r3, [r3, #20]
 800493a:	2b01      	cmp	r3, #1
 800493c:	d12a      	bne.n	8004994 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800493e:	4b81      	ldr	r3, [pc, #516]	; (8004b44 <HAL_RCC_OscConfig+0x628>)
 8004940:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004942:	4b80      	ldr	r3, [pc, #512]	; (8004b44 <HAL_RCC_OscConfig+0x628>)
 8004944:	2104      	movs	r1, #4
 8004946:	430a      	orrs	r2, r1
 8004948:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800494a:	4b7e      	ldr	r3, [pc, #504]	; (8004b44 <HAL_RCC_OscConfig+0x628>)
 800494c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800494e:	4b7d      	ldr	r3, [pc, #500]	; (8004b44 <HAL_RCC_OscConfig+0x628>)
 8004950:	2101      	movs	r1, #1
 8004952:	430a      	orrs	r2, r1
 8004954:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004956:	f7fd fee9 	bl	800272c <HAL_GetTick>
 800495a:	0003      	movs	r3, r0
 800495c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800495e:	e008      	b.n	8004972 <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004960:	f7fd fee4 	bl	800272c <HAL_GetTick>
 8004964:	0002      	movs	r2, r0
 8004966:	69bb      	ldr	r3, [r7, #24]
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	2b02      	cmp	r3, #2
 800496c:	d901      	bls.n	8004972 <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	e0e3      	b.n	8004b3a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004972:	4b74      	ldr	r3, [pc, #464]	; (8004b44 <HAL_RCC_OscConfig+0x628>)
 8004974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004976:	2202      	movs	r2, #2
 8004978:	4013      	ands	r3, r2
 800497a:	d0f1      	beq.n	8004960 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800497c:	4b71      	ldr	r3, [pc, #452]	; (8004b44 <HAL_RCC_OscConfig+0x628>)
 800497e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004980:	22f8      	movs	r2, #248	; 0xf8
 8004982:	4393      	bics	r3, r2
 8004984:	0019      	movs	r1, r3
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	699b      	ldr	r3, [r3, #24]
 800498a:	00da      	lsls	r2, r3, #3
 800498c:	4b6d      	ldr	r3, [pc, #436]	; (8004b44 <HAL_RCC_OscConfig+0x628>)
 800498e:	430a      	orrs	r2, r1
 8004990:	635a      	str	r2, [r3, #52]	; 0x34
 8004992:	e034      	b.n	80049fe <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	695b      	ldr	r3, [r3, #20]
 8004998:	3305      	adds	r3, #5
 800499a:	d111      	bne.n	80049c0 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800499c:	4b69      	ldr	r3, [pc, #420]	; (8004b44 <HAL_RCC_OscConfig+0x628>)
 800499e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049a0:	4b68      	ldr	r3, [pc, #416]	; (8004b44 <HAL_RCC_OscConfig+0x628>)
 80049a2:	2104      	movs	r1, #4
 80049a4:	438a      	bics	r2, r1
 80049a6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80049a8:	4b66      	ldr	r3, [pc, #408]	; (8004b44 <HAL_RCC_OscConfig+0x628>)
 80049aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049ac:	22f8      	movs	r2, #248	; 0xf8
 80049ae:	4393      	bics	r3, r2
 80049b0:	0019      	movs	r1, r3
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	699b      	ldr	r3, [r3, #24]
 80049b6:	00da      	lsls	r2, r3, #3
 80049b8:	4b62      	ldr	r3, [pc, #392]	; (8004b44 <HAL_RCC_OscConfig+0x628>)
 80049ba:	430a      	orrs	r2, r1
 80049bc:	635a      	str	r2, [r3, #52]	; 0x34
 80049be:	e01e      	b.n	80049fe <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80049c0:	4b60      	ldr	r3, [pc, #384]	; (8004b44 <HAL_RCC_OscConfig+0x628>)
 80049c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049c4:	4b5f      	ldr	r3, [pc, #380]	; (8004b44 <HAL_RCC_OscConfig+0x628>)
 80049c6:	2104      	movs	r1, #4
 80049c8:	430a      	orrs	r2, r1
 80049ca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80049cc:	4b5d      	ldr	r3, [pc, #372]	; (8004b44 <HAL_RCC_OscConfig+0x628>)
 80049ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049d0:	4b5c      	ldr	r3, [pc, #368]	; (8004b44 <HAL_RCC_OscConfig+0x628>)
 80049d2:	2101      	movs	r1, #1
 80049d4:	438a      	bics	r2, r1
 80049d6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049d8:	f7fd fea8 	bl	800272c <HAL_GetTick>
 80049dc:	0003      	movs	r3, r0
 80049de:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80049e0:	e008      	b.n	80049f4 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80049e2:	f7fd fea3 	bl	800272c <HAL_GetTick>
 80049e6:	0002      	movs	r2, r0
 80049e8:	69bb      	ldr	r3, [r7, #24]
 80049ea:	1ad3      	subs	r3, r2, r3
 80049ec:	2b02      	cmp	r3, #2
 80049ee:	d901      	bls.n	80049f4 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 80049f0:	2303      	movs	r3, #3
 80049f2:	e0a2      	b.n	8004b3a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80049f4:	4b53      	ldr	r3, [pc, #332]	; (8004b44 <HAL_RCC_OscConfig+0x628>)
 80049f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049f8:	2202      	movs	r2, #2
 80049fa:	4013      	ands	r3, r2
 80049fc:	d1f1      	bne.n	80049e2 <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6a1b      	ldr	r3, [r3, #32]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d100      	bne.n	8004a08 <HAL_RCC_OscConfig+0x4ec>
 8004a06:	e097      	b.n	8004b38 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a08:	4b4e      	ldr	r3, [pc, #312]	; (8004b44 <HAL_RCC_OscConfig+0x628>)
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	220c      	movs	r2, #12
 8004a0e:	4013      	ands	r3, r2
 8004a10:	2b08      	cmp	r3, #8
 8004a12:	d100      	bne.n	8004a16 <HAL_RCC_OscConfig+0x4fa>
 8004a14:	e06b      	b.n	8004aee <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a1b      	ldr	r3, [r3, #32]
 8004a1a:	2b02      	cmp	r3, #2
 8004a1c:	d14c      	bne.n	8004ab8 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a1e:	4b49      	ldr	r3, [pc, #292]	; (8004b44 <HAL_RCC_OscConfig+0x628>)
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	4b48      	ldr	r3, [pc, #288]	; (8004b44 <HAL_RCC_OscConfig+0x628>)
 8004a24:	494a      	ldr	r1, [pc, #296]	; (8004b50 <HAL_RCC_OscConfig+0x634>)
 8004a26:	400a      	ands	r2, r1
 8004a28:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a2a:	f7fd fe7f 	bl	800272c <HAL_GetTick>
 8004a2e:	0003      	movs	r3, r0
 8004a30:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a32:	e008      	b.n	8004a46 <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a34:	f7fd fe7a 	bl	800272c <HAL_GetTick>
 8004a38:	0002      	movs	r2, r0
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	2b02      	cmp	r3, #2
 8004a40:	d901      	bls.n	8004a46 <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	e079      	b.n	8004b3a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a46:	4b3f      	ldr	r3, [pc, #252]	; (8004b44 <HAL_RCC_OscConfig+0x628>)
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	2380      	movs	r3, #128	; 0x80
 8004a4c:	049b      	lsls	r3, r3, #18
 8004a4e:	4013      	ands	r3, r2
 8004a50:	d1f0      	bne.n	8004a34 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a52:	4b3c      	ldr	r3, [pc, #240]	; (8004b44 <HAL_RCC_OscConfig+0x628>)
 8004a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a56:	220f      	movs	r2, #15
 8004a58:	4393      	bics	r3, r2
 8004a5a:	0019      	movs	r1, r3
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a60:	4b38      	ldr	r3, [pc, #224]	; (8004b44 <HAL_RCC_OscConfig+0x628>)
 8004a62:	430a      	orrs	r2, r1
 8004a64:	62da      	str	r2, [r3, #44]	; 0x2c
 8004a66:	4b37      	ldr	r3, [pc, #220]	; (8004b44 <HAL_RCC_OscConfig+0x628>)
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	4a3a      	ldr	r2, [pc, #232]	; (8004b54 <HAL_RCC_OscConfig+0x638>)
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	0019      	movs	r1, r3
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a78:	431a      	orrs	r2, r3
 8004a7a:	4b32      	ldr	r3, [pc, #200]	; (8004b44 <HAL_RCC_OscConfig+0x628>)
 8004a7c:	430a      	orrs	r2, r1
 8004a7e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a80:	4b30      	ldr	r3, [pc, #192]	; (8004b44 <HAL_RCC_OscConfig+0x628>)
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	4b2f      	ldr	r3, [pc, #188]	; (8004b44 <HAL_RCC_OscConfig+0x628>)
 8004a86:	2180      	movs	r1, #128	; 0x80
 8004a88:	0449      	lsls	r1, r1, #17
 8004a8a:	430a      	orrs	r2, r1
 8004a8c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a8e:	f7fd fe4d 	bl	800272c <HAL_GetTick>
 8004a92:	0003      	movs	r3, r0
 8004a94:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a96:	e008      	b.n	8004aaa <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a98:	f7fd fe48 	bl	800272c <HAL_GetTick>
 8004a9c:	0002      	movs	r2, r0
 8004a9e:	69bb      	ldr	r3, [r7, #24]
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	2b02      	cmp	r3, #2
 8004aa4:	d901      	bls.n	8004aaa <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	e047      	b.n	8004b3a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004aaa:	4b26      	ldr	r3, [pc, #152]	; (8004b44 <HAL_RCC_OscConfig+0x628>)
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	2380      	movs	r3, #128	; 0x80
 8004ab0:	049b      	lsls	r3, r3, #18
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	d0f0      	beq.n	8004a98 <HAL_RCC_OscConfig+0x57c>
 8004ab6:	e03f      	b.n	8004b38 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ab8:	4b22      	ldr	r3, [pc, #136]	; (8004b44 <HAL_RCC_OscConfig+0x628>)
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	4b21      	ldr	r3, [pc, #132]	; (8004b44 <HAL_RCC_OscConfig+0x628>)
 8004abe:	4924      	ldr	r1, [pc, #144]	; (8004b50 <HAL_RCC_OscConfig+0x634>)
 8004ac0:	400a      	ands	r2, r1
 8004ac2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ac4:	f7fd fe32 	bl	800272c <HAL_GetTick>
 8004ac8:	0003      	movs	r3, r0
 8004aca:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004acc:	e008      	b.n	8004ae0 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ace:	f7fd fe2d 	bl	800272c <HAL_GetTick>
 8004ad2:	0002      	movs	r2, r0
 8004ad4:	69bb      	ldr	r3, [r7, #24]
 8004ad6:	1ad3      	subs	r3, r2, r3
 8004ad8:	2b02      	cmp	r3, #2
 8004ada:	d901      	bls.n	8004ae0 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8004adc:	2303      	movs	r3, #3
 8004ade:	e02c      	b.n	8004b3a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ae0:	4b18      	ldr	r3, [pc, #96]	; (8004b44 <HAL_RCC_OscConfig+0x628>)
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	2380      	movs	r3, #128	; 0x80
 8004ae6:	049b      	lsls	r3, r3, #18
 8004ae8:	4013      	ands	r3, r2
 8004aea:	d1f0      	bne.n	8004ace <HAL_RCC_OscConfig+0x5b2>
 8004aec:	e024      	b.n	8004b38 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a1b      	ldr	r3, [r3, #32]
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d101      	bne.n	8004afa <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e01f      	b.n	8004b3a <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8004afa:	4b12      	ldr	r3, [pc, #72]	; (8004b44 <HAL_RCC_OscConfig+0x628>)
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8004b00:	4b10      	ldr	r3, [pc, #64]	; (8004b44 <HAL_RCC_OscConfig+0x628>)
 8004b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b04:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b06:	697a      	ldr	r2, [r7, #20]
 8004b08:	23c0      	movs	r3, #192	; 0xc0
 8004b0a:	025b      	lsls	r3, r3, #9
 8004b0c:	401a      	ands	r2, r3
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d10e      	bne.n	8004b34 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	220f      	movs	r2, #15
 8004b1a:	401a      	ands	r2, r3
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d107      	bne.n	8004b34 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004b24:	697a      	ldr	r2, [r7, #20]
 8004b26:	23f0      	movs	r3, #240	; 0xf0
 8004b28:	039b      	lsls	r3, r3, #14
 8004b2a:	401a      	ands	r2, r3
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d001      	beq.n	8004b38 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e000      	b.n	8004b3a <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8004b38:	2300      	movs	r3, #0
}
 8004b3a:	0018      	movs	r0, r3
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	b008      	add	sp, #32
 8004b40:	bd80      	pop	{r7, pc}
 8004b42:	46c0      	nop			; (mov r8, r8)
 8004b44:	40021000 	.word	0x40021000
 8004b48:	00001388 	.word	0x00001388
 8004b4c:	efffffff 	.word	0xefffffff
 8004b50:	feffffff 	.word	0xfeffffff
 8004b54:	ffc27fff 	.word	0xffc27fff

08004b58 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b084      	sub	sp, #16
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d101      	bne.n	8004b6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e0b3      	b.n	8004cd4 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b6c:	4b5b      	ldr	r3, [pc, #364]	; (8004cdc <HAL_RCC_ClockConfig+0x184>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	2201      	movs	r2, #1
 8004b72:	4013      	ands	r3, r2
 8004b74:	683a      	ldr	r2, [r7, #0]
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d911      	bls.n	8004b9e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b7a:	4b58      	ldr	r3, [pc, #352]	; (8004cdc <HAL_RCC_ClockConfig+0x184>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	4393      	bics	r3, r2
 8004b82:	0019      	movs	r1, r3
 8004b84:	4b55      	ldr	r3, [pc, #340]	; (8004cdc <HAL_RCC_ClockConfig+0x184>)
 8004b86:	683a      	ldr	r2, [r7, #0]
 8004b88:	430a      	orrs	r2, r1
 8004b8a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b8c:	4b53      	ldr	r3, [pc, #332]	; (8004cdc <HAL_RCC_ClockConfig+0x184>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	2201      	movs	r2, #1
 8004b92:	4013      	ands	r3, r2
 8004b94:	683a      	ldr	r2, [r7, #0]
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d001      	beq.n	8004b9e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e09a      	b.n	8004cd4 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	2202      	movs	r2, #2
 8004ba4:	4013      	ands	r3, r2
 8004ba6:	d015      	beq.n	8004bd4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	2204      	movs	r2, #4
 8004bae:	4013      	ands	r3, r2
 8004bb0:	d006      	beq.n	8004bc0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004bb2:	4b4b      	ldr	r3, [pc, #300]	; (8004ce0 <HAL_RCC_ClockConfig+0x188>)
 8004bb4:	685a      	ldr	r2, [r3, #4]
 8004bb6:	4b4a      	ldr	r3, [pc, #296]	; (8004ce0 <HAL_RCC_ClockConfig+0x188>)
 8004bb8:	21e0      	movs	r1, #224	; 0xe0
 8004bba:	00c9      	lsls	r1, r1, #3
 8004bbc:	430a      	orrs	r2, r1
 8004bbe:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bc0:	4b47      	ldr	r3, [pc, #284]	; (8004ce0 <HAL_RCC_ClockConfig+0x188>)
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	22f0      	movs	r2, #240	; 0xf0
 8004bc6:	4393      	bics	r3, r2
 8004bc8:	0019      	movs	r1, r3
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	689a      	ldr	r2, [r3, #8]
 8004bce:	4b44      	ldr	r3, [pc, #272]	; (8004ce0 <HAL_RCC_ClockConfig+0x188>)
 8004bd0:	430a      	orrs	r2, r1
 8004bd2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	2201      	movs	r2, #1
 8004bda:	4013      	ands	r3, r2
 8004bdc:	d040      	beq.n	8004c60 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d107      	bne.n	8004bf6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004be6:	4b3e      	ldr	r3, [pc, #248]	; (8004ce0 <HAL_RCC_ClockConfig+0x188>)
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	2380      	movs	r3, #128	; 0x80
 8004bec:	029b      	lsls	r3, r3, #10
 8004bee:	4013      	ands	r3, r2
 8004bf0:	d114      	bne.n	8004c1c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e06e      	b.n	8004cd4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	2b02      	cmp	r3, #2
 8004bfc:	d107      	bne.n	8004c0e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bfe:	4b38      	ldr	r3, [pc, #224]	; (8004ce0 <HAL_RCC_ClockConfig+0x188>)
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	2380      	movs	r3, #128	; 0x80
 8004c04:	049b      	lsls	r3, r3, #18
 8004c06:	4013      	ands	r3, r2
 8004c08:	d108      	bne.n	8004c1c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e062      	b.n	8004cd4 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c0e:	4b34      	ldr	r3, [pc, #208]	; (8004ce0 <HAL_RCC_ClockConfig+0x188>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	2202      	movs	r2, #2
 8004c14:	4013      	ands	r3, r2
 8004c16:	d101      	bne.n	8004c1c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e05b      	b.n	8004cd4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c1c:	4b30      	ldr	r3, [pc, #192]	; (8004ce0 <HAL_RCC_ClockConfig+0x188>)
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	2203      	movs	r2, #3
 8004c22:	4393      	bics	r3, r2
 8004c24:	0019      	movs	r1, r3
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	685a      	ldr	r2, [r3, #4]
 8004c2a:	4b2d      	ldr	r3, [pc, #180]	; (8004ce0 <HAL_RCC_ClockConfig+0x188>)
 8004c2c:	430a      	orrs	r2, r1
 8004c2e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c30:	f7fd fd7c 	bl	800272c <HAL_GetTick>
 8004c34:	0003      	movs	r3, r0
 8004c36:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c38:	e009      	b.n	8004c4e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c3a:	f7fd fd77 	bl	800272c <HAL_GetTick>
 8004c3e:	0002      	movs	r2, r0
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	1ad3      	subs	r3, r2, r3
 8004c44:	4a27      	ldr	r2, [pc, #156]	; (8004ce4 <HAL_RCC_ClockConfig+0x18c>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d901      	bls.n	8004c4e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	e042      	b.n	8004cd4 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c4e:	4b24      	ldr	r3, [pc, #144]	; (8004ce0 <HAL_RCC_ClockConfig+0x188>)
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	220c      	movs	r2, #12
 8004c54:	401a      	ands	r2, r3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d1ec      	bne.n	8004c3a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c60:	4b1e      	ldr	r3, [pc, #120]	; (8004cdc <HAL_RCC_ClockConfig+0x184>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	2201      	movs	r2, #1
 8004c66:	4013      	ands	r3, r2
 8004c68:	683a      	ldr	r2, [r7, #0]
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d211      	bcs.n	8004c92 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c6e:	4b1b      	ldr	r3, [pc, #108]	; (8004cdc <HAL_RCC_ClockConfig+0x184>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	2201      	movs	r2, #1
 8004c74:	4393      	bics	r3, r2
 8004c76:	0019      	movs	r1, r3
 8004c78:	4b18      	ldr	r3, [pc, #96]	; (8004cdc <HAL_RCC_ClockConfig+0x184>)
 8004c7a:	683a      	ldr	r2, [r7, #0]
 8004c7c:	430a      	orrs	r2, r1
 8004c7e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c80:	4b16      	ldr	r3, [pc, #88]	; (8004cdc <HAL_RCC_ClockConfig+0x184>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	2201      	movs	r2, #1
 8004c86:	4013      	ands	r3, r2
 8004c88:	683a      	ldr	r2, [r7, #0]
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d001      	beq.n	8004c92 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e020      	b.n	8004cd4 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	2204      	movs	r2, #4
 8004c98:	4013      	ands	r3, r2
 8004c9a:	d009      	beq.n	8004cb0 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004c9c:	4b10      	ldr	r3, [pc, #64]	; (8004ce0 <HAL_RCC_ClockConfig+0x188>)
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	4a11      	ldr	r2, [pc, #68]	; (8004ce8 <HAL_RCC_ClockConfig+0x190>)
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	0019      	movs	r1, r3
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	68da      	ldr	r2, [r3, #12]
 8004caa:	4b0d      	ldr	r3, [pc, #52]	; (8004ce0 <HAL_RCC_ClockConfig+0x188>)
 8004cac:	430a      	orrs	r2, r1
 8004cae:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004cb0:	f000 f820 	bl	8004cf4 <HAL_RCC_GetSysClockFreq>
 8004cb4:	0001      	movs	r1, r0
 8004cb6:	4b0a      	ldr	r3, [pc, #40]	; (8004ce0 <HAL_RCC_ClockConfig+0x188>)
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	091b      	lsrs	r3, r3, #4
 8004cbc:	220f      	movs	r2, #15
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	4a0a      	ldr	r2, [pc, #40]	; (8004cec <HAL_RCC_ClockConfig+0x194>)
 8004cc2:	5cd3      	ldrb	r3, [r2, r3]
 8004cc4:	000a      	movs	r2, r1
 8004cc6:	40da      	lsrs	r2, r3
 8004cc8:	4b09      	ldr	r3, [pc, #36]	; (8004cf0 <HAL_RCC_ClockConfig+0x198>)
 8004cca:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004ccc:	2003      	movs	r0, #3
 8004cce:	f7fd fce7 	bl	80026a0 <HAL_InitTick>
  
  return HAL_OK;
 8004cd2:	2300      	movs	r3, #0
}
 8004cd4:	0018      	movs	r0, r3
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	b004      	add	sp, #16
 8004cda:	bd80      	pop	{r7, pc}
 8004cdc:	40022000 	.word	0x40022000
 8004ce0:	40021000 	.word	0x40021000
 8004ce4:	00001388 	.word	0x00001388
 8004ce8:	fffff8ff 	.word	0xfffff8ff
 8004cec:	08009798 	.word	0x08009798
 8004cf0:	20000004 	.word	0x20000004

08004cf4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cf4:	b590      	push	{r4, r7, lr}
 8004cf6:	b08f      	sub	sp, #60	; 0x3c
 8004cf8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8004cfa:	2314      	movs	r3, #20
 8004cfc:	18fb      	adds	r3, r7, r3
 8004cfe:	4a2c      	ldr	r2, [pc, #176]	; (8004db0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004d00:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004d02:	c313      	stmia	r3!, {r0, r1, r4}
 8004d04:	6812      	ldr	r2, [r2, #0]
 8004d06:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8004d08:	1d3b      	adds	r3, r7, #4
 8004d0a:	4a2a      	ldr	r2, [pc, #168]	; (8004db4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004d0c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004d0e:	c313      	stmia	r3!, {r0, r1, r4}
 8004d10:	6812      	ldr	r2, [r2, #0]
 8004d12:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004d14:	2300      	movs	r3, #0
 8004d16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d18:	2300      	movs	r3, #0
 8004d1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	637b      	str	r3, [r7, #52]	; 0x34
 8004d20:	2300      	movs	r3, #0
 8004d22:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8004d24:	2300      	movs	r3, #0
 8004d26:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8004d28:	4b23      	ldr	r3, [pc, #140]	; (8004db8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d30:	220c      	movs	r2, #12
 8004d32:	4013      	ands	r3, r2
 8004d34:	2b04      	cmp	r3, #4
 8004d36:	d002      	beq.n	8004d3e <HAL_RCC_GetSysClockFreq+0x4a>
 8004d38:	2b08      	cmp	r3, #8
 8004d3a:	d003      	beq.n	8004d44 <HAL_RCC_GetSysClockFreq+0x50>
 8004d3c:	e02f      	b.n	8004d9e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004d3e:	4b1f      	ldr	r3, [pc, #124]	; (8004dbc <HAL_RCC_GetSysClockFreq+0xc8>)
 8004d40:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004d42:	e02f      	b.n	8004da4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d46:	0c9b      	lsrs	r3, r3, #18
 8004d48:	220f      	movs	r2, #15
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	2214      	movs	r2, #20
 8004d4e:	18ba      	adds	r2, r7, r2
 8004d50:	5cd3      	ldrb	r3, [r2, r3]
 8004d52:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004d54:	4b18      	ldr	r3, [pc, #96]	; (8004db8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d58:	220f      	movs	r2, #15
 8004d5a:	4013      	ands	r3, r2
 8004d5c:	1d3a      	adds	r2, r7, #4
 8004d5e:	5cd3      	ldrb	r3, [r2, r3]
 8004d60:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004d62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d64:	23c0      	movs	r3, #192	; 0xc0
 8004d66:	025b      	lsls	r3, r3, #9
 8004d68:	401a      	ands	r2, r3
 8004d6a:	2380      	movs	r3, #128	; 0x80
 8004d6c:	025b      	lsls	r3, r3, #9
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d109      	bne.n	8004d86 <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004d72:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d74:	4811      	ldr	r0, [pc, #68]	; (8004dbc <HAL_RCC_GetSysClockFreq+0xc8>)
 8004d76:	f7fb f9d1 	bl	800011c <__udivsi3>
 8004d7a:	0003      	movs	r3, r0
 8004d7c:	001a      	movs	r2, r3
 8004d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d80:	4353      	muls	r3, r2
 8004d82:	637b      	str	r3, [r7, #52]	; 0x34
 8004d84:	e008      	b.n	8004d98 <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004d86:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d88:	480c      	ldr	r0, [pc, #48]	; (8004dbc <HAL_RCC_GetSysClockFreq+0xc8>)
 8004d8a:	f7fb f9c7 	bl	800011c <__udivsi3>
 8004d8e:	0003      	movs	r3, r0
 8004d90:	001a      	movs	r2, r3
 8004d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d94:	4353      	muls	r3, r2
 8004d96:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8004d98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d9a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004d9c:	e002      	b.n	8004da4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004d9e:	4b07      	ldr	r3, [pc, #28]	; (8004dbc <HAL_RCC_GetSysClockFreq+0xc8>)
 8004da0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004da2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004da6:	0018      	movs	r0, r3
 8004da8:	46bd      	mov	sp, r7
 8004daa:	b00f      	add	sp, #60	; 0x3c
 8004dac:	bd90      	pop	{r4, r7, pc}
 8004dae:	46c0      	nop			; (mov r8, r8)
 8004db0:	08009668 	.word	0x08009668
 8004db4:	08009678 	.word	0x08009678
 8004db8:	40021000 	.word	0x40021000
 8004dbc:	007a1200 	.word	0x007a1200

08004dc0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b086      	sub	sp, #24
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	2380      	movs	r3, #128	; 0x80
 8004dd6:	025b      	lsls	r3, r3, #9
 8004dd8:	4013      	ands	r3, r2
 8004dda:	d100      	bne.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8004ddc:	e08e      	b.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8004dde:	2017      	movs	r0, #23
 8004de0:	183b      	adds	r3, r7, r0
 8004de2:	2200      	movs	r2, #0
 8004de4:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004de6:	4b5f      	ldr	r3, [pc, #380]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004de8:	69da      	ldr	r2, [r3, #28]
 8004dea:	2380      	movs	r3, #128	; 0x80
 8004dec:	055b      	lsls	r3, r3, #21
 8004dee:	4013      	ands	r3, r2
 8004df0:	d110      	bne.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004df2:	4b5c      	ldr	r3, [pc, #368]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004df4:	69da      	ldr	r2, [r3, #28]
 8004df6:	4b5b      	ldr	r3, [pc, #364]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004df8:	2180      	movs	r1, #128	; 0x80
 8004dfa:	0549      	lsls	r1, r1, #21
 8004dfc:	430a      	orrs	r2, r1
 8004dfe:	61da      	str	r2, [r3, #28]
 8004e00:	4b58      	ldr	r3, [pc, #352]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004e02:	69da      	ldr	r2, [r3, #28]
 8004e04:	2380      	movs	r3, #128	; 0x80
 8004e06:	055b      	lsls	r3, r3, #21
 8004e08:	4013      	ands	r3, r2
 8004e0a:	60bb      	str	r3, [r7, #8]
 8004e0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e0e:	183b      	adds	r3, r7, r0
 8004e10:	2201      	movs	r2, #1
 8004e12:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e14:	4b54      	ldr	r3, [pc, #336]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	2380      	movs	r3, #128	; 0x80
 8004e1a:	005b      	lsls	r3, r3, #1
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	d11a      	bne.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e20:	4b51      	ldr	r3, [pc, #324]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	4b50      	ldr	r3, [pc, #320]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004e26:	2180      	movs	r1, #128	; 0x80
 8004e28:	0049      	lsls	r1, r1, #1
 8004e2a:	430a      	orrs	r2, r1
 8004e2c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e2e:	f7fd fc7d 	bl	800272c <HAL_GetTick>
 8004e32:	0003      	movs	r3, r0
 8004e34:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e36:	e008      	b.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e38:	f7fd fc78 	bl	800272c <HAL_GetTick>
 8004e3c:	0002      	movs	r2, r0
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	2b64      	cmp	r3, #100	; 0x64
 8004e44:	d901      	bls.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8004e46:	2303      	movs	r3, #3
 8004e48:	e087      	b.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e4a:	4b47      	ldr	r3, [pc, #284]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	2380      	movs	r3, #128	; 0x80
 8004e50:	005b      	lsls	r3, r3, #1
 8004e52:	4013      	ands	r3, r2
 8004e54:	d0f0      	beq.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004e56:	4b43      	ldr	r3, [pc, #268]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004e58:	6a1a      	ldr	r2, [r3, #32]
 8004e5a:	23c0      	movs	r3, #192	; 0xc0
 8004e5c:	009b      	lsls	r3, r3, #2
 8004e5e:	4013      	ands	r3, r2
 8004e60:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d034      	beq.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	685a      	ldr	r2, [r3, #4]
 8004e6c:	23c0      	movs	r3, #192	; 0xc0
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	4013      	ands	r3, r2
 8004e72:	68fa      	ldr	r2, [r7, #12]
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d02c      	beq.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e78:	4b3a      	ldr	r3, [pc, #232]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004e7a:	6a1b      	ldr	r3, [r3, #32]
 8004e7c:	4a3b      	ldr	r2, [pc, #236]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e7e:	4013      	ands	r3, r2
 8004e80:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e82:	4b38      	ldr	r3, [pc, #224]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004e84:	6a1a      	ldr	r2, [r3, #32]
 8004e86:	4b37      	ldr	r3, [pc, #220]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004e88:	2180      	movs	r1, #128	; 0x80
 8004e8a:	0249      	lsls	r1, r1, #9
 8004e8c:	430a      	orrs	r2, r1
 8004e8e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e90:	4b34      	ldr	r3, [pc, #208]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004e92:	6a1a      	ldr	r2, [r3, #32]
 8004e94:	4b33      	ldr	r3, [pc, #204]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004e96:	4936      	ldr	r1, [pc, #216]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004e98:	400a      	ands	r2, r1
 8004e9a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004e9c:	4b31      	ldr	r3, [pc, #196]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004e9e:	68fa      	ldr	r2, [r7, #12]
 8004ea0:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	d013      	beq.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eaa:	f7fd fc3f 	bl	800272c <HAL_GetTick>
 8004eae:	0003      	movs	r3, r0
 8004eb0:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004eb2:	e009      	b.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004eb4:	f7fd fc3a 	bl	800272c <HAL_GetTick>
 8004eb8:	0002      	movs	r2, r0
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	4a2d      	ldr	r2, [pc, #180]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d901      	bls.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004ec4:	2303      	movs	r3, #3
 8004ec6:	e048      	b.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ec8:	4b26      	ldr	r3, [pc, #152]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004eca:	6a1b      	ldr	r3, [r3, #32]
 8004ecc:	2202      	movs	r2, #2
 8004ece:	4013      	ands	r3, r2
 8004ed0:	d0f0      	beq.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ed2:	4b24      	ldr	r3, [pc, #144]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004ed4:	6a1b      	ldr	r3, [r3, #32]
 8004ed6:	4a25      	ldr	r2, [pc, #148]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ed8:	4013      	ands	r3, r2
 8004eda:	0019      	movs	r1, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	685a      	ldr	r2, [r3, #4]
 8004ee0:	4b20      	ldr	r3, [pc, #128]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004ee2:	430a      	orrs	r2, r1
 8004ee4:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004ee6:	2317      	movs	r3, #23
 8004ee8:	18fb      	adds	r3, r7, r3
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d105      	bne.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ef0:	4b1c      	ldr	r3, [pc, #112]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004ef2:	69da      	ldr	r2, [r3, #28]
 8004ef4:	4b1b      	ldr	r3, [pc, #108]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004ef6:	4920      	ldr	r1, [pc, #128]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ef8:	400a      	ands	r2, r1
 8004efa:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	2201      	movs	r2, #1
 8004f02:	4013      	ands	r3, r2
 8004f04:	d009      	beq.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004f06:	4b17      	ldr	r3, [pc, #92]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f0a:	2203      	movs	r2, #3
 8004f0c:	4393      	bics	r3, r2
 8004f0e:	0019      	movs	r1, r3
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	689a      	ldr	r2, [r3, #8]
 8004f14:	4b13      	ldr	r3, [pc, #76]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004f16:	430a      	orrs	r2, r1
 8004f18:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	2220      	movs	r2, #32
 8004f20:	4013      	ands	r3, r2
 8004f22:	d009      	beq.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004f24:	4b0f      	ldr	r3, [pc, #60]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f28:	2210      	movs	r2, #16
 8004f2a:	4393      	bics	r3, r2
 8004f2c:	0019      	movs	r1, r3
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	68da      	ldr	r2, [r3, #12]
 8004f32:	4b0c      	ldr	r3, [pc, #48]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004f34:	430a      	orrs	r2, r1
 8004f36:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	2380      	movs	r3, #128	; 0x80
 8004f3e:	029b      	lsls	r3, r3, #10
 8004f40:	4013      	ands	r3, r2
 8004f42:	d009      	beq.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f44:	4b07      	ldr	r3, [pc, #28]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f48:	2280      	movs	r2, #128	; 0x80
 8004f4a:	4393      	bics	r3, r2
 8004f4c:	0019      	movs	r1, r3
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	691a      	ldr	r2, [r3, #16]
 8004f52:	4b04      	ldr	r3, [pc, #16]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004f54:	430a      	orrs	r2, r1
 8004f56:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004f58:	2300      	movs	r3, #0
}
 8004f5a:	0018      	movs	r0, r3
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	b006      	add	sp, #24
 8004f60:	bd80      	pop	{r7, pc}
 8004f62:	46c0      	nop			; (mov r8, r8)
 8004f64:	40021000 	.word	0x40021000
 8004f68:	40007000 	.word	0x40007000
 8004f6c:	fffffcff 	.word	0xfffffcff
 8004f70:	fffeffff 	.word	0xfffeffff
 8004f74:	00001388 	.word	0x00001388
 8004f78:	efffffff 	.word	0xefffffff

08004f7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b082      	sub	sp, #8
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d101      	bne.n	8004f8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e042      	b.n	8005014 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	223d      	movs	r2, #61	; 0x3d
 8004f92:	5c9b      	ldrb	r3, [r3, r2]
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d107      	bne.n	8004faa <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	223c      	movs	r2, #60	; 0x3c
 8004f9e:	2100      	movs	r1, #0
 8004fa0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	0018      	movs	r0, r3
 8004fa6:	f7fd fa59 	bl	800245c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	223d      	movs	r2, #61	; 0x3d
 8004fae:	2102      	movs	r1, #2
 8004fb0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	3304      	adds	r3, #4
 8004fba:	0019      	movs	r1, r3
 8004fbc:	0010      	movs	r0, r2
 8004fbe:	f000 fb61 	bl	8005684 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2246      	movs	r2, #70	; 0x46
 8004fc6:	2101      	movs	r1, #1
 8004fc8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	223e      	movs	r2, #62	; 0x3e
 8004fce:	2101      	movs	r1, #1
 8004fd0:	5499      	strb	r1, [r3, r2]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	223f      	movs	r2, #63	; 0x3f
 8004fd6:	2101      	movs	r1, #1
 8004fd8:	5499      	strb	r1, [r3, r2]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2240      	movs	r2, #64	; 0x40
 8004fde:	2101      	movs	r1, #1
 8004fe0:	5499      	strb	r1, [r3, r2]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2241      	movs	r2, #65	; 0x41
 8004fe6:	2101      	movs	r1, #1
 8004fe8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2242      	movs	r2, #66	; 0x42
 8004fee:	2101      	movs	r1, #1
 8004ff0:	5499      	strb	r1, [r3, r2]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2243      	movs	r2, #67	; 0x43
 8004ff6:	2101      	movs	r1, #1
 8004ff8:	5499      	strb	r1, [r3, r2]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2244      	movs	r2, #68	; 0x44
 8004ffe:	2101      	movs	r1, #1
 8005000:	5499      	strb	r1, [r3, r2]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2245      	movs	r2, #69	; 0x45
 8005006:	2101      	movs	r1, #1
 8005008:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	223d      	movs	r2, #61	; 0x3d
 800500e:	2101      	movs	r1, #1
 8005010:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005012:	2300      	movs	r3, #0
}
 8005014:	0018      	movs	r0, r3
 8005016:	46bd      	mov	sp, r7
 8005018:	b002      	add	sp, #8
 800501a:	bd80      	pop	{r7, pc}

0800501c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b084      	sub	sp, #16
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	223d      	movs	r2, #61	; 0x3d
 8005028:	5c9b      	ldrb	r3, [r3, r2]
 800502a:	b2db      	uxtb	r3, r3
 800502c:	2b01      	cmp	r3, #1
 800502e:	d001      	beq.n	8005034 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	e02d      	b.n	8005090 <HAL_TIM_Base_Start+0x74>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	223d      	movs	r2, #61	; 0x3d
 8005038:	2102      	movs	r1, #2
 800503a:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a15      	ldr	r2, [pc, #84]	; (8005098 <HAL_TIM_Base_Start+0x7c>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d009      	beq.n	800505a <HAL_TIM_Base_Start+0x3e>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a14      	ldr	r2, [pc, #80]	; (800509c <HAL_TIM_Base_Start+0x80>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d004      	beq.n	800505a <HAL_TIM_Base_Start+0x3e>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a12      	ldr	r2, [pc, #72]	; (80050a0 <HAL_TIM_Base_Start+0x84>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d111      	bne.n	800507e <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	2207      	movs	r2, #7
 8005062:	4013      	ands	r3, r2
 8005064:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2b06      	cmp	r3, #6
 800506a:	d010      	beq.n	800508e <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	2101      	movs	r1, #1
 8005078:	430a      	orrs	r2, r1
 800507a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800507c:	e007      	b.n	800508e <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	2101      	movs	r1, #1
 800508a:	430a      	orrs	r2, r1
 800508c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800508e:	2300      	movs	r3, #0
}
 8005090:	0018      	movs	r0, r3
 8005092:	46bd      	mov	sp, r7
 8005094:	b004      	add	sp, #16
 8005096:	bd80      	pop	{r7, pc}
 8005098:	40012c00 	.word	0x40012c00
 800509c:	40000400 	.word	0x40000400
 80050a0:	40014000 	.word	0x40014000

080050a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b084      	sub	sp, #16
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	223d      	movs	r2, #61	; 0x3d
 80050b0:	5c9b      	ldrb	r3, [r3, r2]
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d001      	beq.n	80050bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	e035      	b.n	8005128 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	223d      	movs	r2, #61	; 0x3d
 80050c0:	2102      	movs	r1, #2
 80050c2:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	68da      	ldr	r2, [r3, #12]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	2101      	movs	r1, #1
 80050d0:	430a      	orrs	r2, r1
 80050d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a15      	ldr	r2, [pc, #84]	; (8005130 <HAL_TIM_Base_Start_IT+0x8c>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d009      	beq.n	80050f2 <HAL_TIM_Base_Start_IT+0x4e>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a14      	ldr	r2, [pc, #80]	; (8005134 <HAL_TIM_Base_Start_IT+0x90>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d004      	beq.n	80050f2 <HAL_TIM_Base_Start_IT+0x4e>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a12      	ldr	r2, [pc, #72]	; (8005138 <HAL_TIM_Base_Start_IT+0x94>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d111      	bne.n	8005116 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	2207      	movs	r2, #7
 80050fa:	4013      	ands	r3, r2
 80050fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2b06      	cmp	r3, #6
 8005102:	d010      	beq.n	8005126 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	2101      	movs	r1, #1
 8005110:	430a      	orrs	r2, r1
 8005112:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005114:	e007      	b.n	8005126 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	2101      	movs	r1, #1
 8005122:	430a      	orrs	r2, r1
 8005124:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005126:	2300      	movs	r3, #0
}
 8005128:	0018      	movs	r0, r3
 800512a:	46bd      	mov	sp, r7
 800512c:	b004      	add	sp, #16
 800512e:	bd80      	pop	{r7, pc}
 8005130:	40012c00 	.word	0x40012c00
 8005134:	40000400 	.word	0x40000400
 8005138:	40014000 	.word	0x40014000

0800513c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b082      	sub	sp, #8
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d101      	bne.n	800514e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e042      	b.n	80051d4 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	223d      	movs	r2, #61	; 0x3d
 8005152:	5c9b      	ldrb	r3, [r3, r2]
 8005154:	b2db      	uxtb	r3, r3
 8005156:	2b00      	cmp	r3, #0
 8005158:	d107      	bne.n	800516a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	223c      	movs	r2, #60	; 0x3c
 800515e:	2100      	movs	r1, #0
 8005160:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	0018      	movs	r0, r3
 8005166:	f000 f839 	bl	80051dc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	223d      	movs	r2, #61	; 0x3d
 800516e:	2102      	movs	r1, #2
 8005170:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	3304      	adds	r3, #4
 800517a:	0019      	movs	r1, r3
 800517c:	0010      	movs	r0, r2
 800517e:	f000 fa81 	bl	8005684 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2246      	movs	r2, #70	; 0x46
 8005186:	2101      	movs	r1, #1
 8005188:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	223e      	movs	r2, #62	; 0x3e
 800518e:	2101      	movs	r1, #1
 8005190:	5499      	strb	r1, [r3, r2]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	223f      	movs	r2, #63	; 0x3f
 8005196:	2101      	movs	r1, #1
 8005198:	5499      	strb	r1, [r3, r2]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2240      	movs	r2, #64	; 0x40
 800519e:	2101      	movs	r1, #1
 80051a0:	5499      	strb	r1, [r3, r2]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2241      	movs	r2, #65	; 0x41
 80051a6:	2101      	movs	r1, #1
 80051a8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2242      	movs	r2, #66	; 0x42
 80051ae:	2101      	movs	r1, #1
 80051b0:	5499      	strb	r1, [r3, r2]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2243      	movs	r2, #67	; 0x43
 80051b6:	2101      	movs	r1, #1
 80051b8:	5499      	strb	r1, [r3, r2]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2244      	movs	r2, #68	; 0x44
 80051be:	2101      	movs	r1, #1
 80051c0:	5499      	strb	r1, [r3, r2]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2245      	movs	r2, #69	; 0x45
 80051c6:	2101      	movs	r1, #1
 80051c8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	223d      	movs	r2, #61	; 0x3d
 80051ce:	2101      	movs	r1, #1
 80051d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80051d2:	2300      	movs	r3, #0
}
 80051d4:	0018      	movs	r0, r3
 80051d6:	46bd      	mov	sp, r7
 80051d8:	b002      	add	sp, #8
 80051da:	bd80      	pop	{r7, pc}

080051dc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b082      	sub	sp, #8
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80051e4:	46c0      	nop			; (mov r8, r8)
 80051e6:	46bd      	mov	sp, r7
 80051e8:	b002      	add	sp, #8
 80051ea:	bd80      	pop	{r7, pc}

080051ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b084      	sub	sp, #16
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d108      	bne.n	800520e <HAL_TIM_PWM_Start+0x22>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	223e      	movs	r2, #62	; 0x3e
 8005200:	5c9b      	ldrb	r3, [r3, r2]
 8005202:	b2db      	uxtb	r3, r3
 8005204:	3b01      	subs	r3, #1
 8005206:	1e5a      	subs	r2, r3, #1
 8005208:	4193      	sbcs	r3, r2
 800520a:	b2db      	uxtb	r3, r3
 800520c:	e01f      	b.n	800524e <HAL_TIM_PWM_Start+0x62>
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	2b04      	cmp	r3, #4
 8005212:	d108      	bne.n	8005226 <HAL_TIM_PWM_Start+0x3a>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	223f      	movs	r2, #63	; 0x3f
 8005218:	5c9b      	ldrb	r3, [r3, r2]
 800521a:	b2db      	uxtb	r3, r3
 800521c:	3b01      	subs	r3, #1
 800521e:	1e5a      	subs	r2, r3, #1
 8005220:	4193      	sbcs	r3, r2
 8005222:	b2db      	uxtb	r3, r3
 8005224:	e013      	b.n	800524e <HAL_TIM_PWM_Start+0x62>
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	2b08      	cmp	r3, #8
 800522a:	d108      	bne.n	800523e <HAL_TIM_PWM_Start+0x52>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2240      	movs	r2, #64	; 0x40
 8005230:	5c9b      	ldrb	r3, [r3, r2]
 8005232:	b2db      	uxtb	r3, r3
 8005234:	3b01      	subs	r3, #1
 8005236:	1e5a      	subs	r2, r3, #1
 8005238:	4193      	sbcs	r3, r2
 800523a:	b2db      	uxtb	r3, r3
 800523c:	e007      	b.n	800524e <HAL_TIM_PWM_Start+0x62>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2241      	movs	r2, #65	; 0x41
 8005242:	5c9b      	ldrb	r3, [r3, r2]
 8005244:	b2db      	uxtb	r3, r3
 8005246:	3b01      	subs	r3, #1
 8005248:	1e5a      	subs	r2, r3, #1
 800524a:	4193      	sbcs	r3, r2
 800524c:	b2db      	uxtb	r3, r3
 800524e:	2b00      	cmp	r3, #0
 8005250:	d001      	beq.n	8005256 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	e06e      	b.n	8005334 <HAL_TIM_PWM_Start+0x148>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d104      	bne.n	8005266 <HAL_TIM_PWM_Start+0x7a>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	223e      	movs	r2, #62	; 0x3e
 8005260:	2102      	movs	r1, #2
 8005262:	5499      	strb	r1, [r3, r2]
 8005264:	e013      	b.n	800528e <HAL_TIM_PWM_Start+0xa2>
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	2b04      	cmp	r3, #4
 800526a:	d104      	bne.n	8005276 <HAL_TIM_PWM_Start+0x8a>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	223f      	movs	r2, #63	; 0x3f
 8005270:	2102      	movs	r1, #2
 8005272:	5499      	strb	r1, [r3, r2]
 8005274:	e00b      	b.n	800528e <HAL_TIM_PWM_Start+0xa2>
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	2b08      	cmp	r3, #8
 800527a:	d104      	bne.n	8005286 <HAL_TIM_PWM_Start+0x9a>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2240      	movs	r2, #64	; 0x40
 8005280:	2102      	movs	r1, #2
 8005282:	5499      	strb	r1, [r3, r2]
 8005284:	e003      	b.n	800528e <HAL_TIM_PWM_Start+0xa2>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2241      	movs	r2, #65	; 0x41
 800528a:	2102      	movs	r1, #2
 800528c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	6839      	ldr	r1, [r7, #0]
 8005294:	2201      	movs	r2, #1
 8005296:	0018      	movs	r0, r3
 8005298:	f000 fd00 	bl	8005c9c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a26      	ldr	r2, [pc, #152]	; (800533c <HAL_TIM_PWM_Start+0x150>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d00e      	beq.n	80052c4 <HAL_TIM_PWM_Start+0xd8>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a25      	ldr	r2, [pc, #148]	; (8005340 <HAL_TIM_PWM_Start+0x154>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d009      	beq.n	80052c4 <HAL_TIM_PWM_Start+0xd8>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a23      	ldr	r2, [pc, #140]	; (8005344 <HAL_TIM_PWM_Start+0x158>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d004      	beq.n	80052c4 <HAL_TIM_PWM_Start+0xd8>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a22      	ldr	r2, [pc, #136]	; (8005348 <HAL_TIM_PWM_Start+0x15c>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d101      	bne.n	80052c8 <HAL_TIM_PWM_Start+0xdc>
 80052c4:	2301      	movs	r3, #1
 80052c6:	e000      	b.n	80052ca <HAL_TIM_PWM_Start+0xde>
 80052c8:	2300      	movs	r3, #0
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d008      	beq.n	80052e0 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	2180      	movs	r1, #128	; 0x80
 80052da:	0209      	lsls	r1, r1, #8
 80052dc:	430a      	orrs	r2, r1
 80052de:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a15      	ldr	r2, [pc, #84]	; (800533c <HAL_TIM_PWM_Start+0x150>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d009      	beq.n	80052fe <HAL_TIM_PWM_Start+0x112>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a17      	ldr	r2, [pc, #92]	; (800534c <HAL_TIM_PWM_Start+0x160>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d004      	beq.n	80052fe <HAL_TIM_PWM_Start+0x112>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a11      	ldr	r2, [pc, #68]	; (8005340 <HAL_TIM_PWM_Start+0x154>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d111      	bne.n	8005322 <HAL_TIM_PWM_Start+0x136>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	2207      	movs	r2, #7
 8005306:	4013      	ands	r3, r2
 8005308:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2b06      	cmp	r3, #6
 800530e:	d010      	beq.n	8005332 <HAL_TIM_PWM_Start+0x146>
    {
      __HAL_TIM_ENABLE(htim);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	2101      	movs	r1, #1
 800531c:	430a      	orrs	r2, r1
 800531e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005320:	e007      	b.n	8005332 <HAL_TIM_PWM_Start+0x146>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	2101      	movs	r1, #1
 800532e:	430a      	orrs	r2, r1
 8005330:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005332:	2300      	movs	r3, #0
}
 8005334:	0018      	movs	r0, r3
 8005336:	46bd      	mov	sp, r7
 8005338:	b004      	add	sp, #16
 800533a:	bd80      	pop	{r7, pc}
 800533c:	40012c00 	.word	0x40012c00
 8005340:	40014000 	.word	0x40014000
 8005344:	40014400 	.word	0x40014400
 8005348:	40014800 	.word	0x40014800
 800534c:	40000400 	.word	0x40000400

08005350 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b086      	sub	sp, #24
 8005354:	af00      	add	r7, sp, #0
 8005356:	60f8      	str	r0, [r7, #12]
 8005358:	60b9      	str	r1, [r7, #8]
 800535a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800535c:	2317      	movs	r3, #23
 800535e:	18fb      	adds	r3, r7, r3
 8005360:	2200      	movs	r2, #0
 8005362:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	223c      	movs	r2, #60	; 0x3c
 8005368:	5c9b      	ldrb	r3, [r3, r2]
 800536a:	2b01      	cmp	r3, #1
 800536c:	d101      	bne.n	8005372 <HAL_TIM_PWM_ConfigChannel+0x22>
 800536e:	2302      	movs	r3, #2
 8005370:	e0ad      	b.n	80054ce <HAL_TIM_PWM_ConfigChannel+0x17e>
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	223c      	movs	r2, #60	; 0x3c
 8005376:	2101      	movs	r1, #1
 8005378:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2b0c      	cmp	r3, #12
 800537e:	d100      	bne.n	8005382 <HAL_TIM_PWM_ConfigChannel+0x32>
 8005380:	e076      	b.n	8005470 <HAL_TIM_PWM_ConfigChannel+0x120>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2b0c      	cmp	r3, #12
 8005386:	d900      	bls.n	800538a <HAL_TIM_PWM_ConfigChannel+0x3a>
 8005388:	e095      	b.n	80054b6 <HAL_TIM_PWM_ConfigChannel+0x166>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2b08      	cmp	r3, #8
 800538e:	d04e      	beq.n	800542e <HAL_TIM_PWM_ConfigChannel+0xde>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2b08      	cmp	r3, #8
 8005394:	d900      	bls.n	8005398 <HAL_TIM_PWM_ConfigChannel+0x48>
 8005396:	e08e      	b.n	80054b6 <HAL_TIM_PWM_ConfigChannel+0x166>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d003      	beq.n	80053a6 <HAL_TIM_PWM_ConfigChannel+0x56>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2b04      	cmp	r3, #4
 80053a2:	d021      	beq.n	80053e8 <HAL_TIM_PWM_ConfigChannel+0x98>
 80053a4:	e087      	b.n	80054b6 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	68ba      	ldr	r2, [r7, #8]
 80053ac:	0011      	movs	r1, r2
 80053ae:	0018      	movs	r0, r3
 80053b0:	f000 f9de 	bl	8005770 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	699a      	ldr	r2, [r3, #24]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	2108      	movs	r1, #8
 80053c0:	430a      	orrs	r2, r1
 80053c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	699a      	ldr	r2, [r3, #24]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	2104      	movs	r1, #4
 80053d0:	438a      	bics	r2, r1
 80053d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	6999      	ldr	r1, [r3, #24]
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	691a      	ldr	r2, [r3, #16]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	430a      	orrs	r2, r1
 80053e4:	619a      	str	r2, [r3, #24]
      break;
 80053e6:	e06b      	b.n	80054c0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	68ba      	ldr	r2, [r7, #8]
 80053ee:	0011      	movs	r1, r2
 80053f0:	0018      	movs	r0, r3
 80053f2:	f000 fa45 	bl	8005880 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	699a      	ldr	r2, [r3, #24]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	2180      	movs	r1, #128	; 0x80
 8005402:	0109      	lsls	r1, r1, #4
 8005404:	430a      	orrs	r2, r1
 8005406:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	699a      	ldr	r2, [r3, #24]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4931      	ldr	r1, [pc, #196]	; (80054d8 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8005414:	400a      	ands	r2, r1
 8005416:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	6999      	ldr	r1, [r3, #24]
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	691b      	ldr	r3, [r3, #16]
 8005422:	021a      	lsls	r2, r3, #8
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	430a      	orrs	r2, r1
 800542a:	619a      	str	r2, [r3, #24]
      break;
 800542c:	e048      	b.n	80054c0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	68ba      	ldr	r2, [r7, #8]
 8005434:	0011      	movs	r1, r2
 8005436:	0018      	movs	r0, r3
 8005438:	f000 faa6 	bl	8005988 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	69da      	ldr	r2, [r3, #28]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	2108      	movs	r1, #8
 8005448:	430a      	orrs	r2, r1
 800544a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	69da      	ldr	r2, [r3, #28]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	2104      	movs	r1, #4
 8005458:	438a      	bics	r2, r1
 800545a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	69d9      	ldr	r1, [r3, #28]
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	691a      	ldr	r2, [r3, #16]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	430a      	orrs	r2, r1
 800546c:	61da      	str	r2, [r3, #28]
      break;
 800546e:	e027      	b.n	80054c0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	68ba      	ldr	r2, [r7, #8]
 8005476:	0011      	movs	r1, r2
 8005478:	0018      	movs	r0, r3
 800547a:	f000 fb0b 	bl	8005a94 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	69da      	ldr	r2, [r3, #28]
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	2180      	movs	r1, #128	; 0x80
 800548a:	0109      	lsls	r1, r1, #4
 800548c:	430a      	orrs	r2, r1
 800548e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	69da      	ldr	r2, [r3, #28]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	490f      	ldr	r1, [pc, #60]	; (80054d8 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800549c:	400a      	ands	r2, r1
 800549e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	69d9      	ldr	r1, [r3, #28]
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	691b      	ldr	r3, [r3, #16]
 80054aa:	021a      	lsls	r2, r3, #8
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	430a      	orrs	r2, r1
 80054b2:	61da      	str	r2, [r3, #28]
      break;
 80054b4:	e004      	b.n	80054c0 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80054b6:	2317      	movs	r3, #23
 80054b8:	18fb      	adds	r3, r7, r3
 80054ba:	2201      	movs	r2, #1
 80054bc:	701a      	strb	r2, [r3, #0]
      break;
 80054be:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	223c      	movs	r2, #60	; 0x3c
 80054c4:	2100      	movs	r1, #0
 80054c6:	5499      	strb	r1, [r3, r2]

  return status;
 80054c8:	2317      	movs	r3, #23
 80054ca:	18fb      	adds	r3, r7, r3
 80054cc:	781b      	ldrb	r3, [r3, #0]
}
 80054ce:	0018      	movs	r0, r3
 80054d0:	46bd      	mov	sp, r7
 80054d2:	b006      	add	sp, #24
 80054d4:	bd80      	pop	{r7, pc}
 80054d6:	46c0      	nop			; (mov r8, r8)
 80054d8:	fffffbff 	.word	0xfffffbff

080054dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b084      	sub	sp, #16
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054e6:	230f      	movs	r3, #15
 80054e8:	18fb      	adds	r3, r7, r3
 80054ea:	2200      	movs	r2, #0
 80054ec:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	223c      	movs	r2, #60	; 0x3c
 80054f2:	5c9b      	ldrb	r3, [r3, r2]
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d101      	bne.n	80054fc <HAL_TIM_ConfigClockSource+0x20>
 80054f8:	2302      	movs	r3, #2
 80054fa:	e0bc      	b.n	8005676 <HAL_TIM_ConfigClockSource+0x19a>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	223c      	movs	r2, #60	; 0x3c
 8005500:	2101      	movs	r1, #1
 8005502:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	223d      	movs	r2, #61	; 0x3d
 8005508:	2102      	movs	r1, #2
 800550a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	2277      	movs	r2, #119	; 0x77
 8005518:	4393      	bics	r3, r2
 800551a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	4a58      	ldr	r2, [pc, #352]	; (8005680 <HAL_TIM_ConfigClockSource+0x1a4>)
 8005520:	4013      	ands	r3, r2
 8005522:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	68ba      	ldr	r2, [r7, #8]
 800552a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	2280      	movs	r2, #128	; 0x80
 8005532:	0192      	lsls	r2, r2, #6
 8005534:	4293      	cmp	r3, r2
 8005536:	d040      	beq.n	80055ba <HAL_TIM_ConfigClockSource+0xde>
 8005538:	2280      	movs	r2, #128	; 0x80
 800553a:	0192      	lsls	r2, r2, #6
 800553c:	4293      	cmp	r3, r2
 800553e:	d900      	bls.n	8005542 <HAL_TIM_ConfigClockSource+0x66>
 8005540:	e088      	b.n	8005654 <HAL_TIM_ConfigClockSource+0x178>
 8005542:	2280      	movs	r2, #128	; 0x80
 8005544:	0152      	lsls	r2, r2, #5
 8005546:	4293      	cmp	r3, r2
 8005548:	d100      	bne.n	800554c <HAL_TIM_ConfigClockSource+0x70>
 800554a:	e088      	b.n	800565e <HAL_TIM_ConfigClockSource+0x182>
 800554c:	2280      	movs	r2, #128	; 0x80
 800554e:	0152      	lsls	r2, r2, #5
 8005550:	4293      	cmp	r3, r2
 8005552:	d900      	bls.n	8005556 <HAL_TIM_ConfigClockSource+0x7a>
 8005554:	e07e      	b.n	8005654 <HAL_TIM_ConfigClockSource+0x178>
 8005556:	2b70      	cmp	r3, #112	; 0x70
 8005558:	d018      	beq.n	800558c <HAL_TIM_ConfigClockSource+0xb0>
 800555a:	d900      	bls.n	800555e <HAL_TIM_ConfigClockSource+0x82>
 800555c:	e07a      	b.n	8005654 <HAL_TIM_ConfigClockSource+0x178>
 800555e:	2b60      	cmp	r3, #96	; 0x60
 8005560:	d04f      	beq.n	8005602 <HAL_TIM_ConfigClockSource+0x126>
 8005562:	d900      	bls.n	8005566 <HAL_TIM_ConfigClockSource+0x8a>
 8005564:	e076      	b.n	8005654 <HAL_TIM_ConfigClockSource+0x178>
 8005566:	2b50      	cmp	r3, #80	; 0x50
 8005568:	d03b      	beq.n	80055e2 <HAL_TIM_ConfigClockSource+0x106>
 800556a:	d900      	bls.n	800556e <HAL_TIM_ConfigClockSource+0x92>
 800556c:	e072      	b.n	8005654 <HAL_TIM_ConfigClockSource+0x178>
 800556e:	2b40      	cmp	r3, #64	; 0x40
 8005570:	d057      	beq.n	8005622 <HAL_TIM_ConfigClockSource+0x146>
 8005572:	d900      	bls.n	8005576 <HAL_TIM_ConfigClockSource+0x9a>
 8005574:	e06e      	b.n	8005654 <HAL_TIM_ConfigClockSource+0x178>
 8005576:	2b30      	cmp	r3, #48	; 0x30
 8005578:	d063      	beq.n	8005642 <HAL_TIM_ConfigClockSource+0x166>
 800557a:	d86b      	bhi.n	8005654 <HAL_TIM_ConfigClockSource+0x178>
 800557c:	2b20      	cmp	r3, #32
 800557e:	d060      	beq.n	8005642 <HAL_TIM_ConfigClockSource+0x166>
 8005580:	d868      	bhi.n	8005654 <HAL_TIM_ConfigClockSource+0x178>
 8005582:	2b00      	cmp	r3, #0
 8005584:	d05d      	beq.n	8005642 <HAL_TIM_ConfigClockSource+0x166>
 8005586:	2b10      	cmp	r3, #16
 8005588:	d05b      	beq.n	8005642 <HAL_TIM_ConfigClockSource+0x166>
 800558a:	e063      	b.n	8005654 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6818      	ldr	r0, [r3, #0]
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	6899      	ldr	r1, [r3, #8]
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	685a      	ldr	r2, [r3, #4]
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	f000 fb5e 	bl	8005c5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	2277      	movs	r2, #119	; 0x77
 80055ac:	4313      	orrs	r3, r2
 80055ae:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	68ba      	ldr	r2, [r7, #8]
 80055b6:	609a      	str	r2, [r3, #8]
      break;
 80055b8:	e052      	b.n	8005660 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6818      	ldr	r0, [r3, #0]
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	6899      	ldr	r1, [r3, #8]
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	685a      	ldr	r2, [r3, #4]
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	68db      	ldr	r3, [r3, #12]
 80055ca:	f000 fb47 	bl	8005c5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	689a      	ldr	r2, [r3, #8]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	2180      	movs	r1, #128	; 0x80
 80055da:	01c9      	lsls	r1, r1, #7
 80055dc:	430a      	orrs	r2, r1
 80055de:	609a      	str	r2, [r3, #8]
      break;
 80055e0:	e03e      	b.n	8005660 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6818      	ldr	r0, [r3, #0]
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	6859      	ldr	r1, [r3, #4]
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	68db      	ldr	r3, [r3, #12]
 80055ee:	001a      	movs	r2, r3
 80055f0:	f000 faba 	bl	8005b68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	2150      	movs	r1, #80	; 0x50
 80055fa:	0018      	movs	r0, r3
 80055fc:	f000 fb14 	bl	8005c28 <TIM_ITRx_SetConfig>
      break;
 8005600:	e02e      	b.n	8005660 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6818      	ldr	r0, [r3, #0]
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	6859      	ldr	r1, [r3, #4]
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	68db      	ldr	r3, [r3, #12]
 800560e:	001a      	movs	r2, r3
 8005610:	f000 fad8 	bl	8005bc4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	2160      	movs	r1, #96	; 0x60
 800561a:	0018      	movs	r0, r3
 800561c:	f000 fb04 	bl	8005c28 <TIM_ITRx_SetConfig>
      break;
 8005620:	e01e      	b.n	8005660 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6818      	ldr	r0, [r3, #0]
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	6859      	ldr	r1, [r3, #4]
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	68db      	ldr	r3, [r3, #12]
 800562e:	001a      	movs	r2, r3
 8005630:	f000 fa9a 	bl	8005b68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	2140      	movs	r1, #64	; 0x40
 800563a:	0018      	movs	r0, r3
 800563c:	f000 faf4 	bl	8005c28 <TIM_ITRx_SetConfig>
      break;
 8005640:	e00e      	b.n	8005660 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	0019      	movs	r1, r3
 800564c:	0010      	movs	r0, r2
 800564e:	f000 faeb 	bl	8005c28 <TIM_ITRx_SetConfig>
      break;
 8005652:	e005      	b.n	8005660 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8005654:	230f      	movs	r3, #15
 8005656:	18fb      	adds	r3, r7, r3
 8005658:	2201      	movs	r2, #1
 800565a:	701a      	strb	r2, [r3, #0]
      break;
 800565c:	e000      	b.n	8005660 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800565e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	223d      	movs	r2, #61	; 0x3d
 8005664:	2101      	movs	r1, #1
 8005666:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	223c      	movs	r2, #60	; 0x3c
 800566c:	2100      	movs	r1, #0
 800566e:	5499      	strb	r1, [r3, r2]

  return status;
 8005670:	230f      	movs	r3, #15
 8005672:	18fb      	adds	r3, r7, r3
 8005674:	781b      	ldrb	r3, [r3, #0]
}
 8005676:	0018      	movs	r0, r3
 8005678:	46bd      	mov	sp, r7
 800567a:	b004      	add	sp, #16
 800567c:	bd80      	pop	{r7, pc}
 800567e:	46c0      	nop			; (mov r8, r8)
 8005680:	ffff00ff 	.word	0xffff00ff

08005684 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b084      	sub	sp, #16
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4a2f      	ldr	r2, [pc, #188]	; (8005754 <TIM_Base_SetConfig+0xd0>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d003      	beq.n	80056a4 <TIM_Base_SetConfig+0x20>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	4a2e      	ldr	r2, [pc, #184]	; (8005758 <TIM_Base_SetConfig+0xd4>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d108      	bne.n	80056b6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2270      	movs	r2, #112	; 0x70
 80056a8:	4393      	bics	r3, r2
 80056aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	68fa      	ldr	r2, [r7, #12]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	4a26      	ldr	r2, [pc, #152]	; (8005754 <TIM_Base_SetConfig+0xd0>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d013      	beq.n	80056e6 <TIM_Base_SetConfig+0x62>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	4a25      	ldr	r2, [pc, #148]	; (8005758 <TIM_Base_SetConfig+0xd4>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d00f      	beq.n	80056e6 <TIM_Base_SetConfig+0x62>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	4a24      	ldr	r2, [pc, #144]	; (800575c <TIM_Base_SetConfig+0xd8>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d00b      	beq.n	80056e6 <TIM_Base_SetConfig+0x62>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a23      	ldr	r2, [pc, #140]	; (8005760 <TIM_Base_SetConfig+0xdc>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d007      	beq.n	80056e6 <TIM_Base_SetConfig+0x62>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4a22      	ldr	r2, [pc, #136]	; (8005764 <TIM_Base_SetConfig+0xe0>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d003      	beq.n	80056e6 <TIM_Base_SetConfig+0x62>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a21      	ldr	r2, [pc, #132]	; (8005768 <TIM_Base_SetConfig+0xe4>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d108      	bne.n	80056f8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	4a20      	ldr	r2, [pc, #128]	; (800576c <TIM_Base_SetConfig+0xe8>)
 80056ea:	4013      	ands	r3, r2
 80056ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	68db      	ldr	r3, [r3, #12]
 80056f2:	68fa      	ldr	r2, [r7, #12]
 80056f4:	4313      	orrs	r3, r2
 80056f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2280      	movs	r2, #128	; 0x80
 80056fc:	4393      	bics	r3, r2
 80056fe:	001a      	movs	r2, r3
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	695b      	ldr	r3, [r3, #20]
 8005704:	4313      	orrs	r3, r2
 8005706:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	68fa      	ldr	r2, [r7, #12]
 800570c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	689a      	ldr	r2, [r3, #8]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4a0c      	ldr	r2, [pc, #48]	; (8005754 <TIM_Base_SetConfig+0xd0>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d00b      	beq.n	800573e <TIM_Base_SetConfig+0xba>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4a0d      	ldr	r2, [pc, #52]	; (8005760 <TIM_Base_SetConfig+0xdc>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d007      	beq.n	800573e <TIM_Base_SetConfig+0xba>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4a0c      	ldr	r2, [pc, #48]	; (8005764 <TIM_Base_SetConfig+0xe0>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d003      	beq.n	800573e <TIM_Base_SetConfig+0xba>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	4a0b      	ldr	r2, [pc, #44]	; (8005768 <TIM_Base_SetConfig+0xe4>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d103      	bne.n	8005746 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	691a      	ldr	r2, [r3, #16]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2201      	movs	r2, #1
 800574a:	615a      	str	r2, [r3, #20]
}
 800574c:	46c0      	nop			; (mov r8, r8)
 800574e:	46bd      	mov	sp, r7
 8005750:	b004      	add	sp, #16
 8005752:	bd80      	pop	{r7, pc}
 8005754:	40012c00 	.word	0x40012c00
 8005758:	40000400 	.word	0x40000400
 800575c:	40002000 	.word	0x40002000
 8005760:	40014000 	.word	0x40014000
 8005764:	40014400 	.word	0x40014400
 8005768:	40014800 	.word	0x40014800
 800576c:	fffffcff 	.word	0xfffffcff

08005770 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b086      	sub	sp, #24
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6a1b      	ldr	r3, [r3, #32]
 800577e:	2201      	movs	r2, #1
 8005780:	4393      	bics	r3, r2
 8005782:	001a      	movs	r2, r3
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6a1b      	ldr	r3, [r3, #32]
 800578c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	699b      	ldr	r3, [r3, #24]
 8005798:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2270      	movs	r2, #112	; 0x70
 800579e:	4393      	bics	r3, r2
 80057a0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2203      	movs	r2, #3
 80057a6:	4393      	bics	r3, r2
 80057a8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	68fa      	ldr	r2, [r7, #12]
 80057b0:	4313      	orrs	r3, r2
 80057b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	2202      	movs	r2, #2
 80057b8:	4393      	bics	r3, r2
 80057ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	697a      	ldr	r2, [r7, #20]
 80057c2:	4313      	orrs	r3, r2
 80057c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	4a27      	ldr	r2, [pc, #156]	; (8005868 <TIM_OC1_SetConfig+0xf8>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d00b      	beq.n	80057e6 <TIM_OC1_SetConfig+0x76>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	4a26      	ldr	r2, [pc, #152]	; (800586c <TIM_OC1_SetConfig+0xfc>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d007      	beq.n	80057e6 <TIM_OC1_SetConfig+0x76>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	4a25      	ldr	r2, [pc, #148]	; (8005870 <TIM_OC1_SetConfig+0x100>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d003      	beq.n	80057e6 <TIM_OC1_SetConfig+0x76>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	4a24      	ldr	r2, [pc, #144]	; (8005874 <TIM_OC1_SetConfig+0x104>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d10c      	bne.n	8005800 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	2208      	movs	r2, #8
 80057ea:	4393      	bics	r3, r2
 80057ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	68db      	ldr	r3, [r3, #12]
 80057f2:	697a      	ldr	r2, [r7, #20]
 80057f4:	4313      	orrs	r3, r2
 80057f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	2204      	movs	r2, #4
 80057fc:	4393      	bics	r3, r2
 80057fe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	4a19      	ldr	r2, [pc, #100]	; (8005868 <TIM_OC1_SetConfig+0xf8>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d00b      	beq.n	8005820 <TIM_OC1_SetConfig+0xb0>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	4a18      	ldr	r2, [pc, #96]	; (800586c <TIM_OC1_SetConfig+0xfc>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d007      	beq.n	8005820 <TIM_OC1_SetConfig+0xb0>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	4a17      	ldr	r2, [pc, #92]	; (8005870 <TIM_OC1_SetConfig+0x100>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d003      	beq.n	8005820 <TIM_OC1_SetConfig+0xb0>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	4a16      	ldr	r2, [pc, #88]	; (8005874 <TIM_OC1_SetConfig+0x104>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d111      	bne.n	8005844 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	4a15      	ldr	r2, [pc, #84]	; (8005878 <TIM_OC1_SetConfig+0x108>)
 8005824:	4013      	ands	r3, r2
 8005826:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	4a14      	ldr	r2, [pc, #80]	; (800587c <TIM_OC1_SetConfig+0x10c>)
 800582c:	4013      	ands	r3, r2
 800582e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	695b      	ldr	r3, [r3, #20]
 8005834:	693a      	ldr	r2, [r7, #16]
 8005836:	4313      	orrs	r3, r2
 8005838:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	699b      	ldr	r3, [r3, #24]
 800583e:	693a      	ldr	r2, [r7, #16]
 8005840:	4313      	orrs	r3, r2
 8005842:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	693a      	ldr	r2, [r7, #16]
 8005848:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	68fa      	ldr	r2, [r7, #12]
 800584e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	685a      	ldr	r2, [r3, #4]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	697a      	ldr	r2, [r7, #20]
 800585c:	621a      	str	r2, [r3, #32]
}
 800585e:	46c0      	nop			; (mov r8, r8)
 8005860:	46bd      	mov	sp, r7
 8005862:	b006      	add	sp, #24
 8005864:	bd80      	pop	{r7, pc}
 8005866:	46c0      	nop			; (mov r8, r8)
 8005868:	40012c00 	.word	0x40012c00
 800586c:	40014000 	.word	0x40014000
 8005870:	40014400 	.word	0x40014400
 8005874:	40014800 	.word	0x40014800
 8005878:	fffffeff 	.word	0xfffffeff
 800587c:	fffffdff 	.word	0xfffffdff

08005880 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b086      	sub	sp, #24
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6a1b      	ldr	r3, [r3, #32]
 800588e:	2210      	movs	r2, #16
 8005890:	4393      	bics	r3, r2
 8005892:	001a      	movs	r2, r3
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6a1b      	ldr	r3, [r3, #32]
 800589c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	699b      	ldr	r3, [r3, #24]
 80058a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	4a2e      	ldr	r2, [pc, #184]	; (8005968 <TIM_OC2_SetConfig+0xe8>)
 80058ae:	4013      	ands	r3, r2
 80058b0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	4a2d      	ldr	r2, [pc, #180]	; (800596c <TIM_OC2_SetConfig+0xec>)
 80058b6:	4013      	ands	r3, r2
 80058b8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	021b      	lsls	r3, r3, #8
 80058c0:	68fa      	ldr	r2, [r7, #12]
 80058c2:	4313      	orrs	r3, r2
 80058c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	2220      	movs	r2, #32
 80058ca:	4393      	bics	r3, r2
 80058cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	011b      	lsls	r3, r3, #4
 80058d4:	697a      	ldr	r2, [r7, #20]
 80058d6:	4313      	orrs	r3, r2
 80058d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a24      	ldr	r2, [pc, #144]	; (8005970 <TIM_OC2_SetConfig+0xf0>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d10d      	bne.n	80058fe <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	2280      	movs	r2, #128	; 0x80
 80058e6:	4393      	bics	r3, r2
 80058e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	68db      	ldr	r3, [r3, #12]
 80058ee:	011b      	lsls	r3, r3, #4
 80058f0:	697a      	ldr	r2, [r7, #20]
 80058f2:	4313      	orrs	r3, r2
 80058f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	2240      	movs	r2, #64	; 0x40
 80058fa:	4393      	bics	r3, r2
 80058fc:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a1b      	ldr	r2, [pc, #108]	; (8005970 <TIM_OC2_SetConfig+0xf0>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d00b      	beq.n	800591e <TIM_OC2_SetConfig+0x9e>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	4a1a      	ldr	r2, [pc, #104]	; (8005974 <TIM_OC2_SetConfig+0xf4>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d007      	beq.n	800591e <TIM_OC2_SetConfig+0x9e>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4a19      	ldr	r2, [pc, #100]	; (8005978 <TIM_OC2_SetConfig+0xf8>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d003      	beq.n	800591e <TIM_OC2_SetConfig+0x9e>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	4a18      	ldr	r2, [pc, #96]	; (800597c <TIM_OC2_SetConfig+0xfc>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d113      	bne.n	8005946 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	4a17      	ldr	r2, [pc, #92]	; (8005980 <TIM_OC2_SetConfig+0x100>)
 8005922:	4013      	ands	r3, r2
 8005924:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	4a16      	ldr	r2, [pc, #88]	; (8005984 <TIM_OC2_SetConfig+0x104>)
 800592a:	4013      	ands	r3, r2
 800592c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	695b      	ldr	r3, [r3, #20]
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	693a      	ldr	r2, [r7, #16]
 8005936:	4313      	orrs	r3, r2
 8005938:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	699b      	ldr	r3, [r3, #24]
 800593e:	009b      	lsls	r3, r3, #2
 8005940:	693a      	ldr	r2, [r7, #16]
 8005942:	4313      	orrs	r3, r2
 8005944:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	693a      	ldr	r2, [r7, #16]
 800594a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	68fa      	ldr	r2, [r7, #12]
 8005950:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	685a      	ldr	r2, [r3, #4]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	697a      	ldr	r2, [r7, #20]
 800595e:	621a      	str	r2, [r3, #32]
}
 8005960:	46c0      	nop			; (mov r8, r8)
 8005962:	46bd      	mov	sp, r7
 8005964:	b006      	add	sp, #24
 8005966:	bd80      	pop	{r7, pc}
 8005968:	ffff8fff 	.word	0xffff8fff
 800596c:	fffffcff 	.word	0xfffffcff
 8005970:	40012c00 	.word	0x40012c00
 8005974:	40014000 	.word	0x40014000
 8005978:	40014400 	.word	0x40014400
 800597c:	40014800 	.word	0x40014800
 8005980:	fffffbff 	.word	0xfffffbff
 8005984:	fffff7ff 	.word	0xfffff7ff

08005988 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b086      	sub	sp, #24
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6a1b      	ldr	r3, [r3, #32]
 8005996:	4a35      	ldr	r2, [pc, #212]	; (8005a6c <TIM_OC3_SetConfig+0xe4>)
 8005998:	401a      	ands	r2, r3
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6a1b      	ldr	r3, [r3, #32]
 80059a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	69db      	ldr	r3, [r3, #28]
 80059ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2270      	movs	r2, #112	; 0x70
 80059b4:	4393      	bics	r3, r2
 80059b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2203      	movs	r2, #3
 80059bc:	4393      	bics	r3, r2
 80059be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	68fa      	ldr	r2, [r7, #12]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	4a28      	ldr	r2, [pc, #160]	; (8005a70 <TIM_OC3_SetConfig+0xe8>)
 80059ce:	4013      	ands	r3, r2
 80059d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	021b      	lsls	r3, r3, #8
 80059d8:	697a      	ldr	r2, [r7, #20]
 80059da:	4313      	orrs	r3, r2
 80059dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4a24      	ldr	r2, [pc, #144]	; (8005a74 <TIM_OC3_SetConfig+0xec>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d10d      	bne.n	8005a02 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	4a23      	ldr	r2, [pc, #140]	; (8005a78 <TIM_OC3_SetConfig+0xf0>)
 80059ea:	4013      	ands	r3, r2
 80059ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	68db      	ldr	r3, [r3, #12]
 80059f2:	021b      	lsls	r3, r3, #8
 80059f4:	697a      	ldr	r2, [r7, #20]
 80059f6:	4313      	orrs	r3, r2
 80059f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	4a1f      	ldr	r2, [pc, #124]	; (8005a7c <TIM_OC3_SetConfig+0xf4>)
 80059fe:	4013      	ands	r3, r2
 8005a00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	4a1b      	ldr	r2, [pc, #108]	; (8005a74 <TIM_OC3_SetConfig+0xec>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d00b      	beq.n	8005a22 <TIM_OC3_SetConfig+0x9a>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	4a1c      	ldr	r2, [pc, #112]	; (8005a80 <TIM_OC3_SetConfig+0xf8>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d007      	beq.n	8005a22 <TIM_OC3_SetConfig+0x9a>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4a1b      	ldr	r2, [pc, #108]	; (8005a84 <TIM_OC3_SetConfig+0xfc>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d003      	beq.n	8005a22 <TIM_OC3_SetConfig+0x9a>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4a1a      	ldr	r2, [pc, #104]	; (8005a88 <TIM_OC3_SetConfig+0x100>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d113      	bne.n	8005a4a <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	4a19      	ldr	r2, [pc, #100]	; (8005a8c <TIM_OC3_SetConfig+0x104>)
 8005a26:	4013      	ands	r3, r2
 8005a28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	4a18      	ldr	r2, [pc, #96]	; (8005a90 <TIM_OC3_SetConfig+0x108>)
 8005a2e:	4013      	ands	r3, r2
 8005a30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	695b      	ldr	r3, [r3, #20]
 8005a36:	011b      	lsls	r3, r3, #4
 8005a38:	693a      	ldr	r2, [r7, #16]
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	699b      	ldr	r3, [r3, #24]
 8005a42:	011b      	lsls	r3, r3, #4
 8005a44:	693a      	ldr	r2, [r7, #16]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	693a      	ldr	r2, [r7, #16]
 8005a4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	68fa      	ldr	r2, [r7, #12]
 8005a54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	685a      	ldr	r2, [r3, #4]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	697a      	ldr	r2, [r7, #20]
 8005a62:	621a      	str	r2, [r3, #32]
}
 8005a64:	46c0      	nop			; (mov r8, r8)
 8005a66:	46bd      	mov	sp, r7
 8005a68:	b006      	add	sp, #24
 8005a6a:	bd80      	pop	{r7, pc}
 8005a6c:	fffffeff 	.word	0xfffffeff
 8005a70:	fffffdff 	.word	0xfffffdff
 8005a74:	40012c00 	.word	0x40012c00
 8005a78:	fffff7ff 	.word	0xfffff7ff
 8005a7c:	fffffbff 	.word	0xfffffbff
 8005a80:	40014000 	.word	0x40014000
 8005a84:	40014400 	.word	0x40014400
 8005a88:	40014800 	.word	0x40014800
 8005a8c:	ffffefff 	.word	0xffffefff
 8005a90:	ffffdfff 	.word	0xffffdfff

08005a94 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b086      	sub	sp, #24
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6a1b      	ldr	r3, [r3, #32]
 8005aa2:	4a28      	ldr	r2, [pc, #160]	; (8005b44 <TIM_OC4_SetConfig+0xb0>)
 8005aa4:	401a      	ands	r2, r3
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6a1b      	ldr	r3, [r3, #32]
 8005aae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	69db      	ldr	r3, [r3, #28]
 8005aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	4a22      	ldr	r2, [pc, #136]	; (8005b48 <TIM_OC4_SetConfig+0xb4>)
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	4a21      	ldr	r2, [pc, #132]	; (8005b4c <TIM_OC4_SetConfig+0xb8>)
 8005ac8:	4013      	ands	r3, r2
 8005aca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	021b      	lsls	r3, r3, #8
 8005ad2:	68fa      	ldr	r2, [r7, #12]
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	4a1d      	ldr	r2, [pc, #116]	; (8005b50 <TIM_OC4_SetConfig+0xbc>)
 8005adc:	4013      	ands	r3, r2
 8005ade:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	031b      	lsls	r3, r3, #12
 8005ae6:	693a      	ldr	r2, [r7, #16]
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	4a19      	ldr	r2, [pc, #100]	; (8005b54 <TIM_OC4_SetConfig+0xc0>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d00b      	beq.n	8005b0c <TIM_OC4_SetConfig+0x78>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	4a18      	ldr	r2, [pc, #96]	; (8005b58 <TIM_OC4_SetConfig+0xc4>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d007      	beq.n	8005b0c <TIM_OC4_SetConfig+0x78>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	4a17      	ldr	r2, [pc, #92]	; (8005b5c <TIM_OC4_SetConfig+0xc8>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d003      	beq.n	8005b0c <TIM_OC4_SetConfig+0x78>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	4a16      	ldr	r2, [pc, #88]	; (8005b60 <TIM_OC4_SetConfig+0xcc>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d109      	bne.n	8005b20 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	4a15      	ldr	r2, [pc, #84]	; (8005b64 <TIM_OC4_SetConfig+0xd0>)
 8005b10:	4013      	ands	r3, r2
 8005b12:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	695b      	ldr	r3, [r3, #20]
 8005b18:	019b      	lsls	r3, r3, #6
 8005b1a:	697a      	ldr	r2, [r7, #20]
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	697a      	ldr	r2, [r7, #20]
 8005b24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	68fa      	ldr	r2, [r7, #12]
 8005b2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	685a      	ldr	r2, [r3, #4]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	693a      	ldr	r2, [r7, #16]
 8005b38:	621a      	str	r2, [r3, #32]
}
 8005b3a:	46c0      	nop			; (mov r8, r8)
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	b006      	add	sp, #24
 8005b40:	bd80      	pop	{r7, pc}
 8005b42:	46c0      	nop			; (mov r8, r8)
 8005b44:	ffffefff 	.word	0xffffefff
 8005b48:	ffff8fff 	.word	0xffff8fff
 8005b4c:	fffffcff 	.word	0xfffffcff
 8005b50:	ffffdfff 	.word	0xffffdfff
 8005b54:	40012c00 	.word	0x40012c00
 8005b58:	40014000 	.word	0x40014000
 8005b5c:	40014400 	.word	0x40014400
 8005b60:	40014800 	.word	0x40014800
 8005b64:	ffffbfff 	.word	0xffffbfff

08005b68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b086      	sub	sp, #24
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	60f8      	str	r0, [r7, #12]
 8005b70:	60b9      	str	r1, [r7, #8]
 8005b72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	6a1b      	ldr	r3, [r3, #32]
 8005b78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	6a1b      	ldr	r3, [r3, #32]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	4393      	bics	r3, r2
 8005b82:	001a      	movs	r2, r3
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	699b      	ldr	r3, [r3, #24]
 8005b8c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	22f0      	movs	r2, #240	; 0xf0
 8005b92:	4393      	bics	r3, r2
 8005b94:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	011b      	lsls	r3, r3, #4
 8005b9a:	693a      	ldr	r2, [r7, #16]
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	220a      	movs	r2, #10
 8005ba4:	4393      	bics	r3, r2
 8005ba6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ba8:	697a      	ldr	r2, [r7, #20]
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	4313      	orrs	r3, r2
 8005bae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	693a      	ldr	r2, [r7, #16]
 8005bb4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	697a      	ldr	r2, [r7, #20]
 8005bba:	621a      	str	r2, [r3, #32]
}
 8005bbc:	46c0      	nop			; (mov r8, r8)
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	b006      	add	sp, #24
 8005bc2:	bd80      	pop	{r7, pc}

08005bc4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b086      	sub	sp, #24
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	60f8      	str	r0, [r7, #12]
 8005bcc:	60b9      	str	r1, [r7, #8]
 8005bce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	6a1b      	ldr	r3, [r3, #32]
 8005bd4:	2210      	movs	r2, #16
 8005bd6:	4393      	bics	r3, r2
 8005bd8:	001a      	movs	r2, r3
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	699b      	ldr	r3, [r3, #24]
 8005be2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	6a1b      	ldr	r3, [r3, #32]
 8005be8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	4a0d      	ldr	r2, [pc, #52]	; (8005c24 <TIM_TI2_ConfigInputStage+0x60>)
 8005bee:	4013      	ands	r3, r2
 8005bf0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	031b      	lsls	r3, r3, #12
 8005bf6:	697a      	ldr	r2, [r7, #20]
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	22a0      	movs	r2, #160	; 0xa0
 8005c00:	4393      	bics	r3, r2
 8005c02:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	011b      	lsls	r3, r3, #4
 8005c08:	693a      	ldr	r2, [r7, #16]
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	697a      	ldr	r2, [r7, #20]
 8005c12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	693a      	ldr	r2, [r7, #16]
 8005c18:	621a      	str	r2, [r3, #32]
}
 8005c1a:	46c0      	nop			; (mov r8, r8)
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	b006      	add	sp, #24
 8005c20:	bd80      	pop	{r7, pc}
 8005c22:	46c0      	nop			; (mov r8, r8)
 8005c24:	ffff0fff 	.word	0xffff0fff

08005c28 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b084      	sub	sp, #16
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2270      	movs	r2, #112	; 0x70
 8005c3c:	4393      	bics	r3, r2
 8005c3e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c40:	683a      	ldr	r2, [r7, #0]
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	4313      	orrs	r3, r2
 8005c46:	2207      	movs	r2, #7
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	68fa      	ldr	r2, [r7, #12]
 8005c50:	609a      	str	r2, [r3, #8]
}
 8005c52:	46c0      	nop			; (mov r8, r8)
 8005c54:	46bd      	mov	sp, r7
 8005c56:	b004      	add	sp, #16
 8005c58:	bd80      	pop	{r7, pc}
	...

08005c5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b086      	sub	sp, #24
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	60f8      	str	r0, [r7, #12]
 8005c64:	60b9      	str	r1, [r7, #8]
 8005c66:	607a      	str	r2, [r7, #4]
 8005c68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	4a09      	ldr	r2, [pc, #36]	; (8005c98 <TIM_ETR_SetConfig+0x3c>)
 8005c74:	4013      	ands	r3, r2
 8005c76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	021a      	lsls	r2, r3, #8
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	431a      	orrs	r2, r3
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	4313      	orrs	r3, r2
 8005c84:	697a      	ldr	r2, [r7, #20]
 8005c86:	4313      	orrs	r3, r2
 8005c88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	697a      	ldr	r2, [r7, #20]
 8005c8e:	609a      	str	r2, [r3, #8]
}
 8005c90:	46c0      	nop			; (mov r8, r8)
 8005c92:	46bd      	mov	sp, r7
 8005c94:	b006      	add	sp, #24
 8005c96:	bd80      	pop	{r7, pc}
 8005c98:	ffff00ff 	.word	0xffff00ff

08005c9c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b086      	sub	sp, #24
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	60f8      	str	r0, [r7, #12]
 8005ca4:	60b9      	str	r1, [r7, #8]
 8005ca6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	221f      	movs	r2, #31
 8005cac:	4013      	ands	r3, r2
 8005cae:	2201      	movs	r2, #1
 8005cb0:	409a      	lsls	r2, r3
 8005cb2:	0013      	movs	r3, r2
 8005cb4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	6a1b      	ldr	r3, [r3, #32]
 8005cba:	697a      	ldr	r2, [r7, #20]
 8005cbc:	43d2      	mvns	r2, r2
 8005cbe:	401a      	ands	r2, r3
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	6a1a      	ldr	r2, [r3, #32]
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	211f      	movs	r1, #31
 8005ccc:	400b      	ands	r3, r1
 8005cce:	6879      	ldr	r1, [r7, #4]
 8005cd0:	4099      	lsls	r1, r3
 8005cd2:	000b      	movs	r3, r1
 8005cd4:	431a      	orrs	r2, r3
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	621a      	str	r2, [r3, #32]
}
 8005cda:	46c0      	nop			; (mov r8, r8)
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	b006      	add	sp, #24
 8005ce0:	bd80      	pop	{r7, pc}
	...

08005ce4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b084      	sub	sp, #16
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	223c      	movs	r2, #60	; 0x3c
 8005cf2:	5c9b      	ldrb	r3, [r3, r2]
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d101      	bne.n	8005cfc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005cf8:	2302      	movs	r3, #2
 8005cfa:	e041      	b.n	8005d80 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	223c      	movs	r2, #60	; 0x3c
 8005d00:	2101      	movs	r1, #1
 8005d02:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	223d      	movs	r2, #61	; 0x3d
 8005d08:	2102      	movs	r1, #2
 8005d0a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2270      	movs	r2, #112	; 0x70
 8005d20:	4393      	bics	r3, r2
 8005d22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	68fa      	ldr	r2, [r7, #12]
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	68fa      	ldr	r2, [r7, #12]
 8005d34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a13      	ldr	r2, [pc, #76]	; (8005d88 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d009      	beq.n	8005d54 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a11      	ldr	r2, [pc, #68]	; (8005d8c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d004      	beq.n	8005d54 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a10      	ldr	r2, [pc, #64]	; (8005d90 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d10c      	bne.n	8005d6e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	2280      	movs	r2, #128	; 0x80
 8005d58:	4393      	bics	r3, r2
 8005d5a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	68ba      	ldr	r2, [r7, #8]
 8005d62:	4313      	orrs	r3, r2
 8005d64:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	68ba      	ldr	r2, [r7, #8]
 8005d6c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	223d      	movs	r2, #61	; 0x3d
 8005d72:	2101      	movs	r1, #1
 8005d74:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	223c      	movs	r2, #60	; 0x3c
 8005d7a:	2100      	movs	r1, #0
 8005d7c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005d7e:	2300      	movs	r3, #0
}
 8005d80:	0018      	movs	r0, r3
 8005d82:	46bd      	mov	sp, r7
 8005d84:	b004      	add	sp, #16
 8005d86:	bd80      	pop	{r7, pc}
 8005d88:	40012c00 	.word	0x40012c00
 8005d8c:	40000400 	.word	0x40000400
 8005d90:	40014000 	.word	0x40014000

08005d94 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b084      	sub	sp, #16
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	223c      	movs	r2, #60	; 0x3c
 8005da6:	5c9b      	ldrb	r3, [r3, r2]
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d101      	bne.n	8005db0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005dac:	2302      	movs	r3, #2
 8005dae:	e03e      	b.n	8005e2e <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	223c      	movs	r2, #60	; 0x3c
 8005db4:	2101      	movs	r1, #1
 8005db6:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	22ff      	movs	r2, #255	; 0xff
 8005dbc:	4393      	bics	r3, r2
 8005dbe:	001a      	movs	r2, r3
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	68db      	ldr	r3, [r3, #12]
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	4a1b      	ldr	r2, [pc, #108]	; (8005e38 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8005dcc:	401a      	ands	r2, r3
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	689b      	ldr	r3, [r3, #8]
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	4a18      	ldr	r2, [pc, #96]	; (8005e3c <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8005dda:	401a      	ands	r2, r3
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	4313      	orrs	r3, r2
 8005de2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	4a16      	ldr	r2, [pc, #88]	; (8005e40 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8005de8:	401a      	ands	r2, r3
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4313      	orrs	r3, r2
 8005df0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	4a13      	ldr	r2, [pc, #76]	; (8005e44 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8005df6:	401a      	ands	r2, r3
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	691b      	ldr	r3, [r3, #16]
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	4a11      	ldr	r2, [pc, #68]	; (8005e48 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8005e04:	401a      	ands	r2, r3
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	695b      	ldr	r3, [r3, #20]
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	4a0e      	ldr	r2, [pc, #56]	; (8005e4c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8005e12:	401a      	ands	r2, r3
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	69db      	ldr	r3, [r3, #28]
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	68fa      	ldr	r2, [r7, #12]
 8005e22:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	223c      	movs	r2, #60	; 0x3c
 8005e28:	2100      	movs	r1, #0
 8005e2a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e2c:	2300      	movs	r3, #0
}
 8005e2e:	0018      	movs	r0, r3
 8005e30:	46bd      	mov	sp, r7
 8005e32:	b004      	add	sp, #16
 8005e34:	bd80      	pop	{r7, pc}
 8005e36:	46c0      	nop			; (mov r8, r8)
 8005e38:	fffffcff 	.word	0xfffffcff
 8005e3c:	fffffbff 	.word	0xfffffbff
 8005e40:	fffff7ff 	.word	0xfffff7ff
 8005e44:	ffffefff 	.word	0xffffefff
 8005e48:	ffffdfff 	.word	0xffffdfff
 8005e4c:	ffffbfff 	.word	0xffffbfff

08005e50 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b084      	sub	sp, #16
 8005e54:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e56:	f3ef 8305 	mrs	r3, IPSR
 8005e5a:	60bb      	str	r3, [r7, #8]
  return(result);
 8005e5c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d109      	bne.n	8005e76 <osKernelInitialize+0x26>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e62:	f3ef 8310 	mrs	r3, PRIMASK
 8005e66:	607b      	str	r3, [r7, #4]
  return(result);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d007      	beq.n	8005e7e <osKernelInitialize+0x2e>
 8005e6e:	4b0d      	ldr	r3, [pc, #52]	; (8005ea4 <osKernelInitialize+0x54>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	2b02      	cmp	r3, #2
 8005e74:	d103      	bne.n	8005e7e <osKernelInitialize+0x2e>
    stat = osErrorISR;
 8005e76:	2306      	movs	r3, #6
 8005e78:	425b      	negs	r3, r3
 8005e7a:	60fb      	str	r3, [r7, #12]
 8005e7c:	e00c      	b.n	8005e98 <osKernelInitialize+0x48>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005e7e:	4b09      	ldr	r3, [pc, #36]	; (8005ea4 <osKernelInitialize+0x54>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d105      	bne.n	8005e92 <osKernelInitialize+0x42>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8005e86:	4b07      	ldr	r3, [pc, #28]	; (8005ea4 <osKernelInitialize+0x54>)
 8005e88:	2201      	movs	r2, #1
 8005e8a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	60fb      	str	r3, [r7, #12]
 8005e90:	e002      	b.n	8005e98 <osKernelInitialize+0x48>
    } else {
      stat = osError;
 8005e92:	2301      	movs	r3, #1
 8005e94:	425b      	negs	r3, r3
 8005e96:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005e98:	68fb      	ldr	r3, [r7, #12]
}
 8005e9a:	0018      	movs	r0, r3
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	b004      	add	sp, #16
 8005ea0:	bd80      	pop	{r7, pc}
 8005ea2:	46c0      	nop			; (mov r8, r8)
 8005ea4:	200000d0 	.word	0x200000d0

08005ea8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005ea8:	b5b0      	push	{r4, r5, r7, lr}
 8005eaa:	b090      	sub	sp, #64	; 0x40
 8005eac:	af04      	add	r7, sp, #16
 8005eae:	60f8      	str	r0, [r7, #12]
 8005eb0:	60b9      	str	r1, [r7, #8]
 8005eb2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005eb8:	f3ef 8305 	mrs	r3, IPSR
 8005ebc:	61fb      	str	r3, [r7, #28]
  return(result);
 8005ebe:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d000      	beq.n	8005ec6 <osThreadNew+0x1e>
 8005ec4:	e090      	b.n	8005fe8 <osThreadNew+0x140>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ec6:	f3ef 8310 	mrs	r3, PRIMASK
 8005eca:	61bb      	str	r3, [r7, #24]
  return(result);
 8005ecc:	69bb      	ldr	r3, [r7, #24]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d004      	beq.n	8005edc <osThreadNew+0x34>
 8005ed2:	4b48      	ldr	r3, [pc, #288]	; (8005ff4 <osThreadNew+0x14c>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	2b02      	cmp	r3, #2
 8005ed8:	d100      	bne.n	8005edc <osThreadNew+0x34>
 8005eda:	e085      	b.n	8005fe8 <osThreadNew+0x140>
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d100      	bne.n	8005ee4 <osThreadNew+0x3c>
 8005ee2:	e081      	b.n	8005fe8 <osThreadNew+0x140>
    stack = configMINIMAL_STACK_SIZE;
 8005ee4:	2380      	movs	r3, #128	; 0x80
 8005ee6:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8005ee8:	2318      	movs	r3, #24
 8005eea:	627b      	str	r3, [r7, #36]	; 0x24

    empty = '\0';
 8005eec:	2117      	movs	r1, #23
 8005eee:	187b      	adds	r3, r7, r1
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	701a      	strb	r2, [r3, #0]
    name  = &empty;
 8005ef4:	187b      	adds	r3, r7, r1
 8005ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem   = -1;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	425b      	negs	r3, r3
 8005efc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d044      	beq.n	8005f8e <osThreadNew+0xe6>
      if (attr->name != NULL) {
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d002      	beq.n	8005f12 <osThreadNew+0x6a>
        name = attr->name;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	699b      	ldr	r3, [r3, #24]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d002      	beq.n	8005f20 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	699b      	ldr	r3, [r3, #24]
 8005f1e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d007      	beq.n	8005f36 <osThreadNew+0x8e>
 8005f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f28:	2b38      	cmp	r3, #56	; 0x38
 8005f2a:	d804      	bhi.n	8005f36 <osThreadNew+0x8e>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	2201      	movs	r2, #1
 8005f32:	4013      	ands	r3, r2
 8005f34:	d001      	beq.n	8005f3a <osThreadNew+0x92>
        return (NULL);
 8005f36:	2300      	movs	r3, #0
 8005f38:	e057      	b.n	8005fea <osThreadNew+0x142>
      }

      if (attr->stack_size > 0U) {
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	695b      	ldr	r3, [r3, #20]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d003      	beq.n	8005f4a <osThreadNew+0xa2>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	695b      	ldr	r3, [r3, #20]
 8005f46:	089b      	lsrs	r3, r3, #2
 8005f48:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d00e      	beq.n	8005f70 <osThreadNew+0xc8>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	68db      	ldr	r3, [r3, #12]
 8005f56:	2b5b      	cmp	r3, #91	; 0x5b
 8005f58:	d90a      	bls.n	8005f70 <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d006      	beq.n	8005f70 <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	695b      	ldr	r3, [r3, #20]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d002      	beq.n	8005f70 <osThreadNew+0xc8>
        mem = 1;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	623b      	str	r3, [r7, #32]
 8005f6e:	e010      	b.n	8005f92 <osThreadNew+0xea>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	689b      	ldr	r3, [r3, #8]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d10c      	bne.n	8005f92 <osThreadNew+0xea>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d108      	bne.n	8005f92 <osThreadNew+0xea>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	691b      	ldr	r3, [r3, #16]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d104      	bne.n	8005f92 <osThreadNew+0xea>
          mem = 0;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	623b      	str	r3, [r7, #32]
 8005f8c:	e001      	b.n	8005f92 <osThreadNew+0xea>
        }
      }
    }
    else {
      mem = 0;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005f92:	6a3b      	ldr	r3, [r7, #32]
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d112      	bne.n	8005fbe <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	691a      	ldr	r2, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	689b      	ldr	r3, [r3, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005fa0:	68bd      	ldr	r5, [r7, #8]
 8005fa2:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8005fa4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005fa6:	68f8      	ldr	r0, [r7, #12]
 8005fa8:	9302      	str	r3, [sp, #8]
 8005faa:	9201      	str	r2, [sp, #4]
 8005fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fae:	9300      	str	r3, [sp, #0]
 8005fb0:	002b      	movs	r3, r5
 8005fb2:	0022      	movs	r2, r4
 8005fb4:	f000 ff0b 	bl	8006dce <xTaskCreateStatic>
 8005fb8:	0003      	movs	r3, r0
 8005fba:	613b      	str	r3, [r7, #16]
 8005fbc:	e014      	b.n	8005fe8 <osThreadNew+0x140>
    }
    else {
      if (mem == 0) {
 8005fbe:	6a3b      	ldr	r3, [r7, #32]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d111      	bne.n	8005fe8 <osThreadNew+0x140>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fc6:	b29a      	uxth	r2, r3
 8005fc8:	68bc      	ldr	r4, [r7, #8]
 8005fca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005fcc:	68f8      	ldr	r0, [r7, #12]
 8005fce:	2310      	movs	r3, #16
 8005fd0:	18fb      	adds	r3, r7, r3
 8005fd2:	9301      	str	r3, [sp, #4]
 8005fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd6:	9300      	str	r3, [sp, #0]
 8005fd8:	0023      	movs	r3, r4
 8005fda:	f000 ff3b 	bl	8006e54 <xTaskCreate>
 8005fde:	0003      	movs	r3, r0
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d001      	beq.n	8005fe8 <osThreadNew+0x140>
          hTask = NULL;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005fe8:	693b      	ldr	r3, [r7, #16]
}
 8005fea:	0018      	movs	r0, r3
 8005fec:	46bd      	mov	sp, r7
 8005fee:	b00c      	add	sp, #48	; 0x30
 8005ff0:	bdb0      	pop	{r4, r5, r7, pc}
 8005ff2:	46c0      	nop			; (mov r8, r8)
 8005ff4:	200000d0 	.word	0x200000d0

08005ff8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b086      	sub	sp, #24
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006000:	f3ef 8305 	mrs	r3, IPSR
 8006004:	613b      	str	r3, [r7, #16]
  return(result);
 8006006:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006008:	2b00      	cmp	r3, #0
 800600a:	d109      	bne.n	8006020 <osDelay+0x28>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800600c:	f3ef 8310 	mrs	r3, PRIMASK
 8006010:	60fb      	str	r3, [r7, #12]
  return(result);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d007      	beq.n	8006028 <osDelay+0x30>
 8006018:	4b0a      	ldr	r3, [pc, #40]	; (8006044 <osDelay+0x4c>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	2b02      	cmp	r3, #2
 800601e:	d103      	bne.n	8006028 <osDelay+0x30>
    stat = osErrorISR;
 8006020:	2306      	movs	r3, #6
 8006022:	425b      	negs	r3, r3
 8006024:	617b      	str	r3, [r7, #20]
 8006026:	e008      	b.n	800603a <osDelay+0x42>
  }
  else {
    stat = osOK;
 8006028:	2300      	movs	r3, #0
 800602a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d003      	beq.n	800603a <osDelay+0x42>
      vTaskDelay(ticks);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	0018      	movs	r0, r3
 8006036:	f001 f843 	bl	80070c0 <vTaskDelay>
    }
  }

  return (stat);
 800603a:	697b      	ldr	r3, [r7, #20]
}
 800603c:	0018      	movs	r0, r3
 800603e:	46bd      	mov	sp, r7
 8006040:	b006      	add	sp, #24
 8006042:	bd80      	pop	{r7, pc}
 8006044:	200000d0 	.word	0x200000d0

08006048 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006048:	b580      	push	{r7, lr}
 800604a:	b084      	sub	sp, #16
 800604c:	af00      	add	r7, sp, #0
 800604e:	60f8      	str	r0, [r7, #12]
 8006050:	60b9      	str	r1, [r7, #8]
 8006052:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	4a06      	ldr	r2, [pc, #24]	; (8006070 <vApplicationGetIdleTaskMemory+0x28>)
 8006058:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	4a05      	ldr	r2, [pc, #20]	; (8006074 <vApplicationGetIdleTaskMemory+0x2c>)
 800605e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2280      	movs	r2, #128	; 0x80
 8006064:	601a      	str	r2, [r3, #0]
}
 8006066:	46c0      	nop			; (mov r8, r8)
 8006068:	46bd      	mov	sp, r7
 800606a:	b004      	add	sp, #16
 800606c:	bd80      	pop	{r7, pc}
 800606e:	46c0      	nop			; (mov r8, r8)
 8006070:	200000d4 	.word	0x200000d4
 8006074:	20000130 	.word	0x20000130

08006078 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006078:	b580      	push	{r7, lr}
 800607a:	b084      	sub	sp, #16
 800607c:	af00      	add	r7, sp, #0
 800607e:	60f8      	str	r0, [r7, #12]
 8006080:	60b9      	str	r1, [r7, #8]
 8006082:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	4a06      	ldr	r2, [pc, #24]	; (80060a0 <vApplicationGetTimerTaskMemory+0x28>)
 8006088:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	4a05      	ldr	r2, [pc, #20]	; (80060a4 <vApplicationGetTimerTaskMemory+0x2c>)
 800608e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2280      	movs	r2, #128	; 0x80
 8006094:	0052      	lsls	r2, r2, #1
 8006096:	601a      	str	r2, [r3, #0]
}
 8006098:	46c0      	nop			; (mov r8, r8)
 800609a:	46bd      	mov	sp, r7
 800609c:	b004      	add	sp, #16
 800609e:	bd80      	pop	{r7, pc}
 80060a0:	20000330 	.word	0x20000330
 80060a4:	2000038c 	.word	0x2000038c

080060a8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b082      	sub	sp, #8
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	3308      	adds	r3, #8
 80060b4:	001a      	movs	r2, r3
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2201      	movs	r2, #1
 80060be:	4252      	negs	r2, r2
 80060c0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	3308      	adds	r3, #8
 80060c6:	001a      	movs	r2, r3
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	3308      	adds	r3, #8
 80060d0:	001a      	movs	r2, r3
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2200      	movs	r2, #0
 80060da:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80060dc:	46c0      	nop			; (mov r8, r8)
 80060de:	46bd      	mov	sp, r7
 80060e0:	b002      	add	sp, #8
 80060e2:	bd80      	pop	{r7, pc}

080060e4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b082      	sub	sp, #8
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2200      	movs	r2, #0
 80060f0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80060f2:	46c0      	nop			; (mov r8, r8)
 80060f4:	46bd      	mov	sp, r7
 80060f6:	b002      	add	sp, #8
 80060f8:	bd80      	pop	{r7, pc}

080060fa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80060fa:	b580      	push	{r7, lr}
 80060fc:	b084      	sub	sp, #16
 80060fe:	af00      	add	r7, sp, #0
 8006100:	6078      	str	r0, [r7, #4]
 8006102:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	68fa      	ldr	r2, [r7, #12]
 800610e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	689a      	ldr	r2, [r3, #8]
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	689b      	ldr	r3, [r3, #8]
 800611c:	683a      	ldr	r2, [r7, #0]
 800611e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	683a      	ldr	r2, [r7, #0]
 8006124:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	687a      	ldr	r2, [r7, #4]
 800612a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	1c5a      	adds	r2, r3, #1
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	601a      	str	r2, [r3, #0]
}
 8006136:	46c0      	nop			; (mov r8, r8)
 8006138:	46bd      	mov	sp, r7
 800613a:	b004      	add	sp, #16
 800613c:	bd80      	pop	{r7, pc}

0800613e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800613e:	b580      	push	{r7, lr}
 8006140:	b084      	sub	sp, #16
 8006142:	af00      	add	r7, sp, #0
 8006144:	6078      	str	r0, [r7, #4]
 8006146:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	3301      	adds	r3, #1
 8006152:	d103      	bne.n	800615c <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	691b      	ldr	r3, [r3, #16]
 8006158:	60fb      	str	r3, [r7, #12]
 800615a:	e00c      	b.n	8006176 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	3308      	adds	r3, #8
 8006160:	60fb      	str	r3, [r7, #12]
 8006162:	e002      	b.n	800616a <vListInsert+0x2c>
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	60fb      	str	r3, [r7, #12]
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	68ba      	ldr	r2, [r7, #8]
 8006172:	429a      	cmp	r2, r3
 8006174:	d2f6      	bcs.n	8006164 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	685a      	ldr	r2, [r3, #4]
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	683a      	ldr	r2, [r7, #0]
 8006184:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	68fa      	ldr	r2, [r7, #12]
 800618a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	683a      	ldr	r2, [r7, #0]
 8006190:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	687a      	ldr	r2, [r7, #4]
 8006196:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	1c5a      	adds	r2, r3, #1
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	601a      	str	r2, [r3, #0]
}
 80061a2:	46c0      	nop			; (mov r8, r8)
 80061a4:	46bd      	mov	sp, r7
 80061a6:	b004      	add	sp, #16
 80061a8:	bd80      	pop	{r7, pc}

080061aa <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80061aa:	b580      	push	{r7, lr}
 80061ac:	b084      	sub	sp, #16
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	691b      	ldr	r3, [r3, #16]
 80061b6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	687a      	ldr	r2, [r7, #4]
 80061be:	6892      	ldr	r2, [r2, #8]
 80061c0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	689b      	ldr	r3, [r3, #8]
 80061c6:	687a      	ldr	r2, [r7, #4]
 80061c8:	6852      	ldr	r2, [r2, #4]
 80061ca:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	687a      	ldr	r2, [r7, #4]
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d103      	bne.n	80061de <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	689a      	ldr	r2, [r3, #8]
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2200      	movs	r2, #0
 80061e2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	1e5a      	subs	r2, r3, #1
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
}
 80061f2:	0018      	movs	r0, r3
 80061f4:	46bd      	mov	sp, r7
 80061f6:	b004      	add	sp, #16
 80061f8:	bd80      	pop	{r7, pc}

080061fa <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80061fa:	b580      	push	{r7, lr}
 80061fc:	b084      	sub	sp, #16
 80061fe:	af00      	add	r7, sp, #0
 8006200:	6078      	str	r0, [r7, #4]
 8006202:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d101      	bne.n	8006212 <xQueueGenericReset+0x18>
 800620e:	b672      	cpsid	i
 8006210:	e7fe      	b.n	8006210 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 8006212:	f002 f885 	bl	8008320 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681a      	ldr	r2, [r3, #0]
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006222:	434b      	muls	r3, r1
 8006224:	18d2      	adds	r2, r2, r3
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2200      	movs	r2, #0
 800622e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681a      	ldr	r2, [r3, #0]
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006240:	1e59      	subs	r1, r3, #1
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006246:	434b      	muls	r3, r1
 8006248:	18d2      	adds	r2, r2, r3
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2244      	movs	r2, #68	; 0x44
 8006252:	21ff      	movs	r1, #255	; 0xff
 8006254:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2245      	movs	r2, #69	; 0x45
 800625a:	21ff      	movs	r1, #255	; 0xff
 800625c:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d10d      	bne.n	8006280 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	691b      	ldr	r3, [r3, #16]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d013      	beq.n	8006294 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	3310      	adds	r3, #16
 8006270:	0018      	movs	r0, r3
 8006272:	f001 f98f 	bl	8007594 <xTaskRemoveFromEventList>
 8006276:	1e03      	subs	r3, r0, #0
 8006278:	d00c      	beq.n	8006294 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800627a:	f002 f841 	bl	8008300 <vPortYield>
 800627e:	e009      	b.n	8006294 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	3310      	adds	r3, #16
 8006284:	0018      	movs	r0, r3
 8006286:	f7ff ff0f 	bl	80060a8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	3324      	adds	r3, #36	; 0x24
 800628e:	0018      	movs	r0, r3
 8006290:	f7ff ff0a 	bl	80060a8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006294:	f002 f856 	bl	8008344 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006298:	2301      	movs	r3, #1
}
 800629a:	0018      	movs	r0, r3
 800629c:	46bd      	mov	sp, r7
 800629e:	b004      	add	sp, #16
 80062a0:	bd80      	pop	{r7, pc}

080062a2 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80062a2:	b590      	push	{r4, r7, lr}
 80062a4:	b089      	sub	sp, #36	; 0x24
 80062a6:	af02      	add	r7, sp, #8
 80062a8:	60f8      	str	r0, [r7, #12]
 80062aa:	60b9      	str	r1, [r7, #8]
 80062ac:	607a      	str	r2, [r7, #4]
 80062ae:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d101      	bne.n	80062ba <xQueueGenericCreateStatic+0x18>
 80062b6:	b672      	cpsid	i
 80062b8:	e7fe      	b.n	80062b8 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d101      	bne.n	80062c4 <xQueueGenericCreateStatic+0x22>
 80062c0:	b672      	cpsid	i
 80062c2:	e7fe      	b.n	80062c2 <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d002      	beq.n	80062d0 <xQueueGenericCreateStatic+0x2e>
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d001      	beq.n	80062d4 <xQueueGenericCreateStatic+0x32>
 80062d0:	2301      	movs	r3, #1
 80062d2:	e000      	b.n	80062d6 <xQueueGenericCreateStatic+0x34>
 80062d4:	2300      	movs	r3, #0
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d101      	bne.n	80062de <xQueueGenericCreateStatic+0x3c>
 80062da:	b672      	cpsid	i
 80062dc:	e7fe      	b.n	80062dc <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d102      	bne.n	80062ea <xQueueGenericCreateStatic+0x48>
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d101      	bne.n	80062ee <xQueueGenericCreateStatic+0x4c>
 80062ea:	2301      	movs	r3, #1
 80062ec:	e000      	b.n	80062f0 <xQueueGenericCreateStatic+0x4e>
 80062ee:	2300      	movs	r3, #0
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d101      	bne.n	80062f8 <xQueueGenericCreateStatic+0x56>
 80062f4:	b672      	cpsid	i
 80062f6:	e7fe      	b.n	80062f6 <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80062f8:	2350      	movs	r3, #80	; 0x50
 80062fa:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	2b50      	cmp	r3, #80	; 0x50
 8006300:	d001      	beq.n	8006306 <xQueueGenericCreateStatic+0x64>
 8006302:	b672      	cpsid	i
 8006304:	e7fe      	b.n	8006304 <xQueueGenericCreateStatic+0x62>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d00e      	beq.n	800632e <xQueueGenericCreateStatic+0x8c>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	2246      	movs	r2, #70	; 0x46
 8006314:	2101      	movs	r1, #1
 8006316:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006318:	2328      	movs	r3, #40	; 0x28
 800631a:	18fb      	adds	r3, r7, r3
 800631c:	781c      	ldrb	r4, [r3, #0]
 800631e:	687a      	ldr	r2, [r7, #4]
 8006320:	68b9      	ldr	r1, [r7, #8]
 8006322:	68f8      	ldr	r0, [r7, #12]
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	9300      	str	r3, [sp, #0]
 8006328:	0023      	movs	r3, r4
 800632a:	f000 f83b 	bl	80063a4 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800632e:	697b      	ldr	r3, [r7, #20]
	}
 8006330:	0018      	movs	r0, r3
 8006332:	46bd      	mov	sp, r7
 8006334:	b007      	add	sp, #28
 8006336:	bd90      	pop	{r4, r7, pc}

08006338 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006338:	b590      	push	{r4, r7, lr}
 800633a:	b08b      	sub	sp, #44	; 0x2c
 800633c:	af02      	add	r7, sp, #8
 800633e:	60f8      	str	r0, [r7, #12]
 8006340:	60b9      	str	r1, [r7, #8]
 8006342:	1dfb      	adds	r3, r7, #7
 8006344:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d101      	bne.n	8006350 <xQueueGenericCreate+0x18>
 800634c:	b672      	cpsid	i
 800634e:	e7fe      	b.n	800634e <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d102      	bne.n	800635c <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006356:	2300      	movs	r3, #0
 8006358:	61fb      	str	r3, [r7, #28]
 800635a:	e003      	b.n	8006364 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	68ba      	ldr	r2, [r7, #8]
 8006360:	4353      	muls	r3, r2
 8006362:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8006364:	69fb      	ldr	r3, [r7, #28]
 8006366:	3350      	adds	r3, #80	; 0x50
 8006368:	0018      	movs	r0, r3
 800636a:	f002 f871 	bl	8008450 <pvPortMalloc>
 800636e:	0003      	movs	r3, r0
 8006370:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 8006372:	69bb      	ldr	r3, [r7, #24]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d010      	beq.n	800639a <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8006378:	69bb      	ldr	r3, [r7, #24]
 800637a:	3350      	adds	r3, #80	; 0x50
 800637c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800637e:	69bb      	ldr	r3, [r7, #24]
 8006380:	2246      	movs	r2, #70	; 0x46
 8006382:	2100      	movs	r1, #0
 8006384:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006386:	1dfb      	adds	r3, r7, #7
 8006388:	781c      	ldrb	r4, [r3, #0]
 800638a:	697a      	ldr	r2, [r7, #20]
 800638c:	68b9      	ldr	r1, [r7, #8]
 800638e:	68f8      	ldr	r0, [r7, #12]
 8006390:	69bb      	ldr	r3, [r7, #24]
 8006392:	9300      	str	r3, [sp, #0]
 8006394:	0023      	movs	r3, r4
 8006396:	f000 f805 	bl	80063a4 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800639a:	69bb      	ldr	r3, [r7, #24]
	}
 800639c:	0018      	movs	r0, r3
 800639e:	46bd      	mov	sp, r7
 80063a0:	b009      	add	sp, #36	; 0x24
 80063a2:	bd90      	pop	{r4, r7, pc}

080063a4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b084      	sub	sp, #16
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	60f8      	str	r0, [r7, #12]
 80063ac:	60b9      	str	r1, [r7, #8]
 80063ae:	607a      	str	r2, [r7, #4]
 80063b0:	001a      	movs	r2, r3
 80063b2:	1cfb      	adds	r3, r7, #3
 80063b4:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d103      	bne.n	80063c4 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80063bc:	69bb      	ldr	r3, [r7, #24]
 80063be:	69ba      	ldr	r2, [r7, #24]
 80063c0:	601a      	str	r2, [r3, #0]
 80063c2:	e002      	b.n	80063ca <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80063c4:	69bb      	ldr	r3, [r7, #24]
 80063c6:	687a      	ldr	r2, [r7, #4]
 80063c8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80063ca:	69bb      	ldr	r3, [r7, #24]
 80063cc:	68fa      	ldr	r2, [r7, #12]
 80063ce:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80063d0:	69bb      	ldr	r3, [r7, #24]
 80063d2:	68ba      	ldr	r2, [r7, #8]
 80063d4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80063d6:	69bb      	ldr	r3, [r7, #24]
 80063d8:	2101      	movs	r1, #1
 80063da:	0018      	movs	r0, r3
 80063dc:	f7ff ff0d 	bl	80061fa <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80063e0:	69bb      	ldr	r3, [r7, #24]
 80063e2:	1cfa      	adds	r2, r7, #3
 80063e4:	214c      	movs	r1, #76	; 0x4c
 80063e6:	7812      	ldrb	r2, [r2, #0]
 80063e8:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80063ea:	46c0      	nop			; (mov r8, r8)
 80063ec:	46bd      	mov	sp, r7
 80063ee:	b004      	add	sp, #16
 80063f0:	bd80      	pop	{r7, pc}

080063f2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80063f2:	b580      	push	{r7, lr}
 80063f4:	b082      	sub	sp, #8
 80063f6:	af00      	add	r7, sp, #0
 80063f8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d00e      	beq.n	800641e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2200      	movs	r2, #0
 8006404:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2200      	movs	r2, #0
 800640a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2200      	movs	r2, #0
 8006410:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	2300      	movs	r3, #0
 8006416:	2200      	movs	r2, #0
 8006418:	2100      	movs	r1, #0
 800641a:	f000 f820 	bl	800645e <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800641e:	46c0      	nop			; (mov r8, r8)
 8006420:	46bd      	mov	sp, r7
 8006422:	b002      	add	sp, #8
 8006424:	bd80      	pop	{r7, pc}

08006426 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006426:	b580      	push	{r7, lr}
 8006428:	b086      	sub	sp, #24
 800642a:	af00      	add	r7, sp, #0
 800642c:	0002      	movs	r2, r0
 800642e:	1dfb      	adds	r3, r7, #7
 8006430:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006432:	2301      	movs	r3, #1
 8006434:	617b      	str	r3, [r7, #20]
 8006436:	2300      	movs	r3, #0
 8006438:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800643a:	1dfb      	adds	r3, r7, #7
 800643c:	781a      	ldrb	r2, [r3, #0]
 800643e:	6939      	ldr	r1, [r7, #16]
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	0018      	movs	r0, r3
 8006444:	f7ff ff78 	bl	8006338 <xQueueGenericCreate>
 8006448:	0003      	movs	r3, r0
 800644a:	60fb      	str	r3, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	0018      	movs	r0, r3
 8006450:	f7ff ffcf 	bl	80063f2 <prvInitialiseMutex>

		return pxNewQueue;
 8006454:	68fb      	ldr	r3, [r7, #12]
	}
 8006456:	0018      	movs	r0, r3
 8006458:	46bd      	mov	sp, r7
 800645a:	b006      	add	sp, #24
 800645c:	bd80      	pop	{r7, pc}

0800645e <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800645e:	b580      	push	{r7, lr}
 8006460:	b08a      	sub	sp, #40	; 0x28
 8006462:	af00      	add	r7, sp, #0
 8006464:	60f8      	str	r0, [r7, #12]
 8006466:	60b9      	str	r1, [r7, #8]
 8006468:	607a      	str	r2, [r7, #4]
 800646a:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800646c:	2300      	movs	r3, #0
 800646e:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8006474:	6a3b      	ldr	r3, [r7, #32]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d101      	bne.n	800647e <xQueueGenericSend+0x20>
 800647a:	b672      	cpsid	i
 800647c:	e7fe      	b.n	800647c <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d103      	bne.n	800648c <xQueueGenericSend+0x2e>
 8006484:	6a3b      	ldr	r3, [r7, #32]
 8006486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006488:	2b00      	cmp	r3, #0
 800648a:	d101      	bne.n	8006490 <xQueueGenericSend+0x32>
 800648c:	2301      	movs	r3, #1
 800648e:	e000      	b.n	8006492 <xQueueGenericSend+0x34>
 8006490:	2300      	movs	r3, #0
 8006492:	2b00      	cmp	r3, #0
 8006494:	d101      	bne.n	800649a <xQueueGenericSend+0x3c>
 8006496:	b672      	cpsid	i
 8006498:	e7fe      	b.n	8006498 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	2b02      	cmp	r3, #2
 800649e:	d103      	bne.n	80064a8 <xQueueGenericSend+0x4a>
 80064a0:	6a3b      	ldr	r3, [r7, #32]
 80064a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	d101      	bne.n	80064ac <xQueueGenericSend+0x4e>
 80064a8:	2301      	movs	r3, #1
 80064aa:	e000      	b.n	80064ae <xQueueGenericSend+0x50>
 80064ac:	2300      	movs	r3, #0
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d101      	bne.n	80064b6 <xQueueGenericSend+0x58>
 80064b2:	b672      	cpsid	i
 80064b4:	e7fe      	b.n	80064b4 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80064b6:	f001 fa05 	bl	80078c4 <xTaskGetSchedulerState>
 80064ba:	1e03      	subs	r3, r0, #0
 80064bc:	d102      	bne.n	80064c4 <xQueueGenericSend+0x66>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d101      	bne.n	80064c8 <xQueueGenericSend+0x6a>
 80064c4:	2301      	movs	r3, #1
 80064c6:	e000      	b.n	80064ca <xQueueGenericSend+0x6c>
 80064c8:	2300      	movs	r3, #0
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d101      	bne.n	80064d2 <xQueueGenericSend+0x74>
 80064ce:	b672      	cpsid	i
 80064d0:	e7fe      	b.n	80064d0 <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80064d2:	f001 ff25 	bl	8008320 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80064d6:	6a3b      	ldr	r3, [r7, #32]
 80064d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064da:	6a3b      	ldr	r3, [r7, #32]
 80064dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064de:	429a      	cmp	r2, r3
 80064e0:	d302      	bcc.n	80064e8 <xQueueGenericSend+0x8a>
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	2b02      	cmp	r3, #2
 80064e6:	d11e      	bne.n	8006526 <xQueueGenericSend+0xc8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80064e8:	683a      	ldr	r2, [r7, #0]
 80064ea:	68b9      	ldr	r1, [r7, #8]
 80064ec:	6a3b      	ldr	r3, [r7, #32]
 80064ee:	0018      	movs	r0, r3
 80064f0:	f000 faf4 	bl	8006adc <prvCopyDataToQueue>
 80064f4:	0003      	movs	r3, r0
 80064f6:	61fb      	str	r3, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80064f8:	6a3b      	ldr	r3, [r7, #32]
 80064fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d009      	beq.n	8006514 <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006500:	6a3b      	ldr	r3, [r7, #32]
 8006502:	3324      	adds	r3, #36	; 0x24
 8006504:	0018      	movs	r0, r3
 8006506:	f001 f845 	bl	8007594 <xTaskRemoveFromEventList>
 800650a:	1e03      	subs	r3, r0, #0
 800650c:	d007      	beq.n	800651e <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800650e:	f001 fef7 	bl	8008300 <vPortYield>
 8006512:	e004      	b.n	800651e <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006514:	69fb      	ldr	r3, [r7, #28]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d001      	beq.n	800651e <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800651a:	f001 fef1 	bl	8008300 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800651e:	f001 ff11 	bl	8008344 <vPortExitCritical>
				return pdPASS;
 8006522:	2301      	movs	r3, #1
 8006524:	e05b      	b.n	80065de <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d103      	bne.n	8006534 <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800652c:	f001 ff0a 	bl	8008344 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006530:	2300      	movs	r3, #0
 8006532:	e054      	b.n	80065de <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006536:	2b00      	cmp	r3, #0
 8006538:	d106      	bne.n	8006548 <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800653a:	2314      	movs	r3, #20
 800653c:	18fb      	adds	r3, r7, r3
 800653e:	0018      	movs	r0, r3
 8006540:	f001 f884 	bl	800764c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006544:	2301      	movs	r3, #1
 8006546:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006548:	f001 fefc 	bl	8008344 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800654c:	f000 fe32 	bl	80071b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006550:	f001 fee6 	bl	8008320 <vPortEnterCritical>
 8006554:	6a3b      	ldr	r3, [r7, #32]
 8006556:	2244      	movs	r2, #68	; 0x44
 8006558:	5c9b      	ldrb	r3, [r3, r2]
 800655a:	b25b      	sxtb	r3, r3
 800655c:	3301      	adds	r3, #1
 800655e:	d103      	bne.n	8006568 <xQueueGenericSend+0x10a>
 8006560:	6a3b      	ldr	r3, [r7, #32]
 8006562:	2244      	movs	r2, #68	; 0x44
 8006564:	2100      	movs	r1, #0
 8006566:	5499      	strb	r1, [r3, r2]
 8006568:	6a3b      	ldr	r3, [r7, #32]
 800656a:	2245      	movs	r2, #69	; 0x45
 800656c:	5c9b      	ldrb	r3, [r3, r2]
 800656e:	b25b      	sxtb	r3, r3
 8006570:	3301      	adds	r3, #1
 8006572:	d103      	bne.n	800657c <xQueueGenericSend+0x11e>
 8006574:	6a3b      	ldr	r3, [r7, #32]
 8006576:	2245      	movs	r2, #69	; 0x45
 8006578:	2100      	movs	r1, #0
 800657a:	5499      	strb	r1, [r3, r2]
 800657c:	f001 fee2 	bl	8008344 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006580:	1d3a      	adds	r2, r7, #4
 8006582:	2314      	movs	r3, #20
 8006584:	18fb      	adds	r3, r7, r3
 8006586:	0011      	movs	r1, r2
 8006588:	0018      	movs	r0, r3
 800658a:	f001 f873 	bl	8007674 <xTaskCheckForTimeOut>
 800658e:	1e03      	subs	r3, r0, #0
 8006590:	d11e      	bne.n	80065d0 <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006592:	6a3b      	ldr	r3, [r7, #32]
 8006594:	0018      	movs	r0, r3
 8006596:	f000 fba6 	bl	8006ce6 <prvIsQueueFull>
 800659a:	1e03      	subs	r3, r0, #0
 800659c:	d011      	beq.n	80065c2 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800659e:	6a3b      	ldr	r3, [r7, #32]
 80065a0:	3310      	adds	r3, #16
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	0011      	movs	r1, r2
 80065a6:	0018      	movs	r0, r3
 80065a8:	f000 ffb0 	bl	800750c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80065ac:	6a3b      	ldr	r3, [r7, #32]
 80065ae:	0018      	movs	r0, r3
 80065b0:	f000 fb25 	bl	8006bfe <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80065b4:	f000 fe0a 	bl	80071cc <xTaskResumeAll>
 80065b8:	1e03      	subs	r3, r0, #0
 80065ba:	d18a      	bne.n	80064d2 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 80065bc:	f001 fea0 	bl	8008300 <vPortYield>
 80065c0:	e787      	b.n	80064d2 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80065c2:	6a3b      	ldr	r3, [r7, #32]
 80065c4:	0018      	movs	r0, r3
 80065c6:	f000 fb1a 	bl	8006bfe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80065ca:	f000 fdff 	bl	80071cc <xTaskResumeAll>
 80065ce:	e780      	b.n	80064d2 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80065d0:	6a3b      	ldr	r3, [r7, #32]
 80065d2:	0018      	movs	r0, r3
 80065d4:	f000 fb13 	bl	8006bfe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80065d8:	f000 fdf8 	bl	80071cc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80065dc:	2300      	movs	r3, #0
		}
	}
}
 80065de:	0018      	movs	r0, r3
 80065e0:	46bd      	mov	sp, r7
 80065e2:	b00a      	add	sp, #40	; 0x28
 80065e4:	bd80      	pop	{r7, pc}

080065e6 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80065e6:	b590      	push	{r4, r7, lr}
 80065e8:	b089      	sub	sp, #36	; 0x24
 80065ea:	af00      	add	r7, sp, #0
 80065ec:	60f8      	str	r0, [r7, #12]
 80065ee:	60b9      	str	r1, [r7, #8]
 80065f0:	607a      	str	r2, [r7, #4]
 80065f2:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 80065f8:	69bb      	ldr	r3, [r7, #24]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d101      	bne.n	8006602 <xQueueGenericSendFromISR+0x1c>
 80065fe:	b672      	cpsid	i
 8006600:	e7fe      	b.n	8006600 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d103      	bne.n	8006610 <xQueueGenericSendFromISR+0x2a>
 8006608:	69bb      	ldr	r3, [r7, #24]
 800660a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800660c:	2b00      	cmp	r3, #0
 800660e:	d101      	bne.n	8006614 <xQueueGenericSendFromISR+0x2e>
 8006610:	2301      	movs	r3, #1
 8006612:	e000      	b.n	8006616 <xQueueGenericSendFromISR+0x30>
 8006614:	2300      	movs	r3, #0
 8006616:	2b00      	cmp	r3, #0
 8006618:	d101      	bne.n	800661e <xQueueGenericSendFromISR+0x38>
 800661a:	b672      	cpsid	i
 800661c:	e7fe      	b.n	800661c <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	2b02      	cmp	r3, #2
 8006622:	d103      	bne.n	800662c <xQueueGenericSendFromISR+0x46>
 8006624:	69bb      	ldr	r3, [r7, #24]
 8006626:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006628:	2b01      	cmp	r3, #1
 800662a:	d101      	bne.n	8006630 <xQueueGenericSendFromISR+0x4a>
 800662c:	2301      	movs	r3, #1
 800662e:	e000      	b.n	8006632 <xQueueGenericSendFromISR+0x4c>
 8006630:	2300      	movs	r3, #0
 8006632:	2b00      	cmp	r3, #0
 8006634:	d101      	bne.n	800663a <xQueueGenericSendFromISR+0x54>
 8006636:	b672      	cpsid	i
 8006638:	e7fe      	b.n	8006638 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800663a:	f001 fe9b 	bl	8008374 <ulSetInterruptMaskFromISR>
 800663e:	0003      	movs	r3, r0
 8006640:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006642:	69bb      	ldr	r3, [r7, #24]
 8006644:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006646:	69bb      	ldr	r3, [r7, #24]
 8006648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800664a:	429a      	cmp	r2, r3
 800664c:	d302      	bcc.n	8006654 <xQueueGenericSendFromISR+0x6e>
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	2b02      	cmp	r3, #2
 8006652:	d12e      	bne.n	80066b2 <xQueueGenericSendFromISR+0xcc>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006654:	2413      	movs	r4, #19
 8006656:	193b      	adds	r3, r7, r4
 8006658:	69ba      	ldr	r2, [r7, #24]
 800665a:	2145      	movs	r1, #69	; 0x45
 800665c:	5c52      	ldrb	r2, [r2, r1]
 800665e:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006660:	683a      	ldr	r2, [r7, #0]
 8006662:	68b9      	ldr	r1, [r7, #8]
 8006664:	69bb      	ldr	r3, [r7, #24]
 8006666:	0018      	movs	r0, r3
 8006668:	f000 fa38 	bl	8006adc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800666c:	193b      	adds	r3, r7, r4
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	b25b      	sxtb	r3, r3
 8006672:	3301      	adds	r3, #1
 8006674:	d111      	bne.n	800669a <xQueueGenericSendFromISR+0xb4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006676:	69bb      	ldr	r3, [r7, #24]
 8006678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800667a:	2b00      	cmp	r3, #0
 800667c:	d016      	beq.n	80066ac <xQueueGenericSendFromISR+0xc6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800667e:	69bb      	ldr	r3, [r7, #24]
 8006680:	3324      	adds	r3, #36	; 0x24
 8006682:	0018      	movs	r0, r3
 8006684:	f000 ff86 	bl	8007594 <xTaskRemoveFromEventList>
 8006688:	1e03      	subs	r3, r0, #0
 800668a:	d00f      	beq.n	80066ac <xQueueGenericSendFromISR+0xc6>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d00c      	beq.n	80066ac <xQueueGenericSendFromISR+0xc6>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2201      	movs	r2, #1
 8006696:	601a      	str	r2, [r3, #0]
 8006698:	e008      	b.n	80066ac <xQueueGenericSendFromISR+0xc6>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800669a:	2313      	movs	r3, #19
 800669c:	18fb      	adds	r3, r7, r3
 800669e:	781b      	ldrb	r3, [r3, #0]
 80066a0:	3301      	adds	r3, #1
 80066a2:	b2db      	uxtb	r3, r3
 80066a4:	b259      	sxtb	r1, r3
 80066a6:	69bb      	ldr	r3, [r7, #24]
 80066a8:	2245      	movs	r2, #69	; 0x45
 80066aa:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 80066ac:	2301      	movs	r3, #1
 80066ae:	61fb      	str	r3, [r7, #28]
		{
 80066b0:	e001      	b.n	80066b6 <xQueueGenericSendFromISR+0xd0>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80066b2:	2300      	movs	r3, #0
 80066b4:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	0018      	movs	r0, r3
 80066ba:	f001 fe61 	bl	8008380 <vClearInterruptMaskFromISR>

	return xReturn;
 80066be:	69fb      	ldr	r3, [r7, #28]
}
 80066c0:	0018      	movs	r0, r3
 80066c2:	46bd      	mov	sp, r7
 80066c4:	b009      	add	sp, #36	; 0x24
 80066c6:	bd90      	pop	{r4, r7, pc}

080066c8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b088      	sub	sp, #32
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
 80066d0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	61bb      	str	r3, [r7, #24]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80066d6:	69bb      	ldr	r3, [r7, #24]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d101      	bne.n	80066e0 <xQueueGiveFromISR+0x18>
 80066dc:	b672      	cpsid	i
 80066de:	e7fe      	b.n	80066de <xQueueGiveFromISR+0x16>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80066e0:	69bb      	ldr	r3, [r7, #24]
 80066e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d001      	beq.n	80066ec <xQueueGiveFromISR+0x24>
 80066e8:	b672      	cpsid	i
 80066ea:	e7fe      	b.n	80066ea <xQueueGiveFromISR+0x22>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80066ec:	69bb      	ldr	r3, [r7, #24]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d103      	bne.n	80066fc <xQueueGiveFromISR+0x34>
 80066f4:	69bb      	ldr	r3, [r7, #24]
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d101      	bne.n	8006700 <xQueueGiveFromISR+0x38>
 80066fc:	2301      	movs	r3, #1
 80066fe:	e000      	b.n	8006702 <xQueueGiveFromISR+0x3a>
 8006700:	2300      	movs	r3, #0
 8006702:	2b00      	cmp	r3, #0
 8006704:	d101      	bne.n	800670a <xQueueGiveFromISR+0x42>
 8006706:	b672      	cpsid	i
 8006708:	e7fe      	b.n	8006708 <xQueueGiveFromISR+0x40>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800670a:	f001 fe33 	bl	8008374 <ulSetInterruptMaskFromISR>
 800670e:	0003      	movs	r3, r0
 8006710:	617b      	str	r3, [r7, #20]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006712:	69bb      	ldr	r3, [r7, #24]
 8006714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006716:	613b      	str	r3, [r7, #16]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006718:	69bb      	ldr	r3, [r7, #24]
 800671a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800671c:	693a      	ldr	r2, [r7, #16]
 800671e:	429a      	cmp	r2, r3
 8006720:	d22c      	bcs.n	800677c <xQueueGiveFromISR+0xb4>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006722:	200f      	movs	r0, #15
 8006724:	183b      	adds	r3, r7, r0
 8006726:	69ba      	ldr	r2, [r7, #24]
 8006728:	2145      	movs	r1, #69	; 0x45
 800672a:	5c52      	ldrb	r2, [r2, r1]
 800672c:	701a      	strb	r2, [r3, #0]
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	1c5a      	adds	r2, r3, #1
 8006732:	69bb      	ldr	r3, [r7, #24]
 8006734:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006736:	183b      	adds	r3, r7, r0
 8006738:	781b      	ldrb	r3, [r3, #0]
 800673a:	b25b      	sxtb	r3, r3
 800673c:	3301      	adds	r3, #1
 800673e:	d111      	bne.n	8006764 <xQueueGiveFromISR+0x9c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006740:	69bb      	ldr	r3, [r7, #24]
 8006742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006744:	2b00      	cmp	r3, #0
 8006746:	d016      	beq.n	8006776 <xQueueGiveFromISR+0xae>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006748:	69bb      	ldr	r3, [r7, #24]
 800674a:	3324      	adds	r3, #36	; 0x24
 800674c:	0018      	movs	r0, r3
 800674e:	f000 ff21 	bl	8007594 <xTaskRemoveFromEventList>
 8006752:	1e03      	subs	r3, r0, #0
 8006754:	d00f      	beq.n	8006776 <xQueueGiveFromISR+0xae>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d00c      	beq.n	8006776 <xQueueGiveFromISR+0xae>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	2201      	movs	r2, #1
 8006760:	601a      	str	r2, [r3, #0]
 8006762:	e008      	b.n	8006776 <xQueueGiveFromISR+0xae>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006764:	230f      	movs	r3, #15
 8006766:	18fb      	adds	r3, r7, r3
 8006768:	781b      	ldrb	r3, [r3, #0]
 800676a:	3301      	adds	r3, #1
 800676c:	b2db      	uxtb	r3, r3
 800676e:	b259      	sxtb	r1, r3
 8006770:	69bb      	ldr	r3, [r7, #24]
 8006772:	2245      	movs	r2, #69	; 0x45
 8006774:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8006776:	2301      	movs	r3, #1
 8006778:	61fb      	str	r3, [r7, #28]
 800677a:	e001      	b.n	8006780 <xQueueGiveFromISR+0xb8>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800677c:	2300      	movs	r3, #0
 800677e:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	0018      	movs	r0, r3
 8006784:	f001 fdfc 	bl	8008380 <vClearInterruptMaskFromISR>

	return xReturn;
 8006788:	69fb      	ldr	r3, [r7, #28]
}
 800678a:	0018      	movs	r0, r3
 800678c:	46bd      	mov	sp, r7
 800678e:	b008      	add	sp, #32
 8006790:	bd80      	pop	{r7, pc}

08006792 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006792:	b580      	push	{r7, lr}
 8006794:	b08a      	sub	sp, #40	; 0x28
 8006796:	af00      	add	r7, sp, #0
 8006798:	60f8      	str	r0, [r7, #12]
 800679a:	60b9      	str	r1, [r7, #8]
 800679c:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800679e:	2300      	movs	r3, #0
 80067a0:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80067a6:	6a3b      	ldr	r3, [r7, #32]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d101      	bne.n	80067b0 <xQueueReceive+0x1e>
 80067ac:	b672      	cpsid	i
 80067ae:	e7fe      	b.n	80067ae <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d103      	bne.n	80067be <xQueueReceive+0x2c>
 80067b6:	6a3b      	ldr	r3, [r7, #32]
 80067b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d101      	bne.n	80067c2 <xQueueReceive+0x30>
 80067be:	2301      	movs	r3, #1
 80067c0:	e000      	b.n	80067c4 <xQueueReceive+0x32>
 80067c2:	2300      	movs	r3, #0
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d101      	bne.n	80067cc <xQueueReceive+0x3a>
 80067c8:	b672      	cpsid	i
 80067ca:	e7fe      	b.n	80067ca <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80067cc:	f001 f87a 	bl	80078c4 <xTaskGetSchedulerState>
 80067d0:	1e03      	subs	r3, r0, #0
 80067d2:	d102      	bne.n	80067da <xQueueReceive+0x48>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d101      	bne.n	80067de <xQueueReceive+0x4c>
 80067da:	2301      	movs	r3, #1
 80067dc:	e000      	b.n	80067e0 <xQueueReceive+0x4e>
 80067de:	2300      	movs	r3, #0
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d101      	bne.n	80067e8 <xQueueReceive+0x56>
 80067e4:	b672      	cpsid	i
 80067e6:	e7fe      	b.n	80067e6 <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80067e8:	f001 fd9a 	bl	8008320 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80067ec:	6a3b      	ldr	r3, [r7, #32]
 80067ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067f0:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80067f2:	69fb      	ldr	r3, [r7, #28]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d01a      	beq.n	800682e <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80067f8:	68ba      	ldr	r2, [r7, #8]
 80067fa:	6a3b      	ldr	r3, [r7, #32]
 80067fc:	0011      	movs	r1, r2
 80067fe:	0018      	movs	r0, r3
 8006800:	f000 f9d7 	bl	8006bb2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006804:	69fb      	ldr	r3, [r7, #28]
 8006806:	1e5a      	subs	r2, r3, #1
 8006808:	6a3b      	ldr	r3, [r7, #32]
 800680a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800680c:	6a3b      	ldr	r3, [r7, #32]
 800680e:	691b      	ldr	r3, [r3, #16]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d008      	beq.n	8006826 <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006814:	6a3b      	ldr	r3, [r7, #32]
 8006816:	3310      	adds	r3, #16
 8006818:	0018      	movs	r0, r3
 800681a:	f000 febb 	bl	8007594 <xTaskRemoveFromEventList>
 800681e:	1e03      	subs	r3, r0, #0
 8006820:	d001      	beq.n	8006826 <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006822:	f001 fd6d 	bl	8008300 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006826:	f001 fd8d 	bl	8008344 <vPortExitCritical>
				return pdPASS;
 800682a:	2301      	movs	r3, #1
 800682c:	e062      	b.n	80068f4 <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d103      	bne.n	800683c <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006834:	f001 fd86 	bl	8008344 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006838:	2300      	movs	r3, #0
 800683a:	e05b      	b.n	80068f4 <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 800683c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683e:	2b00      	cmp	r3, #0
 8006840:	d106      	bne.n	8006850 <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006842:	2314      	movs	r3, #20
 8006844:	18fb      	adds	r3, r7, r3
 8006846:	0018      	movs	r0, r3
 8006848:	f000 ff00 	bl	800764c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800684c:	2301      	movs	r3, #1
 800684e:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006850:	f001 fd78 	bl	8008344 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006854:	f000 fcae 	bl	80071b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006858:	f001 fd62 	bl	8008320 <vPortEnterCritical>
 800685c:	6a3b      	ldr	r3, [r7, #32]
 800685e:	2244      	movs	r2, #68	; 0x44
 8006860:	5c9b      	ldrb	r3, [r3, r2]
 8006862:	b25b      	sxtb	r3, r3
 8006864:	3301      	adds	r3, #1
 8006866:	d103      	bne.n	8006870 <xQueueReceive+0xde>
 8006868:	6a3b      	ldr	r3, [r7, #32]
 800686a:	2244      	movs	r2, #68	; 0x44
 800686c:	2100      	movs	r1, #0
 800686e:	5499      	strb	r1, [r3, r2]
 8006870:	6a3b      	ldr	r3, [r7, #32]
 8006872:	2245      	movs	r2, #69	; 0x45
 8006874:	5c9b      	ldrb	r3, [r3, r2]
 8006876:	b25b      	sxtb	r3, r3
 8006878:	3301      	adds	r3, #1
 800687a:	d103      	bne.n	8006884 <xQueueReceive+0xf2>
 800687c:	6a3b      	ldr	r3, [r7, #32]
 800687e:	2245      	movs	r2, #69	; 0x45
 8006880:	2100      	movs	r1, #0
 8006882:	5499      	strb	r1, [r3, r2]
 8006884:	f001 fd5e 	bl	8008344 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006888:	1d3a      	adds	r2, r7, #4
 800688a:	2314      	movs	r3, #20
 800688c:	18fb      	adds	r3, r7, r3
 800688e:	0011      	movs	r1, r2
 8006890:	0018      	movs	r0, r3
 8006892:	f000 feef 	bl	8007674 <xTaskCheckForTimeOut>
 8006896:	1e03      	subs	r3, r0, #0
 8006898:	d11e      	bne.n	80068d8 <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800689a:	6a3b      	ldr	r3, [r7, #32]
 800689c:	0018      	movs	r0, r3
 800689e:	f000 fa0c 	bl	8006cba <prvIsQueueEmpty>
 80068a2:	1e03      	subs	r3, r0, #0
 80068a4:	d011      	beq.n	80068ca <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80068a6:	6a3b      	ldr	r3, [r7, #32]
 80068a8:	3324      	adds	r3, #36	; 0x24
 80068aa:	687a      	ldr	r2, [r7, #4]
 80068ac:	0011      	movs	r1, r2
 80068ae:	0018      	movs	r0, r3
 80068b0:	f000 fe2c 	bl	800750c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80068b4:	6a3b      	ldr	r3, [r7, #32]
 80068b6:	0018      	movs	r0, r3
 80068b8:	f000 f9a1 	bl	8006bfe <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80068bc:	f000 fc86 	bl	80071cc <xTaskResumeAll>
 80068c0:	1e03      	subs	r3, r0, #0
 80068c2:	d191      	bne.n	80067e8 <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 80068c4:	f001 fd1c 	bl	8008300 <vPortYield>
 80068c8:	e78e      	b.n	80067e8 <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80068ca:	6a3b      	ldr	r3, [r7, #32]
 80068cc:	0018      	movs	r0, r3
 80068ce:	f000 f996 	bl	8006bfe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80068d2:	f000 fc7b 	bl	80071cc <xTaskResumeAll>
 80068d6:	e787      	b.n	80067e8 <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80068d8:	6a3b      	ldr	r3, [r7, #32]
 80068da:	0018      	movs	r0, r3
 80068dc:	f000 f98f 	bl	8006bfe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80068e0:	f000 fc74 	bl	80071cc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80068e4:	6a3b      	ldr	r3, [r7, #32]
 80068e6:	0018      	movs	r0, r3
 80068e8:	f000 f9e7 	bl	8006cba <prvIsQueueEmpty>
 80068ec:	1e03      	subs	r3, r0, #0
 80068ee:	d100      	bne.n	80068f2 <xQueueReceive+0x160>
 80068f0:	e77a      	b.n	80067e8 <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80068f2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80068f4:	0018      	movs	r0, r3
 80068f6:	46bd      	mov	sp, r7
 80068f8:	b00a      	add	sp, #40	; 0x28
 80068fa:	bd80      	pop	{r7, pc}

080068fc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b08a      	sub	sp, #40	; 0x28
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
 8006904:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006906:	2300      	movs	r3, #0
 8006908:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800690e:	2300      	movs	r3, #0
 8006910:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006912:	69fb      	ldr	r3, [r7, #28]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d101      	bne.n	800691c <xQueueSemaphoreTake+0x20>
 8006918:	b672      	cpsid	i
 800691a:	e7fe      	b.n	800691a <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800691c:	69fb      	ldr	r3, [r7, #28]
 800691e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006920:	2b00      	cmp	r3, #0
 8006922:	d001      	beq.n	8006928 <xQueueSemaphoreTake+0x2c>
 8006924:	b672      	cpsid	i
 8006926:	e7fe      	b.n	8006926 <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006928:	f000 ffcc 	bl	80078c4 <xTaskGetSchedulerState>
 800692c:	1e03      	subs	r3, r0, #0
 800692e:	d102      	bne.n	8006936 <xQueueSemaphoreTake+0x3a>
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d101      	bne.n	800693a <xQueueSemaphoreTake+0x3e>
 8006936:	2301      	movs	r3, #1
 8006938:	e000      	b.n	800693c <xQueueSemaphoreTake+0x40>
 800693a:	2300      	movs	r3, #0
 800693c:	2b00      	cmp	r3, #0
 800693e:	d101      	bne.n	8006944 <xQueueSemaphoreTake+0x48>
 8006940:	b672      	cpsid	i
 8006942:	e7fe      	b.n	8006942 <xQueueSemaphoreTake+0x46>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006944:	f001 fcec 	bl	8008320 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006948:	69fb      	ldr	r3, [r7, #28]
 800694a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800694c:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800694e:	69bb      	ldr	r3, [r7, #24]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d01d      	beq.n	8006990 <xQueueSemaphoreTake+0x94>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006954:	69bb      	ldr	r3, [r7, #24]
 8006956:	1e5a      	subs	r2, r3, #1
 8006958:	69fb      	ldr	r3, [r7, #28]
 800695a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800695c:	69fb      	ldr	r3, [r7, #28]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d104      	bne.n	800696e <xQueueSemaphoreTake+0x72>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8006964:	f001 f908 	bl	8007b78 <pvTaskIncrementMutexHeldCount>
 8006968:	0002      	movs	r2, r0
 800696a:	69fb      	ldr	r3, [r7, #28]
 800696c:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800696e:	69fb      	ldr	r3, [r7, #28]
 8006970:	691b      	ldr	r3, [r3, #16]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d008      	beq.n	8006988 <xQueueSemaphoreTake+0x8c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006976:	69fb      	ldr	r3, [r7, #28]
 8006978:	3310      	adds	r3, #16
 800697a:	0018      	movs	r0, r3
 800697c:	f000 fe0a 	bl	8007594 <xTaskRemoveFromEventList>
 8006980:	1e03      	subs	r3, r0, #0
 8006982:	d001      	beq.n	8006988 <xQueueSemaphoreTake+0x8c>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006984:	f001 fcbc 	bl	8008300 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006988:	f001 fcdc 	bl	8008344 <vPortExitCritical>
				return pdPASS;
 800698c:	2301      	movs	r3, #1
 800698e:	e08b      	b.n	8006aa8 <xQueueSemaphoreTake+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d108      	bne.n	80069a8 <xQueueSemaphoreTake+0xac>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006996:	6a3b      	ldr	r3, [r7, #32]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d001      	beq.n	80069a0 <xQueueSemaphoreTake+0xa4>
 800699c:	b672      	cpsid	i
 800699e:	e7fe      	b.n	800699e <xQueueSemaphoreTake+0xa2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80069a0:	f001 fcd0 	bl	8008344 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80069a4:	2300      	movs	r3, #0
 80069a6:	e07f      	b.n	8006aa8 <xQueueSemaphoreTake+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80069a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d106      	bne.n	80069bc <xQueueSemaphoreTake+0xc0>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80069ae:	230c      	movs	r3, #12
 80069b0:	18fb      	adds	r3, r7, r3
 80069b2:	0018      	movs	r0, r3
 80069b4:	f000 fe4a 	bl	800764c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80069b8:	2301      	movs	r3, #1
 80069ba:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80069bc:	f001 fcc2 	bl	8008344 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80069c0:	f000 fbf8 	bl	80071b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80069c4:	f001 fcac 	bl	8008320 <vPortEnterCritical>
 80069c8:	69fb      	ldr	r3, [r7, #28]
 80069ca:	2244      	movs	r2, #68	; 0x44
 80069cc:	5c9b      	ldrb	r3, [r3, r2]
 80069ce:	b25b      	sxtb	r3, r3
 80069d0:	3301      	adds	r3, #1
 80069d2:	d103      	bne.n	80069dc <xQueueSemaphoreTake+0xe0>
 80069d4:	69fb      	ldr	r3, [r7, #28]
 80069d6:	2244      	movs	r2, #68	; 0x44
 80069d8:	2100      	movs	r1, #0
 80069da:	5499      	strb	r1, [r3, r2]
 80069dc:	69fb      	ldr	r3, [r7, #28]
 80069de:	2245      	movs	r2, #69	; 0x45
 80069e0:	5c9b      	ldrb	r3, [r3, r2]
 80069e2:	b25b      	sxtb	r3, r3
 80069e4:	3301      	adds	r3, #1
 80069e6:	d103      	bne.n	80069f0 <xQueueSemaphoreTake+0xf4>
 80069e8:	69fb      	ldr	r3, [r7, #28]
 80069ea:	2245      	movs	r2, #69	; 0x45
 80069ec:	2100      	movs	r1, #0
 80069ee:	5499      	strb	r1, [r3, r2]
 80069f0:	f001 fca8 	bl	8008344 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80069f4:	003a      	movs	r2, r7
 80069f6:	230c      	movs	r3, #12
 80069f8:	18fb      	adds	r3, r7, r3
 80069fa:	0011      	movs	r1, r2
 80069fc:	0018      	movs	r0, r3
 80069fe:	f000 fe39 	bl	8007674 <xTaskCheckForTimeOut>
 8006a02:	1e03      	subs	r3, r0, #0
 8006a04:	d12e      	bne.n	8006a64 <xQueueSemaphoreTake+0x168>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006a06:	69fb      	ldr	r3, [r7, #28]
 8006a08:	0018      	movs	r0, r3
 8006a0a:	f000 f956 	bl	8006cba <prvIsQueueEmpty>
 8006a0e:	1e03      	subs	r3, r0, #0
 8006a10:	d021      	beq.n	8006a56 <xQueueSemaphoreTake+0x15a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006a12:	69fb      	ldr	r3, [r7, #28]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d10a      	bne.n	8006a30 <xQueueSemaphoreTake+0x134>
					{
						taskENTER_CRITICAL();
 8006a1a:	f001 fc81 	bl	8008320 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8006a1e:	69fb      	ldr	r3, [r7, #28]
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	0018      	movs	r0, r3
 8006a24:	f000 ff6a 	bl	80078fc <xTaskPriorityInherit>
 8006a28:	0003      	movs	r3, r0
 8006a2a:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
 8006a2c:	f001 fc8a 	bl	8008344 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006a30:	69fb      	ldr	r3, [r7, #28]
 8006a32:	3324      	adds	r3, #36	; 0x24
 8006a34:	683a      	ldr	r2, [r7, #0]
 8006a36:	0011      	movs	r1, r2
 8006a38:	0018      	movs	r0, r3
 8006a3a:	f000 fd67 	bl	800750c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006a3e:	69fb      	ldr	r3, [r7, #28]
 8006a40:	0018      	movs	r0, r3
 8006a42:	f000 f8dc 	bl	8006bfe <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006a46:	f000 fbc1 	bl	80071cc <xTaskResumeAll>
 8006a4a:	1e03      	subs	r3, r0, #0
 8006a4c:	d000      	beq.n	8006a50 <xQueueSemaphoreTake+0x154>
 8006a4e:	e779      	b.n	8006944 <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
 8006a50:	f001 fc56 	bl	8008300 <vPortYield>
 8006a54:	e776      	b.n	8006944 <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006a56:	69fb      	ldr	r3, [r7, #28]
 8006a58:	0018      	movs	r0, r3
 8006a5a:	f000 f8d0 	bl	8006bfe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006a5e:	f000 fbb5 	bl	80071cc <xTaskResumeAll>
 8006a62:	e76f      	b.n	8006944 <xQueueSemaphoreTake+0x48>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006a64:	69fb      	ldr	r3, [r7, #28]
 8006a66:	0018      	movs	r0, r3
 8006a68:	f000 f8c9 	bl	8006bfe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006a6c:	f000 fbae 	bl	80071cc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006a70:	69fb      	ldr	r3, [r7, #28]
 8006a72:	0018      	movs	r0, r3
 8006a74:	f000 f921 	bl	8006cba <prvIsQueueEmpty>
 8006a78:	1e03      	subs	r3, r0, #0
 8006a7a:	d100      	bne.n	8006a7e <xQueueSemaphoreTake+0x182>
 8006a7c:	e762      	b.n	8006944 <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006a7e:	6a3b      	ldr	r3, [r7, #32]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d010      	beq.n	8006aa6 <xQueueSemaphoreTake+0x1aa>
					{
						taskENTER_CRITICAL();
 8006a84:	f001 fc4c 	bl	8008320 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006a88:	69fb      	ldr	r3, [r7, #28]
 8006a8a:	0018      	movs	r0, r3
 8006a8c:	f000 f810 	bl	8006ab0 <prvGetDisinheritPriorityAfterTimeout>
 8006a90:	0003      	movs	r3, r0
 8006a92:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8006a94:	69fb      	ldr	r3, [r7, #28]
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	697a      	ldr	r2, [r7, #20]
 8006a9a:	0011      	movs	r1, r2
 8006a9c:	0018      	movs	r0, r3
 8006a9e:	f000 fff7 	bl	8007a90 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006aa2:	f001 fc4f 	bl	8008344 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006aa6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006aa8:	0018      	movs	r0, r3
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	b00a      	add	sp, #40	; 0x28
 8006aae:	bd80      	pop	{r7, pc}

08006ab0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b084      	sub	sp, #16
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d006      	beq.n	8006ace <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	2238      	movs	r2, #56	; 0x38
 8006ac8:	1ad3      	subs	r3, r2, r3
 8006aca:	60fb      	str	r3, [r7, #12]
 8006acc:	e001      	b.n	8006ad2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
	}
 8006ad4:	0018      	movs	r0, r3
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	b004      	add	sp, #16
 8006ada:	bd80      	pop	{r7, pc}

08006adc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b086      	sub	sp, #24
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	60f8      	str	r0, [r7, #12]
 8006ae4:	60b9      	str	r1, [r7, #8]
 8006ae6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006af0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d10e      	bne.n	8006b18 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d14e      	bne.n	8006ba0 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	0018      	movs	r0, r3
 8006b08:	f000 ff66 	bl	80079d8 <xTaskPriorityDisinherit>
 8006b0c:	0003      	movs	r3, r0
 8006b0e:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2200      	movs	r2, #0
 8006b14:	605a      	str	r2, [r3, #4]
 8006b16:	e043      	b.n	8006ba0 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d119      	bne.n	8006b52 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	6898      	ldr	r0, [r3, #8]
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	0019      	movs	r1, r3
 8006b2a:	f002 f8d7 	bl	8008cdc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	689a      	ldr	r2, [r3, #8]
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b36:	18d2      	adds	r2, r2, r3
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	689a      	ldr	r2, [r3, #8]
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d32b      	bcc.n	8006ba0 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681a      	ldr	r2, [r3, #0]
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	609a      	str	r2, [r3, #8]
 8006b50:	e026      	b.n	8006ba0 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	68d8      	ldr	r0, [r3, #12]
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	0019      	movs	r1, r3
 8006b5e:	f002 f8bd 	bl	8008cdc <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	68da      	ldr	r2, [r3, #12]
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b6a:	425b      	negs	r3, r3
 8006b6c:	18d2      	adds	r2, r2, r3
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	68da      	ldr	r2, [r3, #12]
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d207      	bcs.n	8006b8e <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	685a      	ldr	r2, [r3, #4]
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b86:	425b      	negs	r3, r3
 8006b88:	18d2      	adds	r2, r2, r3
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2b02      	cmp	r3, #2
 8006b92:	d105      	bne.n	8006ba0 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d002      	beq.n	8006ba0 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	3b01      	subs	r3, #1
 8006b9e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	1c5a      	adds	r2, r3, #1
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006ba8:	697b      	ldr	r3, [r7, #20]
}
 8006baa:	0018      	movs	r0, r3
 8006bac:	46bd      	mov	sp, r7
 8006bae:	b006      	add	sp, #24
 8006bb0:	bd80      	pop	{r7, pc}

08006bb2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006bb2:	b580      	push	{r7, lr}
 8006bb4:	b082      	sub	sp, #8
 8006bb6:	af00      	add	r7, sp, #0
 8006bb8:	6078      	str	r0, [r7, #4]
 8006bba:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d018      	beq.n	8006bf6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	68da      	ldr	r2, [r3, #12]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bcc:	18d2      	adds	r2, r2, r3
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	68da      	ldr	r2, [r3, #12]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	429a      	cmp	r2, r3
 8006bdc:	d303      	bcc.n	8006be6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681a      	ldr	r2, [r3, #0]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	68d9      	ldr	r1, [r3, #12]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	0018      	movs	r0, r3
 8006bf2:	f002 f873 	bl	8008cdc <memcpy>
	}
}
 8006bf6:	46c0      	nop			; (mov r8, r8)
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	b002      	add	sp, #8
 8006bfc:	bd80      	pop	{r7, pc}

08006bfe <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006bfe:	b580      	push	{r7, lr}
 8006c00:	b084      	sub	sp, #16
 8006c02:	af00      	add	r7, sp, #0
 8006c04:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006c06:	f001 fb8b 	bl	8008320 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006c0a:	230f      	movs	r3, #15
 8006c0c:	18fb      	adds	r3, r7, r3
 8006c0e:	687a      	ldr	r2, [r7, #4]
 8006c10:	2145      	movs	r1, #69	; 0x45
 8006c12:	5c52      	ldrb	r2, [r2, r1]
 8006c14:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006c16:	e013      	b.n	8006c40 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d016      	beq.n	8006c4e <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	3324      	adds	r3, #36	; 0x24
 8006c24:	0018      	movs	r0, r3
 8006c26:	f000 fcb5 	bl	8007594 <xTaskRemoveFromEventList>
 8006c2a:	1e03      	subs	r3, r0, #0
 8006c2c:	d001      	beq.n	8006c32 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006c2e:	f000 fd71 	bl	8007714 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006c32:	210f      	movs	r1, #15
 8006c34:	187b      	adds	r3, r7, r1
 8006c36:	781b      	ldrb	r3, [r3, #0]
 8006c38:	3b01      	subs	r3, #1
 8006c3a:	b2da      	uxtb	r2, r3
 8006c3c:	187b      	adds	r3, r7, r1
 8006c3e:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006c40:	230f      	movs	r3, #15
 8006c42:	18fb      	adds	r3, r7, r3
 8006c44:	781b      	ldrb	r3, [r3, #0]
 8006c46:	b25b      	sxtb	r3, r3
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	dce5      	bgt.n	8006c18 <prvUnlockQueue+0x1a>
 8006c4c:	e000      	b.n	8006c50 <prvUnlockQueue+0x52>
					break;
 8006c4e:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2245      	movs	r2, #69	; 0x45
 8006c54:	21ff      	movs	r1, #255	; 0xff
 8006c56:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8006c58:	f001 fb74 	bl	8008344 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006c5c:	f001 fb60 	bl	8008320 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006c60:	230e      	movs	r3, #14
 8006c62:	18fb      	adds	r3, r7, r3
 8006c64:	687a      	ldr	r2, [r7, #4]
 8006c66:	2144      	movs	r1, #68	; 0x44
 8006c68:	5c52      	ldrb	r2, [r2, r1]
 8006c6a:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006c6c:	e013      	b.n	8006c96 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	691b      	ldr	r3, [r3, #16]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d016      	beq.n	8006ca4 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	3310      	adds	r3, #16
 8006c7a:	0018      	movs	r0, r3
 8006c7c:	f000 fc8a 	bl	8007594 <xTaskRemoveFromEventList>
 8006c80:	1e03      	subs	r3, r0, #0
 8006c82:	d001      	beq.n	8006c88 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8006c84:	f000 fd46 	bl	8007714 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006c88:	210e      	movs	r1, #14
 8006c8a:	187b      	adds	r3, r7, r1
 8006c8c:	781b      	ldrb	r3, [r3, #0]
 8006c8e:	3b01      	subs	r3, #1
 8006c90:	b2da      	uxtb	r2, r3
 8006c92:	187b      	adds	r3, r7, r1
 8006c94:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006c96:	230e      	movs	r3, #14
 8006c98:	18fb      	adds	r3, r7, r3
 8006c9a:	781b      	ldrb	r3, [r3, #0]
 8006c9c:	b25b      	sxtb	r3, r3
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	dce5      	bgt.n	8006c6e <prvUnlockQueue+0x70>
 8006ca2:	e000      	b.n	8006ca6 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8006ca4:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2244      	movs	r2, #68	; 0x44
 8006caa:	21ff      	movs	r1, #255	; 0xff
 8006cac:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8006cae:	f001 fb49 	bl	8008344 <vPortExitCritical>
}
 8006cb2:	46c0      	nop			; (mov r8, r8)
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	b004      	add	sp, #16
 8006cb8:	bd80      	pop	{r7, pc}

08006cba <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006cba:	b580      	push	{r7, lr}
 8006cbc:	b084      	sub	sp, #16
 8006cbe:	af00      	add	r7, sp, #0
 8006cc0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006cc2:	f001 fb2d 	bl	8008320 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d102      	bne.n	8006cd4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	60fb      	str	r3, [r7, #12]
 8006cd2:	e001      	b.n	8006cd8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006cd8:	f001 fb34 	bl	8008344 <vPortExitCritical>

	return xReturn;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
}
 8006cde:	0018      	movs	r0, r3
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	b004      	add	sp, #16
 8006ce4:	bd80      	pop	{r7, pc}

08006ce6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006ce6:	b580      	push	{r7, lr}
 8006ce8:	b084      	sub	sp, #16
 8006cea:	af00      	add	r7, sp, #0
 8006cec:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006cee:	f001 fb17 	bl	8008320 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cfa:	429a      	cmp	r2, r3
 8006cfc:	d102      	bne.n	8006d04 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006cfe:	2301      	movs	r3, #1
 8006d00:	60fb      	str	r3, [r7, #12]
 8006d02:	e001      	b.n	8006d08 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006d04:	2300      	movs	r3, #0
 8006d06:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006d08:	f001 fb1c 	bl	8008344 <vPortExitCritical>

	return xReturn;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
}
 8006d0e:	0018      	movs	r0, r3
 8006d10:	46bd      	mov	sp, r7
 8006d12:	b004      	add	sp, #16
 8006d14:	bd80      	pop	{r7, pc}
	...

08006d18 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b084      	sub	sp, #16
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
 8006d20:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006d22:	2300      	movs	r3, #0
 8006d24:	60fb      	str	r3, [r7, #12]
 8006d26:	e015      	b.n	8006d54 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006d28:	4b0e      	ldr	r3, [pc, #56]	; (8006d64 <vQueueAddToRegistry+0x4c>)
 8006d2a:	68fa      	ldr	r2, [r7, #12]
 8006d2c:	00d2      	lsls	r2, r2, #3
 8006d2e:	58d3      	ldr	r3, [r2, r3]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d10c      	bne.n	8006d4e <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006d34:	4b0b      	ldr	r3, [pc, #44]	; (8006d64 <vQueueAddToRegistry+0x4c>)
 8006d36:	68fa      	ldr	r2, [r7, #12]
 8006d38:	00d2      	lsls	r2, r2, #3
 8006d3a:	6839      	ldr	r1, [r7, #0]
 8006d3c:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006d3e:	4a09      	ldr	r2, [pc, #36]	; (8006d64 <vQueueAddToRegistry+0x4c>)
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	00db      	lsls	r3, r3, #3
 8006d44:	18d3      	adds	r3, r2, r3
 8006d46:	3304      	adds	r3, #4
 8006d48:	687a      	ldr	r2, [r7, #4]
 8006d4a:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006d4c:	e006      	b.n	8006d5c <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	3301      	adds	r3, #1
 8006d52:	60fb      	str	r3, [r7, #12]
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2b07      	cmp	r3, #7
 8006d58:	d9e6      	bls.n	8006d28 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006d5a:	46c0      	nop			; (mov r8, r8)
 8006d5c:	46c0      	nop			; (mov r8, r8)
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	b004      	add	sp, #16
 8006d62:	bd80      	pop	{r7, pc}
 8006d64:	20001fd0 	.word	0x20001fd0

08006d68 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b086      	sub	sp, #24
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	60f8      	str	r0, [r7, #12]
 8006d70:	60b9      	str	r1, [r7, #8]
 8006d72:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006d78:	f001 fad2 	bl	8008320 <vPortEnterCritical>
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	2244      	movs	r2, #68	; 0x44
 8006d80:	5c9b      	ldrb	r3, [r3, r2]
 8006d82:	b25b      	sxtb	r3, r3
 8006d84:	3301      	adds	r3, #1
 8006d86:	d103      	bne.n	8006d90 <vQueueWaitForMessageRestricted+0x28>
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	2244      	movs	r2, #68	; 0x44
 8006d8c:	2100      	movs	r1, #0
 8006d8e:	5499      	strb	r1, [r3, r2]
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	2245      	movs	r2, #69	; 0x45
 8006d94:	5c9b      	ldrb	r3, [r3, r2]
 8006d96:	b25b      	sxtb	r3, r3
 8006d98:	3301      	adds	r3, #1
 8006d9a:	d103      	bne.n	8006da4 <vQueueWaitForMessageRestricted+0x3c>
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	2245      	movs	r2, #69	; 0x45
 8006da0:	2100      	movs	r1, #0
 8006da2:	5499      	strb	r1, [r3, r2]
 8006da4:	f001 face 	bl	8008344 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d106      	bne.n	8006dbe <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	3324      	adds	r3, #36	; 0x24
 8006db4:	687a      	ldr	r2, [r7, #4]
 8006db6:	68b9      	ldr	r1, [r7, #8]
 8006db8:	0018      	movs	r0, r3
 8006dba:	f000 fbc5 	bl	8007548 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	0018      	movs	r0, r3
 8006dc2:	f7ff ff1c 	bl	8006bfe <prvUnlockQueue>
	}
 8006dc6:	46c0      	nop			; (mov r8, r8)
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	b006      	add	sp, #24
 8006dcc:	bd80      	pop	{r7, pc}

08006dce <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006dce:	b590      	push	{r4, r7, lr}
 8006dd0:	b08d      	sub	sp, #52	; 0x34
 8006dd2:	af04      	add	r7, sp, #16
 8006dd4:	60f8      	str	r0, [r7, #12]
 8006dd6:	60b9      	str	r1, [r7, #8]
 8006dd8:	607a      	str	r2, [r7, #4]
 8006dda:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d101      	bne.n	8006de6 <xTaskCreateStatic+0x18>
 8006de2:	b672      	cpsid	i
 8006de4:	e7fe      	b.n	8006de4 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 8006de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d101      	bne.n	8006df0 <xTaskCreateStatic+0x22>
 8006dec:	b672      	cpsid	i
 8006dee:	e7fe      	b.n	8006dee <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006df0:	235c      	movs	r3, #92	; 0x5c
 8006df2:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	2b5c      	cmp	r3, #92	; 0x5c
 8006df8:	d001      	beq.n	8006dfe <xTaskCreateStatic+0x30>
 8006dfa:	b672      	cpsid	i
 8006dfc:	e7fe      	b.n	8006dfc <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d020      	beq.n	8006e46 <xTaskCreateStatic+0x78>
 8006e04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d01d      	beq.n	8006e46 <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e0c:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006e0e:	69fb      	ldr	r3, [r7, #28]
 8006e10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e12:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006e14:	69fb      	ldr	r3, [r7, #28]
 8006e16:	2259      	movs	r2, #89	; 0x59
 8006e18:	2102      	movs	r1, #2
 8006e1a:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006e1c:	683c      	ldr	r4, [r7, #0]
 8006e1e:	687a      	ldr	r2, [r7, #4]
 8006e20:	68b9      	ldr	r1, [r7, #8]
 8006e22:	68f8      	ldr	r0, [r7, #12]
 8006e24:	2300      	movs	r3, #0
 8006e26:	9303      	str	r3, [sp, #12]
 8006e28:	69fb      	ldr	r3, [r7, #28]
 8006e2a:	9302      	str	r3, [sp, #8]
 8006e2c:	2318      	movs	r3, #24
 8006e2e:	18fb      	adds	r3, r7, r3
 8006e30:	9301      	str	r3, [sp, #4]
 8006e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e34:	9300      	str	r3, [sp, #0]
 8006e36:	0023      	movs	r3, r4
 8006e38:	f000 f858 	bl	8006eec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006e3c:	69fb      	ldr	r3, [r7, #28]
 8006e3e:	0018      	movs	r0, r3
 8006e40:	f000 f8d6 	bl	8006ff0 <prvAddNewTaskToReadyList>
 8006e44:	e001      	b.n	8006e4a <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 8006e46:	2300      	movs	r3, #0
 8006e48:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006e4a:	69bb      	ldr	r3, [r7, #24]
	}
 8006e4c:	0018      	movs	r0, r3
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	b009      	add	sp, #36	; 0x24
 8006e52:	bd90      	pop	{r4, r7, pc}

08006e54 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006e54:	b590      	push	{r4, r7, lr}
 8006e56:	b08d      	sub	sp, #52	; 0x34
 8006e58:	af04      	add	r7, sp, #16
 8006e5a:	60f8      	str	r0, [r7, #12]
 8006e5c:	60b9      	str	r1, [r7, #8]
 8006e5e:	603b      	str	r3, [r7, #0]
 8006e60:	1dbb      	adds	r3, r7, #6
 8006e62:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e64:	1dbb      	adds	r3, r7, #6
 8006e66:	881b      	ldrh	r3, [r3, #0]
 8006e68:	009b      	lsls	r3, r3, #2
 8006e6a:	0018      	movs	r0, r3
 8006e6c:	f001 faf0 	bl	8008450 <pvPortMalloc>
 8006e70:	0003      	movs	r3, r0
 8006e72:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d010      	beq.n	8006e9c <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006e7a:	205c      	movs	r0, #92	; 0x5c
 8006e7c:	f001 fae8 	bl	8008450 <pvPortMalloc>
 8006e80:	0003      	movs	r3, r0
 8006e82:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8006e84:	69fb      	ldr	r3, [r7, #28]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d003      	beq.n	8006e92 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006e8a:	69fb      	ldr	r3, [r7, #28]
 8006e8c:	697a      	ldr	r2, [r7, #20]
 8006e8e:	631a      	str	r2, [r3, #48]	; 0x30
 8006e90:	e006      	b.n	8006ea0 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	0018      	movs	r0, r3
 8006e96:	f001 fb81 	bl	800859c <vPortFree>
 8006e9a:	e001      	b.n	8006ea0 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006ea0:	69fb      	ldr	r3, [r7, #28]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d01a      	beq.n	8006edc <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006ea6:	69fb      	ldr	r3, [r7, #28]
 8006ea8:	2259      	movs	r2, #89	; 0x59
 8006eaa:	2100      	movs	r1, #0
 8006eac:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006eae:	1dbb      	adds	r3, r7, #6
 8006eb0:	881a      	ldrh	r2, [r3, #0]
 8006eb2:	683c      	ldr	r4, [r7, #0]
 8006eb4:	68b9      	ldr	r1, [r7, #8]
 8006eb6:	68f8      	ldr	r0, [r7, #12]
 8006eb8:	2300      	movs	r3, #0
 8006eba:	9303      	str	r3, [sp, #12]
 8006ebc:	69fb      	ldr	r3, [r7, #28]
 8006ebe:	9302      	str	r3, [sp, #8]
 8006ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ec2:	9301      	str	r3, [sp, #4]
 8006ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec6:	9300      	str	r3, [sp, #0]
 8006ec8:	0023      	movs	r3, r4
 8006eca:	f000 f80f 	bl	8006eec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006ece:	69fb      	ldr	r3, [r7, #28]
 8006ed0:	0018      	movs	r0, r3
 8006ed2:	f000 f88d 	bl	8006ff0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	61bb      	str	r3, [r7, #24]
 8006eda:	e002      	b.n	8006ee2 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006edc:	2301      	movs	r3, #1
 8006ede:	425b      	negs	r3, r3
 8006ee0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006ee2:	69bb      	ldr	r3, [r7, #24]
	}
 8006ee4:	0018      	movs	r0, r3
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	b009      	add	sp, #36	; 0x24
 8006eea:	bd90      	pop	{r4, r7, pc}

08006eec <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b086      	sub	sp, #24
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	60f8      	str	r0, [r7, #12]
 8006ef4:	60b9      	str	r1, [r7, #8]
 8006ef6:	607a      	str	r2, [r7, #4]
 8006ef8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006efc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	009b      	lsls	r3, r3, #2
 8006f02:	001a      	movs	r2, r3
 8006f04:	21a5      	movs	r1, #165	; 0xa5
 8006f06:	f001 ff05 	bl	8008d14 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	4936      	ldr	r1, [pc, #216]	; (8006fec <prvInitialiseNewTask+0x100>)
 8006f12:	468c      	mov	ip, r1
 8006f14:	4463      	add	r3, ip
 8006f16:	009b      	lsls	r3, r3, #2
 8006f18:	18d3      	adds	r3, r2, r3
 8006f1a:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	2207      	movs	r2, #7
 8006f20:	4393      	bics	r3, r2
 8006f22:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	2207      	movs	r2, #7
 8006f28:	4013      	ands	r3, r2
 8006f2a:	d001      	beq.n	8006f30 <prvInitialiseNewTask+0x44>
 8006f2c:	b672      	cpsid	i
 8006f2e:	e7fe      	b.n	8006f2e <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006f30:	2300      	movs	r3, #0
 8006f32:	617b      	str	r3, [r7, #20]
 8006f34:	e013      	b.n	8006f5e <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006f36:	68ba      	ldr	r2, [r7, #8]
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	18d3      	adds	r3, r2, r3
 8006f3c:	7818      	ldrb	r0, [r3, #0]
 8006f3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f40:	2134      	movs	r1, #52	; 0x34
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	18d3      	adds	r3, r2, r3
 8006f46:	185b      	adds	r3, r3, r1
 8006f48:	1c02      	adds	r2, r0, #0
 8006f4a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006f4c:	68ba      	ldr	r2, [r7, #8]
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	18d3      	adds	r3, r2, r3
 8006f52:	781b      	ldrb	r3, [r3, #0]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d006      	beq.n	8006f66 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	3301      	adds	r3, #1
 8006f5c:	617b      	str	r3, [r7, #20]
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	2b0f      	cmp	r3, #15
 8006f62:	d9e8      	bls.n	8006f36 <prvInitialiseNewTask+0x4a>
 8006f64:	e000      	b.n	8006f68 <prvInitialiseNewTask+0x7c>
		{
			break;
 8006f66:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f6a:	2243      	movs	r2, #67	; 0x43
 8006f6c:	2100      	movs	r1, #0
 8006f6e:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006f70:	6a3b      	ldr	r3, [r7, #32]
 8006f72:	2b37      	cmp	r3, #55	; 0x37
 8006f74:	d901      	bls.n	8006f7a <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006f76:	2337      	movs	r3, #55	; 0x37
 8006f78:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f7c:	6a3a      	ldr	r2, [r7, #32]
 8006f7e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f82:	6a3a      	ldr	r2, [r7, #32]
 8006f84:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f88:	2200      	movs	r2, #0
 8006f8a:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f8e:	3304      	adds	r3, #4
 8006f90:	0018      	movs	r0, r3
 8006f92:	f7ff f8a7 	bl	80060e4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f98:	3318      	adds	r3, #24
 8006f9a:	0018      	movs	r0, r3
 8006f9c:	f7ff f8a2 	bl	80060e4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fa2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006fa4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fa6:	6a3b      	ldr	r3, [r7, #32]
 8006fa8:	2238      	movs	r2, #56	; 0x38
 8006faa:	1ad2      	subs	r2, r2, r3
 8006fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fae:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006fb4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fb8:	2200      	movs	r2, #0
 8006fba:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fbe:	2258      	movs	r2, #88	; 0x58
 8006fc0:	2100      	movs	r1, #0
 8006fc2:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006fc4:	683a      	ldr	r2, [r7, #0]
 8006fc6:	68f9      	ldr	r1, [r7, #12]
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	0018      	movs	r0, r3
 8006fcc:	f001 f90a 	bl	80081e4 <pxPortInitialiseStack>
 8006fd0:	0002      	movs	r2, r0
 8006fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fd4:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d002      	beq.n	8006fe2 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006fe0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006fe2:	46c0      	nop			; (mov r8, r8)
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	b006      	add	sp, #24
 8006fe8:	bd80      	pop	{r7, pc}
 8006fea:	46c0      	nop			; (mov r8, r8)
 8006fec:	3fffffff 	.word	0x3fffffff

08006ff0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b082      	sub	sp, #8
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006ff8:	f001 f992 	bl	8008320 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006ffc:	4b2a      	ldr	r3, [pc, #168]	; (80070a8 <prvAddNewTaskToReadyList+0xb8>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	1c5a      	adds	r2, r3, #1
 8007002:	4b29      	ldr	r3, [pc, #164]	; (80070a8 <prvAddNewTaskToReadyList+0xb8>)
 8007004:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8007006:	4b29      	ldr	r3, [pc, #164]	; (80070ac <prvAddNewTaskToReadyList+0xbc>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d109      	bne.n	8007022 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800700e:	4b27      	ldr	r3, [pc, #156]	; (80070ac <prvAddNewTaskToReadyList+0xbc>)
 8007010:	687a      	ldr	r2, [r7, #4]
 8007012:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007014:	4b24      	ldr	r3, [pc, #144]	; (80070a8 <prvAddNewTaskToReadyList+0xb8>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	2b01      	cmp	r3, #1
 800701a:	d110      	bne.n	800703e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800701c:	f000 fb94 	bl	8007748 <prvInitialiseTaskLists>
 8007020:	e00d      	b.n	800703e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007022:	4b23      	ldr	r3, [pc, #140]	; (80070b0 <prvAddNewTaskToReadyList+0xc0>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d109      	bne.n	800703e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800702a:	4b20      	ldr	r3, [pc, #128]	; (80070ac <prvAddNewTaskToReadyList+0xbc>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007034:	429a      	cmp	r2, r3
 8007036:	d802      	bhi.n	800703e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007038:	4b1c      	ldr	r3, [pc, #112]	; (80070ac <prvAddNewTaskToReadyList+0xbc>)
 800703a:	687a      	ldr	r2, [r7, #4]
 800703c:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800703e:	4b1d      	ldr	r3, [pc, #116]	; (80070b4 <prvAddNewTaskToReadyList+0xc4>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	1c5a      	adds	r2, r3, #1
 8007044:	4b1b      	ldr	r3, [pc, #108]	; (80070b4 <prvAddNewTaskToReadyList+0xc4>)
 8007046:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007048:	4b1a      	ldr	r3, [pc, #104]	; (80070b4 <prvAddNewTaskToReadyList+0xc4>)
 800704a:	681a      	ldr	r2, [r3, #0]
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007054:	4b18      	ldr	r3, [pc, #96]	; (80070b8 <prvAddNewTaskToReadyList+0xc8>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	429a      	cmp	r2, r3
 800705a:	d903      	bls.n	8007064 <prvAddNewTaskToReadyList+0x74>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007060:	4b15      	ldr	r3, [pc, #84]	; (80070b8 <prvAddNewTaskToReadyList+0xc8>)
 8007062:	601a      	str	r2, [r3, #0]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007068:	0013      	movs	r3, r2
 800706a:	009b      	lsls	r3, r3, #2
 800706c:	189b      	adds	r3, r3, r2
 800706e:	009b      	lsls	r3, r3, #2
 8007070:	4a12      	ldr	r2, [pc, #72]	; (80070bc <prvAddNewTaskToReadyList+0xcc>)
 8007072:	189a      	adds	r2, r3, r2
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	3304      	adds	r3, #4
 8007078:	0019      	movs	r1, r3
 800707a:	0010      	movs	r0, r2
 800707c:	f7ff f83d 	bl	80060fa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007080:	f001 f960 	bl	8008344 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007084:	4b0a      	ldr	r3, [pc, #40]	; (80070b0 <prvAddNewTaskToReadyList+0xc0>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d008      	beq.n	800709e <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800708c:	4b07      	ldr	r3, [pc, #28]	; (80070ac <prvAddNewTaskToReadyList+0xbc>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007096:	429a      	cmp	r2, r3
 8007098:	d201      	bcs.n	800709e <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800709a:	f001 f931 	bl	8008300 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800709e:	46c0      	nop			; (mov r8, r8)
 80070a0:	46bd      	mov	sp, r7
 80070a2:	b002      	add	sp, #8
 80070a4:	bd80      	pop	{r7, pc}
 80070a6:	46c0      	nop			; (mov r8, r8)
 80070a8:	20000c60 	.word	0x20000c60
 80070ac:	2000078c 	.word	0x2000078c
 80070b0:	20000c6c 	.word	0x20000c6c
 80070b4:	20000c7c 	.word	0x20000c7c
 80070b8:	20000c68 	.word	0x20000c68
 80070bc:	20000790 	.word	0x20000790

080070c0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b084      	sub	sp, #16
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80070c8:	2300      	movs	r3, #0
 80070ca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d010      	beq.n	80070f4 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80070d2:	4b0d      	ldr	r3, [pc, #52]	; (8007108 <vTaskDelay+0x48>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d001      	beq.n	80070de <vTaskDelay+0x1e>
 80070da:	b672      	cpsid	i
 80070dc:	e7fe      	b.n	80070dc <vTaskDelay+0x1c>
			vTaskSuspendAll();
 80070de:	f000 f869 	bl	80071b4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2100      	movs	r1, #0
 80070e6:	0018      	movs	r0, r3
 80070e8:	f000 fd58 	bl	8007b9c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80070ec:	f000 f86e 	bl	80071cc <xTaskResumeAll>
 80070f0:	0003      	movs	r3, r0
 80070f2:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d101      	bne.n	80070fe <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 80070fa:	f001 f901 	bl	8008300 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80070fe:	46c0      	nop			; (mov r8, r8)
 8007100:	46bd      	mov	sp, r7
 8007102:	b004      	add	sp, #16
 8007104:	bd80      	pop	{r7, pc}
 8007106:	46c0      	nop			; (mov r8, r8)
 8007108:	20000c88 	.word	0x20000c88

0800710c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800710c:	b590      	push	{r4, r7, lr}
 800710e:	b089      	sub	sp, #36	; 0x24
 8007110:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007112:	2300      	movs	r3, #0
 8007114:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007116:	2300      	movs	r3, #0
 8007118:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800711a:	003a      	movs	r2, r7
 800711c:	1d39      	adds	r1, r7, #4
 800711e:	2308      	movs	r3, #8
 8007120:	18fb      	adds	r3, r7, r3
 8007122:	0018      	movs	r0, r3
 8007124:	f7fe ff90 	bl	8006048 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007128:	683c      	ldr	r4, [r7, #0]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	68ba      	ldr	r2, [r7, #8]
 800712e:	491b      	ldr	r1, [pc, #108]	; (800719c <vTaskStartScheduler+0x90>)
 8007130:	481b      	ldr	r0, [pc, #108]	; (80071a0 <vTaskStartScheduler+0x94>)
 8007132:	9202      	str	r2, [sp, #8]
 8007134:	9301      	str	r3, [sp, #4]
 8007136:	2300      	movs	r3, #0
 8007138:	9300      	str	r3, [sp, #0]
 800713a:	2300      	movs	r3, #0
 800713c:	0022      	movs	r2, r4
 800713e:	f7ff fe46 	bl	8006dce <xTaskCreateStatic>
 8007142:	0002      	movs	r2, r0
 8007144:	4b17      	ldr	r3, [pc, #92]	; (80071a4 <vTaskStartScheduler+0x98>)
 8007146:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007148:	4b16      	ldr	r3, [pc, #88]	; (80071a4 <vTaskStartScheduler+0x98>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d002      	beq.n	8007156 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007150:	2301      	movs	r3, #1
 8007152:	60fb      	str	r3, [r7, #12]
 8007154:	e001      	b.n	800715a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007156:	2300      	movs	r3, #0
 8007158:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2b01      	cmp	r3, #1
 800715e:	d103      	bne.n	8007168 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 8007160:	f000 fd70 	bl	8007c44 <xTimerCreateTimerTask>
 8007164:	0003      	movs	r3, r0
 8007166:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	2b01      	cmp	r3, #1
 800716c:	d10d      	bne.n	800718a <vTaskStartScheduler+0x7e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 800716e:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007170:	4b0d      	ldr	r3, [pc, #52]	; (80071a8 <vTaskStartScheduler+0x9c>)
 8007172:	2201      	movs	r2, #1
 8007174:	4252      	negs	r2, r2
 8007176:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007178:	4b0c      	ldr	r3, [pc, #48]	; (80071ac <vTaskStartScheduler+0xa0>)
 800717a:	2201      	movs	r2, #1
 800717c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800717e:	4b0c      	ldr	r3, [pc, #48]	; (80071b0 <vTaskStartScheduler+0xa4>)
 8007180:	2200      	movs	r2, #0
 8007182:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007184:	f001 f898 	bl	80082b8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007188:	e004      	b.n	8007194 <vTaskStartScheduler+0x88>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	3301      	adds	r3, #1
 800718e:	d101      	bne.n	8007194 <vTaskStartScheduler+0x88>
 8007190:	b672      	cpsid	i
 8007192:	e7fe      	b.n	8007192 <vTaskStartScheduler+0x86>
}
 8007194:	46c0      	nop			; (mov r8, r8)
 8007196:	46bd      	mov	sp, r7
 8007198:	b005      	add	sp, #20
 800719a:	bd90      	pop	{r4, r7, pc}
 800719c:	08009688 	.word	0x08009688
 80071a0:	08007729 	.word	0x08007729
 80071a4:	20000c84 	.word	0x20000c84
 80071a8:	20000c80 	.word	0x20000c80
 80071ac:	20000c6c 	.word	0x20000c6c
 80071b0:	20000c64 	.word	0x20000c64

080071b4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80071b8:	4b03      	ldr	r3, [pc, #12]	; (80071c8 <vTaskSuspendAll+0x14>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	1c5a      	adds	r2, r3, #1
 80071be:	4b02      	ldr	r3, [pc, #8]	; (80071c8 <vTaskSuspendAll+0x14>)
 80071c0:	601a      	str	r2, [r3, #0]
}
 80071c2:	46c0      	nop			; (mov r8, r8)
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}
 80071c8:	20000c88 	.word	0x20000c88

080071cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b084      	sub	sp, #16
 80071d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80071d2:	2300      	movs	r3, #0
 80071d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80071d6:	2300      	movs	r3, #0
 80071d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80071da:	4b3a      	ldr	r3, [pc, #232]	; (80072c4 <xTaskResumeAll+0xf8>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d101      	bne.n	80071e6 <xTaskResumeAll+0x1a>
 80071e2:	b672      	cpsid	i
 80071e4:	e7fe      	b.n	80071e4 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80071e6:	f001 f89b 	bl	8008320 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80071ea:	4b36      	ldr	r3, [pc, #216]	; (80072c4 <xTaskResumeAll+0xf8>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	1e5a      	subs	r2, r3, #1
 80071f0:	4b34      	ldr	r3, [pc, #208]	; (80072c4 <xTaskResumeAll+0xf8>)
 80071f2:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80071f4:	4b33      	ldr	r3, [pc, #204]	; (80072c4 <xTaskResumeAll+0xf8>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d15b      	bne.n	80072b4 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80071fc:	4b32      	ldr	r3, [pc, #200]	; (80072c8 <xTaskResumeAll+0xfc>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d057      	beq.n	80072b4 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007204:	e02f      	b.n	8007266 <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007206:	4b31      	ldr	r3, [pc, #196]	; (80072cc <xTaskResumeAll+0x100>)
 8007208:	68db      	ldr	r3, [r3, #12]
 800720a:	68db      	ldr	r3, [r3, #12]
 800720c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	3318      	adds	r3, #24
 8007212:	0018      	movs	r0, r3
 8007214:	f7fe ffc9 	bl	80061aa <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	3304      	adds	r3, #4
 800721c:	0018      	movs	r0, r3
 800721e:	f7fe ffc4 	bl	80061aa <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007226:	4b2a      	ldr	r3, [pc, #168]	; (80072d0 <xTaskResumeAll+0x104>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	429a      	cmp	r2, r3
 800722c:	d903      	bls.n	8007236 <xTaskResumeAll+0x6a>
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007232:	4b27      	ldr	r3, [pc, #156]	; (80072d0 <xTaskResumeAll+0x104>)
 8007234:	601a      	str	r2, [r3, #0]
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800723a:	0013      	movs	r3, r2
 800723c:	009b      	lsls	r3, r3, #2
 800723e:	189b      	adds	r3, r3, r2
 8007240:	009b      	lsls	r3, r3, #2
 8007242:	4a24      	ldr	r2, [pc, #144]	; (80072d4 <xTaskResumeAll+0x108>)
 8007244:	189a      	adds	r2, r3, r2
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	3304      	adds	r3, #4
 800724a:	0019      	movs	r1, r3
 800724c:	0010      	movs	r0, r2
 800724e:	f7fe ff54 	bl	80060fa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007256:	4b20      	ldr	r3, [pc, #128]	; (80072d8 <xTaskResumeAll+0x10c>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800725c:	429a      	cmp	r2, r3
 800725e:	d302      	bcc.n	8007266 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8007260:	4b1e      	ldr	r3, [pc, #120]	; (80072dc <xTaskResumeAll+0x110>)
 8007262:	2201      	movs	r2, #1
 8007264:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007266:	4b19      	ldr	r3, [pc, #100]	; (80072cc <xTaskResumeAll+0x100>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d1cb      	bne.n	8007206 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d001      	beq.n	8007278 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007274:	f000 fb02 	bl	800787c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007278:	4b19      	ldr	r3, [pc, #100]	; (80072e0 <xTaskResumeAll+0x114>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d00f      	beq.n	80072a4 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007284:	f000 f83c 	bl	8007300 <xTaskIncrementTick>
 8007288:	1e03      	subs	r3, r0, #0
 800728a:	d002      	beq.n	8007292 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 800728c:	4b13      	ldr	r3, [pc, #76]	; (80072dc <xTaskResumeAll+0x110>)
 800728e:	2201      	movs	r2, #1
 8007290:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	3b01      	subs	r3, #1
 8007296:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d1f2      	bne.n	8007284 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 800729e:	4b10      	ldr	r3, [pc, #64]	; (80072e0 <xTaskResumeAll+0x114>)
 80072a0:	2200      	movs	r2, #0
 80072a2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80072a4:	4b0d      	ldr	r3, [pc, #52]	; (80072dc <xTaskResumeAll+0x110>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d003      	beq.n	80072b4 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80072ac:	2301      	movs	r3, #1
 80072ae:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80072b0:	f001 f826 	bl	8008300 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80072b4:	f001 f846 	bl	8008344 <vPortExitCritical>

	return xAlreadyYielded;
 80072b8:	68bb      	ldr	r3, [r7, #8]
}
 80072ba:	0018      	movs	r0, r3
 80072bc:	46bd      	mov	sp, r7
 80072be:	b004      	add	sp, #16
 80072c0:	bd80      	pop	{r7, pc}
 80072c2:	46c0      	nop			; (mov r8, r8)
 80072c4:	20000c88 	.word	0x20000c88
 80072c8:	20000c60 	.word	0x20000c60
 80072cc:	20000c20 	.word	0x20000c20
 80072d0:	20000c68 	.word	0x20000c68
 80072d4:	20000790 	.word	0x20000790
 80072d8:	2000078c 	.word	0x2000078c
 80072dc:	20000c74 	.word	0x20000c74
 80072e0:	20000c70 	.word	0x20000c70

080072e4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b082      	sub	sp, #8
 80072e8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80072ea:	4b04      	ldr	r3, [pc, #16]	; (80072fc <xTaskGetTickCount+0x18>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80072f0:	687b      	ldr	r3, [r7, #4]
}
 80072f2:	0018      	movs	r0, r3
 80072f4:	46bd      	mov	sp, r7
 80072f6:	b002      	add	sp, #8
 80072f8:	bd80      	pop	{r7, pc}
 80072fa:	46c0      	nop			; (mov r8, r8)
 80072fc:	20000c64 	.word	0x20000c64

08007300 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b086      	sub	sp, #24
 8007304:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007306:	2300      	movs	r3, #0
 8007308:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800730a:	4b4c      	ldr	r3, [pc, #304]	; (800743c <xTaskIncrementTick+0x13c>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d000      	beq.n	8007314 <xTaskIncrementTick+0x14>
 8007312:	e083      	b.n	800741c <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007314:	4b4a      	ldr	r3, [pc, #296]	; (8007440 <xTaskIncrementTick+0x140>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	3301      	adds	r3, #1
 800731a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800731c:	4b48      	ldr	r3, [pc, #288]	; (8007440 <xTaskIncrementTick+0x140>)
 800731e:	693a      	ldr	r2, [r7, #16]
 8007320:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d117      	bne.n	8007358 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8007328:	4b46      	ldr	r3, [pc, #280]	; (8007444 <xTaskIncrementTick+0x144>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d001      	beq.n	8007336 <xTaskIncrementTick+0x36>
 8007332:	b672      	cpsid	i
 8007334:	e7fe      	b.n	8007334 <xTaskIncrementTick+0x34>
 8007336:	4b43      	ldr	r3, [pc, #268]	; (8007444 <xTaskIncrementTick+0x144>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	60fb      	str	r3, [r7, #12]
 800733c:	4b42      	ldr	r3, [pc, #264]	; (8007448 <xTaskIncrementTick+0x148>)
 800733e:	681a      	ldr	r2, [r3, #0]
 8007340:	4b40      	ldr	r3, [pc, #256]	; (8007444 <xTaskIncrementTick+0x144>)
 8007342:	601a      	str	r2, [r3, #0]
 8007344:	4b40      	ldr	r3, [pc, #256]	; (8007448 <xTaskIncrementTick+0x148>)
 8007346:	68fa      	ldr	r2, [r7, #12]
 8007348:	601a      	str	r2, [r3, #0]
 800734a:	4b40      	ldr	r3, [pc, #256]	; (800744c <xTaskIncrementTick+0x14c>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	1c5a      	adds	r2, r3, #1
 8007350:	4b3e      	ldr	r3, [pc, #248]	; (800744c <xTaskIncrementTick+0x14c>)
 8007352:	601a      	str	r2, [r3, #0]
 8007354:	f000 fa92 	bl	800787c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007358:	4b3d      	ldr	r3, [pc, #244]	; (8007450 <xTaskIncrementTick+0x150>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	693a      	ldr	r2, [r7, #16]
 800735e:	429a      	cmp	r2, r3
 8007360:	d34e      	bcc.n	8007400 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007362:	4b38      	ldr	r3, [pc, #224]	; (8007444 <xTaskIncrementTick+0x144>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d101      	bne.n	8007370 <xTaskIncrementTick+0x70>
 800736c:	2301      	movs	r3, #1
 800736e:	e000      	b.n	8007372 <xTaskIncrementTick+0x72>
 8007370:	2300      	movs	r3, #0
 8007372:	2b00      	cmp	r3, #0
 8007374:	d004      	beq.n	8007380 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007376:	4b36      	ldr	r3, [pc, #216]	; (8007450 <xTaskIncrementTick+0x150>)
 8007378:	2201      	movs	r2, #1
 800737a:	4252      	negs	r2, r2
 800737c:	601a      	str	r2, [r3, #0]
					break;
 800737e:	e03f      	b.n	8007400 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007380:	4b30      	ldr	r3, [pc, #192]	; (8007444 <xTaskIncrementTick+0x144>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	68db      	ldr	r3, [r3, #12]
 8007386:	68db      	ldr	r3, [r3, #12]
 8007388:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007390:	693a      	ldr	r2, [r7, #16]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	429a      	cmp	r2, r3
 8007396:	d203      	bcs.n	80073a0 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007398:	4b2d      	ldr	r3, [pc, #180]	; (8007450 <xTaskIncrementTick+0x150>)
 800739a:	687a      	ldr	r2, [r7, #4]
 800739c:	601a      	str	r2, [r3, #0]
						break;
 800739e:	e02f      	b.n	8007400 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	3304      	adds	r3, #4
 80073a4:	0018      	movs	r0, r3
 80073a6:	f7fe ff00 	bl	80061aa <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d004      	beq.n	80073bc <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	3318      	adds	r3, #24
 80073b6:	0018      	movs	r0, r3
 80073b8:	f7fe fef7 	bl	80061aa <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073c0:	4b24      	ldr	r3, [pc, #144]	; (8007454 <xTaskIncrementTick+0x154>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	429a      	cmp	r2, r3
 80073c6:	d903      	bls.n	80073d0 <xTaskIncrementTick+0xd0>
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073cc:	4b21      	ldr	r3, [pc, #132]	; (8007454 <xTaskIncrementTick+0x154>)
 80073ce:	601a      	str	r2, [r3, #0]
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073d4:	0013      	movs	r3, r2
 80073d6:	009b      	lsls	r3, r3, #2
 80073d8:	189b      	adds	r3, r3, r2
 80073da:	009b      	lsls	r3, r3, #2
 80073dc:	4a1e      	ldr	r2, [pc, #120]	; (8007458 <xTaskIncrementTick+0x158>)
 80073de:	189a      	adds	r2, r3, r2
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	3304      	adds	r3, #4
 80073e4:	0019      	movs	r1, r3
 80073e6:	0010      	movs	r0, r2
 80073e8:	f7fe fe87 	bl	80060fa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073f0:	4b1a      	ldr	r3, [pc, #104]	; (800745c <xTaskIncrementTick+0x15c>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073f6:	429a      	cmp	r2, r3
 80073f8:	d3b3      	bcc.n	8007362 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 80073fa:	2301      	movs	r3, #1
 80073fc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80073fe:	e7b0      	b.n	8007362 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007400:	4b16      	ldr	r3, [pc, #88]	; (800745c <xTaskIncrementTick+0x15c>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007406:	4914      	ldr	r1, [pc, #80]	; (8007458 <xTaskIncrementTick+0x158>)
 8007408:	0013      	movs	r3, r2
 800740a:	009b      	lsls	r3, r3, #2
 800740c:	189b      	adds	r3, r3, r2
 800740e:	009b      	lsls	r3, r3, #2
 8007410:	585b      	ldr	r3, [r3, r1]
 8007412:	2b01      	cmp	r3, #1
 8007414:	d907      	bls.n	8007426 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8007416:	2301      	movs	r3, #1
 8007418:	617b      	str	r3, [r7, #20]
 800741a:	e004      	b.n	8007426 <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800741c:	4b10      	ldr	r3, [pc, #64]	; (8007460 <xTaskIncrementTick+0x160>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	1c5a      	adds	r2, r3, #1
 8007422:	4b0f      	ldr	r3, [pc, #60]	; (8007460 <xTaskIncrementTick+0x160>)
 8007424:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007426:	4b0f      	ldr	r3, [pc, #60]	; (8007464 <xTaskIncrementTick+0x164>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d001      	beq.n	8007432 <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 800742e:	2301      	movs	r3, #1
 8007430:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007432:	697b      	ldr	r3, [r7, #20]
}
 8007434:	0018      	movs	r0, r3
 8007436:	46bd      	mov	sp, r7
 8007438:	b006      	add	sp, #24
 800743a:	bd80      	pop	{r7, pc}
 800743c:	20000c88 	.word	0x20000c88
 8007440:	20000c64 	.word	0x20000c64
 8007444:	20000c18 	.word	0x20000c18
 8007448:	20000c1c 	.word	0x20000c1c
 800744c:	20000c78 	.word	0x20000c78
 8007450:	20000c80 	.word	0x20000c80
 8007454:	20000c68 	.word	0x20000c68
 8007458:	20000790 	.word	0x20000790
 800745c:	2000078c 	.word	0x2000078c
 8007460:	20000c70 	.word	0x20000c70
 8007464:	20000c74 	.word	0x20000c74

08007468 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b082      	sub	sp, #8
 800746c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800746e:	4b22      	ldr	r3, [pc, #136]	; (80074f8 <vTaskSwitchContext+0x90>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d003      	beq.n	800747e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007476:	4b21      	ldr	r3, [pc, #132]	; (80074fc <vTaskSwitchContext+0x94>)
 8007478:	2201      	movs	r2, #1
 800747a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800747c:	e037      	b.n	80074ee <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 800747e:	4b1f      	ldr	r3, [pc, #124]	; (80074fc <vTaskSwitchContext+0x94>)
 8007480:	2200      	movs	r2, #0
 8007482:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007484:	4b1e      	ldr	r3, [pc, #120]	; (8007500 <vTaskSwitchContext+0x98>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	607b      	str	r3, [r7, #4]
 800748a:	e007      	b.n	800749c <vTaskSwitchContext+0x34>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d101      	bne.n	8007496 <vTaskSwitchContext+0x2e>
 8007492:	b672      	cpsid	i
 8007494:	e7fe      	b.n	8007494 <vTaskSwitchContext+0x2c>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	3b01      	subs	r3, #1
 800749a:	607b      	str	r3, [r7, #4]
 800749c:	4919      	ldr	r1, [pc, #100]	; (8007504 <vTaskSwitchContext+0x9c>)
 800749e:	687a      	ldr	r2, [r7, #4]
 80074a0:	0013      	movs	r3, r2
 80074a2:	009b      	lsls	r3, r3, #2
 80074a4:	189b      	adds	r3, r3, r2
 80074a6:	009b      	lsls	r3, r3, #2
 80074a8:	585b      	ldr	r3, [r3, r1]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d0ee      	beq.n	800748c <vTaskSwitchContext+0x24>
 80074ae:	687a      	ldr	r2, [r7, #4]
 80074b0:	0013      	movs	r3, r2
 80074b2:	009b      	lsls	r3, r3, #2
 80074b4:	189b      	adds	r3, r3, r2
 80074b6:	009b      	lsls	r3, r3, #2
 80074b8:	4a12      	ldr	r2, [pc, #72]	; (8007504 <vTaskSwitchContext+0x9c>)
 80074ba:	189b      	adds	r3, r3, r2
 80074bc:	603b      	str	r3, [r7, #0]
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	685a      	ldr	r2, [r3, #4]
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	605a      	str	r2, [r3, #4]
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	685a      	ldr	r2, [r3, #4]
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	3308      	adds	r3, #8
 80074d0:	429a      	cmp	r2, r3
 80074d2:	d104      	bne.n	80074de <vTaskSwitchContext+0x76>
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	685b      	ldr	r3, [r3, #4]
 80074d8:	685a      	ldr	r2, [r3, #4]
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	605a      	str	r2, [r3, #4]
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	685b      	ldr	r3, [r3, #4]
 80074e2:	68da      	ldr	r2, [r3, #12]
 80074e4:	4b08      	ldr	r3, [pc, #32]	; (8007508 <vTaskSwitchContext+0xa0>)
 80074e6:	601a      	str	r2, [r3, #0]
 80074e8:	4b05      	ldr	r3, [pc, #20]	; (8007500 <vTaskSwitchContext+0x98>)
 80074ea:	687a      	ldr	r2, [r7, #4]
 80074ec:	601a      	str	r2, [r3, #0]
}
 80074ee:	46c0      	nop			; (mov r8, r8)
 80074f0:	46bd      	mov	sp, r7
 80074f2:	b002      	add	sp, #8
 80074f4:	bd80      	pop	{r7, pc}
 80074f6:	46c0      	nop			; (mov r8, r8)
 80074f8:	20000c88 	.word	0x20000c88
 80074fc:	20000c74 	.word	0x20000c74
 8007500:	20000c68 	.word	0x20000c68
 8007504:	20000790 	.word	0x20000790
 8007508:	2000078c 	.word	0x2000078c

0800750c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b082      	sub	sp, #8
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
 8007514:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d101      	bne.n	8007520 <vTaskPlaceOnEventList+0x14>
 800751c:	b672      	cpsid	i
 800751e:	e7fe      	b.n	800751e <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007520:	4b08      	ldr	r3, [pc, #32]	; (8007544 <vTaskPlaceOnEventList+0x38>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	3318      	adds	r3, #24
 8007526:	001a      	movs	r2, r3
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	0011      	movs	r1, r2
 800752c:	0018      	movs	r0, r3
 800752e:	f7fe fe06 	bl	800613e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	2101      	movs	r1, #1
 8007536:	0018      	movs	r0, r3
 8007538:	f000 fb30 	bl	8007b9c <prvAddCurrentTaskToDelayedList>
}
 800753c:	46c0      	nop			; (mov r8, r8)
 800753e:	46bd      	mov	sp, r7
 8007540:	b002      	add	sp, #8
 8007542:	bd80      	pop	{r7, pc}
 8007544:	2000078c 	.word	0x2000078c

08007548 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007548:	b580      	push	{r7, lr}
 800754a:	b084      	sub	sp, #16
 800754c:	af00      	add	r7, sp, #0
 800754e:	60f8      	str	r0, [r7, #12]
 8007550:	60b9      	str	r1, [r7, #8]
 8007552:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d101      	bne.n	800755e <vTaskPlaceOnEventListRestricted+0x16>
 800755a:	b672      	cpsid	i
 800755c:	e7fe      	b.n	800755c <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800755e:	4b0c      	ldr	r3, [pc, #48]	; (8007590 <vTaskPlaceOnEventListRestricted+0x48>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	3318      	adds	r3, #24
 8007564:	001a      	movs	r2, r3
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	0011      	movs	r1, r2
 800756a:	0018      	movs	r0, r3
 800756c:	f7fe fdc5 	bl	80060fa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d002      	beq.n	800757c <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 8007576:	2301      	movs	r3, #1
 8007578:	425b      	negs	r3, r3
 800757a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800757c:	687a      	ldr	r2, [r7, #4]
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	0011      	movs	r1, r2
 8007582:	0018      	movs	r0, r3
 8007584:	f000 fb0a 	bl	8007b9c <prvAddCurrentTaskToDelayedList>
	}
 8007588:	46c0      	nop			; (mov r8, r8)
 800758a:	46bd      	mov	sp, r7
 800758c:	b004      	add	sp, #16
 800758e:	bd80      	pop	{r7, pc}
 8007590:	2000078c 	.word	0x2000078c

08007594 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b084      	sub	sp, #16
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	68db      	ldr	r3, [r3, #12]
 80075a0:	68db      	ldr	r3, [r3, #12]
 80075a2:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d101      	bne.n	80075ae <xTaskRemoveFromEventList+0x1a>
 80075aa:	b672      	cpsid	i
 80075ac:	e7fe      	b.n	80075ac <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	3318      	adds	r3, #24
 80075b2:	0018      	movs	r0, r3
 80075b4:	f7fe fdf9 	bl	80061aa <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075b8:	4b1e      	ldr	r3, [pc, #120]	; (8007634 <xTaskRemoveFromEventList+0xa0>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d11d      	bne.n	80075fc <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	3304      	adds	r3, #4
 80075c4:	0018      	movs	r0, r3
 80075c6:	f7fe fdf0 	bl	80061aa <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075ce:	4b1a      	ldr	r3, [pc, #104]	; (8007638 <xTaskRemoveFromEventList+0xa4>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	429a      	cmp	r2, r3
 80075d4:	d903      	bls.n	80075de <xTaskRemoveFromEventList+0x4a>
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075da:	4b17      	ldr	r3, [pc, #92]	; (8007638 <xTaskRemoveFromEventList+0xa4>)
 80075dc:	601a      	str	r2, [r3, #0]
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075e2:	0013      	movs	r3, r2
 80075e4:	009b      	lsls	r3, r3, #2
 80075e6:	189b      	adds	r3, r3, r2
 80075e8:	009b      	lsls	r3, r3, #2
 80075ea:	4a14      	ldr	r2, [pc, #80]	; (800763c <xTaskRemoveFromEventList+0xa8>)
 80075ec:	189a      	adds	r2, r3, r2
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	3304      	adds	r3, #4
 80075f2:	0019      	movs	r1, r3
 80075f4:	0010      	movs	r0, r2
 80075f6:	f7fe fd80 	bl	80060fa <vListInsertEnd>
 80075fa:	e007      	b.n	800760c <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	3318      	adds	r3, #24
 8007600:	001a      	movs	r2, r3
 8007602:	4b0f      	ldr	r3, [pc, #60]	; (8007640 <xTaskRemoveFromEventList+0xac>)
 8007604:	0011      	movs	r1, r2
 8007606:	0018      	movs	r0, r3
 8007608:	f7fe fd77 	bl	80060fa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007610:	4b0c      	ldr	r3, [pc, #48]	; (8007644 <xTaskRemoveFromEventList+0xb0>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007616:	429a      	cmp	r2, r3
 8007618:	d905      	bls.n	8007626 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800761a:	2301      	movs	r3, #1
 800761c:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800761e:	4b0a      	ldr	r3, [pc, #40]	; (8007648 <xTaskRemoveFromEventList+0xb4>)
 8007620:	2201      	movs	r2, #1
 8007622:	601a      	str	r2, [r3, #0]
 8007624:	e001      	b.n	800762a <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 8007626:	2300      	movs	r3, #0
 8007628:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800762a:	68fb      	ldr	r3, [r7, #12]
}
 800762c:	0018      	movs	r0, r3
 800762e:	46bd      	mov	sp, r7
 8007630:	b004      	add	sp, #16
 8007632:	bd80      	pop	{r7, pc}
 8007634:	20000c88 	.word	0x20000c88
 8007638:	20000c68 	.word	0x20000c68
 800763c:	20000790 	.word	0x20000790
 8007640:	20000c20 	.word	0x20000c20
 8007644:	2000078c 	.word	0x2000078c
 8007648:	20000c74 	.word	0x20000c74

0800764c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b082      	sub	sp, #8
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007654:	4b05      	ldr	r3, [pc, #20]	; (800766c <vTaskInternalSetTimeOutState+0x20>)
 8007656:	681a      	ldr	r2, [r3, #0]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800765c:	4b04      	ldr	r3, [pc, #16]	; (8007670 <vTaskInternalSetTimeOutState+0x24>)
 800765e:	681a      	ldr	r2, [r3, #0]
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	605a      	str	r2, [r3, #4]
}
 8007664:	46c0      	nop			; (mov r8, r8)
 8007666:	46bd      	mov	sp, r7
 8007668:	b002      	add	sp, #8
 800766a:	bd80      	pop	{r7, pc}
 800766c:	20000c78 	.word	0x20000c78
 8007670:	20000c64 	.word	0x20000c64

08007674 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b086      	sub	sp, #24
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
 800767c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d101      	bne.n	8007688 <xTaskCheckForTimeOut+0x14>
 8007684:	b672      	cpsid	i
 8007686:	e7fe      	b.n	8007686 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d101      	bne.n	8007692 <xTaskCheckForTimeOut+0x1e>
 800768e:	b672      	cpsid	i
 8007690:	e7fe      	b.n	8007690 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 8007692:	f000 fe45 	bl	8008320 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007696:	4b1d      	ldr	r3, [pc, #116]	; (800770c <xTaskCheckForTimeOut+0x98>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	693a      	ldr	r2, [r7, #16]
 80076a2:	1ad3      	subs	r3, r2, r3
 80076a4:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	3301      	adds	r3, #1
 80076ac:	d102      	bne.n	80076b4 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80076ae:	2300      	movs	r3, #0
 80076b0:	617b      	str	r3, [r7, #20]
 80076b2:	e024      	b.n	80076fe <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681a      	ldr	r2, [r3, #0]
 80076b8:	4b15      	ldr	r3, [pc, #84]	; (8007710 <xTaskCheckForTimeOut+0x9c>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	429a      	cmp	r2, r3
 80076be:	d007      	beq.n	80076d0 <xTaskCheckForTimeOut+0x5c>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	693a      	ldr	r2, [r7, #16]
 80076c6:	429a      	cmp	r2, r3
 80076c8:	d302      	bcc.n	80076d0 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80076ca:	2301      	movs	r3, #1
 80076cc:	617b      	str	r3, [r7, #20]
 80076ce:	e016      	b.n	80076fe <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	68fa      	ldr	r2, [r7, #12]
 80076d6:	429a      	cmp	r2, r3
 80076d8:	d20c      	bcs.n	80076f4 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	681a      	ldr	r2, [r3, #0]
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	1ad2      	subs	r2, r2, r3
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	0018      	movs	r0, r3
 80076ea:	f7ff ffaf 	bl	800764c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80076ee:	2300      	movs	r3, #0
 80076f0:	617b      	str	r3, [r7, #20]
 80076f2:	e004      	b.n	80076fe <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	2200      	movs	r2, #0
 80076f8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80076fa:	2301      	movs	r3, #1
 80076fc:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 80076fe:	f000 fe21 	bl	8008344 <vPortExitCritical>

	return xReturn;
 8007702:	697b      	ldr	r3, [r7, #20]
}
 8007704:	0018      	movs	r0, r3
 8007706:	46bd      	mov	sp, r7
 8007708:	b006      	add	sp, #24
 800770a:	bd80      	pop	{r7, pc}
 800770c:	20000c64 	.word	0x20000c64
 8007710:	20000c78 	.word	0x20000c78

08007714 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007714:	b580      	push	{r7, lr}
 8007716:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007718:	4b02      	ldr	r3, [pc, #8]	; (8007724 <vTaskMissedYield+0x10>)
 800771a:	2201      	movs	r2, #1
 800771c:	601a      	str	r2, [r3, #0]
}
 800771e:	46c0      	nop			; (mov r8, r8)
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}
 8007724:	20000c74 	.word	0x20000c74

08007728 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b082      	sub	sp, #8
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007730:	f000 f84e 	bl	80077d0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007734:	4b03      	ldr	r3, [pc, #12]	; (8007744 <prvIdleTask+0x1c>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	2b01      	cmp	r3, #1
 800773a:	d9f9      	bls.n	8007730 <prvIdleTask+0x8>
			{
				taskYIELD();
 800773c:	f000 fde0 	bl	8008300 <vPortYield>
		prvCheckTasksWaitingTermination();
 8007740:	e7f6      	b.n	8007730 <prvIdleTask+0x8>
 8007742:	46c0      	nop			; (mov r8, r8)
 8007744:	20000790 	.word	0x20000790

08007748 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b082      	sub	sp, #8
 800774c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800774e:	2300      	movs	r3, #0
 8007750:	607b      	str	r3, [r7, #4]
 8007752:	e00c      	b.n	800776e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007754:	687a      	ldr	r2, [r7, #4]
 8007756:	0013      	movs	r3, r2
 8007758:	009b      	lsls	r3, r3, #2
 800775a:	189b      	adds	r3, r3, r2
 800775c:	009b      	lsls	r3, r3, #2
 800775e:	4a14      	ldr	r2, [pc, #80]	; (80077b0 <prvInitialiseTaskLists+0x68>)
 8007760:	189b      	adds	r3, r3, r2
 8007762:	0018      	movs	r0, r3
 8007764:	f7fe fca0 	bl	80060a8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	3301      	adds	r3, #1
 800776c:	607b      	str	r3, [r7, #4]
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2b37      	cmp	r3, #55	; 0x37
 8007772:	d9ef      	bls.n	8007754 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007774:	4b0f      	ldr	r3, [pc, #60]	; (80077b4 <prvInitialiseTaskLists+0x6c>)
 8007776:	0018      	movs	r0, r3
 8007778:	f7fe fc96 	bl	80060a8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800777c:	4b0e      	ldr	r3, [pc, #56]	; (80077b8 <prvInitialiseTaskLists+0x70>)
 800777e:	0018      	movs	r0, r3
 8007780:	f7fe fc92 	bl	80060a8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007784:	4b0d      	ldr	r3, [pc, #52]	; (80077bc <prvInitialiseTaskLists+0x74>)
 8007786:	0018      	movs	r0, r3
 8007788:	f7fe fc8e 	bl	80060a8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800778c:	4b0c      	ldr	r3, [pc, #48]	; (80077c0 <prvInitialiseTaskLists+0x78>)
 800778e:	0018      	movs	r0, r3
 8007790:	f7fe fc8a 	bl	80060a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007794:	4b0b      	ldr	r3, [pc, #44]	; (80077c4 <prvInitialiseTaskLists+0x7c>)
 8007796:	0018      	movs	r0, r3
 8007798:	f7fe fc86 	bl	80060a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800779c:	4b0a      	ldr	r3, [pc, #40]	; (80077c8 <prvInitialiseTaskLists+0x80>)
 800779e:	4a05      	ldr	r2, [pc, #20]	; (80077b4 <prvInitialiseTaskLists+0x6c>)
 80077a0:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80077a2:	4b0a      	ldr	r3, [pc, #40]	; (80077cc <prvInitialiseTaskLists+0x84>)
 80077a4:	4a04      	ldr	r2, [pc, #16]	; (80077b8 <prvInitialiseTaskLists+0x70>)
 80077a6:	601a      	str	r2, [r3, #0]
}
 80077a8:	46c0      	nop			; (mov r8, r8)
 80077aa:	46bd      	mov	sp, r7
 80077ac:	b002      	add	sp, #8
 80077ae:	bd80      	pop	{r7, pc}
 80077b0:	20000790 	.word	0x20000790
 80077b4:	20000bf0 	.word	0x20000bf0
 80077b8:	20000c04 	.word	0x20000c04
 80077bc:	20000c20 	.word	0x20000c20
 80077c0:	20000c34 	.word	0x20000c34
 80077c4:	20000c4c 	.word	0x20000c4c
 80077c8:	20000c18 	.word	0x20000c18
 80077cc:	20000c1c 	.word	0x20000c1c

080077d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b082      	sub	sp, #8
 80077d4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80077d6:	e01a      	b.n	800780e <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 80077d8:	f000 fda2 	bl	8008320 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80077dc:	4b10      	ldr	r3, [pc, #64]	; (8007820 <prvCheckTasksWaitingTermination+0x50>)
 80077de:	68db      	ldr	r3, [r3, #12]
 80077e0:	68db      	ldr	r3, [r3, #12]
 80077e2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	3304      	adds	r3, #4
 80077e8:	0018      	movs	r0, r3
 80077ea:	f7fe fcde 	bl	80061aa <uxListRemove>
				--uxCurrentNumberOfTasks;
 80077ee:	4b0d      	ldr	r3, [pc, #52]	; (8007824 <prvCheckTasksWaitingTermination+0x54>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	1e5a      	subs	r2, r3, #1
 80077f4:	4b0b      	ldr	r3, [pc, #44]	; (8007824 <prvCheckTasksWaitingTermination+0x54>)
 80077f6:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 80077f8:	4b0b      	ldr	r3, [pc, #44]	; (8007828 <prvCheckTasksWaitingTermination+0x58>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	1e5a      	subs	r2, r3, #1
 80077fe:	4b0a      	ldr	r3, [pc, #40]	; (8007828 <prvCheckTasksWaitingTermination+0x58>)
 8007800:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8007802:	f000 fd9f 	bl	8008344 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	0018      	movs	r0, r3
 800780a:	f000 f80f 	bl	800782c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800780e:	4b06      	ldr	r3, [pc, #24]	; (8007828 <prvCheckTasksWaitingTermination+0x58>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d1e0      	bne.n	80077d8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007816:	46c0      	nop			; (mov r8, r8)
 8007818:	46c0      	nop			; (mov r8, r8)
 800781a:	46bd      	mov	sp, r7
 800781c:	b002      	add	sp, #8
 800781e:	bd80      	pop	{r7, pc}
 8007820:	20000c34 	.word	0x20000c34
 8007824:	20000c60 	.word	0x20000c60
 8007828:	20000c48 	.word	0x20000c48

0800782c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800782c:	b580      	push	{r7, lr}
 800782e:	b082      	sub	sp, #8
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2259      	movs	r2, #89	; 0x59
 8007838:	5c9b      	ldrb	r3, [r3, r2]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d109      	bne.n	8007852 <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007842:	0018      	movs	r0, r3
 8007844:	f000 feaa 	bl	800859c <vPortFree>
				vPortFree( pxTCB );
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	0018      	movs	r0, r3
 800784c:	f000 fea6 	bl	800859c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007850:	e010      	b.n	8007874 <prvDeleteTCB+0x48>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2259      	movs	r2, #89	; 0x59
 8007856:	5c9b      	ldrb	r3, [r3, r2]
 8007858:	2b01      	cmp	r3, #1
 800785a:	d104      	bne.n	8007866 <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	0018      	movs	r0, r3
 8007860:	f000 fe9c 	bl	800859c <vPortFree>
	}
 8007864:	e006      	b.n	8007874 <prvDeleteTCB+0x48>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2259      	movs	r2, #89	; 0x59
 800786a:	5c9b      	ldrb	r3, [r3, r2]
 800786c:	2b02      	cmp	r3, #2
 800786e:	d001      	beq.n	8007874 <prvDeleteTCB+0x48>
 8007870:	b672      	cpsid	i
 8007872:	e7fe      	b.n	8007872 <prvDeleteTCB+0x46>
	}
 8007874:	46c0      	nop			; (mov r8, r8)
 8007876:	46bd      	mov	sp, r7
 8007878:	b002      	add	sp, #8
 800787a:	bd80      	pop	{r7, pc}

0800787c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b082      	sub	sp, #8
 8007880:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007882:	4b0e      	ldr	r3, [pc, #56]	; (80078bc <prvResetNextTaskUnblockTime+0x40>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d101      	bne.n	8007890 <prvResetNextTaskUnblockTime+0x14>
 800788c:	2301      	movs	r3, #1
 800788e:	e000      	b.n	8007892 <prvResetNextTaskUnblockTime+0x16>
 8007890:	2300      	movs	r3, #0
 8007892:	2b00      	cmp	r3, #0
 8007894:	d004      	beq.n	80078a0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007896:	4b0a      	ldr	r3, [pc, #40]	; (80078c0 <prvResetNextTaskUnblockTime+0x44>)
 8007898:	2201      	movs	r2, #1
 800789a:	4252      	negs	r2, r2
 800789c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800789e:	e008      	b.n	80078b2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80078a0:	4b06      	ldr	r3, [pc, #24]	; (80078bc <prvResetNextTaskUnblockTime+0x40>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	68db      	ldr	r3, [r3, #12]
 80078a6:	68db      	ldr	r3, [r3, #12]
 80078a8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	685a      	ldr	r2, [r3, #4]
 80078ae:	4b04      	ldr	r3, [pc, #16]	; (80078c0 <prvResetNextTaskUnblockTime+0x44>)
 80078b0:	601a      	str	r2, [r3, #0]
}
 80078b2:	46c0      	nop			; (mov r8, r8)
 80078b4:	46bd      	mov	sp, r7
 80078b6:	b002      	add	sp, #8
 80078b8:	bd80      	pop	{r7, pc}
 80078ba:	46c0      	nop			; (mov r8, r8)
 80078bc:	20000c18 	.word	0x20000c18
 80078c0:	20000c80 	.word	0x20000c80

080078c4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b082      	sub	sp, #8
 80078c8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80078ca:	4b0a      	ldr	r3, [pc, #40]	; (80078f4 <xTaskGetSchedulerState+0x30>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d102      	bne.n	80078d8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80078d2:	2301      	movs	r3, #1
 80078d4:	607b      	str	r3, [r7, #4]
 80078d6:	e008      	b.n	80078ea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078d8:	4b07      	ldr	r3, [pc, #28]	; (80078f8 <xTaskGetSchedulerState+0x34>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d102      	bne.n	80078e6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80078e0:	2302      	movs	r3, #2
 80078e2:	607b      	str	r3, [r7, #4]
 80078e4:	e001      	b.n	80078ea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80078e6:	2300      	movs	r3, #0
 80078e8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80078ea:	687b      	ldr	r3, [r7, #4]
	}
 80078ec:	0018      	movs	r0, r3
 80078ee:	46bd      	mov	sp, r7
 80078f0:	b002      	add	sp, #8
 80078f2:	bd80      	pop	{r7, pc}
 80078f4:	20000c6c 	.word	0x20000c6c
 80078f8:	20000c88 	.word	0x20000c88

080078fc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b084      	sub	sp, #16
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007908:	2300      	movs	r3, #0
 800790a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d056      	beq.n	80079c0 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007916:	4b2d      	ldr	r3, [pc, #180]	; (80079cc <xTaskPriorityInherit+0xd0>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800791c:	429a      	cmp	r2, r3
 800791e:	d246      	bcs.n	80079ae <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	699b      	ldr	r3, [r3, #24]
 8007924:	2b00      	cmp	r3, #0
 8007926:	db06      	blt.n	8007936 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007928:	4b28      	ldr	r3, [pc, #160]	; (80079cc <xTaskPriorityInherit+0xd0>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800792e:	2238      	movs	r2, #56	; 0x38
 8007930:	1ad2      	subs	r2, r2, r3
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	6959      	ldr	r1, [r3, #20]
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800793e:	0013      	movs	r3, r2
 8007940:	009b      	lsls	r3, r3, #2
 8007942:	189b      	adds	r3, r3, r2
 8007944:	009b      	lsls	r3, r3, #2
 8007946:	4a22      	ldr	r2, [pc, #136]	; (80079d0 <xTaskPriorityInherit+0xd4>)
 8007948:	189b      	adds	r3, r3, r2
 800794a:	4299      	cmp	r1, r3
 800794c:	d101      	bne.n	8007952 <xTaskPriorityInherit+0x56>
 800794e:	2301      	movs	r3, #1
 8007950:	e000      	b.n	8007954 <xTaskPriorityInherit+0x58>
 8007952:	2300      	movs	r3, #0
 8007954:	2b00      	cmp	r3, #0
 8007956:	d022      	beq.n	800799e <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	3304      	adds	r3, #4
 800795c:	0018      	movs	r0, r3
 800795e:	f7fe fc24 	bl	80061aa <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007962:	4b1a      	ldr	r3, [pc, #104]	; (80079cc <xTaskPriorityInherit+0xd0>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007970:	4b18      	ldr	r3, [pc, #96]	; (80079d4 <xTaskPriorityInherit+0xd8>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	429a      	cmp	r2, r3
 8007976:	d903      	bls.n	8007980 <xTaskPriorityInherit+0x84>
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800797c:	4b15      	ldr	r3, [pc, #84]	; (80079d4 <xTaskPriorityInherit+0xd8>)
 800797e:	601a      	str	r2, [r3, #0]
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007984:	0013      	movs	r3, r2
 8007986:	009b      	lsls	r3, r3, #2
 8007988:	189b      	adds	r3, r3, r2
 800798a:	009b      	lsls	r3, r3, #2
 800798c:	4a10      	ldr	r2, [pc, #64]	; (80079d0 <xTaskPriorityInherit+0xd4>)
 800798e:	189a      	adds	r2, r3, r2
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	3304      	adds	r3, #4
 8007994:	0019      	movs	r1, r3
 8007996:	0010      	movs	r0, r2
 8007998:	f7fe fbaf 	bl	80060fa <vListInsertEnd>
 800799c:	e004      	b.n	80079a8 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800799e:	4b0b      	ldr	r3, [pc, #44]	; (80079cc <xTaskPriorityInherit+0xd0>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80079a8:	2301      	movs	r3, #1
 80079aa:	60fb      	str	r3, [r7, #12]
 80079ac:	e008      	b.n	80079c0 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80079b2:	4b06      	ldr	r3, [pc, #24]	; (80079cc <xTaskPriorityInherit+0xd0>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079b8:	429a      	cmp	r2, r3
 80079ba:	d201      	bcs.n	80079c0 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80079bc:	2301      	movs	r3, #1
 80079be:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80079c0:	68fb      	ldr	r3, [r7, #12]
	}
 80079c2:	0018      	movs	r0, r3
 80079c4:	46bd      	mov	sp, r7
 80079c6:	b004      	add	sp, #16
 80079c8:	bd80      	pop	{r7, pc}
 80079ca:	46c0      	nop			; (mov r8, r8)
 80079cc:	2000078c 	.word	0x2000078c
 80079d0:	20000790 	.word	0x20000790
 80079d4:	20000c68 	.word	0x20000c68

080079d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b084      	sub	sp, #16
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80079e4:	2300      	movs	r3, #0
 80079e6:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d044      	beq.n	8007a78 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80079ee:	4b25      	ldr	r3, [pc, #148]	; (8007a84 <xTaskPriorityDisinherit+0xac>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	68ba      	ldr	r2, [r7, #8]
 80079f4:	429a      	cmp	r2, r3
 80079f6:	d001      	beq.n	80079fc <xTaskPriorityDisinherit+0x24>
 80079f8:	b672      	cpsid	i
 80079fa:	e7fe      	b.n	80079fa <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d101      	bne.n	8007a08 <xTaskPriorityDisinherit+0x30>
 8007a04:	b672      	cpsid	i
 8007a06:	e7fe      	b.n	8007a06 <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a0c:	1e5a      	subs	r2, r3, #1
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a1a:	429a      	cmp	r2, r3
 8007a1c:	d02c      	beq.n	8007a78 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d128      	bne.n	8007a78 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	3304      	adds	r3, #4
 8007a2a:	0018      	movs	r0, r3
 8007a2c:	f7fe fbbd 	bl	80061aa <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a3c:	2238      	movs	r2, #56	; 0x38
 8007a3e:	1ad2      	subs	r2, r2, r3
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a48:	4b0f      	ldr	r3, [pc, #60]	; (8007a88 <xTaskPriorityDisinherit+0xb0>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	429a      	cmp	r2, r3
 8007a4e:	d903      	bls.n	8007a58 <xTaskPriorityDisinherit+0x80>
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a54:	4b0c      	ldr	r3, [pc, #48]	; (8007a88 <xTaskPriorityDisinherit+0xb0>)
 8007a56:	601a      	str	r2, [r3, #0]
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a5c:	0013      	movs	r3, r2
 8007a5e:	009b      	lsls	r3, r3, #2
 8007a60:	189b      	adds	r3, r3, r2
 8007a62:	009b      	lsls	r3, r3, #2
 8007a64:	4a09      	ldr	r2, [pc, #36]	; (8007a8c <xTaskPriorityDisinherit+0xb4>)
 8007a66:	189a      	adds	r2, r3, r2
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	3304      	adds	r3, #4
 8007a6c:	0019      	movs	r1, r3
 8007a6e:	0010      	movs	r0, r2
 8007a70:	f7fe fb43 	bl	80060fa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007a74:	2301      	movs	r3, #1
 8007a76:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007a78:	68fb      	ldr	r3, [r7, #12]
	}
 8007a7a:	0018      	movs	r0, r3
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	b004      	add	sp, #16
 8007a80:	bd80      	pop	{r7, pc}
 8007a82:	46c0      	nop			; (mov r8, r8)
 8007a84:	2000078c 	.word	0x2000078c
 8007a88:	20000c68 	.word	0x20000c68
 8007a8c:	20000790 	.word	0x20000790

08007a90 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b086      	sub	sp, #24
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
 8007a98:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d05d      	beq.n	8007b64 <vTaskPriorityDisinheritAfterTimeout+0xd4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d101      	bne.n	8007ab4 <vTaskPriorityDisinheritAfterTimeout+0x24>
 8007ab0:	b672      	cpsid	i
 8007ab2:	e7fe      	b.n	8007ab2 <vTaskPriorityDisinheritAfterTimeout+0x22>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ab8:	683a      	ldr	r2, [r7, #0]
 8007aba:	429a      	cmp	r2, r3
 8007abc:	d902      	bls.n	8007ac4 <vTaskPriorityDisinheritAfterTimeout+0x34>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	617b      	str	r3, [r7, #20]
 8007ac2:	e002      	b.n	8007aca <vTaskPriorityDisinheritAfterTimeout+0x3a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007ac4:	693b      	ldr	r3, [r7, #16]
 8007ac6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ac8:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007aca:	693b      	ldr	r3, [r7, #16]
 8007acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ace:	697a      	ldr	r2, [r7, #20]
 8007ad0:	429a      	cmp	r2, r3
 8007ad2:	d047      	beq.n	8007b64 <vTaskPriorityDisinheritAfterTimeout+0xd4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ad8:	68fa      	ldr	r2, [r7, #12]
 8007ada:	429a      	cmp	r2, r3
 8007adc:	d142      	bne.n	8007b64 <vTaskPriorityDisinheritAfterTimeout+0xd4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007ade:	4b23      	ldr	r3, [pc, #140]	; (8007b6c <vTaskPriorityDisinheritAfterTimeout+0xdc>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	693a      	ldr	r2, [r7, #16]
 8007ae4:	429a      	cmp	r2, r3
 8007ae6:	d101      	bne.n	8007aec <vTaskPriorityDisinheritAfterTimeout+0x5c>
 8007ae8:	b672      	cpsid	i
 8007aea:	e7fe      	b.n	8007aea <vTaskPriorityDisinheritAfterTimeout+0x5a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007aec:	693b      	ldr	r3, [r7, #16]
 8007aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007af0:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
 8007af2:	693b      	ldr	r3, [r7, #16]
 8007af4:	697a      	ldr	r2, [r7, #20]
 8007af6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	699b      	ldr	r3, [r3, #24]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	db04      	blt.n	8007b0a <vTaskPriorityDisinheritAfterTimeout+0x7a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	2238      	movs	r2, #56	; 0x38
 8007b04:	1ad2      	subs	r2, r2, r3
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007b0a:	693b      	ldr	r3, [r7, #16]
 8007b0c:	6959      	ldr	r1, [r3, #20]
 8007b0e:	68ba      	ldr	r2, [r7, #8]
 8007b10:	0013      	movs	r3, r2
 8007b12:	009b      	lsls	r3, r3, #2
 8007b14:	189b      	adds	r3, r3, r2
 8007b16:	009b      	lsls	r3, r3, #2
 8007b18:	4a15      	ldr	r2, [pc, #84]	; (8007b70 <vTaskPriorityDisinheritAfterTimeout+0xe0>)
 8007b1a:	189b      	adds	r3, r3, r2
 8007b1c:	4299      	cmp	r1, r3
 8007b1e:	d101      	bne.n	8007b24 <vTaskPriorityDisinheritAfterTimeout+0x94>
 8007b20:	2301      	movs	r3, #1
 8007b22:	e000      	b.n	8007b26 <vTaskPriorityDisinheritAfterTimeout+0x96>
 8007b24:	2300      	movs	r3, #0
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d01c      	beq.n	8007b64 <vTaskPriorityDisinheritAfterTimeout+0xd4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	3304      	adds	r3, #4
 8007b2e:	0018      	movs	r0, r3
 8007b30:	f7fe fb3b 	bl	80061aa <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007b34:	693b      	ldr	r3, [r7, #16]
 8007b36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b38:	4b0e      	ldr	r3, [pc, #56]	; (8007b74 <vTaskPriorityDisinheritAfterTimeout+0xe4>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	d903      	bls.n	8007b48 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8007b40:	693b      	ldr	r3, [r7, #16]
 8007b42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b44:	4b0b      	ldr	r3, [pc, #44]	; (8007b74 <vTaskPriorityDisinheritAfterTimeout+0xe4>)
 8007b46:	601a      	str	r2, [r3, #0]
 8007b48:	693b      	ldr	r3, [r7, #16]
 8007b4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b4c:	0013      	movs	r3, r2
 8007b4e:	009b      	lsls	r3, r3, #2
 8007b50:	189b      	adds	r3, r3, r2
 8007b52:	009b      	lsls	r3, r3, #2
 8007b54:	4a06      	ldr	r2, [pc, #24]	; (8007b70 <vTaskPriorityDisinheritAfterTimeout+0xe0>)
 8007b56:	189a      	adds	r2, r3, r2
 8007b58:	693b      	ldr	r3, [r7, #16]
 8007b5a:	3304      	adds	r3, #4
 8007b5c:	0019      	movs	r1, r3
 8007b5e:	0010      	movs	r0, r2
 8007b60:	f7fe facb 	bl	80060fa <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007b64:	46c0      	nop			; (mov r8, r8)
 8007b66:	46bd      	mov	sp, r7
 8007b68:	b006      	add	sp, #24
 8007b6a:	bd80      	pop	{r7, pc}
 8007b6c:	2000078c 	.word	0x2000078c
 8007b70:	20000790 	.word	0x20000790
 8007b74:	20000c68 	.word	0x20000c68

08007b78 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007b7c:	4b06      	ldr	r3, [pc, #24]	; (8007b98 <pvTaskIncrementMutexHeldCount+0x20>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d004      	beq.n	8007b8e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007b84:	4b04      	ldr	r3, [pc, #16]	; (8007b98 <pvTaskIncrementMutexHeldCount+0x20>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007b8a:	3201      	adds	r2, #1
 8007b8c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8007b8e:	4b02      	ldr	r3, [pc, #8]	; (8007b98 <pvTaskIncrementMutexHeldCount+0x20>)
 8007b90:	681b      	ldr	r3, [r3, #0]
	}
 8007b92:	0018      	movs	r0, r3
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}
 8007b98:	2000078c 	.word	0x2000078c

08007b9c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b084      	sub	sp, #16
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
 8007ba4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007ba6:	4b21      	ldr	r3, [pc, #132]	; (8007c2c <prvAddCurrentTaskToDelayedList+0x90>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007bac:	4b20      	ldr	r3, [pc, #128]	; (8007c30 <prvAddCurrentTaskToDelayedList+0x94>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	3304      	adds	r3, #4
 8007bb2:	0018      	movs	r0, r3
 8007bb4:	f7fe faf9 	bl	80061aa <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	3301      	adds	r3, #1
 8007bbc:	d10b      	bne.n	8007bd6 <prvAddCurrentTaskToDelayedList+0x3a>
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d008      	beq.n	8007bd6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007bc4:	4b1a      	ldr	r3, [pc, #104]	; (8007c30 <prvAddCurrentTaskToDelayedList+0x94>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	1d1a      	adds	r2, r3, #4
 8007bca:	4b1a      	ldr	r3, [pc, #104]	; (8007c34 <prvAddCurrentTaskToDelayedList+0x98>)
 8007bcc:	0011      	movs	r1, r2
 8007bce:	0018      	movs	r0, r3
 8007bd0:	f7fe fa93 	bl	80060fa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007bd4:	e026      	b.n	8007c24 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007bd6:	68fa      	ldr	r2, [r7, #12]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	18d3      	adds	r3, r2, r3
 8007bdc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007bde:	4b14      	ldr	r3, [pc, #80]	; (8007c30 <prvAddCurrentTaskToDelayedList+0x94>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	68ba      	ldr	r2, [r7, #8]
 8007be4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007be6:	68ba      	ldr	r2, [r7, #8]
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	429a      	cmp	r2, r3
 8007bec:	d209      	bcs.n	8007c02 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007bee:	4b12      	ldr	r3, [pc, #72]	; (8007c38 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007bf0:	681a      	ldr	r2, [r3, #0]
 8007bf2:	4b0f      	ldr	r3, [pc, #60]	; (8007c30 <prvAddCurrentTaskToDelayedList+0x94>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	3304      	adds	r3, #4
 8007bf8:	0019      	movs	r1, r3
 8007bfa:	0010      	movs	r0, r2
 8007bfc:	f7fe fa9f 	bl	800613e <vListInsert>
}
 8007c00:	e010      	b.n	8007c24 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c02:	4b0e      	ldr	r3, [pc, #56]	; (8007c3c <prvAddCurrentTaskToDelayedList+0xa0>)
 8007c04:	681a      	ldr	r2, [r3, #0]
 8007c06:	4b0a      	ldr	r3, [pc, #40]	; (8007c30 <prvAddCurrentTaskToDelayedList+0x94>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	3304      	adds	r3, #4
 8007c0c:	0019      	movs	r1, r3
 8007c0e:	0010      	movs	r0, r2
 8007c10:	f7fe fa95 	bl	800613e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007c14:	4b0a      	ldr	r3, [pc, #40]	; (8007c40 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	68ba      	ldr	r2, [r7, #8]
 8007c1a:	429a      	cmp	r2, r3
 8007c1c:	d202      	bcs.n	8007c24 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007c1e:	4b08      	ldr	r3, [pc, #32]	; (8007c40 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007c20:	68ba      	ldr	r2, [r7, #8]
 8007c22:	601a      	str	r2, [r3, #0]
}
 8007c24:	46c0      	nop			; (mov r8, r8)
 8007c26:	46bd      	mov	sp, r7
 8007c28:	b004      	add	sp, #16
 8007c2a:	bd80      	pop	{r7, pc}
 8007c2c:	20000c64 	.word	0x20000c64
 8007c30:	2000078c 	.word	0x2000078c
 8007c34:	20000c4c 	.word	0x20000c4c
 8007c38:	20000c1c 	.word	0x20000c1c
 8007c3c:	20000c18 	.word	0x20000c18
 8007c40:	20000c80 	.word	0x20000c80

08007c44 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007c44:	b590      	push	{r4, r7, lr}
 8007c46:	b089      	sub	sp, #36	; 0x24
 8007c48:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007c4e:	f000 fa87 	bl	8008160 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007c52:	4b17      	ldr	r3, [pc, #92]	; (8007cb0 <xTimerCreateTimerTask+0x6c>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d020      	beq.n	8007c9c <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007c62:	003a      	movs	r2, r7
 8007c64:	1d39      	adds	r1, r7, #4
 8007c66:	2308      	movs	r3, #8
 8007c68:	18fb      	adds	r3, r7, r3
 8007c6a:	0018      	movs	r0, r3
 8007c6c:	f7fe fa04 	bl	8006078 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007c70:	683c      	ldr	r4, [r7, #0]
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	68ba      	ldr	r2, [r7, #8]
 8007c76:	490f      	ldr	r1, [pc, #60]	; (8007cb4 <xTimerCreateTimerTask+0x70>)
 8007c78:	480f      	ldr	r0, [pc, #60]	; (8007cb8 <xTimerCreateTimerTask+0x74>)
 8007c7a:	9202      	str	r2, [sp, #8]
 8007c7c:	9301      	str	r3, [sp, #4]
 8007c7e:	2302      	movs	r3, #2
 8007c80:	9300      	str	r3, [sp, #0]
 8007c82:	2300      	movs	r3, #0
 8007c84:	0022      	movs	r2, r4
 8007c86:	f7ff f8a2 	bl	8006dce <xTaskCreateStatic>
 8007c8a:	0002      	movs	r2, r0
 8007c8c:	4b0b      	ldr	r3, [pc, #44]	; (8007cbc <xTimerCreateTimerTask+0x78>)
 8007c8e:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007c90:	4b0a      	ldr	r3, [pc, #40]	; (8007cbc <xTimerCreateTimerTask+0x78>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d001      	beq.n	8007c9c <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 8007c98:	2301      	movs	r3, #1
 8007c9a:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d101      	bne.n	8007ca6 <xTimerCreateTimerTask+0x62>
 8007ca2:	b672      	cpsid	i
 8007ca4:	e7fe      	b.n	8007ca4 <xTimerCreateTimerTask+0x60>
	return xReturn;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
}
 8007ca8:	0018      	movs	r0, r3
 8007caa:	46bd      	mov	sp, r7
 8007cac:	b005      	add	sp, #20
 8007cae:	bd90      	pop	{r4, r7, pc}
 8007cb0:	20000cbc 	.word	0x20000cbc
 8007cb4:	08009690 	.word	0x08009690
 8007cb8:	08007dc5 	.word	0x08007dc5
 8007cbc:	20000cc0 	.word	0x20000cc0

08007cc0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007cc0:	b590      	push	{r4, r7, lr}
 8007cc2:	b08b      	sub	sp, #44	; 0x2c
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	60f8      	str	r0, [r7, #12]
 8007cc8:	60b9      	str	r1, [r7, #8]
 8007cca:	607a      	str	r2, [r7, #4]
 8007ccc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007cce:	2300      	movs	r3, #0
 8007cd0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d101      	bne.n	8007cdc <xTimerGenericCommand+0x1c>
 8007cd8:	b672      	cpsid	i
 8007cda:	e7fe      	b.n	8007cda <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007cdc:	4b1c      	ldr	r3, [pc, #112]	; (8007d50 <xTimerGenericCommand+0x90>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d030      	beq.n	8007d46 <xTimerGenericCommand+0x86>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007ce4:	2414      	movs	r4, #20
 8007ce6:	193b      	adds	r3, r7, r4
 8007ce8:	68ba      	ldr	r2, [r7, #8]
 8007cea:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007cec:	193b      	adds	r3, r7, r4
 8007cee:	687a      	ldr	r2, [r7, #4]
 8007cf0:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8007cf2:	193b      	adds	r3, r7, r4
 8007cf4:	68fa      	ldr	r2, [r7, #12]
 8007cf6:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	2b05      	cmp	r3, #5
 8007cfc:	dc19      	bgt.n	8007d32 <xTimerGenericCommand+0x72>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007cfe:	f7ff fde1 	bl	80078c4 <xTaskGetSchedulerState>
 8007d02:	0003      	movs	r3, r0
 8007d04:	2b02      	cmp	r3, #2
 8007d06:	d109      	bne.n	8007d1c <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007d08:	4b11      	ldr	r3, [pc, #68]	; (8007d50 <xTimerGenericCommand+0x90>)
 8007d0a:	6818      	ldr	r0, [r3, #0]
 8007d0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d0e:	1939      	adds	r1, r7, r4
 8007d10:	2300      	movs	r3, #0
 8007d12:	f7fe fba4 	bl	800645e <xQueueGenericSend>
 8007d16:	0003      	movs	r3, r0
 8007d18:	627b      	str	r3, [r7, #36]	; 0x24
 8007d1a:	e014      	b.n	8007d46 <xTimerGenericCommand+0x86>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007d1c:	4b0c      	ldr	r3, [pc, #48]	; (8007d50 <xTimerGenericCommand+0x90>)
 8007d1e:	6818      	ldr	r0, [r3, #0]
 8007d20:	2314      	movs	r3, #20
 8007d22:	18f9      	adds	r1, r7, r3
 8007d24:	2300      	movs	r3, #0
 8007d26:	2200      	movs	r2, #0
 8007d28:	f7fe fb99 	bl	800645e <xQueueGenericSend>
 8007d2c:	0003      	movs	r3, r0
 8007d2e:	627b      	str	r3, [r7, #36]	; 0x24
 8007d30:	e009      	b.n	8007d46 <xTimerGenericCommand+0x86>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007d32:	4b07      	ldr	r3, [pc, #28]	; (8007d50 <xTimerGenericCommand+0x90>)
 8007d34:	6818      	ldr	r0, [r3, #0]
 8007d36:	683a      	ldr	r2, [r7, #0]
 8007d38:	2314      	movs	r3, #20
 8007d3a:	18f9      	adds	r1, r7, r3
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	f7fe fc52 	bl	80065e6 <xQueueGenericSendFromISR>
 8007d42:	0003      	movs	r3, r0
 8007d44:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007d48:	0018      	movs	r0, r3
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	b00b      	add	sp, #44	; 0x2c
 8007d4e:	bd90      	pop	{r4, r7, pc}
 8007d50:	20000cbc 	.word	0x20000cbc

08007d54 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b086      	sub	sp, #24
 8007d58:	af02      	add	r7, sp, #8
 8007d5a:	6078      	str	r0, [r7, #4]
 8007d5c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007d5e:	4b18      	ldr	r3, [pc, #96]	; (8007dc0 <prvProcessExpiredTimer+0x6c>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	68db      	ldr	r3, [r3, #12]
 8007d64:	68db      	ldr	r3, [r3, #12]
 8007d66:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	3304      	adds	r3, #4
 8007d6c:	0018      	movs	r0, r3
 8007d6e:	f7fe fa1c 	bl	80061aa <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	69db      	ldr	r3, [r3, #28]
 8007d76:	2b01      	cmp	r3, #1
 8007d78:	d119      	bne.n	8007dae <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	699a      	ldr	r2, [r3, #24]
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	18d1      	adds	r1, r2, r3
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	683a      	ldr	r2, [r7, #0]
 8007d86:	68f8      	ldr	r0, [r7, #12]
 8007d88:	f000 f8b6 	bl	8007ef8 <prvInsertTimerInActiveList>
 8007d8c:	1e03      	subs	r3, r0, #0
 8007d8e:	d00e      	beq.n	8007dae <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007d90:	687a      	ldr	r2, [r7, #4]
 8007d92:	68f8      	ldr	r0, [r7, #12]
 8007d94:	2300      	movs	r3, #0
 8007d96:	9300      	str	r3, [sp, #0]
 8007d98:	2300      	movs	r3, #0
 8007d9a:	2100      	movs	r1, #0
 8007d9c:	f7ff ff90 	bl	8007cc0 <xTimerGenericCommand>
 8007da0:	0003      	movs	r3, r0
 8007da2:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d101      	bne.n	8007dae <prvProcessExpiredTimer+0x5a>
 8007daa:	b672      	cpsid	i
 8007dac:	e7fe      	b.n	8007dac <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007db2:	68fa      	ldr	r2, [r7, #12]
 8007db4:	0010      	movs	r0, r2
 8007db6:	4798      	blx	r3
}
 8007db8:	46c0      	nop			; (mov r8, r8)
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	b004      	add	sp, #16
 8007dbe:	bd80      	pop	{r7, pc}
 8007dc0:	20000cb4 	.word	0x20000cb4

08007dc4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b084      	sub	sp, #16
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007dcc:	2308      	movs	r3, #8
 8007dce:	18fb      	adds	r3, r7, r3
 8007dd0:	0018      	movs	r0, r3
 8007dd2:	f000 f851 	bl	8007e78 <prvGetNextExpireTime>
 8007dd6:	0003      	movs	r3, r0
 8007dd8:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007dda:	68ba      	ldr	r2, [r7, #8]
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	0011      	movs	r1, r2
 8007de0:	0018      	movs	r0, r3
 8007de2:	f000 f803 	bl	8007dec <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007de6:	f000 f8c9 	bl	8007f7c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007dea:	e7ef      	b.n	8007dcc <prvTimerTask+0x8>

08007dec <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b084      	sub	sp, #16
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
 8007df4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007df6:	f7ff f9dd 	bl	80071b4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007dfa:	2308      	movs	r3, #8
 8007dfc:	18fb      	adds	r3, r7, r3
 8007dfe:	0018      	movs	r0, r3
 8007e00:	f000 f85a 	bl	8007eb8 <prvSampleTimeNow>
 8007e04:	0003      	movs	r3, r0
 8007e06:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d129      	bne.n	8007e62 <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d10c      	bne.n	8007e2e <prvProcessTimerOrBlockTask+0x42>
 8007e14:	687a      	ldr	r2, [r7, #4]
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	429a      	cmp	r2, r3
 8007e1a:	d808      	bhi.n	8007e2e <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 8007e1c:	f7ff f9d6 	bl	80071cc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007e20:	68fa      	ldr	r2, [r7, #12]
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	0011      	movs	r1, r2
 8007e26:	0018      	movs	r0, r3
 8007e28:	f7ff ff94 	bl	8007d54 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007e2c:	e01b      	b.n	8007e66 <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d006      	beq.n	8007e42 <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007e34:	4b0e      	ldr	r3, [pc, #56]	; (8007e70 <prvProcessTimerOrBlockTask+0x84>)
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	425a      	negs	r2, r3
 8007e3c:	4153      	adcs	r3, r2
 8007e3e:	b2db      	uxtb	r3, r3
 8007e40:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007e42:	4b0c      	ldr	r3, [pc, #48]	; (8007e74 <prvProcessTimerOrBlockTask+0x88>)
 8007e44:	6818      	ldr	r0, [r3, #0]
 8007e46:	687a      	ldr	r2, [r7, #4]
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	1ad3      	subs	r3, r2, r3
 8007e4c:	683a      	ldr	r2, [r7, #0]
 8007e4e:	0019      	movs	r1, r3
 8007e50:	f7fe ff8a 	bl	8006d68 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007e54:	f7ff f9ba 	bl	80071cc <xTaskResumeAll>
 8007e58:	1e03      	subs	r3, r0, #0
 8007e5a:	d104      	bne.n	8007e66 <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 8007e5c:	f000 fa50 	bl	8008300 <vPortYield>
}
 8007e60:	e001      	b.n	8007e66 <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 8007e62:	f7ff f9b3 	bl	80071cc <xTaskResumeAll>
}
 8007e66:	46c0      	nop			; (mov r8, r8)
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	b004      	add	sp, #16
 8007e6c:	bd80      	pop	{r7, pc}
 8007e6e:	46c0      	nop			; (mov r8, r8)
 8007e70:	20000cb8 	.word	0x20000cb8
 8007e74:	20000cbc 	.word	0x20000cbc

08007e78 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b084      	sub	sp, #16
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007e80:	4b0c      	ldr	r3, [pc, #48]	; (8007eb4 <prvGetNextExpireTime+0x3c>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	425a      	negs	r2, r3
 8007e88:	4153      	adcs	r3, r2
 8007e8a:	b2db      	uxtb	r3, r3
 8007e8c:	001a      	movs	r2, r3
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d105      	bne.n	8007ea6 <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007e9a:	4b06      	ldr	r3, [pc, #24]	; (8007eb4 <prvGetNextExpireTime+0x3c>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	68db      	ldr	r3, [r3, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	60fb      	str	r3, [r7, #12]
 8007ea4:	e001      	b.n	8007eaa <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
}
 8007eac:	0018      	movs	r0, r3
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	b004      	add	sp, #16
 8007eb2:	bd80      	pop	{r7, pc}
 8007eb4:	20000cb4 	.word	0x20000cb4

08007eb8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b084      	sub	sp, #16
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007ec0:	f7ff fa10 	bl	80072e4 <xTaskGetTickCount>
 8007ec4:	0003      	movs	r3, r0
 8007ec6:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 8007ec8:	4b0a      	ldr	r3, [pc, #40]	; (8007ef4 <prvSampleTimeNow+0x3c>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	68fa      	ldr	r2, [r7, #12]
 8007ece:	429a      	cmp	r2, r3
 8007ed0:	d205      	bcs.n	8007ede <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 8007ed2:	f000 f8eb 	bl	80080ac <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2201      	movs	r2, #1
 8007eda:	601a      	str	r2, [r3, #0]
 8007edc:	e002      	b.n	8007ee4 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007ee4:	4b03      	ldr	r3, [pc, #12]	; (8007ef4 <prvSampleTimeNow+0x3c>)
 8007ee6:	68fa      	ldr	r2, [r7, #12]
 8007ee8:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 8007eea:	68fb      	ldr	r3, [r7, #12]
}
 8007eec:	0018      	movs	r0, r3
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	b004      	add	sp, #16
 8007ef2:	bd80      	pop	{r7, pc}
 8007ef4:	20000cc4 	.word	0x20000cc4

08007ef8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b086      	sub	sp, #24
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	60f8      	str	r0, [r7, #12]
 8007f00:	60b9      	str	r1, [r7, #8]
 8007f02:	607a      	str	r2, [r7, #4]
 8007f04:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007f06:	2300      	movs	r3, #0
 8007f08:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	68ba      	ldr	r2, [r7, #8]
 8007f0e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	68fa      	ldr	r2, [r7, #12]
 8007f14:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007f16:	68ba      	ldr	r2, [r7, #8]
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	429a      	cmp	r2, r3
 8007f1c:	d812      	bhi.n	8007f44 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f1e:	687a      	ldr	r2, [r7, #4]
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	1ad2      	subs	r2, r2, r3
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	699b      	ldr	r3, [r3, #24]
 8007f28:	429a      	cmp	r2, r3
 8007f2a:	d302      	bcc.n	8007f32 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	617b      	str	r3, [r7, #20]
 8007f30:	e01b      	b.n	8007f6a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007f32:	4b10      	ldr	r3, [pc, #64]	; (8007f74 <prvInsertTimerInActiveList+0x7c>)
 8007f34:	681a      	ldr	r2, [r3, #0]
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	3304      	adds	r3, #4
 8007f3a:	0019      	movs	r1, r3
 8007f3c:	0010      	movs	r0, r2
 8007f3e:	f7fe f8fe 	bl	800613e <vListInsert>
 8007f42:	e012      	b.n	8007f6a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007f44:	687a      	ldr	r2, [r7, #4]
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	429a      	cmp	r2, r3
 8007f4a:	d206      	bcs.n	8007f5a <prvInsertTimerInActiveList+0x62>
 8007f4c:	68ba      	ldr	r2, [r7, #8]
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	429a      	cmp	r2, r3
 8007f52:	d302      	bcc.n	8007f5a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007f54:	2301      	movs	r3, #1
 8007f56:	617b      	str	r3, [r7, #20]
 8007f58:	e007      	b.n	8007f6a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007f5a:	4b07      	ldr	r3, [pc, #28]	; (8007f78 <prvInsertTimerInActiveList+0x80>)
 8007f5c:	681a      	ldr	r2, [r3, #0]
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	3304      	adds	r3, #4
 8007f62:	0019      	movs	r1, r3
 8007f64:	0010      	movs	r0, r2
 8007f66:	f7fe f8ea 	bl	800613e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007f6a:	697b      	ldr	r3, [r7, #20]
}
 8007f6c:	0018      	movs	r0, r3
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	b006      	add	sp, #24
 8007f72:	bd80      	pop	{r7, pc}
 8007f74:	20000cb8 	.word	0x20000cb8
 8007f78:	20000cb4 	.word	0x20000cb4

08007f7c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007f7c:	b590      	push	{r4, r7, lr}
 8007f7e:	b08d      	sub	sp, #52	; 0x34
 8007f80:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007f82:	e07f      	b.n	8008084 <prvProcessReceivedCommands+0x108>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007f84:	2208      	movs	r2, #8
 8007f86:	18bb      	adds	r3, r7, r2
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	da0f      	bge.n	8007fae <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007f8e:	18bb      	adds	r3, r7, r2
 8007f90:	3304      	adds	r3, #4
 8007f92:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d101      	bne.n	8007f9e <prvProcessReceivedCommands+0x22>
 8007f9a:	b672      	cpsid	i
 8007f9c:	e7fe      	b.n	8007f9c <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa0:	681a      	ldr	r2, [r3, #0]
 8007fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa4:	6858      	ldr	r0, [r3, #4]
 8007fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa8:	689b      	ldr	r3, [r3, #8]
 8007faa:	0019      	movs	r1, r3
 8007fac:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007fae:	2208      	movs	r2, #8
 8007fb0:	18bb      	adds	r3, r7, r2
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	db64      	blt.n	8008082 <prvProcessReceivedCommands+0x106>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007fb8:	18bb      	adds	r3, r7, r2
 8007fba:	689b      	ldr	r3, [r3, #8]
 8007fbc:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007fbe:	6a3b      	ldr	r3, [r7, #32]
 8007fc0:	695b      	ldr	r3, [r3, #20]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d004      	beq.n	8007fd0 <prvProcessReceivedCommands+0x54>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007fc6:	6a3b      	ldr	r3, [r7, #32]
 8007fc8:	3304      	adds	r3, #4
 8007fca:	0018      	movs	r0, r3
 8007fcc:	f7fe f8ed 	bl	80061aa <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007fd0:	1d3b      	adds	r3, r7, #4
 8007fd2:	0018      	movs	r0, r3
 8007fd4:	f7ff ff70 	bl	8007eb8 <prvSampleTimeNow>
 8007fd8:	0003      	movs	r3, r0
 8007fda:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 8007fdc:	2308      	movs	r3, #8
 8007fde:	18fb      	adds	r3, r7, r3
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	2b09      	cmp	r3, #9
 8007fe4:	d84e      	bhi.n	8008084 <prvProcessReceivedCommands+0x108>
 8007fe6:	009a      	lsls	r2, r3, #2
 8007fe8:	4b2e      	ldr	r3, [pc, #184]	; (80080a4 <prvProcessReceivedCommands+0x128>)
 8007fea:	18d3      	adds	r3, r2, r3
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007ff0:	2408      	movs	r4, #8
 8007ff2:	193b      	adds	r3, r7, r4
 8007ff4:	685a      	ldr	r2, [r3, #4]
 8007ff6:	6a3b      	ldr	r3, [r7, #32]
 8007ff8:	699b      	ldr	r3, [r3, #24]
 8007ffa:	18d1      	adds	r1, r2, r3
 8007ffc:	193b      	adds	r3, r7, r4
 8007ffe:	685b      	ldr	r3, [r3, #4]
 8008000:	69fa      	ldr	r2, [r7, #28]
 8008002:	6a38      	ldr	r0, [r7, #32]
 8008004:	f7ff ff78 	bl	8007ef8 <prvInsertTimerInActiveList>
 8008008:	1e03      	subs	r3, r0, #0
 800800a:	d03b      	beq.n	8008084 <prvProcessReceivedCommands+0x108>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800800c:	6a3b      	ldr	r3, [r7, #32]
 800800e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008010:	6a3a      	ldr	r2, [r7, #32]
 8008012:	0010      	movs	r0, r2
 8008014:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008016:	6a3b      	ldr	r3, [r7, #32]
 8008018:	69db      	ldr	r3, [r3, #28]
 800801a:	2b01      	cmp	r3, #1
 800801c:	d132      	bne.n	8008084 <prvProcessReceivedCommands+0x108>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800801e:	193b      	adds	r3, r7, r4
 8008020:	685a      	ldr	r2, [r3, #4]
 8008022:	6a3b      	ldr	r3, [r7, #32]
 8008024:	699b      	ldr	r3, [r3, #24]
 8008026:	18d2      	adds	r2, r2, r3
 8008028:	6a38      	ldr	r0, [r7, #32]
 800802a:	2300      	movs	r3, #0
 800802c:	9300      	str	r3, [sp, #0]
 800802e:	2300      	movs	r3, #0
 8008030:	2100      	movs	r1, #0
 8008032:	f7ff fe45 	bl	8007cc0 <xTimerGenericCommand>
 8008036:	0003      	movs	r3, r0
 8008038:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 800803a:	69bb      	ldr	r3, [r7, #24]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d121      	bne.n	8008084 <prvProcessReceivedCommands+0x108>
 8008040:	b672      	cpsid	i
 8008042:	e7fe      	b.n	8008042 <prvProcessReceivedCommands+0xc6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008044:	2308      	movs	r3, #8
 8008046:	18fb      	adds	r3, r7, r3
 8008048:	685a      	ldr	r2, [r3, #4]
 800804a:	6a3b      	ldr	r3, [r7, #32]
 800804c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800804e:	6a3b      	ldr	r3, [r7, #32]
 8008050:	699b      	ldr	r3, [r3, #24]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d101      	bne.n	800805a <prvProcessReceivedCommands+0xde>
 8008056:	b672      	cpsid	i
 8008058:	e7fe      	b.n	8008058 <prvProcessReceivedCommands+0xdc>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800805a:	6a3b      	ldr	r3, [r7, #32]
 800805c:	699a      	ldr	r2, [r3, #24]
 800805e:	69fb      	ldr	r3, [r7, #28]
 8008060:	18d1      	adds	r1, r2, r3
 8008062:	69fb      	ldr	r3, [r7, #28]
 8008064:	69fa      	ldr	r2, [r7, #28]
 8008066:	6a38      	ldr	r0, [r7, #32]
 8008068:	f7ff ff46 	bl	8007ef8 <prvInsertTimerInActiveList>
					break;
 800806c:	e00a      	b.n	8008084 <prvProcessReceivedCommands+0x108>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800806e:	6a3b      	ldr	r3, [r7, #32]
 8008070:	222c      	movs	r2, #44	; 0x2c
 8008072:	5c9b      	ldrb	r3, [r3, r2]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d105      	bne.n	8008084 <prvProcessReceivedCommands+0x108>
						{
							vPortFree( pxTimer );
 8008078:	6a3b      	ldr	r3, [r7, #32]
 800807a:	0018      	movs	r0, r3
 800807c:	f000 fa8e 	bl	800859c <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008080:	e000      	b.n	8008084 <prvProcessReceivedCommands+0x108>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008082:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008084:	4b08      	ldr	r3, [pc, #32]	; (80080a8 <prvProcessReceivedCommands+0x12c>)
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	2208      	movs	r2, #8
 800808a:	18b9      	adds	r1, r7, r2
 800808c:	2200      	movs	r2, #0
 800808e:	0018      	movs	r0, r3
 8008090:	f7fe fb7f 	bl	8006792 <xQueueReceive>
 8008094:	1e03      	subs	r3, r0, #0
 8008096:	d000      	beq.n	800809a <prvProcessReceivedCommands+0x11e>
 8008098:	e774      	b.n	8007f84 <prvProcessReceivedCommands+0x8>
	}
}
 800809a:	46c0      	nop			; (mov r8, r8)
 800809c:	46c0      	nop			; (mov r8, r8)
 800809e:	46bd      	mov	sp, r7
 80080a0:	b00b      	add	sp, #44	; 0x2c
 80080a2:	bd90      	pop	{r4, r7, pc}
 80080a4:	080097a8 	.word	0x080097a8
 80080a8:	20000cbc 	.word	0x20000cbc

080080ac <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b088      	sub	sp, #32
 80080b0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80080b2:	e03e      	b.n	8008132 <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80080b4:	4b28      	ldr	r3, [pc, #160]	; (8008158 <prvSwitchTimerLists+0xac>)
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	68db      	ldr	r3, [r3, #12]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80080be:	4b26      	ldr	r3, [pc, #152]	; (8008158 <prvSwitchTimerLists+0xac>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	68db      	ldr	r3, [r3, #12]
 80080c4:	68db      	ldr	r3, [r3, #12]
 80080c6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	3304      	adds	r3, #4
 80080cc:	0018      	movs	r0, r3
 80080ce:	f7fe f86c 	bl	80061aa <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d6:	68fa      	ldr	r2, [r7, #12]
 80080d8:	0010      	movs	r0, r2
 80080da:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	69db      	ldr	r3, [r3, #28]
 80080e0:	2b01      	cmp	r3, #1
 80080e2:	d126      	bne.n	8008132 <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	699b      	ldr	r3, [r3, #24]
 80080e8:	693a      	ldr	r2, [r7, #16]
 80080ea:	18d3      	adds	r3, r2, r3
 80080ec:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80080ee:	68ba      	ldr	r2, [r7, #8]
 80080f0:	693b      	ldr	r3, [r7, #16]
 80080f2:	429a      	cmp	r2, r3
 80080f4:	d90e      	bls.n	8008114 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	68ba      	ldr	r2, [r7, #8]
 80080fa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	68fa      	ldr	r2, [r7, #12]
 8008100:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008102:	4b15      	ldr	r3, [pc, #84]	; (8008158 <prvSwitchTimerLists+0xac>)
 8008104:	681a      	ldr	r2, [r3, #0]
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	3304      	adds	r3, #4
 800810a:	0019      	movs	r1, r3
 800810c:	0010      	movs	r0, r2
 800810e:	f7fe f816 	bl	800613e <vListInsert>
 8008112:	e00e      	b.n	8008132 <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008114:	693a      	ldr	r2, [r7, #16]
 8008116:	68f8      	ldr	r0, [r7, #12]
 8008118:	2300      	movs	r3, #0
 800811a:	9300      	str	r3, [sp, #0]
 800811c:	2300      	movs	r3, #0
 800811e:	2100      	movs	r1, #0
 8008120:	f7ff fdce 	bl	8007cc0 <xTimerGenericCommand>
 8008124:	0003      	movs	r3, r0
 8008126:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d101      	bne.n	8008132 <prvSwitchTimerLists+0x86>
 800812e:	b672      	cpsid	i
 8008130:	e7fe      	b.n	8008130 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008132:	4b09      	ldr	r3, [pc, #36]	; (8008158 <prvSwitchTimerLists+0xac>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d1bb      	bne.n	80080b4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800813c:	4b06      	ldr	r3, [pc, #24]	; (8008158 <prvSwitchTimerLists+0xac>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008142:	4b06      	ldr	r3, [pc, #24]	; (800815c <prvSwitchTimerLists+0xb0>)
 8008144:	681a      	ldr	r2, [r3, #0]
 8008146:	4b04      	ldr	r3, [pc, #16]	; (8008158 <prvSwitchTimerLists+0xac>)
 8008148:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 800814a:	4b04      	ldr	r3, [pc, #16]	; (800815c <prvSwitchTimerLists+0xb0>)
 800814c:	697a      	ldr	r2, [r7, #20]
 800814e:	601a      	str	r2, [r3, #0]
}
 8008150:	46c0      	nop			; (mov r8, r8)
 8008152:	46bd      	mov	sp, r7
 8008154:	b006      	add	sp, #24
 8008156:	bd80      	pop	{r7, pc}
 8008158:	20000cb4 	.word	0x20000cb4
 800815c:	20000cb8 	.word	0x20000cb8

08008160 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b082      	sub	sp, #8
 8008164:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008166:	f000 f8db 	bl	8008320 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800816a:	4b16      	ldr	r3, [pc, #88]	; (80081c4 <prvCheckForValidListAndQueue+0x64>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d123      	bne.n	80081ba <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 8008172:	4b15      	ldr	r3, [pc, #84]	; (80081c8 <prvCheckForValidListAndQueue+0x68>)
 8008174:	0018      	movs	r0, r3
 8008176:	f7fd ff97 	bl	80060a8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800817a:	4b14      	ldr	r3, [pc, #80]	; (80081cc <prvCheckForValidListAndQueue+0x6c>)
 800817c:	0018      	movs	r0, r3
 800817e:	f7fd ff93 	bl	80060a8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008182:	4b13      	ldr	r3, [pc, #76]	; (80081d0 <prvCheckForValidListAndQueue+0x70>)
 8008184:	4a10      	ldr	r2, [pc, #64]	; (80081c8 <prvCheckForValidListAndQueue+0x68>)
 8008186:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008188:	4b12      	ldr	r3, [pc, #72]	; (80081d4 <prvCheckForValidListAndQueue+0x74>)
 800818a:	4a10      	ldr	r2, [pc, #64]	; (80081cc <prvCheckForValidListAndQueue+0x6c>)
 800818c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800818e:	4b12      	ldr	r3, [pc, #72]	; (80081d8 <prvCheckForValidListAndQueue+0x78>)
 8008190:	4a12      	ldr	r2, [pc, #72]	; (80081dc <prvCheckForValidListAndQueue+0x7c>)
 8008192:	2100      	movs	r1, #0
 8008194:	9100      	str	r1, [sp, #0]
 8008196:	2110      	movs	r1, #16
 8008198:	200a      	movs	r0, #10
 800819a:	f7fe f882 	bl	80062a2 <xQueueGenericCreateStatic>
 800819e:	0002      	movs	r2, r0
 80081a0:	4b08      	ldr	r3, [pc, #32]	; (80081c4 <prvCheckForValidListAndQueue+0x64>)
 80081a2:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80081a4:	4b07      	ldr	r3, [pc, #28]	; (80081c4 <prvCheckForValidListAndQueue+0x64>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d006      	beq.n	80081ba <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80081ac:	4b05      	ldr	r3, [pc, #20]	; (80081c4 <prvCheckForValidListAndQueue+0x64>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	4a0b      	ldr	r2, [pc, #44]	; (80081e0 <prvCheckForValidListAndQueue+0x80>)
 80081b2:	0011      	movs	r1, r2
 80081b4:	0018      	movs	r0, r3
 80081b6:	f7fe fdaf 	bl	8006d18 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80081ba:	f000 f8c3 	bl	8008344 <vPortExitCritical>
}
 80081be:	46c0      	nop			; (mov r8, r8)
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}
 80081c4:	20000cbc 	.word	0x20000cbc
 80081c8:	20000c8c 	.word	0x20000c8c
 80081cc:	20000ca0 	.word	0x20000ca0
 80081d0:	20000cb4 	.word	0x20000cb4
 80081d4:	20000cb8 	.word	0x20000cb8
 80081d8:	20000d68 	.word	0x20000d68
 80081dc:	20000cc8 	.word	0x20000cc8
 80081e0:	08009698 	.word	0x08009698

080081e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b084      	sub	sp, #16
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	60f8      	str	r0, [r7, #12]
 80081ec:	60b9      	str	r1, [r7, #8]
 80081ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	3b04      	subs	r3, #4
 80081f4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	2280      	movs	r2, #128	; 0x80
 80081fa:	0452      	lsls	r2, r2, #17
 80081fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	3b04      	subs	r3, #4
 8008202:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8008204:	68ba      	ldr	r2, [r7, #8]
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	3b04      	subs	r3, #4
 800820e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008210:	4a08      	ldr	r2, [pc, #32]	; (8008234 <pxPortInitialiseStack+0x50>)
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	3b14      	subs	r3, #20
 800821a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800821c:	687a      	ldr	r2, [r7, #4]
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	3b20      	subs	r3, #32
 8008226:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008228:	68fb      	ldr	r3, [r7, #12]
}
 800822a:	0018      	movs	r0, r3
 800822c:	46bd      	mov	sp, r7
 800822e:	b004      	add	sp, #16
 8008230:	bd80      	pop	{r7, pc}
 8008232:	46c0      	nop			; (mov r8, r8)
 8008234:	08008239 	.word	0x08008239

08008238 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b082      	sub	sp, #8
 800823c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800823e:	2300      	movs	r3, #0
 8008240:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008242:	4b08      	ldr	r3, [pc, #32]	; (8008264 <prvTaskExitError+0x2c>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	3301      	adds	r3, #1
 8008248:	d001      	beq.n	800824e <prvTaskExitError+0x16>
 800824a:	b672      	cpsid	i
 800824c:	e7fe      	b.n	800824c <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 800824e:	b672      	cpsid	i
	while( ulDummy == 0 )
 8008250:	46c0      	nop			; (mov r8, r8)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d0fc      	beq.n	8008252 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008258:	46c0      	nop			; (mov r8, r8)
 800825a:	46c0      	nop			; (mov r8, r8)
 800825c:	46bd      	mov	sp, r7
 800825e:	b002      	add	sp, #8
 8008260:	bd80      	pop	{r7, pc}
 8008262:	46c0      	nop			; (mov r8, r8)
 8008264:	20000010 	.word	0x20000010

08008268 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8008268:	b580      	push	{r7, lr}
 800826a:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 800826c:	46c0      	nop			; (mov r8, r8)
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}
	...

08008280 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8008280:	4a0b      	ldr	r2, [pc, #44]	; (80082b0 <pxCurrentTCBConst2>)
 8008282:	6813      	ldr	r3, [r2, #0]
 8008284:	6818      	ldr	r0, [r3, #0]
 8008286:	3020      	adds	r0, #32
 8008288:	f380 8809 	msr	PSP, r0
 800828c:	2002      	movs	r0, #2
 800828e:	f380 8814 	msr	CONTROL, r0
 8008292:	f3bf 8f6f 	isb	sy
 8008296:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8008298:	46ae      	mov	lr, r5
 800829a:	bc08      	pop	{r3}
 800829c:	bc04      	pop	{r2}
 800829e:	b662      	cpsie	i
 80082a0:	4718      	bx	r3
 80082a2:	46c0      	nop			; (mov r8, r8)
 80082a4:	46c0      	nop			; (mov r8, r8)
 80082a6:	46c0      	nop			; (mov r8, r8)
 80082a8:	46c0      	nop			; (mov r8, r8)
 80082aa:	46c0      	nop			; (mov r8, r8)
 80082ac:	46c0      	nop			; (mov r8, r8)
 80082ae:	46c0      	nop			; (mov r8, r8)

080082b0 <pxCurrentTCBConst2>:
 80082b0:	2000078c 	.word	0x2000078c
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 80082b4:	46c0      	nop			; (mov r8, r8)
 80082b6:	46c0      	nop			; (mov r8, r8)

080082b8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 80082bc:	4b0e      	ldr	r3, [pc, #56]	; (80082f8 <xPortStartScheduler+0x40>)
 80082be:	681a      	ldr	r2, [r3, #0]
 80082c0:	4b0d      	ldr	r3, [pc, #52]	; (80082f8 <xPortStartScheduler+0x40>)
 80082c2:	21ff      	movs	r1, #255	; 0xff
 80082c4:	0409      	lsls	r1, r1, #16
 80082c6:	430a      	orrs	r2, r1
 80082c8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 80082ca:	4b0b      	ldr	r3, [pc, #44]	; (80082f8 <xPortStartScheduler+0x40>)
 80082cc:	681a      	ldr	r2, [r3, #0]
 80082ce:	4b0a      	ldr	r3, [pc, #40]	; (80082f8 <xPortStartScheduler+0x40>)
 80082d0:	21ff      	movs	r1, #255	; 0xff
 80082d2:	0609      	lsls	r1, r1, #24
 80082d4:	430a      	orrs	r2, r1
 80082d6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 80082d8:	f000 f898 	bl	800840c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80082dc:	4b07      	ldr	r3, [pc, #28]	; (80082fc <xPortStartScheduler+0x44>)
 80082de:	2200      	movs	r2, #0
 80082e0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 80082e2:	f7ff ffcd 	bl	8008280 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80082e6:	f7ff f8bf 	bl	8007468 <vTaskSwitchContext>
	prvTaskExitError();
 80082ea:	f7ff ffa5 	bl	8008238 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80082ee:	2300      	movs	r3, #0
}
 80082f0:	0018      	movs	r0, r3
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bd80      	pop	{r7, pc}
 80082f6:	46c0      	nop			; (mov r8, r8)
 80082f8:	e000ed20 	.word	0xe000ed20
 80082fc:	20000010 	.word	0x20000010

08008300 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8008300:	b580      	push	{r7, lr}
 8008302:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8008304:	4b05      	ldr	r3, [pc, #20]	; (800831c <vPortYield+0x1c>)
 8008306:	2280      	movs	r2, #128	; 0x80
 8008308:	0552      	lsls	r2, r2, #21
 800830a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800830c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8008310:	f3bf 8f6f 	isb	sy
}
 8008314:	46c0      	nop			; (mov r8, r8)
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}
 800831a:	46c0      	nop			; (mov r8, r8)
 800831c:	e000ed04 	.word	0xe000ed04

08008320 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008320:	b580      	push	{r7, lr}
 8008322:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8008324:	b672      	cpsid	i
    uxCriticalNesting++;
 8008326:	4b06      	ldr	r3, [pc, #24]	; (8008340 <vPortEnterCritical+0x20>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	1c5a      	adds	r2, r3, #1
 800832c:	4b04      	ldr	r3, [pc, #16]	; (8008340 <vPortEnterCritical+0x20>)
 800832e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8008330:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8008334:	f3bf 8f6f 	isb	sy
}
 8008338:	46c0      	nop			; (mov r8, r8)
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}
 800833e:	46c0      	nop			; (mov r8, r8)
 8008340:	20000010 	.word	0x20000010

08008344 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008344:	b580      	push	{r7, lr}
 8008346:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008348:	4b09      	ldr	r3, [pc, #36]	; (8008370 <vPortExitCritical+0x2c>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d101      	bne.n	8008354 <vPortExitCritical+0x10>
 8008350:	b672      	cpsid	i
 8008352:	e7fe      	b.n	8008352 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8008354:	4b06      	ldr	r3, [pc, #24]	; (8008370 <vPortExitCritical+0x2c>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	1e5a      	subs	r2, r3, #1
 800835a:	4b05      	ldr	r3, [pc, #20]	; (8008370 <vPortExitCritical+0x2c>)
 800835c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 800835e:	4b04      	ldr	r3, [pc, #16]	; (8008370 <vPortExitCritical+0x2c>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d100      	bne.n	8008368 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8008366:	b662      	cpsie	i
    }
}
 8008368:	46c0      	nop			; (mov r8, r8)
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}
 800836e:	46c0      	nop			; (mov r8, r8)
 8008370:	20000010 	.word	0x20000010

08008374 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8008374:	f3ef 8010 	mrs	r0, PRIMASK
 8008378:	b672      	cpsid	i
 800837a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 800837c:	46c0      	nop			; (mov r8, r8)
 800837e:	0018      	movs	r0, r3

08008380 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8008380:	f380 8810 	msr	PRIMASK, r0
 8008384:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8008386:	46c0      	nop			; (mov r8, r8)
	...

08008390 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008390:	f3ef 8009 	mrs	r0, PSP
 8008394:	4b0e      	ldr	r3, [pc, #56]	; (80083d0 <pxCurrentTCBConst>)
 8008396:	681a      	ldr	r2, [r3, #0]
 8008398:	3820      	subs	r0, #32
 800839a:	6010      	str	r0, [r2, #0]
 800839c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800839e:	4644      	mov	r4, r8
 80083a0:	464d      	mov	r5, r9
 80083a2:	4656      	mov	r6, sl
 80083a4:	465f      	mov	r7, fp
 80083a6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80083a8:	b508      	push	{r3, lr}
 80083aa:	b672      	cpsid	i
 80083ac:	f7ff f85c 	bl	8007468 <vTaskSwitchContext>
 80083b0:	b662      	cpsie	i
 80083b2:	bc0c      	pop	{r2, r3}
 80083b4:	6811      	ldr	r1, [r2, #0]
 80083b6:	6808      	ldr	r0, [r1, #0]
 80083b8:	3010      	adds	r0, #16
 80083ba:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80083bc:	46a0      	mov	r8, r4
 80083be:	46a9      	mov	r9, r5
 80083c0:	46b2      	mov	sl, r6
 80083c2:	46bb      	mov	fp, r7
 80083c4:	f380 8809 	msr	PSP, r0
 80083c8:	3820      	subs	r0, #32
 80083ca:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80083cc:	4718      	bx	r3
 80083ce:	46c0      	nop			; (mov r8, r8)

080083d0 <pxCurrentTCBConst>:
 80083d0:	2000078c 	.word	0x2000078c
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 80083d4:	46c0      	nop			; (mov r8, r8)
 80083d6:	46c0      	nop			; (mov r8, r8)

080083d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b082      	sub	sp, #8
 80083dc:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 80083de:	f7ff ffc9 	bl	8008374 <ulSetInterruptMaskFromISR>
 80083e2:	0003      	movs	r3, r0
 80083e4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80083e6:	f7fe ff8b 	bl	8007300 <xTaskIncrementTick>
 80083ea:	1e03      	subs	r3, r0, #0
 80083ec:	d003      	beq.n	80083f6 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 80083ee:	4b06      	ldr	r3, [pc, #24]	; (8008408 <xPortSysTickHandler+0x30>)
 80083f0:	2280      	movs	r2, #128	; 0x80
 80083f2:	0552      	lsls	r2, r2, #21
 80083f4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	0018      	movs	r0, r3
 80083fa:	f7ff ffc1 	bl	8008380 <vClearInterruptMaskFromISR>
}
 80083fe:	46c0      	nop			; (mov r8, r8)
 8008400:	46bd      	mov	sp, r7
 8008402:	b002      	add	sp, #8
 8008404:	bd80      	pop	{r7, pc}
 8008406:	46c0      	nop			; (mov r8, r8)
 8008408:	e000ed04 	.word	0xe000ed04

0800840c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 800840c:	b580      	push	{r7, lr}
 800840e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8008410:	4b0b      	ldr	r3, [pc, #44]	; (8008440 <prvSetupTimerInterrupt+0x34>)
 8008412:	2200      	movs	r2, #0
 8008414:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8008416:	4b0b      	ldr	r3, [pc, #44]	; (8008444 <prvSetupTimerInterrupt+0x38>)
 8008418:	2200      	movs	r2, #0
 800841a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800841c:	4b0a      	ldr	r3, [pc, #40]	; (8008448 <prvSetupTimerInterrupt+0x3c>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	22fa      	movs	r2, #250	; 0xfa
 8008422:	0091      	lsls	r1, r2, #2
 8008424:	0018      	movs	r0, r3
 8008426:	f7f7 fe79 	bl	800011c <__udivsi3>
 800842a:	0003      	movs	r3, r0
 800842c:	001a      	movs	r2, r3
 800842e:	4b07      	ldr	r3, [pc, #28]	; (800844c <prvSetupTimerInterrupt+0x40>)
 8008430:	3a01      	subs	r2, #1
 8008432:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8008434:	4b02      	ldr	r3, [pc, #8]	; (8008440 <prvSetupTimerInterrupt+0x34>)
 8008436:	2207      	movs	r2, #7
 8008438:	601a      	str	r2, [r3, #0]
}
 800843a:	46c0      	nop			; (mov r8, r8)
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}
 8008440:	e000e010 	.word	0xe000e010
 8008444:	e000e018 	.word	0xe000e018
 8008448:	20000004 	.word	0x20000004
 800844c:	e000e014 	.word	0xe000e014

08008450 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b086      	sub	sp, #24
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008458:	2300      	movs	r3, #0
 800845a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800845c:	f7fe feaa 	bl	80071b4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008460:	4b49      	ldr	r3, [pc, #292]	; (8008588 <pvPortMalloc+0x138>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d101      	bne.n	800846c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008468:	f000 f8e0 	bl	800862c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800846c:	4b47      	ldr	r3, [pc, #284]	; (800858c <pvPortMalloc+0x13c>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	687a      	ldr	r2, [r7, #4]
 8008472:	4013      	ands	r3, r2
 8008474:	d000      	beq.n	8008478 <pvPortMalloc+0x28>
 8008476:	e079      	b.n	800856c <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d012      	beq.n	80084a4 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 800847e:	2208      	movs	r2, #8
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	189b      	adds	r3, r3, r2
 8008484:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2207      	movs	r2, #7
 800848a:	4013      	ands	r3, r2
 800848c:	d00a      	beq.n	80084a4 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2207      	movs	r2, #7
 8008492:	4393      	bics	r3, r2
 8008494:	3308      	adds	r3, #8
 8008496:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2207      	movs	r2, #7
 800849c:	4013      	ands	r3, r2
 800849e:	d001      	beq.n	80084a4 <pvPortMalloc+0x54>
 80084a0:	b672      	cpsid	i
 80084a2:	e7fe      	b.n	80084a2 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d060      	beq.n	800856c <pvPortMalloc+0x11c>
 80084aa:	4b39      	ldr	r3, [pc, #228]	; (8008590 <pvPortMalloc+0x140>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	687a      	ldr	r2, [r7, #4]
 80084b0:	429a      	cmp	r2, r3
 80084b2:	d85b      	bhi.n	800856c <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80084b4:	4b37      	ldr	r3, [pc, #220]	; (8008594 <pvPortMalloc+0x144>)
 80084b6:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 80084b8:	4b36      	ldr	r3, [pc, #216]	; (8008594 <pvPortMalloc+0x144>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80084be:	e004      	b.n	80084ca <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 80084c0:	697b      	ldr	r3, [r7, #20]
 80084c2:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 80084c4:	697b      	ldr	r3, [r7, #20]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80084ca:	697b      	ldr	r3, [r7, #20]
 80084cc:	685b      	ldr	r3, [r3, #4]
 80084ce:	687a      	ldr	r2, [r7, #4]
 80084d0:	429a      	cmp	r2, r3
 80084d2:	d903      	bls.n	80084dc <pvPortMalloc+0x8c>
 80084d4:	697b      	ldr	r3, [r7, #20]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d1f1      	bne.n	80084c0 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80084dc:	4b2a      	ldr	r3, [pc, #168]	; (8008588 <pvPortMalloc+0x138>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	697a      	ldr	r2, [r7, #20]
 80084e2:	429a      	cmp	r2, r3
 80084e4:	d042      	beq.n	800856c <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80084e6:	693b      	ldr	r3, [r7, #16]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	2208      	movs	r2, #8
 80084ec:	189b      	adds	r3, r3, r2
 80084ee:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80084f0:	697b      	ldr	r3, [r7, #20]
 80084f2:	681a      	ldr	r2, [r3, #0]
 80084f4:	693b      	ldr	r3, [r7, #16]
 80084f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80084f8:	697b      	ldr	r3, [r7, #20]
 80084fa:	685a      	ldr	r2, [r3, #4]
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	1ad2      	subs	r2, r2, r3
 8008500:	2308      	movs	r3, #8
 8008502:	005b      	lsls	r3, r3, #1
 8008504:	429a      	cmp	r2, r3
 8008506:	d916      	bls.n	8008536 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008508:	697a      	ldr	r2, [r7, #20]
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	18d3      	adds	r3, r2, r3
 800850e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	2207      	movs	r2, #7
 8008514:	4013      	ands	r3, r2
 8008516:	d001      	beq.n	800851c <pvPortMalloc+0xcc>
 8008518:	b672      	cpsid	i
 800851a:	e7fe      	b.n	800851a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800851c:	697b      	ldr	r3, [r7, #20]
 800851e:	685a      	ldr	r2, [r3, #4]
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	1ad2      	subs	r2, r2, r3
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008528:	697b      	ldr	r3, [r7, #20]
 800852a:	687a      	ldr	r2, [r7, #4]
 800852c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	0018      	movs	r0, r3
 8008532:	f000 f8db 	bl	80086ec <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008536:	4b16      	ldr	r3, [pc, #88]	; (8008590 <pvPortMalloc+0x140>)
 8008538:	681a      	ldr	r2, [r3, #0]
 800853a:	697b      	ldr	r3, [r7, #20]
 800853c:	685b      	ldr	r3, [r3, #4]
 800853e:	1ad2      	subs	r2, r2, r3
 8008540:	4b13      	ldr	r3, [pc, #76]	; (8008590 <pvPortMalloc+0x140>)
 8008542:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008544:	4b12      	ldr	r3, [pc, #72]	; (8008590 <pvPortMalloc+0x140>)
 8008546:	681a      	ldr	r2, [r3, #0]
 8008548:	4b13      	ldr	r3, [pc, #76]	; (8008598 <pvPortMalloc+0x148>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	429a      	cmp	r2, r3
 800854e:	d203      	bcs.n	8008558 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008550:	4b0f      	ldr	r3, [pc, #60]	; (8008590 <pvPortMalloc+0x140>)
 8008552:	681a      	ldr	r2, [r3, #0]
 8008554:	4b10      	ldr	r3, [pc, #64]	; (8008598 <pvPortMalloc+0x148>)
 8008556:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008558:	697b      	ldr	r3, [r7, #20]
 800855a:	685a      	ldr	r2, [r3, #4]
 800855c:	4b0b      	ldr	r3, [pc, #44]	; (800858c <pvPortMalloc+0x13c>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	431a      	orrs	r2, r3
 8008562:	697b      	ldr	r3, [r7, #20]
 8008564:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008566:	697b      	ldr	r3, [r7, #20]
 8008568:	2200      	movs	r2, #0
 800856a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800856c:	f7fe fe2e 	bl	80071cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	2207      	movs	r2, #7
 8008574:	4013      	ands	r3, r2
 8008576:	d001      	beq.n	800857c <pvPortMalloc+0x12c>
 8008578:	b672      	cpsid	i
 800857a:	e7fe      	b.n	800857a <pvPortMalloc+0x12a>
	return pvReturn;
 800857c:	68fb      	ldr	r3, [r7, #12]
}
 800857e:	0018      	movs	r0, r3
 8008580:	46bd      	mov	sp, r7
 8008582:	b006      	add	sp, #24
 8008584:	bd80      	pop	{r7, pc}
 8008586:	46c0      	nop			; (mov r8, r8)
 8008588:	200019c0 	.word	0x200019c0
 800858c:	200019cc 	.word	0x200019cc
 8008590:	200019c4 	.word	0x200019c4
 8008594:	200019b8 	.word	0x200019b8
 8008598:	200019c8 	.word	0x200019c8

0800859c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b084      	sub	sp, #16
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d035      	beq.n	800861a <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80085ae:	2308      	movs	r3, #8
 80085b0:	425b      	negs	r3, r3
 80085b2:	68fa      	ldr	r2, [r7, #12]
 80085b4:	18d3      	adds	r3, r2, r3
 80085b6:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	685a      	ldr	r2, [r3, #4]
 80085c0:	4b18      	ldr	r3, [pc, #96]	; (8008624 <vPortFree+0x88>)
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	4013      	ands	r3, r2
 80085c6:	d101      	bne.n	80085cc <vPortFree+0x30>
 80085c8:	b672      	cpsid	i
 80085ca:	e7fe      	b.n	80085ca <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d001      	beq.n	80085d8 <vPortFree+0x3c>
 80085d4:	b672      	cpsid	i
 80085d6:	e7fe      	b.n	80085d6 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	685a      	ldr	r2, [r3, #4]
 80085dc:	4b11      	ldr	r3, [pc, #68]	; (8008624 <vPortFree+0x88>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	4013      	ands	r3, r2
 80085e2:	d01a      	beq.n	800861a <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d116      	bne.n	800861a <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	685a      	ldr	r2, [r3, #4]
 80085f0:	4b0c      	ldr	r3, [pc, #48]	; (8008624 <vPortFree+0x88>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	43db      	mvns	r3, r3
 80085f6:	401a      	ands	r2, r3
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80085fc:	f7fe fdda 	bl	80071b4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	685a      	ldr	r2, [r3, #4]
 8008604:	4b08      	ldr	r3, [pc, #32]	; (8008628 <vPortFree+0x8c>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	18d2      	adds	r2, r2, r3
 800860a:	4b07      	ldr	r3, [pc, #28]	; (8008628 <vPortFree+0x8c>)
 800860c:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	0018      	movs	r0, r3
 8008612:	f000 f86b 	bl	80086ec <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008616:	f7fe fdd9 	bl	80071cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800861a:	46c0      	nop			; (mov r8, r8)
 800861c:	46bd      	mov	sp, r7
 800861e:	b004      	add	sp, #16
 8008620:	bd80      	pop	{r7, pc}
 8008622:	46c0      	nop			; (mov r8, r8)
 8008624:	200019cc 	.word	0x200019cc
 8008628:	200019c4 	.word	0x200019c4

0800862c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b084      	sub	sp, #16
 8008630:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008632:	23c0      	movs	r3, #192	; 0xc0
 8008634:	011b      	lsls	r3, r3, #4
 8008636:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008638:	4b26      	ldr	r3, [pc, #152]	; (80086d4 <prvHeapInit+0xa8>)
 800863a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	2207      	movs	r2, #7
 8008640:	4013      	ands	r3, r2
 8008642:	d00c      	beq.n	800865e <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	3307      	adds	r3, #7
 8008648:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	2207      	movs	r2, #7
 800864e:	4393      	bics	r3, r2
 8008650:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008652:	68ba      	ldr	r2, [r7, #8]
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	1ad2      	subs	r2, r2, r3
 8008658:	4b1e      	ldr	r3, [pc, #120]	; (80086d4 <prvHeapInit+0xa8>)
 800865a:	18d3      	adds	r3, r2, r3
 800865c:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008662:	4b1d      	ldr	r3, [pc, #116]	; (80086d8 <prvHeapInit+0xac>)
 8008664:	687a      	ldr	r2, [r7, #4]
 8008666:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008668:	4b1b      	ldr	r3, [pc, #108]	; (80086d8 <prvHeapInit+0xac>)
 800866a:	2200      	movs	r2, #0
 800866c:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	68ba      	ldr	r2, [r7, #8]
 8008672:	18d3      	adds	r3, r2, r3
 8008674:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008676:	2208      	movs	r2, #8
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	1a9b      	subs	r3, r3, r2
 800867c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	2207      	movs	r2, #7
 8008682:	4393      	bics	r3, r2
 8008684:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008686:	68fa      	ldr	r2, [r7, #12]
 8008688:	4b14      	ldr	r3, [pc, #80]	; (80086dc <prvHeapInit+0xb0>)
 800868a:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 800868c:	4b13      	ldr	r3, [pc, #76]	; (80086dc <prvHeapInit+0xb0>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	2200      	movs	r2, #0
 8008692:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008694:	4b11      	ldr	r3, [pc, #68]	; (80086dc <prvHeapInit+0xb0>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	2200      	movs	r2, #0
 800869a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	68fa      	ldr	r2, [r7, #12]
 80086a4:	1ad2      	subs	r2, r2, r3
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80086aa:	4b0c      	ldr	r3, [pc, #48]	; (80086dc <prvHeapInit+0xb0>)
 80086ac:	681a      	ldr	r2, [r3, #0]
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	685a      	ldr	r2, [r3, #4]
 80086b6:	4b0a      	ldr	r3, [pc, #40]	; (80086e0 <prvHeapInit+0xb4>)
 80086b8:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	685a      	ldr	r2, [r3, #4]
 80086be:	4b09      	ldr	r3, [pc, #36]	; (80086e4 <prvHeapInit+0xb8>)
 80086c0:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80086c2:	4b09      	ldr	r3, [pc, #36]	; (80086e8 <prvHeapInit+0xbc>)
 80086c4:	2280      	movs	r2, #128	; 0x80
 80086c6:	0612      	lsls	r2, r2, #24
 80086c8:	601a      	str	r2, [r3, #0]
}
 80086ca:	46c0      	nop			; (mov r8, r8)
 80086cc:	46bd      	mov	sp, r7
 80086ce:	b004      	add	sp, #16
 80086d0:	bd80      	pop	{r7, pc}
 80086d2:	46c0      	nop			; (mov r8, r8)
 80086d4:	20000db8 	.word	0x20000db8
 80086d8:	200019b8 	.word	0x200019b8
 80086dc:	200019c0 	.word	0x200019c0
 80086e0:	200019c8 	.word	0x200019c8
 80086e4:	200019c4 	.word	0x200019c4
 80086e8:	200019cc 	.word	0x200019cc

080086ec <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b084      	sub	sp, #16
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80086f4:	4b27      	ldr	r3, [pc, #156]	; (8008794 <prvInsertBlockIntoFreeList+0xa8>)
 80086f6:	60fb      	str	r3, [r7, #12]
 80086f8:	e002      	b.n	8008700 <prvInsertBlockIntoFreeList+0x14>
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	60fb      	str	r3, [r7, #12]
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	687a      	ldr	r2, [r7, #4]
 8008706:	429a      	cmp	r2, r3
 8008708:	d8f7      	bhi.n	80086fa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	685b      	ldr	r3, [r3, #4]
 8008712:	68ba      	ldr	r2, [r7, #8]
 8008714:	18d3      	adds	r3, r2, r3
 8008716:	687a      	ldr	r2, [r7, #4]
 8008718:	429a      	cmp	r2, r3
 800871a:	d108      	bne.n	800872e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	685a      	ldr	r2, [r3, #4]
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	685b      	ldr	r3, [r3, #4]
 8008724:	18d2      	adds	r2, r2, r3
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	685b      	ldr	r3, [r3, #4]
 8008736:	68ba      	ldr	r2, [r7, #8]
 8008738:	18d2      	adds	r2, r2, r3
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	429a      	cmp	r2, r3
 8008740:	d118      	bne.n	8008774 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681a      	ldr	r2, [r3, #0]
 8008746:	4b14      	ldr	r3, [pc, #80]	; (8008798 <prvInsertBlockIntoFreeList+0xac>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	429a      	cmp	r2, r3
 800874c:	d00d      	beq.n	800876a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	685a      	ldr	r2, [r3, #4]
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	685b      	ldr	r3, [r3, #4]
 8008758:	18d2      	adds	r2, r2, r3
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	681a      	ldr	r2, [r3, #0]
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	601a      	str	r2, [r3, #0]
 8008768:	e008      	b.n	800877c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800876a:	4b0b      	ldr	r3, [pc, #44]	; (8008798 <prvInsertBlockIntoFreeList+0xac>)
 800876c:	681a      	ldr	r2, [r3, #0]
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	601a      	str	r2, [r3, #0]
 8008772:	e003      	b.n	800877c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	681a      	ldr	r2, [r3, #0]
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800877c:	68fa      	ldr	r2, [r7, #12]
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	429a      	cmp	r2, r3
 8008782:	d002      	beq.n	800878a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	687a      	ldr	r2, [r7, #4]
 8008788:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800878a:	46c0      	nop			; (mov r8, r8)
 800878c:	46bd      	mov	sp, r7
 800878e:	b004      	add	sp, #16
 8008790:	bd80      	pop	{r7, pc}
 8008792:	46c0      	nop			; (mov r8, r8)
 8008794:	200019b8 	.word	0x200019b8
 8008798:	200019c0 	.word	0x200019c0

0800879c <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 800879c:	b580      	push	{r7, lr}
 800879e:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80087a0:	46c0      	nop			; (mov r8, r8)
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}
	...

080087a8 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b086      	sub	sp, #24
 80087ac:	af04      	add	r7, sp, #16
 80087ae:	0002      	movs	r2, r0
 80087b0:	1dfb      	adds	r3, r7, #7
 80087b2:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80087b4:	4808      	ldr	r0, [pc, #32]	; (80087d8 <ssd1306_WriteCommand+0x30>)
 80087b6:	2301      	movs	r3, #1
 80087b8:	425b      	negs	r3, r3
 80087ba:	9302      	str	r3, [sp, #8]
 80087bc:	2301      	movs	r3, #1
 80087be:	9301      	str	r3, [sp, #4]
 80087c0:	1dfb      	adds	r3, r7, #7
 80087c2:	9300      	str	r3, [sp, #0]
 80087c4:	2301      	movs	r3, #1
 80087c6:	2200      	movs	r2, #0
 80087c8:	2178      	movs	r1, #120	; 0x78
 80087ca:	f7fb f95b 	bl	8003a84 <HAL_I2C_Mem_Write>
}
 80087ce:	46c0      	nop			; (mov r8, r8)
 80087d0:	46bd      	mov	sp, r7
 80087d2:	b002      	add	sp, #8
 80087d4:	bd80      	pop	{r7, pc}
 80087d6:	46c0      	nop			; (mov r8, r8)
 80087d8:	20001e1c 	.word	0x20001e1c

080087dc <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80087dc:	b580      	push	{r7, lr}
 80087de:	b086      	sub	sp, #24
 80087e0:	af04      	add	r7, sp, #16
 80087e2:	6078      	str	r0, [r7, #4]
 80087e4:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	b29b      	uxth	r3, r3
 80087ea:	4808      	ldr	r0, [pc, #32]	; (800880c <ssd1306_WriteData+0x30>)
 80087ec:	2201      	movs	r2, #1
 80087ee:	4252      	negs	r2, r2
 80087f0:	9202      	str	r2, [sp, #8]
 80087f2:	9301      	str	r3, [sp, #4]
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	9300      	str	r3, [sp, #0]
 80087f8:	2301      	movs	r3, #1
 80087fa:	2240      	movs	r2, #64	; 0x40
 80087fc:	2178      	movs	r1, #120	; 0x78
 80087fe:	f7fb f941 	bl	8003a84 <HAL_I2C_Mem_Write>
}
 8008802:	46c0      	nop			; (mov r8, r8)
 8008804:	46bd      	mov	sp, r7
 8008806:	b002      	add	sp, #8
 8008808:	bd80      	pop	{r7, pc}
 800880a:	46c0      	nop			; (mov r8, r8)
 800880c:	20001e1c 	.word	0x20001e1c

08008810 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8008810:	b580      	push	{r7, lr}
 8008812:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8008814:	f7ff ffc2 	bl	800879c <ssd1306_Reset>

    // Wait for the screen to boot
    //HAL_Delay(100);

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8008818:	2000      	movs	r0, #0
 800881a:	f000 fa0f 	bl	8008c3c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 800881e:	2020      	movs	r0, #32
 8008820:	f7ff ffc2 	bl	80087a8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8008824:	2000      	movs	r0, #0
 8008826:	f7ff ffbf 	bl	80087a8 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800882a:	20b0      	movs	r0, #176	; 0xb0
 800882c:	f7ff ffbc 	bl	80087a8 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8008830:	20c8      	movs	r0, #200	; 0xc8
 8008832:	f7ff ffb9 	bl	80087a8 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8008836:	2000      	movs	r0, #0
 8008838:	f7ff ffb6 	bl	80087a8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800883c:	2010      	movs	r0, #16
 800883e:	f7ff ffb3 	bl	80087a8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDC);
 8008842:	20dc      	movs	r0, #220	; 0xdc
 8008844:	f7ff ffb0 	bl	80087a8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //--set start line address - CHECK
 8008848:	2000      	movs	r0, #0
 800884a:	f7ff ffad 	bl	80087a8 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800884e:	20ff      	movs	r0, #255	; 0xff
 8008850:	f000 f9dc 	bl	8008c0c <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8008854:	20a1      	movs	r0, #161	; 0xa1
 8008856:	f7ff ffa7 	bl	80087a8 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800885a:	20a6      	movs	r0, #166	; 0xa6
 800885c:	f7ff ffa4 	bl	80087a8 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8008860:	20a8      	movs	r0, #168	; 0xa8
 8008862:	f7ff ffa1 	bl	80087a8 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8008866:	203f      	movs	r0, #63	; 0x3f
 8008868:	f7ff ff9e 	bl	80087a8 <ssd1306_WriteCommand>
#else
    ssd1306_WriteCommand(0x3F);
//#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800886c:	20a4      	movs	r0, #164	; 0xa4
 800886e:	f7ff ff9b 	bl	80087a8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8008872:	20d3      	movs	r0, #211	; 0xd3
 8008874:	f7ff ff98 	bl	80087a8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //-not offset
 8008878:	2022      	movs	r0, #34	; 0x22
 800887a:	f7ff ff95 	bl	80087a8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800887e:	20d5      	movs	r0, #213	; 0xd5
 8008880:	f7ff ff92 	bl	80087a8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8008884:	20f0      	movs	r0, #240	; 0xf0
 8008886:	f7ff ff8f 	bl	80087a8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800888a:	20d9      	movs	r0, #217	; 0xd9
 800888c:	f7ff ff8c 	bl	80087a8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8008890:	2022      	movs	r0, #34	; 0x22
 8008892:	f7ff ff89 	bl	80087a8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8008896:	20da      	movs	r0, #218	; 0xda
 8008898:	f7ff ff86 	bl	80087a8 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 800889c:	2012      	movs	r0, #18
 800889e:	f7ff ff83 	bl	80087a8 <ssd1306_WriteCommand>
#else
    ssd1306_WriteCommand(0x12);
//#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80088a2:	20db      	movs	r0, #219	; 0xdb
 80088a4:	f7ff ff80 	bl	80087a8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80088a8:	2020      	movs	r0, #32
 80088aa:	f7ff ff7d 	bl	80087a8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80088ae:	208d      	movs	r0, #141	; 0x8d
 80088b0:	f7ff ff7a 	bl	80087a8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80088b4:	2014      	movs	r0, #20
 80088b6:	f7ff ff77 	bl	80087a8 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80088ba:	2001      	movs	r0, #1
 80088bc:	f000 f9be 	bl	8008c3c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80088c0:	2000      	movs	r0, #0
 80088c2:	f000 f811 	bl	80088e8 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80088c6:	f000 f833 	bl	8008930 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80088ca:	4b06      	ldr	r3, [pc, #24]	; (80088e4 <ssd1306_Init+0xd4>)
 80088cc:	2200      	movs	r2, #0
 80088ce:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80088d0:	4b04      	ldr	r3, [pc, #16]	; (80088e4 <ssd1306_Init+0xd4>)
 80088d2:	2200      	movs	r2, #0
 80088d4:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80088d6:	4b03      	ldr	r3, [pc, #12]	; (80088e4 <ssd1306_Init+0xd4>)
 80088d8:	2201      	movs	r2, #1
 80088da:	711a      	strb	r2, [r3, #4]
}
 80088dc:	46c0      	nop			; (mov r8, r8)
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}
 80088e2:	46c0      	nop			; (mov r8, r8)
 80088e4:	20001dd0 	.word	0x20001dd0

080088e8 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b084      	sub	sp, #16
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	0002      	movs	r2, r0
 80088f0:	1dfb      	adds	r3, r7, #7
 80088f2:	701a      	strb	r2, [r3, #0]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80088f4:	2300      	movs	r3, #0
 80088f6:	60fb      	str	r3, [r7, #12]
 80088f8:	e00e      	b.n	8008918 <ssd1306_Fill+0x30>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80088fa:	1dfb      	adds	r3, r7, #7
 80088fc:	781b      	ldrb	r3, [r3, #0]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d101      	bne.n	8008906 <ssd1306_Fill+0x1e>
 8008902:	2100      	movs	r1, #0
 8008904:	e000      	b.n	8008908 <ssd1306_Fill+0x20>
 8008906:	21ff      	movs	r1, #255	; 0xff
 8008908:	4a08      	ldr	r2, [pc, #32]	; (800892c <ssd1306_Fill+0x44>)
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	18d3      	adds	r3, r2, r3
 800890e:	1c0a      	adds	r2, r1, #0
 8008910:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	3301      	adds	r3, #1
 8008916:	60fb      	str	r3, [r7, #12]
 8008918:	68fa      	ldr	r2, [r7, #12]
 800891a:	2380      	movs	r3, #128	; 0x80
 800891c:	00db      	lsls	r3, r3, #3
 800891e:	429a      	cmp	r2, r3
 8008920:	d3eb      	bcc.n	80088fa <ssd1306_Fill+0x12>
    }
}
 8008922:	46c0      	nop			; (mov r8, r8)
 8008924:	46c0      	nop			; (mov r8, r8)
 8008926:	46bd      	mov	sp, r7
 8008928:	b004      	add	sp, #16
 800892a:	bd80      	pop	{r7, pc}
 800892c:	200019d0 	.word	0x200019d0

08008930 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8008930:	b580      	push	{r7, lr}
 8008932:	b082      	sub	sp, #8
 8008934:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8008936:	1dfb      	adds	r3, r7, #7
 8008938:	2200      	movs	r2, #0
 800893a:	701a      	strb	r2, [r3, #0]
 800893c:	e01a      	b.n	8008974 <ssd1306_UpdateScreen+0x44>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 800893e:	1dfb      	adds	r3, r7, #7
 8008940:	781b      	ldrb	r3, [r3, #0]
 8008942:	3b50      	subs	r3, #80	; 0x50
 8008944:	b2db      	uxtb	r3, r3
 8008946:	0018      	movs	r0, r3
 8008948:	f7ff ff2e 	bl	80087a8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 800894c:	2000      	movs	r0, #0
 800894e:	f7ff ff2b 	bl	80087a8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8008952:	2010      	movs	r0, #16
 8008954:	f7ff ff28 	bl	80087a8 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8008958:	1dfb      	adds	r3, r7, #7
 800895a:	781b      	ldrb	r3, [r3, #0]
 800895c:	01da      	lsls	r2, r3, #7
 800895e:	4b0a      	ldr	r3, [pc, #40]	; (8008988 <ssd1306_UpdateScreen+0x58>)
 8008960:	18d3      	adds	r3, r2, r3
 8008962:	2180      	movs	r1, #128	; 0x80
 8008964:	0018      	movs	r0, r3
 8008966:	f7ff ff39 	bl	80087dc <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800896a:	1dfb      	adds	r3, r7, #7
 800896c:	781a      	ldrb	r2, [r3, #0]
 800896e:	1dfb      	adds	r3, r7, #7
 8008970:	3201      	adds	r2, #1
 8008972:	701a      	strb	r2, [r3, #0]
 8008974:	1dfb      	adds	r3, r7, #7
 8008976:	781b      	ldrb	r3, [r3, #0]
 8008978:	2b07      	cmp	r3, #7
 800897a:	d9e0      	bls.n	800893e <ssd1306_UpdateScreen+0xe>
    }
}
 800897c:	46c0      	nop			; (mov r8, r8)
 800897e:	46c0      	nop			; (mov r8, r8)
 8008980:	46bd      	mov	sp, r7
 8008982:	b002      	add	sp, #8
 8008984:	bd80      	pop	{r7, pc}
 8008986:	46c0      	nop			; (mov r8, r8)
 8008988:	200019d0 	.word	0x200019d0

0800898c <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 800898c:	b590      	push	{r4, r7, lr}
 800898e:	b083      	sub	sp, #12
 8008990:	af00      	add	r7, sp, #0
 8008992:	0004      	movs	r4, r0
 8008994:	0008      	movs	r0, r1
 8008996:	0011      	movs	r1, r2
 8008998:	1dfb      	adds	r3, r7, #7
 800899a:	1c22      	adds	r2, r4, #0
 800899c:	701a      	strb	r2, [r3, #0]
 800899e:	1dbb      	adds	r3, r7, #6
 80089a0:	1c02      	adds	r2, r0, #0
 80089a2:	701a      	strb	r2, [r3, #0]
 80089a4:	1d7b      	adds	r3, r7, #5
 80089a6:	1c0a      	adds	r2, r1, #0
 80089a8:	701a      	strb	r2, [r3, #0]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80089aa:	1dfb      	adds	r3, r7, #7
 80089ac:	781b      	ldrb	r3, [r3, #0]
 80089ae:	b25b      	sxtb	r3, r3
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	db47      	blt.n	8008a44 <ssd1306_DrawPixel+0xb8>
 80089b4:	1dbb      	adds	r3, r7, #6
 80089b6:	781b      	ldrb	r3, [r3, #0]
 80089b8:	2b3f      	cmp	r3, #63	; 0x3f
 80089ba:	d843      	bhi.n	8008a44 <ssd1306_DrawPixel+0xb8>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80089bc:	1d7b      	adds	r3, r7, #5
 80089be:	781b      	ldrb	r3, [r3, #0]
 80089c0:	2b01      	cmp	r3, #1
 80089c2:	d11e      	bne.n	8008a02 <ssd1306_DrawPixel+0x76>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80089c4:	1dfb      	adds	r3, r7, #7
 80089c6:	781a      	ldrb	r2, [r3, #0]
 80089c8:	1dbb      	adds	r3, r7, #6
 80089ca:	781b      	ldrb	r3, [r3, #0]
 80089cc:	08db      	lsrs	r3, r3, #3
 80089ce:	b2d8      	uxtb	r0, r3
 80089d0:	0003      	movs	r3, r0
 80089d2:	01db      	lsls	r3, r3, #7
 80089d4:	18d3      	adds	r3, r2, r3
 80089d6:	4a1d      	ldr	r2, [pc, #116]	; (8008a4c <ssd1306_DrawPixel+0xc0>)
 80089d8:	5cd3      	ldrb	r3, [r2, r3]
 80089da:	b25a      	sxtb	r2, r3
 80089dc:	1dbb      	adds	r3, r7, #6
 80089de:	781b      	ldrb	r3, [r3, #0]
 80089e0:	2107      	movs	r1, #7
 80089e2:	400b      	ands	r3, r1
 80089e4:	2101      	movs	r1, #1
 80089e6:	4099      	lsls	r1, r3
 80089e8:	000b      	movs	r3, r1
 80089ea:	b25b      	sxtb	r3, r3
 80089ec:	4313      	orrs	r3, r2
 80089ee:	b259      	sxtb	r1, r3
 80089f0:	1dfb      	adds	r3, r7, #7
 80089f2:	781a      	ldrb	r2, [r3, #0]
 80089f4:	0003      	movs	r3, r0
 80089f6:	01db      	lsls	r3, r3, #7
 80089f8:	18d3      	adds	r3, r2, r3
 80089fa:	b2c9      	uxtb	r1, r1
 80089fc:	4a13      	ldr	r2, [pc, #76]	; (8008a4c <ssd1306_DrawPixel+0xc0>)
 80089fe:	54d1      	strb	r1, [r2, r3]
 8008a00:	e021      	b.n	8008a46 <ssd1306_DrawPixel+0xba>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8008a02:	1dfb      	adds	r3, r7, #7
 8008a04:	781a      	ldrb	r2, [r3, #0]
 8008a06:	1dbb      	adds	r3, r7, #6
 8008a08:	781b      	ldrb	r3, [r3, #0]
 8008a0a:	08db      	lsrs	r3, r3, #3
 8008a0c:	b2d8      	uxtb	r0, r3
 8008a0e:	0003      	movs	r3, r0
 8008a10:	01db      	lsls	r3, r3, #7
 8008a12:	18d3      	adds	r3, r2, r3
 8008a14:	4a0d      	ldr	r2, [pc, #52]	; (8008a4c <ssd1306_DrawPixel+0xc0>)
 8008a16:	5cd3      	ldrb	r3, [r2, r3]
 8008a18:	b25b      	sxtb	r3, r3
 8008a1a:	1dba      	adds	r2, r7, #6
 8008a1c:	7812      	ldrb	r2, [r2, #0]
 8008a1e:	2107      	movs	r1, #7
 8008a20:	400a      	ands	r2, r1
 8008a22:	2101      	movs	r1, #1
 8008a24:	4091      	lsls	r1, r2
 8008a26:	000a      	movs	r2, r1
 8008a28:	b252      	sxtb	r2, r2
 8008a2a:	43d2      	mvns	r2, r2
 8008a2c:	b252      	sxtb	r2, r2
 8008a2e:	4013      	ands	r3, r2
 8008a30:	b259      	sxtb	r1, r3
 8008a32:	1dfb      	adds	r3, r7, #7
 8008a34:	781a      	ldrb	r2, [r3, #0]
 8008a36:	0003      	movs	r3, r0
 8008a38:	01db      	lsls	r3, r3, #7
 8008a3a:	18d3      	adds	r3, r2, r3
 8008a3c:	b2c9      	uxtb	r1, r1
 8008a3e:	4a03      	ldr	r2, [pc, #12]	; (8008a4c <ssd1306_DrawPixel+0xc0>)
 8008a40:	54d1      	strb	r1, [r2, r3]
 8008a42:	e000      	b.n	8008a46 <ssd1306_DrawPixel+0xba>
        return;
 8008a44:	46c0      	nop			; (mov r8, r8)
    }
}
 8008a46:	46bd      	mov	sp, r7
 8008a48:	b003      	add	sp, #12
 8008a4a:	bd90      	pop	{r4, r7, pc}
 8008a4c:	200019d0 	.word	0x200019d0

08008a50 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8008a50:	b590      	push	{r4, r7, lr}
 8008a52:	b089      	sub	sp, #36	; 0x24
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	0004      	movs	r4, r0
 8008a58:	1d38      	adds	r0, r7, #4
 8008a5a:	6001      	str	r1, [r0, #0]
 8008a5c:	6042      	str	r2, [r0, #4]
 8008a5e:	0019      	movs	r1, r3
 8008a60:	200f      	movs	r0, #15
 8008a62:	183b      	adds	r3, r7, r0
 8008a64:	1c22      	adds	r2, r4, #0
 8008a66:	701a      	strb	r2, [r3, #0]
 8008a68:	230e      	movs	r3, #14
 8008a6a:	18fb      	adds	r3, r7, r3
 8008a6c:	1c0a      	adds	r2, r1, #0
 8008a6e:	701a      	strb	r2, [r3, #0]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8008a70:	183b      	adds	r3, r7, r0
 8008a72:	781b      	ldrb	r3, [r3, #0]
 8008a74:	2b1f      	cmp	r3, #31
 8008a76:	d903      	bls.n	8008a80 <ssd1306_WriteChar+0x30>
 8008a78:	183b      	adds	r3, r7, r0
 8008a7a:	781b      	ldrb	r3, [r3, #0]
 8008a7c:	2b7e      	cmp	r3, #126	; 0x7e
 8008a7e:	d901      	bls.n	8008a84 <ssd1306_WriteChar+0x34>
        return 0;
 8008a80:	2300      	movs	r3, #0
 8008a82:	e078      	b.n	8008b76 <ssd1306_WriteChar+0x126>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8008a84:	4b3e      	ldr	r3, [pc, #248]	; (8008b80 <ssd1306_WriteChar+0x130>)
 8008a86:	881b      	ldrh	r3, [r3, #0]
 8008a88:	001a      	movs	r2, r3
 8008a8a:	1d3b      	adds	r3, r7, #4
 8008a8c:	781b      	ldrb	r3, [r3, #0]
 8008a8e:	18d3      	adds	r3, r2, r3
 8008a90:	2b80      	cmp	r3, #128	; 0x80
 8008a92:	dc07      	bgt.n	8008aa4 <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8008a94:	4b3a      	ldr	r3, [pc, #232]	; (8008b80 <ssd1306_WriteChar+0x130>)
 8008a96:	885b      	ldrh	r3, [r3, #2]
 8008a98:	001a      	movs	r2, r3
 8008a9a:	1d3b      	adds	r3, r7, #4
 8008a9c:	785b      	ldrb	r3, [r3, #1]
 8008a9e:	18d3      	adds	r3, r2, r3
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8008aa0:	2b40      	cmp	r3, #64	; 0x40
 8008aa2:	dd01      	ble.n	8008aa8 <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	e066      	b.n	8008b76 <ssd1306_WriteChar+0x126>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	61fb      	str	r3, [r7, #28]
 8008aac:	e051      	b.n	8008b52 <ssd1306_WriteChar+0x102>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8008aae:	1d3b      	adds	r3, r7, #4
 8008ab0:	685a      	ldr	r2, [r3, #4]
 8008ab2:	230f      	movs	r3, #15
 8008ab4:	18fb      	adds	r3, r7, r3
 8008ab6:	781b      	ldrb	r3, [r3, #0]
 8008ab8:	3b20      	subs	r3, #32
 8008aba:	1d39      	adds	r1, r7, #4
 8008abc:	7849      	ldrb	r1, [r1, #1]
 8008abe:	434b      	muls	r3, r1
 8008ac0:	0019      	movs	r1, r3
 8008ac2:	69fb      	ldr	r3, [r7, #28]
 8008ac4:	18cb      	adds	r3, r1, r3
 8008ac6:	005b      	lsls	r3, r3, #1
 8008ac8:	18d3      	adds	r3, r2, r3
 8008aca:	881b      	ldrh	r3, [r3, #0]
 8008acc:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8008ace:	2300      	movs	r3, #0
 8008ad0:	61bb      	str	r3, [r7, #24]
 8008ad2:	e035      	b.n	8008b40 <ssd1306_WriteChar+0xf0>
            if((b << j) & 0x8000)  {
 8008ad4:	697a      	ldr	r2, [r7, #20]
 8008ad6:	69bb      	ldr	r3, [r7, #24]
 8008ad8:	409a      	lsls	r2, r3
 8008ada:	2380      	movs	r3, #128	; 0x80
 8008adc:	021b      	lsls	r3, r3, #8
 8008ade:	4013      	ands	r3, r2
 8008ae0:	d014      	beq.n	8008b0c <ssd1306_WriteChar+0xbc>
            	//ssd1306_DrawPixel((SSD1306_HEIGHT-SSD1306.CurrentY) + i, ((SSD1306_WIDTH-SSD1306.CurrentX) + (Font.FontWidth-j)), (SSD1306_COLOR) color); //Final
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8008ae2:	4b27      	ldr	r3, [pc, #156]	; (8008b80 <ssd1306_WriteChar+0x130>)
 8008ae4:	881b      	ldrh	r3, [r3, #0]
 8008ae6:	b2da      	uxtb	r2, r3
 8008ae8:	69bb      	ldr	r3, [r7, #24]
 8008aea:	b2db      	uxtb	r3, r3
 8008aec:	18d3      	adds	r3, r2, r3
 8008aee:	b2d8      	uxtb	r0, r3
 8008af0:	4b23      	ldr	r3, [pc, #140]	; (8008b80 <ssd1306_WriteChar+0x130>)
 8008af2:	885b      	ldrh	r3, [r3, #2]
 8008af4:	b2da      	uxtb	r2, r3
 8008af6:	69fb      	ldr	r3, [r7, #28]
 8008af8:	b2db      	uxtb	r3, r3
 8008afa:	18d3      	adds	r3, r2, r3
 8008afc:	b2d9      	uxtb	r1, r3
 8008afe:	230e      	movs	r3, #14
 8008b00:	18fb      	adds	r3, r7, r3
 8008b02:	781b      	ldrb	r3, [r3, #0]
 8008b04:	001a      	movs	r2, r3
 8008b06:	f7ff ff41 	bl	800898c <ssd1306_DrawPixel>
 8008b0a:	e016      	b.n	8008b3a <ssd1306_WriteChar+0xea>
            } else {
            	//ssd1306_DrawPixel((SSD1306_HEIGHT-SSD1306.CurrentY) + i, ((SSD1306_WIDTH-SSD1306.CurrentX) + (Font.FontWidth-j)), (SSD1306_COLOR)!color); //Final
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8008b0c:	4b1c      	ldr	r3, [pc, #112]	; (8008b80 <ssd1306_WriteChar+0x130>)
 8008b0e:	881b      	ldrh	r3, [r3, #0]
 8008b10:	b2da      	uxtb	r2, r3
 8008b12:	69bb      	ldr	r3, [r7, #24]
 8008b14:	b2db      	uxtb	r3, r3
 8008b16:	18d3      	adds	r3, r2, r3
 8008b18:	b2d8      	uxtb	r0, r3
 8008b1a:	4b19      	ldr	r3, [pc, #100]	; (8008b80 <ssd1306_WriteChar+0x130>)
 8008b1c:	885b      	ldrh	r3, [r3, #2]
 8008b1e:	b2da      	uxtb	r2, r3
 8008b20:	69fb      	ldr	r3, [r7, #28]
 8008b22:	b2db      	uxtb	r3, r3
 8008b24:	18d3      	adds	r3, r2, r3
 8008b26:	b2d9      	uxtb	r1, r3
 8008b28:	230e      	movs	r3, #14
 8008b2a:	18fb      	adds	r3, r7, r3
 8008b2c:	781b      	ldrb	r3, [r3, #0]
 8008b2e:	425a      	negs	r2, r3
 8008b30:	4153      	adcs	r3, r2
 8008b32:	b2db      	uxtb	r3, r3
 8008b34:	001a      	movs	r2, r3
 8008b36:	f7ff ff29 	bl	800898c <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8008b3a:	69bb      	ldr	r3, [r7, #24]
 8008b3c:	3301      	adds	r3, #1
 8008b3e:	61bb      	str	r3, [r7, #24]
 8008b40:	1d3b      	adds	r3, r7, #4
 8008b42:	781b      	ldrb	r3, [r3, #0]
 8008b44:	001a      	movs	r2, r3
 8008b46:	69bb      	ldr	r3, [r7, #24]
 8008b48:	4293      	cmp	r3, r2
 8008b4a:	d3c3      	bcc.n	8008ad4 <ssd1306_WriteChar+0x84>
    for(i = 0; i < Font.FontHeight; i++) {
 8008b4c:	69fb      	ldr	r3, [r7, #28]
 8008b4e:	3301      	adds	r3, #1
 8008b50:	61fb      	str	r3, [r7, #28]
 8008b52:	1d3b      	adds	r3, r7, #4
 8008b54:	785b      	ldrb	r3, [r3, #1]
 8008b56:	001a      	movs	r2, r3
 8008b58:	69fb      	ldr	r3, [r7, #28]
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	d3a7      	bcc.n	8008aae <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8008b5e:	4b08      	ldr	r3, [pc, #32]	; (8008b80 <ssd1306_WriteChar+0x130>)
 8008b60:	881a      	ldrh	r2, [r3, #0]
 8008b62:	1d3b      	adds	r3, r7, #4
 8008b64:	781b      	ldrb	r3, [r3, #0]
 8008b66:	b29b      	uxth	r3, r3
 8008b68:	18d3      	adds	r3, r2, r3
 8008b6a:	b29a      	uxth	r2, r3
 8008b6c:	4b04      	ldr	r3, [pc, #16]	; (8008b80 <ssd1306_WriteChar+0x130>)
 8008b6e:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8008b70:	230f      	movs	r3, #15
 8008b72:	18fb      	adds	r3, r7, r3
 8008b74:	781b      	ldrb	r3, [r3, #0]
}
 8008b76:	0018      	movs	r0, r3
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	b009      	add	sp, #36	; 0x24
 8008b7c:	bd90      	pop	{r4, r7, pc}
 8008b7e:	46c0      	nop			; (mov r8, r8)
 8008b80:	20001dd0 	.word	0x20001dd0

08008b84 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b084      	sub	sp, #16
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	60f8      	str	r0, [r7, #12]
 8008b8c:	1d38      	adds	r0, r7, #4
 8008b8e:	6001      	str	r1, [r0, #0]
 8008b90:	6042      	str	r2, [r0, #4]
 8008b92:	001a      	movs	r2, r3
 8008b94:	1cfb      	adds	r3, r7, #3
 8008b96:	701a      	strb	r2, [r3, #0]
    // Write until null-byte
    while (*str) {
 8008b98:	e014      	b.n	8008bc4 <ssd1306_WriteString+0x40>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	7818      	ldrb	r0, [r3, #0]
 8008b9e:	1cfb      	adds	r3, r7, #3
 8008ba0:	781b      	ldrb	r3, [r3, #0]
 8008ba2:	1d3a      	adds	r2, r7, #4
 8008ba4:	6811      	ldr	r1, [r2, #0]
 8008ba6:	6852      	ldr	r2, [r2, #4]
 8008ba8:	f7ff ff52 	bl	8008a50 <ssd1306_WriteChar>
 8008bac:	0003      	movs	r3, r0
 8008bae:	001a      	movs	r2, r3
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	781b      	ldrb	r3, [r3, #0]
 8008bb4:	429a      	cmp	r2, r3
 8008bb6:	d002      	beq.n	8008bbe <ssd1306_WriteString+0x3a>
            // Char could not be written
            return *str;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	781b      	ldrb	r3, [r3, #0]
 8008bbc:	e008      	b.n	8008bd0 <ssd1306_WriteString+0x4c>
        }
        
        // Next char
        str++;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	3301      	adds	r3, #1
 8008bc2:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	781b      	ldrb	r3, [r3, #0]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d1e6      	bne.n	8008b9a <ssd1306_WriteString+0x16>
    }
    
    // Everything ok
    return *str;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	781b      	ldrb	r3, [r3, #0]
}
 8008bd0:	0018      	movs	r0, r3
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	b004      	add	sp, #16
 8008bd6:	bd80      	pop	{r7, pc}

08008bd8 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b082      	sub	sp, #8
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	0002      	movs	r2, r0
 8008be0:	1dfb      	adds	r3, r7, #7
 8008be2:	701a      	strb	r2, [r3, #0]
 8008be4:	1dbb      	adds	r3, r7, #6
 8008be6:	1c0a      	adds	r2, r1, #0
 8008be8:	701a      	strb	r2, [r3, #0]
    SSD1306.CurrentX = x;
 8008bea:	1dfb      	adds	r3, r7, #7
 8008bec:	781b      	ldrb	r3, [r3, #0]
 8008bee:	b29a      	uxth	r2, r3
 8008bf0:	4b05      	ldr	r3, [pc, #20]	; (8008c08 <ssd1306_SetCursor+0x30>)
 8008bf2:	801a      	strh	r2, [r3, #0]
    //SSD1306.CurrentX = SSD1306_WIDTH-x;
    SSD1306.CurrentY = y;
 8008bf4:	1dbb      	adds	r3, r7, #6
 8008bf6:	781b      	ldrb	r3, [r3, #0]
 8008bf8:	b29a      	uxth	r2, r3
 8008bfa:	4b03      	ldr	r3, [pc, #12]	; (8008c08 <ssd1306_SetCursor+0x30>)
 8008bfc:	805a      	strh	r2, [r3, #2]
    //SSD1306.CurrentY = SSD1306_HEIGHT-y;
}
 8008bfe:	46c0      	nop			; (mov r8, r8)
 8008c00:	46bd      	mov	sp, r7
 8008c02:	b002      	add	sp, #8
 8008c04:	bd80      	pop	{r7, pc}
 8008c06:	46c0      	nop			; (mov r8, r8)
 8008c08:	20001dd0 	.word	0x20001dd0

08008c0c <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b084      	sub	sp, #16
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	0002      	movs	r2, r0
 8008c14:	1dfb      	adds	r3, r7, #7
 8008c16:	701a      	strb	r2, [r3, #0]
    const uint8_t kSetContrastControlRegister = 0x81;
 8008c18:	210f      	movs	r1, #15
 8008c1a:	187b      	adds	r3, r7, r1
 8008c1c:	2281      	movs	r2, #129	; 0x81
 8008c1e:	701a      	strb	r2, [r3, #0]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8008c20:	187b      	adds	r3, r7, r1
 8008c22:	781b      	ldrb	r3, [r3, #0]
 8008c24:	0018      	movs	r0, r3
 8008c26:	f7ff fdbf 	bl	80087a8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8008c2a:	1dfb      	adds	r3, r7, #7
 8008c2c:	781b      	ldrb	r3, [r3, #0]
 8008c2e:	0018      	movs	r0, r3
 8008c30:	f7ff fdba 	bl	80087a8 <ssd1306_WriteCommand>
}
 8008c34:	46c0      	nop			; (mov r8, r8)
 8008c36:	46bd      	mov	sp, r7
 8008c38:	b004      	add	sp, #16
 8008c3a:	bd80      	pop	{r7, pc}

08008c3c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b084      	sub	sp, #16
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	0002      	movs	r2, r0
 8008c44:	1dfb      	adds	r3, r7, #7
 8008c46:	701a      	strb	r2, [r3, #0]
    uint8_t value;
    if (on) {
 8008c48:	1dfb      	adds	r3, r7, #7
 8008c4a:	781b      	ldrb	r3, [r3, #0]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d007      	beq.n	8008c60 <ssd1306_SetDisplayOn+0x24>
        value = 0xAF;   // Display on
 8008c50:	230f      	movs	r3, #15
 8008c52:	18fb      	adds	r3, r7, r3
 8008c54:	22af      	movs	r2, #175	; 0xaf
 8008c56:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 1;
 8008c58:	4b0a      	ldr	r3, [pc, #40]	; (8008c84 <ssd1306_SetDisplayOn+0x48>)
 8008c5a:	2201      	movs	r2, #1
 8008c5c:	715a      	strb	r2, [r3, #5]
 8008c5e:	e006      	b.n	8008c6e <ssd1306_SetDisplayOn+0x32>
    } else {
        value = 0xAE;   // Display off
 8008c60:	230f      	movs	r3, #15
 8008c62:	18fb      	adds	r3, r7, r3
 8008c64:	22ae      	movs	r2, #174	; 0xae
 8008c66:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 0;
 8008c68:	4b06      	ldr	r3, [pc, #24]	; (8008c84 <ssd1306_SetDisplayOn+0x48>)
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8008c6e:	230f      	movs	r3, #15
 8008c70:	18fb      	adds	r3, r7, r3
 8008c72:	781b      	ldrb	r3, [r3, #0]
 8008c74:	0018      	movs	r0, r3
 8008c76:	f7ff fd97 	bl	80087a8 <ssd1306_WriteCommand>
}
 8008c7a:	46c0      	nop			; (mov r8, r8)
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	b004      	add	sp, #16
 8008c80:	bd80      	pop	{r7, pc}
 8008c82:	46c0      	nop			; (mov r8, r8)
 8008c84:	20001dd0 	.word	0x20001dd0

08008c88 <__errno>:
 8008c88:	4b01      	ldr	r3, [pc, #4]	; (8008c90 <__errno+0x8>)
 8008c8a:	6818      	ldr	r0, [r3, #0]
 8008c8c:	4770      	bx	lr
 8008c8e:	46c0      	nop			; (mov r8, r8)
 8008c90:	2000001c 	.word	0x2000001c

08008c94 <__libc_init_array>:
 8008c94:	b570      	push	{r4, r5, r6, lr}
 8008c96:	2600      	movs	r6, #0
 8008c98:	4d0c      	ldr	r5, [pc, #48]	; (8008ccc <__libc_init_array+0x38>)
 8008c9a:	4c0d      	ldr	r4, [pc, #52]	; (8008cd0 <__libc_init_array+0x3c>)
 8008c9c:	1b64      	subs	r4, r4, r5
 8008c9e:	10a4      	asrs	r4, r4, #2
 8008ca0:	42a6      	cmp	r6, r4
 8008ca2:	d109      	bne.n	8008cb8 <__libc_init_array+0x24>
 8008ca4:	2600      	movs	r6, #0
 8008ca6:	f000 fc93 	bl	80095d0 <_init>
 8008caa:	4d0a      	ldr	r5, [pc, #40]	; (8008cd4 <__libc_init_array+0x40>)
 8008cac:	4c0a      	ldr	r4, [pc, #40]	; (8008cd8 <__libc_init_array+0x44>)
 8008cae:	1b64      	subs	r4, r4, r5
 8008cb0:	10a4      	asrs	r4, r4, #2
 8008cb2:	42a6      	cmp	r6, r4
 8008cb4:	d105      	bne.n	8008cc2 <__libc_init_array+0x2e>
 8008cb6:	bd70      	pop	{r4, r5, r6, pc}
 8008cb8:	00b3      	lsls	r3, r6, #2
 8008cba:	58eb      	ldr	r3, [r5, r3]
 8008cbc:	4798      	blx	r3
 8008cbe:	3601      	adds	r6, #1
 8008cc0:	e7ee      	b.n	8008ca0 <__libc_init_array+0xc>
 8008cc2:	00b3      	lsls	r3, r6, #2
 8008cc4:	58eb      	ldr	r3, [r5, r3]
 8008cc6:	4798      	blx	r3
 8008cc8:	3601      	adds	r6, #1
 8008cca:	e7f2      	b.n	8008cb2 <__libc_init_array+0x1e>
 8008ccc:	08009df4 	.word	0x08009df4
 8008cd0:	08009df4 	.word	0x08009df4
 8008cd4:	08009df4 	.word	0x08009df4
 8008cd8:	08009df8 	.word	0x08009df8

08008cdc <memcpy>:
 8008cdc:	2300      	movs	r3, #0
 8008cde:	b510      	push	{r4, lr}
 8008ce0:	429a      	cmp	r2, r3
 8008ce2:	d100      	bne.n	8008ce6 <memcpy+0xa>
 8008ce4:	bd10      	pop	{r4, pc}
 8008ce6:	5ccc      	ldrb	r4, [r1, r3]
 8008ce8:	54c4      	strb	r4, [r0, r3]
 8008cea:	3301      	adds	r3, #1
 8008cec:	e7f8      	b.n	8008ce0 <memcpy+0x4>

08008cee <memmove>:
 8008cee:	b510      	push	{r4, lr}
 8008cf0:	4288      	cmp	r0, r1
 8008cf2:	d902      	bls.n	8008cfa <memmove+0xc>
 8008cf4:	188b      	adds	r3, r1, r2
 8008cf6:	4298      	cmp	r0, r3
 8008cf8:	d303      	bcc.n	8008d02 <memmove+0x14>
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	e007      	b.n	8008d0e <memmove+0x20>
 8008cfe:	5c8b      	ldrb	r3, [r1, r2]
 8008d00:	5483      	strb	r3, [r0, r2]
 8008d02:	3a01      	subs	r2, #1
 8008d04:	d2fb      	bcs.n	8008cfe <memmove+0x10>
 8008d06:	bd10      	pop	{r4, pc}
 8008d08:	5ccc      	ldrb	r4, [r1, r3]
 8008d0a:	54c4      	strb	r4, [r0, r3]
 8008d0c:	3301      	adds	r3, #1
 8008d0e:	429a      	cmp	r2, r3
 8008d10:	d1fa      	bne.n	8008d08 <memmove+0x1a>
 8008d12:	e7f8      	b.n	8008d06 <memmove+0x18>

08008d14 <memset>:
 8008d14:	0003      	movs	r3, r0
 8008d16:	1882      	adds	r2, r0, r2
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d100      	bne.n	8008d1e <memset+0xa>
 8008d1c:	4770      	bx	lr
 8008d1e:	7019      	strb	r1, [r3, #0]
 8008d20:	3301      	adds	r3, #1
 8008d22:	e7f9      	b.n	8008d18 <memset+0x4>

08008d24 <sniprintf>:
 8008d24:	b40c      	push	{r2, r3}
 8008d26:	b530      	push	{r4, r5, lr}
 8008d28:	4b17      	ldr	r3, [pc, #92]	; (8008d88 <sniprintf+0x64>)
 8008d2a:	000c      	movs	r4, r1
 8008d2c:	681d      	ldr	r5, [r3, #0]
 8008d2e:	b09d      	sub	sp, #116	; 0x74
 8008d30:	2900      	cmp	r1, #0
 8008d32:	da08      	bge.n	8008d46 <sniprintf+0x22>
 8008d34:	238b      	movs	r3, #139	; 0x8b
 8008d36:	2001      	movs	r0, #1
 8008d38:	602b      	str	r3, [r5, #0]
 8008d3a:	4240      	negs	r0, r0
 8008d3c:	b01d      	add	sp, #116	; 0x74
 8008d3e:	bc30      	pop	{r4, r5}
 8008d40:	bc08      	pop	{r3}
 8008d42:	b002      	add	sp, #8
 8008d44:	4718      	bx	r3
 8008d46:	2382      	movs	r3, #130	; 0x82
 8008d48:	466a      	mov	r2, sp
 8008d4a:	009b      	lsls	r3, r3, #2
 8008d4c:	8293      	strh	r3, [r2, #20]
 8008d4e:	2300      	movs	r3, #0
 8008d50:	9002      	str	r0, [sp, #8]
 8008d52:	9006      	str	r0, [sp, #24]
 8008d54:	4299      	cmp	r1, r3
 8008d56:	d000      	beq.n	8008d5a <sniprintf+0x36>
 8008d58:	1e4b      	subs	r3, r1, #1
 8008d5a:	9304      	str	r3, [sp, #16]
 8008d5c:	9307      	str	r3, [sp, #28]
 8008d5e:	2301      	movs	r3, #1
 8008d60:	466a      	mov	r2, sp
 8008d62:	425b      	negs	r3, r3
 8008d64:	82d3      	strh	r3, [r2, #22]
 8008d66:	0028      	movs	r0, r5
 8008d68:	ab21      	add	r3, sp, #132	; 0x84
 8008d6a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008d6c:	a902      	add	r1, sp, #8
 8008d6e:	9301      	str	r3, [sp, #4]
 8008d70:	f000 f8a6 	bl	8008ec0 <_svfiprintf_r>
 8008d74:	1c43      	adds	r3, r0, #1
 8008d76:	da01      	bge.n	8008d7c <sniprintf+0x58>
 8008d78:	238b      	movs	r3, #139	; 0x8b
 8008d7a:	602b      	str	r3, [r5, #0]
 8008d7c:	2c00      	cmp	r4, #0
 8008d7e:	d0dd      	beq.n	8008d3c <sniprintf+0x18>
 8008d80:	2300      	movs	r3, #0
 8008d82:	9a02      	ldr	r2, [sp, #8]
 8008d84:	7013      	strb	r3, [r2, #0]
 8008d86:	e7d9      	b.n	8008d3c <sniprintf+0x18>
 8008d88:	2000001c 	.word	0x2000001c

08008d8c <_vsniprintf_r>:
 8008d8c:	b530      	push	{r4, r5, lr}
 8008d8e:	0014      	movs	r4, r2
 8008d90:	0005      	movs	r5, r0
 8008d92:	001a      	movs	r2, r3
 8008d94:	b09b      	sub	sp, #108	; 0x6c
 8008d96:	2c00      	cmp	r4, #0
 8008d98:	da05      	bge.n	8008da6 <_vsniprintf_r+0x1a>
 8008d9a:	238b      	movs	r3, #139	; 0x8b
 8008d9c:	6003      	str	r3, [r0, #0]
 8008d9e:	2001      	movs	r0, #1
 8008da0:	4240      	negs	r0, r0
 8008da2:	b01b      	add	sp, #108	; 0x6c
 8008da4:	bd30      	pop	{r4, r5, pc}
 8008da6:	2382      	movs	r3, #130	; 0x82
 8008da8:	4668      	mov	r0, sp
 8008daa:	009b      	lsls	r3, r3, #2
 8008dac:	8183      	strh	r3, [r0, #12]
 8008dae:	2300      	movs	r3, #0
 8008db0:	9100      	str	r1, [sp, #0]
 8008db2:	9104      	str	r1, [sp, #16]
 8008db4:	429c      	cmp	r4, r3
 8008db6:	d000      	beq.n	8008dba <_vsniprintf_r+0x2e>
 8008db8:	1e63      	subs	r3, r4, #1
 8008dba:	9302      	str	r3, [sp, #8]
 8008dbc:	9305      	str	r3, [sp, #20]
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	4669      	mov	r1, sp
 8008dc2:	425b      	negs	r3, r3
 8008dc4:	81cb      	strh	r3, [r1, #14]
 8008dc6:	0028      	movs	r0, r5
 8008dc8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008dca:	f000 f879 	bl	8008ec0 <_svfiprintf_r>
 8008dce:	1c43      	adds	r3, r0, #1
 8008dd0:	da01      	bge.n	8008dd6 <_vsniprintf_r+0x4a>
 8008dd2:	238b      	movs	r3, #139	; 0x8b
 8008dd4:	602b      	str	r3, [r5, #0]
 8008dd6:	2c00      	cmp	r4, #0
 8008dd8:	d0e3      	beq.n	8008da2 <_vsniprintf_r+0x16>
 8008dda:	2300      	movs	r3, #0
 8008ddc:	9a00      	ldr	r2, [sp, #0]
 8008dde:	7013      	strb	r3, [r2, #0]
 8008de0:	e7df      	b.n	8008da2 <_vsniprintf_r+0x16>
	...

08008de4 <vsniprintf>:
 8008de4:	b507      	push	{r0, r1, r2, lr}
 8008de6:	9300      	str	r3, [sp, #0]
 8008de8:	0013      	movs	r3, r2
 8008dea:	000a      	movs	r2, r1
 8008dec:	0001      	movs	r1, r0
 8008dee:	4802      	ldr	r0, [pc, #8]	; (8008df8 <vsniprintf+0x14>)
 8008df0:	6800      	ldr	r0, [r0, #0]
 8008df2:	f7ff ffcb 	bl	8008d8c <_vsniprintf_r>
 8008df6:	bd0e      	pop	{r1, r2, r3, pc}
 8008df8:	2000001c 	.word	0x2000001c

08008dfc <__ssputs_r>:
 8008dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008dfe:	688e      	ldr	r6, [r1, #8]
 8008e00:	b085      	sub	sp, #20
 8008e02:	0007      	movs	r7, r0
 8008e04:	000c      	movs	r4, r1
 8008e06:	9203      	str	r2, [sp, #12]
 8008e08:	9301      	str	r3, [sp, #4]
 8008e0a:	429e      	cmp	r6, r3
 8008e0c:	d83c      	bhi.n	8008e88 <__ssputs_r+0x8c>
 8008e0e:	2390      	movs	r3, #144	; 0x90
 8008e10:	898a      	ldrh	r2, [r1, #12]
 8008e12:	00db      	lsls	r3, r3, #3
 8008e14:	421a      	tst	r2, r3
 8008e16:	d034      	beq.n	8008e82 <__ssputs_r+0x86>
 8008e18:	2503      	movs	r5, #3
 8008e1a:	6909      	ldr	r1, [r1, #16]
 8008e1c:	6823      	ldr	r3, [r4, #0]
 8008e1e:	1a5b      	subs	r3, r3, r1
 8008e20:	9302      	str	r3, [sp, #8]
 8008e22:	6963      	ldr	r3, [r4, #20]
 8008e24:	9802      	ldr	r0, [sp, #8]
 8008e26:	435d      	muls	r5, r3
 8008e28:	0feb      	lsrs	r3, r5, #31
 8008e2a:	195d      	adds	r5, r3, r5
 8008e2c:	9b01      	ldr	r3, [sp, #4]
 8008e2e:	106d      	asrs	r5, r5, #1
 8008e30:	3301      	adds	r3, #1
 8008e32:	181b      	adds	r3, r3, r0
 8008e34:	42ab      	cmp	r3, r5
 8008e36:	d900      	bls.n	8008e3a <__ssputs_r+0x3e>
 8008e38:	001d      	movs	r5, r3
 8008e3a:	0553      	lsls	r3, r2, #21
 8008e3c:	d532      	bpl.n	8008ea4 <__ssputs_r+0xa8>
 8008e3e:	0029      	movs	r1, r5
 8008e40:	0038      	movs	r0, r7
 8008e42:	f000 fb15 	bl	8009470 <_malloc_r>
 8008e46:	1e06      	subs	r6, r0, #0
 8008e48:	d109      	bne.n	8008e5e <__ssputs_r+0x62>
 8008e4a:	230c      	movs	r3, #12
 8008e4c:	603b      	str	r3, [r7, #0]
 8008e4e:	2340      	movs	r3, #64	; 0x40
 8008e50:	2001      	movs	r0, #1
 8008e52:	89a2      	ldrh	r2, [r4, #12]
 8008e54:	4240      	negs	r0, r0
 8008e56:	4313      	orrs	r3, r2
 8008e58:	81a3      	strh	r3, [r4, #12]
 8008e5a:	b005      	add	sp, #20
 8008e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e5e:	9a02      	ldr	r2, [sp, #8]
 8008e60:	6921      	ldr	r1, [r4, #16]
 8008e62:	f7ff ff3b 	bl	8008cdc <memcpy>
 8008e66:	89a3      	ldrh	r3, [r4, #12]
 8008e68:	4a14      	ldr	r2, [pc, #80]	; (8008ebc <__ssputs_r+0xc0>)
 8008e6a:	401a      	ands	r2, r3
 8008e6c:	2380      	movs	r3, #128	; 0x80
 8008e6e:	4313      	orrs	r3, r2
 8008e70:	81a3      	strh	r3, [r4, #12]
 8008e72:	9b02      	ldr	r3, [sp, #8]
 8008e74:	6126      	str	r6, [r4, #16]
 8008e76:	18f6      	adds	r6, r6, r3
 8008e78:	6026      	str	r6, [r4, #0]
 8008e7a:	6165      	str	r5, [r4, #20]
 8008e7c:	9e01      	ldr	r6, [sp, #4]
 8008e7e:	1aed      	subs	r5, r5, r3
 8008e80:	60a5      	str	r5, [r4, #8]
 8008e82:	9b01      	ldr	r3, [sp, #4]
 8008e84:	429e      	cmp	r6, r3
 8008e86:	d900      	bls.n	8008e8a <__ssputs_r+0x8e>
 8008e88:	9e01      	ldr	r6, [sp, #4]
 8008e8a:	0032      	movs	r2, r6
 8008e8c:	9903      	ldr	r1, [sp, #12]
 8008e8e:	6820      	ldr	r0, [r4, #0]
 8008e90:	f7ff ff2d 	bl	8008cee <memmove>
 8008e94:	68a3      	ldr	r3, [r4, #8]
 8008e96:	2000      	movs	r0, #0
 8008e98:	1b9b      	subs	r3, r3, r6
 8008e9a:	60a3      	str	r3, [r4, #8]
 8008e9c:	6823      	ldr	r3, [r4, #0]
 8008e9e:	199e      	adds	r6, r3, r6
 8008ea0:	6026      	str	r6, [r4, #0]
 8008ea2:	e7da      	b.n	8008e5a <__ssputs_r+0x5e>
 8008ea4:	002a      	movs	r2, r5
 8008ea6:	0038      	movs	r0, r7
 8008ea8:	f000 fb40 	bl	800952c <_realloc_r>
 8008eac:	1e06      	subs	r6, r0, #0
 8008eae:	d1e0      	bne.n	8008e72 <__ssputs_r+0x76>
 8008eb0:	0038      	movs	r0, r7
 8008eb2:	6921      	ldr	r1, [r4, #16]
 8008eb4:	f000 fa92 	bl	80093dc <_free_r>
 8008eb8:	e7c7      	b.n	8008e4a <__ssputs_r+0x4e>
 8008eba:	46c0      	nop			; (mov r8, r8)
 8008ebc:	fffffb7f 	.word	0xfffffb7f

08008ec0 <_svfiprintf_r>:
 8008ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ec2:	b0a1      	sub	sp, #132	; 0x84
 8008ec4:	9003      	str	r0, [sp, #12]
 8008ec6:	001d      	movs	r5, r3
 8008ec8:	898b      	ldrh	r3, [r1, #12]
 8008eca:	000f      	movs	r7, r1
 8008ecc:	0016      	movs	r6, r2
 8008ece:	061b      	lsls	r3, r3, #24
 8008ed0:	d511      	bpl.n	8008ef6 <_svfiprintf_r+0x36>
 8008ed2:	690b      	ldr	r3, [r1, #16]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d10e      	bne.n	8008ef6 <_svfiprintf_r+0x36>
 8008ed8:	2140      	movs	r1, #64	; 0x40
 8008eda:	f000 fac9 	bl	8009470 <_malloc_r>
 8008ede:	6038      	str	r0, [r7, #0]
 8008ee0:	6138      	str	r0, [r7, #16]
 8008ee2:	2800      	cmp	r0, #0
 8008ee4:	d105      	bne.n	8008ef2 <_svfiprintf_r+0x32>
 8008ee6:	230c      	movs	r3, #12
 8008ee8:	9a03      	ldr	r2, [sp, #12]
 8008eea:	3801      	subs	r0, #1
 8008eec:	6013      	str	r3, [r2, #0]
 8008eee:	b021      	add	sp, #132	; 0x84
 8008ef0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ef2:	2340      	movs	r3, #64	; 0x40
 8008ef4:	617b      	str	r3, [r7, #20]
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	ac08      	add	r4, sp, #32
 8008efa:	6163      	str	r3, [r4, #20]
 8008efc:	3320      	adds	r3, #32
 8008efe:	7663      	strb	r3, [r4, #25]
 8008f00:	3310      	adds	r3, #16
 8008f02:	76a3      	strb	r3, [r4, #26]
 8008f04:	9507      	str	r5, [sp, #28]
 8008f06:	0035      	movs	r5, r6
 8008f08:	782b      	ldrb	r3, [r5, #0]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d001      	beq.n	8008f12 <_svfiprintf_r+0x52>
 8008f0e:	2b25      	cmp	r3, #37	; 0x25
 8008f10:	d147      	bne.n	8008fa2 <_svfiprintf_r+0xe2>
 8008f12:	1bab      	subs	r3, r5, r6
 8008f14:	9305      	str	r3, [sp, #20]
 8008f16:	42b5      	cmp	r5, r6
 8008f18:	d00c      	beq.n	8008f34 <_svfiprintf_r+0x74>
 8008f1a:	0032      	movs	r2, r6
 8008f1c:	0039      	movs	r1, r7
 8008f1e:	9803      	ldr	r0, [sp, #12]
 8008f20:	f7ff ff6c 	bl	8008dfc <__ssputs_r>
 8008f24:	1c43      	adds	r3, r0, #1
 8008f26:	d100      	bne.n	8008f2a <_svfiprintf_r+0x6a>
 8008f28:	e0ae      	b.n	8009088 <_svfiprintf_r+0x1c8>
 8008f2a:	6962      	ldr	r2, [r4, #20]
 8008f2c:	9b05      	ldr	r3, [sp, #20]
 8008f2e:	4694      	mov	ip, r2
 8008f30:	4463      	add	r3, ip
 8008f32:	6163      	str	r3, [r4, #20]
 8008f34:	782b      	ldrb	r3, [r5, #0]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d100      	bne.n	8008f3c <_svfiprintf_r+0x7c>
 8008f3a:	e0a5      	b.n	8009088 <_svfiprintf_r+0x1c8>
 8008f3c:	2201      	movs	r2, #1
 8008f3e:	2300      	movs	r3, #0
 8008f40:	4252      	negs	r2, r2
 8008f42:	6062      	str	r2, [r4, #4]
 8008f44:	a904      	add	r1, sp, #16
 8008f46:	3254      	adds	r2, #84	; 0x54
 8008f48:	1852      	adds	r2, r2, r1
 8008f4a:	1c6e      	adds	r6, r5, #1
 8008f4c:	6023      	str	r3, [r4, #0]
 8008f4e:	60e3      	str	r3, [r4, #12]
 8008f50:	60a3      	str	r3, [r4, #8]
 8008f52:	7013      	strb	r3, [r2, #0]
 8008f54:	65a3      	str	r3, [r4, #88]	; 0x58
 8008f56:	2205      	movs	r2, #5
 8008f58:	7831      	ldrb	r1, [r6, #0]
 8008f5a:	4854      	ldr	r0, [pc, #336]	; (80090ac <_svfiprintf_r+0x1ec>)
 8008f5c:	f000 fa32 	bl	80093c4 <memchr>
 8008f60:	1c75      	adds	r5, r6, #1
 8008f62:	2800      	cmp	r0, #0
 8008f64:	d11f      	bne.n	8008fa6 <_svfiprintf_r+0xe6>
 8008f66:	6822      	ldr	r2, [r4, #0]
 8008f68:	06d3      	lsls	r3, r2, #27
 8008f6a:	d504      	bpl.n	8008f76 <_svfiprintf_r+0xb6>
 8008f6c:	2353      	movs	r3, #83	; 0x53
 8008f6e:	a904      	add	r1, sp, #16
 8008f70:	185b      	adds	r3, r3, r1
 8008f72:	2120      	movs	r1, #32
 8008f74:	7019      	strb	r1, [r3, #0]
 8008f76:	0713      	lsls	r3, r2, #28
 8008f78:	d504      	bpl.n	8008f84 <_svfiprintf_r+0xc4>
 8008f7a:	2353      	movs	r3, #83	; 0x53
 8008f7c:	a904      	add	r1, sp, #16
 8008f7e:	185b      	adds	r3, r3, r1
 8008f80:	212b      	movs	r1, #43	; 0x2b
 8008f82:	7019      	strb	r1, [r3, #0]
 8008f84:	7833      	ldrb	r3, [r6, #0]
 8008f86:	2b2a      	cmp	r3, #42	; 0x2a
 8008f88:	d016      	beq.n	8008fb8 <_svfiprintf_r+0xf8>
 8008f8a:	0035      	movs	r5, r6
 8008f8c:	2100      	movs	r1, #0
 8008f8e:	200a      	movs	r0, #10
 8008f90:	68e3      	ldr	r3, [r4, #12]
 8008f92:	782a      	ldrb	r2, [r5, #0]
 8008f94:	1c6e      	adds	r6, r5, #1
 8008f96:	3a30      	subs	r2, #48	; 0x30
 8008f98:	2a09      	cmp	r2, #9
 8008f9a:	d94e      	bls.n	800903a <_svfiprintf_r+0x17a>
 8008f9c:	2900      	cmp	r1, #0
 8008f9e:	d111      	bne.n	8008fc4 <_svfiprintf_r+0x104>
 8008fa0:	e017      	b.n	8008fd2 <_svfiprintf_r+0x112>
 8008fa2:	3501      	adds	r5, #1
 8008fa4:	e7b0      	b.n	8008f08 <_svfiprintf_r+0x48>
 8008fa6:	4b41      	ldr	r3, [pc, #260]	; (80090ac <_svfiprintf_r+0x1ec>)
 8008fa8:	6822      	ldr	r2, [r4, #0]
 8008faa:	1ac0      	subs	r0, r0, r3
 8008fac:	2301      	movs	r3, #1
 8008fae:	4083      	lsls	r3, r0
 8008fb0:	4313      	orrs	r3, r2
 8008fb2:	002e      	movs	r6, r5
 8008fb4:	6023      	str	r3, [r4, #0]
 8008fb6:	e7ce      	b.n	8008f56 <_svfiprintf_r+0x96>
 8008fb8:	9b07      	ldr	r3, [sp, #28]
 8008fba:	1d19      	adds	r1, r3, #4
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	9107      	str	r1, [sp, #28]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	db01      	blt.n	8008fc8 <_svfiprintf_r+0x108>
 8008fc4:	930b      	str	r3, [sp, #44]	; 0x2c
 8008fc6:	e004      	b.n	8008fd2 <_svfiprintf_r+0x112>
 8008fc8:	425b      	negs	r3, r3
 8008fca:	60e3      	str	r3, [r4, #12]
 8008fcc:	2302      	movs	r3, #2
 8008fce:	4313      	orrs	r3, r2
 8008fd0:	6023      	str	r3, [r4, #0]
 8008fd2:	782b      	ldrb	r3, [r5, #0]
 8008fd4:	2b2e      	cmp	r3, #46	; 0x2e
 8008fd6:	d10a      	bne.n	8008fee <_svfiprintf_r+0x12e>
 8008fd8:	786b      	ldrb	r3, [r5, #1]
 8008fda:	2b2a      	cmp	r3, #42	; 0x2a
 8008fdc:	d135      	bne.n	800904a <_svfiprintf_r+0x18a>
 8008fde:	9b07      	ldr	r3, [sp, #28]
 8008fe0:	3502      	adds	r5, #2
 8008fe2:	1d1a      	adds	r2, r3, #4
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	9207      	str	r2, [sp, #28]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	db2b      	blt.n	8009044 <_svfiprintf_r+0x184>
 8008fec:	9309      	str	r3, [sp, #36]	; 0x24
 8008fee:	4e30      	ldr	r6, [pc, #192]	; (80090b0 <_svfiprintf_r+0x1f0>)
 8008ff0:	2203      	movs	r2, #3
 8008ff2:	0030      	movs	r0, r6
 8008ff4:	7829      	ldrb	r1, [r5, #0]
 8008ff6:	f000 f9e5 	bl	80093c4 <memchr>
 8008ffa:	2800      	cmp	r0, #0
 8008ffc:	d006      	beq.n	800900c <_svfiprintf_r+0x14c>
 8008ffe:	2340      	movs	r3, #64	; 0x40
 8009000:	1b80      	subs	r0, r0, r6
 8009002:	4083      	lsls	r3, r0
 8009004:	6822      	ldr	r2, [r4, #0]
 8009006:	3501      	adds	r5, #1
 8009008:	4313      	orrs	r3, r2
 800900a:	6023      	str	r3, [r4, #0]
 800900c:	7829      	ldrb	r1, [r5, #0]
 800900e:	2206      	movs	r2, #6
 8009010:	4828      	ldr	r0, [pc, #160]	; (80090b4 <_svfiprintf_r+0x1f4>)
 8009012:	1c6e      	adds	r6, r5, #1
 8009014:	7621      	strb	r1, [r4, #24]
 8009016:	f000 f9d5 	bl	80093c4 <memchr>
 800901a:	2800      	cmp	r0, #0
 800901c:	d03c      	beq.n	8009098 <_svfiprintf_r+0x1d8>
 800901e:	4b26      	ldr	r3, [pc, #152]	; (80090b8 <_svfiprintf_r+0x1f8>)
 8009020:	2b00      	cmp	r3, #0
 8009022:	d125      	bne.n	8009070 <_svfiprintf_r+0x1b0>
 8009024:	2207      	movs	r2, #7
 8009026:	9b07      	ldr	r3, [sp, #28]
 8009028:	3307      	adds	r3, #7
 800902a:	4393      	bics	r3, r2
 800902c:	3308      	adds	r3, #8
 800902e:	9307      	str	r3, [sp, #28]
 8009030:	6963      	ldr	r3, [r4, #20]
 8009032:	9a04      	ldr	r2, [sp, #16]
 8009034:	189b      	adds	r3, r3, r2
 8009036:	6163      	str	r3, [r4, #20]
 8009038:	e765      	b.n	8008f06 <_svfiprintf_r+0x46>
 800903a:	4343      	muls	r3, r0
 800903c:	0035      	movs	r5, r6
 800903e:	2101      	movs	r1, #1
 8009040:	189b      	adds	r3, r3, r2
 8009042:	e7a6      	b.n	8008f92 <_svfiprintf_r+0xd2>
 8009044:	2301      	movs	r3, #1
 8009046:	425b      	negs	r3, r3
 8009048:	e7d0      	b.n	8008fec <_svfiprintf_r+0x12c>
 800904a:	2300      	movs	r3, #0
 800904c:	200a      	movs	r0, #10
 800904e:	001a      	movs	r2, r3
 8009050:	3501      	adds	r5, #1
 8009052:	6063      	str	r3, [r4, #4]
 8009054:	7829      	ldrb	r1, [r5, #0]
 8009056:	1c6e      	adds	r6, r5, #1
 8009058:	3930      	subs	r1, #48	; 0x30
 800905a:	2909      	cmp	r1, #9
 800905c:	d903      	bls.n	8009066 <_svfiprintf_r+0x1a6>
 800905e:	2b00      	cmp	r3, #0
 8009060:	d0c5      	beq.n	8008fee <_svfiprintf_r+0x12e>
 8009062:	9209      	str	r2, [sp, #36]	; 0x24
 8009064:	e7c3      	b.n	8008fee <_svfiprintf_r+0x12e>
 8009066:	4342      	muls	r2, r0
 8009068:	0035      	movs	r5, r6
 800906a:	2301      	movs	r3, #1
 800906c:	1852      	adds	r2, r2, r1
 800906e:	e7f1      	b.n	8009054 <_svfiprintf_r+0x194>
 8009070:	ab07      	add	r3, sp, #28
 8009072:	9300      	str	r3, [sp, #0]
 8009074:	003a      	movs	r2, r7
 8009076:	0021      	movs	r1, r4
 8009078:	4b10      	ldr	r3, [pc, #64]	; (80090bc <_svfiprintf_r+0x1fc>)
 800907a:	9803      	ldr	r0, [sp, #12]
 800907c:	e000      	b.n	8009080 <_svfiprintf_r+0x1c0>
 800907e:	bf00      	nop
 8009080:	9004      	str	r0, [sp, #16]
 8009082:	9b04      	ldr	r3, [sp, #16]
 8009084:	3301      	adds	r3, #1
 8009086:	d1d3      	bne.n	8009030 <_svfiprintf_r+0x170>
 8009088:	89bb      	ldrh	r3, [r7, #12]
 800908a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800908c:	065b      	lsls	r3, r3, #25
 800908e:	d400      	bmi.n	8009092 <_svfiprintf_r+0x1d2>
 8009090:	e72d      	b.n	8008eee <_svfiprintf_r+0x2e>
 8009092:	2001      	movs	r0, #1
 8009094:	4240      	negs	r0, r0
 8009096:	e72a      	b.n	8008eee <_svfiprintf_r+0x2e>
 8009098:	ab07      	add	r3, sp, #28
 800909a:	9300      	str	r3, [sp, #0]
 800909c:	003a      	movs	r2, r7
 800909e:	0021      	movs	r1, r4
 80090a0:	4b06      	ldr	r3, [pc, #24]	; (80090bc <_svfiprintf_r+0x1fc>)
 80090a2:	9803      	ldr	r0, [sp, #12]
 80090a4:	f000 f87c 	bl	80091a0 <_printf_i>
 80090a8:	e7ea      	b.n	8009080 <_svfiprintf_r+0x1c0>
 80090aa:	46c0      	nop			; (mov r8, r8)
 80090ac:	08009dc0 	.word	0x08009dc0
 80090b0:	08009dc6 	.word	0x08009dc6
 80090b4:	08009dca 	.word	0x08009dca
 80090b8:	00000000 	.word	0x00000000
 80090bc:	08008dfd 	.word	0x08008dfd

080090c0 <_printf_common>:
 80090c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80090c2:	0015      	movs	r5, r2
 80090c4:	9301      	str	r3, [sp, #4]
 80090c6:	688a      	ldr	r2, [r1, #8]
 80090c8:	690b      	ldr	r3, [r1, #16]
 80090ca:	000c      	movs	r4, r1
 80090cc:	9000      	str	r0, [sp, #0]
 80090ce:	4293      	cmp	r3, r2
 80090d0:	da00      	bge.n	80090d4 <_printf_common+0x14>
 80090d2:	0013      	movs	r3, r2
 80090d4:	0022      	movs	r2, r4
 80090d6:	602b      	str	r3, [r5, #0]
 80090d8:	3243      	adds	r2, #67	; 0x43
 80090da:	7812      	ldrb	r2, [r2, #0]
 80090dc:	2a00      	cmp	r2, #0
 80090de:	d001      	beq.n	80090e4 <_printf_common+0x24>
 80090e0:	3301      	adds	r3, #1
 80090e2:	602b      	str	r3, [r5, #0]
 80090e4:	6823      	ldr	r3, [r4, #0]
 80090e6:	069b      	lsls	r3, r3, #26
 80090e8:	d502      	bpl.n	80090f0 <_printf_common+0x30>
 80090ea:	682b      	ldr	r3, [r5, #0]
 80090ec:	3302      	adds	r3, #2
 80090ee:	602b      	str	r3, [r5, #0]
 80090f0:	6822      	ldr	r2, [r4, #0]
 80090f2:	2306      	movs	r3, #6
 80090f4:	0017      	movs	r7, r2
 80090f6:	401f      	ands	r7, r3
 80090f8:	421a      	tst	r2, r3
 80090fa:	d027      	beq.n	800914c <_printf_common+0x8c>
 80090fc:	0023      	movs	r3, r4
 80090fe:	3343      	adds	r3, #67	; 0x43
 8009100:	781b      	ldrb	r3, [r3, #0]
 8009102:	1e5a      	subs	r2, r3, #1
 8009104:	4193      	sbcs	r3, r2
 8009106:	6822      	ldr	r2, [r4, #0]
 8009108:	0692      	lsls	r2, r2, #26
 800910a:	d430      	bmi.n	800916e <_printf_common+0xae>
 800910c:	0022      	movs	r2, r4
 800910e:	9901      	ldr	r1, [sp, #4]
 8009110:	9800      	ldr	r0, [sp, #0]
 8009112:	9e08      	ldr	r6, [sp, #32]
 8009114:	3243      	adds	r2, #67	; 0x43
 8009116:	47b0      	blx	r6
 8009118:	1c43      	adds	r3, r0, #1
 800911a:	d025      	beq.n	8009168 <_printf_common+0xa8>
 800911c:	2306      	movs	r3, #6
 800911e:	6820      	ldr	r0, [r4, #0]
 8009120:	682a      	ldr	r2, [r5, #0]
 8009122:	68e1      	ldr	r1, [r4, #12]
 8009124:	2500      	movs	r5, #0
 8009126:	4003      	ands	r3, r0
 8009128:	2b04      	cmp	r3, #4
 800912a:	d103      	bne.n	8009134 <_printf_common+0x74>
 800912c:	1a8d      	subs	r5, r1, r2
 800912e:	43eb      	mvns	r3, r5
 8009130:	17db      	asrs	r3, r3, #31
 8009132:	401d      	ands	r5, r3
 8009134:	68a3      	ldr	r3, [r4, #8]
 8009136:	6922      	ldr	r2, [r4, #16]
 8009138:	4293      	cmp	r3, r2
 800913a:	dd01      	ble.n	8009140 <_printf_common+0x80>
 800913c:	1a9b      	subs	r3, r3, r2
 800913e:	18ed      	adds	r5, r5, r3
 8009140:	2700      	movs	r7, #0
 8009142:	42bd      	cmp	r5, r7
 8009144:	d120      	bne.n	8009188 <_printf_common+0xc8>
 8009146:	2000      	movs	r0, #0
 8009148:	e010      	b.n	800916c <_printf_common+0xac>
 800914a:	3701      	adds	r7, #1
 800914c:	68e3      	ldr	r3, [r4, #12]
 800914e:	682a      	ldr	r2, [r5, #0]
 8009150:	1a9b      	subs	r3, r3, r2
 8009152:	42bb      	cmp	r3, r7
 8009154:	ddd2      	ble.n	80090fc <_printf_common+0x3c>
 8009156:	0022      	movs	r2, r4
 8009158:	2301      	movs	r3, #1
 800915a:	9901      	ldr	r1, [sp, #4]
 800915c:	9800      	ldr	r0, [sp, #0]
 800915e:	9e08      	ldr	r6, [sp, #32]
 8009160:	3219      	adds	r2, #25
 8009162:	47b0      	blx	r6
 8009164:	1c43      	adds	r3, r0, #1
 8009166:	d1f0      	bne.n	800914a <_printf_common+0x8a>
 8009168:	2001      	movs	r0, #1
 800916a:	4240      	negs	r0, r0
 800916c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800916e:	2030      	movs	r0, #48	; 0x30
 8009170:	18e1      	adds	r1, r4, r3
 8009172:	3143      	adds	r1, #67	; 0x43
 8009174:	7008      	strb	r0, [r1, #0]
 8009176:	0021      	movs	r1, r4
 8009178:	1c5a      	adds	r2, r3, #1
 800917a:	3145      	adds	r1, #69	; 0x45
 800917c:	7809      	ldrb	r1, [r1, #0]
 800917e:	18a2      	adds	r2, r4, r2
 8009180:	3243      	adds	r2, #67	; 0x43
 8009182:	3302      	adds	r3, #2
 8009184:	7011      	strb	r1, [r2, #0]
 8009186:	e7c1      	b.n	800910c <_printf_common+0x4c>
 8009188:	0022      	movs	r2, r4
 800918a:	2301      	movs	r3, #1
 800918c:	9901      	ldr	r1, [sp, #4]
 800918e:	9800      	ldr	r0, [sp, #0]
 8009190:	9e08      	ldr	r6, [sp, #32]
 8009192:	321a      	adds	r2, #26
 8009194:	47b0      	blx	r6
 8009196:	1c43      	adds	r3, r0, #1
 8009198:	d0e6      	beq.n	8009168 <_printf_common+0xa8>
 800919a:	3701      	adds	r7, #1
 800919c:	e7d1      	b.n	8009142 <_printf_common+0x82>
	...

080091a0 <_printf_i>:
 80091a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80091a2:	b08b      	sub	sp, #44	; 0x2c
 80091a4:	9206      	str	r2, [sp, #24]
 80091a6:	000a      	movs	r2, r1
 80091a8:	3243      	adds	r2, #67	; 0x43
 80091aa:	9307      	str	r3, [sp, #28]
 80091ac:	9005      	str	r0, [sp, #20]
 80091ae:	9204      	str	r2, [sp, #16]
 80091b0:	7e0a      	ldrb	r2, [r1, #24]
 80091b2:	000c      	movs	r4, r1
 80091b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80091b6:	2a78      	cmp	r2, #120	; 0x78
 80091b8:	d806      	bhi.n	80091c8 <_printf_i+0x28>
 80091ba:	2a62      	cmp	r2, #98	; 0x62
 80091bc:	d808      	bhi.n	80091d0 <_printf_i+0x30>
 80091be:	2a00      	cmp	r2, #0
 80091c0:	d100      	bne.n	80091c4 <_printf_i+0x24>
 80091c2:	e0c0      	b.n	8009346 <_printf_i+0x1a6>
 80091c4:	2a58      	cmp	r2, #88	; 0x58
 80091c6:	d052      	beq.n	800926e <_printf_i+0xce>
 80091c8:	0026      	movs	r6, r4
 80091ca:	3642      	adds	r6, #66	; 0x42
 80091cc:	7032      	strb	r2, [r6, #0]
 80091ce:	e022      	b.n	8009216 <_printf_i+0x76>
 80091d0:	0010      	movs	r0, r2
 80091d2:	3863      	subs	r0, #99	; 0x63
 80091d4:	2815      	cmp	r0, #21
 80091d6:	d8f7      	bhi.n	80091c8 <_printf_i+0x28>
 80091d8:	f7f6 ff96 	bl	8000108 <__gnu_thumb1_case_shi>
 80091dc:	001f0016 	.word	0x001f0016
 80091e0:	fff6fff6 	.word	0xfff6fff6
 80091e4:	fff6fff6 	.word	0xfff6fff6
 80091e8:	fff6001f 	.word	0xfff6001f
 80091ec:	fff6fff6 	.word	0xfff6fff6
 80091f0:	00a8fff6 	.word	0x00a8fff6
 80091f4:	009a0036 	.word	0x009a0036
 80091f8:	fff6fff6 	.word	0xfff6fff6
 80091fc:	fff600b9 	.word	0xfff600b9
 8009200:	fff60036 	.word	0xfff60036
 8009204:	009efff6 	.word	0x009efff6
 8009208:	0026      	movs	r6, r4
 800920a:	681a      	ldr	r2, [r3, #0]
 800920c:	3642      	adds	r6, #66	; 0x42
 800920e:	1d11      	adds	r1, r2, #4
 8009210:	6019      	str	r1, [r3, #0]
 8009212:	6813      	ldr	r3, [r2, #0]
 8009214:	7033      	strb	r3, [r6, #0]
 8009216:	2301      	movs	r3, #1
 8009218:	e0a7      	b.n	800936a <_printf_i+0x1ca>
 800921a:	6808      	ldr	r0, [r1, #0]
 800921c:	6819      	ldr	r1, [r3, #0]
 800921e:	1d0a      	adds	r2, r1, #4
 8009220:	0605      	lsls	r5, r0, #24
 8009222:	d50b      	bpl.n	800923c <_printf_i+0x9c>
 8009224:	680d      	ldr	r5, [r1, #0]
 8009226:	601a      	str	r2, [r3, #0]
 8009228:	2d00      	cmp	r5, #0
 800922a:	da03      	bge.n	8009234 <_printf_i+0x94>
 800922c:	232d      	movs	r3, #45	; 0x2d
 800922e:	9a04      	ldr	r2, [sp, #16]
 8009230:	426d      	negs	r5, r5
 8009232:	7013      	strb	r3, [r2, #0]
 8009234:	4b61      	ldr	r3, [pc, #388]	; (80093bc <_printf_i+0x21c>)
 8009236:	270a      	movs	r7, #10
 8009238:	9303      	str	r3, [sp, #12]
 800923a:	e032      	b.n	80092a2 <_printf_i+0x102>
 800923c:	680d      	ldr	r5, [r1, #0]
 800923e:	601a      	str	r2, [r3, #0]
 8009240:	0641      	lsls	r1, r0, #25
 8009242:	d5f1      	bpl.n	8009228 <_printf_i+0x88>
 8009244:	b22d      	sxth	r5, r5
 8009246:	e7ef      	b.n	8009228 <_printf_i+0x88>
 8009248:	680d      	ldr	r5, [r1, #0]
 800924a:	6819      	ldr	r1, [r3, #0]
 800924c:	1d08      	adds	r0, r1, #4
 800924e:	6018      	str	r0, [r3, #0]
 8009250:	062e      	lsls	r6, r5, #24
 8009252:	d501      	bpl.n	8009258 <_printf_i+0xb8>
 8009254:	680d      	ldr	r5, [r1, #0]
 8009256:	e003      	b.n	8009260 <_printf_i+0xc0>
 8009258:	066d      	lsls	r5, r5, #25
 800925a:	d5fb      	bpl.n	8009254 <_printf_i+0xb4>
 800925c:	680d      	ldr	r5, [r1, #0]
 800925e:	b2ad      	uxth	r5, r5
 8009260:	4b56      	ldr	r3, [pc, #344]	; (80093bc <_printf_i+0x21c>)
 8009262:	270a      	movs	r7, #10
 8009264:	9303      	str	r3, [sp, #12]
 8009266:	2a6f      	cmp	r2, #111	; 0x6f
 8009268:	d117      	bne.n	800929a <_printf_i+0xfa>
 800926a:	2708      	movs	r7, #8
 800926c:	e015      	b.n	800929a <_printf_i+0xfa>
 800926e:	3145      	adds	r1, #69	; 0x45
 8009270:	700a      	strb	r2, [r1, #0]
 8009272:	4a52      	ldr	r2, [pc, #328]	; (80093bc <_printf_i+0x21c>)
 8009274:	9203      	str	r2, [sp, #12]
 8009276:	681a      	ldr	r2, [r3, #0]
 8009278:	6821      	ldr	r1, [r4, #0]
 800927a:	ca20      	ldmia	r2!, {r5}
 800927c:	601a      	str	r2, [r3, #0]
 800927e:	0608      	lsls	r0, r1, #24
 8009280:	d550      	bpl.n	8009324 <_printf_i+0x184>
 8009282:	07cb      	lsls	r3, r1, #31
 8009284:	d502      	bpl.n	800928c <_printf_i+0xec>
 8009286:	2320      	movs	r3, #32
 8009288:	4319      	orrs	r1, r3
 800928a:	6021      	str	r1, [r4, #0]
 800928c:	2710      	movs	r7, #16
 800928e:	2d00      	cmp	r5, #0
 8009290:	d103      	bne.n	800929a <_printf_i+0xfa>
 8009292:	2320      	movs	r3, #32
 8009294:	6822      	ldr	r2, [r4, #0]
 8009296:	439a      	bics	r2, r3
 8009298:	6022      	str	r2, [r4, #0]
 800929a:	0023      	movs	r3, r4
 800929c:	2200      	movs	r2, #0
 800929e:	3343      	adds	r3, #67	; 0x43
 80092a0:	701a      	strb	r2, [r3, #0]
 80092a2:	6863      	ldr	r3, [r4, #4]
 80092a4:	60a3      	str	r3, [r4, #8]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	db03      	blt.n	80092b2 <_printf_i+0x112>
 80092aa:	2204      	movs	r2, #4
 80092ac:	6821      	ldr	r1, [r4, #0]
 80092ae:	4391      	bics	r1, r2
 80092b0:	6021      	str	r1, [r4, #0]
 80092b2:	2d00      	cmp	r5, #0
 80092b4:	d102      	bne.n	80092bc <_printf_i+0x11c>
 80092b6:	9e04      	ldr	r6, [sp, #16]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d00c      	beq.n	80092d6 <_printf_i+0x136>
 80092bc:	9e04      	ldr	r6, [sp, #16]
 80092be:	0028      	movs	r0, r5
 80092c0:	0039      	movs	r1, r7
 80092c2:	f7f6 ffb1 	bl	8000228 <__aeabi_uidivmod>
 80092c6:	9b03      	ldr	r3, [sp, #12]
 80092c8:	3e01      	subs	r6, #1
 80092ca:	5c5b      	ldrb	r3, [r3, r1]
 80092cc:	7033      	strb	r3, [r6, #0]
 80092ce:	002b      	movs	r3, r5
 80092d0:	0005      	movs	r5, r0
 80092d2:	429f      	cmp	r7, r3
 80092d4:	d9f3      	bls.n	80092be <_printf_i+0x11e>
 80092d6:	2f08      	cmp	r7, #8
 80092d8:	d109      	bne.n	80092ee <_printf_i+0x14e>
 80092da:	6823      	ldr	r3, [r4, #0]
 80092dc:	07db      	lsls	r3, r3, #31
 80092de:	d506      	bpl.n	80092ee <_printf_i+0x14e>
 80092e0:	6863      	ldr	r3, [r4, #4]
 80092e2:	6922      	ldr	r2, [r4, #16]
 80092e4:	4293      	cmp	r3, r2
 80092e6:	dc02      	bgt.n	80092ee <_printf_i+0x14e>
 80092e8:	2330      	movs	r3, #48	; 0x30
 80092ea:	3e01      	subs	r6, #1
 80092ec:	7033      	strb	r3, [r6, #0]
 80092ee:	9b04      	ldr	r3, [sp, #16]
 80092f0:	1b9b      	subs	r3, r3, r6
 80092f2:	6123      	str	r3, [r4, #16]
 80092f4:	9b07      	ldr	r3, [sp, #28]
 80092f6:	0021      	movs	r1, r4
 80092f8:	9300      	str	r3, [sp, #0]
 80092fa:	9805      	ldr	r0, [sp, #20]
 80092fc:	9b06      	ldr	r3, [sp, #24]
 80092fe:	aa09      	add	r2, sp, #36	; 0x24
 8009300:	f7ff fede 	bl	80090c0 <_printf_common>
 8009304:	1c43      	adds	r3, r0, #1
 8009306:	d135      	bne.n	8009374 <_printf_i+0x1d4>
 8009308:	2001      	movs	r0, #1
 800930a:	4240      	negs	r0, r0
 800930c:	b00b      	add	sp, #44	; 0x2c
 800930e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009310:	2220      	movs	r2, #32
 8009312:	6809      	ldr	r1, [r1, #0]
 8009314:	430a      	orrs	r2, r1
 8009316:	6022      	str	r2, [r4, #0]
 8009318:	0022      	movs	r2, r4
 800931a:	2178      	movs	r1, #120	; 0x78
 800931c:	3245      	adds	r2, #69	; 0x45
 800931e:	7011      	strb	r1, [r2, #0]
 8009320:	4a27      	ldr	r2, [pc, #156]	; (80093c0 <_printf_i+0x220>)
 8009322:	e7a7      	b.n	8009274 <_printf_i+0xd4>
 8009324:	0648      	lsls	r0, r1, #25
 8009326:	d5ac      	bpl.n	8009282 <_printf_i+0xe2>
 8009328:	b2ad      	uxth	r5, r5
 800932a:	e7aa      	b.n	8009282 <_printf_i+0xe2>
 800932c:	681a      	ldr	r2, [r3, #0]
 800932e:	680d      	ldr	r5, [r1, #0]
 8009330:	1d10      	adds	r0, r2, #4
 8009332:	6949      	ldr	r1, [r1, #20]
 8009334:	6018      	str	r0, [r3, #0]
 8009336:	6813      	ldr	r3, [r2, #0]
 8009338:	062e      	lsls	r6, r5, #24
 800933a:	d501      	bpl.n	8009340 <_printf_i+0x1a0>
 800933c:	6019      	str	r1, [r3, #0]
 800933e:	e002      	b.n	8009346 <_printf_i+0x1a6>
 8009340:	066d      	lsls	r5, r5, #25
 8009342:	d5fb      	bpl.n	800933c <_printf_i+0x19c>
 8009344:	8019      	strh	r1, [r3, #0]
 8009346:	2300      	movs	r3, #0
 8009348:	9e04      	ldr	r6, [sp, #16]
 800934a:	6123      	str	r3, [r4, #16]
 800934c:	e7d2      	b.n	80092f4 <_printf_i+0x154>
 800934e:	681a      	ldr	r2, [r3, #0]
 8009350:	1d11      	adds	r1, r2, #4
 8009352:	6019      	str	r1, [r3, #0]
 8009354:	6816      	ldr	r6, [r2, #0]
 8009356:	2100      	movs	r1, #0
 8009358:	0030      	movs	r0, r6
 800935a:	6862      	ldr	r2, [r4, #4]
 800935c:	f000 f832 	bl	80093c4 <memchr>
 8009360:	2800      	cmp	r0, #0
 8009362:	d001      	beq.n	8009368 <_printf_i+0x1c8>
 8009364:	1b80      	subs	r0, r0, r6
 8009366:	6060      	str	r0, [r4, #4]
 8009368:	6863      	ldr	r3, [r4, #4]
 800936a:	6123      	str	r3, [r4, #16]
 800936c:	2300      	movs	r3, #0
 800936e:	9a04      	ldr	r2, [sp, #16]
 8009370:	7013      	strb	r3, [r2, #0]
 8009372:	e7bf      	b.n	80092f4 <_printf_i+0x154>
 8009374:	6923      	ldr	r3, [r4, #16]
 8009376:	0032      	movs	r2, r6
 8009378:	9906      	ldr	r1, [sp, #24]
 800937a:	9805      	ldr	r0, [sp, #20]
 800937c:	9d07      	ldr	r5, [sp, #28]
 800937e:	47a8      	blx	r5
 8009380:	1c43      	adds	r3, r0, #1
 8009382:	d0c1      	beq.n	8009308 <_printf_i+0x168>
 8009384:	6823      	ldr	r3, [r4, #0]
 8009386:	079b      	lsls	r3, r3, #30
 8009388:	d415      	bmi.n	80093b6 <_printf_i+0x216>
 800938a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800938c:	68e0      	ldr	r0, [r4, #12]
 800938e:	4298      	cmp	r0, r3
 8009390:	dabc      	bge.n	800930c <_printf_i+0x16c>
 8009392:	0018      	movs	r0, r3
 8009394:	e7ba      	b.n	800930c <_printf_i+0x16c>
 8009396:	0022      	movs	r2, r4
 8009398:	2301      	movs	r3, #1
 800939a:	9906      	ldr	r1, [sp, #24]
 800939c:	9805      	ldr	r0, [sp, #20]
 800939e:	9e07      	ldr	r6, [sp, #28]
 80093a0:	3219      	adds	r2, #25
 80093a2:	47b0      	blx	r6
 80093a4:	1c43      	adds	r3, r0, #1
 80093a6:	d0af      	beq.n	8009308 <_printf_i+0x168>
 80093a8:	3501      	adds	r5, #1
 80093aa:	68e3      	ldr	r3, [r4, #12]
 80093ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80093ae:	1a9b      	subs	r3, r3, r2
 80093b0:	42ab      	cmp	r3, r5
 80093b2:	dcf0      	bgt.n	8009396 <_printf_i+0x1f6>
 80093b4:	e7e9      	b.n	800938a <_printf_i+0x1ea>
 80093b6:	2500      	movs	r5, #0
 80093b8:	e7f7      	b.n	80093aa <_printf_i+0x20a>
 80093ba:	46c0      	nop			; (mov r8, r8)
 80093bc:	08009dd1 	.word	0x08009dd1
 80093c0:	08009de2 	.word	0x08009de2

080093c4 <memchr>:
 80093c4:	b2c9      	uxtb	r1, r1
 80093c6:	1882      	adds	r2, r0, r2
 80093c8:	4290      	cmp	r0, r2
 80093ca:	d101      	bne.n	80093d0 <memchr+0xc>
 80093cc:	2000      	movs	r0, #0
 80093ce:	4770      	bx	lr
 80093d0:	7803      	ldrb	r3, [r0, #0]
 80093d2:	428b      	cmp	r3, r1
 80093d4:	d0fb      	beq.n	80093ce <memchr+0xa>
 80093d6:	3001      	adds	r0, #1
 80093d8:	e7f6      	b.n	80093c8 <memchr+0x4>
	...

080093dc <_free_r>:
 80093dc:	b570      	push	{r4, r5, r6, lr}
 80093de:	0005      	movs	r5, r0
 80093e0:	2900      	cmp	r1, #0
 80093e2:	d010      	beq.n	8009406 <_free_r+0x2a>
 80093e4:	1f0c      	subs	r4, r1, #4
 80093e6:	6823      	ldr	r3, [r4, #0]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	da00      	bge.n	80093ee <_free_r+0x12>
 80093ec:	18e4      	adds	r4, r4, r3
 80093ee:	0028      	movs	r0, r5
 80093f0:	f000 f8d4 	bl	800959c <__malloc_lock>
 80093f4:	4a1d      	ldr	r2, [pc, #116]	; (800946c <_free_r+0x90>)
 80093f6:	6813      	ldr	r3, [r2, #0]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d105      	bne.n	8009408 <_free_r+0x2c>
 80093fc:	6063      	str	r3, [r4, #4]
 80093fe:	6014      	str	r4, [r2, #0]
 8009400:	0028      	movs	r0, r5
 8009402:	f000 f8d3 	bl	80095ac <__malloc_unlock>
 8009406:	bd70      	pop	{r4, r5, r6, pc}
 8009408:	42a3      	cmp	r3, r4
 800940a:	d908      	bls.n	800941e <_free_r+0x42>
 800940c:	6821      	ldr	r1, [r4, #0]
 800940e:	1860      	adds	r0, r4, r1
 8009410:	4283      	cmp	r3, r0
 8009412:	d1f3      	bne.n	80093fc <_free_r+0x20>
 8009414:	6818      	ldr	r0, [r3, #0]
 8009416:	685b      	ldr	r3, [r3, #4]
 8009418:	1841      	adds	r1, r0, r1
 800941a:	6021      	str	r1, [r4, #0]
 800941c:	e7ee      	b.n	80093fc <_free_r+0x20>
 800941e:	001a      	movs	r2, r3
 8009420:	685b      	ldr	r3, [r3, #4]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d001      	beq.n	800942a <_free_r+0x4e>
 8009426:	42a3      	cmp	r3, r4
 8009428:	d9f9      	bls.n	800941e <_free_r+0x42>
 800942a:	6811      	ldr	r1, [r2, #0]
 800942c:	1850      	adds	r0, r2, r1
 800942e:	42a0      	cmp	r0, r4
 8009430:	d10b      	bne.n	800944a <_free_r+0x6e>
 8009432:	6820      	ldr	r0, [r4, #0]
 8009434:	1809      	adds	r1, r1, r0
 8009436:	1850      	adds	r0, r2, r1
 8009438:	6011      	str	r1, [r2, #0]
 800943a:	4283      	cmp	r3, r0
 800943c:	d1e0      	bne.n	8009400 <_free_r+0x24>
 800943e:	6818      	ldr	r0, [r3, #0]
 8009440:	685b      	ldr	r3, [r3, #4]
 8009442:	1841      	adds	r1, r0, r1
 8009444:	6011      	str	r1, [r2, #0]
 8009446:	6053      	str	r3, [r2, #4]
 8009448:	e7da      	b.n	8009400 <_free_r+0x24>
 800944a:	42a0      	cmp	r0, r4
 800944c:	d902      	bls.n	8009454 <_free_r+0x78>
 800944e:	230c      	movs	r3, #12
 8009450:	602b      	str	r3, [r5, #0]
 8009452:	e7d5      	b.n	8009400 <_free_r+0x24>
 8009454:	6821      	ldr	r1, [r4, #0]
 8009456:	1860      	adds	r0, r4, r1
 8009458:	4283      	cmp	r3, r0
 800945a:	d103      	bne.n	8009464 <_free_r+0x88>
 800945c:	6818      	ldr	r0, [r3, #0]
 800945e:	685b      	ldr	r3, [r3, #4]
 8009460:	1841      	adds	r1, r0, r1
 8009462:	6021      	str	r1, [r4, #0]
 8009464:	6063      	str	r3, [r4, #4]
 8009466:	6054      	str	r4, [r2, #4]
 8009468:	e7ca      	b.n	8009400 <_free_r+0x24>
 800946a:	46c0      	nop			; (mov r8, r8)
 800946c:	20001dd8 	.word	0x20001dd8

08009470 <_malloc_r>:
 8009470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009472:	2303      	movs	r3, #3
 8009474:	1ccd      	adds	r5, r1, #3
 8009476:	439d      	bics	r5, r3
 8009478:	3508      	adds	r5, #8
 800947a:	0006      	movs	r6, r0
 800947c:	2d0c      	cmp	r5, #12
 800947e:	d21f      	bcs.n	80094c0 <_malloc_r+0x50>
 8009480:	250c      	movs	r5, #12
 8009482:	42a9      	cmp	r1, r5
 8009484:	d81e      	bhi.n	80094c4 <_malloc_r+0x54>
 8009486:	0030      	movs	r0, r6
 8009488:	f000 f888 	bl	800959c <__malloc_lock>
 800948c:	4925      	ldr	r1, [pc, #148]	; (8009524 <_malloc_r+0xb4>)
 800948e:	680a      	ldr	r2, [r1, #0]
 8009490:	0014      	movs	r4, r2
 8009492:	2c00      	cmp	r4, #0
 8009494:	d11a      	bne.n	80094cc <_malloc_r+0x5c>
 8009496:	4f24      	ldr	r7, [pc, #144]	; (8009528 <_malloc_r+0xb8>)
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d104      	bne.n	80094a8 <_malloc_r+0x38>
 800949e:	0021      	movs	r1, r4
 80094a0:	0030      	movs	r0, r6
 80094a2:	f000 f869 	bl	8009578 <_sbrk_r>
 80094a6:	6038      	str	r0, [r7, #0]
 80094a8:	0029      	movs	r1, r5
 80094aa:	0030      	movs	r0, r6
 80094ac:	f000 f864 	bl	8009578 <_sbrk_r>
 80094b0:	1c43      	adds	r3, r0, #1
 80094b2:	d12b      	bne.n	800950c <_malloc_r+0x9c>
 80094b4:	230c      	movs	r3, #12
 80094b6:	0030      	movs	r0, r6
 80094b8:	6033      	str	r3, [r6, #0]
 80094ba:	f000 f877 	bl	80095ac <__malloc_unlock>
 80094be:	e003      	b.n	80094c8 <_malloc_r+0x58>
 80094c0:	2d00      	cmp	r5, #0
 80094c2:	dade      	bge.n	8009482 <_malloc_r+0x12>
 80094c4:	230c      	movs	r3, #12
 80094c6:	6033      	str	r3, [r6, #0]
 80094c8:	2000      	movs	r0, #0
 80094ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094cc:	6823      	ldr	r3, [r4, #0]
 80094ce:	1b5b      	subs	r3, r3, r5
 80094d0:	d419      	bmi.n	8009506 <_malloc_r+0x96>
 80094d2:	2b0b      	cmp	r3, #11
 80094d4:	d903      	bls.n	80094de <_malloc_r+0x6e>
 80094d6:	6023      	str	r3, [r4, #0]
 80094d8:	18e4      	adds	r4, r4, r3
 80094da:	6025      	str	r5, [r4, #0]
 80094dc:	e003      	b.n	80094e6 <_malloc_r+0x76>
 80094de:	6863      	ldr	r3, [r4, #4]
 80094e0:	42a2      	cmp	r2, r4
 80094e2:	d10e      	bne.n	8009502 <_malloc_r+0x92>
 80094e4:	600b      	str	r3, [r1, #0]
 80094e6:	0030      	movs	r0, r6
 80094e8:	f000 f860 	bl	80095ac <__malloc_unlock>
 80094ec:	0020      	movs	r0, r4
 80094ee:	2207      	movs	r2, #7
 80094f0:	300b      	adds	r0, #11
 80094f2:	1d23      	adds	r3, r4, #4
 80094f4:	4390      	bics	r0, r2
 80094f6:	1ac2      	subs	r2, r0, r3
 80094f8:	4298      	cmp	r0, r3
 80094fa:	d0e6      	beq.n	80094ca <_malloc_r+0x5a>
 80094fc:	1a1b      	subs	r3, r3, r0
 80094fe:	50a3      	str	r3, [r4, r2]
 8009500:	e7e3      	b.n	80094ca <_malloc_r+0x5a>
 8009502:	6053      	str	r3, [r2, #4]
 8009504:	e7ef      	b.n	80094e6 <_malloc_r+0x76>
 8009506:	0022      	movs	r2, r4
 8009508:	6864      	ldr	r4, [r4, #4]
 800950a:	e7c2      	b.n	8009492 <_malloc_r+0x22>
 800950c:	2303      	movs	r3, #3
 800950e:	1cc4      	adds	r4, r0, #3
 8009510:	439c      	bics	r4, r3
 8009512:	42a0      	cmp	r0, r4
 8009514:	d0e1      	beq.n	80094da <_malloc_r+0x6a>
 8009516:	1a21      	subs	r1, r4, r0
 8009518:	0030      	movs	r0, r6
 800951a:	f000 f82d 	bl	8009578 <_sbrk_r>
 800951e:	1c43      	adds	r3, r0, #1
 8009520:	d1db      	bne.n	80094da <_malloc_r+0x6a>
 8009522:	e7c7      	b.n	80094b4 <_malloc_r+0x44>
 8009524:	20001dd8 	.word	0x20001dd8
 8009528:	20001ddc 	.word	0x20001ddc

0800952c <_realloc_r>:
 800952c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800952e:	0007      	movs	r7, r0
 8009530:	000d      	movs	r5, r1
 8009532:	0016      	movs	r6, r2
 8009534:	2900      	cmp	r1, #0
 8009536:	d105      	bne.n	8009544 <_realloc_r+0x18>
 8009538:	0011      	movs	r1, r2
 800953a:	f7ff ff99 	bl	8009470 <_malloc_r>
 800953e:	0004      	movs	r4, r0
 8009540:	0020      	movs	r0, r4
 8009542:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009544:	2a00      	cmp	r2, #0
 8009546:	d103      	bne.n	8009550 <_realloc_r+0x24>
 8009548:	f7ff ff48 	bl	80093dc <_free_r>
 800954c:	0034      	movs	r4, r6
 800954e:	e7f7      	b.n	8009540 <_realloc_r+0x14>
 8009550:	f000 f834 	bl	80095bc <_malloc_usable_size_r>
 8009554:	002c      	movs	r4, r5
 8009556:	42b0      	cmp	r0, r6
 8009558:	d2f2      	bcs.n	8009540 <_realloc_r+0x14>
 800955a:	0031      	movs	r1, r6
 800955c:	0038      	movs	r0, r7
 800955e:	f7ff ff87 	bl	8009470 <_malloc_r>
 8009562:	1e04      	subs	r4, r0, #0
 8009564:	d0ec      	beq.n	8009540 <_realloc_r+0x14>
 8009566:	0029      	movs	r1, r5
 8009568:	0032      	movs	r2, r6
 800956a:	f7ff fbb7 	bl	8008cdc <memcpy>
 800956e:	0029      	movs	r1, r5
 8009570:	0038      	movs	r0, r7
 8009572:	f7ff ff33 	bl	80093dc <_free_r>
 8009576:	e7e3      	b.n	8009540 <_realloc_r+0x14>

08009578 <_sbrk_r>:
 8009578:	2300      	movs	r3, #0
 800957a:	b570      	push	{r4, r5, r6, lr}
 800957c:	4d06      	ldr	r5, [pc, #24]	; (8009598 <_sbrk_r+0x20>)
 800957e:	0004      	movs	r4, r0
 8009580:	0008      	movs	r0, r1
 8009582:	602b      	str	r3, [r5, #0]
 8009584:	f7f9 f812 	bl	80025ac <_sbrk>
 8009588:	1c43      	adds	r3, r0, #1
 800958a:	d103      	bne.n	8009594 <_sbrk_r+0x1c>
 800958c:	682b      	ldr	r3, [r5, #0]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d000      	beq.n	8009594 <_sbrk_r+0x1c>
 8009592:	6023      	str	r3, [r4, #0]
 8009594:	bd70      	pop	{r4, r5, r6, pc}
 8009596:	46c0      	nop			; (mov r8, r8)
 8009598:	20002010 	.word	0x20002010

0800959c <__malloc_lock>:
 800959c:	b510      	push	{r4, lr}
 800959e:	4802      	ldr	r0, [pc, #8]	; (80095a8 <__malloc_lock+0xc>)
 80095a0:	f000 f814 	bl	80095cc <__retarget_lock_acquire_recursive>
 80095a4:	bd10      	pop	{r4, pc}
 80095a6:	46c0      	nop			; (mov r8, r8)
 80095a8:	20002018 	.word	0x20002018

080095ac <__malloc_unlock>:
 80095ac:	b510      	push	{r4, lr}
 80095ae:	4802      	ldr	r0, [pc, #8]	; (80095b8 <__malloc_unlock+0xc>)
 80095b0:	f000 f80d 	bl	80095ce <__retarget_lock_release_recursive>
 80095b4:	bd10      	pop	{r4, pc}
 80095b6:	46c0      	nop			; (mov r8, r8)
 80095b8:	20002018 	.word	0x20002018

080095bc <_malloc_usable_size_r>:
 80095bc:	1f0b      	subs	r3, r1, #4
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	1f18      	subs	r0, r3, #4
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	da01      	bge.n	80095ca <_malloc_usable_size_r+0xe>
 80095c6:	580b      	ldr	r3, [r1, r0]
 80095c8:	18c0      	adds	r0, r0, r3
 80095ca:	4770      	bx	lr

080095cc <__retarget_lock_acquire_recursive>:
 80095cc:	4770      	bx	lr

080095ce <__retarget_lock_release_recursive>:
 80095ce:	4770      	bx	lr

080095d0 <_init>:
 80095d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095d2:	46c0      	nop			; (mov r8, r8)
 80095d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095d6:	bc08      	pop	{r3}
 80095d8:	469e      	mov	lr, r3
 80095da:	4770      	bx	lr

080095dc <_fini>:
 80095dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095de:	46c0      	nop			; (mov r8, r8)
 80095e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095e2:	bc08      	pop	{r3}
 80095e4:	469e      	mov	lr, r3
 80095e6:	4770      	bx	lr
