
Pro3E_RT_Mikrocotroller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006700  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000700  080067c0  080067c0  000167c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ec0  08006ec0  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08006ec0  08006ec0  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006ec0  08006ec0  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ec0  08006ec0  00016ec0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ec4  08006ec4  00016ec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08006ec8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000022a4  2000007c  08006f44  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002320  08006f44  00022320  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b371  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038b2  00000000  00000000  0003b415  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001570  00000000  00000000  0003ecc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013d0  00000000  00000000  00040238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013970  00000000  00000000  00041608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001854d  00000000  00000000  00054f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000734e5  00000000  00000000  0006d4c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e09aa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005104  00000000  00000000  000e0a00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000007c 	.word	0x2000007c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080067a8 	.word	0x080067a8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000080 	.word	0x20000080
 8000104:	080067a8 	.word	0x080067a8

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <app_main>:
S_piregler piregler;



void app_main(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af02      	add	r7, sp, #8
	xTaskCreate(I2CTask, "I2C-Task", (configMINIMAL_STACK_SIZE + 80), NULL, (tskIDLE_PRIORITY + 2), NULL);
 800023a:	4915      	ldr	r1, [pc, #84]	; (8000290 <app_main+0x5c>)
 800023c:	4815      	ldr	r0, [pc, #84]	; (8000294 <app_main+0x60>)
 800023e:	2300      	movs	r3, #0
 8000240:	9301      	str	r3, [sp, #4]
 8000242:	2302      	movs	r3, #2
 8000244:	9300      	str	r3, [sp, #0]
 8000246:	2300      	movs	r3, #0
 8000248:	22d0      	movs	r2, #208	; 0xd0
 800024a:	f003 ffe5 	bl	8004218 <xTaskCreate>
	xTaskCreate(I2C2Task, "I2C2-Task", (configMINIMAL_STACK_SIZE + 80), NULL, (tskIDLE_PRIORITY + 1), NULL);
 800024e:	4912      	ldr	r1, [pc, #72]	; (8000298 <app_main+0x64>)
 8000250:	4812      	ldr	r0, [pc, #72]	; (800029c <app_main+0x68>)
 8000252:	2300      	movs	r3, #0
 8000254:	9301      	str	r3, [sp, #4]
 8000256:	2301      	movs	r3, #1
 8000258:	9300      	str	r3, [sp, #0]
 800025a:	2300      	movs	r3, #0
 800025c:	22d0      	movs	r2, #208	; 0xd0
 800025e:	f003 ffdb 	bl	8004218 <xTaskCreate>
	xTaskCreate(MainTask, "Main-Task", (configMINIMAL_STACK_SIZE + 80), NULL, (tskIDLE_PRIORITY + 3), NULL);
 8000262:	490f      	ldr	r1, [pc, #60]	; (80002a0 <app_main+0x6c>)
 8000264:	480f      	ldr	r0, [pc, #60]	; (80002a4 <app_main+0x70>)
 8000266:	2300      	movs	r3, #0
 8000268:	9301      	str	r3, [sp, #4]
 800026a:	2303      	movs	r3, #3
 800026c:	9300      	str	r3, [sp, #0]
 800026e:	2300      	movs	r3, #0
 8000270:	22d0      	movs	r2, #208	; 0xd0
 8000272:	f003 ffd1 	bl	8004218 <xTaskCreate>
	xTaskCreate(ReglerISTTask, "Regler-Task", (configMINIMAL_STACK_SIZE + 80), NULL, (tskIDLE_PRIORITY + 4), NULL);
 8000276:	490c      	ldr	r1, [pc, #48]	; (80002a8 <app_main+0x74>)
 8000278:	480c      	ldr	r0, [pc, #48]	; (80002ac <app_main+0x78>)
 800027a:	2300      	movs	r3, #0
 800027c:	9301      	str	r3, [sp, #4]
 800027e:	2304      	movs	r3, #4
 8000280:	9300      	str	r3, [sp, #0]
 8000282:	2300      	movs	r3, #0
 8000284:	22d0      	movs	r2, #208	; 0xd0
 8000286:	f003 ffc7 	bl	8004218 <xTaskCreate>
	vTaskStartScheduler();
 800028a:	f004 f921 	bl	80044d0 <vTaskStartScheduler>
	/* The FreeRTOS scheduler should never return to here, except on out of memory at creating the idle task! */
	for (;;) ;
 800028e:	e7fe      	b.n	800028e <app_main+0x5a>
 8000290:	080067c0 	.word	0x080067c0
 8000294:	080002f1 	.word	0x080002f1
 8000298:	080067cc 	.word	0x080067cc
 800029c:	0800030d 	.word	0x0800030d
 80002a0:	080067d8 	.word	0x080067d8
 80002a4:	080002b1 	.word	0x080002b1
 80002a8:	080067e4 	.word	0x080067e4
 80002ac:	08000359 	.word	0x08000359

080002b0 <MainTask>:
}

static void MainTask(__attribute__ ((unused)) void *pvParameters)
{
 80002b0:	b590      	push	{r4, r7, lr}
 80002b2:	b089      	sub	sp, #36	; 0x24
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
	static uint32_t n = 0;
	char text[22];
	while (1) {
		//try oled
		snprintf(text, sizeof(text), "Test: %d", (int)n++);
 80002b8:	4b0b      	ldr	r3, [pc, #44]	; (80002e8 <MainTask+0x38>)
 80002ba:	681a      	ldr	r2, [r3, #0]
 80002bc:	1c51      	adds	r1, r2, #1
 80002be:	4b0a      	ldr	r3, [pc, #40]	; (80002e8 <MainTask+0x38>)
 80002c0:	6019      	str	r1, [r3, #0]
 80002c2:	0013      	movs	r3, r2
 80002c4:	4a09      	ldr	r2, [pc, #36]	; (80002ec <MainTask+0x3c>)
 80002c6:	2408      	movs	r4, #8
 80002c8:	1938      	adds	r0, r7, r4
 80002ca:	2116      	movs	r1, #22
 80002cc:	f005 fe16 	bl	8005efc <sniprintf>
		oled_printf(*text, 1, Black);
 80002d0:	193b      	adds	r3, r7, r4
 80002d2:	781b      	ldrb	r3, [r3, #0]
 80002d4:	2200      	movs	r2, #0
 80002d6:	2101      	movs	r1, #1
 80002d8:	0018      	movs	r0, r3
 80002da:	f000 f843 	bl	8000364 <oled_printf>
		HAL_Delay(200);
 80002de:	20c8      	movs	r0, #200	; 0xc8
 80002e0:	f000 fce0 	bl	8000ca4 <HAL_Delay>
		snprintf(text, sizeof(text), "Test: %d", (int)n++);
 80002e4:	e7e8      	b.n	80002b8 <MainTask+0x8>
 80002e6:	46c0      	nop			; (mov r8, r8)
 80002e8:	20000098 	.word	0x20000098
 80002ec:	080067f0 	.word	0x080067f0

080002f0 <I2CTask>:
	}
}


static void I2CTask(__attribute__ ((unused)) void *pvParameters)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b082      	sub	sp, #8
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]
	//PB9 = SDA
	//PB8 = SCL
	HAL_GPIO_WritePin(I2C_PORT, I2C1_SCL, GPIO_PIN_SET);
 80002f8:	2380      	movs	r3, #128	; 0x80
 80002fa:	005b      	lsls	r3, r3, #1
 80002fc:	4802      	ldr	r0, [pc, #8]	; (8000308 <I2CTask+0x18>)
 80002fe:	2201      	movs	r2, #1
 8000300:	0019      	movs	r1, r3
 8000302:	f001 f94d 	bl	80015a0 <HAL_GPIO_WritePin>
	while (1) {
 8000306:	e7fe      	b.n	8000306 <I2CTask+0x16>
 8000308:	48000400 	.word	0x48000400

0800030c <I2C2Task>:
	}

}

static void I2C2Task(__attribute__ ((unused)) void *pvParameters)
{
 800030c:	b590      	push	{r4, r7, lr}
 800030e:	b087      	sub	sp, #28
 8000310:	af02      	add	r7, sp, #8
 8000312:	6078      	str	r0, [r7, #4]
	//Write to RP over I2C2
	extern I2C_HandleTypeDef hi2c2;
	const uint8_t RPZERO_ADDR = 0x03<<1;
 8000314:	230f      	movs	r3, #15
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	2206      	movs	r2, #6
 800031a:	701a      	strb	r2, [r3, #0]
	uint8_t cnt = 0;
 800031c:	230e      	movs	r3, #14
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	2200      	movs	r2, #0
 8000322:	701a      	strb	r2, [r3, #0]
	//snprintf(text, sizeof(text), "Test: %d", cnt++);
	while (1) {
		  HAL_I2C_Master_Transmit(&hi2c2, RPZERO_ADDR, &cnt,1, HAL_MAX_DELAY);
 8000324:	230f      	movs	r3, #15
 8000326:	18fb      	adds	r3, r7, r3
 8000328:	781b      	ldrb	r3, [r3, #0]
 800032a:	b299      	uxth	r1, r3
 800032c:	240e      	movs	r4, #14
 800032e:	193a      	adds	r2, r7, r4
 8000330:	4808      	ldr	r0, [pc, #32]	; (8000354 <I2C2Task+0x48>)
 8000332:	2301      	movs	r3, #1
 8000334:	425b      	negs	r3, r3
 8000336:	9300      	str	r3, [sp, #0]
 8000338:	2301      	movs	r3, #1
 800033a:	f001 f9e5 	bl	8001708 <HAL_I2C_Master_Transmit>
		  cnt++;
 800033e:	0021      	movs	r1, r4
 8000340:	187b      	adds	r3, r7, r1
 8000342:	781b      	ldrb	r3, [r3, #0]
 8000344:	3301      	adds	r3, #1
 8000346:	b2da      	uxtb	r2, r3
 8000348:	187b      	adds	r3, r7, r1
 800034a:	701a      	strb	r2, [r3, #0]
		  HAL_Delay(200);
 800034c:	20c8      	movs	r0, #200	; 0xc8
 800034e:	f000 fca9 	bl	8000ca4 <HAL_Delay>
		  HAL_I2C_Master_Transmit(&hi2c2, RPZERO_ADDR, &cnt,1, HAL_MAX_DELAY);
 8000352:	e7e7      	b.n	8000324 <I2C2Task+0x18>
 8000354:	200021f8 	.word	0x200021f8

08000358 <ReglerISTTask>:
	}

}

static void ReglerISTTask(__attribute__ ((unused)) void *pvParameters)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b082      	sub	sp, #8
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
	while (1) {
 8000360:	e7fe      	b.n	8000360 <ReglerISTTask+0x8>
	...

08000364 <oled_printf>:
	ssd1306_Init();
	ssd1306_SetDisplayOn(1);
	ssd1306_Fill(White);
}

int oled_printf (uint32_t line, SSD1306_COLOR color,const char *fmt, ...){
 8000364:	b40c      	push	{r2, r3}
 8000366:	b590      	push	{r4, r7, lr}
 8000368:	b0a5      	sub	sp, #148	; 0x94
 800036a:	af00      	add	r7, sp, #0
 800036c:	6078      	str	r0, [r7, #4]
 800036e:	000a      	movs	r2, r1
 8000370:	1cfb      	adds	r3, r7, #3
 8000372:	701a      	strb	r2, [r3, #0]
	char s[SSD1306_WIDTH];
	va_list ap;
	if(xSemaphoreTake(OLEDSemaphore,10) == pdTRUE){
 8000374:	4b20      	ldr	r3, [pc, #128]	; (80003f8 <oled_printf+0x94>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	210a      	movs	r1, #10
 800037a:	0018      	movs	r0, r3
 800037c:	f003 fca1 	bl	8003cc2 <xQueueSemaphoreTake>
 8000380:	0003      	movs	r3, r0
 8000382:	2b01      	cmp	r3, #1
 8000384:	d12f      	bne.n	80003e6 <oled_printf+0x82>
		va_start(ap, fmt);
 8000386:	239c      	movs	r3, #156	; 0x9c
 8000388:	2208      	movs	r2, #8
 800038a:	4694      	mov	ip, r2
 800038c:	44bc      	add	ip, r7
 800038e:	4463      	add	r3, ip
 8000390:	60fb      	str	r3, [r7, #12]
		vsnprintf(s, sizeof(s), fmt, ap);
 8000392:	68fb      	ldr	r3, [r7, #12]
 8000394:	2298      	movs	r2, #152	; 0x98
 8000396:	2108      	movs	r1, #8
 8000398:	468c      	mov	ip, r1
 800039a:	44bc      	add	ip, r7
 800039c:	4462      	add	r2, ip
 800039e:	6812      	ldr	r2, [r2, #0]
 80003a0:	2410      	movs	r4, #16
 80003a2:	1938      	adds	r0, r7, r4
 80003a4:	2180      	movs	r1, #128	; 0x80
 80003a6:	f005 fe09 	bl	8005fbc <vsniprintf>
		va_end(ap);
		ssd1306_SetCursor(OLED_BORDER_OFFSET, (line-1)*OLED_LINE_HEIGHT+OLED_BORDER_OFFSET);
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	b2db      	uxtb	r3, r3
 80003ae:	1c1a      	adds	r2, r3, #0
 80003b0:	0092      	lsls	r2, r2, #2
 80003b2:	18d3      	adds	r3, r2, r3
 80003b4:	18db      	adds	r3, r3, r3
 80003b6:	b2db      	uxtb	r3, r3
 80003b8:	3b05      	subs	r3, #5
 80003ba:	b2db      	uxtb	r3, r3
 80003bc:	0019      	movs	r1, r3
 80003be:	2005      	movs	r0, #5
 80003c0:	f005 fd34 	bl	8005e2c <ssd1306_SetCursor>
		ssd1306_WriteString(s,  Font_6x8, color);
 80003c4:	1cfb      	adds	r3, r7, #3
 80003c6:	781b      	ldrb	r3, [r3, #0]
 80003c8:	4a0c      	ldr	r2, [pc, #48]	; (80003fc <oled_printf+0x98>)
 80003ca:	1938      	adds	r0, r7, r4
 80003cc:	6811      	ldr	r1, [r2, #0]
 80003ce:	6852      	ldr	r2, [r2, #4]
 80003d0:	f005 fd02 	bl	8005dd8 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 80003d4:	f005 fbd6 	bl	8005b84 <ssd1306_UpdateScreen>
		xSemaphoreGive(OLEDSemaphore);
 80003d8:	4b07      	ldr	r3, [pc, #28]	; (80003f8 <oled_printf+0x94>)
 80003da:	6818      	ldr	r0, [r3, #0]
 80003dc:	2300      	movs	r3, #0
 80003de:	2200      	movs	r2, #0
 80003e0:	2100      	movs	r1, #0
 80003e2:	f003 fa84 	bl	80038ee <xQueueGenericSend>
	}
	return 0;
 80003e6:	2300      	movs	r3, #0
}
 80003e8:	0018      	movs	r0, r3
 80003ea:	46bd      	mov	sp, r7
 80003ec:	b025      	add	sp, #148	; 0x94
 80003ee:	bc90      	pop	{r4, r7}
 80003f0:	bc08      	pop	{r3}
 80003f2:	b002      	add	sp, #8
 80003f4:	4718      	bx	r3
 80003f6:	46c0      	nop			; (mov r8, r8)
 80003f8:	200021f0 	.word	0x200021f0
 80003fc:	20000010 	.word	0x20000010

08000400 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000404:	f000 fbea 	bl	8000bdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000408:	f000 f824 	bl	8000454 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800040c:	f000 f9c2 	bl	8000794 <MX_GPIO_Init>
  MX_ADC_Init();
 8000410:	f000 f872 	bl	80004f8 <MX_ADC_Init>
  MX_TIM1_Init();
 8000414:	f000 f90c 	bl	8000630 <MX_TIM1_Init>
  MX_I2C2_Init();
 8000418:	f000 f8ca 	bl	80005b0 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800041c:	4b09      	ldr	r3, [pc, #36]	; (8000444 <main+0x44>)
 800041e:	210c      	movs	r1, #12
 8000420:	0018      	movs	r0, r3
 8000422:	f002 f997 	bl	8002754 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000426:	f002 ffc7 	bl	80033b8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800042a:	4a07      	ldr	r2, [pc, #28]	; (8000448 <main+0x48>)
 800042c:	4b07      	ldr	r3, [pc, #28]	; (800044c <main+0x4c>)
 800042e:	2100      	movs	r1, #0
 8000430:	0018      	movs	r0, r3
 8000432:	f002 ffed 	bl	8003410 <osThreadNew>
 8000436:	0002      	movs	r2, r0
 8000438:	4b05      	ldr	r3, [pc, #20]	; (8000450 <main+0x50>)
 800043a:	601a      	str	r2, [r3, #0]
  osKernelStart();

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  app_main();
 800043c:	f7ff fefa 	bl	8000234 <app_main>
  while (1)
 8000440:	e7fe      	b.n	8000440 <main+0x40>
 8000442:	46c0      	nop			; (mov r8, r8)
 8000444:	20002244 	.word	0x20002244
 8000448:	08006840 	.word	0x08006840
 800044c:	08000891 	.word	0x08000891
 8000450:	200021f4 	.word	0x200021f4

08000454 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000454:	b590      	push	{r4, r7, lr}
 8000456:	b091      	sub	sp, #68	; 0x44
 8000458:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800045a:	2410      	movs	r4, #16
 800045c:	193b      	adds	r3, r7, r4
 800045e:	0018      	movs	r0, r3
 8000460:	2330      	movs	r3, #48	; 0x30
 8000462:	001a      	movs	r2, r3
 8000464:	2100      	movs	r1, #0
 8000466:	f005 fd41 	bl	8005eec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800046a:	003b      	movs	r3, r7
 800046c:	0018      	movs	r0, r3
 800046e:	2310      	movs	r3, #16
 8000470:	001a      	movs	r2, r3
 8000472:	2100      	movs	r1, #0
 8000474:	f005 fd3a 	bl	8005eec <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8000478:	0021      	movs	r1, r4
 800047a:	187b      	adds	r3, r7, r1
 800047c:	2212      	movs	r2, #18
 800047e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000480:	187b      	adds	r3, r7, r1
 8000482:	2201      	movs	r2, #1
 8000484:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000486:	187b      	adds	r3, r7, r1
 8000488:	2201      	movs	r2, #1
 800048a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800048c:	187b      	adds	r3, r7, r1
 800048e:	2210      	movs	r2, #16
 8000490:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000492:	187b      	adds	r3, r7, r1
 8000494:	2210      	movs	r2, #16
 8000496:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000498:	187b      	adds	r3, r7, r1
 800049a:	2202      	movs	r2, #2
 800049c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800049e:	187b      	adds	r3, r7, r1
 80004a0:	2280      	movs	r2, #128	; 0x80
 80004a2:	0212      	lsls	r2, r2, #8
 80004a4:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80004a6:	187b      	adds	r3, r7, r1
 80004a8:	2280      	movs	r2, #128	; 0x80
 80004aa:	0352      	lsls	r2, r2, #13
 80004ac:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80004ae:	187b      	adds	r3, r7, r1
 80004b0:	2200      	movs	r2, #0
 80004b2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004b4:	187b      	adds	r3, r7, r1
 80004b6:	0018      	movs	r0, r3
 80004b8:	f001 fc52 	bl	8001d60 <HAL_RCC_OscConfig>
 80004bc:	1e03      	subs	r3, r0, #0
 80004be:	d001      	beq.n	80004c4 <SystemClock_Config+0x70>
  {
    Error_Handler();
 80004c0:	f000 f9ee 	bl	80008a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004c4:	003b      	movs	r3, r7
 80004c6:	2207      	movs	r2, #7
 80004c8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004ca:	003b      	movs	r3, r7
 80004cc:	2202      	movs	r2, #2
 80004ce:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004d0:	003b      	movs	r3, r7
 80004d2:	2200      	movs	r2, #0
 80004d4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004d6:	003b      	movs	r3, r7
 80004d8:	2200      	movs	r2, #0
 80004da:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004dc:	003b      	movs	r3, r7
 80004de:	2101      	movs	r1, #1
 80004e0:	0018      	movs	r0, r3
 80004e2:	f001 ff5b 	bl	800239c <HAL_RCC_ClockConfig>
 80004e6:	1e03      	subs	r3, r0, #0
 80004e8:	d001      	beq.n	80004ee <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80004ea:	f000 f9d9 	bl	80008a0 <Error_Handler>
  }
}
 80004ee:	46c0      	nop			; (mov r8, r8)
 80004f0:	46bd      	mov	sp, r7
 80004f2:	b011      	add	sp, #68	; 0x44
 80004f4:	bd90      	pop	{r4, r7, pc}
	...

080004f8 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b084      	sub	sp, #16
 80004fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004fe:	1d3b      	adds	r3, r7, #4
 8000500:	0018      	movs	r0, r3
 8000502:	230c      	movs	r3, #12
 8000504:	001a      	movs	r2, r3
 8000506:	2100      	movs	r1, #0
 8000508:	f005 fcf0 	bl	8005eec <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800050c:	4b26      	ldr	r3, [pc, #152]	; (80005a8 <MX_ADC_Init+0xb0>)
 800050e:	4a27      	ldr	r2, [pc, #156]	; (80005ac <MX_ADC_Init+0xb4>)
 8000510:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000512:	4b25      	ldr	r3, [pc, #148]	; (80005a8 <MX_ADC_Init+0xb0>)
 8000514:	2200      	movs	r2, #0
 8000516:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000518:	4b23      	ldr	r3, [pc, #140]	; (80005a8 <MX_ADC_Init+0xb0>)
 800051a:	2200      	movs	r2, #0
 800051c:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800051e:	4b22      	ldr	r3, [pc, #136]	; (80005a8 <MX_ADC_Init+0xb0>)
 8000520:	2200      	movs	r2, #0
 8000522:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000524:	4b20      	ldr	r3, [pc, #128]	; (80005a8 <MX_ADC_Init+0xb0>)
 8000526:	2201      	movs	r2, #1
 8000528:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800052a:	4b1f      	ldr	r3, [pc, #124]	; (80005a8 <MX_ADC_Init+0xb0>)
 800052c:	2204      	movs	r2, #4
 800052e:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000530:	4b1d      	ldr	r3, [pc, #116]	; (80005a8 <MX_ADC_Init+0xb0>)
 8000532:	2200      	movs	r2, #0
 8000534:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000536:	4b1c      	ldr	r3, [pc, #112]	; (80005a8 <MX_ADC_Init+0xb0>)
 8000538:	2200      	movs	r2, #0
 800053a:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 800053c:	4b1a      	ldr	r3, [pc, #104]	; (80005a8 <MX_ADC_Init+0xb0>)
 800053e:	2200      	movs	r2, #0
 8000540:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000542:	4b19      	ldr	r3, [pc, #100]	; (80005a8 <MX_ADC_Init+0xb0>)
 8000544:	2200      	movs	r2, #0
 8000546:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000548:	4b17      	ldr	r3, [pc, #92]	; (80005a8 <MX_ADC_Init+0xb0>)
 800054a:	22c2      	movs	r2, #194	; 0xc2
 800054c:	32ff      	adds	r2, #255	; 0xff
 800054e:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000550:	4b15      	ldr	r3, [pc, #84]	; (80005a8 <MX_ADC_Init+0xb0>)
 8000552:	2200      	movs	r2, #0
 8000554:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000556:	4b14      	ldr	r3, [pc, #80]	; (80005a8 <MX_ADC_Init+0xb0>)
 8000558:	2224      	movs	r2, #36	; 0x24
 800055a:	2100      	movs	r1, #0
 800055c:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800055e:	4b12      	ldr	r3, [pc, #72]	; (80005a8 <MX_ADC_Init+0xb0>)
 8000560:	2201      	movs	r2, #1
 8000562:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000564:	4b10      	ldr	r3, [pc, #64]	; (80005a8 <MX_ADC_Init+0xb0>)
 8000566:	0018      	movs	r0, r3
 8000568:	f000 fbc0 	bl	8000cec <HAL_ADC_Init>
 800056c:	1e03      	subs	r3, r0, #0
 800056e:	d001      	beq.n	8000574 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000570:	f000 f996 	bl	80008a0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000574:	1d3b      	adds	r3, r7, #4
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800057a:	1d3b      	adds	r3, r7, #4
 800057c:	2280      	movs	r2, #128	; 0x80
 800057e:	0152      	lsls	r2, r2, #5
 8000580:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000582:	1d3b      	adds	r3, r7, #4
 8000584:	2280      	movs	r2, #128	; 0x80
 8000586:	0552      	lsls	r2, r2, #21
 8000588:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800058a:	1d3a      	adds	r2, r7, #4
 800058c:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <MX_ADC_Init+0xb0>)
 800058e:	0011      	movs	r1, r2
 8000590:	0018      	movs	r0, r3
 8000592:	f000 fceb 	bl	8000f6c <HAL_ADC_ConfigChannel>
 8000596:	1e03      	subs	r3, r0, #0
 8000598:	d001      	beq.n	800059e <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 800059a:	f000 f981 	bl	80008a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800059e:	46c0      	nop			; (mov r8, r8)
 80005a0:	46bd      	mov	sp, r7
 80005a2:	b004      	add	sp, #16
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	46c0      	nop			; (mov r8, r8)
 80005a8:	2000228c 	.word	0x2000228c
 80005ac:	40012400 	.word	0x40012400

080005b0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80005b4:	4b1b      	ldr	r3, [pc, #108]	; (8000624 <MX_I2C2_Init+0x74>)
 80005b6:	4a1c      	ldr	r2, [pc, #112]	; (8000628 <MX_I2C2_Init+0x78>)
 80005b8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x2010091A;
 80005ba:	4b1a      	ldr	r3, [pc, #104]	; (8000624 <MX_I2C2_Init+0x74>)
 80005bc:	4a1b      	ldr	r2, [pc, #108]	; (800062c <MX_I2C2_Init+0x7c>)
 80005be:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80005c0:	4b18      	ldr	r3, [pc, #96]	; (8000624 <MX_I2C2_Init+0x74>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005c6:	4b17      	ldr	r3, [pc, #92]	; (8000624 <MX_I2C2_Init+0x74>)
 80005c8:	2201      	movs	r2, #1
 80005ca:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005cc:	4b15      	ldr	r3, [pc, #84]	; (8000624 <MX_I2C2_Init+0x74>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80005d2:	4b14      	ldr	r3, [pc, #80]	; (8000624 <MX_I2C2_Init+0x74>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005d8:	4b12      	ldr	r3, [pc, #72]	; (8000624 <MX_I2C2_Init+0x74>)
 80005da:	2200      	movs	r2, #0
 80005dc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005de:	4b11      	ldr	r3, [pc, #68]	; (8000624 <MX_I2C2_Init+0x74>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005e4:	4b0f      	ldr	r3, [pc, #60]	; (8000624 <MX_I2C2_Init+0x74>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80005ea:	4b0e      	ldr	r3, [pc, #56]	; (8000624 <MX_I2C2_Init+0x74>)
 80005ec:	0018      	movs	r0, r3
 80005ee:	f000 fff5 	bl	80015dc <HAL_I2C_Init>
 80005f2:	1e03      	subs	r3, r0, #0
 80005f4:	d001      	beq.n	80005fa <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80005f6:	f000 f953 	bl	80008a0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005fa:	4b0a      	ldr	r3, [pc, #40]	; (8000624 <MX_I2C2_Init+0x74>)
 80005fc:	2100      	movs	r1, #0
 80005fe:	0018      	movs	r0, r3
 8000600:	f001 fb16 	bl	8001c30 <HAL_I2CEx_ConfigAnalogFilter>
 8000604:	1e03      	subs	r3, r0, #0
 8000606:	d001      	beq.n	800060c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000608:	f000 f94a 	bl	80008a0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800060c:	4b05      	ldr	r3, [pc, #20]	; (8000624 <MX_I2C2_Init+0x74>)
 800060e:	2100      	movs	r1, #0
 8000610:	0018      	movs	r0, r3
 8000612:	f001 fb59 	bl	8001cc8 <HAL_I2CEx_ConfigDigitalFilter>
 8000616:	1e03      	subs	r3, r0, #0
 8000618:	d001      	beq.n	800061e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800061a:	f000 f941 	bl	80008a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800061e:	46c0      	nop			; (mov r8, r8)
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	200021f8 	.word	0x200021f8
 8000628:	40005800 	.word	0x40005800
 800062c:	2010091a 	.word	0x2010091a

08000630 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b096      	sub	sp, #88	; 0x58
 8000634:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000636:	2348      	movs	r3, #72	; 0x48
 8000638:	18fb      	adds	r3, r7, r3
 800063a:	0018      	movs	r0, r3
 800063c:	2310      	movs	r3, #16
 800063e:	001a      	movs	r2, r3
 8000640:	2100      	movs	r1, #0
 8000642:	f005 fc53 	bl	8005eec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000646:	2340      	movs	r3, #64	; 0x40
 8000648:	18fb      	adds	r3, r7, r3
 800064a:	0018      	movs	r0, r3
 800064c:	2308      	movs	r3, #8
 800064e:	001a      	movs	r2, r3
 8000650:	2100      	movs	r1, #0
 8000652:	f005 fc4b 	bl	8005eec <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000656:	2324      	movs	r3, #36	; 0x24
 8000658:	18fb      	adds	r3, r7, r3
 800065a:	0018      	movs	r0, r3
 800065c:	231c      	movs	r3, #28
 800065e:	001a      	movs	r2, r3
 8000660:	2100      	movs	r1, #0
 8000662:	f005 fc43 	bl	8005eec <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000666:	1d3b      	adds	r3, r7, #4
 8000668:	0018      	movs	r0, r3
 800066a:	2320      	movs	r3, #32
 800066c:	001a      	movs	r2, r3
 800066e:	2100      	movs	r1, #0
 8000670:	f005 fc3c 	bl	8005eec <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000674:	4b45      	ldr	r3, [pc, #276]	; (800078c <MX_TIM1_Init+0x15c>)
 8000676:	4a46      	ldr	r2, [pc, #280]	; (8000790 <MX_TIM1_Init+0x160>)
 8000678:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800067a:	4b44      	ldr	r3, [pc, #272]	; (800078c <MX_TIM1_Init+0x15c>)
 800067c:	2200      	movs	r2, #0
 800067e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000680:	4b42      	ldr	r3, [pc, #264]	; (800078c <MX_TIM1_Init+0x15c>)
 8000682:	2200      	movs	r2, #0
 8000684:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000;
 8000686:	4b41      	ldr	r3, [pc, #260]	; (800078c <MX_TIM1_Init+0x15c>)
 8000688:	22fa      	movs	r2, #250	; 0xfa
 800068a:	00d2      	lsls	r2, r2, #3
 800068c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800068e:	4b3f      	ldr	r3, [pc, #252]	; (800078c <MX_TIM1_Init+0x15c>)
 8000690:	2200      	movs	r2, #0
 8000692:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000694:	4b3d      	ldr	r3, [pc, #244]	; (800078c <MX_TIM1_Init+0x15c>)
 8000696:	2200      	movs	r2, #0
 8000698:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800069a:	4b3c      	ldr	r3, [pc, #240]	; (800078c <MX_TIM1_Init+0x15c>)
 800069c:	2280      	movs	r2, #128	; 0x80
 800069e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80006a0:	4b3a      	ldr	r3, [pc, #232]	; (800078c <MX_TIM1_Init+0x15c>)
 80006a2:	0018      	movs	r0, r3
 80006a4:	f001 ffae 	bl	8002604 <HAL_TIM_Base_Init>
 80006a8:	1e03      	subs	r3, r0, #0
 80006aa:	d001      	beq.n	80006b0 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 80006ac:	f000 f8f8 	bl	80008a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006b0:	2148      	movs	r1, #72	; 0x48
 80006b2:	187b      	adds	r3, r7, r1
 80006b4:	2280      	movs	r2, #128	; 0x80
 80006b6:	0152      	lsls	r2, r2, #5
 80006b8:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80006ba:	187a      	adds	r2, r7, r1
 80006bc:	4b33      	ldr	r3, [pc, #204]	; (800078c <MX_TIM1_Init+0x15c>)
 80006be:	0011      	movs	r1, r2
 80006c0:	0018      	movs	r0, r3
 80006c2:	f002 f9bf 	bl	8002a44 <HAL_TIM_ConfigClockSource>
 80006c6:	1e03      	subs	r3, r0, #0
 80006c8:	d001      	beq.n	80006ce <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80006ca:	f000 f8e9 	bl	80008a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80006ce:	4b2f      	ldr	r3, [pc, #188]	; (800078c <MX_TIM1_Init+0x15c>)
 80006d0:	0018      	movs	r0, r3
 80006d2:	f001 ffe7 	bl	80026a4 <HAL_TIM_PWM_Init>
 80006d6:	1e03      	subs	r3, r0, #0
 80006d8:	d001      	beq.n	80006de <MX_TIM1_Init+0xae>
  {
    Error_Handler();
 80006da:	f000 f8e1 	bl	80008a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006de:	2140      	movs	r1, #64	; 0x40
 80006e0:	187b      	adds	r3, r7, r1
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006e6:	187b      	adds	r3, r7, r1
 80006e8:	2200      	movs	r2, #0
 80006ea:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006ec:	187a      	adds	r2, r7, r1
 80006ee:	4b27      	ldr	r3, [pc, #156]	; (800078c <MX_TIM1_Init+0x15c>)
 80006f0:	0011      	movs	r1, r2
 80006f2:	0018      	movs	r0, r3
 80006f4:	f002 fdaa 	bl	800324c <HAL_TIMEx_MasterConfigSynchronization>
 80006f8:	1e03      	subs	r3, r0, #0
 80006fa:	d001      	beq.n	8000700 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 80006fc:	f000 f8d0 	bl	80008a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000700:	2124      	movs	r1, #36	; 0x24
 8000702:	187b      	adds	r3, r7, r1
 8000704:	2260      	movs	r2, #96	; 0x60
 8000706:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000708:	187b      	adds	r3, r7, r1
 800070a:	2200      	movs	r2, #0
 800070c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800070e:	187b      	adds	r3, r7, r1
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000714:	187b      	adds	r3, r7, r1
 8000716:	2200      	movs	r2, #0
 8000718:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800071a:	187b      	adds	r3, r7, r1
 800071c:	2200      	movs	r2, #0
 800071e:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000720:	187b      	adds	r3, r7, r1
 8000722:	2200      	movs	r2, #0
 8000724:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000726:	1879      	adds	r1, r7, r1
 8000728:	4b18      	ldr	r3, [pc, #96]	; (800078c <MX_TIM1_Init+0x15c>)
 800072a:	220c      	movs	r2, #12
 800072c:	0018      	movs	r0, r3
 800072e:	f002 f8c3 	bl	80028b8 <HAL_TIM_PWM_ConfigChannel>
 8000732:	1e03      	subs	r3, r0, #0
 8000734:	d001      	beq.n	800073a <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 8000736:	f000 f8b3 	bl	80008a0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800073a:	1d3b      	adds	r3, r7, #4
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000740:	1d3b      	adds	r3, r7, #4
 8000742:	2200      	movs	r2, #0
 8000744:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000746:	1d3b      	adds	r3, r7, #4
 8000748:	2200      	movs	r2, #0
 800074a:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800074c:	1d3b      	adds	r3, r7, #4
 800074e:	2200      	movs	r2, #0
 8000750:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000752:	1d3b      	adds	r3, r7, #4
 8000754:	2200      	movs	r2, #0
 8000756:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000758:	1d3b      	adds	r3, r7, #4
 800075a:	2280      	movs	r2, #128	; 0x80
 800075c:	0192      	lsls	r2, r2, #6
 800075e:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000760:	1d3b      	adds	r3, r7, #4
 8000762:	2200      	movs	r2, #0
 8000764:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000766:	1d3a      	adds	r2, r7, #4
 8000768:	4b08      	ldr	r3, [pc, #32]	; (800078c <MX_TIM1_Init+0x15c>)
 800076a:	0011      	movs	r1, r2
 800076c:	0018      	movs	r0, r3
 800076e:	f002 fdc5 	bl	80032fc <HAL_TIMEx_ConfigBreakDeadTime>
 8000772:	1e03      	subs	r3, r0, #0
 8000774:	d001      	beq.n	800077a <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 8000776:	f000 f893 	bl	80008a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800077a:	4b04      	ldr	r3, [pc, #16]	; (800078c <MX_TIM1_Init+0x15c>)
 800077c:	0018      	movs	r0, r3
 800077e:	f000 f973 	bl	8000a68 <HAL_TIM_MspPostInit>

}
 8000782:	46c0      	nop			; (mov r8, r8)
 8000784:	46bd      	mov	sp, r7
 8000786:	b016      	add	sp, #88	; 0x58
 8000788:	bd80      	pop	{r7, pc}
 800078a:	46c0      	nop			; (mov r8, r8)
 800078c:	20002244 	.word	0x20002244
 8000790:	40012c00 	.word	0x40012c00

08000794 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000794:	b590      	push	{r4, r7, lr}
 8000796:	b089      	sub	sp, #36	; 0x24
 8000798:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079a:	240c      	movs	r4, #12
 800079c:	193b      	adds	r3, r7, r4
 800079e:	0018      	movs	r0, r3
 80007a0:	2314      	movs	r3, #20
 80007a2:	001a      	movs	r2, r3
 80007a4:	2100      	movs	r1, #0
 80007a6:	f005 fba1 	bl	8005eec <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007aa:	4b34      	ldr	r3, [pc, #208]	; (800087c <MX_GPIO_Init+0xe8>)
 80007ac:	695a      	ldr	r2, [r3, #20]
 80007ae:	4b33      	ldr	r3, [pc, #204]	; (800087c <MX_GPIO_Init+0xe8>)
 80007b0:	2180      	movs	r1, #128	; 0x80
 80007b2:	0309      	lsls	r1, r1, #12
 80007b4:	430a      	orrs	r2, r1
 80007b6:	615a      	str	r2, [r3, #20]
 80007b8:	4b30      	ldr	r3, [pc, #192]	; (800087c <MX_GPIO_Init+0xe8>)
 80007ba:	695a      	ldr	r2, [r3, #20]
 80007bc:	2380      	movs	r3, #128	; 0x80
 80007be:	031b      	lsls	r3, r3, #12
 80007c0:	4013      	ands	r3, r2
 80007c2:	60bb      	str	r3, [r7, #8]
 80007c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c6:	4b2d      	ldr	r3, [pc, #180]	; (800087c <MX_GPIO_Init+0xe8>)
 80007c8:	695a      	ldr	r2, [r3, #20]
 80007ca:	4b2c      	ldr	r3, [pc, #176]	; (800087c <MX_GPIO_Init+0xe8>)
 80007cc:	2180      	movs	r1, #128	; 0x80
 80007ce:	0289      	lsls	r1, r1, #10
 80007d0:	430a      	orrs	r2, r1
 80007d2:	615a      	str	r2, [r3, #20]
 80007d4:	4b29      	ldr	r3, [pc, #164]	; (800087c <MX_GPIO_Init+0xe8>)
 80007d6:	695a      	ldr	r2, [r3, #20]
 80007d8:	2380      	movs	r3, #128	; 0x80
 80007da:	029b      	lsls	r3, r3, #10
 80007dc:	4013      	ands	r3, r2
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e2:	4b26      	ldr	r3, [pc, #152]	; (800087c <MX_GPIO_Init+0xe8>)
 80007e4:	695a      	ldr	r2, [r3, #20]
 80007e6:	4b25      	ldr	r3, [pc, #148]	; (800087c <MX_GPIO_Init+0xe8>)
 80007e8:	2180      	movs	r1, #128	; 0x80
 80007ea:	02c9      	lsls	r1, r1, #11
 80007ec:	430a      	orrs	r2, r1
 80007ee:	615a      	str	r2, [r3, #20]
 80007f0:	4b22      	ldr	r3, [pc, #136]	; (800087c <MX_GPIO_Init+0xe8>)
 80007f2:	695a      	ldr	r2, [r3, #20]
 80007f4:	2380      	movs	r3, #128	; 0x80
 80007f6:	02db      	lsls	r3, r3, #11
 80007f8:	4013      	ands	r3, r2
 80007fa:	603b      	str	r3, [r7, #0]
 80007fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_11
 80007fe:	4920      	ldr	r1, [pc, #128]	; (8000880 <MX_GPIO_Init+0xec>)
 8000800:	4b20      	ldr	r3, [pc, #128]	; (8000884 <MX_GPIO_Init+0xf0>)
 8000802:	2200      	movs	r2, #0
 8000804:	0018      	movs	r0, r3
 8000806:	f000 fecb 	bl	80015a0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800080a:	193b      	adds	r3, r7, r4
 800080c:	221f      	movs	r2, #31
 800080e:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000810:	193b      	adds	r3, r7, r4
 8000812:	2200      	movs	r2, #0
 8000814:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	193b      	adds	r3, r7, r4
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800081c:	193b      	adds	r3, r7, r4
 800081e:	4a1a      	ldr	r2, [pc, #104]	; (8000888 <MX_GPIO_Init+0xf4>)
 8000820:	0019      	movs	r1, r3
 8000822:	0010      	movs	r0, r2
 8000824:	f000 fd4c 	bl	80012c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_11;
 8000828:	193b      	adds	r3, r7, r4
 800082a:	4a18      	ldr	r2, [pc, #96]	; (800088c <MX_GPIO_Init+0xf8>)
 800082c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082e:	193b      	adds	r3, r7, r4
 8000830:	2201      	movs	r2, #1
 8000832:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	193b      	adds	r3, r7, r4
 8000836:	2200      	movs	r2, #0
 8000838:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083a:	193b      	adds	r3, r7, r4
 800083c:	2200      	movs	r2, #0
 800083e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000840:	193b      	adds	r3, r7, r4
 8000842:	4a10      	ldr	r2, [pc, #64]	; (8000884 <MX_GPIO_Init+0xf0>)
 8000844:	0019      	movs	r1, r3
 8000846:	0010      	movs	r0, r2
 8000848:	f000 fd3a 	bl	80012c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800084c:	0021      	movs	r1, r4
 800084e:	187b      	adds	r3, r7, r1
 8000850:	22c0      	movs	r2, #192	; 0xc0
 8000852:	0092      	lsls	r2, r2, #2
 8000854:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000856:	187b      	adds	r3, r7, r1
 8000858:	2211      	movs	r2, #17
 800085a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	187b      	adds	r3, r7, r1
 800085e:	2200      	movs	r2, #0
 8000860:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000862:	187b      	adds	r3, r7, r1
 8000864:	2200      	movs	r2, #0
 8000866:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000868:	187b      	adds	r3, r7, r1
 800086a:	4a06      	ldr	r2, [pc, #24]	; (8000884 <MX_GPIO_Init+0xf0>)
 800086c:	0019      	movs	r1, r3
 800086e:	0010      	movs	r0, r2
 8000870:	f000 fd26 	bl	80012c0 <HAL_GPIO_Init>

}
 8000874:	46c0      	nop			; (mov r8, r8)
 8000876:	46bd      	mov	sp, r7
 8000878:	b009      	add	sp, #36	; 0x24
 800087a:	bd90      	pop	{r4, r7, pc}
 800087c:	40021000 	.word	0x40021000
 8000880:	00000b07 	.word	0x00000b07
 8000884:	48000400 	.word	0x48000400
 8000888:	48000800 	.word	0x48000800
 800088c:	00000807 	.word	0x00000807

08000890 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000898:	2001      	movs	r0, #1
 800089a:	f002 fe61 	bl	8003560 <osDelay>
 800089e:	e7fb      	b.n	8000898 <StartDefaultTask+0x8>

080008a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a4:	b672      	cpsid	i
}
 80008a6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008a8:	e7fe      	b.n	80008a8 <Error_Handler+0x8>
	...

080008ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008b2:	4b12      	ldr	r3, [pc, #72]	; (80008fc <HAL_MspInit+0x50>)
 80008b4:	699a      	ldr	r2, [r3, #24]
 80008b6:	4b11      	ldr	r3, [pc, #68]	; (80008fc <HAL_MspInit+0x50>)
 80008b8:	2101      	movs	r1, #1
 80008ba:	430a      	orrs	r2, r1
 80008bc:	619a      	str	r2, [r3, #24]
 80008be:	4b0f      	ldr	r3, [pc, #60]	; (80008fc <HAL_MspInit+0x50>)
 80008c0:	699b      	ldr	r3, [r3, #24]
 80008c2:	2201      	movs	r2, #1
 80008c4:	4013      	ands	r3, r2
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ca:	4b0c      	ldr	r3, [pc, #48]	; (80008fc <HAL_MspInit+0x50>)
 80008cc:	69da      	ldr	r2, [r3, #28]
 80008ce:	4b0b      	ldr	r3, [pc, #44]	; (80008fc <HAL_MspInit+0x50>)
 80008d0:	2180      	movs	r1, #128	; 0x80
 80008d2:	0549      	lsls	r1, r1, #21
 80008d4:	430a      	orrs	r2, r1
 80008d6:	61da      	str	r2, [r3, #28]
 80008d8:	4b08      	ldr	r3, [pc, #32]	; (80008fc <HAL_MspInit+0x50>)
 80008da:	69da      	ldr	r2, [r3, #28]
 80008dc:	2380      	movs	r3, #128	; 0x80
 80008de:	055b      	lsls	r3, r3, #21
 80008e0:	4013      	ands	r3, r2
 80008e2:	603b      	str	r3, [r7, #0]
 80008e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 80008e6:	2302      	movs	r3, #2
 80008e8:	425b      	negs	r3, r3
 80008ea:	2200      	movs	r2, #0
 80008ec:	2103      	movs	r1, #3
 80008ee:	0018      	movs	r0, r3
 80008f0:	f000 fcc4 	bl	800127c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008f4:	46c0      	nop			; (mov r8, r8)
 80008f6:	46bd      	mov	sp, r7
 80008f8:	b002      	add	sp, #8
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	40021000 	.word	0x40021000

08000900 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000900:	b590      	push	{r4, r7, lr}
 8000902:	b08b      	sub	sp, #44	; 0x2c
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000908:	2414      	movs	r4, #20
 800090a:	193b      	adds	r3, r7, r4
 800090c:	0018      	movs	r0, r3
 800090e:	2314      	movs	r3, #20
 8000910:	001a      	movs	r2, r3
 8000912:	2100      	movs	r1, #0
 8000914:	f005 faea 	bl	8005eec <memset>
  if(hadc->Instance==ADC1)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a19      	ldr	r2, [pc, #100]	; (8000984 <HAL_ADC_MspInit+0x84>)
 800091e:	4293      	cmp	r3, r2
 8000920:	d12b      	bne.n	800097a <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000922:	4b19      	ldr	r3, [pc, #100]	; (8000988 <HAL_ADC_MspInit+0x88>)
 8000924:	699a      	ldr	r2, [r3, #24]
 8000926:	4b18      	ldr	r3, [pc, #96]	; (8000988 <HAL_ADC_MspInit+0x88>)
 8000928:	2180      	movs	r1, #128	; 0x80
 800092a:	0089      	lsls	r1, r1, #2
 800092c:	430a      	orrs	r2, r1
 800092e:	619a      	str	r2, [r3, #24]
 8000930:	4b15      	ldr	r3, [pc, #84]	; (8000988 <HAL_ADC_MspInit+0x88>)
 8000932:	699a      	ldr	r2, [r3, #24]
 8000934:	2380      	movs	r3, #128	; 0x80
 8000936:	009b      	lsls	r3, r3, #2
 8000938:	4013      	ands	r3, r2
 800093a:	613b      	str	r3, [r7, #16]
 800093c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800093e:	4b12      	ldr	r3, [pc, #72]	; (8000988 <HAL_ADC_MspInit+0x88>)
 8000940:	695a      	ldr	r2, [r3, #20]
 8000942:	4b11      	ldr	r3, [pc, #68]	; (8000988 <HAL_ADC_MspInit+0x88>)
 8000944:	2180      	movs	r1, #128	; 0x80
 8000946:	0289      	lsls	r1, r1, #10
 8000948:	430a      	orrs	r2, r1
 800094a:	615a      	str	r2, [r3, #20]
 800094c:	4b0e      	ldr	r3, [pc, #56]	; (8000988 <HAL_ADC_MspInit+0x88>)
 800094e:	695a      	ldr	r2, [r3, #20]
 8000950:	2380      	movs	r3, #128	; 0x80
 8000952:	029b      	lsls	r3, r3, #10
 8000954:	4013      	ands	r3, r2
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800095a:	193b      	adds	r3, r7, r4
 800095c:	2201      	movs	r2, #1
 800095e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000960:	193b      	adds	r3, r7, r4
 8000962:	2203      	movs	r2, #3
 8000964:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	193b      	adds	r3, r7, r4
 8000968:	2200      	movs	r2, #0
 800096a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096c:	193a      	adds	r2, r7, r4
 800096e:	2390      	movs	r3, #144	; 0x90
 8000970:	05db      	lsls	r3, r3, #23
 8000972:	0011      	movs	r1, r2
 8000974:	0018      	movs	r0, r3
 8000976:	f000 fca3 	bl	80012c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800097a:	46c0      	nop			; (mov r8, r8)
 800097c:	46bd      	mov	sp, r7
 800097e:	b00b      	add	sp, #44	; 0x2c
 8000980:	bd90      	pop	{r4, r7, pc}
 8000982:	46c0      	nop			; (mov r8, r8)
 8000984:	40012400 	.word	0x40012400
 8000988:	40021000 	.word	0x40021000

0800098c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800098c:	b590      	push	{r4, r7, lr}
 800098e:	b08b      	sub	sp, #44	; 0x2c
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000994:	2414      	movs	r4, #20
 8000996:	193b      	adds	r3, r7, r4
 8000998:	0018      	movs	r0, r3
 800099a:	2314      	movs	r3, #20
 800099c:	001a      	movs	r2, r3
 800099e:	2100      	movs	r1, #0
 80009a0:	f005 faa4 	bl	8005eec <memset>
  if(hi2c->Instance==I2C2)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a1c      	ldr	r2, [pc, #112]	; (8000a1c <HAL_I2C_MspInit+0x90>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d132      	bne.n	8000a14 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ae:	4b1c      	ldr	r3, [pc, #112]	; (8000a20 <HAL_I2C_MspInit+0x94>)
 80009b0:	695a      	ldr	r2, [r3, #20]
 80009b2:	4b1b      	ldr	r3, [pc, #108]	; (8000a20 <HAL_I2C_MspInit+0x94>)
 80009b4:	2180      	movs	r1, #128	; 0x80
 80009b6:	02c9      	lsls	r1, r1, #11
 80009b8:	430a      	orrs	r2, r1
 80009ba:	615a      	str	r2, [r3, #20]
 80009bc:	4b18      	ldr	r3, [pc, #96]	; (8000a20 <HAL_I2C_MspInit+0x94>)
 80009be:	695a      	ldr	r2, [r3, #20]
 80009c0:	2380      	movs	r3, #128	; 0x80
 80009c2:	02db      	lsls	r3, r3, #11
 80009c4:	4013      	ands	r3, r2
 80009c6:	613b      	str	r3, [r7, #16]
 80009c8:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB13     ------> I2C2_SCL
    PB14     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80009ca:	193b      	adds	r3, r7, r4
 80009cc:	22c0      	movs	r2, #192	; 0xc0
 80009ce:	01d2      	lsls	r2, r2, #7
 80009d0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009d2:	0021      	movs	r1, r4
 80009d4:	187b      	adds	r3, r7, r1
 80009d6:	2212      	movs	r2, #18
 80009d8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009da:	187b      	adds	r3, r7, r1
 80009dc:	2201      	movs	r2, #1
 80009de:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009e0:	187b      	adds	r3, r7, r1
 80009e2:	2203      	movs	r2, #3
 80009e4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_I2C2;
 80009e6:	187b      	adds	r3, r7, r1
 80009e8:	2205      	movs	r2, #5
 80009ea:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ec:	187b      	adds	r3, r7, r1
 80009ee:	4a0d      	ldr	r2, [pc, #52]	; (8000a24 <HAL_I2C_MspInit+0x98>)
 80009f0:	0019      	movs	r1, r3
 80009f2:	0010      	movs	r0, r2
 80009f4:	f000 fc64 	bl	80012c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80009f8:	4b09      	ldr	r3, [pc, #36]	; (8000a20 <HAL_I2C_MspInit+0x94>)
 80009fa:	69da      	ldr	r2, [r3, #28]
 80009fc:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <HAL_I2C_MspInit+0x94>)
 80009fe:	2180      	movs	r1, #128	; 0x80
 8000a00:	03c9      	lsls	r1, r1, #15
 8000a02:	430a      	orrs	r2, r1
 8000a04:	61da      	str	r2, [r3, #28]
 8000a06:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <HAL_I2C_MspInit+0x94>)
 8000a08:	69da      	ldr	r2, [r3, #28]
 8000a0a:	2380      	movs	r3, #128	; 0x80
 8000a0c:	03db      	lsls	r3, r3, #15
 8000a0e:	4013      	ands	r3, r2
 8000a10:	60fb      	str	r3, [r7, #12]
 8000a12:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000a14:	46c0      	nop			; (mov r8, r8)
 8000a16:	46bd      	mov	sp, r7
 8000a18:	b00b      	add	sp, #44	; 0x2c
 8000a1a:	bd90      	pop	{r4, r7, pc}
 8000a1c:	40005800 	.word	0x40005800
 8000a20:	40021000 	.word	0x40021000
 8000a24:	48000400 	.word	0x48000400

08000a28 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a0a      	ldr	r2, [pc, #40]	; (8000a60 <HAL_TIM_Base_MspInit+0x38>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d10d      	bne.n	8000a56 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a3a:	4b0a      	ldr	r3, [pc, #40]	; (8000a64 <HAL_TIM_Base_MspInit+0x3c>)
 8000a3c:	699a      	ldr	r2, [r3, #24]
 8000a3e:	4b09      	ldr	r3, [pc, #36]	; (8000a64 <HAL_TIM_Base_MspInit+0x3c>)
 8000a40:	2180      	movs	r1, #128	; 0x80
 8000a42:	0109      	lsls	r1, r1, #4
 8000a44:	430a      	orrs	r2, r1
 8000a46:	619a      	str	r2, [r3, #24]
 8000a48:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <HAL_TIM_Base_MspInit+0x3c>)
 8000a4a:	699a      	ldr	r2, [r3, #24]
 8000a4c:	2380      	movs	r3, #128	; 0x80
 8000a4e:	011b      	lsls	r3, r3, #4
 8000a50:	4013      	ands	r3, r2
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000a56:	46c0      	nop			; (mov r8, r8)
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	b004      	add	sp, #16
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	46c0      	nop			; (mov r8, r8)
 8000a60:	40012c00 	.word	0x40012c00
 8000a64:	40021000 	.word	0x40021000

08000a68 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a68:	b590      	push	{r4, r7, lr}
 8000a6a:	b089      	sub	sp, #36	; 0x24
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a70:	240c      	movs	r4, #12
 8000a72:	193b      	adds	r3, r7, r4
 8000a74:	0018      	movs	r0, r3
 8000a76:	2314      	movs	r3, #20
 8000a78:	001a      	movs	r2, r3
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	f005 fa36 	bl	8005eec <memset>
  if(htim->Instance==TIM1)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a16      	ldr	r2, [pc, #88]	; (8000ae0 <HAL_TIM_MspPostInit+0x78>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d125      	bne.n	8000ad6 <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8a:	4b16      	ldr	r3, [pc, #88]	; (8000ae4 <HAL_TIM_MspPostInit+0x7c>)
 8000a8c:	695a      	ldr	r2, [r3, #20]
 8000a8e:	4b15      	ldr	r3, [pc, #84]	; (8000ae4 <HAL_TIM_MspPostInit+0x7c>)
 8000a90:	2180      	movs	r1, #128	; 0x80
 8000a92:	0289      	lsls	r1, r1, #10
 8000a94:	430a      	orrs	r2, r1
 8000a96:	615a      	str	r2, [r3, #20]
 8000a98:	4b12      	ldr	r3, [pc, #72]	; (8000ae4 <HAL_TIM_MspPostInit+0x7c>)
 8000a9a:	695a      	ldr	r2, [r3, #20]
 8000a9c:	2380      	movs	r3, #128	; 0x80
 8000a9e:	029b      	lsls	r3, r3, #10
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	60bb      	str	r3, [r7, #8]
 8000aa4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000aa6:	193b      	adds	r3, r7, r4
 8000aa8:	2280      	movs	r2, #128	; 0x80
 8000aaa:	0112      	lsls	r2, r2, #4
 8000aac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aae:	0021      	movs	r1, r4
 8000ab0:	187b      	adds	r3, r7, r1
 8000ab2:	2202      	movs	r2, #2
 8000ab4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	187b      	adds	r3, r7, r1
 8000ab8:	2200      	movs	r2, #0
 8000aba:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000abc:	187b      	adds	r3, r7, r1
 8000abe:	2200      	movs	r2, #0
 8000ac0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000ac2:	187b      	adds	r3, r7, r1
 8000ac4:	2202      	movs	r2, #2
 8000ac6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac8:	187a      	adds	r2, r7, r1
 8000aca:	2390      	movs	r3, #144	; 0x90
 8000acc:	05db      	lsls	r3, r3, #23
 8000ace:	0011      	movs	r1, r2
 8000ad0:	0018      	movs	r0, r3
 8000ad2:	f000 fbf5 	bl	80012c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000ad6:	46c0      	nop			; (mov r8, r8)
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	b009      	add	sp, #36	; 0x24
 8000adc:	bd90      	pop	{r4, r7, pc}
 8000ade:	46c0      	nop			; (mov r8, r8)
 8000ae0:	40012c00 	.word	0x40012c00
 8000ae4:	40021000 	.word	0x40021000

08000ae8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000aec:	e7fe      	b.n	8000aec <NMI_Handler+0x4>

08000aee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aee:	b580      	push	{r7, lr}
 8000af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000af2:	e7fe      	b.n	8000af2 <HardFault_Handler+0x4>

08000af4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000af8:	f000 f8b8 	bl	8000c6c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000afc:	f004 f8c4 	bl	8004c88 <xTaskGetSchedulerState>
 8000b00:	0003      	movs	r3, r0
 8000b02:	2b01      	cmp	r3, #1
 8000b04:	d001      	beq.n	8000b0a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000b06:	f004 fe47 	bl	8005798 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b0a:	46c0      	nop			; (mov r8, r8)
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}

08000b10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b086      	sub	sp, #24
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b18:	4a14      	ldr	r2, [pc, #80]	; (8000b6c <_sbrk+0x5c>)
 8000b1a:	4b15      	ldr	r3, [pc, #84]	; (8000b70 <_sbrk+0x60>)
 8000b1c:	1ad3      	subs	r3, r2, r3
 8000b1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b24:	4b13      	ldr	r3, [pc, #76]	; (8000b74 <_sbrk+0x64>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d102      	bne.n	8000b32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b2c:	4b11      	ldr	r3, [pc, #68]	; (8000b74 <_sbrk+0x64>)
 8000b2e:	4a12      	ldr	r2, [pc, #72]	; (8000b78 <_sbrk+0x68>)
 8000b30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b32:	4b10      	ldr	r3, [pc, #64]	; (8000b74 <_sbrk+0x64>)
 8000b34:	681a      	ldr	r2, [r3, #0]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	18d3      	adds	r3, r2, r3
 8000b3a:	693a      	ldr	r2, [r7, #16]
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	d207      	bcs.n	8000b50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b40:	f005 f98e 	bl	8005e60 <__errno>
 8000b44:	0003      	movs	r3, r0
 8000b46:	220c      	movs	r2, #12
 8000b48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	425b      	negs	r3, r3
 8000b4e:	e009      	b.n	8000b64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b50:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <_sbrk+0x64>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b56:	4b07      	ldr	r3, [pc, #28]	; (8000b74 <_sbrk+0x64>)
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	18d2      	adds	r2, r2, r3
 8000b5e:	4b05      	ldr	r3, [pc, #20]	; (8000b74 <_sbrk+0x64>)
 8000b60:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000b62:	68fb      	ldr	r3, [r7, #12]
}
 8000b64:	0018      	movs	r0, r3
 8000b66:	46bd      	mov	sp, r7
 8000b68:	b006      	add	sp, #24
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	20004000 	.word	0x20004000
 8000b70:	00000400 	.word	0x00000400
 8000b74:	2000009c 	.word	0x2000009c
 8000b78:	20002320 	.word	0x20002320

08000b7c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000b80:	46c0      	nop			; (mov r8, r8)
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
	...

08000b88 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b88:	480d      	ldr	r0, [pc, #52]	; (8000bc0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b8a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b8c:	480d      	ldr	r0, [pc, #52]	; (8000bc4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b8e:	490e      	ldr	r1, [pc, #56]	; (8000bc8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b90:	4a0e      	ldr	r2, [pc, #56]	; (8000bcc <LoopForever+0xe>)
  movs r3, #0
 8000b92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b94:	e002      	b.n	8000b9c <LoopCopyDataInit>

08000b96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b9a:	3304      	adds	r3, #4

08000b9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba0:	d3f9      	bcc.n	8000b96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ba2:	4a0b      	ldr	r2, [pc, #44]	; (8000bd0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ba4:	4c0b      	ldr	r4, [pc, #44]	; (8000bd4 <LoopForever+0x16>)
  movs r3, #0
 8000ba6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ba8:	e001      	b.n	8000bae <LoopFillZerobss>

08000baa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000baa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bac:	3204      	adds	r2, #4

08000bae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb0:	d3fb      	bcc.n	8000baa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000bb2:	f7ff ffe3 	bl	8000b7c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000bb6:	f005 f959 	bl	8005e6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bba:	f7ff fc21 	bl	8000400 <main>

08000bbe <LoopForever>:

LoopForever:
    b LoopForever
 8000bbe:	e7fe      	b.n	8000bbe <LoopForever>
  ldr   r0, =_estack
 8000bc0:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000bc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bc8:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000bcc:	08006ec8 	.word	0x08006ec8
  ldr r2, =_sbss
 8000bd0:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000bd4:	20002320 	.word	0x20002320

08000bd8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bd8:	e7fe      	b.n	8000bd8 <ADC1_IRQHandler>
	...

08000bdc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000be0:	4b07      	ldr	r3, [pc, #28]	; (8000c00 <HAL_Init+0x24>)
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <HAL_Init+0x24>)
 8000be6:	2110      	movs	r1, #16
 8000be8:	430a      	orrs	r2, r1
 8000bea:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000bec:	2003      	movs	r0, #3
 8000bee:	f000 f809 	bl	8000c04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bf2:	f7ff fe5b 	bl	80008ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bf6:	2300      	movs	r3, #0
}
 8000bf8:	0018      	movs	r0, r3
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	46c0      	nop			; (mov r8, r8)
 8000c00:	40022000 	.word	0x40022000

08000c04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c04:	b590      	push	{r4, r7, lr}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c0c:	4b14      	ldr	r3, [pc, #80]	; (8000c60 <HAL_InitTick+0x5c>)
 8000c0e:	681c      	ldr	r4, [r3, #0]
 8000c10:	4b14      	ldr	r3, [pc, #80]	; (8000c64 <HAL_InitTick+0x60>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	0019      	movs	r1, r3
 8000c16:	23fa      	movs	r3, #250	; 0xfa
 8000c18:	0098      	lsls	r0, r3, #2
 8000c1a:	f7ff fa7f 	bl	800011c <__udivsi3>
 8000c1e:	0003      	movs	r3, r0
 8000c20:	0019      	movs	r1, r3
 8000c22:	0020      	movs	r0, r4
 8000c24:	f7ff fa7a 	bl	800011c <__udivsi3>
 8000c28:	0003      	movs	r3, r0
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	f000 fb3b 	bl	80012a6 <HAL_SYSTICK_Config>
 8000c30:	1e03      	subs	r3, r0, #0
 8000c32:	d001      	beq.n	8000c38 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000c34:	2301      	movs	r3, #1
 8000c36:	e00f      	b.n	8000c58 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2b03      	cmp	r3, #3
 8000c3c:	d80b      	bhi.n	8000c56 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c3e:	6879      	ldr	r1, [r7, #4]
 8000c40:	2301      	movs	r3, #1
 8000c42:	425b      	negs	r3, r3
 8000c44:	2200      	movs	r2, #0
 8000c46:	0018      	movs	r0, r3
 8000c48:	f000 fb18 	bl	800127c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c4c:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <HAL_InitTick+0x64>)
 8000c4e:	687a      	ldr	r2, [r7, #4]
 8000c50:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000c52:	2300      	movs	r3, #0
 8000c54:	e000      	b.n	8000c58 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000c56:	2301      	movs	r3, #1
}
 8000c58:	0018      	movs	r0, r3
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	b003      	add	sp, #12
 8000c5e:	bd90      	pop	{r4, r7, pc}
 8000c60:	20000000 	.word	0x20000000
 8000c64:	20000008 	.word	0x20000008
 8000c68:	20000004 	.word	0x20000004

08000c6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c70:	4b05      	ldr	r3, [pc, #20]	; (8000c88 <HAL_IncTick+0x1c>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	001a      	movs	r2, r3
 8000c76:	4b05      	ldr	r3, [pc, #20]	; (8000c8c <HAL_IncTick+0x20>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	18d2      	adds	r2, r2, r3
 8000c7c:	4b03      	ldr	r3, [pc, #12]	; (8000c8c <HAL_IncTick+0x20>)
 8000c7e:	601a      	str	r2, [r3, #0]
}
 8000c80:	46c0      	nop			; (mov r8, r8)
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	46c0      	nop			; (mov r8, r8)
 8000c88:	20000008 	.word	0x20000008
 8000c8c:	200022cc 	.word	0x200022cc

08000c90 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  return uwTick;
 8000c94:	4b02      	ldr	r3, [pc, #8]	; (8000ca0 <HAL_GetTick+0x10>)
 8000c96:	681b      	ldr	r3, [r3, #0]
}
 8000c98:	0018      	movs	r0, r3
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	46c0      	nop			; (mov r8, r8)
 8000ca0:	200022cc 	.word	0x200022cc

08000ca4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cac:	f7ff fff0 	bl	8000c90 <HAL_GetTick>
 8000cb0:	0003      	movs	r3, r0
 8000cb2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	3301      	adds	r3, #1
 8000cbc:	d005      	beq.n	8000cca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cbe:	4b0a      	ldr	r3, [pc, #40]	; (8000ce8 <HAL_Delay+0x44>)
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	001a      	movs	r2, r3
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	189b      	adds	r3, r3, r2
 8000cc8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000cca:	46c0      	nop			; (mov r8, r8)
 8000ccc:	f7ff ffe0 	bl	8000c90 <HAL_GetTick>
 8000cd0:	0002      	movs	r2, r0
 8000cd2:	68bb      	ldr	r3, [r7, #8]
 8000cd4:	1ad3      	subs	r3, r2, r3
 8000cd6:	68fa      	ldr	r2, [r7, #12]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	d8f7      	bhi.n	8000ccc <HAL_Delay+0x28>
  {
  }
}
 8000cdc:	46c0      	nop			; (mov r8, r8)
 8000cde:	46c0      	nop			; (mov r8, r8)
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	b004      	add	sp, #16
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	46c0      	nop			; (mov r8, r8)
 8000ce8:	20000008 	.word	0x20000008

08000cec <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cf4:	230f      	movs	r3, #15
 8000cf6:	18fb      	adds	r3, r7, r3
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d101      	bne.n	8000d0a <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8000d06:	2301      	movs	r3, #1
 8000d08:	e125      	b.n	8000f56 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d10a      	bne.n	8000d28 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2200      	movs	r2, #0
 8000d16:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2234      	movs	r2, #52	; 0x34
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	0018      	movs	r0, r3
 8000d24:	f7ff fdec 	bl	8000900 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d2c:	2210      	movs	r2, #16
 8000d2e:	4013      	ands	r3, r2
 8000d30:	d000      	beq.n	8000d34 <HAL_ADC_Init+0x48>
 8000d32:	e103      	b.n	8000f3c <HAL_ADC_Init+0x250>
 8000d34:	230f      	movs	r3, #15
 8000d36:	18fb      	adds	r3, r7, r3
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d000      	beq.n	8000d40 <HAL_ADC_Init+0x54>
 8000d3e:	e0fd      	b.n	8000f3c <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	689b      	ldr	r3, [r3, #8]
 8000d46:	2204      	movs	r2, #4
 8000d48:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000d4a:	d000      	beq.n	8000d4e <HAL_ADC_Init+0x62>
 8000d4c:	e0f6      	b.n	8000f3c <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d52:	4a83      	ldr	r2, [pc, #524]	; (8000f60 <HAL_ADC_Init+0x274>)
 8000d54:	4013      	ands	r3, r2
 8000d56:	2202      	movs	r2, #2
 8000d58:	431a      	orrs	r2, r3
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	689b      	ldr	r3, [r3, #8]
 8000d64:	2203      	movs	r2, #3
 8000d66:	4013      	ands	r3, r2
 8000d68:	2b01      	cmp	r3, #1
 8000d6a:	d112      	bne.n	8000d92 <HAL_ADC_Init+0xa6>
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	2201      	movs	r2, #1
 8000d74:	4013      	ands	r3, r2
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d009      	beq.n	8000d8e <HAL_ADC_Init+0xa2>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	68da      	ldr	r2, [r3, #12]
 8000d80:	2380      	movs	r3, #128	; 0x80
 8000d82:	021b      	lsls	r3, r3, #8
 8000d84:	401a      	ands	r2, r3
 8000d86:	2380      	movs	r3, #128	; 0x80
 8000d88:	021b      	lsls	r3, r3, #8
 8000d8a:	429a      	cmp	r2, r3
 8000d8c:	d101      	bne.n	8000d92 <HAL_ADC_Init+0xa6>
 8000d8e:	2301      	movs	r3, #1
 8000d90:	e000      	b.n	8000d94 <HAL_ADC_Init+0xa8>
 8000d92:	2300      	movs	r3, #0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d116      	bne.n	8000dc6 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	68db      	ldr	r3, [r3, #12]
 8000d9e:	2218      	movs	r2, #24
 8000da0:	4393      	bics	r3, r2
 8000da2:	0019      	movs	r1, r3
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	689a      	ldr	r2, [r3, #8]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	430a      	orrs	r2, r1
 8000dae:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	691b      	ldr	r3, [r3, #16]
 8000db6:	009b      	lsls	r3, r3, #2
 8000db8:	0899      	lsrs	r1, r3, #2
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	685a      	ldr	r2, [r3, #4]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	430a      	orrs	r2, r1
 8000dc4:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	68da      	ldr	r2, [r3, #12]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4964      	ldr	r1, [pc, #400]	; (8000f64 <HAL_ADC_Init+0x278>)
 8000dd2:	400a      	ands	r2, r1
 8000dd4:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	7e1b      	ldrb	r3, [r3, #24]
 8000dda:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	7e5b      	ldrb	r3, [r3, #25]
 8000de0:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000de2:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	7e9b      	ldrb	r3, [r3, #26]
 8000de8:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000dea:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d002      	beq.n	8000dfa <HAL_ADC_Init+0x10e>
 8000df4:	2380      	movs	r3, #128	; 0x80
 8000df6:	015b      	lsls	r3, r3, #5
 8000df8:	e000      	b.n	8000dfc <HAL_ADC_Init+0x110>
 8000dfa:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000dfc:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000e02:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	691b      	ldr	r3, [r3, #16]
 8000e08:	2b02      	cmp	r3, #2
 8000e0a:	d101      	bne.n	8000e10 <HAL_ADC_Init+0x124>
 8000e0c:	2304      	movs	r3, #4
 8000e0e:	e000      	b.n	8000e12 <HAL_ADC_Init+0x126>
 8000e10:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8000e12:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2124      	movs	r1, #36	; 0x24
 8000e18:	5c5b      	ldrb	r3, [r3, r1]
 8000e1a:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000e1c:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000e1e:	68ba      	ldr	r2, [r7, #8]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	7edb      	ldrb	r3, [r3, #27]
 8000e28:	2b01      	cmp	r3, #1
 8000e2a:	d115      	bne.n	8000e58 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	7e9b      	ldrb	r3, [r3, #26]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d105      	bne.n	8000e40 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	2280      	movs	r2, #128	; 0x80
 8000e38:	0252      	lsls	r2, r2, #9
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	60bb      	str	r3, [r7, #8]
 8000e3e:	e00b      	b.n	8000e58 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e44:	2220      	movs	r2, #32
 8000e46:	431a      	orrs	r2, r3
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e50:	2201      	movs	r2, #1
 8000e52:	431a      	orrs	r2, r3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	69da      	ldr	r2, [r3, #28]
 8000e5c:	23c2      	movs	r3, #194	; 0xc2
 8000e5e:	33ff      	adds	r3, #255	; 0xff
 8000e60:	429a      	cmp	r2, r3
 8000e62:	d007      	beq.n	8000e74 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	68ba      	ldr	r2, [r7, #8]
 8000e70:	4313      	orrs	r3, r2
 8000e72:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	68d9      	ldr	r1, [r3, #12]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	68ba      	ldr	r2, [r7, #8]
 8000e80:	430a      	orrs	r2, r1
 8000e82:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e88:	2380      	movs	r3, #128	; 0x80
 8000e8a:	055b      	lsls	r3, r3, #21
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	d01b      	beq.n	8000ec8 <HAL_ADC_Init+0x1dc>
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d017      	beq.n	8000ec8 <HAL_ADC_Init+0x1dc>
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e9c:	2b02      	cmp	r3, #2
 8000e9e:	d013      	beq.n	8000ec8 <HAL_ADC_Init+0x1dc>
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ea4:	2b03      	cmp	r3, #3
 8000ea6:	d00f      	beq.n	8000ec8 <HAL_ADC_Init+0x1dc>
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eac:	2b04      	cmp	r3, #4
 8000eae:	d00b      	beq.n	8000ec8 <HAL_ADC_Init+0x1dc>
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eb4:	2b05      	cmp	r3, #5
 8000eb6:	d007      	beq.n	8000ec8 <HAL_ADC_Init+0x1dc>
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ebc:	2b06      	cmp	r3, #6
 8000ebe:	d003      	beq.n	8000ec8 <HAL_ADC_Init+0x1dc>
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ec4:	2b07      	cmp	r3, #7
 8000ec6:	d112      	bne.n	8000eee <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	695a      	ldr	r2, [r3, #20]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	2107      	movs	r1, #7
 8000ed4:	438a      	bics	r2, r1
 8000ed6:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	6959      	ldr	r1, [r3, #20]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ee2:	2207      	movs	r2, #7
 8000ee4:	401a      	ands	r2, r3
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	430a      	orrs	r2, r1
 8000eec:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	4a1c      	ldr	r2, [pc, #112]	; (8000f68 <HAL_ADC_Init+0x27c>)
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	68ba      	ldr	r2, [r7, #8]
 8000efa:	429a      	cmp	r2, r3
 8000efc:	d10b      	bne.n	8000f16 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2200      	movs	r2, #0
 8000f02:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f08:	2203      	movs	r2, #3
 8000f0a:	4393      	bics	r3, r2
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	431a      	orrs	r2, r3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000f14:	e01c      	b.n	8000f50 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f1a:	2212      	movs	r2, #18
 8000f1c:	4393      	bics	r3, r2
 8000f1e:	2210      	movs	r2, #16
 8000f20:	431a      	orrs	r2, r3
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	431a      	orrs	r2, r3
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8000f32:	230f      	movs	r3, #15
 8000f34:	18fb      	adds	r3, r7, r3
 8000f36:	2201      	movs	r2, #1
 8000f38:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000f3a:	e009      	b.n	8000f50 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f40:	2210      	movs	r2, #16
 8000f42:	431a      	orrs	r2, r3
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8000f48:	230f      	movs	r3, #15
 8000f4a:	18fb      	adds	r3, r7, r3
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000f50:	230f      	movs	r3, #15
 8000f52:	18fb      	adds	r3, r7, r3
 8000f54:	781b      	ldrb	r3, [r3, #0]
}
 8000f56:	0018      	movs	r0, r3
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	b004      	add	sp, #16
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	46c0      	nop			; (mov r8, r8)
 8000f60:	fffffefd 	.word	0xfffffefd
 8000f64:	fffe0219 	.word	0xfffe0219
 8000f68:	833fffe7 	.word	0x833fffe7

08000f6c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f76:	230f      	movs	r3, #15
 8000f78:	18fb      	adds	r3, r7, r3
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f86:	2380      	movs	r3, #128	; 0x80
 8000f88:	055b      	lsls	r3, r3, #21
 8000f8a:	429a      	cmp	r2, r3
 8000f8c:	d011      	beq.n	8000fb2 <HAL_ADC_ConfigChannel+0x46>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d00d      	beq.n	8000fb2 <HAL_ADC_ConfigChannel+0x46>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f9a:	2b02      	cmp	r3, #2
 8000f9c:	d009      	beq.n	8000fb2 <HAL_ADC_ConfigChannel+0x46>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fa2:	2b03      	cmp	r3, #3
 8000fa4:	d005      	beq.n	8000fb2 <HAL_ADC_ConfigChannel+0x46>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000faa:	2b04      	cmp	r3, #4
 8000fac:	d001      	beq.n	8000fb2 <HAL_ADC_ConfigChannel+0x46>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2234      	movs	r2, #52	; 0x34
 8000fb6:	5c9b      	ldrb	r3, [r3, r2]
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d101      	bne.n	8000fc0 <HAL_ADC_ConfigChannel+0x54>
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	e0bb      	b.n	8001138 <HAL_ADC_ConfigChannel+0x1cc>
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2234      	movs	r2, #52	; 0x34
 8000fc4:	2101      	movs	r1, #1
 8000fc6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	2204      	movs	r2, #4
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	d000      	beq.n	8000fd6 <HAL_ADC_ConfigChannel+0x6a>
 8000fd4:	e09f      	b.n	8001116 <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	4a59      	ldr	r2, [pc, #356]	; (8001140 <HAL_ADC_ConfigChannel+0x1d4>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d100      	bne.n	8000fe2 <HAL_ADC_ConfigChannel+0x76>
 8000fe0:	e077      	b.n	80010d2 <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	2201      	movs	r2, #1
 8000fee:	409a      	lsls	r2, r3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	430a      	orrs	r2, r1
 8000ff6:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ffc:	2380      	movs	r3, #128	; 0x80
 8000ffe:	055b      	lsls	r3, r3, #21
 8001000:	429a      	cmp	r2, r3
 8001002:	d037      	beq.n	8001074 <HAL_ADC_ConfigChannel+0x108>
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001008:	2b01      	cmp	r3, #1
 800100a:	d033      	beq.n	8001074 <HAL_ADC_ConfigChannel+0x108>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001010:	2b02      	cmp	r3, #2
 8001012:	d02f      	beq.n	8001074 <HAL_ADC_ConfigChannel+0x108>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001018:	2b03      	cmp	r3, #3
 800101a:	d02b      	beq.n	8001074 <HAL_ADC_ConfigChannel+0x108>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001020:	2b04      	cmp	r3, #4
 8001022:	d027      	beq.n	8001074 <HAL_ADC_ConfigChannel+0x108>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001028:	2b05      	cmp	r3, #5
 800102a:	d023      	beq.n	8001074 <HAL_ADC_ConfigChannel+0x108>
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001030:	2b06      	cmp	r3, #6
 8001032:	d01f      	beq.n	8001074 <HAL_ADC_ConfigChannel+0x108>
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001038:	2b07      	cmp	r3, #7
 800103a:	d01b      	beq.n	8001074 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	689a      	ldr	r2, [r3, #8]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	695b      	ldr	r3, [r3, #20]
 8001046:	2107      	movs	r1, #7
 8001048:	400b      	ands	r3, r1
 800104a:	429a      	cmp	r2, r3
 800104c:	d012      	beq.n	8001074 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	695a      	ldr	r2, [r3, #20]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2107      	movs	r1, #7
 800105a:	438a      	bics	r2, r1
 800105c:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	6959      	ldr	r1, [r3, #20]
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	689b      	ldr	r3, [r3, #8]
 8001068:	2207      	movs	r2, #7
 800106a:	401a      	ands	r2, r3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	430a      	orrs	r2, r1
 8001072:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2b10      	cmp	r3, #16
 800107a:	d003      	beq.n	8001084 <HAL_ADC_ConfigChannel+0x118>
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	2b11      	cmp	r3, #17
 8001082:	d152      	bne.n	800112a <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001084:	4b2f      	ldr	r3, [pc, #188]	; (8001144 <HAL_ADC_ConfigChannel+0x1d8>)
 8001086:	6819      	ldr	r1, [r3, #0]
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2b10      	cmp	r3, #16
 800108e:	d102      	bne.n	8001096 <HAL_ADC_ConfigChannel+0x12a>
 8001090:	2380      	movs	r3, #128	; 0x80
 8001092:	041b      	lsls	r3, r3, #16
 8001094:	e001      	b.n	800109a <HAL_ADC_ConfigChannel+0x12e>
 8001096:	2380      	movs	r3, #128	; 0x80
 8001098:	03db      	lsls	r3, r3, #15
 800109a:	4a2a      	ldr	r2, [pc, #168]	; (8001144 <HAL_ADC_ConfigChannel+0x1d8>)
 800109c:	430b      	orrs	r3, r1
 800109e:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	2b10      	cmp	r3, #16
 80010a6:	d140      	bne.n	800112a <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80010a8:	4b27      	ldr	r3, [pc, #156]	; (8001148 <HAL_ADC_ConfigChannel+0x1dc>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4927      	ldr	r1, [pc, #156]	; (800114c <HAL_ADC_ConfigChannel+0x1e0>)
 80010ae:	0018      	movs	r0, r3
 80010b0:	f7ff f834 	bl	800011c <__udivsi3>
 80010b4:	0003      	movs	r3, r0
 80010b6:	001a      	movs	r2, r3
 80010b8:	0013      	movs	r3, r2
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	189b      	adds	r3, r3, r2
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80010c2:	e002      	b.n	80010ca <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	3b01      	subs	r3, #1
 80010c8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80010ca:	68bb      	ldr	r3, [r7, #8]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d1f9      	bne.n	80010c4 <HAL_ADC_ConfigChannel+0x158>
 80010d0:	e02b      	b.n	800112a <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	2101      	movs	r1, #1
 80010de:	4099      	lsls	r1, r3
 80010e0:	000b      	movs	r3, r1
 80010e2:	43d9      	mvns	r1, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	400a      	ands	r2, r1
 80010ea:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2b10      	cmp	r3, #16
 80010f2:	d003      	beq.n	80010fc <HAL_ADC_ConfigChannel+0x190>
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2b11      	cmp	r3, #17
 80010fa:	d116      	bne.n	800112a <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80010fc:	4b11      	ldr	r3, [pc, #68]	; (8001144 <HAL_ADC_ConfigChannel+0x1d8>)
 80010fe:	6819      	ldr	r1, [r3, #0]
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2b10      	cmp	r3, #16
 8001106:	d101      	bne.n	800110c <HAL_ADC_ConfigChannel+0x1a0>
 8001108:	4a11      	ldr	r2, [pc, #68]	; (8001150 <HAL_ADC_ConfigChannel+0x1e4>)
 800110a:	e000      	b.n	800110e <HAL_ADC_ConfigChannel+0x1a2>
 800110c:	4a11      	ldr	r2, [pc, #68]	; (8001154 <HAL_ADC_ConfigChannel+0x1e8>)
 800110e:	4b0d      	ldr	r3, [pc, #52]	; (8001144 <HAL_ADC_ConfigChannel+0x1d8>)
 8001110:	400a      	ands	r2, r1
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	e009      	b.n	800112a <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800111a:	2220      	movs	r2, #32
 800111c:	431a      	orrs	r2, r3
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001122:	230f      	movs	r3, #15
 8001124:	18fb      	adds	r3, r7, r3
 8001126:	2201      	movs	r2, #1
 8001128:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2234      	movs	r2, #52	; 0x34
 800112e:	2100      	movs	r1, #0
 8001130:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001132:	230f      	movs	r3, #15
 8001134:	18fb      	adds	r3, r7, r3
 8001136:	781b      	ldrb	r3, [r3, #0]
}
 8001138:	0018      	movs	r0, r3
 800113a:	46bd      	mov	sp, r7
 800113c:	b004      	add	sp, #16
 800113e:	bd80      	pop	{r7, pc}
 8001140:	00001001 	.word	0x00001001
 8001144:	40012708 	.word	0x40012708
 8001148:	20000000 	.word	0x20000000
 800114c:	000f4240 	.word	0x000f4240
 8001150:	ff7fffff 	.word	0xff7fffff
 8001154:	ffbfffff 	.word	0xffbfffff

08001158 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001158:	b590      	push	{r4, r7, lr}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	0002      	movs	r2, r0
 8001160:	6039      	str	r1, [r7, #0]
 8001162:	1dfb      	adds	r3, r7, #7
 8001164:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001166:	1dfb      	adds	r3, r7, #7
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	2b7f      	cmp	r3, #127	; 0x7f
 800116c:	d828      	bhi.n	80011c0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800116e:	4a2f      	ldr	r2, [pc, #188]	; (800122c <__NVIC_SetPriority+0xd4>)
 8001170:	1dfb      	adds	r3, r7, #7
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	b25b      	sxtb	r3, r3
 8001176:	089b      	lsrs	r3, r3, #2
 8001178:	33c0      	adds	r3, #192	; 0xc0
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	589b      	ldr	r3, [r3, r2]
 800117e:	1dfa      	adds	r2, r7, #7
 8001180:	7812      	ldrb	r2, [r2, #0]
 8001182:	0011      	movs	r1, r2
 8001184:	2203      	movs	r2, #3
 8001186:	400a      	ands	r2, r1
 8001188:	00d2      	lsls	r2, r2, #3
 800118a:	21ff      	movs	r1, #255	; 0xff
 800118c:	4091      	lsls	r1, r2
 800118e:	000a      	movs	r2, r1
 8001190:	43d2      	mvns	r2, r2
 8001192:	401a      	ands	r2, r3
 8001194:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	019b      	lsls	r3, r3, #6
 800119a:	22ff      	movs	r2, #255	; 0xff
 800119c:	401a      	ands	r2, r3
 800119e:	1dfb      	adds	r3, r7, #7
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	0018      	movs	r0, r3
 80011a4:	2303      	movs	r3, #3
 80011a6:	4003      	ands	r3, r0
 80011a8:	00db      	lsls	r3, r3, #3
 80011aa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011ac:	481f      	ldr	r0, [pc, #124]	; (800122c <__NVIC_SetPriority+0xd4>)
 80011ae:	1dfb      	adds	r3, r7, #7
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	b25b      	sxtb	r3, r3
 80011b4:	089b      	lsrs	r3, r3, #2
 80011b6:	430a      	orrs	r2, r1
 80011b8:	33c0      	adds	r3, #192	; 0xc0
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80011be:	e031      	b.n	8001224 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011c0:	4a1b      	ldr	r2, [pc, #108]	; (8001230 <__NVIC_SetPriority+0xd8>)
 80011c2:	1dfb      	adds	r3, r7, #7
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	0019      	movs	r1, r3
 80011c8:	230f      	movs	r3, #15
 80011ca:	400b      	ands	r3, r1
 80011cc:	3b08      	subs	r3, #8
 80011ce:	089b      	lsrs	r3, r3, #2
 80011d0:	3306      	adds	r3, #6
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	18d3      	adds	r3, r2, r3
 80011d6:	3304      	adds	r3, #4
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	1dfa      	adds	r2, r7, #7
 80011dc:	7812      	ldrb	r2, [r2, #0]
 80011de:	0011      	movs	r1, r2
 80011e0:	2203      	movs	r2, #3
 80011e2:	400a      	ands	r2, r1
 80011e4:	00d2      	lsls	r2, r2, #3
 80011e6:	21ff      	movs	r1, #255	; 0xff
 80011e8:	4091      	lsls	r1, r2
 80011ea:	000a      	movs	r2, r1
 80011ec:	43d2      	mvns	r2, r2
 80011ee:	401a      	ands	r2, r3
 80011f0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	019b      	lsls	r3, r3, #6
 80011f6:	22ff      	movs	r2, #255	; 0xff
 80011f8:	401a      	ands	r2, r3
 80011fa:	1dfb      	adds	r3, r7, #7
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	0018      	movs	r0, r3
 8001200:	2303      	movs	r3, #3
 8001202:	4003      	ands	r3, r0
 8001204:	00db      	lsls	r3, r3, #3
 8001206:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001208:	4809      	ldr	r0, [pc, #36]	; (8001230 <__NVIC_SetPriority+0xd8>)
 800120a:	1dfb      	adds	r3, r7, #7
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	001c      	movs	r4, r3
 8001210:	230f      	movs	r3, #15
 8001212:	4023      	ands	r3, r4
 8001214:	3b08      	subs	r3, #8
 8001216:	089b      	lsrs	r3, r3, #2
 8001218:	430a      	orrs	r2, r1
 800121a:	3306      	adds	r3, #6
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	18c3      	adds	r3, r0, r3
 8001220:	3304      	adds	r3, #4
 8001222:	601a      	str	r2, [r3, #0]
}
 8001224:	46c0      	nop			; (mov r8, r8)
 8001226:	46bd      	mov	sp, r7
 8001228:	b003      	add	sp, #12
 800122a:	bd90      	pop	{r4, r7, pc}
 800122c:	e000e100 	.word	0xe000e100
 8001230:	e000ed00 	.word	0xe000ed00

08001234 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	1e5a      	subs	r2, r3, #1
 8001240:	2380      	movs	r3, #128	; 0x80
 8001242:	045b      	lsls	r3, r3, #17
 8001244:	429a      	cmp	r2, r3
 8001246:	d301      	bcc.n	800124c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001248:	2301      	movs	r3, #1
 800124a:	e010      	b.n	800126e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800124c:	4b0a      	ldr	r3, [pc, #40]	; (8001278 <SysTick_Config+0x44>)
 800124e:	687a      	ldr	r2, [r7, #4]
 8001250:	3a01      	subs	r2, #1
 8001252:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001254:	2301      	movs	r3, #1
 8001256:	425b      	negs	r3, r3
 8001258:	2103      	movs	r1, #3
 800125a:	0018      	movs	r0, r3
 800125c:	f7ff ff7c 	bl	8001158 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001260:	4b05      	ldr	r3, [pc, #20]	; (8001278 <SysTick_Config+0x44>)
 8001262:	2200      	movs	r2, #0
 8001264:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001266:	4b04      	ldr	r3, [pc, #16]	; (8001278 <SysTick_Config+0x44>)
 8001268:	2207      	movs	r2, #7
 800126a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800126c:	2300      	movs	r3, #0
}
 800126e:	0018      	movs	r0, r3
 8001270:	46bd      	mov	sp, r7
 8001272:	b002      	add	sp, #8
 8001274:	bd80      	pop	{r7, pc}
 8001276:	46c0      	nop			; (mov r8, r8)
 8001278:	e000e010 	.word	0xe000e010

0800127c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	60b9      	str	r1, [r7, #8]
 8001284:	607a      	str	r2, [r7, #4]
 8001286:	210f      	movs	r1, #15
 8001288:	187b      	adds	r3, r7, r1
 800128a:	1c02      	adds	r2, r0, #0
 800128c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800128e:	68ba      	ldr	r2, [r7, #8]
 8001290:	187b      	adds	r3, r7, r1
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	b25b      	sxtb	r3, r3
 8001296:	0011      	movs	r1, r2
 8001298:	0018      	movs	r0, r3
 800129a:	f7ff ff5d 	bl	8001158 <__NVIC_SetPriority>
}
 800129e:	46c0      	nop			; (mov r8, r8)
 80012a0:	46bd      	mov	sp, r7
 80012a2:	b004      	add	sp, #16
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b082      	sub	sp, #8
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	0018      	movs	r0, r3
 80012b2:	f7ff ffbf 	bl	8001234 <SysTick_Config>
 80012b6:	0003      	movs	r3, r0
}
 80012b8:	0018      	movs	r0, r3
 80012ba:	46bd      	mov	sp, r7
 80012bc:	b002      	add	sp, #8
 80012be:	bd80      	pop	{r7, pc}

080012c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b086      	sub	sp, #24
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012ca:	2300      	movs	r3, #0
 80012cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012ce:	e14f      	b.n	8001570 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2101      	movs	r1, #1
 80012d6:	697a      	ldr	r2, [r7, #20]
 80012d8:	4091      	lsls	r1, r2
 80012da:	000a      	movs	r2, r1
 80012dc:	4013      	ands	r3, r2
 80012de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d100      	bne.n	80012e8 <HAL_GPIO_Init+0x28>
 80012e6:	e140      	b.n	800156a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	2203      	movs	r2, #3
 80012ee:	4013      	ands	r3, r2
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d005      	beq.n	8001300 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	2203      	movs	r2, #3
 80012fa:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d130      	bne.n	8001362 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	2203      	movs	r2, #3
 800130c:	409a      	lsls	r2, r3
 800130e:	0013      	movs	r3, r2
 8001310:	43da      	mvns	r2, r3
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	4013      	ands	r3, r2
 8001316:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	68da      	ldr	r2, [r3, #12]
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	005b      	lsls	r3, r3, #1
 8001320:	409a      	lsls	r2, r3
 8001322:	0013      	movs	r3, r2
 8001324:	693a      	ldr	r2, [r7, #16]
 8001326:	4313      	orrs	r3, r2
 8001328:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	693a      	ldr	r2, [r7, #16]
 800132e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001336:	2201      	movs	r2, #1
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	409a      	lsls	r2, r3
 800133c:	0013      	movs	r3, r2
 800133e:	43da      	mvns	r2, r3
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	4013      	ands	r3, r2
 8001344:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	091b      	lsrs	r3, r3, #4
 800134c:	2201      	movs	r2, #1
 800134e:	401a      	ands	r2, r3
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	409a      	lsls	r2, r3
 8001354:	0013      	movs	r3, r2
 8001356:	693a      	ldr	r2, [r7, #16]
 8001358:	4313      	orrs	r3, r2
 800135a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	2203      	movs	r2, #3
 8001368:	4013      	ands	r3, r2
 800136a:	2b03      	cmp	r3, #3
 800136c:	d017      	beq.n	800139e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	68db      	ldr	r3, [r3, #12]
 8001372:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	005b      	lsls	r3, r3, #1
 8001378:	2203      	movs	r2, #3
 800137a:	409a      	lsls	r2, r3
 800137c:	0013      	movs	r3, r2
 800137e:	43da      	mvns	r2, r3
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	4013      	ands	r3, r2
 8001384:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	689a      	ldr	r2, [r3, #8]
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	409a      	lsls	r2, r3
 8001390:	0013      	movs	r3, r2
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	4313      	orrs	r3, r2
 8001396:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	2203      	movs	r2, #3
 80013a4:	4013      	ands	r3, r2
 80013a6:	2b02      	cmp	r3, #2
 80013a8:	d123      	bne.n	80013f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	08da      	lsrs	r2, r3, #3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	3208      	adds	r2, #8
 80013b2:	0092      	lsls	r2, r2, #2
 80013b4:	58d3      	ldr	r3, [r2, r3]
 80013b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	2207      	movs	r2, #7
 80013bc:	4013      	ands	r3, r2
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	220f      	movs	r2, #15
 80013c2:	409a      	lsls	r2, r3
 80013c4:	0013      	movs	r3, r2
 80013c6:	43da      	mvns	r2, r3
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	4013      	ands	r3, r2
 80013cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	691a      	ldr	r2, [r3, #16]
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	2107      	movs	r1, #7
 80013d6:	400b      	ands	r3, r1
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	409a      	lsls	r2, r3
 80013dc:	0013      	movs	r3, r2
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	08da      	lsrs	r2, r3, #3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	3208      	adds	r2, #8
 80013ec:	0092      	lsls	r2, r2, #2
 80013ee:	6939      	ldr	r1, [r7, #16]
 80013f0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	2203      	movs	r2, #3
 80013fe:	409a      	lsls	r2, r3
 8001400:	0013      	movs	r3, r2
 8001402:	43da      	mvns	r2, r3
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	4013      	ands	r3, r2
 8001408:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	2203      	movs	r2, #3
 8001410:	401a      	ands	r2, r3
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	409a      	lsls	r2, r3
 8001418:	0013      	movs	r3, r2
 800141a:	693a      	ldr	r2, [r7, #16]
 800141c:	4313      	orrs	r3, r2
 800141e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	693a      	ldr	r2, [r7, #16]
 8001424:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	685a      	ldr	r2, [r3, #4]
 800142a:	23c0      	movs	r3, #192	; 0xc0
 800142c:	029b      	lsls	r3, r3, #10
 800142e:	4013      	ands	r3, r2
 8001430:	d100      	bne.n	8001434 <HAL_GPIO_Init+0x174>
 8001432:	e09a      	b.n	800156a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001434:	4b54      	ldr	r3, [pc, #336]	; (8001588 <HAL_GPIO_Init+0x2c8>)
 8001436:	699a      	ldr	r2, [r3, #24]
 8001438:	4b53      	ldr	r3, [pc, #332]	; (8001588 <HAL_GPIO_Init+0x2c8>)
 800143a:	2101      	movs	r1, #1
 800143c:	430a      	orrs	r2, r1
 800143e:	619a      	str	r2, [r3, #24]
 8001440:	4b51      	ldr	r3, [pc, #324]	; (8001588 <HAL_GPIO_Init+0x2c8>)
 8001442:	699b      	ldr	r3, [r3, #24]
 8001444:	2201      	movs	r2, #1
 8001446:	4013      	ands	r3, r2
 8001448:	60bb      	str	r3, [r7, #8]
 800144a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800144c:	4a4f      	ldr	r2, [pc, #316]	; (800158c <HAL_GPIO_Init+0x2cc>)
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	089b      	lsrs	r3, r3, #2
 8001452:	3302      	adds	r3, #2
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	589b      	ldr	r3, [r3, r2]
 8001458:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	2203      	movs	r2, #3
 800145e:	4013      	ands	r3, r2
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	220f      	movs	r2, #15
 8001464:	409a      	lsls	r2, r3
 8001466:	0013      	movs	r3, r2
 8001468:	43da      	mvns	r2, r3
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	4013      	ands	r3, r2
 800146e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001470:	687a      	ldr	r2, [r7, #4]
 8001472:	2390      	movs	r3, #144	; 0x90
 8001474:	05db      	lsls	r3, r3, #23
 8001476:	429a      	cmp	r2, r3
 8001478:	d013      	beq.n	80014a2 <HAL_GPIO_Init+0x1e2>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4a44      	ldr	r2, [pc, #272]	; (8001590 <HAL_GPIO_Init+0x2d0>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d00d      	beq.n	800149e <HAL_GPIO_Init+0x1de>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4a43      	ldr	r2, [pc, #268]	; (8001594 <HAL_GPIO_Init+0x2d4>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d007      	beq.n	800149a <HAL_GPIO_Init+0x1da>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a42      	ldr	r2, [pc, #264]	; (8001598 <HAL_GPIO_Init+0x2d8>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d101      	bne.n	8001496 <HAL_GPIO_Init+0x1d6>
 8001492:	2303      	movs	r3, #3
 8001494:	e006      	b.n	80014a4 <HAL_GPIO_Init+0x1e4>
 8001496:	2305      	movs	r3, #5
 8001498:	e004      	b.n	80014a4 <HAL_GPIO_Init+0x1e4>
 800149a:	2302      	movs	r3, #2
 800149c:	e002      	b.n	80014a4 <HAL_GPIO_Init+0x1e4>
 800149e:	2301      	movs	r3, #1
 80014a0:	e000      	b.n	80014a4 <HAL_GPIO_Init+0x1e4>
 80014a2:	2300      	movs	r3, #0
 80014a4:	697a      	ldr	r2, [r7, #20]
 80014a6:	2103      	movs	r1, #3
 80014a8:	400a      	ands	r2, r1
 80014aa:	0092      	lsls	r2, r2, #2
 80014ac:	4093      	lsls	r3, r2
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	4313      	orrs	r3, r2
 80014b2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80014b4:	4935      	ldr	r1, [pc, #212]	; (800158c <HAL_GPIO_Init+0x2cc>)
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	089b      	lsrs	r3, r3, #2
 80014ba:	3302      	adds	r3, #2
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014c2:	4b36      	ldr	r3, [pc, #216]	; (800159c <HAL_GPIO_Init+0x2dc>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	43da      	mvns	r2, r3
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	4013      	ands	r3, r2
 80014d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685a      	ldr	r2, [r3, #4]
 80014d6:	2380      	movs	r3, #128	; 0x80
 80014d8:	025b      	lsls	r3, r3, #9
 80014da:	4013      	ands	r3, r2
 80014dc:	d003      	beq.n	80014e6 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	4313      	orrs	r3, r2
 80014e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80014e6:	4b2d      	ldr	r3, [pc, #180]	; (800159c <HAL_GPIO_Init+0x2dc>)
 80014e8:	693a      	ldr	r2, [r7, #16]
 80014ea:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80014ec:	4b2b      	ldr	r3, [pc, #172]	; (800159c <HAL_GPIO_Init+0x2dc>)
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	43da      	mvns	r2, r3
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	4013      	ands	r3, r2
 80014fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685a      	ldr	r2, [r3, #4]
 8001500:	2380      	movs	r3, #128	; 0x80
 8001502:	029b      	lsls	r3, r3, #10
 8001504:	4013      	ands	r3, r2
 8001506:	d003      	beq.n	8001510 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001508:	693a      	ldr	r2, [r7, #16]
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	4313      	orrs	r3, r2
 800150e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001510:	4b22      	ldr	r3, [pc, #136]	; (800159c <HAL_GPIO_Init+0x2dc>)
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001516:	4b21      	ldr	r3, [pc, #132]	; (800159c <HAL_GPIO_Init+0x2dc>)
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	43da      	mvns	r2, r3
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	4013      	ands	r3, r2
 8001524:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	685a      	ldr	r2, [r3, #4]
 800152a:	2380      	movs	r3, #128	; 0x80
 800152c:	035b      	lsls	r3, r3, #13
 800152e:	4013      	ands	r3, r2
 8001530:	d003      	beq.n	800153a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	4313      	orrs	r3, r2
 8001538:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800153a:	4b18      	ldr	r3, [pc, #96]	; (800159c <HAL_GPIO_Init+0x2dc>)
 800153c:	693a      	ldr	r2, [r7, #16]
 800153e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001540:	4b16      	ldr	r3, [pc, #88]	; (800159c <HAL_GPIO_Init+0x2dc>)
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	43da      	mvns	r2, r3
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	4013      	ands	r3, r2
 800154e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685a      	ldr	r2, [r3, #4]
 8001554:	2380      	movs	r3, #128	; 0x80
 8001556:	039b      	lsls	r3, r3, #14
 8001558:	4013      	ands	r3, r2
 800155a:	d003      	beq.n	8001564 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 800155c:	693a      	ldr	r2, [r7, #16]
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	4313      	orrs	r3, r2
 8001562:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001564:	4b0d      	ldr	r3, [pc, #52]	; (800159c <HAL_GPIO_Init+0x2dc>)
 8001566:	693a      	ldr	r2, [r7, #16]
 8001568:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	3301      	adds	r3, #1
 800156e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	40da      	lsrs	r2, r3
 8001578:	1e13      	subs	r3, r2, #0
 800157a:	d000      	beq.n	800157e <HAL_GPIO_Init+0x2be>
 800157c:	e6a8      	b.n	80012d0 <HAL_GPIO_Init+0x10>
  } 
}
 800157e:	46c0      	nop			; (mov r8, r8)
 8001580:	46c0      	nop			; (mov r8, r8)
 8001582:	46bd      	mov	sp, r7
 8001584:	b006      	add	sp, #24
 8001586:	bd80      	pop	{r7, pc}
 8001588:	40021000 	.word	0x40021000
 800158c:	40010000 	.word	0x40010000
 8001590:	48000400 	.word	0x48000400
 8001594:	48000800 	.word	0x48000800
 8001598:	48000c00 	.word	0x48000c00
 800159c:	40010400 	.word	0x40010400

080015a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	0008      	movs	r0, r1
 80015aa:	0011      	movs	r1, r2
 80015ac:	1cbb      	adds	r3, r7, #2
 80015ae:	1c02      	adds	r2, r0, #0
 80015b0:	801a      	strh	r2, [r3, #0]
 80015b2:	1c7b      	adds	r3, r7, #1
 80015b4:	1c0a      	adds	r2, r1, #0
 80015b6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015b8:	1c7b      	adds	r3, r7, #1
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d004      	beq.n	80015ca <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015c0:	1cbb      	adds	r3, r7, #2
 80015c2:	881a      	ldrh	r2, [r3, #0]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015c8:	e003      	b.n	80015d2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015ca:	1cbb      	adds	r3, r7, #2
 80015cc:	881a      	ldrh	r2, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015d2:	46c0      	nop			; (mov r8, r8)
 80015d4:	46bd      	mov	sp, r7
 80015d6:	b002      	add	sp, #8
 80015d8:	bd80      	pop	{r7, pc}
	...

080015dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d101      	bne.n	80015ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e082      	b.n	80016f4 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2241      	movs	r2, #65	; 0x41
 80015f2:	5c9b      	ldrb	r3, [r3, r2]
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d107      	bne.n	800160a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2240      	movs	r2, #64	; 0x40
 80015fe:	2100      	movs	r1, #0
 8001600:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	0018      	movs	r0, r3
 8001606:	f7ff f9c1 	bl	800098c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2241      	movs	r2, #65	; 0x41
 800160e:	2124      	movs	r1, #36	; 0x24
 8001610:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2101      	movs	r1, #1
 800161e:	438a      	bics	r2, r1
 8001620:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685a      	ldr	r2, [r3, #4]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4934      	ldr	r1, [pc, #208]	; (80016fc <HAL_I2C_Init+0x120>)
 800162c:	400a      	ands	r2, r1
 800162e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	689a      	ldr	r2, [r3, #8]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4931      	ldr	r1, [pc, #196]	; (8001700 <HAL_I2C_Init+0x124>)
 800163c:	400a      	ands	r2, r1
 800163e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	2b01      	cmp	r3, #1
 8001646:	d108      	bne.n	800165a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	689a      	ldr	r2, [r3, #8]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2180      	movs	r1, #128	; 0x80
 8001652:	0209      	lsls	r1, r1, #8
 8001654:	430a      	orrs	r2, r1
 8001656:	609a      	str	r2, [r3, #8]
 8001658:	e007      	b.n	800166a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	689a      	ldr	r2, [r3, #8]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	2184      	movs	r1, #132	; 0x84
 8001664:	0209      	lsls	r1, r1, #8
 8001666:	430a      	orrs	r2, r1
 8001668:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	2b02      	cmp	r3, #2
 8001670:	d104      	bne.n	800167c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	2280      	movs	r2, #128	; 0x80
 8001678:	0112      	lsls	r2, r2, #4
 800167a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	685a      	ldr	r2, [r3, #4]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	491f      	ldr	r1, [pc, #124]	; (8001704 <HAL_I2C_Init+0x128>)
 8001688:	430a      	orrs	r2, r1
 800168a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	68da      	ldr	r2, [r3, #12]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	491a      	ldr	r1, [pc, #104]	; (8001700 <HAL_I2C_Init+0x124>)
 8001698:	400a      	ands	r2, r1
 800169a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	691a      	ldr	r2, [r3, #16]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	695b      	ldr	r3, [r3, #20]
 80016a4:	431a      	orrs	r2, r3
 80016a6:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	699b      	ldr	r3, [r3, #24]
 80016ac:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	430a      	orrs	r2, r1
 80016b4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	69d9      	ldr	r1, [r3, #28]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6a1a      	ldr	r2, [r3, #32]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	430a      	orrs	r2, r1
 80016c4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2101      	movs	r1, #1
 80016d2:	430a      	orrs	r2, r1
 80016d4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2200      	movs	r2, #0
 80016da:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2241      	movs	r2, #65	; 0x41
 80016e0:	2120      	movs	r1, #32
 80016e2:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2200      	movs	r2, #0
 80016e8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2242      	movs	r2, #66	; 0x42
 80016ee:	2100      	movs	r1, #0
 80016f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80016f2:	2300      	movs	r3, #0
}
 80016f4:	0018      	movs	r0, r3
 80016f6:	46bd      	mov	sp, r7
 80016f8:	b002      	add	sp, #8
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	f0ffffff 	.word	0xf0ffffff
 8001700:	ffff7fff 	.word	0xffff7fff
 8001704:	02008000 	.word	0x02008000

08001708 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001708:	b590      	push	{r4, r7, lr}
 800170a:	b089      	sub	sp, #36	; 0x24
 800170c:	af02      	add	r7, sp, #8
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	0008      	movs	r0, r1
 8001712:	607a      	str	r2, [r7, #4]
 8001714:	0019      	movs	r1, r3
 8001716:	230a      	movs	r3, #10
 8001718:	18fb      	adds	r3, r7, r3
 800171a:	1c02      	adds	r2, r0, #0
 800171c:	801a      	strh	r2, [r3, #0]
 800171e:	2308      	movs	r3, #8
 8001720:	18fb      	adds	r3, r7, r3
 8001722:	1c0a      	adds	r2, r1, #0
 8001724:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	2241      	movs	r2, #65	; 0x41
 800172a:	5c9b      	ldrb	r3, [r3, r2]
 800172c:	b2db      	uxtb	r3, r3
 800172e:	2b20      	cmp	r3, #32
 8001730:	d000      	beq.n	8001734 <HAL_I2C_Master_Transmit+0x2c>
 8001732:	e0e7      	b.n	8001904 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	2240      	movs	r2, #64	; 0x40
 8001738:	5c9b      	ldrb	r3, [r3, r2]
 800173a:	2b01      	cmp	r3, #1
 800173c:	d101      	bne.n	8001742 <HAL_I2C_Master_Transmit+0x3a>
 800173e:	2302      	movs	r3, #2
 8001740:	e0e1      	b.n	8001906 <HAL_I2C_Master_Transmit+0x1fe>
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	2240      	movs	r2, #64	; 0x40
 8001746:	2101      	movs	r1, #1
 8001748:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800174a:	f7ff faa1 	bl	8000c90 <HAL_GetTick>
 800174e:	0003      	movs	r3, r0
 8001750:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001752:	2380      	movs	r3, #128	; 0x80
 8001754:	0219      	lsls	r1, r3, #8
 8001756:	68f8      	ldr	r0, [r7, #12]
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	9300      	str	r3, [sp, #0]
 800175c:	2319      	movs	r3, #25
 800175e:	2201      	movs	r2, #1
 8001760:	f000 f8fc 	bl	800195c <I2C_WaitOnFlagUntilTimeout>
 8001764:	1e03      	subs	r3, r0, #0
 8001766:	d001      	beq.n	800176c <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	e0cc      	b.n	8001906 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	2241      	movs	r2, #65	; 0x41
 8001770:	2121      	movs	r1, #33	; 0x21
 8001772:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	2242      	movs	r2, #66	; 0x42
 8001778:	2110      	movs	r1, #16
 800177a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	2200      	movs	r2, #0
 8001780:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	687a      	ldr	r2, [r7, #4]
 8001786:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	2208      	movs	r2, #8
 800178c:	18ba      	adds	r2, r7, r2
 800178e:	8812      	ldrh	r2, [r2, #0]
 8001790:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	2200      	movs	r2, #0
 8001796:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800179c:	b29b      	uxth	r3, r3
 800179e:	2bff      	cmp	r3, #255	; 0xff
 80017a0:	d911      	bls.n	80017c6 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	22ff      	movs	r2, #255	; 0xff
 80017a6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017ac:	b2da      	uxtb	r2, r3
 80017ae:	2380      	movs	r3, #128	; 0x80
 80017b0:	045c      	lsls	r4, r3, #17
 80017b2:	230a      	movs	r3, #10
 80017b4:	18fb      	adds	r3, r7, r3
 80017b6:	8819      	ldrh	r1, [r3, #0]
 80017b8:	68f8      	ldr	r0, [r7, #12]
 80017ba:	4b55      	ldr	r3, [pc, #340]	; (8001910 <HAL_I2C_Master_Transmit+0x208>)
 80017bc:	9300      	str	r3, [sp, #0]
 80017be:	0023      	movs	r3, r4
 80017c0:	f000 fa00 	bl	8001bc4 <I2C_TransferConfig>
 80017c4:	e075      	b.n	80018b2 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017ca:	b29a      	uxth	r2, r3
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017d4:	b2da      	uxtb	r2, r3
 80017d6:	2380      	movs	r3, #128	; 0x80
 80017d8:	049c      	lsls	r4, r3, #18
 80017da:	230a      	movs	r3, #10
 80017dc:	18fb      	adds	r3, r7, r3
 80017de:	8819      	ldrh	r1, [r3, #0]
 80017e0:	68f8      	ldr	r0, [r7, #12]
 80017e2:	4b4b      	ldr	r3, [pc, #300]	; (8001910 <HAL_I2C_Master_Transmit+0x208>)
 80017e4:	9300      	str	r3, [sp, #0]
 80017e6:	0023      	movs	r3, r4
 80017e8:	f000 f9ec 	bl	8001bc4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80017ec:	e061      	b.n	80018b2 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017ee:	697a      	ldr	r2, [r7, #20]
 80017f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	0018      	movs	r0, r3
 80017f6:	f000 f8f0 	bl	80019da <I2C_WaitOnTXISFlagUntilTimeout>
 80017fa:	1e03      	subs	r3, r0, #0
 80017fc:	d001      	beq.n	8001802 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e081      	b.n	8001906 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001806:	781a      	ldrb	r2, [r3, #0]
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001812:	1c5a      	adds	r2, r3, #1
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800181c:	b29b      	uxth	r3, r3
 800181e:	3b01      	subs	r3, #1
 8001820:	b29a      	uxth	r2, r3
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800182a:	3b01      	subs	r3, #1
 800182c:	b29a      	uxth	r2, r3
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001836:	b29b      	uxth	r3, r3
 8001838:	2b00      	cmp	r3, #0
 800183a:	d03a      	beq.n	80018b2 <HAL_I2C_Master_Transmit+0x1aa>
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001840:	2b00      	cmp	r3, #0
 8001842:	d136      	bne.n	80018b2 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001844:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001846:	68f8      	ldr	r0, [r7, #12]
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	9300      	str	r3, [sp, #0]
 800184c:	0013      	movs	r3, r2
 800184e:	2200      	movs	r2, #0
 8001850:	2180      	movs	r1, #128	; 0x80
 8001852:	f000 f883 	bl	800195c <I2C_WaitOnFlagUntilTimeout>
 8001856:	1e03      	subs	r3, r0, #0
 8001858:	d001      	beq.n	800185e <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e053      	b.n	8001906 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001862:	b29b      	uxth	r3, r3
 8001864:	2bff      	cmp	r3, #255	; 0xff
 8001866:	d911      	bls.n	800188c <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	22ff      	movs	r2, #255	; 0xff
 800186c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001872:	b2da      	uxtb	r2, r3
 8001874:	2380      	movs	r3, #128	; 0x80
 8001876:	045c      	lsls	r4, r3, #17
 8001878:	230a      	movs	r3, #10
 800187a:	18fb      	adds	r3, r7, r3
 800187c:	8819      	ldrh	r1, [r3, #0]
 800187e:	68f8      	ldr	r0, [r7, #12]
 8001880:	2300      	movs	r3, #0
 8001882:	9300      	str	r3, [sp, #0]
 8001884:	0023      	movs	r3, r4
 8001886:	f000 f99d 	bl	8001bc4 <I2C_TransferConfig>
 800188a:	e012      	b.n	80018b2 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001890:	b29a      	uxth	r2, r3
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800189a:	b2da      	uxtb	r2, r3
 800189c:	2380      	movs	r3, #128	; 0x80
 800189e:	049c      	lsls	r4, r3, #18
 80018a0:	230a      	movs	r3, #10
 80018a2:	18fb      	adds	r3, r7, r3
 80018a4:	8819      	ldrh	r1, [r3, #0]
 80018a6:	68f8      	ldr	r0, [r7, #12]
 80018a8:	2300      	movs	r3, #0
 80018aa:	9300      	str	r3, [sp, #0]
 80018ac:	0023      	movs	r3, r4
 80018ae:	f000 f989 	bl	8001bc4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d198      	bne.n	80017ee <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018bc:	697a      	ldr	r2, [r7, #20]
 80018be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	0018      	movs	r0, r3
 80018c4:	f000 f8c8 	bl	8001a58 <I2C_WaitOnSTOPFlagUntilTimeout>
 80018c8:	1e03      	subs	r3, r0, #0
 80018ca:	d001      	beq.n	80018d0 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e01a      	b.n	8001906 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2220      	movs	r2, #32
 80018d6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	685a      	ldr	r2, [r3, #4]
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	490c      	ldr	r1, [pc, #48]	; (8001914 <HAL_I2C_Master_Transmit+0x20c>)
 80018e4:	400a      	ands	r2, r1
 80018e6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2241      	movs	r2, #65	; 0x41
 80018ec:	2120      	movs	r1, #32
 80018ee:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	2242      	movs	r2, #66	; 0x42
 80018f4:	2100      	movs	r1, #0
 80018f6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	2240      	movs	r2, #64	; 0x40
 80018fc:	2100      	movs	r1, #0
 80018fe:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001900:	2300      	movs	r3, #0
 8001902:	e000      	b.n	8001906 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8001904:	2302      	movs	r3, #2
  }
}
 8001906:	0018      	movs	r0, r3
 8001908:	46bd      	mov	sp, r7
 800190a:	b007      	add	sp, #28
 800190c:	bd90      	pop	{r4, r7, pc}
 800190e:	46c0      	nop			; (mov r8, r8)
 8001910:	80002000 	.word	0x80002000
 8001914:	fe00e800 	.word	0xfe00e800

08001918 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	699b      	ldr	r3, [r3, #24]
 8001926:	2202      	movs	r2, #2
 8001928:	4013      	ands	r3, r2
 800192a:	2b02      	cmp	r3, #2
 800192c:	d103      	bne.n	8001936 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2200      	movs	r2, #0
 8001934:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	699b      	ldr	r3, [r3, #24]
 800193c:	2201      	movs	r2, #1
 800193e:	4013      	ands	r3, r2
 8001940:	2b01      	cmp	r3, #1
 8001942:	d007      	beq.n	8001954 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	699a      	ldr	r2, [r3, #24]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2101      	movs	r1, #1
 8001950:	430a      	orrs	r2, r1
 8001952:	619a      	str	r2, [r3, #24]
  }
}
 8001954:	46c0      	nop			; (mov r8, r8)
 8001956:	46bd      	mov	sp, r7
 8001958:	b002      	add	sp, #8
 800195a:	bd80      	pop	{r7, pc}

0800195c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	60b9      	str	r1, [r7, #8]
 8001966:	603b      	str	r3, [r7, #0]
 8001968:	1dfb      	adds	r3, r7, #7
 800196a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800196c:	e021      	b.n	80019b2 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	3301      	adds	r3, #1
 8001972:	d01e      	beq.n	80019b2 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001974:	f7ff f98c 	bl	8000c90 <HAL_GetTick>
 8001978:	0002      	movs	r2, r0
 800197a:	69bb      	ldr	r3, [r7, #24]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	683a      	ldr	r2, [r7, #0]
 8001980:	429a      	cmp	r2, r3
 8001982:	d302      	bcc.n	800198a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d113      	bne.n	80019b2 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800198e:	2220      	movs	r2, #32
 8001990:	431a      	orrs	r2, r3
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	2241      	movs	r2, #65	; 0x41
 800199a:	2120      	movs	r1, #32
 800199c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	2242      	movs	r2, #66	; 0x42
 80019a2:	2100      	movs	r1, #0
 80019a4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	2240      	movs	r2, #64	; 0x40
 80019aa:	2100      	movs	r1, #0
 80019ac:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e00f      	b.n	80019d2 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	68ba      	ldr	r2, [r7, #8]
 80019ba:	4013      	ands	r3, r2
 80019bc:	68ba      	ldr	r2, [r7, #8]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	425a      	negs	r2, r3
 80019c2:	4153      	adcs	r3, r2
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	001a      	movs	r2, r3
 80019c8:	1dfb      	adds	r3, r7, #7
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d0ce      	beq.n	800196e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80019d0:	2300      	movs	r3, #0
}
 80019d2:	0018      	movs	r0, r3
 80019d4:	46bd      	mov	sp, r7
 80019d6:	b004      	add	sp, #16
 80019d8:	bd80      	pop	{r7, pc}

080019da <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80019da:	b580      	push	{r7, lr}
 80019dc:	b084      	sub	sp, #16
 80019de:	af00      	add	r7, sp, #0
 80019e0:	60f8      	str	r0, [r7, #12]
 80019e2:	60b9      	str	r1, [r7, #8]
 80019e4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80019e6:	e02b      	b.n	8001a40 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	68b9      	ldr	r1, [r7, #8]
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	0018      	movs	r0, r3
 80019f0:	f000 f86e 	bl	8001ad0 <I2C_IsAcknowledgeFailed>
 80019f4:	1e03      	subs	r3, r0, #0
 80019f6:	d001      	beq.n	80019fc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e029      	b.n	8001a50 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	3301      	adds	r3, #1
 8001a00:	d01e      	beq.n	8001a40 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a02:	f7ff f945 	bl	8000c90 <HAL_GetTick>
 8001a06:	0002      	movs	r2, r0
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	68ba      	ldr	r2, [r7, #8]
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d302      	bcc.n	8001a18 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d113      	bne.n	8001a40 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1c:	2220      	movs	r2, #32
 8001a1e:	431a      	orrs	r2, r3
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2241      	movs	r2, #65	; 0x41
 8001a28:	2120      	movs	r1, #32
 8001a2a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	2242      	movs	r2, #66	; 0x42
 8001a30:	2100      	movs	r1, #0
 8001a32:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	2240      	movs	r2, #64	; 0x40
 8001a38:	2100      	movs	r1, #0
 8001a3a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e007      	b.n	8001a50 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	699b      	ldr	r3, [r3, #24]
 8001a46:	2202      	movs	r2, #2
 8001a48:	4013      	ands	r3, r2
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d1cc      	bne.n	80019e8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001a4e:	2300      	movs	r3, #0
}
 8001a50:	0018      	movs	r0, r3
 8001a52:	46bd      	mov	sp, r7
 8001a54:	b004      	add	sp, #16
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	60b9      	str	r1, [r7, #8]
 8001a62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a64:	e028      	b.n	8001ab8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	68b9      	ldr	r1, [r7, #8]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	0018      	movs	r0, r3
 8001a6e:	f000 f82f 	bl	8001ad0 <I2C_IsAcknowledgeFailed>
 8001a72:	1e03      	subs	r3, r0, #0
 8001a74:	d001      	beq.n	8001a7a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e026      	b.n	8001ac8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a7a:	f7ff f909 	bl	8000c90 <HAL_GetTick>
 8001a7e:	0002      	movs	r2, r0
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	68ba      	ldr	r2, [r7, #8]
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d302      	bcc.n	8001a90 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d113      	bne.n	8001ab8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a94:	2220      	movs	r2, #32
 8001a96:	431a      	orrs	r2, r3
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	2241      	movs	r2, #65	; 0x41
 8001aa0:	2120      	movs	r1, #32
 8001aa2:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	2242      	movs	r2, #66	; 0x42
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	2240      	movs	r2, #64	; 0x40
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e007      	b.n	8001ac8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	699b      	ldr	r3, [r3, #24]
 8001abe:	2220      	movs	r2, #32
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	2b20      	cmp	r3, #32
 8001ac4:	d1cf      	bne.n	8001a66 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001ac6:	2300      	movs	r3, #0
}
 8001ac8:	0018      	movs	r0, r3
 8001aca:	46bd      	mov	sp, r7
 8001acc:	b004      	add	sp, #16
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	60f8      	str	r0, [r7, #12]
 8001ad8:	60b9      	str	r1, [r7, #8]
 8001ada:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	699b      	ldr	r3, [r3, #24]
 8001ae2:	2210      	movs	r2, #16
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	2b10      	cmp	r3, #16
 8001ae8:	d164      	bne.n	8001bb4 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	685a      	ldr	r2, [r3, #4]
 8001af0:	2380      	movs	r3, #128	; 0x80
 8001af2:	049b      	lsls	r3, r3, #18
 8001af4:	401a      	ands	r2, r3
 8001af6:	2380      	movs	r3, #128	; 0x80
 8001af8:	049b      	lsls	r3, r3, #18
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d02b      	beq.n	8001b56 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	685a      	ldr	r2, [r3, #4]
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2180      	movs	r1, #128	; 0x80
 8001b0a:	01c9      	lsls	r1, r1, #7
 8001b0c:	430a      	orrs	r2, r1
 8001b0e:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b10:	e021      	b.n	8001b56 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	3301      	adds	r3, #1
 8001b16:	d01e      	beq.n	8001b56 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b18:	f7ff f8ba 	bl	8000c90 <HAL_GetTick>
 8001b1c:	0002      	movs	r2, r0
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	68ba      	ldr	r2, [r7, #8]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d302      	bcc.n	8001b2e <I2C_IsAcknowledgeFailed+0x5e>
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d113      	bne.n	8001b56 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b32:	2220      	movs	r2, #32
 8001b34:	431a      	orrs	r2, r3
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	2241      	movs	r2, #65	; 0x41
 8001b3e:	2120      	movs	r1, #32
 8001b40:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	2242      	movs	r2, #66	; 0x42
 8001b46:	2100      	movs	r1, #0
 8001b48:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	2240      	movs	r2, #64	; 0x40
 8001b4e:	2100      	movs	r1, #0
 8001b50:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e02f      	b.n	8001bb6 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	699b      	ldr	r3, [r3, #24]
 8001b5c:	2220      	movs	r2, #32
 8001b5e:	4013      	ands	r3, r2
 8001b60:	2b20      	cmp	r3, #32
 8001b62:	d1d6      	bne.n	8001b12 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2210      	movs	r2, #16
 8001b6a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2220      	movs	r2, #32
 8001b72:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	0018      	movs	r0, r3
 8001b78:	f7ff fece 	bl	8001918 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	685a      	ldr	r2, [r3, #4]
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	490e      	ldr	r1, [pc, #56]	; (8001bc0 <I2C_IsAcknowledgeFailed+0xf0>)
 8001b88:	400a      	ands	r2, r1
 8001b8a:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b90:	2204      	movs	r2, #4
 8001b92:	431a      	orrs	r2, r3
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2241      	movs	r2, #65	; 0x41
 8001b9c:	2120      	movs	r1, #32
 8001b9e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2242      	movs	r2, #66	; 0x42
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2240      	movs	r2, #64	; 0x40
 8001bac:	2100      	movs	r1, #0
 8001bae:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e000      	b.n	8001bb6 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	0018      	movs	r0, r3
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	b004      	add	sp, #16
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	46c0      	nop			; (mov r8, r8)
 8001bc0:	fe00e800 	.word	0xfe00e800

08001bc4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001bc4:	b590      	push	{r4, r7, lr}
 8001bc6:	b085      	sub	sp, #20
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	60f8      	str	r0, [r7, #12]
 8001bcc:	0008      	movs	r0, r1
 8001bce:	0011      	movs	r1, r2
 8001bd0:	607b      	str	r3, [r7, #4]
 8001bd2:	240a      	movs	r4, #10
 8001bd4:	193b      	adds	r3, r7, r4
 8001bd6:	1c02      	adds	r2, r0, #0
 8001bd8:	801a      	strh	r2, [r3, #0]
 8001bda:	2009      	movs	r0, #9
 8001bdc:	183b      	adds	r3, r7, r0
 8001bde:	1c0a      	adds	r2, r1, #0
 8001be0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	6a3a      	ldr	r2, [r7, #32]
 8001bea:	0d51      	lsrs	r1, r2, #21
 8001bec:	2280      	movs	r2, #128	; 0x80
 8001bee:	00d2      	lsls	r2, r2, #3
 8001bf0:	400a      	ands	r2, r1
 8001bf2:	490e      	ldr	r1, [pc, #56]	; (8001c2c <I2C_TransferConfig+0x68>)
 8001bf4:	430a      	orrs	r2, r1
 8001bf6:	43d2      	mvns	r2, r2
 8001bf8:	401a      	ands	r2, r3
 8001bfa:	0011      	movs	r1, r2
 8001bfc:	193b      	adds	r3, r7, r4
 8001bfe:	881b      	ldrh	r3, [r3, #0]
 8001c00:	059b      	lsls	r3, r3, #22
 8001c02:	0d9a      	lsrs	r2, r3, #22
 8001c04:	183b      	adds	r3, r7, r0
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	0418      	lsls	r0, r3, #16
 8001c0a:	23ff      	movs	r3, #255	; 0xff
 8001c0c:	041b      	lsls	r3, r3, #16
 8001c0e:	4003      	ands	r3, r0
 8001c10:	431a      	orrs	r2, r3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	431a      	orrs	r2, r3
 8001c16:	6a3b      	ldr	r3, [r7, #32]
 8001c18:	431a      	orrs	r2, r3
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	430a      	orrs	r2, r1
 8001c20:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8001c22:	46c0      	nop			; (mov r8, r8)
 8001c24:	46bd      	mov	sp, r7
 8001c26:	b005      	add	sp, #20
 8001c28:	bd90      	pop	{r4, r7, pc}
 8001c2a:	46c0      	nop			; (mov r8, r8)
 8001c2c:	03ff63ff 	.word	0x03ff63ff

08001c30 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2241      	movs	r2, #65	; 0x41
 8001c3e:	5c9b      	ldrb	r3, [r3, r2]
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	2b20      	cmp	r3, #32
 8001c44:	d138      	bne.n	8001cb8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2240      	movs	r2, #64	; 0x40
 8001c4a:	5c9b      	ldrb	r3, [r3, r2]
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d101      	bne.n	8001c54 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001c50:	2302      	movs	r3, #2
 8001c52:	e032      	b.n	8001cba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2240      	movs	r2, #64	; 0x40
 8001c58:	2101      	movs	r1, #1
 8001c5a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2241      	movs	r2, #65	; 0x41
 8001c60:	2124      	movs	r1, #36	; 0x24
 8001c62:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2101      	movs	r1, #1
 8001c70:	438a      	bics	r2, r1
 8001c72:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4911      	ldr	r1, [pc, #68]	; (8001cc4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001c80:	400a      	ands	r2, r1
 8001c82:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	6819      	ldr	r1, [r3, #0]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	683a      	ldr	r2, [r7, #0]
 8001c90:	430a      	orrs	r2, r1
 8001c92:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	2101      	movs	r1, #1
 8001ca0:	430a      	orrs	r2, r1
 8001ca2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2241      	movs	r2, #65	; 0x41
 8001ca8:	2120      	movs	r1, #32
 8001caa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2240      	movs	r2, #64	; 0x40
 8001cb0:	2100      	movs	r1, #0
 8001cb2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	e000      	b.n	8001cba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001cb8:	2302      	movs	r3, #2
  }
}
 8001cba:	0018      	movs	r0, r3
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	b002      	add	sp, #8
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	46c0      	nop			; (mov r8, r8)
 8001cc4:	ffffefff 	.word	0xffffefff

08001cc8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2241      	movs	r2, #65	; 0x41
 8001cd6:	5c9b      	ldrb	r3, [r3, r2]
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	2b20      	cmp	r3, #32
 8001cdc:	d139      	bne.n	8001d52 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2240      	movs	r2, #64	; 0x40
 8001ce2:	5c9b      	ldrb	r3, [r3, r2]
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d101      	bne.n	8001cec <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001ce8:	2302      	movs	r3, #2
 8001cea:	e033      	b.n	8001d54 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2240      	movs	r2, #64	; 0x40
 8001cf0:	2101      	movs	r1, #1
 8001cf2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2241      	movs	r2, #65	; 0x41
 8001cf8:	2124      	movs	r1, #36	; 0x24
 8001cfa:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	2101      	movs	r1, #1
 8001d08:	438a      	bics	r2, r1
 8001d0a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	4a11      	ldr	r2, [pc, #68]	; (8001d5c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001d18:	4013      	ands	r3, r2
 8001d1a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	021b      	lsls	r3, r3, #8
 8001d20:	68fa      	ldr	r2, [r7, #12]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	68fa      	ldr	r2, [r7, #12]
 8001d2c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2101      	movs	r1, #1
 8001d3a:	430a      	orrs	r2, r1
 8001d3c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2241      	movs	r2, #65	; 0x41
 8001d42:	2120      	movs	r1, #32
 8001d44:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2240      	movs	r2, #64	; 0x40
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	e000      	b.n	8001d54 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001d52:	2302      	movs	r3, #2
  }
}
 8001d54:	0018      	movs	r0, r3
 8001d56:	46bd      	mov	sp, r7
 8001d58:	b004      	add	sp, #16
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	fffff0ff 	.word	0xfffff0ff

08001d60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b088      	sub	sp, #32
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d101      	bne.n	8001d72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e305      	b.n	800237e <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	2201      	movs	r2, #1
 8001d78:	4013      	ands	r3, r2
 8001d7a:	d100      	bne.n	8001d7e <HAL_RCC_OscConfig+0x1e>
 8001d7c:	e08d      	b.n	8001e9a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001d7e:	4bc5      	ldr	r3, [pc, #788]	; (8002094 <HAL_RCC_OscConfig+0x334>)
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	220c      	movs	r2, #12
 8001d84:	4013      	ands	r3, r2
 8001d86:	2b04      	cmp	r3, #4
 8001d88:	d00e      	beq.n	8001da8 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d8a:	4bc2      	ldr	r3, [pc, #776]	; (8002094 <HAL_RCC_OscConfig+0x334>)
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	220c      	movs	r2, #12
 8001d90:	4013      	ands	r3, r2
 8001d92:	2b08      	cmp	r3, #8
 8001d94:	d116      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x64>
 8001d96:	4bbf      	ldr	r3, [pc, #764]	; (8002094 <HAL_RCC_OscConfig+0x334>)
 8001d98:	685a      	ldr	r2, [r3, #4]
 8001d9a:	23c0      	movs	r3, #192	; 0xc0
 8001d9c:	025b      	lsls	r3, r3, #9
 8001d9e:	401a      	ands	r2, r3
 8001da0:	2380      	movs	r3, #128	; 0x80
 8001da2:	025b      	lsls	r3, r3, #9
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d10d      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001da8:	4bba      	ldr	r3, [pc, #744]	; (8002094 <HAL_RCC_OscConfig+0x334>)
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	2380      	movs	r3, #128	; 0x80
 8001dae:	029b      	lsls	r3, r3, #10
 8001db0:	4013      	ands	r3, r2
 8001db2:	d100      	bne.n	8001db6 <HAL_RCC_OscConfig+0x56>
 8001db4:	e070      	b.n	8001e98 <HAL_RCC_OscConfig+0x138>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d000      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x60>
 8001dbe:	e06b      	b.n	8001e98 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e2dc      	b.n	800237e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d107      	bne.n	8001ddc <HAL_RCC_OscConfig+0x7c>
 8001dcc:	4bb1      	ldr	r3, [pc, #708]	; (8002094 <HAL_RCC_OscConfig+0x334>)
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	4bb0      	ldr	r3, [pc, #704]	; (8002094 <HAL_RCC_OscConfig+0x334>)
 8001dd2:	2180      	movs	r1, #128	; 0x80
 8001dd4:	0249      	lsls	r1, r1, #9
 8001dd6:	430a      	orrs	r2, r1
 8001dd8:	601a      	str	r2, [r3, #0]
 8001dda:	e02f      	b.n	8001e3c <HAL_RCC_OscConfig+0xdc>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d10c      	bne.n	8001dfe <HAL_RCC_OscConfig+0x9e>
 8001de4:	4bab      	ldr	r3, [pc, #684]	; (8002094 <HAL_RCC_OscConfig+0x334>)
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	4baa      	ldr	r3, [pc, #680]	; (8002094 <HAL_RCC_OscConfig+0x334>)
 8001dea:	49ab      	ldr	r1, [pc, #684]	; (8002098 <HAL_RCC_OscConfig+0x338>)
 8001dec:	400a      	ands	r2, r1
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	4ba8      	ldr	r3, [pc, #672]	; (8002094 <HAL_RCC_OscConfig+0x334>)
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	4ba7      	ldr	r3, [pc, #668]	; (8002094 <HAL_RCC_OscConfig+0x334>)
 8001df6:	49a9      	ldr	r1, [pc, #676]	; (800209c <HAL_RCC_OscConfig+0x33c>)
 8001df8:	400a      	ands	r2, r1
 8001dfa:	601a      	str	r2, [r3, #0]
 8001dfc:	e01e      	b.n	8001e3c <HAL_RCC_OscConfig+0xdc>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	2b05      	cmp	r3, #5
 8001e04:	d10e      	bne.n	8001e24 <HAL_RCC_OscConfig+0xc4>
 8001e06:	4ba3      	ldr	r3, [pc, #652]	; (8002094 <HAL_RCC_OscConfig+0x334>)
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	4ba2      	ldr	r3, [pc, #648]	; (8002094 <HAL_RCC_OscConfig+0x334>)
 8001e0c:	2180      	movs	r1, #128	; 0x80
 8001e0e:	02c9      	lsls	r1, r1, #11
 8001e10:	430a      	orrs	r2, r1
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	4b9f      	ldr	r3, [pc, #636]	; (8002094 <HAL_RCC_OscConfig+0x334>)
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	4b9e      	ldr	r3, [pc, #632]	; (8002094 <HAL_RCC_OscConfig+0x334>)
 8001e1a:	2180      	movs	r1, #128	; 0x80
 8001e1c:	0249      	lsls	r1, r1, #9
 8001e1e:	430a      	orrs	r2, r1
 8001e20:	601a      	str	r2, [r3, #0]
 8001e22:	e00b      	b.n	8001e3c <HAL_RCC_OscConfig+0xdc>
 8001e24:	4b9b      	ldr	r3, [pc, #620]	; (8002094 <HAL_RCC_OscConfig+0x334>)
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	4b9a      	ldr	r3, [pc, #616]	; (8002094 <HAL_RCC_OscConfig+0x334>)
 8001e2a:	499b      	ldr	r1, [pc, #620]	; (8002098 <HAL_RCC_OscConfig+0x338>)
 8001e2c:	400a      	ands	r2, r1
 8001e2e:	601a      	str	r2, [r3, #0]
 8001e30:	4b98      	ldr	r3, [pc, #608]	; (8002094 <HAL_RCC_OscConfig+0x334>)
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	4b97      	ldr	r3, [pc, #604]	; (8002094 <HAL_RCC_OscConfig+0x334>)
 8001e36:	4999      	ldr	r1, [pc, #612]	; (800209c <HAL_RCC_OscConfig+0x33c>)
 8001e38:	400a      	ands	r2, r1
 8001e3a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d014      	beq.n	8001e6e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e44:	f7fe ff24 	bl	8000c90 <HAL_GetTick>
 8001e48:	0003      	movs	r3, r0
 8001e4a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e4c:	e008      	b.n	8001e60 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e4e:	f7fe ff1f 	bl	8000c90 <HAL_GetTick>
 8001e52:	0002      	movs	r2, r0
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	2b64      	cmp	r3, #100	; 0x64
 8001e5a:	d901      	bls.n	8001e60 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	e28e      	b.n	800237e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e60:	4b8c      	ldr	r3, [pc, #560]	; (8002094 <HAL_RCC_OscConfig+0x334>)
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	2380      	movs	r3, #128	; 0x80
 8001e66:	029b      	lsls	r3, r3, #10
 8001e68:	4013      	ands	r3, r2
 8001e6a:	d0f0      	beq.n	8001e4e <HAL_RCC_OscConfig+0xee>
 8001e6c:	e015      	b.n	8001e9a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e6e:	f7fe ff0f 	bl	8000c90 <HAL_GetTick>
 8001e72:	0003      	movs	r3, r0
 8001e74:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e76:	e008      	b.n	8001e8a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e78:	f7fe ff0a 	bl	8000c90 <HAL_GetTick>
 8001e7c:	0002      	movs	r2, r0
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	2b64      	cmp	r3, #100	; 0x64
 8001e84:	d901      	bls.n	8001e8a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e279      	b.n	800237e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e8a:	4b82      	ldr	r3, [pc, #520]	; (8002094 <HAL_RCC_OscConfig+0x334>)
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	2380      	movs	r3, #128	; 0x80
 8001e90:	029b      	lsls	r3, r3, #10
 8001e92:	4013      	ands	r3, r2
 8001e94:	d1f0      	bne.n	8001e78 <HAL_RCC_OscConfig+0x118>
 8001e96:	e000      	b.n	8001e9a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e98:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2202      	movs	r2, #2
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	d100      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x146>
 8001ea4:	e06c      	b.n	8001f80 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001ea6:	4b7b      	ldr	r3, [pc, #492]	; (8002094 <HAL_RCC_OscConfig+0x334>)
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	220c      	movs	r2, #12
 8001eac:	4013      	ands	r3, r2
 8001eae:	d00e      	beq.n	8001ece <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001eb0:	4b78      	ldr	r3, [pc, #480]	; (8002094 <HAL_RCC_OscConfig+0x334>)
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	220c      	movs	r2, #12
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	2b08      	cmp	r3, #8
 8001eba:	d11f      	bne.n	8001efc <HAL_RCC_OscConfig+0x19c>
 8001ebc:	4b75      	ldr	r3, [pc, #468]	; (8002094 <HAL_RCC_OscConfig+0x334>)
 8001ebe:	685a      	ldr	r2, [r3, #4]
 8001ec0:	23c0      	movs	r3, #192	; 0xc0
 8001ec2:	025b      	lsls	r3, r3, #9
 8001ec4:	401a      	ands	r2, r3
 8001ec6:	2380      	movs	r3, #128	; 0x80
 8001ec8:	021b      	lsls	r3, r3, #8
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d116      	bne.n	8001efc <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ece:	4b71      	ldr	r3, [pc, #452]	; (8002094 <HAL_RCC_OscConfig+0x334>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	2202      	movs	r2, #2
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	d005      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x184>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d001      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e24c      	b.n	800237e <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ee4:	4b6b      	ldr	r3, [pc, #428]	; (8002094 <HAL_RCC_OscConfig+0x334>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	22f8      	movs	r2, #248	; 0xf8
 8001eea:	4393      	bics	r3, r2
 8001eec:	0019      	movs	r1, r3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	691b      	ldr	r3, [r3, #16]
 8001ef2:	00da      	lsls	r2, r3, #3
 8001ef4:	4b67      	ldr	r3, [pc, #412]	; (8002094 <HAL_RCC_OscConfig+0x334>)
 8001ef6:	430a      	orrs	r2, r1
 8001ef8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001efa:	e041      	b.n	8001f80 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d024      	beq.n	8001f4e <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f04:	4b63      	ldr	r3, [pc, #396]	; (8002094 <HAL_RCC_OscConfig+0x334>)
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	4b62      	ldr	r3, [pc, #392]	; (8002094 <HAL_RCC_OscConfig+0x334>)
 8001f0a:	2101      	movs	r1, #1
 8001f0c:	430a      	orrs	r2, r1
 8001f0e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f10:	f7fe febe 	bl	8000c90 <HAL_GetTick>
 8001f14:	0003      	movs	r3, r0
 8001f16:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f18:	e008      	b.n	8001f2c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f1a:	f7fe feb9 	bl	8000c90 <HAL_GetTick>
 8001f1e:	0002      	movs	r2, r0
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d901      	bls.n	8001f2c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e228      	b.n	800237e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f2c:	4b59      	ldr	r3, [pc, #356]	; (8002094 <HAL_RCC_OscConfig+0x334>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2202      	movs	r2, #2
 8001f32:	4013      	ands	r3, r2
 8001f34:	d0f1      	beq.n	8001f1a <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f36:	4b57      	ldr	r3, [pc, #348]	; (8002094 <HAL_RCC_OscConfig+0x334>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	22f8      	movs	r2, #248	; 0xf8
 8001f3c:	4393      	bics	r3, r2
 8001f3e:	0019      	movs	r1, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	691b      	ldr	r3, [r3, #16]
 8001f44:	00da      	lsls	r2, r3, #3
 8001f46:	4b53      	ldr	r3, [pc, #332]	; (8002094 <HAL_RCC_OscConfig+0x334>)
 8001f48:	430a      	orrs	r2, r1
 8001f4a:	601a      	str	r2, [r3, #0]
 8001f4c:	e018      	b.n	8001f80 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f4e:	4b51      	ldr	r3, [pc, #324]	; (8002094 <HAL_RCC_OscConfig+0x334>)
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	4b50      	ldr	r3, [pc, #320]	; (8002094 <HAL_RCC_OscConfig+0x334>)
 8001f54:	2101      	movs	r1, #1
 8001f56:	438a      	bics	r2, r1
 8001f58:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f5a:	f7fe fe99 	bl	8000c90 <HAL_GetTick>
 8001f5e:	0003      	movs	r3, r0
 8001f60:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f62:	e008      	b.n	8001f76 <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f64:	f7fe fe94 	bl	8000c90 <HAL_GetTick>
 8001f68:	0002      	movs	r2, r0
 8001f6a:	69bb      	ldr	r3, [r7, #24]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e203      	b.n	800237e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f76:	4b47      	ldr	r3, [pc, #284]	; (8002094 <HAL_RCC_OscConfig+0x334>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	2202      	movs	r2, #2
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	d1f1      	bne.n	8001f64 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2208      	movs	r2, #8
 8001f86:	4013      	ands	r3, r2
 8001f88:	d036      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	69db      	ldr	r3, [r3, #28]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d019      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f92:	4b40      	ldr	r3, [pc, #256]	; (8002094 <HAL_RCC_OscConfig+0x334>)
 8001f94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f96:	4b3f      	ldr	r3, [pc, #252]	; (8002094 <HAL_RCC_OscConfig+0x334>)
 8001f98:	2101      	movs	r1, #1
 8001f9a:	430a      	orrs	r2, r1
 8001f9c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f9e:	f7fe fe77 	bl	8000c90 <HAL_GetTick>
 8001fa2:	0003      	movs	r3, r0
 8001fa4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fa6:	e008      	b.n	8001fba <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fa8:	f7fe fe72 	bl	8000c90 <HAL_GetTick>
 8001fac:	0002      	movs	r2, r0
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d901      	bls.n	8001fba <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e1e1      	b.n	800237e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fba:	4b36      	ldr	r3, [pc, #216]	; (8002094 <HAL_RCC_OscConfig+0x334>)
 8001fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fbe:	2202      	movs	r2, #2
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	d0f1      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x248>
 8001fc4:	e018      	b.n	8001ff8 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fc6:	4b33      	ldr	r3, [pc, #204]	; (8002094 <HAL_RCC_OscConfig+0x334>)
 8001fc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fca:	4b32      	ldr	r3, [pc, #200]	; (8002094 <HAL_RCC_OscConfig+0x334>)
 8001fcc:	2101      	movs	r1, #1
 8001fce:	438a      	bics	r2, r1
 8001fd0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fd2:	f7fe fe5d 	bl	8000c90 <HAL_GetTick>
 8001fd6:	0003      	movs	r3, r0
 8001fd8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fda:	e008      	b.n	8001fee <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fdc:	f7fe fe58 	bl	8000c90 <HAL_GetTick>
 8001fe0:	0002      	movs	r2, r0
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d901      	bls.n	8001fee <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e1c7      	b.n	800237e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fee:	4b29      	ldr	r3, [pc, #164]	; (8002094 <HAL_RCC_OscConfig+0x334>)
 8001ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff2:	2202      	movs	r2, #2
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	d1f1      	bne.n	8001fdc <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2204      	movs	r2, #4
 8001ffe:	4013      	ands	r3, r2
 8002000:	d100      	bne.n	8002004 <HAL_RCC_OscConfig+0x2a4>
 8002002:	e0b5      	b.n	8002170 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002004:	201f      	movs	r0, #31
 8002006:	183b      	adds	r3, r7, r0
 8002008:	2200      	movs	r2, #0
 800200a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800200c:	4b21      	ldr	r3, [pc, #132]	; (8002094 <HAL_RCC_OscConfig+0x334>)
 800200e:	69da      	ldr	r2, [r3, #28]
 8002010:	2380      	movs	r3, #128	; 0x80
 8002012:	055b      	lsls	r3, r3, #21
 8002014:	4013      	ands	r3, r2
 8002016:	d110      	bne.n	800203a <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002018:	4b1e      	ldr	r3, [pc, #120]	; (8002094 <HAL_RCC_OscConfig+0x334>)
 800201a:	69da      	ldr	r2, [r3, #28]
 800201c:	4b1d      	ldr	r3, [pc, #116]	; (8002094 <HAL_RCC_OscConfig+0x334>)
 800201e:	2180      	movs	r1, #128	; 0x80
 8002020:	0549      	lsls	r1, r1, #21
 8002022:	430a      	orrs	r2, r1
 8002024:	61da      	str	r2, [r3, #28]
 8002026:	4b1b      	ldr	r3, [pc, #108]	; (8002094 <HAL_RCC_OscConfig+0x334>)
 8002028:	69da      	ldr	r2, [r3, #28]
 800202a:	2380      	movs	r3, #128	; 0x80
 800202c:	055b      	lsls	r3, r3, #21
 800202e:	4013      	ands	r3, r2
 8002030:	60fb      	str	r3, [r7, #12]
 8002032:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002034:	183b      	adds	r3, r7, r0
 8002036:	2201      	movs	r2, #1
 8002038:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800203a:	4b19      	ldr	r3, [pc, #100]	; (80020a0 <HAL_RCC_OscConfig+0x340>)
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	2380      	movs	r3, #128	; 0x80
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	4013      	ands	r3, r2
 8002044:	d11a      	bne.n	800207c <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002046:	4b16      	ldr	r3, [pc, #88]	; (80020a0 <HAL_RCC_OscConfig+0x340>)
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	4b15      	ldr	r3, [pc, #84]	; (80020a0 <HAL_RCC_OscConfig+0x340>)
 800204c:	2180      	movs	r1, #128	; 0x80
 800204e:	0049      	lsls	r1, r1, #1
 8002050:	430a      	orrs	r2, r1
 8002052:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002054:	f7fe fe1c 	bl	8000c90 <HAL_GetTick>
 8002058:	0003      	movs	r3, r0
 800205a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800205c:	e008      	b.n	8002070 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800205e:	f7fe fe17 	bl	8000c90 <HAL_GetTick>
 8002062:	0002      	movs	r2, r0
 8002064:	69bb      	ldr	r3, [r7, #24]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	2b64      	cmp	r3, #100	; 0x64
 800206a:	d901      	bls.n	8002070 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 800206c:	2303      	movs	r3, #3
 800206e:	e186      	b.n	800237e <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002070:	4b0b      	ldr	r3, [pc, #44]	; (80020a0 <HAL_RCC_OscConfig+0x340>)
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	2380      	movs	r3, #128	; 0x80
 8002076:	005b      	lsls	r3, r3, #1
 8002078:	4013      	ands	r3, r2
 800207a:	d0f0      	beq.n	800205e <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	2b01      	cmp	r3, #1
 8002082:	d10f      	bne.n	80020a4 <HAL_RCC_OscConfig+0x344>
 8002084:	4b03      	ldr	r3, [pc, #12]	; (8002094 <HAL_RCC_OscConfig+0x334>)
 8002086:	6a1a      	ldr	r2, [r3, #32]
 8002088:	4b02      	ldr	r3, [pc, #8]	; (8002094 <HAL_RCC_OscConfig+0x334>)
 800208a:	2101      	movs	r1, #1
 800208c:	430a      	orrs	r2, r1
 800208e:	621a      	str	r2, [r3, #32]
 8002090:	e036      	b.n	8002100 <HAL_RCC_OscConfig+0x3a0>
 8002092:	46c0      	nop			; (mov r8, r8)
 8002094:	40021000 	.word	0x40021000
 8002098:	fffeffff 	.word	0xfffeffff
 800209c:	fffbffff 	.word	0xfffbffff
 80020a0:	40007000 	.word	0x40007000
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d10c      	bne.n	80020c6 <HAL_RCC_OscConfig+0x366>
 80020ac:	4bb6      	ldr	r3, [pc, #728]	; (8002388 <HAL_RCC_OscConfig+0x628>)
 80020ae:	6a1a      	ldr	r2, [r3, #32]
 80020b0:	4bb5      	ldr	r3, [pc, #724]	; (8002388 <HAL_RCC_OscConfig+0x628>)
 80020b2:	2101      	movs	r1, #1
 80020b4:	438a      	bics	r2, r1
 80020b6:	621a      	str	r2, [r3, #32]
 80020b8:	4bb3      	ldr	r3, [pc, #716]	; (8002388 <HAL_RCC_OscConfig+0x628>)
 80020ba:	6a1a      	ldr	r2, [r3, #32]
 80020bc:	4bb2      	ldr	r3, [pc, #712]	; (8002388 <HAL_RCC_OscConfig+0x628>)
 80020be:	2104      	movs	r1, #4
 80020c0:	438a      	bics	r2, r1
 80020c2:	621a      	str	r2, [r3, #32]
 80020c4:	e01c      	b.n	8002100 <HAL_RCC_OscConfig+0x3a0>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	2b05      	cmp	r3, #5
 80020cc:	d10c      	bne.n	80020e8 <HAL_RCC_OscConfig+0x388>
 80020ce:	4bae      	ldr	r3, [pc, #696]	; (8002388 <HAL_RCC_OscConfig+0x628>)
 80020d0:	6a1a      	ldr	r2, [r3, #32]
 80020d2:	4bad      	ldr	r3, [pc, #692]	; (8002388 <HAL_RCC_OscConfig+0x628>)
 80020d4:	2104      	movs	r1, #4
 80020d6:	430a      	orrs	r2, r1
 80020d8:	621a      	str	r2, [r3, #32]
 80020da:	4bab      	ldr	r3, [pc, #684]	; (8002388 <HAL_RCC_OscConfig+0x628>)
 80020dc:	6a1a      	ldr	r2, [r3, #32]
 80020de:	4baa      	ldr	r3, [pc, #680]	; (8002388 <HAL_RCC_OscConfig+0x628>)
 80020e0:	2101      	movs	r1, #1
 80020e2:	430a      	orrs	r2, r1
 80020e4:	621a      	str	r2, [r3, #32]
 80020e6:	e00b      	b.n	8002100 <HAL_RCC_OscConfig+0x3a0>
 80020e8:	4ba7      	ldr	r3, [pc, #668]	; (8002388 <HAL_RCC_OscConfig+0x628>)
 80020ea:	6a1a      	ldr	r2, [r3, #32]
 80020ec:	4ba6      	ldr	r3, [pc, #664]	; (8002388 <HAL_RCC_OscConfig+0x628>)
 80020ee:	2101      	movs	r1, #1
 80020f0:	438a      	bics	r2, r1
 80020f2:	621a      	str	r2, [r3, #32]
 80020f4:	4ba4      	ldr	r3, [pc, #656]	; (8002388 <HAL_RCC_OscConfig+0x628>)
 80020f6:	6a1a      	ldr	r2, [r3, #32]
 80020f8:	4ba3      	ldr	r3, [pc, #652]	; (8002388 <HAL_RCC_OscConfig+0x628>)
 80020fa:	2104      	movs	r1, #4
 80020fc:	438a      	bics	r2, r1
 80020fe:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d014      	beq.n	8002132 <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002108:	f7fe fdc2 	bl	8000c90 <HAL_GetTick>
 800210c:	0003      	movs	r3, r0
 800210e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002110:	e009      	b.n	8002126 <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002112:	f7fe fdbd 	bl	8000c90 <HAL_GetTick>
 8002116:	0002      	movs	r2, r0
 8002118:	69bb      	ldr	r3, [r7, #24]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	4a9b      	ldr	r2, [pc, #620]	; (800238c <HAL_RCC_OscConfig+0x62c>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d901      	bls.n	8002126 <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e12b      	b.n	800237e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002126:	4b98      	ldr	r3, [pc, #608]	; (8002388 <HAL_RCC_OscConfig+0x628>)
 8002128:	6a1b      	ldr	r3, [r3, #32]
 800212a:	2202      	movs	r2, #2
 800212c:	4013      	ands	r3, r2
 800212e:	d0f0      	beq.n	8002112 <HAL_RCC_OscConfig+0x3b2>
 8002130:	e013      	b.n	800215a <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002132:	f7fe fdad 	bl	8000c90 <HAL_GetTick>
 8002136:	0003      	movs	r3, r0
 8002138:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800213a:	e009      	b.n	8002150 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800213c:	f7fe fda8 	bl	8000c90 <HAL_GetTick>
 8002140:	0002      	movs	r2, r0
 8002142:	69bb      	ldr	r3, [r7, #24]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	4a91      	ldr	r2, [pc, #580]	; (800238c <HAL_RCC_OscConfig+0x62c>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d901      	bls.n	8002150 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	e116      	b.n	800237e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002150:	4b8d      	ldr	r3, [pc, #564]	; (8002388 <HAL_RCC_OscConfig+0x628>)
 8002152:	6a1b      	ldr	r3, [r3, #32]
 8002154:	2202      	movs	r2, #2
 8002156:	4013      	ands	r3, r2
 8002158:	d1f0      	bne.n	800213c <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800215a:	231f      	movs	r3, #31
 800215c:	18fb      	adds	r3, r7, r3
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	2b01      	cmp	r3, #1
 8002162:	d105      	bne.n	8002170 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002164:	4b88      	ldr	r3, [pc, #544]	; (8002388 <HAL_RCC_OscConfig+0x628>)
 8002166:	69da      	ldr	r2, [r3, #28]
 8002168:	4b87      	ldr	r3, [pc, #540]	; (8002388 <HAL_RCC_OscConfig+0x628>)
 800216a:	4989      	ldr	r1, [pc, #548]	; (8002390 <HAL_RCC_OscConfig+0x630>)
 800216c:	400a      	ands	r2, r1
 800216e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2210      	movs	r2, #16
 8002176:	4013      	ands	r3, r2
 8002178:	d063      	beq.n	8002242 <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	695b      	ldr	r3, [r3, #20]
 800217e:	2b01      	cmp	r3, #1
 8002180:	d12a      	bne.n	80021d8 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002182:	4b81      	ldr	r3, [pc, #516]	; (8002388 <HAL_RCC_OscConfig+0x628>)
 8002184:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002186:	4b80      	ldr	r3, [pc, #512]	; (8002388 <HAL_RCC_OscConfig+0x628>)
 8002188:	2104      	movs	r1, #4
 800218a:	430a      	orrs	r2, r1
 800218c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800218e:	4b7e      	ldr	r3, [pc, #504]	; (8002388 <HAL_RCC_OscConfig+0x628>)
 8002190:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002192:	4b7d      	ldr	r3, [pc, #500]	; (8002388 <HAL_RCC_OscConfig+0x628>)
 8002194:	2101      	movs	r1, #1
 8002196:	430a      	orrs	r2, r1
 8002198:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800219a:	f7fe fd79 	bl	8000c90 <HAL_GetTick>
 800219e:	0003      	movs	r3, r0
 80021a0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80021a2:	e008      	b.n	80021b6 <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80021a4:	f7fe fd74 	bl	8000c90 <HAL_GetTick>
 80021a8:	0002      	movs	r2, r0
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e0e3      	b.n	800237e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80021b6:	4b74      	ldr	r3, [pc, #464]	; (8002388 <HAL_RCC_OscConfig+0x628>)
 80021b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021ba:	2202      	movs	r2, #2
 80021bc:	4013      	ands	r3, r2
 80021be:	d0f1      	beq.n	80021a4 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80021c0:	4b71      	ldr	r3, [pc, #452]	; (8002388 <HAL_RCC_OscConfig+0x628>)
 80021c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021c4:	22f8      	movs	r2, #248	; 0xf8
 80021c6:	4393      	bics	r3, r2
 80021c8:	0019      	movs	r1, r3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	699b      	ldr	r3, [r3, #24]
 80021ce:	00da      	lsls	r2, r3, #3
 80021d0:	4b6d      	ldr	r3, [pc, #436]	; (8002388 <HAL_RCC_OscConfig+0x628>)
 80021d2:	430a      	orrs	r2, r1
 80021d4:	635a      	str	r2, [r3, #52]	; 0x34
 80021d6:	e034      	b.n	8002242 <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	695b      	ldr	r3, [r3, #20]
 80021dc:	3305      	adds	r3, #5
 80021de:	d111      	bne.n	8002204 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80021e0:	4b69      	ldr	r3, [pc, #420]	; (8002388 <HAL_RCC_OscConfig+0x628>)
 80021e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021e4:	4b68      	ldr	r3, [pc, #416]	; (8002388 <HAL_RCC_OscConfig+0x628>)
 80021e6:	2104      	movs	r1, #4
 80021e8:	438a      	bics	r2, r1
 80021ea:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80021ec:	4b66      	ldr	r3, [pc, #408]	; (8002388 <HAL_RCC_OscConfig+0x628>)
 80021ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021f0:	22f8      	movs	r2, #248	; 0xf8
 80021f2:	4393      	bics	r3, r2
 80021f4:	0019      	movs	r1, r3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	699b      	ldr	r3, [r3, #24]
 80021fa:	00da      	lsls	r2, r3, #3
 80021fc:	4b62      	ldr	r3, [pc, #392]	; (8002388 <HAL_RCC_OscConfig+0x628>)
 80021fe:	430a      	orrs	r2, r1
 8002200:	635a      	str	r2, [r3, #52]	; 0x34
 8002202:	e01e      	b.n	8002242 <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002204:	4b60      	ldr	r3, [pc, #384]	; (8002388 <HAL_RCC_OscConfig+0x628>)
 8002206:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002208:	4b5f      	ldr	r3, [pc, #380]	; (8002388 <HAL_RCC_OscConfig+0x628>)
 800220a:	2104      	movs	r1, #4
 800220c:	430a      	orrs	r2, r1
 800220e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002210:	4b5d      	ldr	r3, [pc, #372]	; (8002388 <HAL_RCC_OscConfig+0x628>)
 8002212:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002214:	4b5c      	ldr	r3, [pc, #368]	; (8002388 <HAL_RCC_OscConfig+0x628>)
 8002216:	2101      	movs	r1, #1
 8002218:	438a      	bics	r2, r1
 800221a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800221c:	f7fe fd38 	bl	8000c90 <HAL_GetTick>
 8002220:	0003      	movs	r3, r0
 8002222:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002224:	e008      	b.n	8002238 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002226:	f7fe fd33 	bl	8000c90 <HAL_GetTick>
 800222a:	0002      	movs	r2, r0
 800222c:	69bb      	ldr	r3, [r7, #24]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	2b02      	cmp	r3, #2
 8002232:	d901      	bls.n	8002238 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	e0a2      	b.n	800237e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002238:	4b53      	ldr	r3, [pc, #332]	; (8002388 <HAL_RCC_OscConfig+0x628>)
 800223a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800223c:	2202      	movs	r2, #2
 800223e:	4013      	ands	r3, r2
 8002240:	d1f1      	bne.n	8002226 <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6a1b      	ldr	r3, [r3, #32]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d100      	bne.n	800224c <HAL_RCC_OscConfig+0x4ec>
 800224a:	e097      	b.n	800237c <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800224c:	4b4e      	ldr	r3, [pc, #312]	; (8002388 <HAL_RCC_OscConfig+0x628>)
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	220c      	movs	r2, #12
 8002252:	4013      	ands	r3, r2
 8002254:	2b08      	cmp	r3, #8
 8002256:	d100      	bne.n	800225a <HAL_RCC_OscConfig+0x4fa>
 8002258:	e06b      	b.n	8002332 <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6a1b      	ldr	r3, [r3, #32]
 800225e:	2b02      	cmp	r3, #2
 8002260:	d14c      	bne.n	80022fc <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002262:	4b49      	ldr	r3, [pc, #292]	; (8002388 <HAL_RCC_OscConfig+0x628>)
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	4b48      	ldr	r3, [pc, #288]	; (8002388 <HAL_RCC_OscConfig+0x628>)
 8002268:	494a      	ldr	r1, [pc, #296]	; (8002394 <HAL_RCC_OscConfig+0x634>)
 800226a:	400a      	ands	r2, r1
 800226c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800226e:	f7fe fd0f 	bl	8000c90 <HAL_GetTick>
 8002272:	0003      	movs	r3, r0
 8002274:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002276:	e008      	b.n	800228a <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002278:	f7fe fd0a 	bl	8000c90 <HAL_GetTick>
 800227c:	0002      	movs	r2, r0
 800227e:	69bb      	ldr	r3, [r7, #24]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	2b02      	cmp	r3, #2
 8002284:	d901      	bls.n	800228a <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e079      	b.n	800237e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800228a:	4b3f      	ldr	r3, [pc, #252]	; (8002388 <HAL_RCC_OscConfig+0x628>)
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	2380      	movs	r3, #128	; 0x80
 8002290:	049b      	lsls	r3, r3, #18
 8002292:	4013      	ands	r3, r2
 8002294:	d1f0      	bne.n	8002278 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002296:	4b3c      	ldr	r3, [pc, #240]	; (8002388 <HAL_RCC_OscConfig+0x628>)
 8002298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800229a:	220f      	movs	r2, #15
 800229c:	4393      	bics	r3, r2
 800229e:	0019      	movs	r1, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022a4:	4b38      	ldr	r3, [pc, #224]	; (8002388 <HAL_RCC_OscConfig+0x628>)
 80022a6:	430a      	orrs	r2, r1
 80022a8:	62da      	str	r2, [r3, #44]	; 0x2c
 80022aa:	4b37      	ldr	r3, [pc, #220]	; (8002388 <HAL_RCC_OscConfig+0x628>)
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	4a3a      	ldr	r2, [pc, #232]	; (8002398 <HAL_RCC_OscConfig+0x638>)
 80022b0:	4013      	ands	r3, r2
 80022b2:	0019      	movs	r1, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022bc:	431a      	orrs	r2, r3
 80022be:	4b32      	ldr	r3, [pc, #200]	; (8002388 <HAL_RCC_OscConfig+0x628>)
 80022c0:	430a      	orrs	r2, r1
 80022c2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022c4:	4b30      	ldr	r3, [pc, #192]	; (8002388 <HAL_RCC_OscConfig+0x628>)
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	4b2f      	ldr	r3, [pc, #188]	; (8002388 <HAL_RCC_OscConfig+0x628>)
 80022ca:	2180      	movs	r1, #128	; 0x80
 80022cc:	0449      	lsls	r1, r1, #17
 80022ce:	430a      	orrs	r2, r1
 80022d0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d2:	f7fe fcdd 	bl	8000c90 <HAL_GetTick>
 80022d6:	0003      	movs	r3, r0
 80022d8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022da:	e008      	b.n	80022ee <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022dc:	f7fe fcd8 	bl	8000c90 <HAL_GetTick>
 80022e0:	0002      	movs	r2, r0
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e047      	b.n	800237e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022ee:	4b26      	ldr	r3, [pc, #152]	; (8002388 <HAL_RCC_OscConfig+0x628>)
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	2380      	movs	r3, #128	; 0x80
 80022f4:	049b      	lsls	r3, r3, #18
 80022f6:	4013      	ands	r3, r2
 80022f8:	d0f0      	beq.n	80022dc <HAL_RCC_OscConfig+0x57c>
 80022fa:	e03f      	b.n	800237c <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022fc:	4b22      	ldr	r3, [pc, #136]	; (8002388 <HAL_RCC_OscConfig+0x628>)
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	4b21      	ldr	r3, [pc, #132]	; (8002388 <HAL_RCC_OscConfig+0x628>)
 8002302:	4924      	ldr	r1, [pc, #144]	; (8002394 <HAL_RCC_OscConfig+0x634>)
 8002304:	400a      	ands	r2, r1
 8002306:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002308:	f7fe fcc2 	bl	8000c90 <HAL_GetTick>
 800230c:	0003      	movs	r3, r0
 800230e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002310:	e008      	b.n	8002324 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002312:	f7fe fcbd 	bl	8000c90 <HAL_GetTick>
 8002316:	0002      	movs	r2, r0
 8002318:	69bb      	ldr	r3, [r7, #24]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	2b02      	cmp	r3, #2
 800231e:	d901      	bls.n	8002324 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e02c      	b.n	800237e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002324:	4b18      	ldr	r3, [pc, #96]	; (8002388 <HAL_RCC_OscConfig+0x628>)
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	2380      	movs	r3, #128	; 0x80
 800232a:	049b      	lsls	r3, r3, #18
 800232c:	4013      	ands	r3, r2
 800232e:	d1f0      	bne.n	8002312 <HAL_RCC_OscConfig+0x5b2>
 8002330:	e024      	b.n	800237c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6a1b      	ldr	r3, [r3, #32]
 8002336:	2b01      	cmp	r3, #1
 8002338:	d101      	bne.n	800233e <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e01f      	b.n	800237e <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800233e:	4b12      	ldr	r3, [pc, #72]	; (8002388 <HAL_RCC_OscConfig+0x628>)
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002344:	4b10      	ldr	r3, [pc, #64]	; (8002388 <HAL_RCC_OscConfig+0x628>)
 8002346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002348:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800234a:	697a      	ldr	r2, [r7, #20]
 800234c:	23c0      	movs	r3, #192	; 0xc0
 800234e:	025b      	lsls	r3, r3, #9
 8002350:	401a      	ands	r2, r3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002356:	429a      	cmp	r2, r3
 8002358:	d10e      	bne.n	8002378 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	220f      	movs	r2, #15
 800235e:	401a      	ands	r2, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002364:	429a      	cmp	r2, r3
 8002366:	d107      	bne.n	8002378 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002368:	697a      	ldr	r2, [r7, #20]
 800236a:	23f0      	movs	r3, #240	; 0xf0
 800236c:	039b      	lsls	r3, r3, #14
 800236e:	401a      	ands	r2, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002374:	429a      	cmp	r2, r3
 8002376:	d001      	beq.n	800237c <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e000      	b.n	800237e <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 800237c:	2300      	movs	r3, #0
}
 800237e:	0018      	movs	r0, r3
 8002380:	46bd      	mov	sp, r7
 8002382:	b008      	add	sp, #32
 8002384:	bd80      	pop	{r7, pc}
 8002386:	46c0      	nop			; (mov r8, r8)
 8002388:	40021000 	.word	0x40021000
 800238c:	00001388 	.word	0x00001388
 8002390:	efffffff 	.word	0xefffffff
 8002394:	feffffff 	.word	0xfeffffff
 8002398:	ffc27fff 	.word	0xffc27fff

0800239c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d101      	bne.n	80023b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e0b3      	b.n	8002518 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023b0:	4b5b      	ldr	r3, [pc, #364]	; (8002520 <HAL_RCC_ClockConfig+0x184>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2201      	movs	r2, #1
 80023b6:	4013      	ands	r3, r2
 80023b8:	683a      	ldr	r2, [r7, #0]
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d911      	bls.n	80023e2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023be:	4b58      	ldr	r3, [pc, #352]	; (8002520 <HAL_RCC_ClockConfig+0x184>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	2201      	movs	r2, #1
 80023c4:	4393      	bics	r3, r2
 80023c6:	0019      	movs	r1, r3
 80023c8:	4b55      	ldr	r3, [pc, #340]	; (8002520 <HAL_RCC_ClockConfig+0x184>)
 80023ca:	683a      	ldr	r2, [r7, #0]
 80023cc:	430a      	orrs	r2, r1
 80023ce:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023d0:	4b53      	ldr	r3, [pc, #332]	; (8002520 <HAL_RCC_ClockConfig+0x184>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2201      	movs	r2, #1
 80023d6:	4013      	ands	r3, r2
 80023d8:	683a      	ldr	r2, [r7, #0]
 80023da:	429a      	cmp	r2, r3
 80023dc:	d001      	beq.n	80023e2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e09a      	b.n	8002518 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2202      	movs	r2, #2
 80023e8:	4013      	ands	r3, r2
 80023ea:	d015      	beq.n	8002418 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2204      	movs	r2, #4
 80023f2:	4013      	ands	r3, r2
 80023f4:	d006      	beq.n	8002404 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80023f6:	4b4b      	ldr	r3, [pc, #300]	; (8002524 <HAL_RCC_ClockConfig+0x188>)
 80023f8:	685a      	ldr	r2, [r3, #4]
 80023fa:	4b4a      	ldr	r3, [pc, #296]	; (8002524 <HAL_RCC_ClockConfig+0x188>)
 80023fc:	21e0      	movs	r1, #224	; 0xe0
 80023fe:	00c9      	lsls	r1, r1, #3
 8002400:	430a      	orrs	r2, r1
 8002402:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002404:	4b47      	ldr	r3, [pc, #284]	; (8002524 <HAL_RCC_ClockConfig+0x188>)
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	22f0      	movs	r2, #240	; 0xf0
 800240a:	4393      	bics	r3, r2
 800240c:	0019      	movs	r1, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	689a      	ldr	r2, [r3, #8]
 8002412:	4b44      	ldr	r3, [pc, #272]	; (8002524 <HAL_RCC_ClockConfig+0x188>)
 8002414:	430a      	orrs	r2, r1
 8002416:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2201      	movs	r2, #1
 800241e:	4013      	ands	r3, r2
 8002420:	d040      	beq.n	80024a4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	2b01      	cmp	r3, #1
 8002428:	d107      	bne.n	800243a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800242a:	4b3e      	ldr	r3, [pc, #248]	; (8002524 <HAL_RCC_ClockConfig+0x188>)
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	2380      	movs	r3, #128	; 0x80
 8002430:	029b      	lsls	r3, r3, #10
 8002432:	4013      	ands	r3, r2
 8002434:	d114      	bne.n	8002460 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e06e      	b.n	8002518 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	2b02      	cmp	r3, #2
 8002440:	d107      	bne.n	8002452 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002442:	4b38      	ldr	r3, [pc, #224]	; (8002524 <HAL_RCC_ClockConfig+0x188>)
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	2380      	movs	r3, #128	; 0x80
 8002448:	049b      	lsls	r3, r3, #18
 800244a:	4013      	ands	r3, r2
 800244c:	d108      	bne.n	8002460 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e062      	b.n	8002518 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002452:	4b34      	ldr	r3, [pc, #208]	; (8002524 <HAL_RCC_ClockConfig+0x188>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	2202      	movs	r2, #2
 8002458:	4013      	ands	r3, r2
 800245a:	d101      	bne.n	8002460 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e05b      	b.n	8002518 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002460:	4b30      	ldr	r3, [pc, #192]	; (8002524 <HAL_RCC_ClockConfig+0x188>)
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	2203      	movs	r2, #3
 8002466:	4393      	bics	r3, r2
 8002468:	0019      	movs	r1, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685a      	ldr	r2, [r3, #4]
 800246e:	4b2d      	ldr	r3, [pc, #180]	; (8002524 <HAL_RCC_ClockConfig+0x188>)
 8002470:	430a      	orrs	r2, r1
 8002472:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002474:	f7fe fc0c 	bl	8000c90 <HAL_GetTick>
 8002478:	0003      	movs	r3, r0
 800247a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800247c:	e009      	b.n	8002492 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800247e:	f7fe fc07 	bl	8000c90 <HAL_GetTick>
 8002482:	0002      	movs	r2, r0
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	4a27      	ldr	r2, [pc, #156]	; (8002528 <HAL_RCC_ClockConfig+0x18c>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d901      	bls.n	8002492 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e042      	b.n	8002518 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002492:	4b24      	ldr	r3, [pc, #144]	; (8002524 <HAL_RCC_ClockConfig+0x188>)
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	220c      	movs	r2, #12
 8002498:	401a      	ands	r2, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d1ec      	bne.n	800247e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024a4:	4b1e      	ldr	r3, [pc, #120]	; (8002520 <HAL_RCC_ClockConfig+0x184>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	2201      	movs	r2, #1
 80024aa:	4013      	ands	r3, r2
 80024ac:	683a      	ldr	r2, [r7, #0]
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d211      	bcs.n	80024d6 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024b2:	4b1b      	ldr	r3, [pc, #108]	; (8002520 <HAL_RCC_ClockConfig+0x184>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	2201      	movs	r2, #1
 80024b8:	4393      	bics	r3, r2
 80024ba:	0019      	movs	r1, r3
 80024bc:	4b18      	ldr	r3, [pc, #96]	; (8002520 <HAL_RCC_ClockConfig+0x184>)
 80024be:	683a      	ldr	r2, [r7, #0]
 80024c0:	430a      	orrs	r2, r1
 80024c2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024c4:	4b16      	ldr	r3, [pc, #88]	; (8002520 <HAL_RCC_ClockConfig+0x184>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2201      	movs	r2, #1
 80024ca:	4013      	ands	r3, r2
 80024cc:	683a      	ldr	r2, [r7, #0]
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d001      	beq.n	80024d6 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e020      	b.n	8002518 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2204      	movs	r2, #4
 80024dc:	4013      	ands	r3, r2
 80024de:	d009      	beq.n	80024f4 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80024e0:	4b10      	ldr	r3, [pc, #64]	; (8002524 <HAL_RCC_ClockConfig+0x188>)
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	4a11      	ldr	r2, [pc, #68]	; (800252c <HAL_RCC_ClockConfig+0x190>)
 80024e6:	4013      	ands	r3, r2
 80024e8:	0019      	movs	r1, r3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	68da      	ldr	r2, [r3, #12]
 80024ee:	4b0d      	ldr	r3, [pc, #52]	; (8002524 <HAL_RCC_ClockConfig+0x188>)
 80024f0:	430a      	orrs	r2, r1
 80024f2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80024f4:	f000 f820 	bl	8002538 <HAL_RCC_GetSysClockFreq>
 80024f8:	0001      	movs	r1, r0
 80024fa:	4b0a      	ldr	r3, [pc, #40]	; (8002524 <HAL_RCC_ClockConfig+0x188>)
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	091b      	lsrs	r3, r3, #4
 8002500:	220f      	movs	r2, #15
 8002502:	4013      	ands	r3, r2
 8002504:	4a0a      	ldr	r2, [pc, #40]	; (8002530 <HAL_RCC_ClockConfig+0x194>)
 8002506:	5cd3      	ldrb	r3, [r2, r3]
 8002508:	000a      	movs	r2, r1
 800250a:	40da      	lsrs	r2, r3
 800250c:	4b09      	ldr	r3, [pc, #36]	; (8002534 <HAL_RCC_ClockConfig+0x198>)
 800250e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002510:	2003      	movs	r0, #3
 8002512:	f7fe fb77 	bl	8000c04 <HAL_InitTick>
  
  return HAL_OK;
 8002516:	2300      	movs	r3, #0
}
 8002518:	0018      	movs	r0, r3
 800251a:	46bd      	mov	sp, r7
 800251c:	b004      	add	sp, #16
 800251e:	bd80      	pop	{r7, pc}
 8002520:	40022000 	.word	0x40022000
 8002524:	40021000 	.word	0x40021000
 8002528:	00001388 	.word	0x00001388
 800252c:	fffff8ff 	.word	0xfffff8ff
 8002530:	08006864 	.word	0x08006864
 8002534:	20000000 	.word	0x20000000

08002538 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002538:	b590      	push	{r4, r7, lr}
 800253a:	b08f      	sub	sp, #60	; 0x3c
 800253c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800253e:	2314      	movs	r3, #20
 8002540:	18fb      	adds	r3, r7, r3
 8002542:	4a2c      	ldr	r2, [pc, #176]	; (80025f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002544:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002546:	c313      	stmia	r3!, {r0, r1, r4}
 8002548:	6812      	ldr	r2, [r2, #0]
 800254a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800254c:	1d3b      	adds	r3, r7, #4
 800254e:	4a2a      	ldr	r2, [pc, #168]	; (80025f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002550:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002552:	c313      	stmia	r3!, {r0, r1, r4}
 8002554:	6812      	ldr	r2, [r2, #0]
 8002556:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002558:	2300      	movs	r3, #0
 800255a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800255c:	2300      	movs	r3, #0
 800255e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002560:	2300      	movs	r3, #0
 8002562:	637b      	str	r3, [r7, #52]	; 0x34
 8002564:	2300      	movs	r3, #0
 8002566:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002568:	2300      	movs	r3, #0
 800256a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 800256c:	4b23      	ldr	r3, [pc, #140]	; (80025fc <HAL_RCC_GetSysClockFreq+0xc4>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002574:	220c      	movs	r2, #12
 8002576:	4013      	ands	r3, r2
 8002578:	2b04      	cmp	r3, #4
 800257a:	d002      	beq.n	8002582 <HAL_RCC_GetSysClockFreq+0x4a>
 800257c:	2b08      	cmp	r3, #8
 800257e:	d003      	beq.n	8002588 <HAL_RCC_GetSysClockFreq+0x50>
 8002580:	e02f      	b.n	80025e2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002582:	4b1f      	ldr	r3, [pc, #124]	; (8002600 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002584:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002586:	e02f      	b.n	80025e8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800258a:	0c9b      	lsrs	r3, r3, #18
 800258c:	220f      	movs	r2, #15
 800258e:	4013      	ands	r3, r2
 8002590:	2214      	movs	r2, #20
 8002592:	18ba      	adds	r2, r7, r2
 8002594:	5cd3      	ldrb	r3, [r2, r3]
 8002596:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002598:	4b18      	ldr	r3, [pc, #96]	; (80025fc <HAL_RCC_GetSysClockFreq+0xc4>)
 800259a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800259c:	220f      	movs	r2, #15
 800259e:	4013      	ands	r3, r2
 80025a0:	1d3a      	adds	r2, r7, #4
 80025a2:	5cd3      	ldrb	r3, [r2, r3]
 80025a4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80025a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025a8:	23c0      	movs	r3, #192	; 0xc0
 80025aa:	025b      	lsls	r3, r3, #9
 80025ac:	401a      	ands	r2, r3
 80025ae:	2380      	movs	r3, #128	; 0x80
 80025b0:	025b      	lsls	r3, r3, #9
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d109      	bne.n	80025ca <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80025b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025b8:	4811      	ldr	r0, [pc, #68]	; (8002600 <HAL_RCC_GetSysClockFreq+0xc8>)
 80025ba:	f7fd fdaf 	bl	800011c <__udivsi3>
 80025be:	0003      	movs	r3, r0
 80025c0:	001a      	movs	r2, r3
 80025c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c4:	4353      	muls	r3, r2
 80025c6:	637b      	str	r3, [r7, #52]	; 0x34
 80025c8:	e008      	b.n	80025dc <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80025ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025cc:	480c      	ldr	r0, [pc, #48]	; (8002600 <HAL_RCC_GetSysClockFreq+0xc8>)
 80025ce:	f7fd fda5 	bl	800011c <__udivsi3>
 80025d2:	0003      	movs	r3, r0
 80025d4:	001a      	movs	r2, r3
 80025d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d8:	4353      	muls	r3, r2
 80025da:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80025dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025de:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80025e0:	e002      	b.n	80025e8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025e2:	4b07      	ldr	r3, [pc, #28]	; (8002600 <HAL_RCC_GetSysClockFreq+0xc8>)
 80025e4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80025e6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80025e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80025ea:	0018      	movs	r0, r3
 80025ec:	46bd      	mov	sp, r7
 80025ee:	b00f      	add	sp, #60	; 0x3c
 80025f0:	bd90      	pop	{r4, r7, pc}
 80025f2:	46c0      	nop			; (mov r8, r8)
 80025f4:	08006808 	.word	0x08006808
 80025f8:	08006818 	.word	0x08006818
 80025fc:	40021000 	.word	0x40021000
 8002600:	007a1200 	.word	0x007a1200

08002604 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d101      	bne.n	8002616 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e042      	b.n	800269c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	223d      	movs	r2, #61	; 0x3d
 800261a:	5c9b      	ldrb	r3, [r3, r2]
 800261c:	b2db      	uxtb	r3, r3
 800261e:	2b00      	cmp	r3, #0
 8002620:	d107      	bne.n	8002632 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	223c      	movs	r2, #60	; 0x3c
 8002626:	2100      	movs	r1, #0
 8002628:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	0018      	movs	r0, r3
 800262e:	f7fe f9fb 	bl	8000a28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	223d      	movs	r2, #61	; 0x3d
 8002636:	2102      	movs	r1, #2
 8002638:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	3304      	adds	r3, #4
 8002642:	0019      	movs	r1, r3
 8002644:	0010      	movs	r0, r2
 8002646:	f000 fad1 	bl	8002bec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2246      	movs	r2, #70	; 0x46
 800264e:	2101      	movs	r1, #1
 8002650:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	223e      	movs	r2, #62	; 0x3e
 8002656:	2101      	movs	r1, #1
 8002658:	5499      	strb	r1, [r3, r2]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	223f      	movs	r2, #63	; 0x3f
 800265e:	2101      	movs	r1, #1
 8002660:	5499      	strb	r1, [r3, r2]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2240      	movs	r2, #64	; 0x40
 8002666:	2101      	movs	r1, #1
 8002668:	5499      	strb	r1, [r3, r2]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2241      	movs	r2, #65	; 0x41
 800266e:	2101      	movs	r1, #1
 8002670:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2242      	movs	r2, #66	; 0x42
 8002676:	2101      	movs	r1, #1
 8002678:	5499      	strb	r1, [r3, r2]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2243      	movs	r2, #67	; 0x43
 800267e:	2101      	movs	r1, #1
 8002680:	5499      	strb	r1, [r3, r2]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2244      	movs	r2, #68	; 0x44
 8002686:	2101      	movs	r1, #1
 8002688:	5499      	strb	r1, [r3, r2]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2245      	movs	r2, #69	; 0x45
 800268e:	2101      	movs	r1, #1
 8002690:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	223d      	movs	r2, #61	; 0x3d
 8002696:	2101      	movs	r1, #1
 8002698:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800269a:	2300      	movs	r3, #0
}
 800269c:	0018      	movs	r0, r3
 800269e:	46bd      	mov	sp, r7
 80026a0:	b002      	add	sp, #8
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d101      	bne.n	80026b6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e042      	b.n	800273c <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	223d      	movs	r2, #61	; 0x3d
 80026ba:	5c9b      	ldrb	r3, [r3, r2]
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d107      	bne.n	80026d2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	223c      	movs	r2, #60	; 0x3c
 80026c6:	2100      	movs	r1, #0
 80026c8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	0018      	movs	r0, r3
 80026ce:	f000 f839 	bl	8002744 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	223d      	movs	r2, #61	; 0x3d
 80026d6:	2102      	movs	r1, #2
 80026d8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	3304      	adds	r3, #4
 80026e2:	0019      	movs	r1, r3
 80026e4:	0010      	movs	r0, r2
 80026e6:	f000 fa81 	bl	8002bec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2246      	movs	r2, #70	; 0x46
 80026ee:	2101      	movs	r1, #1
 80026f0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	223e      	movs	r2, #62	; 0x3e
 80026f6:	2101      	movs	r1, #1
 80026f8:	5499      	strb	r1, [r3, r2]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	223f      	movs	r2, #63	; 0x3f
 80026fe:	2101      	movs	r1, #1
 8002700:	5499      	strb	r1, [r3, r2]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2240      	movs	r2, #64	; 0x40
 8002706:	2101      	movs	r1, #1
 8002708:	5499      	strb	r1, [r3, r2]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2241      	movs	r2, #65	; 0x41
 800270e:	2101      	movs	r1, #1
 8002710:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2242      	movs	r2, #66	; 0x42
 8002716:	2101      	movs	r1, #1
 8002718:	5499      	strb	r1, [r3, r2]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2243      	movs	r2, #67	; 0x43
 800271e:	2101      	movs	r1, #1
 8002720:	5499      	strb	r1, [r3, r2]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2244      	movs	r2, #68	; 0x44
 8002726:	2101      	movs	r1, #1
 8002728:	5499      	strb	r1, [r3, r2]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2245      	movs	r2, #69	; 0x45
 800272e:	2101      	movs	r1, #1
 8002730:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	223d      	movs	r2, #61	; 0x3d
 8002736:	2101      	movs	r1, #1
 8002738:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800273a:	2300      	movs	r3, #0
}
 800273c:	0018      	movs	r0, r3
 800273e:	46bd      	mov	sp, r7
 8002740:	b002      	add	sp, #8
 8002742:	bd80      	pop	{r7, pc}

08002744 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800274c:	46c0      	nop			; (mov r8, r8)
 800274e:	46bd      	mov	sp, r7
 8002750:	b002      	add	sp, #8
 8002752:	bd80      	pop	{r7, pc}

08002754 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d108      	bne.n	8002776 <HAL_TIM_PWM_Start+0x22>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	223e      	movs	r2, #62	; 0x3e
 8002768:	5c9b      	ldrb	r3, [r3, r2]
 800276a:	b2db      	uxtb	r3, r3
 800276c:	3b01      	subs	r3, #1
 800276e:	1e5a      	subs	r2, r3, #1
 8002770:	4193      	sbcs	r3, r2
 8002772:	b2db      	uxtb	r3, r3
 8002774:	e01f      	b.n	80027b6 <HAL_TIM_PWM_Start+0x62>
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	2b04      	cmp	r3, #4
 800277a:	d108      	bne.n	800278e <HAL_TIM_PWM_Start+0x3a>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	223f      	movs	r2, #63	; 0x3f
 8002780:	5c9b      	ldrb	r3, [r3, r2]
 8002782:	b2db      	uxtb	r3, r3
 8002784:	3b01      	subs	r3, #1
 8002786:	1e5a      	subs	r2, r3, #1
 8002788:	4193      	sbcs	r3, r2
 800278a:	b2db      	uxtb	r3, r3
 800278c:	e013      	b.n	80027b6 <HAL_TIM_PWM_Start+0x62>
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	2b08      	cmp	r3, #8
 8002792:	d108      	bne.n	80027a6 <HAL_TIM_PWM_Start+0x52>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2240      	movs	r2, #64	; 0x40
 8002798:	5c9b      	ldrb	r3, [r3, r2]
 800279a:	b2db      	uxtb	r3, r3
 800279c:	3b01      	subs	r3, #1
 800279e:	1e5a      	subs	r2, r3, #1
 80027a0:	4193      	sbcs	r3, r2
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	e007      	b.n	80027b6 <HAL_TIM_PWM_Start+0x62>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2241      	movs	r2, #65	; 0x41
 80027aa:	5c9b      	ldrb	r3, [r3, r2]
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	3b01      	subs	r3, #1
 80027b0:	1e5a      	subs	r2, r3, #1
 80027b2:	4193      	sbcs	r3, r2
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d001      	beq.n	80027be <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e06e      	b.n	800289c <HAL_TIM_PWM_Start+0x148>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d104      	bne.n	80027ce <HAL_TIM_PWM_Start+0x7a>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	223e      	movs	r2, #62	; 0x3e
 80027c8:	2102      	movs	r1, #2
 80027ca:	5499      	strb	r1, [r3, r2]
 80027cc:	e013      	b.n	80027f6 <HAL_TIM_PWM_Start+0xa2>
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	2b04      	cmp	r3, #4
 80027d2:	d104      	bne.n	80027de <HAL_TIM_PWM_Start+0x8a>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	223f      	movs	r2, #63	; 0x3f
 80027d8:	2102      	movs	r1, #2
 80027da:	5499      	strb	r1, [r3, r2]
 80027dc:	e00b      	b.n	80027f6 <HAL_TIM_PWM_Start+0xa2>
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	2b08      	cmp	r3, #8
 80027e2:	d104      	bne.n	80027ee <HAL_TIM_PWM_Start+0x9a>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2240      	movs	r2, #64	; 0x40
 80027e8:	2102      	movs	r1, #2
 80027ea:	5499      	strb	r1, [r3, r2]
 80027ec:	e003      	b.n	80027f6 <HAL_TIM_PWM_Start+0xa2>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2241      	movs	r2, #65	; 0x41
 80027f2:	2102      	movs	r1, #2
 80027f4:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	6839      	ldr	r1, [r7, #0]
 80027fc:	2201      	movs	r2, #1
 80027fe:	0018      	movs	r0, r3
 8002800:	f000 fd00 	bl	8003204 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a26      	ldr	r2, [pc, #152]	; (80028a4 <HAL_TIM_PWM_Start+0x150>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d00e      	beq.n	800282c <HAL_TIM_PWM_Start+0xd8>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a25      	ldr	r2, [pc, #148]	; (80028a8 <HAL_TIM_PWM_Start+0x154>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d009      	beq.n	800282c <HAL_TIM_PWM_Start+0xd8>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a23      	ldr	r2, [pc, #140]	; (80028ac <HAL_TIM_PWM_Start+0x158>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d004      	beq.n	800282c <HAL_TIM_PWM_Start+0xd8>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a22      	ldr	r2, [pc, #136]	; (80028b0 <HAL_TIM_PWM_Start+0x15c>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d101      	bne.n	8002830 <HAL_TIM_PWM_Start+0xdc>
 800282c:	2301      	movs	r3, #1
 800282e:	e000      	b.n	8002832 <HAL_TIM_PWM_Start+0xde>
 8002830:	2300      	movs	r3, #0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d008      	beq.n	8002848 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2180      	movs	r1, #128	; 0x80
 8002842:	0209      	lsls	r1, r1, #8
 8002844:	430a      	orrs	r2, r1
 8002846:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a15      	ldr	r2, [pc, #84]	; (80028a4 <HAL_TIM_PWM_Start+0x150>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d009      	beq.n	8002866 <HAL_TIM_PWM_Start+0x112>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a17      	ldr	r2, [pc, #92]	; (80028b4 <HAL_TIM_PWM_Start+0x160>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d004      	beq.n	8002866 <HAL_TIM_PWM_Start+0x112>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a11      	ldr	r2, [pc, #68]	; (80028a8 <HAL_TIM_PWM_Start+0x154>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d111      	bne.n	800288a <HAL_TIM_PWM_Start+0x136>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	2207      	movs	r2, #7
 800286e:	4013      	ands	r3, r2
 8002870:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2b06      	cmp	r3, #6
 8002876:	d010      	beq.n	800289a <HAL_TIM_PWM_Start+0x146>
    {
      __HAL_TIM_ENABLE(htim);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	2101      	movs	r1, #1
 8002884:	430a      	orrs	r2, r1
 8002886:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002888:	e007      	b.n	800289a <HAL_TIM_PWM_Start+0x146>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2101      	movs	r1, #1
 8002896:	430a      	orrs	r2, r1
 8002898:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800289a:	2300      	movs	r3, #0
}
 800289c:	0018      	movs	r0, r3
 800289e:	46bd      	mov	sp, r7
 80028a0:	b004      	add	sp, #16
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	40012c00 	.word	0x40012c00
 80028a8:	40014000 	.word	0x40014000
 80028ac:	40014400 	.word	0x40014400
 80028b0:	40014800 	.word	0x40014800
 80028b4:	40000400 	.word	0x40000400

080028b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b086      	sub	sp, #24
 80028bc:	af00      	add	r7, sp, #0
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028c4:	2317      	movs	r3, #23
 80028c6:	18fb      	adds	r3, r7, r3
 80028c8:	2200      	movs	r2, #0
 80028ca:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	223c      	movs	r2, #60	; 0x3c
 80028d0:	5c9b      	ldrb	r3, [r3, r2]
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d101      	bne.n	80028da <HAL_TIM_PWM_ConfigChannel+0x22>
 80028d6:	2302      	movs	r3, #2
 80028d8:	e0ad      	b.n	8002a36 <HAL_TIM_PWM_ConfigChannel+0x17e>
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	223c      	movs	r2, #60	; 0x3c
 80028de:	2101      	movs	r1, #1
 80028e0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2b0c      	cmp	r3, #12
 80028e6:	d100      	bne.n	80028ea <HAL_TIM_PWM_ConfigChannel+0x32>
 80028e8:	e076      	b.n	80029d8 <HAL_TIM_PWM_ConfigChannel+0x120>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2b0c      	cmp	r3, #12
 80028ee:	d900      	bls.n	80028f2 <HAL_TIM_PWM_ConfigChannel+0x3a>
 80028f0:	e095      	b.n	8002a1e <HAL_TIM_PWM_ConfigChannel+0x166>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2b08      	cmp	r3, #8
 80028f6:	d04e      	beq.n	8002996 <HAL_TIM_PWM_ConfigChannel+0xde>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2b08      	cmp	r3, #8
 80028fc:	d900      	bls.n	8002900 <HAL_TIM_PWM_ConfigChannel+0x48>
 80028fe:	e08e      	b.n	8002a1e <HAL_TIM_PWM_ConfigChannel+0x166>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d003      	beq.n	800290e <HAL_TIM_PWM_ConfigChannel+0x56>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2b04      	cmp	r3, #4
 800290a:	d021      	beq.n	8002950 <HAL_TIM_PWM_ConfigChannel+0x98>
 800290c:	e087      	b.n	8002a1e <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	68ba      	ldr	r2, [r7, #8]
 8002914:	0011      	movs	r1, r2
 8002916:	0018      	movs	r0, r3
 8002918:	f000 f9de 	bl	8002cd8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	699a      	ldr	r2, [r3, #24]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	2108      	movs	r1, #8
 8002928:	430a      	orrs	r2, r1
 800292a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	699a      	ldr	r2, [r3, #24]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2104      	movs	r1, #4
 8002938:	438a      	bics	r2, r1
 800293a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	6999      	ldr	r1, [r3, #24]
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	691a      	ldr	r2, [r3, #16]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	430a      	orrs	r2, r1
 800294c:	619a      	str	r2, [r3, #24]
      break;
 800294e:	e06b      	b.n	8002a28 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	68ba      	ldr	r2, [r7, #8]
 8002956:	0011      	movs	r1, r2
 8002958:	0018      	movs	r0, r3
 800295a:	f000 fa45 	bl	8002de8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	699a      	ldr	r2, [r3, #24]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2180      	movs	r1, #128	; 0x80
 800296a:	0109      	lsls	r1, r1, #4
 800296c:	430a      	orrs	r2, r1
 800296e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	699a      	ldr	r2, [r3, #24]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4931      	ldr	r1, [pc, #196]	; (8002a40 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800297c:	400a      	ands	r2, r1
 800297e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	6999      	ldr	r1, [r3, #24]
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	691b      	ldr	r3, [r3, #16]
 800298a:	021a      	lsls	r2, r3, #8
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	430a      	orrs	r2, r1
 8002992:	619a      	str	r2, [r3, #24]
      break;
 8002994:	e048      	b.n	8002a28 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	68ba      	ldr	r2, [r7, #8]
 800299c:	0011      	movs	r1, r2
 800299e:	0018      	movs	r0, r3
 80029a0:	f000 faa6 	bl	8002ef0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	69da      	ldr	r2, [r3, #28]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	2108      	movs	r1, #8
 80029b0:	430a      	orrs	r2, r1
 80029b2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	69da      	ldr	r2, [r3, #28]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	2104      	movs	r1, #4
 80029c0:	438a      	bics	r2, r1
 80029c2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	69d9      	ldr	r1, [r3, #28]
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	691a      	ldr	r2, [r3, #16]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	430a      	orrs	r2, r1
 80029d4:	61da      	str	r2, [r3, #28]
      break;
 80029d6:	e027      	b.n	8002a28 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	68ba      	ldr	r2, [r7, #8]
 80029de:	0011      	movs	r1, r2
 80029e0:	0018      	movs	r0, r3
 80029e2:	f000 fb0b 	bl	8002ffc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	69da      	ldr	r2, [r3, #28]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2180      	movs	r1, #128	; 0x80
 80029f2:	0109      	lsls	r1, r1, #4
 80029f4:	430a      	orrs	r2, r1
 80029f6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	69da      	ldr	r2, [r3, #28]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	490f      	ldr	r1, [pc, #60]	; (8002a40 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002a04:	400a      	ands	r2, r1
 8002a06:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	69d9      	ldr	r1, [r3, #28]
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	691b      	ldr	r3, [r3, #16]
 8002a12:	021a      	lsls	r2, r3, #8
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	430a      	orrs	r2, r1
 8002a1a:	61da      	str	r2, [r3, #28]
      break;
 8002a1c:	e004      	b.n	8002a28 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8002a1e:	2317      	movs	r3, #23
 8002a20:	18fb      	adds	r3, r7, r3
 8002a22:	2201      	movs	r2, #1
 8002a24:	701a      	strb	r2, [r3, #0]
      break;
 8002a26:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	223c      	movs	r2, #60	; 0x3c
 8002a2c:	2100      	movs	r1, #0
 8002a2e:	5499      	strb	r1, [r3, r2]

  return status;
 8002a30:	2317      	movs	r3, #23
 8002a32:	18fb      	adds	r3, r7, r3
 8002a34:	781b      	ldrb	r3, [r3, #0]
}
 8002a36:	0018      	movs	r0, r3
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	b006      	add	sp, #24
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	46c0      	nop			; (mov r8, r8)
 8002a40:	fffffbff 	.word	0xfffffbff

08002a44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a4e:	230f      	movs	r3, #15
 8002a50:	18fb      	adds	r3, r7, r3
 8002a52:	2200      	movs	r2, #0
 8002a54:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	223c      	movs	r2, #60	; 0x3c
 8002a5a:	5c9b      	ldrb	r3, [r3, r2]
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d101      	bne.n	8002a64 <HAL_TIM_ConfigClockSource+0x20>
 8002a60:	2302      	movs	r3, #2
 8002a62:	e0bc      	b.n	8002bde <HAL_TIM_ConfigClockSource+0x19a>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	223c      	movs	r2, #60	; 0x3c
 8002a68:	2101      	movs	r1, #1
 8002a6a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	223d      	movs	r2, #61	; 0x3d
 8002a70:	2102      	movs	r1, #2
 8002a72:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	2277      	movs	r2, #119	; 0x77
 8002a80:	4393      	bics	r3, r2
 8002a82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	4a58      	ldr	r2, [pc, #352]	; (8002be8 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002a88:	4013      	ands	r3, r2
 8002a8a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	68ba      	ldr	r2, [r7, #8]
 8002a92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2280      	movs	r2, #128	; 0x80
 8002a9a:	0192      	lsls	r2, r2, #6
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d040      	beq.n	8002b22 <HAL_TIM_ConfigClockSource+0xde>
 8002aa0:	2280      	movs	r2, #128	; 0x80
 8002aa2:	0192      	lsls	r2, r2, #6
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d900      	bls.n	8002aaa <HAL_TIM_ConfigClockSource+0x66>
 8002aa8:	e088      	b.n	8002bbc <HAL_TIM_ConfigClockSource+0x178>
 8002aaa:	2280      	movs	r2, #128	; 0x80
 8002aac:	0152      	lsls	r2, r2, #5
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d100      	bne.n	8002ab4 <HAL_TIM_ConfigClockSource+0x70>
 8002ab2:	e088      	b.n	8002bc6 <HAL_TIM_ConfigClockSource+0x182>
 8002ab4:	2280      	movs	r2, #128	; 0x80
 8002ab6:	0152      	lsls	r2, r2, #5
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d900      	bls.n	8002abe <HAL_TIM_ConfigClockSource+0x7a>
 8002abc:	e07e      	b.n	8002bbc <HAL_TIM_ConfigClockSource+0x178>
 8002abe:	2b70      	cmp	r3, #112	; 0x70
 8002ac0:	d018      	beq.n	8002af4 <HAL_TIM_ConfigClockSource+0xb0>
 8002ac2:	d900      	bls.n	8002ac6 <HAL_TIM_ConfigClockSource+0x82>
 8002ac4:	e07a      	b.n	8002bbc <HAL_TIM_ConfigClockSource+0x178>
 8002ac6:	2b60      	cmp	r3, #96	; 0x60
 8002ac8:	d04f      	beq.n	8002b6a <HAL_TIM_ConfigClockSource+0x126>
 8002aca:	d900      	bls.n	8002ace <HAL_TIM_ConfigClockSource+0x8a>
 8002acc:	e076      	b.n	8002bbc <HAL_TIM_ConfigClockSource+0x178>
 8002ace:	2b50      	cmp	r3, #80	; 0x50
 8002ad0:	d03b      	beq.n	8002b4a <HAL_TIM_ConfigClockSource+0x106>
 8002ad2:	d900      	bls.n	8002ad6 <HAL_TIM_ConfigClockSource+0x92>
 8002ad4:	e072      	b.n	8002bbc <HAL_TIM_ConfigClockSource+0x178>
 8002ad6:	2b40      	cmp	r3, #64	; 0x40
 8002ad8:	d057      	beq.n	8002b8a <HAL_TIM_ConfigClockSource+0x146>
 8002ada:	d900      	bls.n	8002ade <HAL_TIM_ConfigClockSource+0x9a>
 8002adc:	e06e      	b.n	8002bbc <HAL_TIM_ConfigClockSource+0x178>
 8002ade:	2b30      	cmp	r3, #48	; 0x30
 8002ae0:	d063      	beq.n	8002baa <HAL_TIM_ConfigClockSource+0x166>
 8002ae2:	d86b      	bhi.n	8002bbc <HAL_TIM_ConfigClockSource+0x178>
 8002ae4:	2b20      	cmp	r3, #32
 8002ae6:	d060      	beq.n	8002baa <HAL_TIM_ConfigClockSource+0x166>
 8002ae8:	d868      	bhi.n	8002bbc <HAL_TIM_ConfigClockSource+0x178>
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d05d      	beq.n	8002baa <HAL_TIM_ConfigClockSource+0x166>
 8002aee:	2b10      	cmp	r3, #16
 8002af0:	d05b      	beq.n	8002baa <HAL_TIM_ConfigClockSource+0x166>
 8002af2:	e063      	b.n	8002bbc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6818      	ldr	r0, [r3, #0]
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	6899      	ldr	r1, [r3, #8]
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	685a      	ldr	r2, [r3, #4]
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	f000 fb5e 	bl	80031c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	2277      	movs	r2, #119	; 0x77
 8002b14:	4313      	orrs	r3, r2
 8002b16:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	68ba      	ldr	r2, [r7, #8]
 8002b1e:	609a      	str	r2, [r3, #8]
      break;
 8002b20:	e052      	b.n	8002bc8 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6818      	ldr	r0, [r3, #0]
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	6899      	ldr	r1, [r3, #8]
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	685a      	ldr	r2, [r3, #4]
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	f000 fb47 	bl	80031c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	689a      	ldr	r2, [r3, #8]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2180      	movs	r1, #128	; 0x80
 8002b42:	01c9      	lsls	r1, r1, #7
 8002b44:	430a      	orrs	r2, r1
 8002b46:	609a      	str	r2, [r3, #8]
      break;
 8002b48:	e03e      	b.n	8002bc8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6818      	ldr	r0, [r3, #0]
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	6859      	ldr	r1, [r3, #4]
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	001a      	movs	r2, r3
 8002b58:	f000 faba 	bl	80030d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2150      	movs	r1, #80	; 0x50
 8002b62:	0018      	movs	r0, r3
 8002b64:	f000 fb14 	bl	8003190 <TIM_ITRx_SetConfig>
      break;
 8002b68:	e02e      	b.n	8002bc8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6818      	ldr	r0, [r3, #0]
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	6859      	ldr	r1, [r3, #4]
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	001a      	movs	r2, r3
 8002b78:	f000 fad8 	bl	800312c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2160      	movs	r1, #96	; 0x60
 8002b82:	0018      	movs	r0, r3
 8002b84:	f000 fb04 	bl	8003190 <TIM_ITRx_SetConfig>
      break;
 8002b88:	e01e      	b.n	8002bc8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6818      	ldr	r0, [r3, #0]
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	6859      	ldr	r1, [r3, #4]
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	001a      	movs	r2, r3
 8002b98:	f000 fa9a 	bl	80030d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2140      	movs	r1, #64	; 0x40
 8002ba2:	0018      	movs	r0, r3
 8002ba4:	f000 faf4 	bl	8003190 <TIM_ITRx_SetConfig>
      break;
 8002ba8:	e00e      	b.n	8002bc8 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	0019      	movs	r1, r3
 8002bb4:	0010      	movs	r0, r2
 8002bb6:	f000 faeb 	bl	8003190 <TIM_ITRx_SetConfig>
      break;
 8002bba:	e005      	b.n	8002bc8 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002bbc:	230f      	movs	r3, #15
 8002bbe:	18fb      	adds	r3, r7, r3
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	701a      	strb	r2, [r3, #0]
      break;
 8002bc4:	e000      	b.n	8002bc8 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002bc6:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	223d      	movs	r2, #61	; 0x3d
 8002bcc:	2101      	movs	r1, #1
 8002bce:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	223c      	movs	r2, #60	; 0x3c
 8002bd4:	2100      	movs	r1, #0
 8002bd6:	5499      	strb	r1, [r3, r2]

  return status;
 8002bd8:	230f      	movs	r3, #15
 8002bda:	18fb      	adds	r3, r7, r3
 8002bdc:	781b      	ldrb	r3, [r3, #0]
}
 8002bde:	0018      	movs	r0, r3
 8002be0:	46bd      	mov	sp, r7
 8002be2:	b004      	add	sp, #16
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	46c0      	nop			; (mov r8, r8)
 8002be8:	ffff00ff 	.word	0xffff00ff

08002bec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	4a2f      	ldr	r2, [pc, #188]	; (8002cbc <TIM_Base_SetConfig+0xd0>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d003      	beq.n	8002c0c <TIM_Base_SetConfig+0x20>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	4a2e      	ldr	r2, [pc, #184]	; (8002cc0 <TIM_Base_SetConfig+0xd4>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d108      	bne.n	8002c1e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2270      	movs	r2, #112	; 0x70
 8002c10:	4393      	bics	r3, r2
 8002c12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	68fa      	ldr	r2, [r7, #12]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a26      	ldr	r2, [pc, #152]	; (8002cbc <TIM_Base_SetConfig+0xd0>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d013      	beq.n	8002c4e <TIM_Base_SetConfig+0x62>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a25      	ldr	r2, [pc, #148]	; (8002cc0 <TIM_Base_SetConfig+0xd4>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d00f      	beq.n	8002c4e <TIM_Base_SetConfig+0x62>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a24      	ldr	r2, [pc, #144]	; (8002cc4 <TIM_Base_SetConfig+0xd8>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d00b      	beq.n	8002c4e <TIM_Base_SetConfig+0x62>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a23      	ldr	r2, [pc, #140]	; (8002cc8 <TIM_Base_SetConfig+0xdc>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d007      	beq.n	8002c4e <TIM_Base_SetConfig+0x62>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a22      	ldr	r2, [pc, #136]	; (8002ccc <TIM_Base_SetConfig+0xe0>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d003      	beq.n	8002c4e <TIM_Base_SetConfig+0x62>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a21      	ldr	r2, [pc, #132]	; (8002cd0 <TIM_Base_SetConfig+0xe4>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d108      	bne.n	8002c60 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	4a20      	ldr	r2, [pc, #128]	; (8002cd4 <TIM_Base_SetConfig+0xe8>)
 8002c52:	4013      	ands	r3, r2
 8002c54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	68fa      	ldr	r2, [r7, #12]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2280      	movs	r2, #128	; 0x80
 8002c64:	4393      	bics	r3, r2
 8002c66:	001a      	movs	r2, r3
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	695b      	ldr	r3, [r3, #20]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	68fa      	ldr	r2, [r7, #12]
 8002c74:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	689a      	ldr	r2, [r3, #8]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a0c      	ldr	r2, [pc, #48]	; (8002cbc <TIM_Base_SetConfig+0xd0>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d00b      	beq.n	8002ca6 <TIM_Base_SetConfig+0xba>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a0d      	ldr	r2, [pc, #52]	; (8002cc8 <TIM_Base_SetConfig+0xdc>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d007      	beq.n	8002ca6 <TIM_Base_SetConfig+0xba>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a0c      	ldr	r2, [pc, #48]	; (8002ccc <TIM_Base_SetConfig+0xe0>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d003      	beq.n	8002ca6 <TIM_Base_SetConfig+0xba>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a0b      	ldr	r2, [pc, #44]	; (8002cd0 <TIM_Base_SetConfig+0xe4>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d103      	bne.n	8002cae <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	691a      	ldr	r2, [r3, #16]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	615a      	str	r2, [r3, #20]
}
 8002cb4:	46c0      	nop			; (mov r8, r8)
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	b004      	add	sp, #16
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	40012c00 	.word	0x40012c00
 8002cc0:	40000400 	.word	0x40000400
 8002cc4:	40002000 	.word	0x40002000
 8002cc8:	40014000 	.word	0x40014000
 8002ccc:	40014400 	.word	0x40014400
 8002cd0:	40014800 	.word	0x40014800
 8002cd4:	fffffcff 	.word	0xfffffcff

08002cd8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b086      	sub	sp, #24
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a1b      	ldr	r3, [r3, #32]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	4393      	bics	r3, r2
 8002cea:	001a      	movs	r2, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6a1b      	ldr	r3, [r3, #32]
 8002cf4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2270      	movs	r2, #112	; 0x70
 8002d06:	4393      	bics	r3, r2
 8002d08:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2203      	movs	r2, #3
 8002d0e:	4393      	bics	r3, r2
 8002d10:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	68fa      	ldr	r2, [r7, #12]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	2202      	movs	r2, #2
 8002d20:	4393      	bics	r3, r2
 8002d22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	697a      	ldr	r2, [r7, #20]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a27      	ldr	r2, [pc, #156]	; (8002dd0 <TIM_OC1_SetConfig+0xf8>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d00b      	beq.n	8002d4e <TIM_OC1_SetConfig+0x76>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a26      	ldr	r2, [pc, #152]	; (8002dd4 <TIM_OC1_SetConfig+0xfc>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d007      	beq.n	8002d4e <TIM_OC1_SetConfig+0x76>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a25      	ldr	r2, [pc, #148]	; (8002dd8 <TIM_OC1_SetConfig+0x100>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d003      	beq.n	8002d4e <TIM_OC1_SetConfig+0x76>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a24      	ldr	r2, [pc, #144]	; (8002ddc <TIM_OC1_SetConfig+0x104>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d10c      	bne.n	8002d68 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	2208      	movs	r2, #8
 8002d52:	4393      	bics	r3, r2
 8002d54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	697a      	ldr	r2, [r7, #20]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	2204      	movs	r2, #4
 8002d64:	4393      	bics	r3, r2
 8002d66:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	4a19      	ldr	r2, [pc, #100]	; (8002dd0 <TIM_OC1_SetConfig+0xf8>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d00b      	beq.n	8002d88 <TIM_OC1_SetConfig+0xb0>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	4a18      	ldr	r2, [pc, #96]	; (8002dd4 <TIM_OC1_SetConfig+0xfc>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d007      	beq.n	8002d88 <TIM_OC1_SetConfig+0xb0>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	4a17      	ldr	r2, [pc, #92]	; (8002dd8 <TIM_OC1_SetConfig+0x100>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d003      	beq.n	8002d88 <TIM_OC1_SetConfig+0xb0>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	4a16      	ldr	r2, [pc, #88]	; (8002ddc <TIM_OC1_SetConfig+0x104>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d111      	bne.n	8002dac <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	4a15      	ldr	r2, [pc, #84]	; (8002de0 <TIM_OC1_SetConfig+0x108>)
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	4a14      	ldr	r2, [pc, #80]	; (8002de4 <TIM_OC1_SetConfig+0x10c>)
 8002d94:	4013      	ands	r3, r2
 8002d96:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	695b      	ldr	r3, [r3, #20]
 8002d9c:	693a      	ldr	r2, [r7, #16]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	699b      	ldr	r3, [r3, #24]
 8002da6:	693a      	ldr	r2, [r7, #16]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	693a      	ldr	r2, [r7, #16]
 8002db0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	68fa      	ldr	r2, [r7, #12]
 8002db6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	685a      	ldr	r2, [r3, #4]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	697a      	ldr	r2, [r7, #20]
 8002dc4:	621a      	str	r2, [r3, #32]
}
 8002dc6:	46c0      	nop			; (mov r8, r8)
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	b006      	add	sp, #24
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	46c0      	nop			; (mov r8, r8)
 8002dd0:	40012c00 	.word	0x40012c00
 8002dd4:	40014000 	.word	0x40014000
 8002dd8:	40014400 	.word	0x40014400
 8002ddc:	40014800 	.word	0x40014800
 8002de0:	fffffeff 	.word	0xfffffeff
 8002de4:	fffffdff 	.word	0xfffffdff

08002de8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b086      	sub	sp, #24
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a1b      	ldr	r3, [r3, #32]
 8002df6:	2210      	movs	r2, #16
 8002df8:	4393      	bics	r3, r2
 8002dfa:	001a      	movs	r2, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a1b      	ldr	r3, [r3, #32]
 8002e04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	699b      	ldr	r3, [r3, #24]
 8002e10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	4a2e      	ldr	r2, [pc, #184]	; (8002ed0 <TIM_OC2_SetConfig+0xe8>)
 8002e16:	4013      	ands	r3, r2
 8002e18:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	4a2d      	ldr	r2, [pc, #180]	; (8002ed4 <TIM_OC2_SetConfig+0xec>)
 8002e1e:	4013      	ands	r3, r2
 8002e20:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	021b      	lsls	r3, r3, #8
 8002e28:	68fa      	ldr	r2, [r7, #12]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	2220      	movs	r2, #32
 8002e32:	4393      	bics	r3, r2
 8002e34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	011b      	lsls	r3, r3, #4
 8002e3c:	697a      	ldr	r2, [r7, #20]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a24      	ldr	r2, [pc, #144]	; (8002ed8 <TIM_OC2_SetConfig+0xf0>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d10d      	bne.n	8002e66 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	2280      	movs	r2, #128	; 0x80
 8002e4e:	4393      	bics	r3, r2
 8002e50:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	011b      	lsls	r3, r3, #4
 8002e58:	697a      	ldr	r2, [r7, #20]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	2240      	movs	r2, #64	; 0x40
 8002e62:	4393      	bics	r3, r2
 8002e64:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a1b      	ldr	r2, [pc, #108]	; (8002ed8 <TIM_OC2_SetConfig+0xf0>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d00b      	beq.n	8002e86 <TIM_OC2_SetConfig+0x9e>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a1a      	ldr	r2, [pc, #104]	; (8002edc <TIM_OC2_SetConfig+0xf4>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d007      	beq.n	8002e86 <TIM_OC2_SetConfig+0x9e>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a19      	ldr	r2, [pc, #100]	; (8002ee0 <TIM_OC2_SetConfig+0xf8>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d003      	beq.n	8002e86 <TIM_OC2_SetConfig+0x9e>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4a18      	ldr	r2, [pc, #96]	; (8002ee4 <TIM_OC2_SetConfig+0xfc>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d113      	bne.n	8002eae <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	4a17      	ldr	r2, [pc, #92]	; (8002ee8 <TIM_OC2_SetConfig+0x100>)
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	4a16      	ldr	r2, [pc, #88]	; (8002eec <TIM_OC2_SetConfig+0x104>)
 8002e92:	4013      	ands	r3, r2
 8002e94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	695b      	ldr	r3, [r3, #20]
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	693a      	ldr	r2, [r7, #16]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	699b      	ldr	r3, [r3, #24]
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	693a      	ldr	r2, [r7, #16]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	693a      	ldr	r2, [r7, #16]
 8002eb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	68fa      	ldr	r2, [r7, #12]
 8002eb8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	685a      	ldr	r2, [r3, #4]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	697a      	ldr	r2, [r7, #20]
 8002ec6:	621a      	str	r2, [r3, #32]
}
 8002ec8:	46c0      	nop			; (mov r8, r8)
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	b006      	add	sp, #24
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	ffff8fff 	.word	0xffff8fff
 8002ed4:	fffffcff 	.word	0xfffffcff
 8002ed8:	40012c00 	.word	0x40012c00
 8002edc:	40014000 	.word	0x40014000
 8002ee0:	40014400 	.word	0x40014400
 8002ee4:	40014800 	.word	0x40014800
 8002ee8:	fffffbff 	.word	0xfffffbff
 8002eec:	fffff7ff 	.word	0xfffff7ff

08002ef0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b086      	sub	sp, #24
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a1b      	ldr	r3, [r3, #32]
 8002efe:	4a35      	ldr	r2, [pc, #212]	; (8002fd4 <TIM_OC3_SetConfig+0xe4>)
 8002f00:	401a      	ands	r2, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a1b      	ldr	r3, [r3, #32]
 8002f0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	69db      	ldr	r3, [r3, #28]
 8002f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2270      	movs	r2, #112	; 0x70
 8002f1c:	4393      	bics	r3, r2
 8002f1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2203      	movs	r2, #3
 8002f24:	4393      	bics	r3, r2
 8002f26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	68fa      	ldr	r2, [r7, #12]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	4a28      	ldr	r2, [pc, #160]	; (8002fd8 <TIM_OC3_SetConfig+0xe8>)
 8002f36:	4013      	ands	r3, r2
 8002f38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	021b      	lsls	r3, r3, #8
 8002f40:	697a      	ldr	r2, [r7, #20]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a24      	ldr	r2, [pc, #144]	; (8002fdc <TIM_OC3_SetConfig+0xec>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d10d      	bne.n	8002f6a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	4a23      	ldr	r2, [pc, #140]	; (8002fe0 <TIM_OC3_SetConfig+0xf0>)
 8002f52:	4013      	ands	r3, r2
 8002f54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	021b      	lsls	r3, r3, #8
 8002f5c:	697a      	ldr	r2, [r7, #20]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	4a1f      	ldr	r2, [pc, #124]	; (8002fe4 <TIM_OC3_SetConfig+0xf4>)
 8002f66:	4013      	ands	r3, r2
 8002f68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4a1b      	ldr	r2, [pc, #108]	; (8002fdc <TIM_OC3_SetConfig+0xec>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d00b      	beq.n	8002f8a <TIM_OC3_SetConfig+0x9a>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a1c      	ldr	r2, [pc, #112]	; (8002fe8 <TIM_OC3_SetConfig+0xf8>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d007      	beq.n	8002f8a <TIM_OC3_SetConfig+0x9a>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a1b      	ldr	r2, [pc, #108]	; (8002fec <TIM_OC3_SetConfig+0xfc>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d003      	beq.n	8002f8a <TIM_OC3_SetConfig+0x9a>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4a1a      	ldr	r2, [pc, #104]	; (8002ff0 <TIM_OC3_SetConfig+0x100>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d113      	bne.n	8002fb2 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	4a19      	ldr	r2, [pc, #100]	; (8002ff4 <TIM_OC3_SetConfig+0x104>)
 8002f8e:	4013      	ands	r3, r2
 8002f90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	4a18      	ldr	r2, [pc, #96]	; (8002ff8 <TIM_OC3_SetConfig+0x108>)
 8002f96:	4013      	ands	r3, r2
 8002f98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	695b      	ldr	r3, [r3, #20]
 8002f9e:	011b      	lsls	r3, r3, #4
 8002fa0:	693a      	ldr	r2, [r7, #16]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	699b      	ldr	r3, [r3, #24]
 8002faa:	011b      	lsls	r3, r3, #4
 8002fac:	693a      	ldr	r2, [r7, #16]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	693a      	ldr	r2, [r7, #16]
 8002fb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	68fa      	ldr	r2, [r7, #12]
 8002fbc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	685a      	ldr	r2, [r3, #4]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	697a      	ldr	r2, [r7, #20]
 8002fca:	621a      	str	r2, [r3, #32]
}
 8002fcc:	46c0      	nop			; (mov r8, r8)
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	b006      	add	sp, #24
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	fffffeff 	.word	0xfffffeff
 8002fd8:	fffffdff 	.word	0xfffffdff
 8002fdc:	40012c00 	.word	0x40012c00
 8002fe0:	fffff7ff 	.word	0xfffff7ff
 8002fe4:	fffffbff 	.word	0xfffffbff
 8002fe8:	40014000 	.word	0x40014000
 8002fec:	40014400 	.word	0x40014400
 8002ff0:	40014800 	.word	0x40014800
 8002ff4:	ffffefff 	.word	0xffffefff
 8002ff8:	ffffdfff 	.word	0xffffdfff

08002ffc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b086      	sub	sp, #24
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a1b      	ldr	r3, [r3, #32]
 800300a:	4a28      	ldr	r2, [pc, #160]	; (80030ac <TIM_OC4_SetConfig+0xb0>)
 800300c:	401a      	ands	r2, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a1b      	ldr	r3, [r3, #32]
 8003016:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	69db      	ldr	r3, [r3, #28]
 8003022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	4a22      	ldr	r2, [pc, #136]	; (80030b0 <TIM_OC4_SetConfig+0xb4>)
 8003028:	4013      	ands	r3, r2
 800302a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	4a21      	ldr	r2, [pc, #132]	; (80030b4 <TIM_OC4_SetConfig+0xb8>)
 8003030:	4013      	ands	r3, r2
 8003032:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	021b      	lsls	r3, r3, #8
 800303a:	68fa      	ldr	r2, [r7, #12]
 800303c:	4313      	orrs	r3, r2
 800303e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	4a1d      	ldr	r2, [pc, #116]	; (80030b8 <TIM_OC4_SetConfig+0xbc>)
 8003044:	4013      	ands	r3, r2
 8003046:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	031b      	lsls	r3, r3, #12
 800304e:	693a      	ldr	r2, [r7, #16]
 8003050:	4313      	orrs	r3, r2
 8003052:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	4a19      	ldr	r2, [pc, #100]	; (80030bc <TIM_OC4_SetConfig+0xc0>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d00b      	beq.n	8003074 <TIM_OC4_SetConfig+0x78>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	4a18      	ldr	r2, [pc, #96]	; (80030c0 <TIM_OC4_SetConfig+0xc4>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d007      	beq.n	8003074 <TIM_OC4_SetConfig+0x78>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	4a17      	ldr	r2, [pc, #92]	; (80030c4 <TIM_OC4_SetConfig+0xc8>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d003      	beq.n	8003074 <TIM_OC4_SetConfig+0x78>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	4a16      	ldr	r2, [pc, #88]	; (80030c8 <TIM_OC4_SetConfig+0xcc>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d109      	bne.n	8003088 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	4a15      	ldr	r2, [pc, #84]	; (80030cc <TIM_OC4_SetConfig+0xd0>)
 8003078:	4013      	ands	r3, r2
 800307a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	695b      	ldr	r3, [r3, #20]
 8003080:	019b      	lsls	r3, r3, #6
 8003082:	697a      	ldr	r2, [r7, #20]
 8003084:	4313      	orrs	r3, r2
 8003086:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	697a      	ldr	r2, [r7, #20]
 800308c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	68fa      	ldr	r2, [r7, #12]
 8003092:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	685a      	ldr	r2, [r3, #4]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	693a      	ldr	r2, [r7, #16]
 80030a0:	621a      	str	r2, [r3, #32]
}
 80030a2:	46c0      	nop			; (mov r8, r8)
 80030a4:	46bd      	mov	sp, r7
 80030a6:	b006      	add	sp, #24
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	46c0      	nop			; (mov r8, r8)
 80030ac:	ffffefff 	.word	0xffffefff
 80030b0:	ffff8fff 	.word	0xffff8fff
 80030b4:	fffffcff 	.word	0xfffffcff
 80030b8:	ffffdfff 	.word	0xffffdfff
 80030bc:	40012c00 	.word	0x40012c00
 80030c0:	40014000 	.word	0x40014000
 80030c4:	40014400 	.word	0x40014400
 80030c8:	40014800 	.word	0x40014800
 80030cc:	ffffbfff 	.word	0xffffbfff

080030d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b086      	sub	sp, #24
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	60f8      	str	r0, [r7, #12]
 80030d8:	60b9      	str	r1, [r7, #8]
 80030da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6a1b      	ldr	r3, [r3, #32]
 80030e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6a1b      	ldr	r3, [r3, #32]
 80030e6:	2201      	movs	r2, #1
 80030e8:	4393      	bics	r3, r2
 80030ea:	001a      	movs	r2, r3
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	699b      	ldr	r3, [r3, #24]
 80030f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	22f0      	movs	r2, #240	; 0xf0
 80030fa:	4393      	bics	r3, r2
 80030fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	011b      	lsls	r3, r3, #4
 8003102:	693a      	ldr	r2, [r7, #16]
 8003104:	4313      	orrs	r3, r2
 8003106:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	220a      	movs	r2, #10
 800310c:	4393      	bics	r3, r2
 800310e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003110:	697a      	ldr	r2, [r7, #20]
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	4313      	orrs	r3, r2
 8003116:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	693a      	ldr	r2, [r7, #16]
 800311c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	697a      	ldr	r2, [r7, #20]
 8003122:	621a      	str	r2, [r3, #32]
}
 8003124:	46c0      	nop			; (mov r8, r8)
 8003126:	46bd      	mov	sp, r7
 8003128:	b006      	add	sp, #24
 800312a:	bd80      	pop	{r7, pc}

0800312c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b086      	sub	sp, #24
 8003130:	af00      	add	r7, sp, #0
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	6a1b      	ldr	r3, [r3, #32]
 800313c:	2210      	movs	r2, #16
 800313e:	4393      	bics	r3, r2
 8003140:	001a      	movs	r2, r3
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	699b      	ldr	r3, [r3, #24]
 800314a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6a1b      	ldr	r3, [r3, #32]
 8003150:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	4a0d      	ldr	r2, [pc, #52]	; (800318c <TIM_TI2_ConfigInputStage+0x60>)
 8003156:	4013      	ands	r3, r2
 8003158:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	031b      	lsls	r3, r3, #12
 800315e:	697a      	ldr	r2, [r7, #20]
 8003160:	4313      	orrs	r3, r2
 8003162:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	22a0      	movs	r2, #160	; 0xa0
 8003168:	4393      	bics	r3, r2
 800316a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	011b      	lsls	r3, r3, #4
 8003170:	693a      	ldr	r2, [r7, #16]
 8003172:	4313      	orrs	r3, r2
 8003174:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	697a      	ldr	r2, [r7, #20]
 800317a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	693a      	ldr	r2, [r7, #16]
 8003180:	621a      	str	r2, [r3, #32]
}
 8003182:	46c0      	nop			; (mov r8, r8)
 8003184:	46bd      	mov	sp, r7
 8003186:	b006      	add	sp, #24
 8003188:	bd80      	pop	{r7, pc}
 800318a:	46c0      	nop			; (mov r8, r8)
 800318c:	ffff0fff 	.word	0xffff0fff

08003190 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2270      	movs	r2, #112	; 0x70
 80031a4:	4393      	bics	r3, r2
 80031a6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80031a8:	683a      	ldr	r2, [r7, #0]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	2207      	movs	r2, #7
 80031b0:	4313      	orrs	r3, r2
 80031b2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	68fa      	ldr	r2, [r7, #12]
 80031b8:	609a      	str	r2, [r3, #8]
}
 80031ba:	46c0      	nop			; (mov r8, r8)
 80031bc:	46bd      	mov	sp, r7
 80031be:	b004      	add	sp, #16
 80031c0:	bd80      	pop	{r7, pc}
	...

080031c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b086      	sub	sp, #24
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	60b9      	str	r1, [r7, #8]
 80031ce:	607a      	str	r2, [r7, #4]
 80031d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	4a09      	ldr	r2, [pc, #36]	; (8003200 <TIM_ETR_SetConfig+0x3c>)
 80031dc:	4013      	ands	r3, r2
 80031de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	021a      	lsls	r2, r3, #8
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	431a      	orrs	r2, r3
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	697a      	ldr	r2, [r7, #20]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	697a      	ldr	r2, [r7, #20]
 80031f6:	609a      	str	r2, [r3, #8]
}
 80031f8:	46c0      	nop			; (mov r8, r8)
 80031fa:	46bd      	mov	sp, r7
 80031fc:	b006      	add	sp, #24
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	ffff00ff 	.word	0xffff00ff

08003204 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b086      	sub	sp, #24
 8003208:	af00      	add	r7, sp, #0
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	60b9      	str	r1, [r7, #8]
 800320e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	221f      	movs	r2, #31
 8003214:	4013      	ands	r3, r2
 8003216:	2201      	movs	r2, #1
 8003218:	409a      	lsls	r2, r3
 800321a:	0013      	movs	r3, r2
 800321c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6a1b      	ldr	r3, [r3, #32]
 8003222:	697a      	ldr	r2, [r7, #20]
 8003224:	43d2      	mvns	r2, r2
 8003226:	401a      	ands	r2, r3
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6a1a      	ldr	r2, [r3, #32]
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	211f      	movs	r1, #31
 8003234:	400b      	ands	r3, r1
 8003236:	6879      	ldr	r1, [r7, #4]
 8003238:	4099      	lsls	r1, r3
 800323a:	000b      	movs	r3, r1
 800323c:	431a      	orrs	r2, r3
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	621a      	str	r2, [r3, #32]
}
 8003242:	46c0      	nop			; (mov r8, r8)
 8003244:	46bd      	mov	sp, r7
 8003246:	b006      	add	sp, #24
 8003248:	bd80      	pop	{r7, pc}
	...

0800324c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	223c      	movs	r2, #60	; 0x3c
 800325a:	5c9b      	ldrb	r3, [r3, r2]
 800325c:	2b01      	cmp	r3, #1
 800325e:	d101      	bne.n	8003264 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003260:	2302      	movs	r3, #2
 8003262:	e041      	b.n	80032e8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	223c      	movs	r2, #60	; 0x3c
 8003268:	2101      	movs	r1, #1
 800326a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	223d      	movs	r2, #61	; 0x3d
 8003270:	2102      	movs	r1, #2
 8003272:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2270      	movs	r2, #112	; 0x70
 8003288:	4393      	bics	r3, r2
 800328a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	68fa      	ldr	r2, [r7, #12]
 8003292:	4313      	orrs	r3, r2
 8003294:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	68fa      	ldr	r2, [r7, #12]
 800329c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a13      	ldr	r2, [pc, #76]	; (80032f0 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d009      	beq.n	80032bc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a11      	ldr	r2, [pc, #68]	; (80032f4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d004      	beq.n	80032bc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a10      	ldr	r2, [pc, #64]	; (80032f8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d10c      	bne.n	80032d6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	2280      	movs	r2, #128	; 0x80
 80032c0:	4393      	bics	r3, r2
 80032c2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	68ba      	ldr	r2, [r7, #8]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	68ba      	ldr	r2, [r7, #8]
 80032d4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	223d      	movs	r2, #61	; 0x3d
 80032da:	2101      	movs	r1, #1
 80032dc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	223c      	movs	r2, #60	; 0x3c
 80032e2:	2100      	movs	r1, #0
 80032e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80032e6:	2300      	movs	r3, #0
}
 80032e8:	0018      	movs	r0, r3
 80032ea:	46bd      	mov	sp, r7
 80032ec:	b004      	add	sp, #16
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	40012c00 	.word	0x40012c00
 80032f4:	40000400 	.word	0x40000400
 80032f8:	40014000 	.word	0x40014000

080032fc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003306:	2300      	movs	r3, #0
 8003308:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	223c      	movs	r2, #60	; 0x3c
 800330e:	5c9b      	ldrb	r3, [r3, r2]
 8003310:	2b01      	cmp	r3, #1
 8003312:	d101      	bne.n	8003318 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003314:	2302      	movs	r3, #2
 8003316:	e03e      	b.n	8003396 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	223c      	movs	r2, #60	; 0x3c
 800331c:	2101      	movs	r1, #1
 800331e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	22ff      	movs	r2, #255	; 0xff
 8003324:	4393      	bics	r3, r2
 8003326:	001a      	movs	r2, r3
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	4313      	orrs	r3, r2
 800332e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	4a1b      	ldr	r2, [pc, #108]	; (80033a0 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8003334:	401a      	ands	r2, r3
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	4313      	orrs	r3, r2
 800333c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	4a18      	ldr	r2, [pc, #96]	; (80033a4 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8003342:	401a      	ands	r2, r3
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	4313      	orrs	r3, r2
 800334a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	4a16      	ldr	r2, [pc, #88]	; (80033a8 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8003350:	401a      	ands	r2, r3
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4313      	orrs	r3, r2
 8003358:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	4a13      	ldr	r2, [pc, #76]	; (80033ac <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 800335e:	401a      	ands	r2, r3
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	691b      	ldr	r3, [r3, #16]
 8003364:	4313      	orrs	r3, r2
 8003366:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	4a11      	ldr	r2, [pc, #68]	; (80033b0 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 800336c:	401a      	ands	r2, r3
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	695b      	ldr	r3, [r3, #20]
 8003372:	4313      	orrs	r3, r2
 8003374:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	4a0e      	ldr	r2, [pc, #56]	; (80033b4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 800337a:	401a      	ands	r2, r3
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	69db      	ldr	r3, [r3, #28]
 8003380:	4313      	orrs	r3, r2
 8003382:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	68fa      	ldr	r2, [r7, #12]
 800338a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	223c      	movs	r2, #60	; 0x3c
 8003390:	2100      	movs	r1, #0
 8003392:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003394:	2300      	movs	r3, #0
}
 8003396:	0018      	movs	r0, r3
 8003398:	46bd      	mov	sp, r7
 800339a:	b004      	add	sp, #16
 800339c:	bd80      	pop	{r7, pc}
 800339e:	46c0      	nop			; (mov r8, r8)
 80033a0:	fffffcff 	.word	0xfffffcff
 80033a4:	fffffbff 	.word	0xfffffbff
 80033a8:	fffff7ff 	.word	0xfffff7ff
 80033ac:	ffffefff 	.word	0xffffefff
 80033b0:	ffffdfff 	.word	0xffffdfff
 80033b4:	ffffbfff 	.word	0xffffbfff

080033b8 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80033be:	f3ef 8305 	mrs	r3, IPSR
 80033c2:	60bb      	str	r3, [r7, #8]
  return(result);
 80033c4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d109      	bne.n	80033de <osKernelInitialize+0x26>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033ca:	f3ef 8310 	mrs	r3, PRIMASK
 80033ce:	607b      	str	r3, [r7, #4]
  return(result);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d007      	beq.n	80033e6 <osKernelInitialize+0x2e>
 80033d6:	4b0d      	ldr	r3, [pc, #52]	; (800340c <osKernelInitialize+0x54>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d103      	bne.n	80033e6 <osKernelInitialize+0x2e>
    stat = osErrorISR;
 80033de:	2306      	movs	r3, #6
 80033e0:	425b      	negs	r3, r3
 80033e2:	60fb      	str	r3, [r7, #12]
 80033e4:	e00c      	b.n	8003400 <osKernelInitialize+0x48>
  }
  else {
    if (KernelState == osKernelInactive) {
 80033e6:	4b09      	ldr	r3, [pc, #36]	; (800340c <osKernelInitialize+0x54>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d105      	bne.n	80033fa <osKernelInitialize+0x42>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80033ee:	4b07      	ldr	r3, [pc, #28]	; (800340c <osKernelInitialize+0x54>)
 80033f0:	2201      	movs	r2, #1
 80033f2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80033f4:	2300      	movs	r3, #0
 80033f6:	60fb      	str	r3, [r7, #12]
 80033f8:	e002      	b.n	8003400 <osKernelInitialize+0x48>
    } else {
      stat = osError;
 80033fa:	2301      	movs	r3, #1
 80033fc:	425b      	negs	r3, r3
 80033fe:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003400:	68fb      	ldr	r3, [r7, #12]
}
 8003402:	0018      	movs	r0, r3
 8003404:	46bd      	mov	sp, r7
 8003406:	b004      	add	sp, #16
 8003408:	bd80      	pop	{r7, pc}
 800340a:	46c0      	nop			; (mov r8, r8)
 800340c:	200000a0 	.word	0x200000a0

08003410 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003410:	b5b0      	push	{r4, r5, r7, lr}
 8003412:	b090      	sub	sp, #64	; 0x40
 8003414:	af04      	add	r7, sp, #16
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	60b9      	str	r1, [r7, #8]
 800341a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800341c:	2300      	movs	r3, #0
 800341e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003420:	f3ef 8305 	mrs	r3, IPSR
 8003424:	61fb      	str	r3, [r7, #28]
  return(result);
 8003426:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8003428:	2b00      	cmp	r3, #0
 800342a:	d000      	beq.n	800342e <osThreadNew+0x1e>
 800342c:	e090      	b.n	8003550 <osThreadNew+0x140>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800342e:	f3ef 8310 	mrs	r3, PRIMASK
 8003432:	61bb      	str	r3, [r7, #24]
  return(result);
 8003434:	69bb      	ldr	r3, [r7, #24]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d004      	beq.n	8003444 <osThreadNew+0x34>
 800343a:	4b48      	ldr	r3, [pc, #288]	; (800355c <osThreadNew+0x14c>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	2b02      	cmp	r3, #2
 8003440:	d100      	bne.n	8003444 <osThreadNew+0x34>
 8003442:	e085      	b.n	8003550 <osThreadNew+0x140>
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d100      	bne.n	800344c <osThreadNew+0x3c>
 800344a:	e081      	b.n	8003550 <osThreadNew+0x140>
    stack = configMINIMAL_STACK_SIZE;
 800344c:	2380      	movs	r3, #128	; 0x80
 800344e:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8003450:	2318      	movs	r3, #24
 8003452:	627b      	str	r3, [r7, #36]	; 0x24

    empty = '\0';
 8003454:	2117      	movs	r1, #23
 8003456:	187b      	adds	r3, r7, r1
 8003458:	2200      	movs	r2, #0
 800345a:	701a      	strb	r2, [r3, #0]
    name  = &empty;
 800345c:	187b      	adds	r3, r7, r1
 800345e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem   = -1;
 8003460:	2301      	movs	r3, #1
 8003462:	425b      	negs	r3, r3
 8003464:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d044      	beq.n	80034f6 <osThreadNew+0xe6>
      if (attr->name != NULL) {
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d002      	beq.n	800347a <osThreadNew+0x6a>
        name = attr->name;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	699b      	ldr	r3, [r3, #24]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d002      	beq.n	8003488 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	699b      	ldr	r3, [r3, #24]
 8003486:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348a:	2b00      	cmp	r3, #0
 800348c:	d007      	beq.n	800349e <osThreadNew+0x8e>
 800348e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003490:	2b38      	cmp	r3, #56	; 0x38
 8003492:	d804      	bhi.n	800349e <osThreadNew+0x8e>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	2201      	movs	r2, #1
 800349a:	4013      	ands	r3, r2
 800349c:	d001      	beq.n	80034a2 <osThreadNew+0x92>
        return (NULL);
 800349e:	2300      	movs	r3, #0
 80034a0:	e057      	b.n	8003552 <osThreadNew+0x142>
      }

      if (attr->stack_size > 0U) {
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	695b      	ldr	r3, [r3, #20]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d003      	beq.n	80034b2 <osThreadNew+0xa2>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	695b      	ldr	r3, [r3, #20]
 80034ae:	089b      	lsrs	r3, r3, #2
 80034b0:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d00e      	beq.n	80034d8 <osThreadNew+0xc8>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	2b5b      	cmp	r3, #91	; 0x5b
 80034c0:	d90a      	bls.n	80034d8 <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d006      	beq.n	80034d8 <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	695b      	ldr	r3, [r3, #20]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d002      	beq.n	80034d8 <osThreadNew+0xc8>
        mem = 1;
 80034d2:	2301      	movs	r3, #1
 80034d4:	623b      	str	r3, [r7, #32]
 80034d6:	e010      	b.n	80034fa <osThreadNew+0xea>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d10c      	bne.n	80034fa <osThreadNew+0xea>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d108      	bne.n	80034fa <osThreadNew+0xea>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	691b      	ldr	r3, [r3, #16]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d104      	bne.n	80034fa <osThreadNew+0xea>
          mem = 0;
 80034f0:	2300      	movs	r3, #0
 80034f2:	623b      	str	r3, [r7, #32]
 80034f4:	e001      	b.n	80034fa <osThreadNew+0xea>
        }
      }
    }
    else {
      mem = 0;
 80034f6:	2300      	movs	r3, #0
 80034f8:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80034fa:	6a3b      	ldr	r3, [r7, #32]
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d112      	bne.n	8003526 <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	691a      	ldr	r2, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	689b      	ldr	r3, [r3, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003508:	68bd      	ldr	r5, [r7, #8]
 800350a:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800350c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800350e:	68f8      	ldr	r0, [r7, #12]
 8003510:	9302      	str	r3, [sp, #8]
 8003512:	9201      	str	r2, [sp, #4]
 8003514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003516:	9300      	str	r3, [sp, #0]
 8003518:	002b      	movs	r3, r5
 800351a:	0022      	movs	r2, r4
 800351c:	f000 fe39 	bl	8004192 <xTaskCreateStatic>
 8003520:	0003      	movs	r3, r0
 8003522:	613b      	str	r3, [r7, #16]
 8003524:	e014      	b.n	8003550 <osThreadNew+0x140>
    }
    else {
      if (mem == 0) {
 8003526:	6a3b      	ldr	r3, [r7, #32]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d111      	bne.n	8003550 <osThreadNew+0x140>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800352c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800352e:	b29a      	uxth	r2, r3
 8003530:	68bc      	ldr	r4, [r7, #8]
 8003532:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003534:	68f8      	ldr	r0, [r7, #12]
 8003536:	2310      	movs	r3, #16
 8003538:	18fb      	adds	r3, r7, r3
 800353a:	9301      	str	r3, [sp, #4]
 800353c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353e:	9300      	str	r3, [sp, #0]
 8003540:	0023      	movs	r3, r4
 8003542:	f000 fe69 	bl	8004218 <xTaskCreate>
 8003546:	0003      	movs	r3, r0
 8003548:	2b01      	cmp	r3, #1
 800354a:	d001      	beq.n	8003550 <osThreadNew+0x140>
          hTask = NULL;
 800354c:	2300      	movs	r3, #0
 800354e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003550:	693b      	ldr	r3, [r7, #16]
}
 8003552:	0018      	movs	r0, r3
 8003554:	46bd      	mov	sp, r7
 8003556:	b00c      	add	sp, #48	; 0x30
 8003558:	bdb0      	pop	{r4, r5, r7, pc}
 800355a:	46c0      	nop			; (mov r8, r8)
 800355c:	200000a0 	.word	0x200000a0

08003560 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003560:	b580      	push	{r7, lr}
 8003562:	b086      	sub	sp, #24
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003568:	f3ef 8305 	mrs	r3, IPSR
 800356c:	613b      	str	r3, [r7, #16]
  return(result);
 800356e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003570:	2b00      	cmp	r3, #0
 8003572:	d109      	bne.n	8003588 <osDelay+0x28>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003574:	f3ef 8310 	mrs	r3, PRIMASK
 8003578:	60fb      	str	r3, [r7, #12]
  return(result);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d007      	beq.n	8003590 <osDelay+0x30>
 8003580:	4b0a      	ldr	r3, [pc, #40]	; (80035ac <osDelay+0x4c>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2b02      	cmp	r3, #2
 8003586:	d103      	bne.n	8003590 <osDelay+0x30>
    stat = osErrorISR;
 8003588:	2306      	movs	r3, #6
 800358a:	425b      	negs	r3, r3
 800358c:	617b      	str	r3, [r7, #20]
 800358e:	e008      	b.n	80035a2 <osDelay+0x42>
  }
  else {
    stat = osOK;
 8003590:	2300      	movs	r3, #0
 8003592:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d003      	beq.n	80035a2 <osDelay+0x42>
      vTaskDelay(ticks);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	0018      	movs	r0, r3
 800359e:	f000 ff71 	bl	8004484 <vTaskDelay>
    }
  }

  return (stat);
 80035a2:	697b      	ldr	r3, [r7, #20]
}
 80035a4:	0018      	movs	r0, r3
 80035a6:	46bd      	mov	sp, r7
 80035a8:	b006      	add	sp, #24
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	200000a0 	.word	0x200000a0

080035b0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	60b9      	str	r1, [r7, #8]
 80035ba:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	4a06      	ldr	r2, [pc, #24]	; (80035d8 <vApplicationGetIdleTaskMemory+0x28>)
 80035c0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	4a05      	ldr	r2, [pc, #20]	; (80035dc <vApplicationGetIdleTaskMemory+0x2c>)
 80035c6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2280      	movs	r2, #128	; 0x80
 80035cc:	601a      	str	r2, [r3, #0]
}
 80035ce:	46c0      	nop			; (mov r8, r8)
 80035d0:	46bd      	mov	sp, r7
 80035d2:	b004      	add	sp, #16
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	46c0      	nop			; (mov r8, r8)
 80035d8:	200000a4 	.word	0x200000a4
 80035dc:	20000100 	.word	0x20000100

080035e0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	4a06      	ldr	r2, [pc, #24]	; (8003608 <vApplicationGetTimerTaskMemory+0x28>)
 80035f0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	4a05      	ldr	r2, [pc, #20]	; (800360c <vApplicationGetTimerTaskMemory+0x2c>)
 80035f6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2280      	movs	r2, #128	; 0x80
 80035fc:	0052      	lsls	r2, r2, #1
 80035fe:	601a      	str	r2, [r3, #0]
}
 8003600:	46c0      	nop			; (mov r8, r8)
 8003602:	46bd      	mov	sp, r7
 8003604:	b004      	add	sp, #16
 8003606:	bd80      	pop	{r7, pc}
 8003608:	20000300 	.word	0x20000300
 800360c:	2000035c 	.word	0x2000035c

08003610 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b082      	sub	sp, #8
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	3308      	adds	r3, #8
 800361c:	001a      	movs	r2, r3
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2201      	movs	r2, #1
 8003626:	4252      	negs	r2, r2
 8003628:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	3308      	adds	r3, #8
 800362e:	001a      	movs	r2, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	3308      	adds	r3, #8
 8003638:	001a      	movs	r2, r3
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003644:	46c0      	nop			; (mov r8, r8)
 8003646:	46bd      	mov	sp, r7
 8003648:	b002      	add	sp, #8
 800364a:	bd80      	pop	{r7, pc}

0800364c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b082      	sub	sp, #8
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800365a:	46c0      	nop			; (mov r8, r8)
 800365c:	46bd      	mov	sp, r7
 800365e:	b002      	add	sp, #8
 8003660:	bd80      	pop	{r7, pc}

08003662 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003662:	b580      	push	{r7, lr}
 8003664:	b084      	sub	sp, #16
 8003666:	af00      	add	r7, sp, #0
 8003668:	6078      	str	r0, [r7, #4]
 800366a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	68fa      	ldr	r2, [r7, #12]
 8003676:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	689a      	ldr	r2, [r3, #8]
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	683a      	ldr	r2, [r7, #0]
 8003686:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	683a      	ldr	r2, [r7, #0]
 800368c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	1c5a      	adds	r2, r3, #1
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	601a      	str	r2, [r3, #0]
}
 800369e:	46c0      	nop			; (mov r8, r8)
 80036a0:	46bd      	mov	sp, r7
 80036a2:	b004      	add	sp, #16
 80036a4:	bd80      	pop	{r7, pc}

080036a6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80036a6:	b580      	push	{r7, lr}
 80036a8:	b084      	sub	sp, #16
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
 80036ae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	3301      	adds	r3, #1
 80036ba:	d103      	bne.n	80036c4 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	691b      	ldr	r3, [r3, #16]
 80036c0:	60fb      	str	r3, [r7, #12]
 80036c2:	e00c      	b.n	80036de <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	3308      	adds	r3, #8
 80036c8:	60fb      	str	r3, [r7, #12]
 80036ca:	e002      	b.n	80036d2 <vListInsert+0x2c>
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	60fb      	str	r3, [r7, #12]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	68ba      	ldr	r2, [r7, #8]
 80036da:	429a      	cmp	r2, r3
 80036dc:	d2f6      	bcs.n	80036cc <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	685a      	ldr	r2, [r3, #4]
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	683a      	ldr	r2, [r7, #0]
 80036ec:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	68fa      	ldr	r2, [r7, #12]
 80036f2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	683a      	ldr	r2, [r7, #0]
 80036f8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	1c5a      	adds	r2, r3, #1
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	601a      	str	r2, [r3, #0]
}
 800370a:	46c0      	nop			; (mov r8, r8)
 800370c:	46bd      	mov	sp, r7
 800370e:	b004      	add	sp, #16
 8003710:	bd80      	pop	{r7, pc}

08003712 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003712:	b580      	push	{r7, lr}
 8003714:	b084      	sub	sp, #16
 8003716:	af00      	add	r7, sp, #0
 8003718:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	691b      	ldr	r3, [r3, #16]
 800371e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	6892      	ldr	r2, [r2, #8]
 8003728:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	6852      	ldr	r2, [r2, #4]
 8003732:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	429a      	cmp	r2, r3
 800373c:	d103      	bne.n	8003746 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	689a      	ldr	r2, [r3, #8]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	1e5a      	subs	r2, r3, #1
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
}
 800375a:	0018      	movs	r0, r3
 800375c:	46bd      	mov	sp, r7
 800375e:	b004      	add	sp, #16
 8003760:	bd80      	pop	{r7, pc}

08003762 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003762:	b580      	push	{r7, lr}
 8003764:	b084      	sub	sp, #16
 8003766:	af00      	add	r7, sp, #0
 8003768:	6078      	str	r0, [r7, #4]
 800376a:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d101      	bne.n	800377a <xQueueGenericReset+0x18>
 8003776:	b672      	cpsid	i
 8003778:	e7fe      	b.n	8003778 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 800377a:	f001 ffb1 	bl	80056e0 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378a:	434b      	muls	r3, r1
 800378c:	18d2      	adds	r2, r2, r3
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2200      	movs	r2, #0
 8003796:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037a8:	1e59      	subs	r1, r3, #1
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ae:	434b      	muls	r3, r1
 80037b0:	18d2      	adds	r2, r2, r3
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2244      	movs	r2, #68	; 0x44
 80037ba:	21ff      	movs	r1, #255	; 0xff
 80037bc:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2245      	movs	r2, #69	; 0x45
 80037c2:	21ff      	movs	r1, #255	; 0xff
 80037c4:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d10d      	bne.n	80037e8 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	691b      	ldr	r3, [r3, #16]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d013      	beq.n	80037fc <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	3310      	adds	r3, #16
 80037d8:	0018      	movs	r0, r3
 80037da:	f001 f8bd 	bl	8004958 <xTaskRemoveFromEventList>
 80037de:	1e03      	subs	r3, r0, #0
 80037e0:	d00c      	beq.n	80037fc <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80037e2:	f001 ff6d 	bl	80056c0 <vPortYield>
 80037e6:	e009      	b.n	80037fc <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	3310      	adds	r3, #16
 80037ec:	0018      	movs	r0, r3
 80037ee:	f7ff ff0f 	bl	8003610 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	3324      	adds	r3, #36	; 0x24
 80037f6:	0018      	movs	r0, r3
 80037f8:	f7ff ff0a 	bl	8003610 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80037fc:	f001 ff82 	bl	8005704 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003800:	2301      	movs	r3, #1
}
 8003802:	0018      	movs	r0, r3
 8003804:	46bd      	mov	sp, r7
 8003806:	b004      	add	sp, #16
 8003808:	bd80      	pop	{r7, pc}

0800380a <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800380a:	b590      	push	{r4, r7, lr}
 800380c:	b089      	sub	sp, #36	; 0x24
 800380e:	af02      	add	r7, sp, #8
 8003810:	60f8      	str	r0, [r7, #12]
 8003812:	60b9      	str	r1, [r7, #8]
 8003814:	607a      	str	r2, [r7, #4]
 8003816:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d101      	bne.n	8003822 <xQueueGenericCreateStatic+0x18>
 800381e:	b672      	cpsid	i
 8003820:	e7fe      	b.n	8003820 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d101      	bne.n	800382c <xQueueGenericCreateStatic+0x22>
 8003828:	b672      	cpsid	i
 800382a:	e7fe      	b.n	800382a <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d002      	beq.n	8003838 <xQueueGenericCreateStatic+0x2e>
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d001      	beq.n	800383c <xQueueGenericCreateStatic+0x32>
 8003838:	2301      	movs	r3, #1
 800383a:	e000      	b.n	800383e <xQueueGenericCreateStatic+0x34>
 800383c:	2300      	movs	r3, #0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d101      	bne.n	8003846 <xQueueGenericCreateStatic+0x3c>
 8003842:	b672      	cpsid	i
 8003844:	e7fe      	b.n	8003844 <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d102      	bne.n	8003852 <xQueueGenericCreateStatic+0x48>
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d101      	bne.n	8003856 <xQueueGenericCreateStatic+0x4c>
 8003852:	2301      	movs	r3, #1
 8003854:	e000      	b.n	8003858 <xQueueGenericCreateStatic+0x4e>
 8003856:	2300      	movs	r3, #0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d101      	bne.n	8003860 <xQueueGenericCreateStatic+0x56>
 800385c:	b672      	cpsid	i
 800385e:	e7fe      	b.n	800385e <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003860:	2350      	movs	r3, #80	; 0x50
 8003862:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	2b50      	cmp	r3, #80	; 0x50
 8003868:	d001      	beq.n	800386e <xQueueGenericCreateStatic+0x64>
 800386a:	b672      	cpsid	i
 800386c:	e7fe      	b.n	800386c <xQueueGenericCreateStatic+0x62>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d00e      	beq.n	8003896 <xQueueGenericCreateStatic+0x8c>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	2246      	movs	r2, #70	; 0x46
 800387c:	2101      	movs	r1, #1
 800387e:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003880:	2328      	movs	r3, #40	; 0x28
 8003882:	18fb      	adds	r3, r7, r3
 8003884:	781c      	ldrb	r4, [r3, #0]
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	68b9      	ldr	r1, [r7, #8]
 800388a:	68f8      	ldr	r0, [r7, #12]
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	9300      	str	r3, [sp, #0]
 8003890:	0023      	movs	r3, r4
 8003892:	f000 f805 	bl	80038a0 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003896:	697b      	ldr	r3, [r7, #20]
	}
 8003898:	0018      	movs	r0, r3
 800389a:	46bd      	mov	sp, r7
 800389c:	b007      	add	sp, #28
 800389e:	bd90      	pop	{r4, r7, pc}

080038a0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	607a      	str	r2, [r7, #4]
 80038ac:	001a      	movs	r2, r3
 80038ae:	1cfb      	adds	r3, r7, #3
 80038b0:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d103      	bne.n	80038c0 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	69ba      	ldr	r2, [r7, #24]
 80038bc:	601a      	str	r2, [r3, #0]
 80038be:	e002      	b.n	80038c6 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80038c0:	69bb      	ldr	r3, [r7, #24]
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	68fa      	ldr	r2, [r7, #12]
 80038ca:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80038cc:	69bb      	ldr	r3, [r7, #24]
 80038ce:	68ba      	ldr	r2, [r7, #8]
 80038d0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80038d2:	69bb      	ldr	r3, [r7, #24]
 80038d4:	2101      	movs	r1, #1
 80038d6:	0018      	movs	r0, r3
 80038d8:	f7ff ff43 	bl	8003762 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80038dc:	69bb      	ldr	r3, [r7, #24]
 80038de:	1cfa      	adds	r2, r7, #3
 80038e0:	214c      	movs	r1, #76	; 0x4c
 80038e2:	7812      	ldrb	r2, [r2, #0]
 80038e4:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80038e6:	46c0      	nop			; (mov r8, r8)
 80038e8:	46bd      	mov	sp, r7
 80038ea:	b004      	add	sp, #16
 80038ec:	bd80      	pop	{r7, pc}

080038ee <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80038ee:	b580      	push	{r7, lr}
 80038f0:	b08a      	sub	sp, #40	; 0x28
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	60f8      	str	r0, [r7, #12]
 80038f6:	60b9      	str	r1, [r7, #8]
 80038f8:	607a      	str	r2, [r7, #4]
 80038fa:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80038fc:	2300      	movs	r3, #0
 80038fe:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8003904:	6a3b      	ldr	r3, [r7, #32]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d101      	bne.n	800390e <xQueueGenericSend+0x20>
 800390a:	b672      	cpsid	i
 800390c:	e7fe      	b.n	800390c <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d103      	bne.n	800391c <xQueueGenericSend+0x2e>
 8003914:	6a3b      	ldr	r3, [r7, #32]
 8003916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003918:	2b00      	cmp	r3, #0
 800391a:	d101      	bne.n	8003920 <xQueueGenericSend+0x32>
 800391c:	2301      	movs	r3, #1
 800391e:	e000      	b.n	8003922 <xQueueGenericSend+0x34>
 8003920:	2300      	movs	r3, #0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d101      	bne.n	800392a <xQueueGenericSend+0x3c>
 8003926:	b672      	cpsid	i
 8003928:	e7fe      	b.n	8003928 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	2b02      	cmp	r3, #2
 800392e:	d103      	bne.n	8003938 <xQueueGenericSend+0x4a>
 8003930:	6a3b      	ldr	r3, [r7, #32]
 8003932:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003934:	2b01      	cmp	r3, #1
 8003936:	d101      	bne.n	800393c <xQueueGenericSend+0x4e>
 8003938:	2301      	movs	r3, #1
 800393a:	e000      	b.n	800393e <xQueueGenericSend+0x50>
 800393c:	2300      	movs	r3, #0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d101      	bne.n	8003946 <xQueueGenericSend+0x58>
 8003942:	b672      	cpsid	i
 8003944:	e7fe      	b.n	8003944 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003946:	f001 f99f 	bl	8004c88 <xTaskGetSchedulerState>
 800394a:	1e03      	subs	r3, r0, #0
 800394c:	d102      	bne.n	8003954 <xQueueGenericSend+0x66>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d101      	bne.n	8003958 <xQueueGenericSend+0x6a>
 8003954:	2301      	movs	r3, #1
 8003956:	e000      	b.n	800395a <xQueueGenericSend+0x6c>
 8003958:	2300      	movs	r3, #0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d101      	bne.n	8003962 <xQueueGenericSend+0x74>
 800395e:	b672      	cpsid	i
 8003960:	e7fe      	b.n	8003960 <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003962:	f001 febd 	bl	80056e0 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003966:	6a3b      	ldr	r3, [r7, #32]
 8003968:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800396a:	6a3b      	ldr	r3, [r7, #32]
 800396c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800396e:	429a      	cmp	r2, r3
 8003970:	d302      	bcc.n	8003978 <xQueueGenericSend+0x8a>
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	2b02      	cmp	r3, #2
 8003976:	d11e      	bne.n	80039b6 <xQueueGenericSend+0xc8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003978:	683a      	ldr	r2, [r7, #0]
 800397a:	68b9      	ldr	r1, [r7, #8]
 800397c:	6a3b      	ldr	r3, [r7, #32]
 800397e:	0018      	movs	r0, r3
 8003980:	f000 fa8f 	bl	8003ea2 <prvCopyDataToQueue>
 8003984:	0003      	movs	r3, r0
 8003986:	61fb      	str	r3, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003988:	6a3b      	ldr	r3, [r7, #32]
 800398a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398c:	2b00      	cmp	r3, #0
 800398e:	d009      	beq.n	80039a4 <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003990:	6a3b      	ldr	r3, [r7, #32]
 8003992:	3324      	adds	r3, #36	; 0x24
 8003994:	0018      	movs	r0, r3
 8003996:	f000 ffdf 	bl	8004958 <xTaskRemoveFromEventList>
 800399a:	1e03      	subs	r3, r0, #0
 800399c:	d007      	beq.n	80039ae <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800399e:	f001 fe8f 	bl	80056c0 <vPortYield>
 80039a2:	e004      	b.n	80039ae <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d001      	beq.n	80039ae <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80039aa:	f001 fe89 	bl	80056c0 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80039ae:	f001 fea9 	bl	8005704 <vPortExitCritical>
				return pdPASS;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e05b      	b.n	8003a6e <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d103      	bne.n	80039c4 <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80039bc:	f001 fea2 	bl	8005704 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80039c0:	2300      	movs	r3, #0
 80039c2:	e054      	b.n	8003a6e <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 80039c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d106      	bne.n	80039d8 <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80039ca:	2314      	movs	r3, #20
 80039cc:	18fb      	adds	r3, r7, r3
 80039ce:	0018      	movs	r0, r3
 80039d0:	f001 f81e 	bl	8004a10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80039d4:	2301      	movs	r3, #1
 80039d6:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80039d8:	f001 fe94 	bl	8005704 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80039dc:	f000 fdcc 	bl	8004578 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80039e0:	f001 fe7e 	bl	80056e0 <vPortEnterCritical>
 80039e4:	6a3b      	ldr	r3, [r7, #32]
 80039e6:	2244      	movs	r2, #68	; 0x44
 80039e8:	5c9b      	ldrb	r3, [r3, r2]
 80039ea:	b25b      	sxtb	r3, r3
 80039ec:	3301      	adds	r3, #1
 80039ee:	d103      	bne.n	80039f8 <xQueueGenericSend+0x10a>
 80039f0:	6a3b      	ldr	r3, [r7, #32]
 80039f2:	2244      	movs	r2, #68	; 0x44
 80039f4:	2100      	movs	r1, #0
 80039f6:	5499      	strb	r1, [r3, r2]
 80039f8:	6a3b      	ldr	r3, [r7, #32]
 80039fa:	2245      	movs	r2, #69	; 0x45
 80039fc:	5c9b      	ldrb	r3, [r3, r2]
 80039fe:	b25b      	sxtb	r3, r3
 8003a00:	3301      	adds	r3, #1
 8003a02:	d103      	bne.n	8003a0c <xQueueGenericSend+0x11e>
 8003a04:	6a3b      	ldr	r3, [r7, #32]
 8003a06:	2245      	movs	r2, #69	; 0x45
 8003a08:	2100      	movs	r1, #0
 8003a0a:	5499      	strb	r1, [r3, r2]
 8003a0c:	f001 fe7a 	bl	8005704 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003a10:	1d3a      	adds	r2, r7, #4
 8003a12:	2314      	movs	r3, #20
 8003a14:	18fb      	adds	r3, r7, r3
 8003a16:	0011      	movs	r1, r2
 8003a18:	0018      	movs	r0, r3
 8003a1a:	f001 f80d 	bl	8004a38 <xTaskCheckForTimeOut>
 8003a1e:	1e03      	subs	r3, r0, #0
 8003a20:	d11e      	bne.n	8003a60 <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003a22:	6a3b      	ldr	r3, [r7, #32]
 8003a24:	0018      	movs	r0, r3
 8003a26:	f000 fb41 	bl	80040ac <prvIsQueueFull>
 8003a2a:	1e03      	subs	r3, r0, #0
 8003a2c:	d011      	beq.n	8003a52 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003a2e:	6a3b      	ldr	r3, [r7, #32]
 8003a30:	3310      	adds	r3, #16
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	0011      	movs	r1, r2
 8003a36:	0018      	movs	r0, r3
 8003a38:	f000 ff4a 	bl	80048d0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003a3c:	6a3b      	ldr	r3, [r7, #32]
 8003a3e:	0018      	movs	r0, r3
 8003a40:	f000 fac0 	bl	8003fc4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003a44:	f000 fda4 	bl	8004590 <xTaskResumeAll>
 8003a48:	1e03      	subs	r3, r0, #0
 8003a4a:	d18a      	bne.n	8003962 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 8003a4c:	f001 fe38 	bl	80056c0 <vPortYield>
 8003a50:	e787      	b.n	8003962 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003a52:	6a3b      	ldr	r3, [r7, #32]
 8003a54:	0018      	movs	r0, r3
 8003a56:	f000 fab5 	bl	8003fc4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003a5a:	f000 fd99 	bl	8004590 <xTaskResumeAll>
 8003a5e:	e780      	b.n	8003962 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003a60:	6a3b      	ldr	r3, [r7, #32]
 8003a62:	0018      	movs	r0, r3
 8003a64:	f000 faae 	bl	8003fc4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003a68:	f000 fd92 	bl	8004590 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003a6c:	2300      	movs	r3, #0
		}
	}
}
 8003a6e:	0018      	movs	r0, r3
 8003a70:	46bd      	mov	sp, r7
 8003a72:	b00a      	add	sp, #40	; 0x28
 8003a74:	bd80      	pop	{r7, pc}

08003a76 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003a76:	b590      	push	{r4, r7, lr}
 8003a78:	b089      	sub	sp, #36	; 0x24
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	60f8      	str	r0, [r7, #12]
 8003a7e:	60b9      	str	r1, [r7, #8]
 8003a80:	607a      	str	r2, [r7, #4]
 8003a82:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 8003a88:	69bb      	ldr	r3, [r7, #24]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d101      	bne.n	8003a92 <xQueueGenericSendFromISR+0x1c>
 8003a8e:	b672      	cpsid	i
 8003a90:	e7fe      	b.n	8003a90 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d103      	bne.n	8003aa0 <xQueueGenericSendFromISR+0x2a>
 8003a98:	69bb      	ldr	r3, [r7, #24]
 8003a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d101      	bne.n	8003aa4 <xQueueGenericSendFromISR+0x2e>
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e000      	b.n	8003aa6 <xQueueGenericSendFromISR+0x30>
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d101      	bne.n	8003aae <xQueueGenericSendFromISR+0x38>
 8003aaa:	b672      	cpsid	i
 8003aac:	e7fe      	b.n	8003aac <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d103      	bne.n	8003abc <xQueueGenericSendFromISR+0x46>
 8003ab4:	69bb      	ldr	r3, [r7, #24]
 8003ab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d101      	bne.n	8003ac0 <xQueueGenericSendFromISR+0x4a>
 8003abc:	2301      	movs	r3, #1
 8003abe:	e000      	b.n	8003ac2 <xQueueGenericSendFromISR+0x4c>
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d101      	bne.n	8003aca <xQueueGenericSendFromISR+0x54>
 8003ac6:	b672      	cpsid	i
 8003ac8:	e7fe      	b.n	8003ac8 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003aca:	f001 fe33 	bl	8005734 <ulSetInterruptMaskFromISR>
 8003ace:	0003      	movs	r3, r0
 8003ad0:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d302      	bcc.n	8003ae4 <xQueueGenericSendFromISR+0x6e>
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	d12e      	bne.n	8003b42 <xQueueGenericSendFromISR+0xcc>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003ae4:	2413      	movs	r4, #19
 8003ae6:	193b      	adds	r3, r7, r4
 8003ae8:	69ba      	ldr	r2, [r7, #24]
 8003aea:	2145      	movs	r1, #69	; 0x45
 8003aec:	5c52      	ldrb	r2, [r2, r1]
 8003aee:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003af0:	683a      	ldr	r2, [r7, #0]
 8003af2:	68b9      	ldr	r1, [r7, #8]
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	0018      	movs	r0, r3
 8003af8:	f000 f9d3 	bl	8003ea2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003afc:	193b      	adds	r3, r7, r4
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	b25b      	sxtb	r3, r3
 8003b02:	3301      	adds	r3, #1
 8003b04:	d111      	bne.n	8003b2a <xQueueGenericSendFromISR+0xb4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b06:	69bb      	ldr	r3, [r7, #24]
 8003b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d016      	beq.n	8003b3c <xQueueGenericSendFromISR+0xc6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	3324      	adds	r3, #36	; 0x24
 8003b12:	0018      	movs	r0, r3
 8003b14:	f000 ff20 	bl	8004958 <xTaskRemoveFromEventList>
 8003b18:	1e03      	subs	r3, r0, #0
 8003b1a:	d00f      	beq.n	8003b3c <xQueueGenericSendFromISR+0xc6>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d00c      	beq.n	8003b3c <xQueueGenericSendFromISR+0xc6>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2201      	movs	r2, #1
 8003b26:	601a      	str	r2, [r3, #0]
 8003b28:	e008      	b.n	8003b3c <xQueueGenericSendFromISR+0xc6>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003b2a:	2313      	movs	r3, #19
 8003b2c:	18fb      	adds	r3, r7, r3
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	3301      	adds	r3, #1
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	b259      	sxtb	r1, r3
 8003b36:	69bb      	ldr	r3, [r7, #24]
 8003b38:	2245      	movs	r2, #69	; 0x45
 8003b3a:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	61fb      	str	r3, [r7, #28]
		{
 8003b40:	e001      	b.n	8003b46 <xQueueGenericSendFromISR+0xd0>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003b42:	2300      	movs	r3, #0
 8003b44:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	0018      	movs	r0, r3
 8003b4a:	f001 fdf9 	bl	8005740 <vClearInterruptMaskFromISR>

	return xReturn;
 8003b4e:	69fb      	ldr	r3, [r7, #28]
}
 8003b50:	0018      	movs	r0, r3
 8003b52:	46bd      	mov	sp, r7
 8003b54:	b009      	add	sp, #36	; 0x24
 8003b56:	bd90      	pop	{r4, r7, pc}

08003b58 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b08a      	sub	sp, #40	; 0x28
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003b64:	2300      	movs	r3, #0
 8003b66:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003b6c:	6a3b      	ldr	r3, [r7, #32]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d101      	bne.n	8003b76 <xQueueReceive+0x1e>
 8003b72:	b672      	cpsid	i
 8003b74:	e7fe      	b.n	8003b74 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d103      	bne.n	8003b84 <xQueueReceive+0x2c>
 8003b7c:	6a3b      	ldr	r3, [r7, #32]
 8003b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d101      	bne.n	8003b88 <xQueueReceive+0x30>
 8003b84:	2301      	movs	r3, #1
 8003b86:	e000      	b.n	8003b8a <xQueueReceive+0x32>
 8003b88:	2300      	movs	r3, #0
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d101      	bne.n	8003b92 <xQueueReceive+0x3a>
 8003b8e:	b672      	cpsid	i
 8003b90:	e7fe      	b.n	8003b90 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003b92:	f001 f879 	bl	8004c88 <xTaskGetSchedulerState>
 8003b96:	1e03      	subs	r3, r0, #0
 8003b98:	d102      	bne.n	8003ba0 <xQueueReceive+0x48>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d101      	bne.n	8003ba4 <xQueueReceive+0x4c>
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e000      	b.n	8003ba6 <xQueueReceive+0x4e>
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d101      	bne.n	8003bae <xQueueReceive+0x56>
 8003baa:	b672      	cpsid	i
 8003bac:	e7fe      	b.n	8003bac <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003bae:	f001 fd97 	bl	80056e0 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003bb2:	6a3b      	ldr	r3, [r7, #32]
 8003bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb6:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d01a      	beq.n	8003bf4 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003bbe:	68ba      	ldr	r2, [r7, #8]
 8003bc0:	6a3b      	ldr	r3, [r7, #32]
 8003bc2:	0011      	movs	r1, r2
 8003bc4:	0018      	movs	r0, r3
 8003bc6:	f000 f9d7 	bl	8003f78 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	1e5a      	subs	r2, r3, #1
 8003bce:	6a3b      	ldr	r3, [r7, #32]
 8003bd0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003bd2:	6a3b      	ldr	r3, [r7, #32]
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d008      	beq.n	8003bec <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003bda:	6a3b      	ldr	r3, [r7, #32]
 8003bdc:	3310      	adds	r3, #16
 8003bde:	0018      	movs	r0, r3
 8003be0:	f000 feba 	bl	8004958 <xTaskRemoveFromEventList>
 8003be4:	1e03      	subs	r3, r0, #0
 8003be6:	d001      	beq.n	8003bec <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003be8:	f001 fd6a 	bl	80056c0 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003bec:	f001 fd8a 	bl	8005704 <vPortExitCritical>
				return pdPASS;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e062      	b.n	8003cba <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d103      	bne.n	8003c02 <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003bfa:	f001 fd83 	bl	8005704 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	e05b      	b.n	8003cba <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d106      	bne.n	8003c16 <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003c08:	2314      	movs	r3, #20
 8003c0a:	18fb      	adds	r3, r7, r3
 8003c0c:	0018      	movs	r0, r3
 8003c0e:	f000 feff 	bl	8004a10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003c12:	2301      	movs	r3, #1
 8003c14:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003c16:	f001 fd75 	bl	8005704 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003c1a:	f000 fcad 	bl	8004578 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003c1e:	f001 fd5f 	bl	80056e0 <vPortEnterCritical>
 8003c22:	6a3b      	ldr	r3, [r7, #32]
 8003c24:	2244      	movs	r2, #68	; 0x44
 8003c26:	5c9b      	ldrb	r3, [r3, r2]
 8003c28:	b25b      	sxtb	r3, r3
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	d103      	bne.n	8003c36 <xQueueReceive+0xde>
 8003c2e:	6a3b      	ldr	r3, [r7, #32]
 8003c30:	2244      	movs	r2, #68	; 0x44
 8003c32:	2100      	movs	r1, #0
 8003c34:	5499      	strb	r1, [r3, r2]
 8003c36:	6a3b      	ldr	r3, [r7, #32]
 8003c38:	2245      	movs	r2, #69	; 0x45
 8003c3a:	5c9b      	ldrb	r3, [r3, r2]
 8003c3c:	b25b      	sxtb	r3, r3
 8003c3e:	3301      	adds	r3, #1
 8003c40:	d103      	bne.n	8003c4a <xQueueReceive+0xf2>
 8003c42:	6a3b      	ldr	r3, [r7, #32]
 8003c44:	2245      	movs	r2, #69	; 0x45
 8003c46:	2100      	movs	r1, #0
 8003c48:	5499      	strb	r1, [r3, r2]
 8003c4a:	f001 fd5b 	bl	8005704 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003c4e:	1d3a      	adds	r2, r7, #4
 8003c50:	2314      	movs	r3, #20
 8003c52:	18fb      	adds	r3, r7, r3
 8003c54:	0011      	movs	r1, r2
 8003c56:	0018      	movs	r0, r3
 8003c58:	f000 feee 	bl	8004a38 <xTaskCheckForTimeOut>
 8003c5c:	1e03      	subs	r3, r0, #0
 8003c5e:	d11e      	bne.n	8003c9e <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003c60:	6a3b      	ldr	r3, [r7, #32]
 8003c62:	0018      	movs	r0, r3
 8003c64:	f000 fa0c 	bl	8004080 <prvIsQueueEmpty>
 8003c68:	1e03      	subs	r3, r0, #0
 8003c6a:	d011      	beq.n	8003c90 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003c6c:	6a3b      	ldr	r3, [r7, #32]
 8003c6e:	3324      	adds	r3, #36	; 0x24
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	0011      	movs	r1, r2
 8003c74:	0018      	movs	r0, r3
 8003c76:	f000 fe2b 	bl	80048d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003c7a:	6a3b      	ldr	r3, [r7, #32]
 8003c7c:	0018      	movs	r0, r3
 8003c7e:	f000 f9a1 	bl	8003fc4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003c82:	f000 fc85 	bl	8004590 <xTaskResumeAll>
 8003c86:	1e03      	subs	r3, r0, #0
 8003c88:	d191      	bne.n	8003bae <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 8003c8a:	f001 fd19 	bl	80056c0 <vPortYield>
 8003c8e:	e78e      	b.n	8003bae <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003c90:	6a3b      	ldr	r3, [r7, #32]
 8003c92:	0018      	movs	r0, r3
 8003c94:	f000 f996 	bl	8003fc4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003c98:	f000 fc7a 	bl	8004590 <xTaskResumeAll>
 8003c9c:	e787      	b.n	8003bae <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003c9e:	6a3b      	ldr	r3, [r7, #32]
 8003ca0:	0018      	movs	r0, r3
 8003ca2:	f000 f98f 	bl	8003fc4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003ca6:	f000 fc73 	bl	8004590 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003caa:	6a3b      	ldr	r3, [r7, #32]
 8003cac:	0018      	movs	r0, r3
 8003cae:	f000 f9e7 	bl	8004080 <prvIsQueueEmpty>
 8003cb2:	1e03      	subs	r3, r0, #0
 8003cb4:	d100      	bne.n	8003cb8 <xQueueReceive+0x160>
 8003cb6:	e77a      	b.n	8003bae <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003cb8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003cba:	0018      	movs	r0, r3
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	b00a      	add	sp, #40	; 0x28
 8003cc0:	bd80      	pop	{r7, pc}

08003cc2 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003cc2:	b580      	push	{r7, lr}
 8003cc4:	b08a      	sub	sp, #40	; 0x28
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	6078      	str	r0, [r7, #4]
 8003cca:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003cd8:	69fb      	ldr	r3, [r7, #28]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d101      	bne.n	8003ce2 <xQueueSemaphoreTake+0x20>
 8003cde:	b672      	cpsid	i
 8003ce0:	e7fe      	b.n	8003ce0 <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d001      	beq.n	8003cee <xQueueSemaphoreTake+0x2c>
 8003cea:	b672      	cpsid	i
 8003cec:	e7fe      	b.n	8003cec <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003cee:	f000 ffcb 	bl	8004c88 <xTaskGetSchedulerState>
 8003cf2:	1e03      	subs	r3, r0, #0
 8003cf4:	d102      	bne.n	8003cfc <xQueueSemaphoreTake+0x3a>
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d101      	bne.n	8003d00 <xQueueSemaphoreTake+0x3e>
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e000      	b.n	8003d02 <xQueueSemaphoreTake+0x40>
 8003d00:	2300      	movs	r3, #0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d101      	bne.n	8003d0a <xQueueSemaphoreTake+0x48>
 8003d06:	b672      	cpsid	i
 8003d08:	e7fe      	b.n	8003d08 <xQueueSemaphoreTake+0x46>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003d0a:	f001 fce9 	bl	80056e0 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d12:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d01d      	beq.n	8003d56 <xQueueSemaphoreTake+0x94>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	1e5a      	subs	r2, r3, #1
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d104      	bne.n	8003d34 <xQueueSemaphoreTake+0x72>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8003d2a:	f001 f907 	bl	8004f3c <pvTaskIncrementMutexHeldCount>
 8003d2e:	0002      	movs	r2, r0
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	691b      	ldr	r3, [r3, #16]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d008      	beq.n	8003d4e <xQueueSemaphoreTake+0x8c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	3310      	adds	r3, #16
 8003d40:	0018      	movs	r0, r3
 8003d42:	f000 fe09 	bl	8004958 <xTaskRemoveFromEventList>
 8003d46:	1e03      	subs	r3, r0, #0
 8003d48:	d001      	beq.n	8003d4e <xQueueSemaphoreTake+0x8c>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003d4a:	f001 fcb9 	bl	80056c0 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003d4e:	f001 fcd9 	bl	8005704 <vPortExitCritical>
				return pdPASS;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e08b      	b.n	8003e6e <xQueueSemaphoreTake+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d108      	bne.n	8003d6e <xQueueSemaphoreTake+0xac>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003d5c:	6a3b      	ldr	r3, [r7, #32]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d001      	beq.n	8003d66 <xQueueSemaphoreTake+0xa4>
 8003d62:	b672      	cpsid	i
 8003d64:	e7fe      	b.n	8003d64 <xQueueSemaphoreTake+0xa2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003d66:	f001 fccd 	bl	8005704 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	e07f      	b.n	8003e6e <xQueueSemaphoreTake+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d106      	bne.n	8003d82 <xQueueSemaphoreTake+0xc0>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003d74:	230c      	movs	r3, #12
 8003d76:	18fb      	adds	r3, r7, r3
 8003d78:	0018      	movs	r0, r3
 8003d7a:	f000 fe49 	bl	8004a10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003d82:	f001 fcbf 	bl	8005704 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003d86:	f000 fbf7 	bl	8004578 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003d8a:	f001 fca9 	bl	80056e0 <vPortEnterCritical>
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	2244      	movs	r2, #68	; 0x44
 8003d92:	5c9b      	ldrb	r3, [r3, r2]
 8003d94:	b25b      	sxtb	r3, r3
 8003d96:	3301      	adds	r3, #1
 8003d98:	d103      	bne.n	8003da2 <xQueueSemaphoreTake+0xe0>
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	2244      	movs	r2, #68	; 0x44
 8003d9e:	2100      	movs	r1, #0
 8003da0:	5499      	strb	r1, [r3, r2]
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	2245      	movs	r2, #69	; 0x45
 8003da6:	5c9b      	ldrb	r3, [r3, r2]
 8003da8:	b25b      	sxtb	r3, r3
 8003daa:	3301      	adds	r3, #1
 8003dac:	d103      	bne.n	8003db6 <xQueueSemaphoreTake+0xf4>
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	2245      	movs	r2, #69	; 0x45
 8003db2:	2100      	movs	r1, #0
 8003db4:	5499      	strb	r1, [r3, r2]
 8003db6:	f001 fca5 	bl	8005704 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003dba:	003a      	movs	r2, r7
 8003dbc:	230c      	movs	r3, #12
 8003dbe:	18fb      	adds	r3, r7, r3
 8003dc0:	0011      	movs	r1, r2
 8003dc2:	0018      	movs	r0, r3
 8003dc4:	f000 fe38 	bl	8004a38 <xTaskCheckForTimeOut>
 8003dc8:	1e03      	subs	r3, r0, #0
 8003dca:	d12e      	bne.n	8003e2a <xQueueSemaphoreTake+0x168>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	0018      	movs	r0, r3
 8003dd0:	f000 f956 	bl	8004080 <prvIsQueueEmpty>
 8003dd4:	1e03      	subs	r3, r0, #0
 8003dd6:	d021      	beq.n	8003e1c <xQueueSemaphoreTake+0x15a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d10a      	bne.n	8003df6 <xQueueSemaphoreTake+0x134>
					{
						taskENTER_CRITICAL();
 8003de0:	f001 fc7e 	bl	80056e0 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8003de4:	69fb      	ldr	r3, [r7, #28]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	0018      	movs	r0, r3
 8003dea:	f000 ff69 	bl	8004cc0 <xTaskPriorityInherit>
 8003dee:	0003      	movs	r3, r0
 8003df0:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
 8003df2:	f001 fc87 	bl	8005704 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	3324      	adds	r3, #36	; 0x24
 8003dfa:	683a      	ldr	r2, [r7, #0]
 8003dfc:	0011      	movs	r1, r2
 8003dfe:	0018      	movs	r0, r3
 8003e00:	f000 fd66 	bl	80048d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	0018      	movs	r0, r3
 8003e08:	f000 f8dc 	bl	8003fc4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003e0c:	f000 fbc0 	bl	8004590 <xTaskResumeAll>
 8003e10:	1e03      	subs	r3, r0, #0
 8003e12:	d000      	beq.n	8003e16 <xQueueSemaphoreTake+0x154>
 8003e14:	e779      	b.n	8003d0a <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
 8003e16:	f001 fc53 	bl	80056c0 <vPortYield>
 8003e1a:	e776      	b.n	8003d0a <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	0018      	movs	r0, r3
 8003e20:	f000 f8d0 	bl	8003fc4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003e24:	f000 fbb4 	bl	8004590 <xTaskResumeAll>
 8003e28:	e76f      	b.n	8003d0a <xQueueSemaphoreTake+0x48>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	0018      	movs	r0, r3
 8003e2e:	f000 f8c9 	bl	8003fc4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003e32:	f000 fbad 	bl	8004590 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	0018      	movs	r0, r3
 8003e3a:	f000 f921 	bl	8004080 <prvIsQueueEmpty>
 8003e3e:	1e03      	subs	r3, r0, #0
 8003e40:	d100      	bne.n	8003e44 <xQueueSemaphoreTake+0x182>
 8003e42:	e762      	b.n	8003d0a <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003e44:	6a3b      	ldr	r3, [r7, #32]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d010      	beq.n	8003e6c <xQueueSemaphoreTake+0x1aa>
					{
						taskENTER_CRITICAL();
 8003e4a:	f001 fc49 	bl	80056e0 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003e4e:	69fb      	ldr	r3, [r7, #28]
 8003e50:	0018      	movs	r0, r3
 8003e52:	f000 f810 	bl	8003e76 <prvGetDisinheritPriorityAfterTimeout>
 8003e56:	0003      	movs	r3, r0
 8003e58:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	697a      	ldr	r2, [r7, #20]
 8003e60:	0011      	movs	r1, r2
 8003e62:	0018      	movs	r0, r3
 8003e64:	f000 fff6 	bl	8004e54 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003e68:	f001 fc4c 	bl	8005704 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003e6c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003e6e:	0018      	movs	r0, r3
 8003e70:	46bd      	mov	sp, r7
 8003e72:	b00a      	add	sp, #40	; 0x28
 8003e74:	bd80      	pop	{r7, pc}

08003e76 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003e76:	b580      	push	{r7, lr}
 8003e78:	b084      	sub	sp, #16
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d006      	beq.n	8003e94 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	2238      	movs	r2, #56	; 0x38
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	60fb      	str	r3, [r7, #12]
 8003e92:	e001      	b.n	8003e98 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003e94:	2300      	movs	r3, #0
 8003e96:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003e98:	68fb      	ldr	r3, [r7, #12]
	}
 8003e9a:	0018      	movs	r0, r3
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	b004      	add	sp, #16
 8003ea0:	bd80      	pop	{r7, pc}

08003ea2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003ea2:	b580      	push	{r7, lr}
 8003ea4:	b086      	sub	sp, #24
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	60f8      	str	r0, [r7, #12]
 8003eaa:	60b9      	str	r1, [r7, #8]
 8003eac:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d10e      	bne.n	8003ede <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d14e      	bne.n	8003f66 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	0018      	movs	r0, r3
 8003ece:	f000 ff65 	bl	8004d9c <xTaskPriorityDisinherit>
 8003ed2:	0003      	movs	r3, r0
 8003ed4:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	605a      	str	r2, [r3, #4]
 8003edc:	e043      	b.n	8003f66 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d119      	bne.n	8003f18 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6898      	ldr	r0, [r3, #8]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	0019      	movs	r1, r3
 8003ef0:	f001 ffe0 	bl	8005eb4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	689a      	ldr	r2, [r3, #8]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efc:	18d2      	adds	r2, r2, r3
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	689a      	ldr	r2, [r3, #8]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d32b      	bcc.n	8003f66 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	609a      	str	r2, [r3, #8]
 8003f16:	e026      	b.n	8003f66 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	68d8      	ldr	r0, [r3, #12]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	0019      	movs	r1, r3
 8003f24:	f001 ffc6 	bl	8005eb4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	68da      	ldr	r2, [r3, #12]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f30:	425b      	negs	r3, r3
 8003f32:	18d2      	adds	r2, r2, r3
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	68da      	ldr	r2, [r3, #12]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d207      	bcs.n	8003f54 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	685a      	ldr	r2, [r3, #4]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4c:	425b      	negs	r3, r3
 8003f4e:	18d2      	adds	r2, r2, r3
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2b02      	cmp	r3, #2
 8003f58:	d105      	bne.n	8003f66 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d002      	beq.n	8003f66 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	3b01      	subs	r3, #1
 8003f64:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	1c5a      	adds	r2, r3, #1
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003f6e:	697b      	ldr	r3, [r7, #20]
}
 8003f70:	0018      	movs	r0, r3
 8003f72:	46bd      	mov	sp, r7
 8003f74:	b006      	add	sp, #24
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b082      	sub	sp, #8
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d018      	beq.n	8003fbc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	68da      	ldr	r2, [r3, #12]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f92:	18d2      	adds	r2, r2, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	68da      	ldr	r2, [r3, #12]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d303      	bcc.n	8003fac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	68d9      	ldr	r1, [r3, #12]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	0018      	movs	r0, r3
 8003fb8:	f001 ff7c 	bl	8005eb4 <memcpy>
	}
}
 8003fbc:	46c0      	nop			; (mov r8, r8)
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	b002      	add	sp, #8
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003fcc:	f001 fb88 	bl	80056e0 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003fd0:	230f      	movs	r3, #15
 8003fd2:	18fb      	adds	r3, r7, r3
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	2145      	movs	r1, #69	; 0x45
 8003fd8:	5c52      	ldrb	r2, [r2, r1]
 8003fda:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003fdc:	e013      	b.n	8004006 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d016      	beq.n	8004014 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	3324      	adds	r3, #36	; 0x24
 8003fea:	0018      	movs	r0, r3
 8003fec:	f000 fcb4 	bl	8004958 <xTaskRemoveFromEventList>
 8003ff0:	1e03      	subs	r3, r0, #0
 8003ff2:	d001      	beq.n	8003ff8 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003ff4:	f000 fd70 	bl	8004ad8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003ff8:	210f      	movs	r1, #15
 8003ffa:	187b      	adds	r3, r7, r1
 8003ffc:	781b      	ldrb	r3, [r3, #0]
 8003ffe:	3b01      	subs	r3, #1
 8004000:	b2da      	uxtb	r2, r3
 8004002:	187b      	adds	r3, r7, r1
 8004004:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004006:	230f      	movs	r3, #15
 8004008:	18fb      	adds	r3, r7, r3
 800400a:	781b      	ldrb	r3, [r3, #0]
 800400c:	b25b      	sxtb	r3, r3
 800400e:	2b00      	cmp	r3, #0
 8004010:	dce5      	bgt.n	8003fde <prvUnlockQueue+0x1a>
 8004012:	e000      	b.n	8004016 <prvUnlockQueue+0x52>
					break;
 8004014:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2245      	movs	r2, #69	; 0x45
 800401a:	21ff      	movs	r1, #255	; 0xff
 800401c:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 800401e:	f001 fb71 	bl	8005704 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004022:	f001 fb5d 	bl	80056e0 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004026:	230e      	movs	r3, #14
 8004028:	18fb      	adds	r3, r7, r3
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	2144      	movs	r1, #68	; 0x44
 800402e:	5c52      	ldrb	r2, [r2, r1]
 8004030:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004032:	e013      	b.n	800405c <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	691b      	ldr	r3, [r3, #16]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d016      	beq.n	800406a <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	3310      	adds	r3, #16
 8004040:	0018      	movs	r0, r3
 8004042:	f000 fc89 	bl	8004958 <xTaskRemoveFromEventList>
 8004046:	1e03      	subs	r3, r0, #0
 8004048:	d001      	beq.n	800404e <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 800404a:	f000 fd45 	bl	8004ad8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800404e:	210e      	movs	r1, #14
 8004050:	187b      	adds	r3, r7, r1
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	3b01      	subs	r3, #1
 8004056:	b2da      	uxtb	r2, r3
 8004058:	187b      	adds	r3, r7, r1
 800405a:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800405c:	230e      	movs	r3, #14
 800405e:	18fb      	adds	r3, r7, r3
 8004060:	781b      	ldrb	r3, [r3, #0]
 8004062:	b25b      	sxtb	r3, r3
 8004064:	2b00      	cmp	r3, #0
 8004066:	dce5      	bgt.n	8004034 <prvUnlockQueue+0x70>
 8004068:	e000      	b.n	800406c <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 800406a:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2244      	movs	r2, #68	; 0x44
 8004070:	21ff      	movs	r1, #255	; 0xff
 8004072:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8004074:	f001 fb46 	bl	8005704 <vPortExitCritical>
}
 8004078:	46c0      	nop			; (mov r8, r8)
 800407a:	46bd      	mov	sp, r7
 800407c:	b004      	add	sp, #16
 800407e:	bd80      	pop	{r7, pc}

08004080 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b084      	sub	sp, #16
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004088:	f001 fb2a 	bl	80056e0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004090:	2b00      	cmp	r3, #0
 8004092:	d102      	bne.n	800409a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004094:	2301      	movs	r3, #1
 8004096:	60fb      	str	r3, [r7, #12]
 8004098:	e001      	b.n	800409e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800409a:	2300      	movs	r3, #0
 800409c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800409e:	f001 fb31 	bl	8005704 <vPortExitCritical>

	return xReturn;
 80040a2:	68fb      	ldr	r3, [r7, #12]
}
 80040a4:	0018      	movs	r0, r3
 80040a6:	46bd      	mov	sp, r7
 80040a8:	b004      	add	sp, #16
 80040aa:	bd80      	pop	{r7, pc}

080040ac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80040b4:	f001 fb14 	bl	80056e0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d102      	bne.n	80040ca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80040c4:	2301      	movs	r3, #1
 80040c6:	60fb      	str	r3, [r7, #12]
 80040c8:	e001      	b.n	80040ce <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80040ca:	2300      	movs	r3, #0
 80040cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80040ce:	f001 fb19 	bl	8005704 <vPortExitCritical>

	return xReturn;
 80040d2:	68fb      	ldr	r3, [r7, #12]
}
 80040d4:	0018      	movs	r0, r3
 80040d6:	46bd      	mov	sp, r7
 80040d8:	b004      	add	sp, #16
 80040da:	bd80      	pop	{r7, pc}

080040dc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b084      	sub	sp, #16
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80040e6:	2300      	movs	r3, #0
 80040e8:	60fb      	str	r3, [r7, #12]
 80040ea:	e015      	b.n	8004118 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80040ec:	4b0e      	ldr	r3, [pc, #56]	; (8004128 <vQueueAddToRegistry+0x4c>)
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	00d2      	lsls	r2, r2, #3
 80040f2:	58d3      	ldr	r3, [r2, r3]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d10c      	bne.n	8004112 <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80040f8:	4b0b      	ldr	r3, [pc, #44]	; (8004128 <vQueueAddToRegistry+0x4c>)
 80040fa:	68fa      	ldr	r2, [r7, #12]
 80040fc:	00d2      	lsls	r2, r2, #3
 80040fe:	6839      	ldr	r1, [r7, #0]
 8004100:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004102:	4a09      	ldr	r2, [pc, #36]	; (8004128 <vQueueAddToRegistry+0x4c>)
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	00db      	lsls	r3, r3, #3
 8004108:	18d3      	adds	r3, r2, r3
 800410a:	3304      	adds	r3, #4
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004110:	e006      	b.n	8004120 <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	3301      	adds	r3, #1
 8004116:	60fb      	str	r3, [r7, #12]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2b07      	cmp	r3, #7
 800411c:	d9e6      	bls.n	80040ec <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800411e:	46c0      	nop			; (mov r8, r8)
 8004120:	46c0      	nop			; (mov r8, r8)
 8004122:	46bd      	mov	sp, r7
 8004124:	b004      	add	sp, #16
 8004126:	bd80      	pop	{r7, pc}
 8004128:	200022d0 	.word	0x200022d0

0800412c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800412c:	b580      	push	{r7, lr}
 800412e:	b086      	sub	sp, #24
 8004130:	af00      	add	r7, sp, #0
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	60b9      	str	r1, [r7, #8]
 8004136:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800413c:	f001 fad0 	bl	80056e0 <vPortEnterCritical>
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	2244      	movs	r2, #68	; 0x44
 8004144:	5c9b      	ldrb	r3, [r3, r2]
 8004146:	b25b      	sxtb	r3, r3
 8004148:	3301      	adds	r3, #1
 800414a:	d103      	bne.n	8004154 <vQueueWaitForMessageRestricted+0x28>
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	2244      	movs	r2, #68	; 0x44
 8004150:	2100      	movs	r1, #0
 8004152:	5499      	strb	r1, [r3, r2]
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	2245      	movs	r2, #69	; 0x45
 8004158:	5c9b      	ldrb	r3, [r3, r2]
 800415a:	b25b      	sxtb	r3, r3
 800415c:	3301      	adds	r3, #1
 800415e:	d103      	bne.n	8004168 <vQueueWaitForMessageRestricted+0x3c>
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	2245      	movs	r2, #69	; 0x45
 8004164:	2100      	movs	r1, #0
 8004166:	5499      	strb	r1, [r3, r2]
 8004168:	f001 facc 	bl	8005704 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004170:	2b00      	cmp	r3, #0
 8004172:	d106      	bne.n	8004182 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	3324      	adds	r3, #36	; 0x24
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	68b9      	ldr	r1, [r7, #8]
 800417c:	0018      	movs	r0, r3
 800417e:	f000 fbc5 	bl	800490c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	0018      	movs	r0, r3
 8004186:	f7ff ff1d 	bl	8003fc4 <prvUnlockQueue>
	}
 800418a:	46c0      	nop			; (mov r8, r8)
 800418c:	46bd      	mov	sp, r7
 800418e:	b006      	add	sp, #24
 8004190:	bd80      	pop	{r7, pc}

08004192 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004192:	b590      	push	{r4, r7, lr}
 8004194:	b08d      	sub	sp, #52	; 0x34
 8004196:	af04      	add	r7, sp, #16
 8004198:	60f8      	str	r0, [r7, #12]
 800419a:	60b9      	str	r1, [r7, #8]
 800419c:	607a      	str	r2, [r7, #4]
 800419e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80041a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d101      	bne.n	80041aa <xTaskCreateStatic+0x18>
 80041a6:	b672      	cpsid	i
 80041a8:	e7fe      	b.n	80041a8 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 80041aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d101      	bne.n	80041b4 <xTaskCreateStatic+0x22>
 80041b0:	b672      	cpsid	i
 80041b2:	e7fe      	b.n	80041b2 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80041b4:	235c      	movs	r3, #92	; 0x5c
 80041b6:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	2b5c      	cmp	r3, #92	; 0x5c
 80041bc:	d001      	beq.n	80041c2 <xTaskCreateStatic+0x30>
 80041be:	b672      	cpsid	i
 80041c0:	e7fe      	b.n	80041c0 <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80041c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d020      	beq.n	800420a <xTaskCreateStatic+0x78>
 80041c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d01d      	beq.n	800420a <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80041ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041d0:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80041d6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80041d8:	69fb      	ldr	r3, [r7, #28]
 80041da:	2259      	movs	r2, #89	; 0x59
 80041dc:	2102      	movs	r1, #2
 80041de:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80041e0:	683c      	ldr	r4, [r7, #0]
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	68b9      	ldr	r1, [r7, #8]
 80041e6:	68f8      	ldr	r0, [r7, #12]
 80041e8:	2300      	movs	r3, #0
 80041ea:	9303      	str	r3, [sp, #12]
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	9302      	str	r3, [sp, #8]
 80041f0:	2318      	movs	r3, #24
 80041f2:	18fb      	adds	r3, r7, r3
 80041f4:	9301      	str	r3, [sp, #4]
 80041f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f8:	9300      	str	r3, [sp, #0]
 80041fa:	0023      	movs	r3, r4
 80041fc:	f000 f858 	bl	80042b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004200:	69fb      	ldr	r3, [r7, #28]
 8004202:	0018      	movs	r0, r3
 8004204:	f000 f8d6 	bl	80043b4 <prvAddNewTaskToReadyList>
 8004208:	e001      	b.n	800420e <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 800420a:	2300      	movs	r3, #0
 800420c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800420e:	69bb      	ldr	r3, [r7, #24]
	}
 8004210:	0018      	movs	r0, r3
 8004212:	46bd      	mov	sp, r7
 8004214:	b009      	add	sp, #36	; 0x24
 8004216:	bd90      	pop	{r4, r7, pc}

08004218 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004218:	b590      	push	{r4, r7, lr}
 800421a:	b08d      	sub	sp, #52	; 0x34
 800421c:	af04      	add	r7, sp, #16
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	60b9      	str	r1, [r7, #8]
 8004222:	603b      	str	r3, [r7, #0]
 8004224:	1dbb      	adds	r3, r7, #6
 8004226:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004228:	1dbb      	adds	r3, r7, #6
 800422a:	881b      	ldrh	r3, [r3, #0]
 800422c:	009b      	lsls	r3, r3, #2
 800422e:	0018      	movs	r0, r3
 8004230:	f001 faee 	bl	8005810 <pvPortMalloc>
 8004234:	0003      	movs	r3, r0
 8004236:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d010      	beq.n	8004260 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800423e:	205c      	movs	r0, #92	; 0x5c
 8004240:	f001 fae6 	bl	8005810 <pvPortMalloc>
 8004244:	0003      	movs	r3, r0
 8004246:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8004248:	69fb      	ldr	r3, [r7, #28]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d003      	beq.n	8004256 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800424e:	69fb      	ldr	r3, [r7, #28]
 8004250:	697a      	ldr	r2, [r7, #20]
 8004252:	631a      	str	r2, [r3, #48]	; 0x30
 8004254:	e006      	b.n	8004264 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	0018      	movs	r0, r3
 800425a:	f001 fb7f 	bl	800595c <vPortFree>
 800425e:	e001      	b.n	8004264 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004260:	2300      	movs	r3, #0
 8004262:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d01a      	beq.n	80042a0 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	2259      	movs	r2, #89	; 0x59
 800426e:	2100      	movs	r1, #0
 8004270:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004272:	1dbb      	adds	r3, r7, #6
 8004274:	881a      	ldrh	r2, [r3, #0]
 8004276:	683c      	ldr	r4, [r7, #0]
 8004278:	68b9      	ldr	r1, [r7, #8]
 800427a:	68f8      	ldr	r0, [r7, #12]
 800427c:	2300      	movs	r3, #0
 800427e:	9303      	str	r3, [sp, #12]
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	9302      	str	r3, [sp, #8]
 8004284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004286:	9301      	str	r3, [sp, #4]
 8004288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800428a:	9300      	str	r3, [sp, #0]
 800428c:	0023      	movs	r3, r4
 800428e:	f000 f80f 	bl	80042b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	0018      	movs	r0, r3
 8004296:	f000 f88d 	bl	80043b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800429a:	2301      	movs	r3, #1
 800429c:	61bb      	str	r3, [r7, #24]
 800429e:	e002      	b.n	80042a6 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80042a0:	2301      	movs	r3, #1
 80042a2:	425b      	negs	r3, r3
 80042a4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80042a6:	69bb      	ldr	r3, [r7, #24]
	}
 80042a8:	0018      	movs	r0, r3
 80042aa:	46bd      	mov	sp, r7
 80042ac:	b009      	add	sp, #36	; 0x24
 80042ae:	bd90      	pop	{r4, r7, pc}

080042b0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b086      	sub	sp, #24
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	60f8      	str	r0, [r7, #12]
 80042b8:	60b9      	str	r1, [r7, #8]
 80042ba:	607a      	str	r2, [r7, #4]
 80042bc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80042be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042c0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	001a      	movs	r2, r3
 80042c8:	21a5      	movs	r1, #165	; 0xa5
 80042ca:	f001 fe0f 	bl	8005eec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80042ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4936      	ldr	r1, [pc, #216]	; (80043b0 <prvInitialiseNewTask+0x100>)
 80042d6:	468c      	mov	ip, r1
 80042d8:	4463      	add	r3, ip
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	18d3      	adds	r3, r2, r3
 80042de:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	2207      	movs	r2, #7
 80042e4:	4393      	bics	r3, r2
 80042e6:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	2207      	movs	r2, #7
 80042ec:	4013      	ands	r3, r2
 80042ee:	d001      	beq.n	80042f4 <prvInitialiseNewTask+0x44>
 80042f0:	b672      	cpsid	i
 80042f2:	e7fe      	b.n	80042f2 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80042f4:	2300      	movs	r3, #0
 80042f6:	617b      	str	r3, [r7, #20]
 80042f8:	e013      	b.n	8004322 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80042fa:	68ba      	ldr	r2, [r7, #8]
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	18d3      	adds	r3, r2, r3
 8004300:	7818      	ldrb	r0, [r3, #0]
 8004302:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004304:	2134      	movs	r1, #52	; 0x34
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	18d3      	adds	r3, r2, r3
 800430a:	185b      	adds	r3, r3, r1
 800430c:	1c02      	adds	r2, r0, #0
 800430e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004310:	68ba      	ldr	r2, [r7, #8]
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	18d3      	adds	r3, r2, r3
 8004316:	781b      	ldrb	r3, [r3, #0]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d006      	beq.n	800432a <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	3301      	adds	r3, #1
 8004320:	617b      	str	r3, [r7, #20]
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	2b0f      	cmp	r3, #15
 8004326:	d9e8      	bls.n	80042fa <prvInitialiseNewTask+0x4a>
 8004328:	e000      	b.n	800432c <prvInitialiseNewTask+0x7c>
		{
			break;
 800432a:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800432c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800432e:	2243      	movs	r2, #67	; 0x43
 8004330:	2100      	movs	r1, #0
 8004332:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004334:	6a3b      	ldr	r3, [r7, #32]
 8004336:	2b37      	cmp	r3, #55	; 0x37
 8004338:	d901      	bls.n	800433e <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800433a:	2337      	movs	r3, #55	; 0x37
 800433c:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800433e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004340:	6a3a      	ldr	r2, [r7, #32]
 8004342:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004346:	6a3a      	ldr	r2, [r7, #32]
 8004348:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800434a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800434c:	2200      	movs	r2, #0
 800434e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004352:	3304      	adds	r3, #4
 8004354:	0018      	movs	r0, r3
 8004356:	f7ff f979 	bl	800364c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800435a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800435c:	3318      	adds	r3, #24
 800435e:	0018      	movs	r0, r3
 8004360:	f7ff f974 	bl	800364c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004366:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004368:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800436a:	6a3b      	ldr	r3, [r7, #32]
 800436c:	2238      	movs	r2, #56	; 0x38
 800436e:	1ad2      	subs	r2, r2, r3
 8004370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004372:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004376:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004378:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800437a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800437c:	2200      	movs	r2, #0
 800437e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004382:	2258      	movs	r2, #88	; 0x58
 8004384:	2100      	movs	r1, #0
 8004386:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004388:	683a      	ldr	r2, [r7, #0]
 800438a:	68f9      	ldr	r1, [r7, #12]
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	0018      	movs	r0, r3
 8004390:	f001 f90a 	bl	80055a8 <pxPortInitialiseStack>
 8004394:	0002      	movs	r2, r0
 8004396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004398:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800439a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439c:	2b00      	cmp	r3, #0
 800439e:	d002      	beq.n	80043a6 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80043a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80043a6:	46c0      	nop			; (mov r8, r8)
 80043a8:	46bd      	mov	sp, r7
 80043aa:	b006      	add	sp, #24
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	46c0      	nop			; (mov r8, r8)
 80043b0:	3fffffff 	.word	0x3fffffff

080043b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b082      	sub	sp, #8
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80043bc:	f001 f990 	bl	80056e0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80043c0:	4b2a      	ldr	r3, [pc, #168]	; (800446c <prvAddNewTaskToReadyList+0xb8>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	1c5a      	adds	r2, r3, #1
 80043c6:	4b29      	ldr	r3, [pc, #164]	; (800446c <prvAddNewTaskToReadyList+0xb8>)
 80043c8:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80043ca:	4b29      	ldr	r3, [pc, #164]	; (8004470 <prvAddNewTaskToReadyList+0xbc>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d109      	bne.n	80043e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80043d2:	4b27      	ldr	r3, [pc, #156]	; (8004470 <prvAddNewTaskToReadyList+0xbc>)
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80043d8:	4b24      	ldr	r3, [pc, #144]	; (800446c <prvAddNewTaskToReadyList+0xb8>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d110      	bne.n	8004402 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80043e0:	f000 fb94 	bl	8004b0c <prvInitialiseTaskLists>
 80043e4:	e00d      	b.n	8004402 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80043e6:	4b23      	ldr	r3, [pc, #140]	; (8004474 <prvAddNewTaskToReadyList+0xc0>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d109      	bne.n	8004402 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80043ee:	4b20      	ldr	r3, [pc, #128]	; (8004470 <prvAddNewTaskToReadyList+0xbc>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d802      	bhi.n	8004402 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80043fc:	4b1c      	ldr	r3, [pc, #112]	; (8004470 <prvAddNewTaskToReadyList+0xbc>)
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004402:	4b1d      	ldr	r3, [pc, #116]	; (8004478 <prvAddNewTaskToReadyList+0xc4>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	1c5a      	adds	r2, r3, #1
 8004408:	4b1b      	ldr	r3, [pc, #108]	; (8004478 <prvAddNewTaskToReadyList+0xc4>)
 800440a:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800440c:	4b1a      	ldr	r3, [pc, #104]	; (8004478 <prvAddNewTaskToReadyList+0xc4>)
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004418:	4b18      	ldr	r3, [pc, #96]	; (800447c <prvAddNewTaskToReadyList+0xc8>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	429a      	cmp	r2, r3
 800441e:	d903      	bls.n	8004428 <prvAddNewTaskToReadyList+0x74>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004424:	4b15      	ldr	r3, [pc, #84]	; (800447c <prvAddNewTaskToReadyList+0xc8>)
 8004426:	601a      	str	r2, [r3, #0]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800442c:	0013      	movs	r3, r2
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	189b      	adds	r3, r3, r2
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	4a12      	ldr	r2, [pc, #72]	; (8004480 <prvAddNewTaskToReadyList+0xcc>)
 8004436:	189a      	adds	r2, r3, r2
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	3304      	adds	r3, #4
 800443c:	0019      	movs	r1, r3
 800443e:	0010      	movs	r0, r2
 8004440:	f7ff f90f 	bl	8003662 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004444:	f001 f95e 	bl	8005704 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004448:	4b0a      	ldr	r3, [pc, #40]	; (8004474 <prvAddNewTaskToReadyList+0xc0>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d008      	beq.n	8004462 <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004450:	4b07      	ldr	r3, [pc, #28]	; (8004470 <prvAddNewTaskToReadyList+0xbc>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800445a:	429a      	cmp	r2, r3
 800445c:	d201      	bcs.n	8004462 <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800445e:	f001 f92f 	bl	80056c0 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004462:	46c0      	nop			; (mov r8, r8)
 8004464:	46bd      	mov	sp, r7
 8004466:	b002      	add	sp, #8
 8004468:	bd80      	pop	{r7, pc}
 800446a:	46c0      	nop			; (mov r8, r8)
 800446c:	20000c30 	.word	0x20000c30
 8004470:	2000075c 	.word	0x2000075c
 8004474:	20000c3c 	.word	0x20000c3c
 8004478:	20000c4c 	.word	0x20000c4c
 800447c:	20000c38 	.word	0x20000c38
 8004480:	20000760 	.word	0x20000760

08004484 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004484:	b580      	push	{r7, lr}
 8004486:	b084      	sub	sp, #16
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800448c:	2300      	movs	r3, #0
 800448e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d010      	beq.n	80044b8 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004496:	4b0d      	ldr	r3, [pc, #52]	; (80044cc <vTaskDelay+0x48>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d001      	beq.n	80044a2 <vTaskDelay+0x1e>
 800449e:	b672      	cpsid	i
 80044a0:	e7fe      	b.n	80044a0 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 80044a2:	f000 f869 	bl	8004578 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2100      	movs	r1, #0
 80044aa:	0018      	movs	r0, r3
 80044ac:	f000 fd58 	bl	8004f60 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80044b0:	f000 f86e 	bl	8004590 <xTaskResumeAll>
 80044b4:	0003      	movs	r3, r0
 80044b6:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d101      	bne.n	80044c2 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 80044be:	f001 f8ff 	bl	80056c0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80044c2:	46c0      	nop			; (mov r8, r8)
 80044c4:	46bd      	mov	sp, r7
 80044c6:	b004      	add	sp, #16
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	46c0      	nop			; (mov r8, r8)
 80044cc:	20000c58 	.word	0x20000c58

080044d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80044d0:	b590      	push	{r4, r7, lr}
 80044d2:	b089      	sub	sp, #36	; 0x24
 80044d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80044d6:	2300      	movs	r3, #0
 80044d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80044da:	2300      	movs	r3, #0
 80044dc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80044de:	003a      	movs	r2, r7
 80044e0:	1d39      	adds	r1, r7, #4
 80044e2:	2308      	movs	r3, #8
 80044e4:	18fb      	adds	r3, r7, r3
 80044e6:	0018      	movs	r0, r3
 80044e8:	f7ff f862 	bl	80035b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80044ec:	683c      	ldr	r4, [r7, #0]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	68ba      	ldr	r2, [r7, #8]
 80044f2:	491b      	ldr	r1, [pc, #108]	; (8004560 <vTaskStartScheduler+0x90>)
 80044f4:	481b      	ldr	r0, [pc, #108]	; (8004564 <vTaskStartScheduler+0x94>)
 80044f6:	9202      	str	r2, [sp, #8]
 80044f8:	9301      	str	r3, [sp, #4]
 80044fa:	2300      	movs	r3, #0
 80044fc:	9300      	str	r3, [sp, #0]
 80044fe:	2300      	movs	r3, #0
 8004500:	0022      	movs	r2, r4
 8004502:	f7ff fe46 	bl	8004192 <xTaskCreateStatic>
 8004506:	0002      	movs	r2, r0
 8004508:	4b17      	ldr	r3, [pc, #92]	; (8004568 <vTaskStartScheduler+0x98>)
 800450a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800450c:	4b16      	ldr	r3, [pc, #88]	; (8004568 <vTaskStartScheduler+0x98>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d002      	beq.n	800451a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004514:	2301      	movs	r3, #1
 8004516:	60fb      	str	r3, [r7, #12]
 8004518:	e001      	b.n	800451e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800451a:	2300      	movs	r3, #0
 800451c:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2b01      	cmp	r3, #1
 8004522:	d103      	bne.n	800452c <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 8004524:	f000 fd70 	bl	8005008 <xTimerCreateTimerTask>
 8004528:	0003      	movs	r3, r0
 800452a:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2b01      	cmp	r3, #1
 8004530:	d10d      	bne.n	800454e <vTaskStartScheduler+0x7e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8004532:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004534:	4b0d      	ldr	r3, [pc, #52]	; (800456c <vTaskStartScheduler+0x9c>)
 8004536:	2201      	movs	r2, #1
 8004538:	4252      	negs	r2, r2
 800453a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800453c:	4b0c      	ldr	r3, [pc, #48]	; (8004570 <vTaskStartScheduler+0xa0>)
 800453e:	2201      	movs	r2, #1
 8004540:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004542:	4b0c      	ldr	r3, [pc, #48]	; (8004574 <vTaskStartScheduler+0xa4>)
 8004544:	2200      	movs	r2, #0
 8004546:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004548:	f001 f896 	bl	8005678 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800454c:	e004      	b.n	8004558 <vTaskStartScheduler+0x88>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	3301      	adds	r3, #1
 8004552:	d101      	bne.n	8004558 <vTaskStartScheduler+0x88>
 8004554:	b672      	cpsid	i
 8004556:	e7fe      	b.n	8004556 <vTaskStartScheduler+0x86>
}
 8004558:	46c0      	nop			; (mov r8, r8)
 800455a:	46bd      	mov	sp, r7
 800455c:	b005      	add	sp, #20
 800455e:	bd90      	pop	{r4, r7, pc}
 8004560:	08006828 	.word	0x08006828
 8004564:	08004aed 	.word	0x08004aed
 8004568:	20000c54 	.word	0x20000c54
 800456c:	20000c50 	.word	0x20000c50
 8004570:	20000c3c 	.word	0x20000c3c
 8004574:	20000c34 	.word	0x20000c34

08004578 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004578:	b580      	push	{r7, lr}
 800457a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800457c:	4b03      	ldr	r3, [pc, #12]	; (800458c <vTaskSuspendAll+0x14>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	1c5a      	adds	r2, r3, #1
 8004582:	4b02      	ldr	r3, [pc, #8]	; (800458c <vTaskSuspendAll+0x14>)
 8004584:	601a      	str	r2, [r3, #0]
}
 8004586:	46c0      	nop			; (mov r8, r8)
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}
 800458c:	20000c58 	.word	0x20000c58

08004590 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004596:	2300      	movs	r3, #0
 8004598:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800459a:	2300      	movs	r3, #0
 800459c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800459e:	4b3a      	ldr	r3, [pc, #232]	; (8004688 <xTaskResumeAll+0xf8>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d101      	bne.n	80045aa <xTaskResumeAll+0x1a>
 80045a6:	b672      	cpsid	i
 80045a8:	e7fe      	b.n	80045a8 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80045aa:	f001 f899 	bl	80056e0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80045ae:	4b36      	ldr	r3, [pc, #216]	; (8004688 <xTaskResumeAll+0xf8>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	1e5a      	subs	r2, r3, #1
 80045b4:	4b34      	ldr	r3, [pc, #208]	; (8004688 <xTaskResumeAll+0xf8>)
 80045b6:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045b8:	4b33      	ldr	r3, [pc, #204]	; (8004688 <xTaskResumeAll+0xf8>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d15b      	bne.n	8004678 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80045c0:	4b32      	ldr	r3, [pc, #200]	; (800468c <xTaskResumeAll+0xfc>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d057      	beq.n	8004678 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80045c8:	e02f      	b.n	800462a <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80045ca:	4b31      	ldr	r3, [pc, #196]	; (8004690 <xTaskResumeAll+0x100>)
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	3318      	adds	r3, #24
 80045d6:	0018      	movs	r0, r3
 80045d8:	f7ff f89b 	bl	8003712 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	3304      	adds	r3, #4
 80045e0:	0018      	movs	r0, r3
 80045e2:	f7ff f896 	bl	8003712 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045ea:	4b2a      	ldr	r3, [pc, #168]	; (8004694 <xTaskResumeAll+0x104>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d903      	bls.n	80045fa <xTaskResumeAll+0x6a>
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045f6:	4b27      	ldr	r3, [pc, #156]	; (8004694 <xTaskResumeAll+0x104>)
 80045f8:	601a      	str	r2, [r3, #0]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045fe:	0013      	movs	r3, r2
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	189b      	adds	r3, r3, r2
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	4a24      	ldr	r2, [pc, #144]	; (8004698 <xTaskResumeAll+0x108>)
 8004608:	189a      	adds	r2, r3, r2
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	3304      	adds	r3, #4
 800460e:	0019      	movs	r1, r3
 8004610:	0010      	movs	r0, r2
 8004612:	f7ff f826 	bl	8003662 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800461a:	4b20      	ldr	r3, [pc, #128]	; (800469c <xTaskResumeAll+0x10c>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004620:	429a      	cmp	r2, r3
 8004622:	d302      	bcc.n	800462a <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8004624:	4b1e      	ldr	r3, [pc, #120]	; (80046a0 <xTaskResumeAll+0x110>)
 8004626:	2201      	movs	r2, #1
 8004628:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800462a:	4b19      	ldr	r3, [pc, #100]	; (8004690 <xTaskResumeAll+0x100>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d1cb      	bne.n	80045ca <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d001      	beq.n	800463c <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004638:	f000 fb02 	bl	8004c40 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800463c:	4b19      	ldr	r3, [pc, #100]	; (80046a4 <xTaskResumeAll+0x114>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d00f      	beq.n	8004668 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004648:	f000 f83c 	bl	80046c4 <xTaskIncrementTick>
 800464c:	1e03      	subs	r3, r0, #0
 800464e:	d002      	beq.n	8004656 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8004650:	4b13      	ldr	r3, [pc, #76]	; (80046a0 <xTaskResumeAll+0x110>)
 8004652:	2201      	movs	r2, #1
 8004654:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	3b01      	subs	r3, #1
 800465a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d1f2      	bne.n	8004648 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 8004662:	4b10      	ldr	r3, [pc, #64]	; (80046a4 <xTaskResumeAll+0x114>)
 8004664:	2200      	movs	r2, #0
 8004666:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004668:	4b0d      	ldr	r3, [pc, #52]	; (80046a0 <xTaskResumeAll+0x110>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d003      	beq.n	8004678 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004670:	2301      	movs	r3, #1
 8004672:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004674:	f001 f824 	bl	80056c0 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004678:	f001 f844 	bl	8005704 <vPortExitCritical>

	return xAlreadyYielded;
 800467c:	68bb      	ldr	r3, [r7, #8]
}
 800467e:	0018      	movs	r0, r3
 8004680:	46bd      	mov	sp, r7
 8004682:	b004      	add	sp, #16
 8004684:	bd80      	pop	{r7, pc}
 8004686:	46c0      	nop			; (mov r8, r8)
 8004688:	20000c58 	.word	0x20000c58
 800468c:	20000c30 	.word	0x20000c30
 8004690:	20000bf0 	.word	0x20000bf0
 8004694:	20000c38 	.word	0x20000c38
 8004698:	20000760 	.word	0x20000760
 800469c:	2000075c 	.word	0x2000075c
 80046a0:	20000c44 	.word	0x20000c44
 80046a4:	20000c40 	.word	0x20000c40

080046a8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b082      	sub	sp, #8
 80046ac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80046ae:	4b04      	ldr	r3, [pc, #16]	; (80046c0 <xTaskGetTickCount+0x18>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80046b4:	687b      	ldr	r3, [r7, #4]
}
 80046b6:	0018      	movs	r0, r3
 80046b8:	46bd      	mov	sp, r7
 80046ba:	b002      	add	sp, #8
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	46c0      	nop			; (mov r8, r8)
 80046c0:	20000c34 	.word	0x20000c34

080046c4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b086      	sub	sp, #24
 80046c8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80046ca:	2300      	movs	r3, #0
 80046cc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046ce:	4b4c      	ldr	r3, [pc, #304]	; (8004800 <xTaskIncrementTick+0x13c>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d000      	beq.n	80046d8 <xTaskIncrementTick+0x14>
 80046d6:	e083      	b.n	80047e0 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80046d8:	4b4a      	ldr	r3, [pc, #296]	; (8004804 <xTaskIncrementTick+0x140>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	3301      	adds	r3, #1
 80046de:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80046e0:	4b48      	ldr	r3, [pc, #288]	; (8004804 <xTaskIncrementTick+0x140>)
 80046e2:	693a      	ldr	r2, [r7, #16]
 80046e4:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d117      	bne.n	800471c <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 80046ec:	4b46      	ldr	r3, [pc, #280]	; (8004808 <xTaskIncrementTick+0x144>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d001      	beq.n	80046fa <xTaskIncrementTick+0x36>
 80046f6:	b672      	cpsid	i
 80046f8:	e7fe      	b.n	80046f8 <xTaskIncrementTick+0x34>
 80046fa:	4b43      	ldr	r3, [pc, #268]	; (8004808 <xTaskIncrementTick+0x144>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	60fb      	str	r3, [r7, #12]
 8004700:	4b42      	ldr	r3, [pc, #264]	; (800480c <xTaskIncrementTick+0x148>)
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	4b40      	ldr	r3, [pc, #256]	; (8004808 <xTaskIncrementTick+0x144>)
 8004706:	601a      	str	r2, [r3, #0]
 8004708:	4b40      	ldr	r3, [pc, #256]	; (800480c <xTaskIncrementTick+0x148>)
 800470a:	68fa      	ldr	r2, [r7, #12]
 800470c:	601a      	str	r2, [r3, #0]
 800470e:	4b40      	ldr	r3, [pc, #256]	; (8004810 <xTaskIncrementTick+0x14c>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	1c5a      	adds	r2, r3, #1
 8004714:	4b3e      	ldr	r3, [pc, #248]	; (8004810 <xTaskIncrementTick+0x14c>)
 8004716:	601a      	str	r2, [r3, #0]
 8004718:	f000 fa92 	bl	8004c40 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800471c:	4b3d      	ldr	r3, [pc, #244]	; (8004814 <xTaskIncrementTick+0x150>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	693a      	ldr	r2, [r7, #16]
 8004722:	429a      	cmp	r2, r3
 8004724:	d34e      	bcc.n	80047c4 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004726:	4b38      	ldr	r3, [pc, #224]	; (8004808 <xTaskIncrementTick+0x144>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d101      	bne.n	8004734 <xTaskIncrementTick+0x70>
 8004730:	2301      	movs	r3, #1
 8004732:	e000      	b.n	8004736 <xTaskIncrementTick+0x72>
 8004734:	2300      	movs	r3, #0
 8004736:	2b00      	cmp	r3, #0
 8004738:	d004      	beq.n	8004744 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800473a:	4b36      	ldr	r3, [pc, #216]	; (8004814 <xTaskIncrementTick+0x150>)
 800473c:	2201      	movs	r2, #1
 800473e:	4252      	negs	r2, r2
 8004740:	601a      	str	r2, [r3, #0]
					break;
 8004742:	e03f      	b.n	80047c4 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004744:	4b30      	ldr	r3, [pc, #192]	; (8004808 <xTaskIncrementTick+0x144>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004754:	693a      	ldr	r2, [r7, #16]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	429a      	cmp	r2, r3
 800475a:	d203      	bcs.n	8004764 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800475c:	4b2d      	ldr	r3, [pc, #180]	; (8004814 <xTaskIncrementTick+0x150>)
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	601a      	str	r2, [r3, #0]
						break;
 8004762:	e02f      	b.n	80047c4 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	3304      	adds	r3, #4
 8004768:	0018      	movs	r0, r3
 800476a:	f7fe ffd2 	bl	8003712 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004772:	2b00      	cmp	r3, #0
 8004774:	d004      	beq.n	8004780 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	3318      	adds	r3, #24
 800477a:	0018      	movs	r0, r3
 800477c:	f7fe ffc9 	bl	8003712 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004784:	4b24      	ldr	r3, [pc, #144]	; (8004818 <xTaskIncrementTick+0x154>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	429a      	cmp	r2, r3
 800478a:	d903      	bls.n	8004794 <xTaskIncrementTick+0xd0>
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004790:	4b21      	ldr	r3, [pc, #132]	; (8004818 <xTaskIncrementTick+0x154>)
 8004792:	601a      	str	r2, [r3, #0]
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004798:	0013      	movs	r3, r2
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	189b      	adds	r3, r3, r2
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	4a1e      	ldr	r2, [pc, #120]	; (800481c <xTaskIncrementTick+0x158>)
 80047a2:	189a      	adds	r2, r3, r2
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	3304      	adds	r3, #4
 80047a8:	0019      	movs	r1, r3
 80047aa:	0010      	movs	r0, r2
 80047ac:	f7fe ff59 	bl	8003662 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047b4:	4b1a      	ldr	r3, [pc, #104]	; (8004820 <xTaskIncrementTick+0x15c>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d3b3      	bcc.n	8004726 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 80047be:	2301      	movs	r3, #1
 80047c0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80047c2:	e7b0      	b.n	8004726 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80047c4:	4b16      	ldr	r3, [pc, #88]	; (8004820 <xTaskIncrementTick+0x15c>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047ca:	4914      	ldr	r1, [pc, #80]	; (800481c <xTaskIncrementTick+0x158>)
 80047cc:	0013      	movs	r3, r2
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	189b      	adds	r3, r3, r2
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	585b      	ldr	r3, [r3, r1]
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d907      	bls.n	80047ea <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80047da:	2301      	movs	r3, #1
 80047dc:	617b      	str	r3, [r7, #20]
 80047de:	e004      	b.n	80047ea <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80047e0:	4b10      	ldr	r3, [pc, #64]	; (8004824 <xTaskIncrementTick+0x160>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	1c5a      	adds	r2, r3, #1
 80047e6:	4b0f      	ldr	r3, [pc, #60]	; (8004824 <xTaskIncrementTick+0x160>)
 80047e8:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80047ea:	4b0f      	ldr	r3, [pc, #60]	; (8004828 <xTaskIncrementTick+0x164>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d001      	beq.n	80047f6 <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 80047f2:	2301      	movs	r3, #1
 80047f4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80047f6:	697b      	ldr	r3, [r7, #20]
}
 80047f8:	0018      	movs	r0, r3
 80047fa:	46bd      	mov	sp, r7
 80047fc:	b006      	add	sp, #24
 80047fe:	bd80      	pop	{r7, pc}
 8004800:	20000c58 	.word	0x20000c58
 8004804:	20000c34 	.word	0x20000c34
 8004808:	20000be8 	.word	0x20000be8
 800480c:	20000bec 	.word	0x20000bec
 8004810:	20000c48 	.word	0x20000c48
 8004814:	20000c50 	.word	0x20000c50
 8004818:	20000c38 	.word	0x20000c38
 800481c:	20000760 	.word	0x20000760
 8004820:	2000075c 	.word	0x2000075c
 8004824:	20000c40 	.word	0x20000c40
 8004828:	20000c44 	.word	0x20000c44

0800482c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b082      	sub	sp, #8
 8004830:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004832:	4b22      	ldr	r3, [pc, #136]	; (80048bc <vTaskSwitchContext+0x90>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d003      	beq.n	8004842 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800483a:	4b21      	ldr	r3, [pc, #132]	; (80048c0 <vTaskSwitchContext+0x94>)
 800483c:	2201      	movs	r2, #1
 800483e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004840:	e037      	b.n	80048b2 <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 8004842:	4b1f      	ldr	r3, [pc, #124]	; (80048c0 <vTaskSwitchContext+0x94>)
 8004844:	2200      	movs	r2, #0
 8004846:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004848:	4b1e      	ldr	r3, [pc, #120]	; (80048c4 <vTaskSwitchContext+0x98>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	607b      	str	r3, [r7, #4]
 800484e:	e007      	b.n	8004860 <vTaskSwitchContext+0x34>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d101      	bne.n	800485a <vTaskSwitchContext+0x2e>
 8004856:	b672      	cpsid	i
 8004858:	e7fe      	b.n	8004858 <vTaskSwitchContext+0x2c>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	3b01      	subs	r3, #1
 800485e:	607b      	str	r3, [r7, #4]
 8004860:	4919      	ldr	r1, [pc, #100]	; (80048c8 <vTaskSwitchContext+0x9c>)
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	0013      	movs	r3, r2
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	189b      	adds	r3, r3, r2
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	585b      	ldr	r3, [r3, r1]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d0ee      	beq.n	8004850 <vTaskSwitchContext+0x24>
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	0013      	movs	r3, r2
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	189b      	adds	r3, r3, r2
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	4a12      	ldr	r2, [pc, #72]	; (80048c8 <vTaskSwitchContext+0x9c>)
 800487e:	189b      	adds	r3, r3, r2
 8004880:	603b      	str	r3, [r7, #0]
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	685a      	ldr	r2, [r3, #4]
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	605a      	str	r2, [r3, #4]
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	685a      	ldr	r2, [r3, #4]
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	3308      	adds	r3, #8
 8004894:	429a      	cmp	r2, r3
 8004896:	d104      	bne.n	80048a2 <vTaskSwitchContext+0x76>
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	685a      	ldr	r2, [r3, #4]
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	605a      	str	r2, [r3, #4]
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	68da      	ldr	r2, [r3, #12]
 80048a8:	4b08      	ldr	r3, [pc, #32]	; (80048cc <vTaskSwitchContext+0xa0>)
 80048aa:	601a      	str	r2, [r3, #0]
 80048ac:	4b05      	ldr	r3, [pc, #20]	; (80048c4 <vTaskSwitchContext+0x98>)
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	601a      	str	r2, [r3, #0]
}
 80048b2:	46c0      	nop			; (mov r8, r8)
 80048b4:	46bd      	mov	sp, r7
 80048b6:	b002      	add	sp, #8
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	46c0      	nop			; (mov r8, r8)
 80048bc:	20000c58 	.word	0x20000c58
 80048c0:	20000c44 	.word	0x20000c44
 80048c4:	20000c38 	.word	0x20000c38
 80048c8:	20000760 	.word	0x20000760
 80048cc:	2000075c 	.word	0x2000075c

080048d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b082      	sub	sp, #8
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d101      	bne.n	80048e4 <vTaskPlaceOnEventList+0x14>
 80048e0:	b672      	cpsid	i
 80048e2:	e7fe      	b.n	80048e2 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80048e4:	4b08      	ldr	r3, [pc, #32]	; (8004908 <vTaskPlaceOnEventList+0x38>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	3318      	adds	r3, #24
 80048ea:	001a      	movs	r2, r3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	0011      	movs	r1, r2
 80048f0:	0018      	movs	r0, r3
 80048f2:	f7fe fed8 	bl	80036a6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	2101      	movs	r1, #1
 80048fa:	0018      	movs	r0, r3
 80048fc:	f000 fb30 	bl	8004f60 <prvAddCurrentTaskToDelayedList>
}
 8004900:	46c0      	nop			; (mov r8, r8)
 8004902:	46bd      	mov	sp, r7
 8004904:	b002      	add	sp, #8
 8004906:	bd80      	pop	{r7, pc}
 8004908:	2000075c 	.word	0x2000075c

0800490c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800490c:	b580      	push	{r7, lr}
 800490e:	b084      	sub	sp, #16
 8004910:	af00      	add	r7, sp, #0
 8004912:	60f8      	str	r0, [r7, #12]
 8004914:	60b9      	str	r1, [r7, #8]
 8004916:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d101      	bne.n	8004922 <vTaskPlaceOnEventListRestricted+0x16>
 800491e:	b672      	cpsid	i
 8004920:	e7fe      	b.n	8004920 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004922:	4b0c      	ldr	r3, [pc, #48]	; (8004954 <vTaskPlaceOnEventListRestricted+0x48>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	3318      	adds	r3, #24
 8004928:	001a      	movs	r2, r3
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	0011      	movs	r1, r2
 800492e:	0018      	movs	r0, r3
 8004930:	f7fe fe97 	bl	8003662 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d002      	beq.n	8004940 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 800493a:	2301      	movs	r3, #1
 800493c:	425b      	negs	r3, r3
 800493e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	0011      	movs	r1, r2
 8004946:	0018      	movs	r0, r3
 8004948:	f000 fb0a 	bl	8004f60 <prvAddCurrentTaskToDelayedList>
	}
 800494c:	46c0      	nop			; (mov r8, r8)
 800494e:	46bd      	mov	sp, r7
 8004950:	b004      	add	sp, #16
 8004952:	bd80      	pop	{r7, pc}
 8004954:	2000075c 	.word	0x2000075c

08004958 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b084      	sub	sp, #16
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d101      	bne.n	8004972 <xTaskRemoveFromEventList+0x1a>
 800496e:	b672      	cpsid	i
 8004970:	e7fe      	b.n	8004970 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	3318      	adds	r3, #24
 8004976:	0018      	movs	r0, r3
 8004978:	f7fe fecb 	bl	8003712 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800497c:	4b1e      	ldr	r3, [pc, #120]	; (80049f8 <xTaskRemoveFromEventList+0xa0>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d11d      	bne.n	80049c0 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	3304      	adds	r3, #4
 8004988:	0018      	movs	r0, r3
 800498a:	f7fe fec2 	bl	8003712 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004992:	4b1a      	ldr	r3, [pc, #104]	; (80049fc <xTaskRemoveFromEventList+0xa4>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	429a      	cmp	r2, r3
 8004998:	d903      	bls.n	80049a2 <xTaskRemoveFromEventList+0x4a>
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800499e:	4b17      	ldr	r3, [pc, #92]	; (80049fc <xTaskRemoveFromEventList+0xa4>)
 80049a0:	601a      	str	r2, [r3, #0]
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049a6:	0013      	movs	r3, r2
 80049a8:	009b      	lsls	r3, r3, #2
 80049aa:	189b      	adds	r3, r3, r2
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	4a14      	ldr	r2, [pc, #80]	; (8004a00 <xTaskRemoveFromEventList+0xa8>)
 80049b0:	189a      	adds	r2, r3, r2
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	3304      	adds	r3, #4
 80049b6:	0019      	movs	r1, r3
 80049b8:	0010      	movs	r0, r2
 80049ba:	f7fe fe52 	bl	8003662 <vListInsertEnd>
 80049be:	e007      	b.n	80049d0 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	3318      	adds	r3, #24
 80049c4:	001a      	movs	r2, r3
 80049c6:	4b0f      	ldr	r3, [pc, #60]	; (8004a04 <xTaskRemoveFromEventList+0xac>)
 80049c8:	0011      	movs	r1, r2
 80049ca:	0018      	movs	r0, r3
 80049cc:	f7fe fe49 	bl	8003662 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049d4:	4b0c      	ldr	r3, [pc, #48]	; (8004a08 <xTaskRemoveFromEventList+0xb0>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049da:	429a      	cmp	r2, r3
 80049dc:	d905      	bls.n	80049ea <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80049de:	2301      	movs	r3, #1
 80049e0:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80049e2:	4b0a      	ldr	r3, [pc, #40]	; (8004a0c <xTaskRemoveFromEventList+0xb4>)
 80049e4:	2201      	movs	r2, #1
 80049e6:	601a      	str	r2, [r3, #0]
 80049e8:	e001      	b.n	80049ee <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 80049ea:	2300      	movs	r3, #0
 80049ec:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80049ee:	68fb      	ldr	r3, [r7, #12]
}
 80049f0:	0018      	movs	r0, r3
 80049f2:	46bd      	mov	sp, r7
 80049f4:	b004      	add	sp, #16
 80049f6:	bd80      	pop	{r7, pc}
 80049f8:	20000c58 	.word	0x20000c58
 80049fc:	20000c38 	.word	0x20000c38
 8004a00:	20000760 	.word	0x20000760
 8004a04:	20000bf0 	.word	0x20000bf0
 8004a08:	2000075c 	.word	0x2000075c
 8004a0c:	20000c44 	.word	0x20000c44

08004a10 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b082      	sub	sp, #8
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004a18:	4b05      	ldr	r3, [pc, #20]	; (8004a30 <vTaskInternalSetTimeOutState+0x20>)
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004a20:	4b04      	ldr	r3, [pc, #16]	; (8004a34 <vTaskInternalSetTimeOutState+0x24>)
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	605a      	str	r2, [r3, #4]
}
 8004a28:	46c0      	nop			; (mov r8, r8)
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	b002      	add	sp, #8
 8004a2e:	bd80      	pop	{r7, pc}
 8004a30:	20000c48 	.word	0x20000c48
 8004a34:	20000c34 	.word	0x20000c34

08004a38 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b086      	sub	sp, #24
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d101      	bne.n	8004a4c <xTaskCheckForTimeOut+0x14>
 8004a48:	b672      	cpsid	i
 8004a4a:	e7fe      	b.n	8004a4a <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d101      	bne.n	8004a56 <xTaskCheckForTimeOut+0x1e>
 8004a52:	b672      	cpsid	i
 8004a54:	e7fe      	b.n	8004a54 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 8004a56:	f000 fe43 	bl	80056e0 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004a5a:	4b1d      	ldr	r3, [pc, #116]	; (8004ad0 <xTaskCheckForTimeOut+0x98>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	693a      	ldr	r2, [r7, #16]
 8004a66:	1ad3      	subs	r3, r2, r3
 8004a68:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	3301      	adds	r3, #1
 8004a70:	d102      	bne.n	8004a78 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004a72:	2300      	movs	r3, #0
 8004a74:	617b      	str	r3, [r7, #20]
 8004a76:	e024      	b.n	8004ac2 <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	4b15      	ldr	r3, [pc, #84]	; (8004ad4 <xTaskCheckForTimeOut+0x9c>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d007      	beq.n	8004a94 <xTaskCheckForTimeOut+0x5c>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	693a      	ldr	r2, [r7, #16]
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d302      	bcc.n	8004a94 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	617b      	str	r3, [r7, #20]
 8004a92:	e016      	b.n	8004ac2 <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	68fa      	ldr	r2, [r7, #12]
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d20c      	bcs.n	8004ab8 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	1ad2      	subs	r2, r2, r3
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	0018      	movs	r0, r3
 8004aae:	f7ff ffaf 	bl	8004a10 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	617b      	str	r3, [r7, #20]
 8004ab6:	e004      	b.n	8004ac2 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	2200      	movs	r2, #0
 8004abc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8004ac2:	f000 fe1f 	bl	8005704 <vPortExitCritical>

	return xReturn;
 8004ac6:	697b      	ldr	r3, [r7, #20]
}
 8004ac8:	0018      	movs	r0, r3
 8004aca:	46bd      	mov	sp, r7
 8004acc:	b006      	add	sp, #24
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	20000c34 	.word	0x20000c34
 8004ad4:	20000c48 	.word	0x20000c48

08004ad8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004adc:	4b02      	ldr	r3, [pc, #8]	; (8004ae8 <vTaskMissedYield+0x10>)
 8004ade:	2201      	movs	r2, #1
 8004ae0:	601a      	str	r2, [r3, #0]
}
 8004ae2:	46c0      	nop			; (mov r8, r8)
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	20000c44 	.word	0x20000c44

08004aec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b082      	sub	sp, #8
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004af4:	f000 f84e 	bl	8004b94 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004af8:	4b03      	ldr	r3, [pc, #12]	; (8004b08 <prvIdleTask+0x1c>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d9f9      	bls.n	8004af4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004b00:	f000 fdde 	bl	80056c0 <vPortYield>
		prvCheckTasksWaitingTermination();
 8004b04:	e7f6      	b.n	8004af4 <prvIdleTask+0x8>
 8004b06:	46c0      	nop			; (mov r8, r8)
 8004b08:	20000760 	.word	0x20000760

08004b0c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b082      	sub	sp, #8
 8004b10:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004b12:	2300      	movs	r3, #0
 8004b14:	607b      	str	r3, [r7, #4]
 8004b16:	e00c      	b.n	8004b32 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	0013      	movs	r3, r2
 8004b1c:	009b      	lsls	r3, r3, #2
 8004b1e:	189b      	adds	r3, r3, r2
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	4a14      	ldr	r2, [pc, #80]	; (8004b74 <prvInitialiseTaskLists+0x68>)
 8004b24:	189b      	adds	r3, r3, r2
 8004b26:	0018      	movs	r0, r3
 8004b28:	f7fe fd72 	bl	8003610 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	3301      	adds	r3, #1
 8004b30:	607b      	str	r3, [r7, #4]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2b37      	cmp	r3, #55	; 0x37
 8004b36:	d9ef      	bls.n	8004b18 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004b38:	4b0f      	ldr	r3, [pc, #60]	; (8004b78 <prvInitialiseTaskLists+0x6c>)
 8004b3a:	0018      	movs	r0, r3
 8004b3c:	f7fe fd68 	bl	8003610 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004b40:	4b0e      	ldr	r3, [pc, #56]	; (8004b7c <prvInitialiseTaskLists+0x70>)
 8004b42:	0018      	movs	r0, r3
 8004b44:	f7fe fd64 	bl	8003610 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004b48:	4b0d      	ldr	r3, [pc, #52]	; (8004b80 <prvInitialiseTaskLists+0x74>)
 8004b4a:	0018      	movs	r0, r3
 8004b4c:	f7fe fd60 	bl	8003610 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004b50:	4b0c      	ldr	r3, [pc, #48]	; (8004b84 <prvInitialiseTaskLists+0x78>)
 8004b52:	0018      	movs	r0, r3
 8004b54:	f7fe fd5c 	bl	8003610 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004b58:	4b0b      	ldr	r3, [pc, #44]	; (8004b88 <prvInitialiseTaskLists+0x7c>)
 8004b5a:	0018      	movs	r0, r3
 8004b5c:	f7fe fd58 	bl	8003610 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004b60:	4b0a      	ldr	r3, [pc, #40]	; (8004b8c <prvInitialiseTaskLists+0x80>)
 8004b62:	4a05      	ldr	r2, [pc, #20]	; (8004b78 <prvInitialiseTaskLists+0x6c>)
 8004b64:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004b66:	4b0a      	ldr	r3, [pc, #40]	; (8004b90 <prvInitialiseTaskLists+0x84>)
 8004b68:	4a04      	ldr	r2, [pc, #16]	; (8004b7c <prvInitialiseTaskLists+0x70>)
 8004b6a:	601a      	str	r2, [r3, #0]
}
 8004b6c:	46c0      	nop			; (mov r8, r8)
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	b002      	add	sp, #8
 8004b72:	bd80      	pop	{r7, pc}
 8004b74:	20000760 	.word	0x20000760
 8004b78:	20000bc0 	.word	0x20000bc0
 8004b7c:	20000bd4 	.word	0x20000bd4
 8004b80:	20000bf0 	.word	0x20000bf0
 8004b84:	20000c04 	.word	0x20000c04
 8004b88:	20000c1c 	.word	0x20000c1c
 8004b8c:	20000be8 	.word	0x20000be8
 8004b90:	20000bec 	.word	0x20000bec

08004b94 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b082      	sub	sp, #8
 8004b98:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004b9a:	e01a      	b.n	8004bd2 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8004b9c:	f000 fda0 	bl	80056e0 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004ba0:	4b10      	ldr	r3, [pc, #64]	; (8004be4 <prvCheckTasksWaitingTermination+0x50>)
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	3304      	adds	r3, #4
 8004bac:	0018      	movs	r0, r3
 8004bae:	f7fe fdb0 	bl	8003712 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004bb2:	4b0d      	ldr	r3, [pc, #52]	; (8004be8 <prvCheckTasksWaitingTermination+0x54>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	1e5a      	subs	r2, r3, #1
 8004bb8:	4b0b      	ldr	r3, [pc, #44]	; (8004be8 <prvCheckTasksWaitingTermination+0x54>)
 8004bba:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004bbc:	4b0b      	ldr	r3, [pc, #44]	; (8004bec <prvCheckTasksWaitingTermination+0x58>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	1e5a      	subs	r2, r3, #1
 8004bc2:	4b0a      	ldr	r3, [pc, #40]	; (8004bec <prvCheckTasksWaitingTermination+0x58>)
 8004bc4:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8004bc6:	f000 fd9d 	bl	8005704 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	0018      	movs	r0, r3
 8004bce:	f000 f80f 	bl	8004bf0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004bd2:	4b06      	ldr	r3, [pc, #24]	; (8004bec <prvCheckTasksWaitingTermination+0x58>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d1e0      	bne.n	8004b9c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004bda:	46c0      	nop			; (mov r8, r8)
 8004bdc:	46c0      	nop			; (mov r8, r8)
 8004bde:	46bd      	mov	sp, r7
 8004be0:	b002      	add	sp, #8
 8004be2:	bd80      	pop	{r7, pc}
 8004be4:	20000c04 	.word	0x20000c04
 8004be8:	20000c30 	.word	0x20000c30
 8004bec:	20000c18 	.word	0x20000c18

08004bf0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b082      	sub	sp, #8
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2259      	movs	r2, #89	; 0x59
 8004bfc:	5c9b      	ldrb	r3, [r3, r2]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d109      	bne.n	8004c16 <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c06:	0018      	movs	r0, r3
 8004c08:	f000 fea8 	bl	800595c <vPortFree>
				vPortFree( pxTCB );
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	0018      	movs	r0, r3
 8004c10:	f000 fea4 	bl	800595c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004c14:	e010      	b.n	8004c38 <prvDeleteTCB+0x48>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2259      	movs	r2, #89	; 0x59
 8004c1a:	5c9b      	ldrb	r3, [r3, r2]
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d104      	bne.n	8004c2a <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	0018      	movs	r0, r3
 8004c24:	f000 fe9a 	bl	800595c <vPortFree>
	}
 8004c28:	e006      	b.n	8004c38 <prvDeleteTCB+0x48>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2259      	movs	r2, #89	; 0x59
 8004c2e:	5c9b      	ldrb	r3, [r3, r2]
 8004c30:	2b02      	cmp	r3, #2
 8004c32:	d001      	beq.n	8004c38 <prvDeleteTCB+0x48>
 8004c34:	b672      	cpsid	i
 8004c36:	e7fe      	b.n	8004c36 <prvDeleteTCB+0x46>
	}
 8004c38:	46c0      	nop			; (mov r8, r8)
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	b002      	add	sp, #8
 8004c3e:	bd80      	pop	{r7, pc}

08004c40 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b082      	sub	sp, #8
 8004c44:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c46:	4b0e      	ldr	r3, [pc, #56]	; (8004c80 <prvResetNextTaskUnblockTime+0x40>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d101      	bne.n	8004c54 <prvResetNextTaskUnblockTime+0x14>
 8004c50:	2301      	movs	r3, #1
 8004c52:	e000      	b.n	8004c56 <prvResetNextTaskUnblockTime+0x16>
 8004c54:	2300      	movs	r3, #0
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d004      	beq.n	8004c64 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004c5a:	4b0a      	ldr	r3, [pc, #40]	; (8004c84 <prvResetNextTaskUnblockTime+0x44>)
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	4252      	negs	r2, r2
 8004c60:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004c62:	e008      	b.n	8004c76 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004c64:	4b06      	ldr	r3, [pc, #24]	; (8004c80 <prvResetNextTaskUnblockTime+0x40>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	685a      	ldr	r2, [r3, #4]
 8004c72:	4b04      	ldr	r3, [pc, #16]	; (8004c84 <prvResetNextTaskUnblockTime+0x44>)
 8004c74:	601a      	str	r2, [r3, #0]
}
 8004c76:	46c0      	nop			; (mov r8, r8)
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	b002      	add	sp, #8
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	46c0      	nop			; (mov r8, r8)
 8004c80:	20000be8 	.word	0x20000be8
 8004c84:	20000c50 	.word	0x20000c50

08004c88 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b082      	sub	sp, #8
 8004c8c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004c8e:	4b0a      	ldr	r3, [pc, #40]	; (8004cb8 <xTaskGetSchedulerState+0x30>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d102      	bne.n	8004c9c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004c96:	2301      	movs	r3, #1
 8004c98:	607b      	str	r3, [r7, #4]
 8004c9a:	e008      	b.n	8004cae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c9c:	4b07      	ldr	r3, [pc, #28]	; (8004cbc <xTaskGetSchedulerState+0x34>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d102      	bne.n	8004caa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004ca4:	2302      	movs	r3, #2
 8004ca6:	607b      	str	r3, [r7, #4]
 8004ca8:	e001      	b.n	8004cae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004caa:	2300      	movs	r3, #0
 8004cac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004cae:	687b      	ldr	r3, [r7, #4]
	}
 8004cb0:	0018      	movs	r0, r3
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	b002      	add	sp, #8
 8004cb6:	bd80      	pop	{r7, pc}
 8004cb8:	20000c3c 	.word	0x20000c3c
 8004cbc:	20000c58 	.word	0x20000c58

08004cc0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d056      	beq.n	8004d84 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cda:	4b2d      	ldr	r3, [pc, #180]	; (8004d90 <xTaskPriorityInherit+0xd0>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d246      	bcs.n	8004d72 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	699b      	ldr	r3, [r3, #24]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	db06      	blt.n	8004cfa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004cec:	4b28      	ldr	r3, [pc, #160]	; (8004d90 <xTaskPriorityInherit+0xd0>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf2:	2238      	movs	r2, #56	; 0x38
 8004cf4:	1ad2      	subs	r2, r2, r3
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	6959      	ldr	r1, [r3, #20]
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d02:	0013      	movs	r3, r2
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	189b      	adds	r3, r3, r2
 8004d08:	009b      	lsls	r3, r3, #2
 8004d0a:	4a22      	ldr	r2, [pc, #136]	; (8004d94 <xTaskPriorityInherit+0xd4>)
 8004d0c:	189b      	adds	r3, r3, r2
 8004d0e:	4299      	cmp	r1, r3
 8004d10:	d101      	bne.n	8004d16 <xTaskPriorityInherit+0x56>
 8004d12:	2301      	movs	r3, #1
 8004d14:	e000      	b.n	8004d18 <xTaskPriorityInherit+0x58>
 8004d16:	2300      	movs	r3, #0
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d022      	beq.n	8004d62 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	3304      	adds	r3, #4
 8004d20:	0018      	movs	r0, r3
 8004d22:	f7fe fcf6 	bl	8003712 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004d26:	4b1a      	ldr	r3, [pc, #104]	; (8004d90 <xTaskPriorityInherit+0xd0>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d34:	4b18      	ldr	r3, [pc, #96]	; (8004d98 <xTaskPriorityInherit+0xd8>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d903      	bls.n	8004d44 <xTaskPriorityInherit+0x84>
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d40:	4b15      	ldr	r3, [pc, #84]	; (8004d98 <xTaskPriorityInherit+0xd8>)
 8004d42:	601a      	str	r2, [r3, #0]
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d48:	0013      	movs	r3, r2
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	189b      	adds	r3, r3, r2
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	4a10      	ldr	r2, [pc, #64]	; (8004d94 <xTaskPriorityInherit+0xd4>)
 8004d52:	189a      	adds	r2, r3, r2
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	3304      	adds	r3, #4
 8004d58:	0019      	movs	r1, r3
 8004d5a:	0010      	movs	r0, r2
 8004d5c:	f7fe fc81 	bl	8003662 <vListInsertEnd>
 8004d60:	e004      	b.n	8004d6c <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004d62:	4b0b      	ldr	r3, [pc, #44]	; (8004d90 <xTaskPriorityInherit+0xd0>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	60fb      	str	r3, [r7, #12]
 8004d70:	e008      	b.n	8004d84 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004d76:	4b06      	ldr	r3, [pc, #24]	; (8004d90 <xTaskPriorityInherit+0xd0>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d201      	bcs.n	8004d84 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004d80:	2301      	movs	r3, #1
 8004d82:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004d84:	68fb      	ldr	r3, [r7, #12]
	}
 8004d86:	0018      	movs	r0, r3
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	b004      	add	sp, #16
 8004d8c:	bd80      	pop	{r7, pc}
 8004d8e:	46c0      	nop			; (mov r8, r8)
 8004d90:	2000075c 	.word	0x2000075c
 8004d94:	20000760 	.word	0x20000760
 8004d98:	20000c38 	.word	0x20000c38

08004d9c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004da8:	2300      	movs	r3, #0
 8004daa:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d044      	beq.n	8004e3c <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004db2:	4b25      	ldr	r3, [pc, #148]	; (8004e48 <xTaskPriorityDisinherit+0xac>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	68ba      	ldr	r2, [r7, #8]
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d001      	beq.n	8004dc0 <xTaskPriorityDisinherit+0x24>
 8004dbc:	b672      	cpsid	i
 8004dbe:	e7fe      	b.n	8004dbe <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d101      	bne.n	8004dcc <xTaskPriorityDisinherit+0x30>
 8004dc8:	b672      	cpsid	i
 8004dca:	e7fe      	b.n	8004dca <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dd0:	1e5a      	subs	r2, r3, #1
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d02c      	beq.n	8004e3c <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d128      	bne.n	8004e3c <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	3304      	adds	r3, #4
 8004dee:	0018      	movs	r0, r3
 8004df0:	f7fe fc8f 	bl	8003712 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e00:	2238      	movs	r2, #56	; 0x38
 8004e02:	1ad2      	subs	r2, r2, r3
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e0c:	4b0f      	ldr	r3, [pc, #60]	; (8004e4c <xTaskPriorityDisinherit+0xb0>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d903      	bls.n	8004e1c <xTaskPriorityDisinherit+0x80>
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e18:	4b0c      	ldr	r3, [pc, #48]	; (8004e4c <xTaskPriorityDisinherit+0xb0>)
 8004e1a:	601a      	str	r2, [r3, #0]
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e20:	0013      	movs	r3, r2
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	189b      	adds	r3, r3, r2
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	4a09      	ldr	r2, [pc, #36]	; (8004e50 <xTaskPriorityDisinherit+0xb4>)
 8004e2a:	189a      	adds	r2, r3, r2
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	3304      	adds	r3, #4
 8004e30:	0019      	movs	r1, r3
 8004e32:	0010      	movs	r0, r2
 8004e34:	f7fe fc15 	bl	8003662 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
	}
 8004e3e:	0018      	movs	r0, r3
 8004e40:	46bd      	mov	sp, r7
 8004e42:	b004      	add	sp, #16
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	46c0      	nop			; (mov r8, r8)
 8004e48:	2000075c 	.word	0x2000075c
 8004e4c:	20000c38 	.word	0x20000c38
 8004e50:	20000760 	.word	0x20000760

08004e54 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b086      	sub	sp, #24
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004e62:	2301      	movs	r3, #1
 8004e64:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d05d      	beq.n	8004f28 <vTaskPriorityDisinheritAfterTimeout+0xd4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d101      	bne.n	8004e78 <vTaskPriorityDisinheritAfterTimeout+0x24>
 8004e74:	b672      	cpsid	i
 8004e76:	e7fe      	b.n	8004e76 <vTaskPriorityDisinheritAfterTimeout+0x22>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e7c:	683a      	ldr	r2, [r7, #0]
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d902      	bls.n	8004e88 <vTaskPriorityDisinheritAfterTimeout+0x34>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	617b      	str	r3, [r7, #20]
 8004e86:	e002      	b.n	8004e8e <vTaskPriorityDisinheritAfterTimeout+0x3a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e8c:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e92:	697a      	ldr	r2, [r7, #20]
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d047      	beq.n	8004f28 <vTaskPriorityDisinheritAfterTimeout+0xd4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e9c:	68fa      	ldr	r2, [r7, #12]
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d142      	bne.n	8004f28 <vTaskPriorityDisinheritAfterTimeout+0xd4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004ea2:	4b23      	ldr	r3, [pc, #140]	; (8004f30 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	693a      	ldr	r2, [r7, #16]
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d101      	bne.n	8004eb0 <vTaskPriorityDisinheritAfterTimeout+0x5c>
 8004eac:	b672      	cpsid	i
 8004eae:	e7fe      	b.n	8004eae <vTaskPriorityDisinheritAfterTimeout+0x5a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb4:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	697a      	ldr	r2, [r7, #20]
 8004eba:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	699b      	ldr	r3, [r3, #24]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	db04      	blt.n	8004ece <vTaskPriorityDisinheritAfterTimeout+0x7a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	2238      	movs	r2, #56	; 0x38
 8004ec8:	1ad2      	subs	r2, r2, r3
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	6959      	ldr	r1, [r3, #20]
 8004ed2:	68ba      	ldr	r2, [r7, #8]
 8004ed4:	0013      	movs	r3, r2
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	189b      	adds	r3, r3, r2
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	4a15      	ldr	r2, [pc, #84]	; (8004f34 <vTaskPriorityDisinheritAfterTimeout+0xe0>)
 8004ede:	189b      	adds	r3, r3, r2
 8004ee0:	4299      	cmp	r1, r3
 8004ee2:	d101      	bne.n	8004ee8 <vTaskPriorityDisinheritAfterTimeout+0x94>
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	e000      	b.n	8004eea <vTaskPriorityDisinheritAfterTimeout+0x96>
 8004ee8:	2300      	movs	r3, #0
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d01c      	beq.n	8004f28 <vTaskPriorityDisinheritAfterTimeout+0xd4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	3304      	adds	r3, #4
 8004ef2:	0018      	movs	r0, r3
 8004ef4:	f7fe fc0d 	bl	8003712 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004efc:	4b0e      	ldr	r3, [pc, #56]	; (8004f38 <vTaskPriorityDisinheritAfterTimeout+0xe4>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d903      	bls.n	8004f0c <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f08:	4b0b      	ldr	r3, [pc, #44]	; (8004f38 <vTaskPriorityDisinheritAfterTimeout+0xe4>)
 8004f0a:	601a      	str	r2, [r3, #0]
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f10:	0013      	movs	r3, r2
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	189b      	adds	r3, r3, r2
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	4a06      	ldr	r2, [pc, #24]	; (8004f34 <vTaskPriorityDisinheritAfterTimeout+0xe0>)
 8004f1a:	189a      	adds	r2, r3, r2
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	3304      	adds	r3, #4
 8004f20:	0019      	movs	r1, r3
 8004f22:	0010      	movs	r0, r2
 8004f24:	f7fe fb9d 	bl	8003662 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004f28:	46c0      	nop			; (mov r8, r8)
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	b006      	add	sp, #24
 8004f2e:	bd80      	pop	{r7, pc}
 8004f30:	2000075c 	.word	0x2000075c
 8004f34:	20000760 	.word	0x20000760
 8004f38:	20000c38 	.word	0x20000c38

08004f3c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004f40:	4b06      	ldr	r3, [pc, #24]	; (8004f5c <pvTaskIncrementMutexHeldCount+0x20>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d004      	beq.n	8004f52 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004f48:	4b04      	ldr	r3, [pc, #16]	; (8004f5c <pvTaskIncrementMutexHeldCount+0x20>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004f4e:	3201      	adds	r2, #1
 8004f50:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8004f52:	4b02      	ldr	r3, [pc, #8]	; (8004f5c <pvTaskIncrementMutexHeldCount+0x20>)
 8004f54:	681b      	ldr	r3, [r3, #0]
	}
 8004f56:	0018      	movs	r0, r3
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}
 8004f5c:	2000075c 	.word	0x2000075c

08004f60 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b084      	sub	sp, #16
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004f6a:	4b21      	ldr	r3, [pc, #132]	; (8004ff0 <prvAddCurrentTaskToDelayedList+0x90>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f70:	4b20      	ldr	r3, [pc, #128]	; (8004ff4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	3304      	adds	r3, #4
 8004f76:	0018      	movs	r0, r3
 8004f78:	f7fe fbcb 	bl	8003712 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	3301      	adds	r3, #1
 8004f80:	d10b      	bne.n	8004f9a <prvAddCurrentTaskToDelayedList+0x3a>
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d008      	beq.n	8004f9a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f88:	4b1a      	ldr	r3, [pc, #104]	; (8004ff4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	1d1a      	adds	r2, r3, #4
 8004f8e:	4b1a      	ldr	r3, [pc, #104]	; (8004ff8 <prvAddCurrentTaskToDelayedList+0x98>)
 8004f90:	0011      	movs	r1, r2
 8004f92:	0018      	movs	r0, r3
 8004f94:	f7fe fb65 	bl	8003662 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004f98:	e026      	b.n	8004fe8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004f9a:	68fa      	ldr	r2, [r7, #12]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	18d3      	adds	r3, r2, r3
 8004fa0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004fa2:	4b14      	ldr	r3, [pc, #80]	; (8004ff4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	68ba      	ldr	r2, [r7, #8]
 8004fa8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004faa:	68ba      	ldr	r2, [r7, #8]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d209      	bcs.n	8004fc6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004fb2:	4b12      	ldr	r3, [pc, #72]	; (8004ffc <prvAddCurrentTaskToDelayedList+0x9c>)
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	4b0f      	ldr	r3, [pc, #60]	; (8004ff4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	3304      	adds	r3, #4
 8004fbc:	0019      	movs	r1, r3
 8004fbe:	0010      	movs	r0, r2
 8004fc0:	f7fe fb71 	bl	80036a6 <vListInsert>
}
 8004fc4:	e010      	b.n	8004fe8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004fc6:	4b0e      	ldr	r3, [pc, #56]	; (8005000 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	4b0a      	ldr	r3, [pc, #40]	; (8004ff4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	3304      	adds	r3, #4
 8004fd0:	0019      	movs	r1, r3
 8004fd2:	0010      	movs	r0, r2
 8004fd4:	f7fe fb67 	bl	80036a6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004fd8:	4b0a      	ldr	r3, [pc, #40]	; (8005004 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	68ba      	ldr	r2, [r7, #8]
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d202      	bcs.n	8004fe8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004fe2:	4b08      	ldr	r3, [pc, #32]	; (8005004 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004fe4:	68ba      	ldr	r2, [r7, #8]
 8004fe6:	601a      	str	r2, [r3, #0]
}
 8004fe8:	46c0      	nop			; (mov r8, r8)
 8004fea:	46bd      	mov	sp, r7
 8004fec:	b004      	add	sp, #16
 8004fee:	bd80      	pop	{r7, pc}
 8004ff0:	20000c34 	.word	0x20000c34
 8004ff4:	2000075c 	.word	0x2000075c
 8004ff8:	20000c1c 	.word	0x20000c1c
 8004ffc:	20000bec 	.word	0x20000bec
 8005000:	20000be8 	.word	0x20000be8
 8005004:	20000c50 	.word	0x20000c50

08005008 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005008:	b590      	push	{r4, r7, lr}
 800500a:	b089      	sub	sp, #36	; 0x24
 800500c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800500e:	2300      	movs	r3, #0
 8005010:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005012:	f000 fa87 	bl	8005524 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005016:	4b17      	ldr	r3, [pc, #92]	; (8005074 <xTimerCreateTimerTask+0x6c>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d020      	beq.n	8005060 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800501e:	2300      	movs	r3, #0
 8005020:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005022:	2300      	movs	r3, #0
 8005024:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005026:	003a      	movs	r2, r7
 8005028:	1d39      	adds	r1, r7, #4
 800502a:	2308      	movs	r3, #8
 800502c:	18fb      	adds	r3, r7, r3
 800502e:	0018      	movs	r0, r3
 8005030:	f7fe fad6 	bl	80035e0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005034:	683c      	ldr	r4, [r7, #0]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	68ba      	ldr	r2, [r7, #8]
 800503a:	490f      	ldr	r1, [pc, #60]	; (8005078 <xTimerCreateTimerTask+0x70>)
 800503c:	480f      	ldr	r0, [pc, #60]	; (800507c <xTimerCreateTimerTask+0x74>)
 800503e:	9202      	str	r2, [sp, #8]
 8005040:	9301      	str	r3, [sp, #4]
 8005042:	2302      	movs	r3, #2
 8005044:	9300      	str	r3, [sp, #0]
 8005046:	2300      	movs	r3, #0
 8005048:	0022      	movs	r2, r4
 800504a:	f7ff f8a2 	bl	8004192 <xTaskCreateStatic>
 800504e:	0002      	movs	r2, r0
 8005050:	4b0b      	ldr	r3, [pc, #44]	; (8005080 <xTimerCreateTimerTask+0x78>)
 8005052:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005054:	4b0a      	ldr	r3, [pc, #40]	; (8005080 <xTimerCreateTimerTask+0x78>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d001      	beq.n	8005060 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 800505c:	2301      	movs	r3, #1
 800505e:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d101      	bne.n	800506a <xTimerCreateTimerTask+0x62>
 8005066:	b672      	cpsid	i
 8005068:	e7fe      	b.n	8005068 <xTimerCreateTimerTask+0x60>
	return xReturn;
 800506a:	68fb      	ldr	r3, [r7, #12]
}
 800506c:	0018      	movs	r0, r3
 800506e:	46bd      	mov	sp, r7
 8005070:	b005      	add	sp, #20
 8005072:	bd90      	pop	{r4, r7, pc}
 8005074:	20000c8c 	.word	0x20000c8c
 8005078:	08006830 	.word	0x08006830
 800507c:	08005189 	.word	0x08005189
 8005080:	20000c90 	.word	0x20000c90

08005084 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005084:	b590      	push	{r4, r7, lr}
 8005086:	b08b      	sub	sp, #44	; 0x2c
 8005088:	af00      	add	r7, sp, #0
 800508a:	60f8      	str	r0, [r7, #12]
 800508c:	60b9      	str	r1, [r7, #8]
 800508e:	607a      	str	r2, [r7, #4]
 8005090:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005092:	2300      	movs	r3, #0
 8005094:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d101      	bne.n	80050a0 <xTimerGenericCommand+0x1c>
 800509c:	b672      	cpsid	i
 800509e:	e7fe      	b.n	800509e <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80050a0:	4b1c      	ldr	r3, [pc, #112]	; (8005114 <xTimerGenericCommand+0x90>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d030      	beq.n	800510a <xTimerGenericCommand+0x86>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80050a8:	2414      	movs	r4, #20
 80050aa:	193b      	adds	r3, r7, r4
 80050ac:	68ba      	ldr	r2, [r7, #8]
 80050ae:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80050b0:	193b      	adds	r3, r7, r4
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80050b6:	193b      	adds	r3, r7, r4
 80050b8:	68fa      	ldr	r2, [r7, #12]
 80050ba:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	2b05      	cmp	r3, #5
 80050c0:	dc19      	bgt.n	80050f6 <xTimerGenericCommand+0x72>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80050c2:	f7ff fde1 	bl	8004c88 <xTaskGetSchedulerState>
 80050c6:	0003      	movs	r3, r0
 80050c8:	2b02      	cmp	r3, #2
 80050ca:	d109      	bne.n	80050e0 <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80050cc:	4b11      	ldr	r3, [pc, #68]	; (8005114 <xTimerGenericCommand+0x90>)
 80050ce:	6818      	ldr	r0, [r3, #0]
 80050d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80050d2:	1939      	adds	r1, r7, r4
 80050d4:	2300      	movs	r3, #0
 80050d6:	f7fe fc0a 	bl	80038ee <xQueueGenericSend>
 80050da:	0003      	movs	r3, r0
 80050dc:	627b      	str	r3, [r7, #36]	; 0x24
 80050de:	e014      	b.n	800510a <xTimerGenericCommand+0x86>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80050e0:	4b0c      	ldr	r3, [pc, #48]	; (8005114 <xTimerGenericCommand+0x90>)
 80050e2:	6818      	ldr	r0, [r3, #0]
 80050e4:	2314      	movs	r3, #20
 80050e6:	18f9      	adds	r1, r7, r3
 80050e8:	2300      	movs	r3, #0
 80050ea:	2200      	movs	r2, #0
 80050ec:	f7fe fbff 	bl	80038ee <xQueueGenericSend>
 80050f0:	0003      	movs	r3, r0
 80050f2:	627b      	str	r3, [r7, #36]	; 0x24
 80050f4:	e009      	b.n	800510a <xTimerGenericCommand+0x86>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80050f6:	4b07      	ldr	r3, [pc, #28]	; (8005114 <xTimerGenericCommand+0x90>)
 80050f8:	6818      	ldr	r0, [r3, #0]
 80050fa:	683a      	ldr	r2, [r7, #0]
 80050fc:	2314      	movs	r3, #20
 80050fe:	18f9      	adds	r1, r7, r3
 8005100:	2300      	movs	r3, #0
 8005102:	f7fe fcb8 	bl	8003a76 <xQueueGenericSendFromISR>
 8005106:	0003      	movs	r3, r0
 8005108:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800510a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800510c:	0018      	movs	r0, r3
 800510e:	46bd      	mov	sp, r7
 8005110:	b00b      	add	sp, #44	; 0x2c
 8005112:	bd90      	pop	{r4, r7, pc}
 8005114:	20000c8c 	.word	0x20000c8c

08005118 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b086      	sub	sp, #24
 800511c:	af02      	add	r7, sp, #8
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005122:	4b18      	ldr	r3, [pc, #96]	; (8005184 <prvProcessExpiredTimer+0x6c>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	68db      	ldr	r3, [r3, #12]
 800512a:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	3304      	adds	r3, #4
 8005130:	0018      	movs	r0, r3
 8005132:	f7fe faee 	bl	8003712 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	69db      	ldr	r3, [r3, #28]
 800513a:	2b01      	cmp	r3, #1
 800513c:	d119      	bne.n	8005172 <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	699a      	ldr	r2, [r3, #24]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	18d1      	adds	r1, r2, r3
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	683a      	ldr	r2, [r7, #0]
 800514a:	68f8      	ldr	r0, [r7, #12]
 800514c:	f000 f8b6 	bl	80052bc <prvInsertTimerInActiveList>
 8005150:	1e03      	subs	r3, r0, #0
 8005152:	d00e      	beq.n	8005172 <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	68f8      	ldr	r0, [r7, #12]
 8005158:	2300      	movs	r3, #0
 800515a:	9300      	str	r3, [sp, #0]
 800515c:	2300      	movs	r3, #0
 800515e:	2100      	movs	r1, #0
 8005160:	f7ff ff90 	bl	8005084 <xTimerGenericCommand>
 8005164:	0003      	movs	r3, r0
 8005166:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d101      	bne.n	8005172 <prvProcessExpiredTimer+0x5a>
 800516e:	b672      	cpsid	i
 8005170:	e7fe      	b.n	8005170 <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005176:	68fa      	ldr	r2, [r7, #12]
 8005178:	0010      	movs	r0, r2
 800517a:	4798      	blx	r3
}
 800517c:	46c0      	nop			; (mov r8, r8)
 800517e:	46bd      	mov	sp, r7
 8005180:	b004      	add	sp, #16
 8005182:	bd80      	pop	{r7, pc}
 8005184:	20000c84 	.word	0x20000c84

08005188 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b084      	sub	sp, #16
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005190:	2308      	movs	r3, #8
 8005192:	18fb      	adds	r3, r7, r3
 8005194:	0018      	movs	r0, r3
 8005196:	f000 f851 	bl	800523c <prvGetNextExpireTime>
 800519a:	0003      	movs	r3, r0
 800519c:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800519e:	68ba      	ldr	r2, [r7, #8]
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	0011      	movs	r1, r2
 80051a4:	0018      	movs	r0, r3
 80051a6:	f000 f803 	bl	80051b0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80051aa:	f000 f8c9 	bl	8005340 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80051ae:	e7ef      	b.n	8005190 <prvTimerTask+0x8>

080051b0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b084      	sub	sp, #16
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80051ba:	f7ff f9dd 	bl	8004578 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80051be:	2308      	movs	r3, #8
 80051c0:	18fb      	adds	r3, r7, r3
 80051c2:	0018      	movs	r0, r3
 80051c4:	f000 f85a 	bl	800527c <prvSampleTimeNow>
 80051c8:	0003      	movs	r3, r0
 80051ca:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d129      	bne.n	8005226 <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d10c      	bne.n	80051f2 <prvProcessTimerOrBlockTask+0x42>
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	429a      	cmp	r2, r3
 80051de:	d808      	bhi.n	80051f2 <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 80051e0:	f7ff f9d6 	bl	8004590 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80051e4:	68fa      	ldr	r2, [r7, #12]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	0011      	movs	r1, r2
 80051ea:	0018      	movs	r0, r3
 80051ec:	f7ff ff94 	bl	8005118 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80051f0:	e01b      	b.n	800522a <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d006      	beq.n	8005206 <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80051f8:	4b0e      	ldr	r3, [pc, #56]	; (8005234 <prvProcessTimerOrBlockTask+0x84>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	425a      	negs	r2, r3
 8005200:	4153      	adcs	r3, r2
 8005202:	b2db      	uxtb	r3, r3
 8005204:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005206:	4b0c      	ldr	r3, [pc, #48]	; (8005238 <prvProcessTimerOrBlockTask+0x88>)
 8005208:	6818      	ldr	r0, [r3, #0]
 800520a:	687a      	ldr	r2, [r7, #4]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	1ad3      	subs	r3, r2, r3
 8005210:	683a      	ldr	r2, [r7, #0]
 8005212:	0019      	movs	r1, r3
 8005214:	f7fe ff8a 	bl	800412c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005218:	f7ff f9ba 	bl	8004590 <xTaskResumeAll>
 800521c:	1e03      	subs	r3, r0, #0
 800521e:	d104      	bne.n	800522a <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 8005220:	f000 fa4e 	bl	80056c0 <vPortYield>
}
 8005224:	e001      	b.n	800522a <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 8005226:	f7ff f9b3 	bl	8004590 <xTaskResumeAll>
}
 800522a:	46c0      	nop			; (mov r8, r8)
 800522c:	46bd      	mov	sp, r7
 800522e:	b004      	add	sp, #16
 8005230:	bd80      	pop	{r7, pc}
 8005232:	46c0      	nop			; (mov r8, r8)
 8005234:	20000c88 	.word	0x20000c88
 8005238:	20000c8c 	.word	0x20000c8c

0800523c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b084      	sub	sp, #16
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005244:	4b0c      	ldr	r3, [pc, #48]	; (8005278 <prvGetNextExpireTime+0x3c>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	425a      	negs	r2, r3
 800524c:	4153      	adcs	r3, r2
 800524e:	b2db      	uxtb	r3, r3
 8005250:	001a      	movs	r2, r3
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d105      	bne.n	800526a <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800525e:	4b06      	ldr	r3, [pc, #24]	; (8005278 <prvGetNextExpireTime+0x3c>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	60fb      	str	r3, [r7, #12]
 8005268:	e001      	b.n	800526e <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800526a:	2300      	movs	r3, #0
 800526c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800526e:	68fb      	ldr	r3, [r7, #12]
}
 8005270:	0018      	movs	r0, r3
 8005272:	46bd      	mov	sp, r7
 8005274:	b004      	add	sp, #16
 8005276:	bd80      	pop	{r7, pc}
 8005278:	20000c84 	.word	0x20000c84

0800527c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b084      	sub	sp, #16
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005284:	f7ff fa10 	bl	80046a8 <xTaskGetTickCount>
 8005288:	0003      	movs	r3, r0
 800528a:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 800528c:	4b0a      	ldr	r3, [pc, #40]	; (80052b8 <prvSampleTimeNow+0x3c>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	68fa      	ldr	r2, [r7, #12]
 8005292:	429a      	cmp	r2, r3
 8005294:	d205      	bcs.n	80052a2 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 8005296:	f000 f8eb 	bl	8005470 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2201      	movs	r2, #1
 800529e:	601a      	str	r2, [r3, #0]
 80052a0:	e002      	b.n	80052a8 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2200      	movs	r2, #0
 80052a6:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80052a8:	4b03      	ldr	r3, [pc, #12]	; (80052b8 <prvSampleTimeNow+0x3c>)
 80052aa:	68fa      	ldr	r2, [r7, #12]
 80052ac:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 80052ae:	68fb      	ldr	r3, [r7, #12]
}
 80052b0:	0018      	movs	r0, r3
 80052b2:	46bd      	mov	sp, r7
 80052b4:	b004      	add	sp, #16
 80052b6:	bd80      	pop	{r7, pc}
 80052b8:	20000c94 	.word	0x20000c94

080052bc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b086      	sub	sp, #24
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	60f8      	str	r0, [r7, #12]
 80052c4:	60b9      	str	r1, [r7, #8]
 80052c6:	607a      	str	r2, [r7, #4]
 80052c8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80052ca:	2300      	movs	r3, #0
 80052cc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	68ba      	ldr	r2, [r7, #8]
 80052d2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	68fa      	ldr	r2, [r7, #12]
 80052d8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80052da:	68ba      	ldr	r2, [r7, #8]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	429a      	cmp	r2, r3
 80052e0:	d812      	bhi.n	8005308 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	1ad2      	subs	r2, r2, r3
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	699b      	ldr	r3, [r3, #24]
 80052ec:	429a      	cmp	r2, r3
 80052ee:	d302      	bcc.n	80052f6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80052f0:	2301      	movs	r3, #1
 80052f2:	617b      	str	r3, [r7, #20]
 80052f4:	e01b      	b.n	800532e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80052f6:	4b10      	ldr	r3, [pc, #64]	; (8005338 <prvInsertTimerInActiveList+0x7c>)
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	3304      	adds	r3, #4
 80052fe:	0019      	movs	r1, r3
 8005300:	0010      	movs	r0, r2
 8005302:	f7fe f9d0 	bl	80036a6 <vListInsert>
 8005306:	e012      	b.n	800532e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	429a      	cmp	r2, r3
 800530e:	d206      	bcs.n	800531e <prvInsertTimerInActiveList+0x62>
 8005310:	68ba      	ldr	r2, [r7, #8]
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	429a      	cmp	r2, r3
 8005316:	d302      	bcc.n	800531e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005318:	2301      	movs	r3, #1
 800531a:	617b      	str	r3, [r7, #20]
 800531c:	e007      	b.n	800532e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800531e:	4b07      	ldr	r3, [pc, #28]	; (800533c <prvInsertTimerInActiveList+0x80>)
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	3304      	adds	r3, #4
 8005326:	0019      	movs	r1, r3
 8005328:	0010      	movs	r0, r2
 800532a:	f7fe f9bc 	bl	80036a6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800532e:	697b      	ldr	r3, [r7, #20]
}
 8005330:	0018      	movs	r0, r3
 8005332:	46bd      	mov	sp, r7
 8005334:	b006      	add	sp, #24
 8005336:	bd80      	pop	{r7, pc}
 8005338:	20000c88 	.word	0x20000c88
 800533c:	20000c84 	.word	0x20000c84

08005340 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005340:	b590      	push	{r4, r7, lr}
 8005342:	b08d      	sub	sp, #52	; 0x34
 8005344:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005346:	e07f      	b.n	8005448 <prvProcessReceivedCommands+0x108>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005348:	2208      	movs	r2, #8
 800534a:	18bb      	adds	r3, r7, r2
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	2b00      	cmp	r3, #0
 8005350:	da0f      	bge.n	8005372 <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005352:	18bb      	adds	r3, r7, r2
 8005354:	3304      	adds	r3, #4
 8005356:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535a:	2b00      	cmp	r3, #0
 800535c:	d101      	bne.n	8005362 <prvProcessReceivedCommands+0x22>
 800535e:	b672      	cpsid	i
 8005360:	e7fe      	b.n	8005360 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005368:	6858      	ldr	r0, [r3, #4]
 800536a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	0019      	movs	r1, r3
 8005370:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005372:	2208      	movs	r2, #8
 8005374:	18bb      	adds	r3, r7, r2
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	2b00      	cmp	r3, #0
 800537a:	db64      	blt.n	8005446 <prvProcessReceivedCommands+0x106>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800537c:	18bb      	adds	r3, r7, r2
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005382:	6a3b      	ldr	r3, [r7, #32]
 8005384:	695b      	ldr	r3, [r3, #20]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d004      	beq.n	8005394 <prvProcessReceivedCommands+0x54>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800538a:	6a3b      	ldr	r3, [r7, #32]
 800538c:	3304      	adds	r3, #4
 800538e:	0018      	movs	r0, r3
 8005390:	f7fe f9bf 	bl	8003712 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005394:	1d3b      	adds	r3, r7, #4
 8005396:	0018      	movs	r0, r3
 8005398:	f7ff ff70 	bl	800527c <prvSampleTimeNow>
 800539c:	0003      	movs	r3, r0
 800539e:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 80053a0:	2308      	movs	r3, #8
 80053a2:	18fb      	adds	r3, r7, r3
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	2b09      	cmp	r3, #9
 80053a8:	d84e      	bhi.n	8005448 <prvProcessReceivedCommands+0x108>
 80053aa:	009a      	lsls	r2, r3, #2
 80053ac:	4b2e      	ldr	r3, [pc, #184]	; (8005468 <prvProcessReceivedCommands+0x128>)
 80053ae:	18d3      	adds	r3, r2, r3
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80053b4:	2408      	movs	r4, #8
 80053b6:	193b      	adds	r3, r7, r4
 80053b8:	685a      	ldr	r2, [r3, #4]
 80053ba:	6a3b      	ldr	r3, [r7, #32]
 80053bc:	699b      	ldr	r3, [r3, #24]
 80053be:	18d1      	adds	r1, r2, r3
 80053c0:	193b      	adds	r3, r7, r4
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	69fa      	ldr	r2, [r7, #28]
 80053c6:	6a38      	ldr	r0, [r7, #32]
 80053c8:	f7ff ff78 	bl	80052bc <prvInsertTimerInActiveList>
 80053cc:	1e03      	subs	r3, r0, #0
 80053ce:	d03b      	beq.n	8005448 <prvProcessReceivedCommands+0x108>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80053d0:	6a3b      	ldr	r3, [r7, #32]
 80053d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d4:	6a3a      	ldr	r2, [r7, #32]
 80053d6:	0010      	movs	r0, r2
 80053d8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80053da:	6a3b      	ldr	r3, [r7, #32]
 80053dc:	69db      	ldr	r3, [r3, #28]
 80053de:	2b01      	cmp	r3, #1
 80053e0:	d132      	bne.n	8005448 <prvProcessReceivedCommands+0x108>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80053e2:	193b      	adds	r3, r7, r4
 80053e4:	685a      	ldr	r2, [r3, #4]
 80053e6:	6a3b      	ldr	r3, [r7, #32]
 80053e8:	699b      	ldr	r3, [r3, #24]
 80053ea:	18d2      	adds	r2, r2, r3
 80053ec:	6a38      	ldr	r0, [r7, #32]
 80053ee:	2300      	movs	r3, #0
 80053f0:	9300      	str	r3, [sp, #0]
 80053f2:	2300      	movs	r3, #0
 80053f4:	2100      	movs	r1, #0
 80053f6:	f7ff fe45 	bl	8005084 <xTimerGenericCommand>
 80053fa:	0003      	movs	r3, r0
 80053fc:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 80053fe:	69bb      	ldr	r3, [r7, #24]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d121      	bne.n	8005448 <prvProcessReceivedCommands+0x108>
 8005404:	b672      	cpsid	i
 8005406:	e7fe      	b.n	8005406 <prvProcessReceivedCommands+0xc6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005408:	2308      	movs	r3, #8
 800540a:	18fb      	adds	r3, r7, r3
 800540c:	685a      	ldr	r2, [r3, #4]
 800540e:	6a3b      	ldr	r3, [r7, #32]
 8005410:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005412:	6a3b      	ldr	r3, [r7, #32]
 8005414:	699b      	ldr	r3, [r3, #24]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d101      	bne.n	800541e <prvProcessReceivedCommands+0xde>
 800541a:	b672      	cpsid	i
 800541c:	e7fe      	b.n	800541c <prvProcessReceivedCommands+0xdc>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800541e:	6a3b      	ldr	r3, [r7, #32]
 8005420:	699a      	ldr	r2, [r3, #24]
 8005422:	69fb      	ldr	r3, [r7, #28]
 8005424:	18d1      	adds	r1, r2, r3
 8005426:	69fb      	ldr	r3, [r7, #28]
 8005428:	69fa      	ldr	r2, [r7, #28]
 800542a:	6a38      	ldr	r0, [r7, #32]
 800542c:	f7ff ff46 	bl	80052bc <prvInsertTimerInActiveList>
					break;
 8005430:	e00a      	b.n	8005448 <prvProcessReceivedCommands+0x108>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005432:	6a3b      	ldr	r3, [r7, #32]
 8005434:	222c      	movs	r2, #44	; 0x2c
 8005436:	5c9b      	ldrb	r3, [r3, r2]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d105      	bne.n	8005448 <prvProcessReceivedCommands+0x108>
						{
							vPortFree( pxTimer );
 800543c:	6a3b      	ldr	r3, [r7, #32]
 800543e:	0018      	movs	r0, r3
 8005440:	f000 fa8c 	bl	800595c <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005444:	e000      	b.n	8005448 <prvProcessReceivedCommands+0x108>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005446:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005448:	4b08      	ldr	r3, [pc, #32]	; (800546c <prvProcessReceivedCommands+0x12c>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	2208      	movs	r2, #8
 800544e:	18b9      	adds	r1, r7, r2
 8005450:	2200      	movs	r2, #0
 8005452:	0018      	movs	r0, r3
 8005454:	f7fe fb80 	bl	8003b58 <xQueueReceive>
 8005458:	1e03      	subs	r3, r0, #0
 800545a:	d000      	beq.n	800545e <prvProcessReceivedCommands+0x11e>
 800545c:	e774      	b.n	8005348 <prvProcessReceivedCommands+0x8>
	}
}
 800545e:	46c0      	nop			; (mov r8, r8)
 8005460:	46c0      	nop			; (mov r8, r8)
 8005462:	46bd      	mov	sp, r7
 8005464:	b00b      	add	sp, #44	; 0x2c
 8005466:	bd90      	pop	{r4, r7, pc}
 8005468:	08006874 	.word	0x08006874
 800546c:	20000c8c 	.word	0x20000c8c

08005470 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b088      	sub	sp, #32
 8005474:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005476:	e03e      	b.n	80054f6 <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005478:	4b28      	ldr	r3, [pc, #160]	; (800551c <prvSwitchTimerLists+0xac>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	68db      	ldr	r3, [r3, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005482:	4b26      	ldr	r3, [pc, #152]	; (800551c <prvSwitchTimerLists+0xac>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	68db      	ldr	r3, [r3, #12]
 800548a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	3304      	adds	r3, #4
 8005490:	0018      	movs	r0, r3
 8005492:	f7fe f93e 	bl	8003712 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549a:	68fa      	ldr	r2, [r7, #12]
 800549c:	0010      	movs	r0, r2
 800549e:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	69db      	ldr	r3, [r3, #28]
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d126      	bne.n	80054f6 <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	699b      	ldr	r3, [r3, #24]
 80054ac:	693a      	ldr	r2, [r7, #16]
 80054ae:	18d3      	adds	r3, r2, r3
 80054b0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80054b2:	68ba      	ldr	r2, [r7, #8]
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d90e      	bls.n	80054d8 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	68ba      	ldr	r2, [r7, #8]
 80054be:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	68fa      	ldr	r2, [r7, #12]
 80054c4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80054c6:	4b15      	ldr	r3, [pc, #84]	; (800551c <prvSwitchTimerLists+0xac>)
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	3304      	adds	r3, #4
 80054ce:	0019      	movs	r1, r3
 80054d0:	0010      	movs	r0, r2
 80054d2:	f7fe f8e8 	bl	80036a6 <vListInsert>
 80054d6:	e00e      	b.n	80054f6 <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80054d8:	693a      	ldr	r2, [r7, #16]
 80054da:	68f8      	ldr	r0, [r7, #12]
 80054dc:	2300      	movs	r3, #0
 80054de:	9300      	str	r3, [sp, #0]
 80054e0:	2300      	movs	r3, #0
 80054e2:	2100      	movs	r1, #0
 80054e4:	f7ff fdce 	bl	8005084 <xTimerGenericCommand>
 80054e8:	0003      	movs	r3, r0
 80054ea:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d101      	bne.n	80054f6 <prvSwitchTimerLists+0x86>
 80054f2:	b672      	cpsid	i
 80054f4:	e7fe      	b.n	80054f4 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80054f6:	4b09      	ldr	r3, [pc, #36]	; (800551c <prvSwitchTimerLists+0xac>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d1bb      	bne.n	8005478 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005500:	4b06      	ldr	r3, [pc, #24]	; (800551c <prvSwitchTimerLists+0xac>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005506:	4b06      	ldr	r3, [pc, #24]	; (8005520 <prvSwitchTimerLists+0xb0>)
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	4b04      	ldr	r3, [pc, #16]	; (800551c <prvSwitchTimerLists+0xac>)
 800550c:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 800550e:	4b04      	ldr	r3, [pc, #16]	; (8005520 <prvSwitchTimerLists+0xb0>)
 8005510:	697a      	ldr	r2, [r7, #20]
 8005512:	601a      	str	r2, [r3, #0]
}
 8005514:	46c0      	nop			; (mov r8, r8)
 8005516:	46bd      	mov	sp, r7
 8005518:	b006      	add	sp, #24
 800551a:	bd80      	pop	{r7, pc}
 800551c:	20000c84 	.word	0x20000c84
 8005520:	20000c88 	.word	0x20000c88

08005524 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b082      	sub	sp, #8
 8005528:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800552a:	f000 f8d9 	bl	80056e0 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800552e:	4b16      	ldr	r3, [pc, #88]	; (8005588 <prvCheckForValidListAndQueue+0x64>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d123      	bne.n	800557e <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 8005536:	4b15      	ldr	r3, [pc, #84]	; (800558c <prvCheckForValidListAndQueue+0x68>)
 8005538:	0018      	movs	r0, r3
 800553a:	f7fe f869 	bl	8003610 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800553e:	4b14      	ldr	r3, [pc, #80]	; (8005590 <prvCheckForValidListAndQueue+0x6c>)
 8005540:	0018      	movs	r0, r3
 8005542:	f7fe f865 	bl	8003610 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005546:	4b13      	ldr	r3, [pc, #76]	; (8005594 <prvCheckForValidListAndQueue+0x70>)
 8005548:	4a10      	ldr	r2, [pc, #64]	; (800558c <prvCheckForValidListAndQueue+0x68>)
 800554a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800554c:	4b12      	ldr	r3, [pc, #72]	; (8005598 <prvCheckForValidListAndQueue+0x74>)
 800554e:	4a10      	ldr	r2, [pc, #64]	; (8005590 <prvCheckForValidListAndQueue+0x6c>)
 8005550:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005552:	4b12      	ldr	r3, [pc, #72]	; (800559c <prvCheckForValidListAndQueue+0x78>)
 8005554:	4a12      	ldr	r2, [pc, #72]	; (80055a0 <prvCheckForValidListAndQueue+0x7c>)
 8005556:	2100      	movs	r1, #0
 8005558:	9100      	str	r1, [sp, #0]
 800555a:	2110      	movs	r1, #16
 800555c:	200a      	movs	r0, #10
 800555e:	f7fe f954 	bl	800380a <xQueueGenericCreateStatic>
 8005562:	0002      	movs	r2, r0
 8005564:	4b08      	ldr	r3, [pc, #32]	; (8005588 <prvCheckForValidListAndQueue+0x64>)
 8005566:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005568:	4b07      	ldr	r3, [pc, #28]	; (8005588 <prvCheckForValidListAndQueue+0x64>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d006      	beq.n	800557e <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005570:	4b05      	ldr	r3, [pc, #20]	; (8005588 <prvCheckForValidListAndQueue+0x64>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a0b      	ldr	r2, [pc, #44]	; (80055a4 <prvCheckForValidListAndQueue+0x80>)
 8005576:	0011      	movs	r1, r2
 8005578:	0018      	movs	r0, r3
 800557a:	f7fe fdaf 	bl	80040dc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800557e:	f000 f8c1 	bl	8005704 <vPortExitCritical>
}
 8005582:	46c0      	nop			; (mov r8, r8)
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}
 8005588:	20000c8c 	.word	0x20000c8c
 800558c:	20000c5c 	.word	0x20000c5c
 8005590:	20000c70 	.word	0x20000c70
 8005594:	20000c84 	.word	0x20000c84
 8005598:	20000c88 	.word	0x20000c88
 800559c:	20000d38 	.word	0x20000d38
 80055a0:	20000c98 	.word	0x20000c98
 80055a4:	08006838 	.word	0x08006838

080055a8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b084      	sub	sp, #16
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	3b04      	subs	r3, #4
 80055b8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2280      	movs	r2, #128	; 0x80
 80055be:	0452      	lsls	r2, r2, #17
 80055c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	3b04      	subs	r3, #4
 80055c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 80055c8:	68ba      	ldr	r2, [r7, #8]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	3b04      	subs	r3, #4
 80055d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80055d4:	4a08      	ldr	r2, [pc, #32]	; (80055f8 <pxPortInitialiseStack+0x50>)
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	3b14      	subs	r3, #20
 80055de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	3b20      	subs	r3, #32
 80055ea:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80055ec:	68fb      	ldr	r3, [r7, #12]
}
 80055ee:	0018      	movs	r0, r3
 80055f0:	46bd      	mov	sp, r7
 80055f2:	b004      	add	sp, #16
 80055f4:	bd80      	pop	{r7, pc}
 80055f6:	46c0      	nop			; (mov r8, r8)
 80055f8:	080055fd 	.word	0x080055fd

080055fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b082      	sub	sp, #8
 8005600:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005602:	2300      	movs	r3, #0
 8005604:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005606:	4b08      	ldr	r3, [pc, #32]	; (8005628 <prvTaskExitError+0x2c>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	3301      	adds	r3, #1
 800560c:	d001      	beq.n	8005612 <prvTaskExitError+0x16>
 800560e:	b672      	cpsid	i
 8005610:	e7fe      	b.n	8005610 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8005612:	b672      	cpsid	i
	while( ulDummy == 0 )
 8005614:	46c0      	nop			; (mov r8, r8)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d0fc      	beq.n	8005616 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800561c:	46c0      	nop			; (mov r8, r8)
 800561e:	46c0      	nop			; (mov r8, r8)
 8005620:	46bd      	mov	sp, r7
 8005622:	b002      	add	sp, #8
 8005624:	bd80      	pop	{r7, pc}
 8005626:	46c0      	nop			; (mov r8, r8)
 8005628:	2000000c 	.word	0x2000000c

0800562c <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 800562c:	b580      	push	{r7, lr}
 800562e:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8005630:	46c0      	nop			; (mov r8, r8)
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}
	...

08005640 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8005640:	4a0b      	ldr	r2, [pc, #44]	; (8005670 <pxCurrentTCBConst2>)
 8005642:	6813      	ldr	r3, [r2, #0]
 8005644:	6818      	ldr	r0, [r3, #0]
 8005646:	3020      	adds	r0, #32
 8005648:	f380 8809 	msr	PSP, r0
 800564c:	2002      	movs	r0, #2
 800564e:	f380 8814 	msr	CONTROL, r0
 8005652:	f3bf 8f6f 	isb	sy
 8005656:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8005658:	46ae      	mov	lr, r5
 800565a:	bc08      	pop	{r3}
 800565c:	bc04      	pop	{r2}
 800565e:	b662      	cpsie	i
 8005660:	4718      	bx	r3
 8005662:	46c0      	nop			; (mov r8, r8)
 8005664:	46c0      	nop			; (mov r8, r8)
 8005666:	46c0      	nop			; (mov r8, r8)
 8005668:	46c0      	nop			; (mov r8, r8)
 800566a:	46c0      	nop			; (mov r8, r8)
 800566c:	46c0      	nop			; (mov r8, r8)
 800566e:	46c0      	nop			; (mov r8, r8)

08005670 <pxCurrentTCBConst2>:
 8005670:	2000075c 	.word	0x2000075c
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8005674:	46c0      	nop			; (mov r8, r8)
 8005676:	46c0      	nop			; (mov r8, r8)

08005678 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005678:	b580      	push	{r7, lr}
 800567a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800567c:	4b0e      	ldr	r3, [pc, #56]	; (80056b8 <xPortStartScheduler+0x40>)
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	4b0d      	ldr	r3, [pc, #52]	; (80056b8 <xPortStartScheduler+0x40>)
 8005682:	21ff      	movs	r1, #255	; 0xff
 8005684:	0409      	lsls	r1, r1, #16
 8005686:	430a      	orrs	r2, r1
 8005688:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800568a:	4b0b      	ldr	r3, [pc, #44]	; (80056b8 <xPortStartScheduler+0x40>)
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	4b0a      	ldr	r3, [pc, #40]	; (80056b8 <xPortStartScheduler+0x40>)
 8005690:	21ff      	movs	r1, #255	; 0xff
 8005692:	0609      	lsls	r1, r1, #24
 8005694:	430a      	orrs	r2, r1
 8005696:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8005698:	f000 f898 	bl	80057cc <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800569c:	4b07      	ldr	r3, [pc, #28]	; (80056bc <xPortStartScheduler+0x44>)
 800569e:	2200      	movs	r2, #0
 80056a0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 80056a2:	f7ff ffcd 	bl	8005640 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80056a6:	f7ff f8c1 	bl	800482c <vTaskSwitchContext>
	prvTaskExitError();
 80056aa:	f7ff ffa7 	bl	80055fc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80056ae:	2300      	movs	r3, #0
}
 80056b0:	0018      	movs	r0, r3
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	46c0      	nop			; (mov r8, r8)
 80056b8:	e000ed20 	.word	0xe000ed20
 80056bc:	2000000c 	.word	0x2000000c

080056c0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 80056c4:	4b05      	ldr	r3, [pc, #20]	; (80056dc <vPortYield+0x1c>)
 80056c6:	2280      	movs	r2, #128	; 0x80
 80056c8:	0552      	lsls	r2, r2, #21
 80056ca:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 80056cc:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80056d0:	f3bf 8f6f 	isb	sy
}
 80056d4:	46c0      	nop			; (mov r8, r8)
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}
 80056da:	46c0      	nop			; (mov r8, r8)
 80056dc:	e000ed04 	.word	0xe000ed04

080056e0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 80056e4:	b672      	cpsid	i
    uxCriticalNesting++;
 80056e6:	4b06      	ldr	r3, [pc, #24]	; (8005700 <vPortEnterCritical+0x20>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	1c5a      	adds	r2, r3, #1
 80056ec:	4b04      	ldr	r3, [pc, #16]	; (8005700 <vPortEnterCritical+0x20>)
 80056ee:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 80056f0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80056f4:	f3bf 8f6f 	isb	sy
}
 80056f8:	46c0      	nop			; (mov r8, r8)
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}
 80056fe:	46c0      	nop			; (mov r8, r8)
 8005700:	2000000c 	.word	0x2000000c

08005704 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005704:	b580      	push	{r7, lr}
 8005706:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005708:	4b09      	ldr	r3, [pc, #36]	; (8005730 <vPortExitCritical+0x2c>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d101      	bne.n	8005714 <vPortExitCritical+0x10>
 8005710:	b672      	cpsid	i
 8005712:	e7fe      	b.n	8005712 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8005714:	4b06      	ldr	r3, [pc, #24]	; (8005730 <vPortExitCritical+0x2c>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	1e5a      	subs	r2, r3, #1
 800571a:	4b05      	ldr	r3, [pc, #20]	; (8005730 <vPortExitCritical+0x2c>)
 800571c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 800571e:	4b04      	ldr	r3, [pc, #16]	; (8005730 <vPortExitCritical+0x2c>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d100      	bne.n	8005728 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8005726:	b662      	cpsie	i
    }
}
 8005728:	46c0      	nop			; (mov r8, r8)
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
 800572e:	46c0      	nop			; (mov r8, r8)
 8005730:	2000000c 	.word	0x2000000c

08005734 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8005734:	f3ef 8010 	mrs	r0, PRIMASK
 8005738:	b672      	cpsid	i
 800573a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 800573c:	46c0      	nop			; (mov r8, r8)
 800573e:	0018      	movs	r0, r3

08005740 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8005740:	f380 8810 	msr	PRIMASK, r0
 8005744:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8005746:	46c0      	nop			; (mov r8, r8)
	...

08005750 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005750:	f3ef 8009 	mrs	r0, PSP
 8005754:	4b0e      	ldr	r3, [pc, #56]	; (8005790 <pxCurrentTCBConst>)
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	3820      	subs	r0, #32
 800575a:	6010      	str	r0, [r2, #0]
 800575c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800575e:	4644      	mov	r4, r8
 8005760:	464d      	mov	r5, r9
 8005762:	4656      	mov	r6, sl
 8005764:	465f      	mov	r7, fp
 8005766:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8005768:	b508      	push	{r3, lr}
 800576a:	b672      	cpsid	i
 800576c:	f7ff f85e 	bl	800482c <vTaskSwitchContext>
 8005770:	b662      	cpsie	i
 8005772:	bc0c      	pop	{r2, r3}
 8005774:	6811      	ldr	r1, [r2, #0]
 8005776:	6808      	ldr	r0, [r1, #0]
 8005778:	3010      	adds	r0, #16
 800577a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800577c:	46a0      	mov	r8, r4
 800577e:	46a9      	mov	r9, r5
 8005780:	46b2      	mov	sl, r6
 8005782:	46bb      	mov	fp, r7
 8005784:	f380 8809 	msr	PSP, r0
 8005788:	3820      	subs	r0, #32
 800578a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800578c:	4718      	bx	r3
 800578e:	46c0      	nop			; (mov r8, r8)

08005790 <pxCurrentTCBConst>:
 8005790:	2000075c 	.word	0x2000075c
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8005794:	46c0      	nop			; (mov r8, r8)
 8005796:	46c0      	nop			; (mov r8, r8)

08005798 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b082      	sub	sp, #8
 800579c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800579e:	f7ff ffc9 	bl	8005734 <ulSetInterruptMaskFromISR>
 80057a2:	0003      	movs	r3, r0
 80057a4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80057a6:	f7fe ff8d 	bl	80046c4 <xTaskIncrementTick>
 80057aa:	1e03      	subs	r3, r0, #0
 80057ac:	d003      	beq.n	80057b6 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 80057ae:	4b06      	ldr	r3, [pc, #24]	; (80057c8 <xPortSysTickHandler+0x30>)
 80057b0:	2280      	movs	r2, #128	; 0x80
 80057b2:	0552      	lsls	r2, r2, #21
 80057b4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	0018      	movs	r0, r3
 80057ba:	f7ff ffc1 	bl	8005740 <vClearInterruptMaskFromISR>
}
 80057be:	46c0      	nop			; (mov r8, r8)
 80057c0:	46bd      	mov	sp, r7
 80057c2:	b002      	add	sp, #8
 80057c4:	bd80      	pop	{r7, pc}
 80057c6:	46c0      	nop			; (mov r8, r8)
 80057c8:	e000ed04 	.word	0xe000ed04

080057cc <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 80057d0:	4b0b      	ldr	r3, [pc, #44]	; (8005800 <prvSetupTimerInterrupt+0x34>)
 80057d2:	2200      	movs	r2, #0
 80057d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 80057d6:	4b0b      	ldr	r3, [pc, #44]	; (8005804 <prvSetupTimerInterrupt+0x38>)
 80057d8:	2200      	movs	r2, #0
 80057da:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80057dc:	4b0a      	ldr	r3, [pc, #40]	; (8005808 <prvSetupTimerInterrupt+0x3c>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	22fa      	movs	r2, #250	; 0xfa
 80057e2:	0091      	lsls	r1, r2, #2
 80057e4:	0018      	movs	r0, r3
 80057e6:	f7fa fc99 	bl	800011c <__udivsi3>
 80057ea:	0003      	movs	r3, r0
 80057ec:	001a      	movs	r2, r3
 80057ee:	4b07      	ldr	r3, [pc, #28]	; (800580c <prvSetupTimerInterrupt+0x40>)
 80057f0:	3a01      	subs	r2, #1
 80057f2:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 80057f4:	4b02      	ldr	r3, [pc, #8]	; (8005800 <prvSetupTimerInterrupt+0x34>)
 80057f6:	2207      	movs	r2, #7
 80057f8:	601a      	str	r2, [r3, #0]
}
 80057fa:	46c0      	nop			; (mov r8, r8)
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}
 8005800:	e000e010 	.word	0xe000e010
 8005804:	e000e018 	.word	0xe000e018
 8005808:	20000000 	.word	0x20000000
 800580c:	e000e014 	.word	0xe000e014

08005810 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b086      	sub	sp, #24
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005818:	2300      	movs	r3, #0
 800581a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800581c:	f7fe feac 	bl	8004578 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005820:	4b49      	ldr	r3, [pc, #292]	; (8005948 <pvPortMalloc+0x138>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d101      	bne.n	800582c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005828:	f000 f8e0 	bl	80059ec <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800582c:	4b47      	ldr	r3, [pc, #284]	; (800594c <pvPortMalloc+0x13c>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	4013      	ands	r3, r2
 8005834:	d000      	beq.n	8005838 <pvPortMalloc+0x28>
 8005836:	e079      	b.n	800592c <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d012      	beq.n	8005864 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 800583e:	2208      	movs	r2, #8
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	189b      	adds	r3, r3, r2
 8005844:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2207      	movs	r2, #7
 800584a:	4013      	ands	r3, r2
 800584c:	d00a      	beq.n	8005864 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2207      	movs	r2, #7
 8005852:	4393      	bics	r3, r2
 8005854:	3308      	adds	r3, #8
 8005856:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2207      	movs	r2, #7
 800585c:	4013      	ands	r3, r2
 800585e:	d001      	beq.n	8005864 <pvPortMalloc+0x54>
 8005860:	b672      	cpsid	i
 8005862:	e7fe      	b.n	8005862 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d060      	beq.n	800592c <pvPortMalloc+0x11c>
 800586a:	4b39      	ldr	r3, [pc, #228]	; (8005950 <pvPortMalloc+0x140>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	687a      	ldr	r2, [r7, #4]
 8005870:	429a      	cmp	r2, r3
 8005872:	d85b      	bhi.n	800592c <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005874:	4b37      	ldr	r3, [pc, #220]	; (8005954 <pvPortMalloc+0x144>)
 8005876:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8005878:	4b36      	ldr	r3, [pc, #216]	; (8005954 <pvPortMalloc+0x144>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800587e:	e004      	b.n	800588a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	429a      	cmp	r2, r3
 8005892:	d903      	bls.n	800589c <pvPortMalloc+0x8c>
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d1f1      	bne.n	8005880 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800589c:	4b2a      	ldr	r3, [pc, #168]	; (8005948 <pvPortMalloc+0x138>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	697a      	ldr	r2, [r7, #20]
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d042      	beq.n	800592c <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	2208      	movs	r2, #8
 80058ac:	189b      	adds	r3, r3, r2
 80058ae:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	685a      	ldr	r2, [r3, #4]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	1ad2      	subs	r2, r2, r3
 80058c0:	2308      	movs	r3, #8
 80058c2:	005b      	lsls	r3, r3, #1
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d916      	bls.n	80058f6 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80058c8:	697a      	ldr	r2, [r7, #20]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	18d3      	adds	r3, r2, r3
 80058ce:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	2207      	movs	r2, #7
 80058d4:	4013      	ands	r3, r2
 80058d6:	d001      	beq.n	80058dc <pvPortMalloc+0xcc>
 80058d8:	b672      	cpsid	i
 80058da:	e7fe      	b.n	80058da <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	685a      	ldr	r2, [r3, #4]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	1ad2      	subs	r2, r2, r3
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	0018      	movs	r0, r3
 80058f2:	f000 f8db 	bl	8005aac <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80058f6:	4b16      	ldr	r3, [pc, #88]	; (8005950 <pvPortMalloc+0x140>)
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	1ad2      	subs	r2, r2, r3
 8005900:	4b13      	ldr	r3, [pc, #76]	; (8005950 <pvPortMalloc+0x140>)
 8005902:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005904:	4b12      	ldr	r3, [pc, #72]	; (8005950 <pvPortMalloc+0x140>)
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	4b13      	ldr	r3, [pc, #76]	; (8005958 <pvPortMalloc+0x148>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	429a      	cmp	r2, r3
 800590e:	d203      	bcs.n	8005918 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005910:	4b0f      	ldr	r3, [pc, #60]	; (8005950 <pvPortMalloc+0x140>)
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	4b10      	ldr	r3, [pc, #64]	; (8005958 <pvPortMalloc+0x148>)
 8005916:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	685a      	ldr	r2, [r3, #4]
 800591c:	4b0b      	ldr	r3, [pc, #44]	; (800594c <pvPortMalloc+0x13c>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	431a      	orrs	r2, r3
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	2200      	movs	r2, #0
 800592a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800592c:	f7fe fe30 	bl	8004590 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2207      	movs	r2, #7
 8005934:	4013      	ands	r3, r2
 8005936:	d001      	beq.n	800593c <pvPortMalloc+0x12c>
 8005938:	b672      	cpsid	i
 800593a:	e7fe      	b.n	800593a <pvPortMalloc+0x12a>
	return pvReturn;
 800593c:	68fb      	ldr	r3, [r7, #12]
}
 800593e:	0018      	movs	r0, r3
 8005940:	46bd      	mov	sp, r7
 8005942:	b006      	add	sp, #24
 8005944:	bd80      	pop	{r7, pc}
 8005946:	46c0      	nop			; (mov r8, r8)
 8005948:	20001990 	.word	0x20001990
 800594c:	2000199c 	.word	0x2000199c
 8005950:	20001994 	.word	0x20001994
 8005954:	20001988 	.word	0x20001988
 8005958:	20001998 	.word	0x20001998

0800595c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b084      	sub	sp, #16
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d035      	beq.n	80059da <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800596e:	2308      	movs	r3, #8
 8005970:	425b      	negs	r3, r3
 8005972:	68fa      	ldr	r2, [r7, #12]
 8005974:	18d3      	adds	r3, r2, r3
 8005976:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	685a      	ldr	r2, [r3, #4]
 8005980:	4b18      	ldr	r3, [pc, #96]	; (80059e4 <vPortFree+0x88>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4013      	ands	r3, r2
 8005986:	d101      	bne.n	800598c <vPortFree+0x30>
 8005988:	b672      	cpsid	i
 800598a:	e7fe      	b.n	800598a <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d001      	beq.n	8005998 <vPortFree+0x3c>
 8005994:	b672      	cpsid	i
 8005996:	e7fe      	b.n	8005996 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	685a      	ldr	r2, [r3, #4]
 800599c:	4b11      	ldr	r3, [pc, #68]	; (80059e4 <vPortFree+0x88>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4013      	ands	r3, r2
 80059a2:	d01a      	beq.n	80059da <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d116      	bne.n	80059da <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	685a      	ldr	r2, [r3, #4]
 80059b0:	4b0c      	ldr	r3, [pc, #48]	; (80059e4 <vPortFree+0x88>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	43db      	mvns	r3, r3
 80059b6:	401a      	ands	r2, r3
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80059bc:	f7fe fddc 	bl	8004578 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	685a      	ldr	r2, [r3, #4]
 80059c4:	4b08      	ldr	r3, [pc, #32]	; (80059e8 <vPortFree+0x8c>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	18d2      	adds	r2, r2, r3
 80059ca:	4b07      	ldr	r3, [pc, #28]	; (80059e8 <vPortFree+0x8c>)
 80059cc:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	0018      	movs	r0, r3
 80059d2:	f000 f86b 	bl	8005aac <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80059d6:	f7fe fddb 	bl	8004590 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80059da:	46c0      	nop			; (mov r8, r8)
 80059dc:	46bd      	mov	sp, r7
 80059de:	b004      	add	sp, #16
 80059e0:	bd80      	pop	{r7, pc}
 80059e2:	46c0      	nop			; (mov r8, r8)
 80059e4:	2000199c 	.word	0x2000199c
 80059e8:	20001994 	.word	0x20001994

080059ec <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b084      	sub	sp, #16
 80059f0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80059f2:	23c0      	movs	r3, #192	; 0xc0
 80059f4:	011b      	lsls	r3, r3, #4
 80059f6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80059f8:	4b26      	ldr	r3, [pc, #152]	; (8005a94 <prvHeapInit+0xa8>)
 80059fa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2207      	movs	r2, #7
 8005a00:	4013      	ands	r3, r2
 8005a02:	d00c      	beq.n	8005a1e <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	3307      	adds	r3, #7
 8005a08:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2207      	movs	r2, #7
 8005a0e:	4393      	bics	r3, r2
 8005a10:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005a12:	68ba      	ldr	r2, [r7, #8]
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	1ad2      	subs	r2, r2, r3
 8005a18:	4b1e      	ldr	r3, [pc, #120]	; (8005a94 <prvHeapInit+0xa8>)
 8005a1a:	18d3      	adds	r3, r2, r3
 8005a1c:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005a22:	4b1d      	ldr	r3, [pc, #116]	; (8005a98 <prvHeapInit+0xac>)
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005a28:	4b1b      	ldr	r3, [pc, #108]	; (8005a98 <prvHeapInit+0xac>)
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	68ba      	ldr	r2, [r7, #8]
 8005a32:	18d3      	adds	r3, r2, r3
 8005a34:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005a36:	2208      	movs	r2, #8
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	1a9b      	subs	r3, r3, r2
 8005a3c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2207      	movs	r2, #7
 8005a42:	4393      	bics	r3, r2
 8005a44:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005a46:	68fa      	ldr	r2, [r7, #12]
 8005a48:	4b14      	ldr	r3, [pc, #80]	; (8005a9c <prvHeapInit+0xb0>)
 8005a4a:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8005a4c:	4b13      	ldr	r3, [pc, #76]	; (8005a9c <prvHeapInit+0xb0>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	2200      	movs	r2, #0
 8005a52:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005a54:	4b11      	ldr	r3, [pc, #68]	; (8005a9c <prvHeapInit+0xb0>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	68fa      	ldr	r2, [r7, #12]
 8005a64:	1ad2      	subs	r2, r2, r3
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005a6a:	4b0c      	ldr	r3, [pc, #48]	; (8005a9c <prvHeapInit+0xb0>)
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	685a      	ldr	r2, [r3, #4]
 8005a76:	4b0a      	ldr	r3, [pc, #40]	; (8005aa0 <prvHeapInit+0xb4>)
 8005a78:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	685a      	ldr	r2, [r3, #4]
 8005a7e:	4b09      	ldr	r3, [pc, #36]	; (8005aa4 <prvHeapInit+0xb8>)
 8005a80:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005a82:	4b09      	ldr	r3, [pc, #36]	; (8005aa8 <prvHeapInit+0xbc>)
 8005a84:	2280      	movs	r2, #128	; 0x80
 8005a86:	0612      	lsls	r2, r2, #24
 8005a88:	601a      	str	r2, [r3, #0]
}
 8005a8a:	46c0      	nop			; (mov r8, r8)
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	b004      	add	sp, #16
 8005a90:	bd80      	pop	{r7, pc}
 8005a92:	46c0      	nop			; (mov r8, r8)
 8005a94:	20000d88 	.word	0x20000d88
 8005a98:	20001988 	.word	0x20001988
 8005a9c:	20001990 	.word	0x20001990
 8005aa0:	20001998 	.word	0x20001998
 8005aa4:	20001994 	.word	0x20001994
 8005aa8:	2000199c 	.word	0x2000199c

08005aac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b084      	sub	sp, #16
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005ab4:	4b27      	ldr	r3, [pc, #156]	; (8005b54 <prvInsertBlockIntoFreeList+0xa8>)
 8005ab6:	60fb      	str	r3, [r7, #12]
 8005ab8:	e002      	b.n	8005ac0 <prvInsertBlockIntoFreeList+0x14>
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	60fb      	str	r3, [r7, #12]
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	687a      	ldr	r2, [r7, #4]
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d8f7      	bhi.n	8005aba <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	68ba      	ldr	r2, [r7, #8]
 8005ad4:	18d3      	adds	r3, r2, r3
 8005ad6:	687a      	ldr	r2, [r7, #4]
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	d108      	bne.n	8005aee <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	685a      	ldr	r2, [r3, #4]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	18d2      	adds	r2, r2, r3
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	68ba      	ldr	r2, [r7, #8]
 8005af8:	18d2      	adds	r2, r2, r3
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d118      	bne.n	8005b34 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	4b14      	ldr	r3, [pc, #80]	; (8005b58 <prvInsertBlockIntoFreeList+0xac>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d00d      	beq.n	8005b2a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	685a      	ldr	r2, [r3, #4]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	18d2      	adds	r2, r2, r3
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	681a      	ldr	r2, [r3, #0]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	601a      	str	r2, [r3, #0]
 8005b28:	e008      	b.n	8005b3c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005b2a:	4b0b      	ldr	r3, [pc, #44]	; (8005b58 <prvInsertBlockIntoFreeList+0xac>)
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	601a      	str	r2, [r3, #0]
 8005b32:	e003      	b.n	8005b3c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005b3c:	68fa      	ldr	r2, [r7, #12]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d002      	beq.n	8005b4a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	687a      	ldr	r2, [r7, #4]
 8005b48:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b4a:	46c0      	nop			; (mov r8, r8)
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	b004      	add	sp, #16
 8005b50:	bd80      	pop	{r7, pc}
 8005b52:	46c0      	nop			; (mov r8, r8)
 8005b54:	20001988 	.word	0x20001988
 8005b58:	20001990 	.word	0x20001990

08005b5c <ssd1306_WriteCommand>:
void ssd1306_Reset(void) {
    /* for I2C - do nothing */
}

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b082      	sub	sp, #8
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	0002      	movs	r2, r0
 8005b64:	1dfb      	adds	r3, r7, #7
 8005b66:	701a      	strb	r2, [r3, #0]
    //HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
}
 8005b68:	46c0      	nop			; (mov r8, r8)
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	b002      	add	sp, #8
 8005b6e:	bd80      	pop	{r7, pc}

08005b70 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b082      	sub	sp, #8
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	6039      	str	r1, [r7, #0]
    //HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
}
 8005b7a:	46c0      	nop			; (mov r8, r8)
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	b002      	add	sp, #8
 8005b80:	bd80      	pop	{r7, pc}
	...

08005b84 <ssd1306_UpdateScreen>:
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
    }
}

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b082      	sub	sp, #8
 8005b88:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8005b8a:	1dfb      	adds	r3, r7, #7
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	701a      	strb	r2, [r3, #0]
 8005b90:	e01a      	b.n	8005bc8 <ssd1306_UpdateScreen+0x44>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8005b92:	1dfb      	adds	r3, r7, #7
 8005b94:	781b      	ldrb	r3, [r3, #0]
 8005b96:	3b50      	subs	r3, #80	; 0x50
 8005b98:	b2db      	uxtb	r3, r3
 8005b9a:	0018      	movs	r0, r3
 8005b9c:	f7ff ffde 	bl	8005b5c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8005ba0:	2000      	movs	r0, #0
 8005ba2:	f7ff ffdb 	bl	8005b5c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8005ba6:	2010      	movs	r0, #16
 8005ba8:	f7ff ffd8 	bl	8005b5c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8005bac:	1dfb      	adds	r3, r7, #7
 8005bae:	781b      	ldrb	r3, [r3, #0]
 8005bb0:	01da      	lsls	r2, r3, #7
 8005bb2:	4b0a      	ldr	r3, [pc, #40]	; (8005bdc <ssd1306_UpdateScreen+0x58>)
 8005bb4:	18d3      	adds	r3, r2, r3
 8005bb6:	2180      	movs	r1, #128	; 0x80
 8005bb8:	0018      	movs	r0, r3
 8005bba:	f7ff ffd9 	bl	8005b70 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8005bbe:	1dfb      	adds	r3, r7, #7
 8005bc0:	781a      	ldrb	r2, [r3, #0]
 8005bc2:	1dfb      	adds	r3, r7, #7
 8005bc4:	3201      	adds	r2, #1
 8005bc6:	701a      	strb	r2, [r3, #0]
 8005bc8:	1dfb      	adds	r3, r7, #7
 8005bca:	781b      	ldrb	r3, [r3, #0]
 8005bcc:	2b0f      	cmp	r3, #15
 8005bce:	d9e0      	bls.n	8005b92 <ssd1306_UpdateScreen+0xe>
    }
}
 8005bd0:	46c0      	nop			; (mov r8, r8)
 8005bd2:	46c0      	nop			; (mov r8, r8)
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	b002      	add	sp, #8
 8005bd8:	bd80      	pop	{r7, pc}
 8005bda:	46c0      	nop			; (mov r8, r8)
 8005bdc:	200019a0 	.word	0x200019a0

08005be0 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8005be0:	b590      	push	{r4, r7, lr}
 8005be2:	b083      	sub	sp, #12
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	0004      	movs	r4, r0
 8005be8:	0008      	movs	r0, r1
 8005bea:	0011      	movs	r1, r2
 8005bec:	1dfb      	adds	r3, r7, #7
 8005bee:	1c22      	adds	r2, r4, #0
 8005bf0:	701a      	strb	r2, [r3, #0]
 8005bf2:	1dbb      	adds	r3, r7, #6
 8005bf4:	1c02      	adds	r2, r0, #0
 8005bf6:	701a      	strb	r2, [r3, #0]
 8005bf8:	1d7b      	adds	r3, r7, #5
 8005bfa:	1c0a      	adds	r2, r1, #0
 8005bfc:	701a      	strb	r2, [r3, #0]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8005bfe:	1dfb      	adds	r3, r7, #7
 8005c00:	781b      	ldrb	r3, [r3, #0]
 8005c02:	b25b      	sxtb	r3, r3
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	db47      	blt.n	8005c98 <ssd1306_DrawPixel+0xb8>
 8005c08:	1dbb      	adds	r3, r7, #6
 8005c0a:	781b      	ldrb	r3, [r3, #0]
 8005c0c:	2b81      	cmp	r3, #129	; 0x81
 8005c0e:	d843      	bhi.n	8005c98 <ssd1306_DrawPixel+0xb8>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8005c10:	1d7b      	adds	r3, r7, #5
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d11e      	bne.n	8005c56 <ssd1306_DrawPixel+0x76>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8005c18:	1dfb      	adds	r3, r7, #7
 8005c1a:	781a      	ldrb	r2, [r3, #0]
 8005c1c:	1dbb      	adds	r3, r7, #6
 8005c1e:	781b      	ldrb	r3, [r3, #0]
 8005c20:	08db      	lsrs	r3, r3, #3
 8005c22:	b2d8      	uxtb	r0, r3
 8005c24:	0003      	movs	r3, r0
 8005c26:	01db      	lsls	r3, r3, #7
 8005c28:	18d3      	adds	r3, r2, r3
 8005c2a:	4a1d      	ldr	r2, [pc, #116]	; (8005ca0 <ssd1306_DrawPixel+0xc0>)
 8005c2c:	5cd3      	ldrb	r3, [r2, r3]
 8005c2e:	b25a      	sxtb	r2, r3
 8005c30:	1dbb      	adds	r3, r7, #6
 8005c32:	781b      	ldrb	r3, [r3, #0]
 8005c34:	2107      	movs	r1, #7
 8005c36:	400b      	ands	r3, r1
 8005c38:	2101      	movs	r1, #1
 8005c3a:	4099      	lsls	r1, r3
 8005c3c:	000b      	movs	r3, r1
 8005c3e:	b25b      	sxtb	r3, r3
 8005c40:	4313      	orrs	r3, r2
 8005c42:	b259      	sxtb	r1, r3
 8005c44:	1dfb      	adds	r3, r7, #7
 8005c46:	781a      	ldrb	r2, [r3, #0]
 8005c48:	0003      	movs	r3, r0
 8005c4a:	01db      	lsls	r3, r3, #7
 8005c4c:	18d3      	adds	r3, r2, r3
 8005c4e:	b2c9      	uxtb	r1, r1
 8005c50:	4a13      	ldr	r2, [pc, #76]	; (8005ca0 <ssd1306_DrawPixel+0xc0>)
 8005c52:	54d1      	strb	r1, [r2, r3]
 8005c54:	e021      	b.n	8005c9a <ssd1306_DrawPixel+0xba>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8005c56:	1dfb      	adds	r3, r7, #7
 8005c58:	781a      	ldrb	r2, [r3, #0]
 8005c5a:	1dbb      	adds	r3, r7, #6
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	08db      	lsrs	r3, r3, #3
 8005c60:	b2d8      	uxtb	r0, r3
 8005c62:	0003      	movs	r3, r0
 8005c64:	01db      	lsls	r3, r3, #7
 8005c66:	18d3      	adds	r3, r2, r3
 8005c68:	4a0d      	ldr	r2, [pc, #52]	; (8005ca0 <ssd1306_DrawPixel+0xc0>)
 8005c6a:	5cd3      	ldrb	r3, [r2, r3]
 8005c6c:	b25b      	sxtb	r3, r3
 8005c6e:	1dba      	adds	r2, r7, #6
 8005c70:	7812      	ldrb	r2, [r2, #0]
 8005c72:	2107      	movs	r1, #7
 8005c74:	400a      	ands	r2, r1
 8005c76:	2101      	movs	r1, #1
 8005c78:	4091      	lsls	r1, r2
 8005c7a:	000a      	movs	r2, r1
 8005c7c:	b252      	sxtb	r2, r2
 8005c7e:	43d2      	mvns	r2, r2
 8005c80:	b252      	sxtb	r2, r2
 8005c82:	4013      	ands	r3, r2
 8005c84:	b259      	sxtb	r1, r3
 8005c86:	1dfb      	adds	r3, r7, #7
 8005c88:	781a      	ldrb	r2, [r3, #0]
 8005c8a:	0003      	movs	r3, r0
 8005c8c:	01db      	lsls	r3, r3, #7
 8005c8e:	18d3      	adds	r3, r2, r3
 8005c90:	b2c9      	uxtb	r1, r1
 8005c92:	4a03      	ldr	r2, [pc, #12]	; (8005ca0 <ssd1306_DrawPixel+0xc0>)
 8005c94:	54d1      	strb	r1, [r2, r3]
 8005c96:	e000      	b.n	8005c9a <ssd1306_DrawPixel+0xba>
        return;
 8005c98:	46c0      	nop			; (mov r8, r8)
    }
}
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	b003      	add	sp, #12
 8005c9e:	bd90      	pop	{r4, r7, pc}
 8005ca0:	200019a0 	.word	0x200019a0

08005ca4 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8005ca4:	b590      	push	{r4, r7, lr}
 8005ca6:	b089      	sub	sp, #36	; 0x24
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	0004      	movs	r4, r0
 8005cac:	1d38      	adds	r0, r7, #4
 8005cae:	6001      	str	r1, [r0, #0]
 8005cb0:	6042      	str	r2, [r0, #4]
 8005cb2:	0019      	movs	r1, r3
 8005cb4:	200f      	movs	r0, #15
 8005cb6:	183b      	adds	r3, r7, r0
 8005cb8:	1c22      	adds	r2, r4, #0
 8005cba:	701a      	strb	r2, [r3, #0]
 8005cbc:	230e      	movs	r3, #14
 8005cbe:	18fb      	adds	r3, r7, r3
 8005cc0:	1c0a      	adds	r2, r1, #0
 8005cc2:	701a      	strb	r2, [r3, #0]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8005cc4:	183b      	adds	r3, r7, r0
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	2b1f      	cmp	r3, #31
 8005cca:	d903      	bls.n	8005cd4 <ssd1306_WriteChar+0x30>
 8005ccc:	183b      	adds	r3, r7, r0
 8005cce:	781b      	ldrb	r3, [r3, #0]
 8005cd0:	2b7e      	cmp	r3, #126	; 0x7e
 8005cd2:	d901      	bls.n	8005cd8 <ssd1306_WriteChar+0x34>
        return 0;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	e078      	b.n	8005dca <ssd1306_WriteChar+0x126>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8005cd8:	4b3e      	ldr	r3, [pc, #248]	; (8005dd4 <ssd1306_WriteChar+0x130>)
 8005cda:	881b      	ldrh	r3, [r3, #0]
 8005cdc:	001a      	movs	r2, r3
 8005cde:	1d3b      	adds	r3, r7, #4
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	18d3      	adds	r3, r2, r3
 8005ce4:	2b80      	cmp	r3, #128	; 0x80
 8005ce6:	dc07      	bgt.n	8005cf8 <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8005ce8:	4b3a      	ldr	r3, [pc, #232]	; (8005dd4 <ssd1306_WriteChar+0x130>)
 8005cea:	885b      	ldrh	r3, [r3, #2]
 8005cec:	001a      	movs	r2, r3
 8005cee:	1d3b      	adds	r3, r7, #4
 8005cf0:	785b      	ldrb	r3, [r3, #1]
 8005cf2:	18d3      	adds	r3, r2, r3
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8005cf4:	2b82      	cmp	r3, #130	; 0x82
 8005cf6:	dd01      	ble.n	8005cfc <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	e066      	b.n	8005dca <ssd1306_WriteChar+0x126>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	61fb      	str	r3, [r7, #28]
 8005d00:	e051      	b.n	8005da6 <ssd1306_WriteChar+0x102>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8005d02:	1d3b      	adds	r3, r7, #4
 8005d04:	685a      	ldr	r2, [r3, #4]
 8005d06:	230f      	movs	r3, #15
 8005d08:	18fb      	adds	r3, r7, r3
 8005d0a:	781b      	ldrb	r3, [r3, #0]
 8005d0c:	3b20      	subs	r3, #32
 8005d0e:	1d39      	adds	r1, r7, #4
 8005d10:	7849      	ldrb	r1, [r1, #1]
 8005d12:	434b      	muls	r3, r1
 8005d14:	0019      	movs	r1, r3
 8005d16:	69fb      	ldr	r3, [r7, #28]
 8005d18:	18cb      	adds	r3, r1, r3
 8005d1a:	005b      	lsls	r3, r3, #1
 8005d1c:	18d3      	adds	r3, r2, r3
 8005d1e:	881b      	ldrh	r3, [r3, #0]
 8005d20:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8005d22:	2300      	movs	r3, #0
 8005d24:	61bb      	str	r3, [r7, #24]
 8005d26:	e035      	b.n	8005d94 <ssd1306_WriteChar+0xf0>
            if((b << j) & 0x8000)  {
 8005d28:	697a      	ldr	r2, [r7, #20]
 8005d2a:	69bb      	ldr	r3, [r7, #24]
 8005d2c:	409a      	lsls	r2, r3
 8005d2e:	2380      	movs	r3, #128	; 0x80
 8005d30:	021b      	lsls	r3, r3, #8
 8005d32:	4013      	ands	r3, r2
 8005d34:	d014      	beq.n	8005d60 <ssd1306_WriteChar+0xbc>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8005d36:	4b27      	ldr	r3, [pc, #156]	; (8005dd4 <ssd1306_WriteChar+0x130>)
 8005d38:	881b      	ldrh	r3, [r3, #0]
 8005d3a:	b2da      	uxtb	r2, r3
 8005d3c:	69bb      	ldr	r3, [r7, #24]
 8005d3e:	b2db      	uxtb	r3, r3
 8005d40:	18d3      	adds	r3, r2, r3
 8005d42:	b2d8      	uxtb	r0, r3
 8005d44:	4b23      	ldr	r3, [pc, #140]	; (8005dd4 <ssd1306_WriteChar+0x130>)
 8005d46:	885b      	ldrh	r3, [r3, #2]
 8005d48:	b2da      	uxtb	r2, r3
 8005d4a:	69fb      	ldr	r3, [r7, #28]
 8005d4c:	b2db      	uxtb	r3, r3
 8005d4e:	18d3      	adds	r3, r2, r3
 8005d50:	b2d9      	uxtb	r1, r3
 8005d52:	230e      	movs	r3, #14
 8005d54:	18fb      	adds	r3, r7, r3
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	001a      	movs	r2, r3
 8005d5a:	f7ff ff41 	bl	8005be0 <ssd1306_DrawPixel>
 8005d5e:	e016      	b.n	8005d8e <ssd1306_WriteChar+0xea>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8005d60:	4b1c      	ldr	r3, [pc, #112]	; (8005dd4 <ssd1306_WriteChar+0x130>)
 8005d62:	881b      	ldrh	r3, [r3, #0]
 8005d64:	b2da      	uxtb	r2, r3
 8005d66:	69bb      	ldr	r3, [r7, #24]
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	18d3      	adds	r3, r2, r3
 8005d6c:	b2d8      	uxtb	r0, r3
 8005d6e:	4b19      	ldr	r3, [pc, #100]	; (8005dd4 <ssd1306_WriteChar+0x130>)
 8005d70:	885b      	ldrh	r3, [r3, #2]
 8005d72:	b2da      	uxtb	r2, r3
 8005d74:	69fb      	ldr	r3, [r7, #28]
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	18d3      	adds	r3, r2, r3
 8005d7a:	b2d9      	uxtb	r1, r3
 8005d7c:	230e      	movs	r3, #14
 8005d7e:	18fb      	adds	r3, r7, r3
 8005d80:	781b      	ldrb	r3, [r3, #0]
 8005d82:	425a      	negs	r2, r3
 8005d84:	4153      	adcs	r3, r2
 8005d86:	b2db      	uxtb	r3, r3
 8005d88:	001a      	movs	r2, r3
 8005d8a:	f7ff ff29 	bl	8005be0 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8005d8e:	69bb      	ldr	r3, [r7, #24]
 8005d90:	3301      	adds	r3, #1
 8005d92:	61bb      	str	r3, [r7, #24]
 8005d94:	1d3b      	adds	r3, r7, #4
 8005d96:	781b      	ldrb	r3, [r3, #0]
 8005d98:	001a      	movs	r2, r3
 8005d9a:	69bb      	ldr	r3, [r7, #24]
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d3c3      	bcc.n	8005d28 <ssd1306_WriteChar+0x84>
    for(i = 0; i < Font.FontHeight; i++) {
 8005da0:	69fb      	ldr	r3, [r7, #28]
 8005da2:	3301      	adds	r3, #1
 8005da4:	61fb      	str	r3, [r7, #28]
 8005da6:	1d3b      	adds	r3, r7, #4
 8005da8:	785b      	ldrb	r3, [r3, #1]
 8005daa:	001a      	movs	r2, r3
 8005dac:	69fb      	ldr	r3, [r7, #28]
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d3a7      	bcc.n	8005d02 <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8005db2:	4b08      	ldr	r3, [pc, #32]	; (8005dd4 <ssd1306_WriteChar+0x130>)
 8005db4:	881a      	ldrh	r2, [r3, #0]
 8005db6:	1d3b      	adds	r3, r7, #4
 8005db8:	781b      	ldrb	r3, [r3, #0]
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	18d3      	adds	r3, r2, r3
 8005dbe:	b29a      	uxth	r2, r3
 8005dc0:	4b04      	ldr	r3, [pc, #16]	; (8005dd4 <ssd1306_WriteChar+0x130>)
 8005dc2:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8005dc4:	230f      	movs	r3, #15
 8005dc6:	18fb      	adds	r3, r7, r3
 8005dc8:	781b      	ldrb	r3, [r3, #0]
}
 8005dca:	0018      	movs	r0, r3
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	b009      	add	sp, #36	; 0x24
 8005dd0:	bd90      	pop	{r4, r7, pc}
 8005dd2:	46c0      	nop			; (mov r8, r8)
 8005dd4:	200021c0 	.word	0x200021c0

08005dd8 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b084      	sub	sp, #16
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	60f8      	str	r0, [r7, #12]
 8005de0:	1d38      	adds	r0, r7, #4
 8005de2:	6001      	str	r1, [r0, #0]
 8005de4:	6042      	str	r2, [r0, #4]
 8005de6:	001a      	movs	r2, r3
 8005de8:	1cfb      	adds	r3, r7, #3
 8005dea:	701a      	strb	r2, [r3, #0]
    // Write until null-byte
    while (*str) {
 8005dec:	e014      	b.n	8005e18 <ssd1306_WriteString+0x40>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	7818      	ldrb	r0, [r3, #0]
 8005df2:	1cfb      	adds	r3, r7, #3
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	1d3a      	adds	r2, r7, #4
 8005df8:	6811      	ldr	r1, [r2, #0]
 8005dfa:	6852      	ldr	r2, [r2, #4]
 8005dfc:	f7ff ff52 	bl	8005ca4 <ssd1306_WriteChar>
 8005e00:	0003      	movs	r3, r0
 8005e02:	001a      	movs	r2, r3
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	781b      	ldrb	r3, [r3, #0]
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d002      	beq.n	8005e12 <ssd1306_WriteString+0x3a>
            // Char could not be written
            return *str;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	e008      	b.n	8005e24 <ssd1306_WriteString+0x4c>
        }
        
        // Next char
        str++;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	3301      	adds	r3, #1
 8005e16:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	781b      	ldrb	r3, [r3, #0]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d1e6      	bne.n	8005dee <ssd1306_WriteString+0x16>
    }
    
    // Everything ok
    return *str;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	781b      	ldrb	r3, [r3, #0]
}
 8005e24:	0018      	movs	r0, r3
 8005e26:	46bd      	mov	sp, r7
 8005e28:	b004      	add	sp, #16
 8005e2a:	bd80      	pop	{r7, pc}

08005e2c <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b082      	sub	sp, #8
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	0002      	movs	r2, r0
 8005e34:	1dfb      	adds	r3, r7, #7
 8005e36:	701a      	strb	r2, [r3, #0]
 8005e38:	1dbb      	adds	r3, r7, #6
 8005e3a:	1c0a      	adds	r2, r1, #0
 8005e3c:	701a      	strb	r2, [r3, #0]
    SSD1306.CurrentX = x;
 8005e3e:	1dfb      	adds	r3, r7, #7
 8005e40:	781b      	ldrb	r3, [r3, #0]
 8005e42:	b29a      	uxth	r2, r3
 8005e44:	4b05      	ldr	r3, [pc, #20]	; (8005e5c <ssd1306_SetCursor+0x30>)
 8005e46:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8005e48:	1dbb      	adds	r3, r7, #6
 8005e4a:	781b      	ldrb	r3, [r3, #0]
 8005e4c:	b29a      	uxth	r2, r3
 8005e4e:	4b03      	ldr	r3, [pc, #12]	; (8005e5c <ssd1306_SetCursor+0x30>)
 8005e50:	805a      	strh	r2, [r3, #2]
}
 8005e52:	46c0      	nop			; (mov r8, r8)
 8005e54:	46bd      	mov	sp, r7
 8005e56:	b002      	add	sp, #8
 8005e58:	bd80      	pop	{r7, pc}
 8005e5a:	46c0      	nop			; (mov r8, r8)
 8005e5c:	200021c0 	.word	0x200021c0

08005e60 <__errno>:
 8005e60:	4b01      	ldr	r3, [pc, #4]	; (8005e68 <__errno+0x8>)
 8005e62:	6818      	ldr	r0, [r3, #0]
 8005e64:	4770      	bx	lr
 8005e66:	46c0      	nop			; (mov r8, r8)
 8005e68:	20000018 	.word	0x20000018

08005e6c <__libc_init_array>:
 8005e6c:	b570      	push	{r4, r5, r6, lr}
 8005e6e:	2600      	movs	r6, #0
 8005e70:	4d0c      	ldr	r5, [pc, #48]	; (8005ea4 <__libc_init_array+0x38>)
 8005e72:	4c0d      	ldr	r4, [pc, #52]	; (8005ea8 <__libc_init_array+0x3c>)
 8005e74:	1b64      	subs	r4, r4, r5
 8005e76:	10a4      	asrs	r4, r4, #2
 8005e78:	42a6      	cmp	r6, r4
 8005e7a:	d109      	bne.n	8005e90 <__libc_init_array+0x24>
 8005e7c:	2600      	movs	r6, #0
 8005e7e:	f000 fc93 	bl	80067a8 <_init>
 8005e82:	4d0a      	ldr	r5, [pc, #40]	; (8005eac <__libc_init_array+0x40>)
 8005e84:	4c0a      	ldr	r4, [pc, #40]	; (8005eb0 <__libc_init_array+0x44>)
 8005e86:	1b64      	subs	r4, r4, r5
 8005e88:	10a4      	asrs	r4, r4, #2
 8005e8a:	42a6      	cmp	r6, r4
 8005e8c:	d105      	bne.n	8005e9a <__libc_init_array+0x2e>
 8005e8e:	bd70      	pop	{r4, r5, r6, pc}
 8005e90:	00b3      	lsls	r3, r6, #2
 8005e92:	58eb      	ldr	r3, [r5, r3]
 8005e94:	4798      	blx	r3
 8005e96:	3601      	adds	r6, #1
 8005e98:	e7ee      	b.n	8005e78 <__libc_init_array+0xc>
 8005e9a:	00b3      	lsls	r3, r6, #2
 8005e9c:	58eb      	ldr	r3, [r5, r3]
 8005e9e:	4798      	blx	r3
 8005ea0:	3601      	adds	r6, #1
 8005ea2:	e7f2      	b.n	8005e8a <__libc_init_array+0x1e>
 8005ea4:	08006ec0 	.word	0x08006ec0
 8005ea8:	08006ec0 	.word	0x08006ec0
 8005eac:	08006ec0 	.word	0x08006ec0
 8005eb0:	08006ec4 	.word	0x08006ec4

08005eb4 <memcpy>:
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	b510      	push	{r4, lr}
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d100      	bne.n	8005ebe <memcpy+0xa>
 8005ebc:	bd10      	pop	{r4, pc}
 8005ebe:	5ccc      	ldrb	r4, [r1, r3]
 8005ec0:	54c4      	strb	r4, [r0, r3]
 8005ec2:	3301      	adds	r3, #1
 8005ec4:	e7f8      	b.n	8005eb8 <memcpy+0x4>

08005ec6 <memmove>:
 8005ec6:	b510      	push	{r4, lr}
 8005ec8:	4288      	cmp	r0, r1
 8005eca:	d902      	bls.n	8005ed2 <memmove+0xc>
 8005ecc:	188b      	adds	r3, r1, r2
 8005ece:	4298      	cmp	r0, r3
 8005ed0:	d303      	bcc.n	8005eda <memmove+0x14>
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	e007      	b.n	8005ee6 <memmove+0x20>
 8005ed6:	5c8b      	ldrb	r3, [r1, r2]
 8005ed8:	5483      	strb	r3, [r0, r2]
 8005eda:	3a01      	subs	r2, #1
 8005edc:	d2fb      	bcs.n	8005ed6 <memmove+0x10>
 8005ede:	bd10      	pop	{r4, pc}
 8005ee0:	5ccc      	ldrb	r4, [r1, r3]
 8005ee2:	54c4      	strb	r4, [r0, r3]
 8005ee4:	3301      	adds	r3, #1
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d1fa      	bne.n	8005ee0 <memmove+0x1a>
 8005eea:	e7f8      	b.n	8005ede <memmove+0x18>

08005eec <memset>:
 8005eec:	0003      	movs	r3, r0
 8005eee:	1882      	adds	r2, r0, r2
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d100      	bne.n	8005ef6 <memset+0xa>
 8005ef4:	4770      	bx	lr
 8005ef6:	7019      	strb	r1, [r3, #0]
 8005ef8:	3301      	adds	r3, #1
 8005efa:	e7f9      	b.n	8005ef0 <memset+0x4>

08005efc <sniprintf>:
 8005efc:	b40c      	push	{r2, r3}
 8005efe:	b530      	push	{r4, r5, lr}
 8005f00:	4b17      	ldr	r3, [pc, #92]	; (8005f60 <sniprintf+0x64>)
 8005f02:	000c      	movs	r4, r1
 8005f04:	681d      	ldr	r5, [r3, #0]
 8005f06:	b09d      	sub	sp, #116	; 0x74
 8005f08:	2900      	cmp	r1, #0
 8005f0a:	da08      	bge.n	8005f1e <sniprintf+0x22>
 8005f0c:	238b      	movs	r3, #139	; 0x8b
 8005f0e:	2001      	movs	r0, #1
 8005f10:	602b      	str	r3, [r5, #0]
 8005f12:	4240      	negs	r0, r0
 8005f14:	b01d      	add	sp, #116	; 0x74
 8005f16:	bc30      	pop	{r4, r5}
 8005f18:	bc08      	pop	{r3}
 8005f1a:	b002      	add	sp, #8
 8005f1c:	4718      	bx	r3
 8005f1e:	2382      	movs	r3, #130	; 0x82
 8005f20:	466a      	mov	r2, sp
 8005f22:	009b      	lsls	r3, r3, #2
 8005f24:	8293      	strh	r3, [r2, #20]
 8005f26:	2300      	movs	r3, #0
 8005f28:	9002      	str	r0, [sp, #8]
 8005f2a:	9006      	str	r0, [sp, #24]
 8005f2c:	4299      	cmp	r1, r3
 8005f2e:	d000      	beq.n	8005f32 <sniprintf+0x36>
 8005f30:	1e4b      	subs	r3, r1, #1
 8005f32:	9304      	str	r3, [sp, #16]
 8005f34:	9307      	str	r3, [sp, #28]
 8005f36:	2301      	movs	r3, #1
 8005f38:	466a      	mov	r2, sp
 8005f3a:	425b      	negs	r3, r3
 8005f3c:	82d3      	strh	r3, [r2, #22]
 8005f3e:	0028      	movs	r0, r5
 8005f40:	ab21      	add	r3, sp, #132	; 0x84
 8005f42:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005f44:	a902      	add	r1, sp, #8
 8005f46:	9301      	str	r3, [sp, #4]
 8005f48:	f000 f8a6 	bl	8006098 <_svfiprintf_r>
 8005f4c:	1c43      	adds	r3, r0, #1
 8005f4e:	da01      	bge.n	8005f54 <sniprintf+0x58>
 8005f50:	238b      	movs	r3, #139	; 0x8b
 8005f52:	602b      	str	r3, [r5, #0]
 8005f54:	2c00      	cmp	r4, #0
 8005f56:	d0dd      	beq.n	8005f14 <sniprintf+0x18>
 8005f58:	2300      	movs	r3, #0
 8005f5a:	9a02      	ldr	r2, [sp, #8]
 8005f5c:	7013      	strb	r3, [r2, #0]
 8005f5e:	e7d9      	b.n	8005f14 <sniprintf+0x18>
 8005f60:	20000018 	.word	0x20000018

08005f64 <_vsniprintf_r>:
 8005f64:	b530      	push	{r4, r5, lr}
 8005f66:	0014      	movs	r4, r2
 8005f68:	0005      	movs	r5, r0
 8005f6a:	001a      	movs	r2, r3
 8005f6c:	b09b      	sub	sp, #108	; 0x6c
 8005f6e:	2c00      	cmp	r4, #0
 8005f70:	da05      	bge.n	8005f7e <_vsniprintf_r+0x1a>
 8005f72:	238b      	movs	r3, #139	; 0x8b
 8005f74:	6003      	str	r3, [r0, #0]
 8005f76:	2001      	movs	r0, #1
 8005f78:	4240      	negs	r0, r0
 8005f7a:	b01b      	add	sp, #108	; 0x6c
 8005f7c:	bd30      	pop	{r4, r5, pc}
 8005f7e:	2382      	movs	r3, #130	; 0x82
 8005f80:	4668      	mov	r0, sp
 8005f82:	009b      	lsls	r3, r3, #2
 8005f84:	8183      	strh	r3, [r0, #12]
 8005f86:	2300      	movs	r3, #0
 8005f88:	9100      	str	r1, [sp, #0]
 8005f8a:	9104      	str	r1, [sp, #16]
 8005f8c:	429c      	cmp	r4, r3
 8005f8e:	d000      	beq.n	8005f92 <_vsniprintf_r+0x2e>
 8005f90:	1e63      	subs	r3, r4, #1
 8005f92:	9302      	str	r3, [sp, #8]
 8005f94:	9305      	str	r3, [sp, #20]
 8005f96:	2301      	movs	r3, #1
 8005f98:	4669      	mov	r1, sp
 8005f9a:	425b      	negs	r3, r3
 8005f9c:	81cb      	strh	r3, [r1, #14]
 8005f9e:	0028      	movs	r0, r5
 8005fa0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005fa2:	f000 f879 	bl	8006098 <_svfiprintf_r>
 8005fa6:	1c43      	adds	r3, r0, #1
 8005fa8:	da01      	bge.n	8005fae <_vsniprintf_r+0x4a>
 8005faa:	238b      	movs	r3, #139	; 0x8b
 8005fac:	602b      	str	r3, [r5, #0]
 8005fae:	2c00      	cmp	r4, #0
 8005fb0:	d0e3      	beq.n	8005f7a <_vsniprintf_r+0x16>
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	9a00      	ldr	r2, [sp, #0]
 8005fb6:	7013      	strb	r3, [r2, #0]
 8005fb8:	e7df      	b.n	8005f7a <_vsniprintf_r+0x16>
	...

08005fbc <vsniprintf>:
 8005fbc:	b507      	push	{r0, r1, r2, lr}
 8005fbe:	9300      	str	r3, [sp, #0]
 8005fc0:	0013      	movs	r3, r2
 8005fc2:	000a      	movs	r2, r1
 8005fc4:	0001      	movs	r1, r0
 8005fc6:	4802      	ldr	r0, [pc, #8]	; (8005fd0 <vsniprintf+0x14>)
 8005fc8:	6800      	ldr	r0, [r0, #0]
 8005fca:	f7ff ffcb 	bl	8005f64 <_vsniprintf_r>
 8005fce:	bd0e      	pop	{r1, r2, r3, pc}
 8005fd0:	20000018 	.word	0x20000018

08005fd4 <__ssputs_r>:
 8005fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005fd6:	688e      	ldr	r6, [r1, #8]
 8005fd8:	b085      	sub	sp, #20
 8005fda:	0007      	movs	r7, r0
 8005fdc:	000c      	movs	r4, r1
 8005fde:	9203      	str	r2, [sp, #12]
 8005fe0:	9301      	str	r3, [sp, #4]
 8005fe2:	429e      	cmp	r6, r3
 8005fe4:	d83c      	bhi.n	8006060 <__ssputs_r+0x8c>
 8005fe6:	2390      	movs	r3, #144	; 0x90
 8005fe8:	898a      	ldrh	r2, [r1, #12]
 8005fea:	00db      	lsls	r3, r3, #3
 8005fec:	421a      	tst	r2, r3
 8005fee:	d034      	beq.n	800605a <__ssputs_r+0x86>
 8005ff0:	2503      	movs	r5, #3
 8005ff2:	6909      	ldr	r1, [r1, #16]
 8005ff4:	6823      	ldr	r3, [r4, #0]
 8005ff6:	1a5b      	subs	r3, r3, r1
 8005ff8:	9302      	str	r3, [sp, #8]
 8005ffa:	6963      	ldr	r3, [r4, #20]
 8005ffc:	9802      	ldr	r0, [sp, #8]
 8005ffe:	435d      	muls	r5, r3
 8006000:	0feb      	lsrs	r3, r5, #31
 8006002:	195d      	adds	r5, r3, r5
 8006004:	9b01      	ldr	r3, [sp, #4]
 8006006:	106d      	asrs	r5, r5, #1
 8006008:	3301      	adds	r3, #1
 800600a:	181b      	adds	r3, r3, r0
 800600c:	42ab      	cmp	r3, r5
 800600e:	d900      	bls.n	8006012 <__ssputs_r+0x3e>
 8006010:	001d      	movs	r5, r3
 8006012:	0553      	lsls	r3, r2, #21
 8006014:	d532      	bpl.n	800607c <__ssputs_r+0xa8>
 8006016:	0029      	movs	r1, r5
 8006018:	0038      	movs	r0, r7
 800601a:	f000 fb15 	bl	8006648 <_malloc_r>
 800601e:	1e06      	subs	r6, r0, #0
 8006020:	d109      	bne.n	8006036 <__ssputs_r+0x62>
 8006022:	230c      	movs	r3, #12
 8006024:	603b      	str	r3, [r7, #0]
 8006026:	2340      	movs	r3, #64	; 0x40
 8006028:	2001      	movs	r0, #1
 800602a:	89a2      	ldrh	r2, [r4, #12]
 800602c:	4240      	negs	r0, r0
 800602e:	4313      	orrs	r3, r2
 8006030:	81a3      	strh	r3, [r4, #12]
 8006032:	b005      	add	sp, #20
 8006034:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006036:	9a02      	ldr	r2, [sp, #8]
 8006038:	6921      	ldr	r1, [r4, #16]
 800603a:	f7ff ff3b 	bl	8005eb4 <memcpy>
 800603e:	89a3      	ldrh	r3, [r4, #12]
 8006040:	4a14      	ldr	r2, [pc, #80]	; (8006094 <__ssputs_r+0xc0>)
 8006042:	401a      	ands	r2, r3
 8006044:	2380      	movs	r3, #128	; 0x80
 8006046:	4313      	orrs	r3, r2
 8006048:	81a3      	strh	r3, [r4, #12]
 800604a:	9b02      	ldr	r3, [sp, #8]
 800604c:	6126      	str	r6, [r4, #16]
 800604e:	18f6      	adds	r6, r6, r3
 8006050:	6026      	str	r6, [r4, #0]
 8006052:	6165      	str	r5, [r4, #20]
 8006054:	9e01      	ldr	r6, [sp, #4]
 8006056:	1aed      	subs	r5, r5, r3
 8006058:	60a5      	str	r5, [r4, #8]
 800605a:	9b01      	ldr	r3, [sp, #4]
 800605c:	429e      	cmp	r6, r3
 800605e:	d900      	bls.n	8006062 <__ssputs_r+0x8e>
 8006060:	9e01      	ldr	r6, [sp, #4]
 8006062:	0032      	movs	r2, r6
 8006064:	9903      	ldr	r1, [sp, #12]
 8006066:	6820      	ldr	r0, [r4, #0]
 8006068:	f7ff ff2d 	bl	8005ec6 <memmove>
 800606c:	68a3      	ldr	r3, [r4, #8]
 800606e:	2000      	movs	r0, #0
 8006070:	1b9b      	subs	r3, r3, r6
 8006072:	60a3      	str	r3, [r4, #8]
 8006074:	6823      	ldr	r3, [r4, #0]
 8006076:	199e      	adds	r6, r3, r6
 8006078:	6026      	str	r6, [r4, #0]
 800607a:	e7da      	b.n	8006032 <__ssputs_r+0x5e>
 800607c:	002a      	movs	r2, r5
 800607e:	0038      	movs	r0, r7
 8006080:	f000 fb40 	bl	8006704 <_realloc_r>
 8006084:	1e06      	subs	r6, r0, #0
 8006086:	d1e0      	bne.n	800604a <__ssputs_r+0x76>
 8006088:	0038      	movs	r0, r7
 800608a:	6921      	ldr	r1, [r4, #16]
 800608c:	f000 fa92 	bl	80065b4 <_free_r>
 8006090:	e7c7      	b.n	8006022 <__ssputs_r+0x4e>
 8006092:	46c0      	nop			; (mov r8, r8)
 8006094:	fffffb7f 	.word	0xfffffb7f

08006098 <_svfiprintf_r>:
 8006098:	b5f0      	push	{r4, r5, r6, r7, lr}
 800609a:	b0a1      	sub	sp, #132	; 0x84
 800609c:	9003      	str	r0, [sp, #12]
 800609e:	001d      	movs	r5, r3
 80060a0:	898b      	ldrh	r3, [r1, #12]
 80060a2:	000f      	movs	r7, r1
 80060a4:	0016      	movs	r6, r2
 80060a6:	061b      	lsls	r3, r3, #24
 80060a8:	d511      	bpl.n	80060ce <_svfiprintf_r+0x36>
 80060aa:	690b      	ldr	r3, [r1, #16]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d10e      	bne.n	80060ce <_svfiprintf_r+0x36>
 80060b0:	2140      	movs	r1, #64	; 0x40
 80060b2:	f000 fac9 	bl	8006648 <_malloc_r>
 80060b6:	6038      	str	r0, [r7, #0]
 80060b8:	6138      	str	r0, [r7, #16]
 80060ba:	2800      	cmp	r0, #0
 80060bc:	d105      	bne.n	80060ca <_svfiprintf_r+0x32>
 80060be:	230c      	movs	r3, #12
 80060c0:	9a03      	ldr	r2, [sp, #12]
 80060c2:	3801      	subs	r0, #1
 80060c4:	6013      	str	r3, [r2, #0]
 80060c6:	b021      	add	sp, #132	; 0x84
 80060c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060ca:	2340      	movs	r3, #64	; 0x40
 80060cc:	617b      	str	r3, [r7, #20]
 80060ce:	2300      	movs	r3, #0
 80060d0:	ac08      	add	r4, sp, #32
 80060d2:	6163      	str	r3, [r4, #20]
 80060d4:	3320      	adds	r3, #32
 80060d6:	7663      	strb	r3, [r4, #25]
 80060d8:	3310      	adds	r3, #16
 80060da:	76a3      	strb	r3, [r4, #26]
 80060dc:	9507      	str	r5, [sp, #28]
 80060de:	0035      	movs	r5, r6
 80060e0:	782b      	ldrb	r3, [r5, #0]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d001      	beq.n	80060ea <_svfiprintf_r+0x52>
 80060e6:	2b25      	cmp	r3, #37	; 0x25
 80060e8:	d147      	bne.n	800617a <_svfiprintf_r+0xe2>
 80060ea:	1bab      	subs	r3, r5, r6
 80060ec:	9305      	str	r3, [sp, #20]
 80060ee:	42b5      	cmp	r5, r6
 80060f0:	d00c      	beq.n	800610c <_svfiprintf_r+0x74>
 80060f2:	0032      	movs	r2, r6
 80060f4:	0039      	movs	r1, r7
 80060f6:	9803      	ldr	r0, [sp, #12]
 80060f8:	f7ff ff6c 	bl	8005fd4 <__ssputs_r>
 80060fc:	1c43      	adds	r3, r0, #1
 80060fe:	d100      	bne.n	8006102 <_svfiprintf_r+0x6a>
 8006100:	e0ae      	b.n	8006260 <_svfiprintf_r+0x1c8>
 8006102:	6962      	ldr	r2, [r4, #20]
 8006104:	9b05      	ldr	r3, [sp, #20]
 8006106:	4694      	mov	ip, r2
 8006108:	4463      	add	r3, ip
 800610a:	6163      	str	r3, [r4, #20]
 800610c:	782b      	ldrb	r3, [r5, #0]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d100      	bne.n	8006114 <_svfiprintf_r+0x7c>
 8006112:	e0a5      	b.n	8006260 <_svfiprintf_r+0x1c8>
 8006114:	2201      	movs	r2, #1
 8006116:	2300      	movs	r3, #0
 8006118:	4252      	negs	r2, r2
 800611a:	6062      	str	r2, [r4, #4]
 800611c:	a904      	add	r1, sp, #16
 800611e:	3254      	adds	r2, #84	; 0x54
 8006120:	1852      	adds	r2, r2, r1
 8006122:	1c6e      	adds	r6, r5, #1
 8006124:	6023      	str	r3, [r4, #0]
 8006126:	60e3      	str	r3, [r4, #12]
 8006128:	60a3      	str	r3, [r4, #8]
 800612a:	7013      	strb	r3, [r2, #0]
 800612c:	65a3      	str	r3, [r4, #88]	; 0x58
 800612e:	2205      	movs	r2, #5
 8006130:	7831      	ldrb	r1, [r6, #0]
 8006132:	4854      	ldr	r0, [pc, #336]	; (8006284 <_svfiprintf_r+0x1ec>)
 8006134:	f000 fa32 	bl	800659c <memchr>
 8006138:	1c75      	adds	r5, r6, #1
 800613a:	2800      	cmp	r0, #0
 800613c:	d11f      	bne.n	800617e <_svfiprintf_r+0xe6>
 800613e:	6822      	ldr	r2, [r4, #0]
 8006140:	06d3      	lsls	r3, r2, #27
 8006142:	d504      	bpl.n	800614e <_svfiprintf_r+0xb6>
 8006144:	2353      	movs	r3, #83	; 0x53
 8006146:	a904      	add	r1, sp, #16
 8006148:	185b      	adds	r3, r3, r1
 800614a:	2120      	movs	r1, #32
 800614c:	7019      	strb	r1, [r3, #0]
 800614e:	0713      	lsls	r3, r2, #28
 8006150:	d504      	bpl.n	800615c <_svfiprintf_r+0xc4>
 8006152:	2353      	movs	r3, #83	; 0x53
 8006154:	a904      	add	r1, sp, #16
 8006156:	185b      	adds	r3, r3, r1
 8006158:	212b      	movs	r1, #43	; 0x2b
 800615a:	7019      	strb	r1, [r3, #0]
 800615c:	7833      	ldrb	r3, [r6, #0]
 800615e:	2b2a      	cmp	r3, #42	; 0x2a
 8006160:	d016      	beq.n	8006190 <_svfiprintf_r+0xf8>
 8006162:	0035      	movs	r5, r6
 8006164:	2100      	movs	r1, #0
 8006166:	200a      	movs	r0, #10
 8006168:	68e3      	ldr	r3, [r4, #12]
 800616a:	782a      	ldrb	r2, [r5, #0]
 800616c:	1c6e      	adds	r6, r5, #1
 800616e:	3a30      	subs	r2, #48	; 0x30
 8006170:	2a09      	cmp	r2, #9
 8006172:	d94e      	bls.n	8006212 <_svfiprintf_r+0x17a>
 8006174:	2900      	cmp	r1, #0
 8006176:	d111      	bne.n	800619c <_svfiprintf_r+0x104>
 8006178:	e017      	b.n	80061aa <_svfiprintf_r+0x112>
 800617a:	3501      	adds	r5, #1
 800617c:	e7b0      	b.n	80060e0 <_svfiprintf_r+0x48>
 800617e:	4b41      	ldr	r3, [pc, #260]	; (8006284 <_svfiprintf_r+0x1ec>)
 8006180:	6822      	ldr	r2, [r4, #0]
 8006182:	1ac0      	subs	r0, r0, r3
 8006184:	2301      	movs	r3, #1
 8006186:	4083      	lsls	r3, r0
 8006188:	4313      	orrs	r3, r2
 800618a:	002e      	movs	r6, r5
 800618c:	6023      	str	r3, [r4, #0]
 800618e:	e7ce      	b.n	800612e <_svfiprintf_r+0x96>
 8006190:	9b07      	ldr	r3, [sp, #28]
 8006192:	1d19      	adds	r1, r3, #4
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	9107      	str	r1, [sp, #28]
 8006198:	2b00      	cmp	r3, #0
 800619a:	db01      	blt.n	80061a0 <_svfiprintf_r+0x108>
 800619c:	930b      	str	r3, [sp, #44]	; 0x2c
 800619e:	e004      	b.n	80061aa <_svfiprintf_r+0x112>
 80061a0:	425b      	negs	r3, r3
 80061a2:	60e3      	str	r3, [r4, #12]
 80061a4:	2302      	movs	r3, #2
 80061a6:	4313      	orrs	r3, r2
 80061a8:	6023      	str	r3, [r4, #0]
 80061aa:	782b      	ldrb	r3, [r5, #0]
 80061ac:	2b2e      	cmp	r3, #46	; 0x2e
 80061ae:	d10a      	bne.n	80061c6 <_svfiprintf_r+0x12e>
 80061b0:	786b      	ldrb	r3, [r5, #1]
 80061b2:	2b2a      	cmp	r3, #42	; 0x2a
 80061b4:	d135      	bne.n	8006222 <_svfiprintf_r+0x18a>
 80061b6:	9b07      	ldr	r3, [sp, #28]
 80061b8:	3502      	adds	r5, #2
 80061ba:	1d1a      	adds	r2, r3, #4
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	9207      	str	r2, [sp, #28]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	db2b      	blt.n	800621c <_svfiprintf_r+0x184>
 80061c4:	9309      	str	r3, [sp, #36]	; 0x24
 80061c6:	4e30      	ldr	r6, [pc, #192]	; (8006288 <_svfiprintf_r+0x1f0>)
 80061c8:	2203      	movs	r2, #3
 80061ca:	0030      	movs	r0, r6
 80061cc:	7829      	ldrb	r1, [r5, #0]
 80061ce:	f000 f9e5 	bl	800659c <memchr>
 80061d2:	2800      	cmp	r0, #0
 80061d4:	d006      	beq.n	80061e4 <_svfiprintf_r+0x14c>
 80061d6:	2340      	movs	r3, #64	; 0x40
 80061d8:	1b80      	subs	r0, r0, r6
 80061da:	4083      	lsls	r3, r0
 80061dc:	6822      	ldr	r2, [r4, #0]
 80061de:	3501      	adds	r5, #1
 80061e0:	4313      	orrs	r3, r2
 80061e2:	6023      	str	r3, [r4, #0]
 80061e4:	7829      	ldrb	r1, [r5, #0]
 80061e6:	2206      	movs	r2, #6
 80061e8:	4828      	ldr	r0, [pc, #160]	; (800628c <_svfiprintf_r+0x1f4>)
 80061ea:	1c6e      	adds	r6, r5, #1
 80061ec:	7621      	strb	r1, [r4, #24]
 80061ee:	f000 f9d5 	bl	800659c <memchr>
 80061f2:	2800      	cmp	r0, #0
 80061f4:	d03c      	beq.n	8006270 <_svfiprintf_r+0x1d8>
 80061f6:	4b26      	ldr	r3, [pc, #152]	; (8006290 <_svfiprintf_r+0x1f8>)
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d125      	bne.n	8006248 <_svfiprintf_r+0x1b0>
 80061fc:	2207      	movs	r2, #7
 80061fe:	9b07      	ldr	r3, [sp, #28]
 8006200:	3307      	adds	r3, #7
 8006202:	4393      	bics	r3, r2
 8006204:	3308      	adds	r3, #8
 8006206:	9307      	str	r3, [sp, #28]
 8006208:	6963      	ldr	r3, [r4, #20]
 800620a:	9a04      	ldr	r2, [sp, #16]
 800620c:	189b      	adds	r3, r3, r2
 800620e:	6163      	str	r3, [r4, #20]
 8006210:	e765      	b.n	80060de <_svfiprintf_r+0x46>
 8006212:	4343      	muls	r3, r0
 8006214:	0035      	movs	r5, r6
 8006216:	2101      	movs	r1, #1
 8006218:	189b      	adds	r3, r3, r2
 800621a:	e7a6      	b.n	800616a <_svfiprintf_r+0xd2>
 800621c:	2301      	movs	r3, #1
 800621e:	425b      	negs	r3, r3
 8006220:	e7d0      	b.n	80061c4 <_svfiprintf_r+0x12c>
 8006222:	2300      	movs	r3, #0
 8006224:	200a      	movs	r0, #10
 8006226:	001a      	movs	r2, r3
 8006228:	3501      	adds	r5, #1
 800622a:	6063      	str	r3, [r4, #4]
 800622c:	7829      	ldrb	r1, [r5, #0]
 800622e:	1c6e      	adds	r6, r5, #1
 8006230:	3930      	subs	r1, #48	; 0x30
 8006232:	2909      	cmp	r1, #9
 8006234:	d903      	bls.n	800623e <_svfiprintf_r+0x1a6>
 8006236:	2b00      	cmp	r3, #0
 8006238:	d0c5      	beq.n	80061c6 <_svfiprintf_r+0x12e>
 800623a:	9209      	str	r2, [sp, #36]	; 0x24
 800623c:	e7c3      	b.n	80061c6 <_svfiprintf_r+0x12e>
 800623e:	4342      	muls	r2, r0
 8006240:	0035      	movs	r5, r6
 8006242:	2301      	movs	r3, #1
 8006244:	1852      	adds	r2, r2, r1
 8006246:	e7f1      	b.n	800622c <_svfiprintf_r+0x194>
 8006248:	ab07      	add	r3, sp, #28
 800624a:	9300      	str	r3, [sp, #0]
 800624c:	003a      	movs	r2, r7
 800624e:	0021      	movs	r1, r4
 8006250:	4b10      	ldr	r3, [pc, #64]	; (8006294 <_svfiprintf_r+0x1fc>)
 8006252:	9803      	ldr	r0, [sp, #12]
 8006254:	e000      	b.n	8006258 <_svfiprintf_r+0x1c0>
 8006256:	bf00      	nop
 8006258:	9004      	str	r0, [sp, #16]
 800625a:	9b04      	ldr	r3, [sp, #16]
 800625c:	3301      	adds	r3, #1
 800625e:	d1d3      	bne.n	8006208 <_svfiprintf_r+0x170>
 8006260:	89bb      	ldrh	r3, [r7, #12]
 8006262:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006264:	065b      	lsls	r3, r3, #25
 8006266:	d400      	bmi.n	800626a <_svfiprintf_r+0x1d2>
 8006268:	e72d      	b.n	80060c6 <_svfiprintf_r+0x2e>
 800626a:	2001      	movs	r0, #1
 800626c:	4240      	negs	r0, r0
 800626e:	e72a      	b.n	80060c6 <_svfiprintf_r+0x2e>
 8006270:	ab07      	add	r3, sp, #28
 8006272:	9300      	str	r3, [sp, #0]
 8006274:	003a      	movs	r2, r7
 8006276:	0021      	movs	r1, r4
 8006278:	4b06      	ldr	r3, [pc, #24]	; (8006294 <_svfiprintf_r+0x1fc>)
 800627a:	9803      	ldr	r0, [sp, #12]
 800627c:	f000 f87c 	bl	8006378 <_printf_i>
 8006280:	e7ea      	b.n	8006258 <_svfiprintf_r+0x1c0>
 8006282:	46c0      	nop			; (mov r8, r8)
 8006284:	08006e8c 	.word	0x08006e8c
 8006288:	08006e92 	.word	0x08006e92
 800628c:	08006e96 	.word	0x08006e96
 8006290:	00000000 	.word	0x00000000
 8006294:	08005fd5 	.word	0x08005fd5

08006298 <_printf_common>:
 8006298:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800629a:	0015      	movs	r5, r2
 800629c:	9301      	str	r3, [sp, #4]
 800629e:	688a      	ldr	r2, [r1, #8]
 80062a0:	690b      	ldr	r3, [r1, #16]
 80062a2:	000c      	movs	r4, r1
 80062a4:	9000      	str	r0, [sp, #0]
 80062a6:	4293      	cmp	r3, r2
 80062a8:	da00      	bge.n	80062ac <_printf_common+0x14>
 80062aa:	0013      	movs	r3, r2
 80062ac:	0022      	movs	r2, r4
 80062ae:	602b      	str	r3, [r5, #0]
 80062b0:	3243      	adds	r2, #67	; 0x43
 80062b2:	7812      	ldrb	r2, [r2, #0]
 80062b4:	2a00      	cmp	r2, #0
 80062b6:	d001      	beq.n	80062bc <_printf_common+0x24>
 80062b8:	3301      	adds	r3, #1
 80062ba:	602b      	str	r3, [r5, #0]
 80062bc:	6823      	ldr	r3, [r4, #0]
 80062be:	069b      	lsls	r3, r3, #26
 80062c0:	d502      	bpl.n	80062c8 <_printf_common+0x30>
 80062c2:	682b      	ldr	r3, [r5, #0]
 80062c4:	3302      	adds	r3, #2
 80062c6:	602b      	str	r3, [r5, #0]
 80062c8:	6822      	ldr	r2, [r4, #0]
 80062ca:	2306      	movs	r3, #6
 80062cc:	0017      	movs	r7, r2
 80062ce:	401f      	ands	r7, r3
 80062d0:	421a      	tst	r2, r3
 80062d2:	d027      	beq.n	8006324 <_printf_common+0x8c>
 80062d4:	0023      	movs	r3, r4
 80062d6:	3343      	adds	r3, #67	; 0x43
 80062d8:	781b      	ldrb	r3, [r3, #0]
 80062da:	1e5a      	subs	r2, r3, #1
 80062dc:	4193      	sbcs	r3, r2
 80062de:	6822      	ldr	r2, [r4, #0]
 80062e0:	0692      	lsls	r2, r2, #26
 80062e2:	d430      	bmi.n	8006346 <_printf_common+0xae>
 80062e4:	0022      	movs	r2, r4
 80062e6:	9901      	ldr	r1, [sp, #4]
 80062e8:	9800      	ldr	r0, [sp, #0]
 80062ea:	9e08      	ldr	r6, [sp, #32]
 80062ec:	3243      	adds	r2, #67	; 0x43
 80062ee:	47b0      	blx	r6
 80062f0:	1c43      	adds	r3, r0, #1
 80062f2:	d025      	beq.n	8006340 <_printf_common+0xa8>
 80062f4:	2306      	movs	r3, #6
 80062f6:	6820      	ldr	r0, [r4, #0]
 80062f8:	682a      	ldr	r2, [r5, #0]
 80062fa:	68e1      	ldr	r1, [r4, #12]
 80062fc:	2500      	movs	r5, #0
 80062fe:	4003      	ands	r3, r0
 8006300:	2b04      	cmp	r3, #4
 8006302:	d103      	bne.n	800630c <_printf_common+0x74>
 8006304:	1a8d      	subs	r5, r1, r2
 8006306:	43eb      	mvns	r3, r5
 8006308:	17db      	asrs	r3, r3, #31
 800630a:	401d      	ands	r5, r3
 800630c:	68a3      	ldr	r3, [r4, #8]
 800630e:	6922      	ldr	r2, [r4, #16]
 8006310:	4293      	cmp	r3, r2
 8006312:	dd01      	ble.n	8006318 <_printf_common+0x80>
 8006314:	1a9b      	subs	r3, r3, r2
 8006316:	18ed      	adds	r5, r5, r3
 8006318:	2700      	movs	r7, #0
 800631a:	42bd      	cmp	r5, r7
 800631c:	d120      	bne.n	8006360 <_printf_common+0xc8>
 800631e:	2000      	movs	r0, #0
 8006320:	e010      	b.n	8006344 <_printf_common+0xac>
 8006322:	3701      	adds	r7, #1
 8006324:	68e3      	ldr	r3, [r4, #12]
 8006326:	682a      	ldr	r2, [r5, #0]
 8006328:	1a9b      	subs	r3, r3, r2
 800632a:	42bb      	cmp	r3, r7
 800632c:	ddd2      	ble.n	80062d4 <_printf_common+0x3c>
 800632e:	0022      	movs	r2, r4
 8006330:	2301      	movs	r3, #1
 8006332:	9901      	ldr	r1, [sp, #4]
 8006334:	9800      	ldr	r0, [sp, #0]
 8006336:	9e08      	ldr	r6, [sp, #32]
 8006338:	3219      	adds	r2, #25
 800633a:	47b0      	blx	r6
 800633c:	1c43      	adds	r3, r0, #1
 800633e:	d1f0      	bne.n	8006322 <_printf_common+0x8a>
 8006340:	2001      	movs	r0, #1
 8006342:	4240      	negs	r0, r0
 8006344:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006346:	2030      	movs	r0, #48	; 0x30
 8006348:	18e1      	adds	r1, r4, r3
 800634a:	3143      	adds	r1, #67	; 0x43
 800634c:	7008      	strb	r0, [r1, #0]
 800634e:	0021      	movs	r1, r4
 8006350:	1c5a      	adds	r2, r3, #1
 8006352:	3145      	adds	r1, #69	; 0x45
 8006354:	7809      	ldrb	r1, [r1, #0]
 8006356:	18a2      	adds	r2, r4, r2
 8006358:	3243      	adds	r2, #67	; 0x43
 800635a:	3302      	adds	r3, #2
 800635c:	7011      	strb	r1, [r2, #0]
 800635e:	e7c1      	b.n	80062e4 <_printf_common+0x4c>
 8006360:	0022      	movs	r2, r4
 8006362:	2301      	movs	r3, #1
 8006364:	9901      	ldr	r1, [sp, #4]
 8006366:	9800      	ldr	r0, [sp, #0]
 8006368:	9e08      	ldr	r6, [sp, #32]
 800636a:	321a      	adds	r2, #26
 800636c:	47b0      	blx	r6
 800636e:	1c43      	adds	r3, r0, #1
 8006370:	d0e6      	beq.n	8006340 <_printf_common+0xa8>
 8006372:	3701      	adds	r7, #1
 8006374:	e7d1      	b.n	800631a <_printf_common+0x82>
	...

08006378 <_printf_i>:
 8006378:	b5f0      	push	{r4, r5, r6, r7, lr}
 800637a:	b08b      	sub	sp, #44	; 0x2c
 800637c:	9206      	str	r2, [sp, #24]
 800637e:	000a      	movs	r2, r1
 8006380:	3243      	adds	r2, #67	; 0x43
 8006382:	9307      	str	r3, [sp, #28]
 8006384:	9005      	str	r0, [sp, #20]
 8006386:	9204      	str	r2, [sp, #16]
 8006388:	7e0a      	ldrb	r2, [r1, #24]
 800638a:	000c      	movs	r4, r1
 800638c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800638e:	2a78      	cmp	r2, #120	; 0x78
 8006390:	d806      	bhi.n	80063a0 <_printf_i+0x28>
 8006392:	2a62      	cmp	r2, #98	; 0x62
 8006394:	d808      	bhi.n	80063a8 <_printf_i+0x30>
 8006396:	2a00      	cmp	r2, #0
 8006398:	d100      	bne.n	800639c <_printf_i+0x24>
 800639a:	e0c0      	b.n	800651e <_printf_i+0x1a6>
 800639c:	2a58      	cmp	r2, #88	; 0x58
 800639e:	d052      	beq.n	8006446 <_printf_i+0xce>
 80063a0:	0026      	movs	r6, r4
 80063a2:	3642      	adds	r6, #66	; 0x42
 80063a4:	7032      	strb	r2, [r6, #0]
 80063a6:	e022      	b.n	80063ee <_printf_i+0x76>
 80063a8:	0010      	movs	r0, r2
 80063aa:	3863      	subs	r0, #99	; 0x63
 80063ac:	2815      	cmp	r0, #21
 80063ae:	d8f7      	bhi.n	80063a0 <_printf_i+0x28>
 80063b0:	f7f9 feaa 	bl	8000108 <__gnu_thumb1_case_shi>
 80063b4:	001f0016 	.word	0x001f0016
 80063b8:	fff6fff6 	.word	0xfff6fff6
 80063bc:	fff6fff6 	.word	0xfff6fff6
 80063c0:	fff6001f 	.word	0xfff6001f
 80063c4:	fff6fff6 	.word	0xfff6fff6
 80063c8:	00a8fff6 	.word	0x00a8fff6
 80063cc:	009a0036 	.word	0x009a0036
 80063d0:	fff6fff6 	.word	0xfff6fff6
 80063d4:	fff600b9 	.word	0xfff600b9
 80063d8:	fff60036 	.word	0xfff60036
 80063dc:	009efff6 	.word	0x009efff6
 80063e0:	0026      	movs	r6, r4
 80063e2:	681a      	ldr	r2, [r3, #0]
 80063e4:	3642      	adds	r6, #66	; 0x42
 80063e6:	1d11      	adds	r1, r2, #4
 80063e8:	6019      	str	r1, [r3, #0]
 80063ea:	6813      	ldr	r3, [r2, #0]
 80063ec:	7033      	strb	r3, [r6, #0]
 80063ee:	2301      	movs	r3, #1
 80063f0:	e0a7      	b.n	8006542 <_printf_i+0x1ca>
 80063f2:	6808      	ldr	r0, [r1, #0]
 80063f4:	6819      	ldr	r1, [r3, #0]
 80063f6:	1d0a      	adds	r2, r1, #4
 80063f8:	0605      	lsls	r5, r0, #24
 80063fa:	d50b      	bpl.n	8006414 <_printf_i+0x9c>
 80063fc:	680d      	ldr	r5, [r1, #0]
 80063fe:	601a      	str	r2, [r3, #0]
 8006400:	2d00      	cmp	r5, #0
 8006402:	da03      	bge.n	800640c <_printf_i+0x94>
 8006404:	232d      	movs	r3, #45	; 0x2d
 8006406:	9a04      	ldr	r2, [sp, #16]
 8006408:	426d      	negs	r5, r5
 800640a:	7013      	strb	r3, [r2, #0]
 800640c:	4b61      	ldr	r3, [pc, #388]	; (8006594 <_printf_i+0x21c>)
 800640e:	270a      	movs	r7, #10
 8006410:	9303      	str	r3, [sp, #12]
 8006412:	e032      	b.n	800647a <_printf_i+0x102>
 8006414:	680d      	ldr	r5, [r1, #0]
 8006416:	601a      	str	r2, [r3, #0]
 8006418:	0641      	lsls	r1, r0, #25
 800641a:	d5f1      	bpl.n	8006400 <_printf_i+0x88>
 800641c:	b22d      	sxth	r5, r5
 800641e:	e7ef      	b.n	8006400 <_printf_i+0x88>
 8006420:	680d      	ldr	r5, [r1, #0]
 8006422:	6819      	ldr	r1, [r3, #0]
 8006424:	1d08      	adds	r0, r1, #4
 8006426:	6018      	str	r0, [r3, #0]
 8006428:	062e      	lsls	r6, r5, #24
 800642a:	d501      	bpl.n	8006430 <_printf_i+0xb8>
 800642c:	680d      	ldr	r5, [r1, #0]
 800642e:	e003      	b.n	8006438 <_printf_i+0xc0>
 8006430:	066d      	lsls	r5, r5, #25
 8006432:	d5fb      	bpl.n	800642c <_printf_i+0xb4>
 8006434:	680d      	ldr	r5, [r1, #0]
 8006436:	b2ad      	uxth	r5, r5
 8006438:	4b56      	ldr	r3, [pc, #344]	; (8006594 <_printf_i+0x21c>)
 800643a:	270a      	movs	r7, #10
 800643c:	9303      	str	r3, [sp, #12]
 800643e:	2a6f      	cmp	r2, #111	; 0x6f
 8006440:	d117      	bne.n	8006472 <_printf_i+0xfa>
 8006442:	2708      	movs	r7, #8
 8006444:	e015      	b.n	8006472 <_printf_i+0xfa>
 8006446:	3145      	adds	r1, #69	; 0x45
 8006448:	700a      	strb	r2, [r1, #0]
 800644a:	4a52      	ldr	r2, [pc, #328]	; (8006594 <_printf_i+0x21c>)
 800644c:	9203      	str	r2, [sp, #12]
 800644e:	681a      	ldr	r2, [r3, #0]
 8006450:	6821      	ldr	r1, [r4, #0]
 8006452:	ca20      	ldmia	r2!, {r5}
 8006454:	601a      	str	r2, [r3, #0]
 8006456:	0608      	lsls	r0, r1, #24
 8006458:	d550      	bpl.n	80064fc <_printf_i+0x184>
 800645a:	07cb      	lsls	r3, r1, #31
 800645c:	d502      	bpl.n	8006464 <_printf_i+0xec>
 800645e:	2320      	movs	r3, #32
 8006460:	4319      	orrs	r1, r3
 8006462:	6021      	str	r1, [r4, #0]
 8006464:	2710      	movs	r7, #16
 8006466:	2d00      	cmp	r5, #0
 8006468:	d103      	bne.n	8006472 <_printf_i+0xfa>
 800646a:	2320      	movs	r3, #32
 800646c:	6822      	ldr	r2, [r4, #0]
 800646e:	439a      	bics	r2, r3
 8006470:	6022      	str	r2, [r4, #0]
 8006472:	0023      	movs	r3, r4
 8006474:	2200      	movs	r2, #0
 8006476:	3343      	adds	r3, #67	; 0x43
 8006478:	701a      	strb	r2, [r3, #0]
 800647a:	6863      	ldr	r3, [r4, #4]
 800647c:	60a3      	str	r3, [r4, #8]
 800647e:	2b00      	cmp	r3, #0
 8006480:	db03      	blt.n	800648a <_printf_i+0x112>
 8006482:	2204      	movs	r2, #4
 8006484:	6821      	ldr	r1, [r4, #0]
 8006486:	4391      	bics	r1, r2
 8006488:	6021      	str	r1, [r4, #0]
 800648a:	2d00      	cmp	r5, #0
 800648c:	d102      	bne.n	8006494 <_printf_i+0x11c>
 800648e:	9e04      	ldr	r6, [sp, #16]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d00c      	beq.n	80064ae <_printf_i+0x136>
 8006494:	9e04      	ldr	r6, [sp, #16]
 8006496:	0028      	movs	r0, r5
 8006498:	0039      	movs	r1, r7
 800649a:	f7f9 fec5 	bl	8000228 <__aeabi_uidivmod>
 800649e:	9b03      	ldr	r3, [sp, #12]
 80064a0:	3e01      	subs	r6, #1
 80064a2:	5c5b      	ldrb	r3, [r3, r1]
 80064a4:	7033      	strb	r3, [r6, #0]
 80064a6:	002b      	movs	r3, r5
 80064a8:	0005      	movs	r5, r0
 80064aa:	429f      	cmp	r7, r3
 80064ac:	d9f3      	bls.n	8006496 <_printf_i+0x11e>
 80064ae:	2f08      	cmp	r7, #8
 80064b0:	d109      	bne.n	80064c6 <_printf_i+0x14e>
 80064b2:	6823      	ldr	r3, [r4, #0]
 80064b4:	07db      	lsls	r3, r3, #31
 80064b6:	d506      	bpl.n	80064c6 <_printf_i+0x14e>
 80064b8:	6863      	ldr	r3, [r4, #4]
 80064ba:	6922      	ldr	r2, [r4, #16]
 80064bc:	4293      	cmp	r3, r2
 80064be:	dc02      	bgt.n	80064c6 <_printf_i+0x14e>
 80064c0:	2330      	movs	r3, #48	; 0x30
 80064c2:	3e01      	subs	r6, #1
 80064c4:	7033      	strb	r3, [r6, #0]
 80064c6:	9b04      	ldr	r3, [sp, #16]
 80064c8:	1b9b      	subs	r3, r3, r6
 80064ca:	6123      	str	r3, [r4, #16]
 80064cc:	9b07      	ldr	r3, [sp, #28]
 80064ce:	0021      	movs	r1, r4
 80064d0:	9300      	str	r3, [sp, #0]
 80064d2:	9805      	ldr	r0, [sp, #20]
 80064d4:	9b06      	ldr	r3, [sp, #24]
 80064d6:	aa09      	add	r2, sp, #36	; 0x24
 80064d8:	f7ff fede 	bl	8006298 <_printf_common>
 80064dc:	1c43      	adds	r3, r0, #1
 80064de:	d135      	bne.n	800654c <_printf_i+0x1d4>
 80064e0:	2001      	movs	r0, #1
 80064e2:	4240      	negs	r0, r0
 80064e4:	b00b      	add	sp, #44	; 0x2c
 80064e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064e8:	2220      	movs	r2, #32
 80064ea:	6809      	ldr	r1, [r1, #0]
 80064ec:	430a      	orrs	r2, r1
 80064ee:	6022      	str	r2, [r4, #0]
 80064f0:	0022      	movs	r2, r4
 80064f2:	2178      	movs	r1, #120	; 0x78
 80064f4:	3245      	adds	r2, #69	; 0x45
 80064f6:	7011      	strb	r1, [r2, #0]
 80064f8:	4a27      	ldr	r2, [pc, #156]	; (8006598 <_printf_i+0x220>)
 80064fa:	e7a7      	b.n	800644c <_printf_i+0xd4>
 80064fc:	0648      	lsls	r0, r1, #25
 80064fe:	d5ac      	bpl.n	800645a <_printf_i+0xe2>
 8006500:	b2ad      	uxth	r5, r5
 8006502:	e7aa      	b.n	800645a <_printf_i+0xe2>
 8006504:	681a      	ldr	r2, [r3, #0]
 8006506:	680d      	ldr	r5, [r1, #0]
 8006508:	1d10      	adds	r0, r2, #4
 800650a:	6949      	ldr	r1, [r1, #20]
 800650c:	6018      	str	r0, [r3, #0]
 800650e:	6813      	ldr	r3, [r2, #0]
 8006510:	062e      	lsls	r6, r5, #24
 8006512:	d501      	bpl.n	8006518 <_printf_i+0x1a0>
 8006514:	6019      	str	r1, [r3, #0]
 8006516:	e002      	b.n	800651e <_printf_i+0x1a6>
 8006518:	066d      	lsls	r5, r5, #25
 800651a:	d5fb      	bpl.n	8006514 <_printf_i+0x19c>
 800651c:	8019      	strh	r1, [r3, #0]
 800651e:	2300      	movs	r3, #0
 8006520:	9e04      	ldr	r6, [sp, #16]
 8006522:	6123      	str	r3, [r4, #16]
 8006524:	e7d2      	b.n	80064cc <_printf_i+0x154>
 8006526:	681a      	ldr	r2, [r3, #0]
 8006528:	1d11      	adds	r1, r2, #4
 800652a:	6019      	str	r1, [r3, #0]
 800652c:	6816      	ldr	r6, [r2, #0]
 800652e:	2100      	movs	r1, #0
 8006530:	0030      	movs	r0, r6
 8006532:	6862      	ldr	r2, [r4, #4]
 8006534:	f000 f832 	bl	800659c <memchr>
 8006538:	2800      	cmp	r0, #0
 800653a:	d001      	beq.n	8006540 <_printf_i+0x1c8>
 800653c:	1b80      	subs	r0, r0, r6
 800653e:	6060      	str	r0, [r4, #4]
 8006540:	6863      	ldr	r3, [r4, #4]
 8006542:	6123      	str	r3, [r4, #16]
 8006544:	2300      	movs	r3, #0
 8006546:	9a04      	ldr	r2, [sp, #16]
 8006548:	7013      	strb	r3, [r2, #0]
 800654a:	e7bf      	b.n	80064cc <_printf_i+0x154>
 800654c:	6923      	ldr	r3, [r4, #16]
 800654e:	0032      	movs	r2, r6
 8006550:	9906      	ldr	r1, [sp, #24]
 8006552:	9805      	ldr	r0, [sp, #20]
 8006554:	9d07      	ldr	r5, [sp, #28]
 8006556:	47a8      	blx	r5
 8006558:	1c43      	adds	r3, r0, #1
 800655a:	d0c1      	beq.n	80064e0 <_printf_i+0x168>
 800655c:	6823      	ldr	r3, [r4, #0]
 800655e:	079b      	lsls	r3, r3, #30
 8006560:	d415      	bmi.n	800658e <_printf_i+0x216>
 8006562:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006564:	68e0      	ldr	r0, [r4, #12]
 8006566:	4298      	cmp	r0, r3
 8006568:	dabc      	bge.n	80064e4 <_printf_i+0x16c>
 800656a:	0018      	movs	r0, r3
 800656c:	e7ba      	b.n	80064e4 <_printf_i+0x16c>
 800656e:	0022      	movs	r2, r4
 8006570:	2301      	movs	r3, #1
 8006572:	9906      	ldr	r1, [sp, #24]
 8006574:	9805      	ldr	r0, [sp, #20]
 8006576:	9e07      	ldr	r6, [sp, #28]
 8006578:	3219      	adds	r2, #25
 800657a:	47b0      	blx	r6
 800657c:	1c43      	adds	r3, r0, #1
 800657e:	d0af      	beq.n	80064e0 <_printf_i+0x168>
 8006580:	3501      	adds	r5, #1
 8006582:	68e3      	ldr	r3, [r4, #12]
 8006584:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006586:	1a9b      	subs	r3, r3, r2
 8006588:	42ab      	cmp	r3, r5
 800658a:	dcf0      	bgt.n	800656e <_printf_i+0x1f6>
 800658c:	e7e9      	b.n	8006562 <_printf_i+0x1ea>
 800658e:	2500      	movs	r5, #0
 8006590:	e7f7      	b.n	8006582 <_printf_i+0x20a>
 8006592:	46c0      	nop			; (mov r8, r8)
 8006594:	08006e9d 	.word	0x08006e9d
 8006598:	08006eae 	.word	0x08006eae

0800659c <memchr>:
 800659c:	b2c9      	uxtb	r1, r1
 800659e:	1882      	adds	r2, r0, r2
 80065a0:	4290      	cmp	r0, r2
 80065a2:	d101      	bne.n	80065a8 <memchr+0xc>
 80065a4:	2000      	movs	r0, #0
 80065a6:	4770      	bx	lr
 80065a8:	7803      	ldrb	r3, [r0, #0]
 80065aa:	428b      	cmp	r3, r1
 80065ac:	d0fb      	beq.n	80065a6 <memchr+0xa>
 80065ae:	3001      	adds	r0, #1
 80065b0:	e7f6      	b.n	80065a0 <memchr+0x4>
	...

080065b4 <_free_r>:
 80065b4:	b570      	push	{r4, r5, r6, lr}
 80065b6:	0005      	movs	r5, r0
 80065b8:	2900      	cmp	r1, #0
 80065ba:	d010      	beq.n	80065de <_free_r+0x2a>
 80065bc:	1f0c      	subs	r4, r1, #4
 80065be:	6823      	ldr	r3, [r4, #0]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	da00      	bge.n	80065c6 <_free_r+0x12>
 80065c4:	18e4      	adds	r4, r4, r3
 80065c6:	0028      	movs	r0, r5
 80065c8:	f000 f8d4 	bl	8006774 <__malloc_lock>
 80065cc:	4a1d      	ldr	r2, [pc, #116]	; (8006644 <_free_r+0x90>)
 80065ce:	6813      	ldr	r3, [r2, #0]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d105      	bne.n	80065e0 <_free_r+0x2c>
 80065d4:	6063      	str	r3, [r4, #4]
 80065d6:	6014      	str	r4, [r2, #0]
 80065d8:	0028      	movs	r0, r5
 80065da:	f000 f8d3 	bl	8006784 <__malloc_unlock>
 80065de:	bd70      	pop	{r4, r5, r6, pc}
 80065e0:	42a3      	cmp	r3, r4
 80065e2:	d908      	bls.n	80065f6 <_free_r+0x42>
 80065e4:	6821      	ldr	r1, [r4, #0]
 80065e6:	1860      	adds	r0, r4, r1
 80065e8:	4283      	cmp	r3, r0
 80065ea:	d1f3      	bne.n	80065d4 <_free_r+0x20>
 80065ec:	6818      	ldr	r0, [r3, #0]
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	1841      	adds	r1, r0, r1
 80065f2:	6021      	str	r1, [r4, #0]
 80065f4:	e7ee      	b.n	80065d4 <_free_r+0x20>
 80065f6:	001a      	movs	r2, r3
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d001      	beq.n	8006602 <_free_r+0x4e>
 80065fe:	42a3      	cmp	r3, r4
 8006600:	d9f9      	bls.n	80065f6 <_free_r+0x42>
 8006602:	6811      	ldr	r1, [r2, #0]
 8006604:	1850      	adds	r0, r2, r1
 8006606:	42a0      	cmp	r0, r4
 8006608:	d10b      	bne.n	8006622 <_free_r+0x6e>
 800660a:	6820      	ldr	r0, [r4, #0]
 800660c:	1809      	adds	r1, r1, r0
 800660e:	1850      	adds	r0, r2, r1
 8006610:	6011      	str	r1, [r2, #0]
 8006612:	4283      	cmp	r3, r0
 8006614:	d1e0      	bne.n	80065d8 <_free_r+0x24>
 8006616:	6818      	ldr	r0, [r3, #0]
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	1841      	adds	r1, r0, r1
 800661c:	6011      	str	r1, [r2, #0]
 800661e:	6053      	str	r3, [r2, #4]
 8006620:	e7da      	b.n	80065d8 <_free_r+0x24>
 8006622:	42a0      	cmp	r0, r4
 8006624:	d902      	bls.n	800662c <_free_r+0x78>
 8006626:	230c      	movs	r3, #12
 8006628:	602b      	str	r3, [r5, #0]
 800662a:	e7d5      	b.n	80065d8 <_free_r+0x24>
 800662c:	6821      	ldr	r1, [r4, #0]
 800662e:	1860      	adds	r0, r4, r1
 8006630:	4283      	cmp	r3, r0
 8006632:	d103      	bne.n	800663c <_free_r+0x88>
 8006634:	6818      	ldr	r0, [r3, #0]
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	1841      	adds	r1, r0, r1
 800663a:	6021      	str	r1, [r4, #0]
 800663c:	6063      	str	r3, [r4, #4]
 800663e:	6054      	str	r4, [r2, #4]
 8006640:	e7ca      	b.n	80065d8 <_free_r+0x24>
 8006642:	46c0      	nop			; (mov r8, r8)
 8006644:	200021c8 	.word	0x200021c8

08006648 <_malloc_r>:
 8006648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800664a:	2303      	movs	r3, #3
 800664c:	1ccd      	adds	r5, r1, #3
 800664e:	439d      	bics	r5, r3
 8006650:	3508      	adds	r5, #8
 8006652:	0006      	movs	r6, r0
 8006654:	2d0c      	cmp	r5, #12
 8006656:	d21f      	bcs.n	8006698 <_malloc_r+0x50>
 8006658:	250c      	movs	r5, #12
 800665a:	42a9      	cmp	r1, r5
 800665c:	d81e      	bhi.n	800669c <_malloc_r+0x54>
 800665e:	0030      	movs	r0, r6
 8006660:	f000 f888 	bl	8006774 <__malloc_lock>
 8006664:	4925      	ldr	r1, [pc, #148]	; (80066fc <_malloc_r+0xb4>)
 8006666:	680a      	ldr	r2, [r1, #0]
 8006668:	0014      	movs	r4, r2
 800666a:	2c00      	cmp	r4, #0
 800666c:	d11a      	bne.n	80066a4 <_malloc_r+0x5c>
 800666e:	4f24      	ldr	r7, [pc, #144]	; (8006700 <_malloc_r+0xb8>)
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d104      	bne.n	8006680 <_malloc_r+0x38>
 8006676:	0021      	movs	r1, r4
 8006678:	0030      	movs	r0, r6
 800667a:	f000 f869 	bl	8006750 <_sbrk_r>
 800667e:	6038      	str	r0, [r7, #0]
 8006680:	0029      	movs	r1, r5
 8006682:	0030      	movs	r0, r6
 8006684:	f000 f864 	bl	8006750 <_sbrk_r>
 8006688:	1c43      	adds	r3, r0, #1
 800668a:	d12b      	bne.n	80066e4 <_malloc_r+0x9c>
 800668c:	230c      	movs	r3, #12
 800668e:	0030      	movs	r0, r6
 8006690:	6033      	str	r3, [r6, #0]
 8006692:	f000 f877 	bl	8006784 <__malloc_unlock>
 8006696:	e003      	b.n	80066a0 <_malloc_r+0x58>
 8006698:	2d00      	cmp	r5, #0
 800669a:	dade      	bge.n	800665a <_malloc_r+0x12>
 800669c:	230c      	movs	r3, #12
 800669e:	6033      	str	r3, [r6, #0]
 80066a0:	2000      	movs	r0, #0
 80066a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066a4:	6823      	ldr	r3, [r4, #0]
 80066a6:	1b5b      	subs	r3, r3, r5
 80066a8:	d419      	bmi.n	80066de <_malloc_r+0x96>
 80066aa:	2b0b      	cmp	r3, #11
 80066ac:	d903      	bls.n	80066b6 <_malloc_r+0x6e>
 80066ae:	6023      	str	r3, [r4, #0]
 80066b0:	18e4      	adds	r4, r4, r3
 80066b2:	6025      	str	r5, [r4, #0]
 80066b4:	e003      	b.n	80066be <_malloc_r+0x76>
 80066b6:	6863      	ldr	r3, [r4, #4]
 80066b8:	42a2      	cmp	r2, r4
 80066ba:	d10e      	bne.n	80066da <_malloc_r+0x92>
 80066bc:	600b      	str	r3, [r1, #0]
 80066be:	0030      	movs	r0, r6
 80066c0:	f000 f860 	bl	8006784 <__malloc_unlock>
 80066c4:	0020      	movs	r0, r4
 80066c6:	2207      	movs	r2, #7
 80066c8:	300b      	adds	r0, #11
 80066ca:	1d23      	adds	r3, r4, #4
 80066cc:	4390      	bics	r0, r2
 80066ce:	1ac2      	subs	r2, r0, r3
 80066d0:	4298      	cmp	r0, r3
 80066d2:	d0e6      	beq.n	80066a2 <_malloc_r+0x5a>
 80066d4:	1a1b      	subs	r3, r3, r0
 80066d6:	50a3      	str	r3, [r4, r2]
 80066d8:	e7e3      	b.n	80066a2 <_malloc_r+0x5a>
 80066da:	6053      	str	r3, [r2, #4]
 80066dc:	e7ef      	b.n	80066be <_malloc_r+0x76>
 80066de:	0022      	movs	r2, r4
 80066e0:	6864      	ldr	r4, [r4, #4]
 80066e2:	e7c2      	b.n	800666a <_malloc_r+0x22>
 80066e4:	2303      	movs	r3, #3
 80066e6:	1cc4      	adds	r4, r0, #3
 80066e8:	439c      	bics	r4, r3
 80066ea:	42a0      	cmp	r0, r4
 80066ec:	d0e1      	beq.n	80066b2 <_malloc_r+0x6a>
 80066ee:	1a21      	subs	r1, r4, r0
 80066f0:	0030      	movs	r0, r6
 80066f2:	f000 f82d 	bl	8006750 <_sbrk_r>
 80066f6:	1c43      	adds	r3, r0, #1
 80066f8:	d1db      	bne.n	80066b2 <_malloc_r+0x6a>
 80066fa:	e7c7      	b.n	800668c <_malloc_r+0x44>
 80066fc:	200021c8 	.word	0x200021c8
 8006700:	200021cc 	.word	0x200021cc

08006704 <_realloc_r>:
 8006704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006706:	0007      	movs	r7, r0
 8006708:	000d      	movs	r5, r1
 800670a:	0016      	movs	r6, r2
 800670c:	2900      	cmp	r1, #0
 800670e:	d105      	bne.n	800671c <_realloc_r+0x18>
 8006710:	0011      	movs	r1, r2
 8006712:	f7ff ff99 	bl	8006648 <_malloc_r>
 8006716:	0004      	movs	r4, r0
 8006718:	0020      	movs	r0, r4
 800671a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800671c:	2a00      	cmp	r2, #0
 800671e:	d103      	bne.n	8006728 <_realloc_r+0x24>
 8006720:	f7ff ff48 	bl	80065b4 <_free_r>
 8006724:	0034      	movs	r4, r6
 8006726:	e7f7      	b.n	8006718 <_realloc_r+0x14>
 8006728:	f000 f834 	bl	8006794 <_malloc_usable_size_r>
 800672c:	002c      	movs	r4, r5
 800672e:	42b0      	cmp	r0, r6
 8006730:	d2f2      	bcs.n	8006718 <_realloc_r+0x14>
 8006732:	0031      	movs	r1, r6
 8006734:	0038      	movs	r0, r7
 8006736:	f7ff ff87 	bl	8006648 <_malloc_r>
 800673a:	1e04      	subs	r4, r0, #0
 800673c:	d0ec      	beq.n	8006718 <_realloc_r+0x14>
 800673e:	0029      	movs	r1, r5
 8006740:	0032      	movs	r2, r6
 8006742:	f7ff fbb7 	bl	8005eb4 <memcpy>
 8006746:	0029      	movs	r1, r5
 8006748:	0038      	movs	r0, r7
 800674a:	f7ff ff33 	bl	80065b4 <_free_r>
 800674e:	e7e3      	b.n	8006718 <_realloc_r+0x14>

08006750 <_sbrk_r>:
 8006750:	2300      	movs	r3, #0
 8006752:	b570      	push	{r4, r5, r6, lr}
 8006754:	4d06      	ldr	r5, [pc, #24]	; (8006770 <_sbrk_r+0x20>)
 8006756:	0004      	movs	r4, r0
 8006758:	0008      	movs	r0, r1
 800675a:	602b      	str	r3, [r5, #0]
 800675c:	f7fa f9d8 	bl	8000b10 <_sbrk>
 8006760:	1c43      	adds	r3, r0, #1
 8006762:	d103      	bne.n	800676c <_sbrk_r+0x1c>
 8006764:	682b      	ldr	r3, [r5, #0]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d000      	beq.n	800676c <_sbrk_r+0x1c>
 800676a:	6023      	str	r3, [r4, #0]
 800676c:	bd70      	pop	{r4, r5, r6, pc}
 800676e:	46c0      	nop			; (mov r8, r8)
 8006770:	20002310 	.word	0x20002310

08006774 <__malloc_lock>:
 8006774:	b510      	push	{r4, lr}
 8006776:	4802      	ldr	r0, [pc, #8]	; (8006780 <__malloc_lock+0xc>)
 8006778:	f000 f814 	bl	80067a4 <__retarget_lock_acquire_recursive>
 800677c:	bd10      	pop	{r4, pc}
 800677e:	46c0      	nop			; (mov r8, r8)
 8006780:	20002318 	.word	0x20002318

08006784 <__malloc_unlock>:
 8006784:	b510      	push	{r4, lr}
 8006786:	4802      	ldr	r0, [pc, #8]	; (8006790 <__malloc_unlock+0xc>)
 8006788:	f000 f80d 	bl	80067a6 <__retarget_lock_release_recursive>
 800678c:	bd10      	pop	{r4, pc}
 800678e:	46c0      	nop			; (mov r8, r8)
 8006790:	20002318 	.word	0x20002318

08006794 <_malloc_usable_size_r>:
 8006794:	1f0b      	subs	r3, r1, #4
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	1f18      	subs	r0, r3, #4
 800679a:	2b00      	cmp	r3, #0
 800679c:	da01      	bge.n	80067a2 <_malloc_usable_size_r+0xe>
 800679e:	580b      	ldr	r3, [r1, r0]
 80067a0:	18c0      	adds	r0, r0, r3
 80067a2:	4770      	bx	lr

080067a4 <__retarget_lock_acquire_recursive>:
 80067a4:	4770      	bx	lr

080067a6 <__retarget_lock_release_recursive>:
 80067a6:	4770      	bx	lr

080067a8 <_init>:
 80067a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067aa:	46c0      	nop			; (mov r8, r8)
 80067ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067ae:	bc08      	pop	{r3}
 80067b0:	469e      	mov	lr, r3
 80067b2:	4770      	bx	lr

080067b4 <_fini>:
 80067b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067b6:	46c0      	nop			; (mov r8, r8)
 80067b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067ba:	bc08      	pop	{r3}
 80067bc:	469e      	mov	lr, r3
 80067be:	4770      	bx	lr
