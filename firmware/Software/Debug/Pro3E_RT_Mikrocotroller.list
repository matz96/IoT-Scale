
Pro3E_RT_Mikrocotroller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006578  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000069c  08006638  08006638  00016638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006cd4  08006cd4  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08006cd4  08006cd4  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006cd4  08006cd4  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006cd4  08006cd4  00016cd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006cd8  08006cd8  00016cd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08006cdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002368  20000018  08006cf4  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002380  08006cf4  00022380  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b29c  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038c7  00000000  00000000  0003b2dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015c0  00000000  00000000  0003eba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001420  00000000  00000000  00040168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013fd2  00000000  00000000  00041588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018bad  00000000  00000000  0005555a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00073529  00000000  00000000  0006e107  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e1630  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e58  00000000  00000000  000e1684  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000018 	.word	0x20000018
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006620 	.word	0x08006620

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000001c 	.word	0x2000001c
 8000104:	08006620 	.word	0x08006620

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <app_main>:
uint32_t dist = 0;
uint32_t current = 0;


void app_main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af02      	add	r7, sp, #8
	ReglerSemaphore = xSemaphoreCreateBinary();
 8000226:	2203      	movs	r2, #3
 8000228:	2100      	movs	r1, #0
 800022a:	2001      	movs	r0, #1
 800022c:	f003 ff52 	bl	80040d4 <xQueueGenericCreate>
 8000230:	0002      	movs	r2, r0
 8000232:	4b07      	ldr	r3, [pc, #28]	; (8000250 <app_main+0x30>)
 8000234:	601a      	str	r2, [r3, #0]

	//xTaskCreate(I2CTask, "I2C-Task", (configMINIMAL_STACK_SIZE + 80), NULL, (tskIDLE_PRIORITY + 2), NULL);
	//xTaskCreate(I2C2Task, "I2C2-Task", (configMINIMAL_STACK_SIZE + 80), NULL, (tskIDLE_PRIORITY + 1), NULL);
	xTaskCreate(MainTask, "Main-Task", (configMINIMAL_STACK_SIZE + 80), NULL, (tskIDLE_PRIORITY + 3), NULL);
 8000236:	4907      	ldr	r1, [pc, #28]	; (8000254 <app_main+0x34>)
 8000238:	4807      	ldr	r0, [pc, #28]	; (8000258 <app_main+0x38>)
 800023a:	2300      	movs	r3, #0
 800023c:	9301      	str	r3, [sp, #4]
 800023e:	2303      	movs	r3, #3
 8000240:	9300      	str	r3, [sp, #0]
 8000242:	2300      	movs	r3, #0
 8000244:	22d0      	movs	r2, #208	; 0xd0
 8000246:	f004 fbad 	bl	80049a4 <xTaskCreate>
	//xTaskCreate(ReglerISTTask, "Regler-Task", (configMINIMAL_STACK_SIZE + 80), NULL, (tskIDLE_PRIORITY + 2), NULL);
	vTaskStartScheduler();
 800024a:	f004 fd07 	bl	8004c5c <vTaskStartScheduler>
	/* The FreeRTOS scheduler should never return to here, except on out of memory at creating the idle task! */
	for (;;) ;
 800024e:	e7fe      	b.n	800024e <app_main+0x2e>
 8000250:	2000215c 	.word	0x2000215c
 8000254:	08006638 	.word	0x08006638
 8000258:	080002a1 	.word	0x080002a1

0800025c <TIM7_IRQHandler>:
}

/*
 * Timer for PI-Controller
 */
void TIM7_IRQHandler(void){
 800025c:	b580      	push	{r7, lr}
 800025e:	b082      	sub	sp, #8
 8000260:	af00      	add	r7, sp, #0
	portBASE_TYPE higherPriorityTaskWoken = 0;
 8000262:	2300      	movs	r3, #0
 8000264:	607b      	str	r3, [r7, #4]
	if(ReglerSemaphore != NULL){
 8000266:	4b0c      	ldr	r3, [pc, #48]	; (8000298 <TIM7_IRQHandler+0x3c>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	2b00      	cmp	r3, #0
 800026c:	d006      	beq.n	800027c <TIM7_IRQHandler+0x20>
		xSemaphoreGiveFromISR(ReglerSemaphore, & higherPriorityTaskWoken);
 800026e:	4b0a      	ldr	r3, [pc, #40]	; (8000298 <TIM7_IRQHandler+0x3c>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	1d3a      	adds	r2, r7, #4
 8000274:	0011      	movs	r1, r2
 8000276:	0018      	movs	r0, r3
 8000278:	f004 f8be 	bl	80043f8 <xQueueGiveFromISR>
	}
	if (higherPriorityTaskWoken != 0){
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	2b00      	cmp	r3, #0
 8000280:	d001      	beq.n	8000286 <TIM7_IRQHandler+0x2a>
				taskYIELD();
 8000282:	f005 fced 	bl	8005c60 <vPortYield>
	}
	//Clear TIM7 Update Event Flag
	TIM7->SR = ~TIM_IT_UPDATE;
 8000286:	4b05      	ldr	r3, [pc, #20]	; (800029c <TIM7_IRQHandler+0x40>)
 8000288:	2202      	movs	r2, #2
 800028a:	4252      	negs	r2, r2
 800028c:	611a      	str	r2, [r3, #16]
}
 800028e:	46c0      	nop			; (mov r8, r8)
 8000290:	46bd      	mov	sp, r7
 8000292:	b002      	add	sp, #8
 8000294:	bd80      	pop	{r7, pc}
 8000296:	46c0      	nop			; (mov r8, r8)
 8000298:	2000215c 	.word	0x2000215c
 800029c:	40001400 	.word	0x40001400

080002a0 <MainTask>:


static void MainTask(__attribute__ ((unused)) void *pvParameters)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b086      	sub	sp, #24
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
	oled_init();
 80002a8:	f000 f816 	bl	80002d8 <oled_init>
	char text[15];
	while (1) {
		//ssd1306_SetCursor(OLED_BORDER_OFFSET, (line-1)*OLED_LINE_HEIGHT+OLED_BORDER_OFFSET);
		ssd1306_Fill(White);
 80002ac:	2001      	movs	r0, #1
 80002ae:	f005 ffcb 	bl	8006248 <ssd1306_Fill>
		ssd1306_WriteString(text,  Font_6x8, Black);
 80002b2:	4a08      	ldr	r2, [pc, #32]	; (80002d4 <MainTask+0x34>)
 80002b4:	2308      	movs	r3, #8
 80002b6:	18f8      	adds	r0, r7, r3
 80002b8:	2300      	movs	r3, #0
 80002ba:	6811      	ldr	r1, [r2, #0]
 80002bc:	6852      	ldr	r2, [r2, #4]
 80002be:	f006 f911 	bl	80064e4 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 80002c2:	f005 ffe5 	bl	8006290 <ssd1306_UpdateScreen>
			snprintf(text, sizeof(text), "Gewicht: %3d gr", (int)(weight-tara));
		}
		oled_printf(text, 1, Black);
		snprintf(text, sizeof(text), "Dist: %d", (int)dist);
		oled_printf(text, 2, Black);*/
		HAL_Delay(2000);
 80002c6:	23fa      	movs	r3, #250	; 0xfa
 80002c8:	00db      	lsls	r3, r3, #3
 80002ca:	0018      	movs	r0, r3
 80002cc:	f000 fd72 	bl	8000db4 <HAL_Delay>
		ssd1306_Fill(White);
 80002d0:	e7ec      	b.n	80002ac <MainTask+0xc>
 80002d2:	46c0      	nop			; (mov r8, r8)
 80002d4:	20000010 	.word	0x20000010

080002d8 <oled_init>:
#include "semphr.h"
#include "ssd1306.h"
#include "stdio.h"
#include "stdarg.h"

void oled_init(){
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
	ssd1306_Init();
 80002dc:	f005 ff48 	bl	8006170 <ssd1306_Init>
	ssd1306_SetDisplayOn(1);
 80002e0:	2001      	movs	r0, #1
 80002e2:	f006 f941 	bl	8006568 <ssd1306_SetDisplayOn>
	ssd1306_Fill(White);
 80002e6:	2001      	movs	r0, #1
 80002e8:	f005 ffae 	bl	8006248 <ssd1306_Fill>
	OLEDSemaphore = xSemaphoreCreateBinary();
 80002ec:	2203      	movs	r2, #3
 80002ee:	2100      	movs	r1, #0
 80002f0:	2001      	movs	r0, #1
 80002f2:	f003 feef 	bl	80040d4 <xQueueGenericCreate>
 80002f6:	0002      	movs	r2, r0
 80002f8:	4b05      	ldr	r3, [pc, #20]	; (8000310 <oled_init+0x38>)
 80002fa:	601a      	str	r2, [r3, #0]
	xSemaphoreGive(OLEDSemaphore);
 80002fc:	4b04      	ldr	r3, [pc, #16]	; (8000310 <oled_init+0x38>)
 80002fe:	6818      	ldr	r0, [r3, #0]
 8000300:	2300      	movs	r3, #0
 8000302:	2200      	movs	r2, #0
 8000304:	2100      	movs	r1, #0
 8000306:	f003 ff42 	bl	800418e <xQueueGenericSend>
}
 800030a:	46c0      	nop			; (mov r8, r8)
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}
 8000310:	20002184 	.word	0x20002184

08000314 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000318:	f000 fce8 	bl	8000cec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800031c:	f000 f844 	bl	80003a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000320:	f000 fa94 	bl	800084c <MX_GPIO_Init>
  MX_ADC_Init();
 8000324:	f000 f8be 	bl	80004a4 <MX_ADC_Init>
  MX_TIM1_Init();
 8000328:	f000 f99a 	bl	8000660 <MX_TIM1_Init>
  MX_I2C2_Init();
 800032c:	f000 f958 	bl	80005e0 <MX_I2C2_Init>
  MX_TIM6_Init();
 8000330:	f000 fa48 	bl	80007c4 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000334:	f000 fa68 	bl	8000808 <MX_TIM7_Init>
  MX_I2C1_Init();
 8000338:	f000 f910 	bl	800055c <MX_I2C1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800033c:	f000 f89c 	bl	8000478 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000340:	4b12      	ldr	r3, [pc, #72]	; (800038c <main+0x78>)
 8000342:	210c      	movs	r1, #12
 8000344:	0018      	movs	r0, r3
 8000346:	f002 fe1f 	bl	8002f88 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start(&htim6);
 800034a:	4b11      	ldr	r3, [pc, #68]	; (8000390 <main+0x7c>)
 800034c:	0018      	movs	r0, r3
 800034e:	f002 fd33 	bl	8002db8 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim7);
 8000352:	4b10      	ldr	r3, [pc, #64]	; (8000394 <main+0x80>)
 8000354:	0018      	movs	r0, r3
 8000356:	f002 fd73 	bl	8002e40 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start(&hadc);
 800035a:	4b0f      	ldr	r3, [pc, #60]	; (8000398 <main+0x84>)
 800035c:	0018      	movs	r0, r3
 800035e:	f000 fe8d 	bl	800107c <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8000362:	2301      	movs	r3, #1
 8000364:	425a      	negs	r2, r3
 8000366:	4b0c      	ldr	r3, [pc, #48]	; (8000398 <main+0x84>)
 8000368:	0011      	movs	r1, r2
 800036a:	0018      	movs	r0, r3
 800036c:	f000 feda 	bl	8001124 <HAL_ADC_PollForConversion>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000370:	f003 fc3c 	bl	8003bec <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000374:	4a09      	ldr	r2, [pc, #36]	; (800039c <main+0x88>)
 8000376:	4b0a      	ldr	r3, [pc, #40]	; (80003a0 <main+0x8c>)
 8000378:	2100      	movs	r1, #0
 800037a:	0018      	movs	r0, r3
 800037c:	f003 fc62 	bl	8003c44 <osThreadNew>
 8000380:	0002      	movs	r2, r0
 8000382:	4b08      	ldr	r3, [pc, #32]	; (80003a4 <main+0x90>)
 8000384:	601a      	str	r2, [r3, #0]
  osKernelStart();

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  app_main();
 8000386:	f7ff ff4b 	bl	8000220 <app_main>
  while (1)
 800038a:	e7fe      	b.n	800038a <main+0x76>
 800038c:	2000226c 	.word	0x2000226c
 8000390:	20002224 	.word	0x20002224
 8000394:	200022f4 	.word	0x200022f4
 8000398:	200022b4 	.word	0x200022b4
 800039c:	08006688 	.word	0x08006688
 80003a0:	08000945 	.word	0x08000945
 80003a4:	20002188 	.word	0x20002188

080003a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003a8:	b590      	push	{r4, r7, lr}
 80003aa:	b097      	sub	sp, #92	; 0x5c
 80003ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003ae:	2428      	movs	r4, #40	; 0x28
 80003b0:	193b      	adds	r3, r7, r4
 80003b2:	0018      	movs	r0, r3
 80003b4:	2330      	movs	r3, #48	; 0x30
 80003b6:	001a      	movs	r2, r3
 80003b8:	2100      	movs	r1, #0
 80003ba:	f006 f928 	bl	800660e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003be:	2318      	movs	r3, #24
 80003c0:	18fb      	adds	r3, r7, r3
 80003c2:	0018      	movs	r0, r3
 80003c4:	2310      	movs	r3, #16
 80003c6:	001a      	movs	r2, r3
 80003c8:	2100      	movs	r1, #0
 80003ca:	f006 f920 	bl	800660e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003ce:	1d3b      	adds	r3, r7, #4
 80003d0:	0018      	movs	r0, r3
 80003d2:	2314      	movs	r3, #20
 80003d4:	001a      	movs	r2, r3
 80003d6:	2100      	movs	r1, #0
 80003d8:	f006 f919 	bl	800660e <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 80003dc:	0021      	movs	r1, r4
 80003de:	187b      	adds	r3, r7, r1
 80003e0:	2212      	movs	r2, #18
 80003e2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003e4:	187b      	adds	r3, r7, r1
 80003e6:	2201      	movs	r2, #1
 80003e8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80003ea:	187b      	adds	r3, r7, r1
 80003ec:	2201      	movs	r2, #1
 80003ee:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003f0:	187b      	adds	r3, r7, r1
 80003f2:	2210      	movs	r2, #16
 80003f4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80003f6:	187b      	adds	r3, r7, r1
 80003f8:	2210      	movs	r2, #16
 80003fa:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003fc:	187b      	adds	r3, r7, r1
 80003fe:	2202      	movs	r2, #2
 8000400:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000402:	187b      	adds	r3, r7, r1
 8000404:	2280      	movs	r2, #128	; 0x80
 8000406:	0212      	lsls	r2, r2, #8
 8000408:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800040a:	187b      	adds	r3, r7, r1
 800040c:	2280      	movs	r2, #128	; 0x80
 800040e:	0352      	lsls	r2, r2, #13
 8000410:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000412:	187b      	adds	r3, r7, r1
 8000414:	2200      	movs	r2, #0
 8000416:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000418:	187b      	adds	r3, r7, r1
 800041a:	0018      	movs	r0, r3
 800041c:	f001 ff4c 	bl	80022b8 <HAL_RCC_OscConfig>
 8000420:	1e03      	subs	r3, r0, #0
 8000422:	d001      	beq.n	8000428 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000424:	f000 fa96 	bl	8000954 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000428:	2118      	movs	r1, #24
 800042a:	187b      	adds	r3, r7, r1
 800042c:	2207      	movs	r2, #7
 800042e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000430:	187b      	adds	r3, r7, r1
 8000432:	2202      	movs	r2, #2
 8000434:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000436:	187b      	adds	r3, r7, r1
 8000438:	2200      	movs	r2, #0
 800043a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800043c:	187b      	adds	r3, r7, r1
 800043e:	2200      	movs	r2, #0
 8000440:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000442:	187b      	adds	r3, r7, r1
 8000444:	2101      	movs	r1, #1
 8000446:	0018      	movs	r0, r3
 8000448:	f002 fa54 	bl	80028f4 <HAL_RCC_ClockConfig>
 800044c:	1e03      	subs	r3, r0, #0
 800044e:	d001      	beq.n	8000454 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000450:	f000 fa80 	bl	8000954 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000454:	1d3b      	adds	r3, r7, #4
 8000456:	2220      	movs	r2, #32
 8000458:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 800045a:	1d3b      	adds	r3, r7, #4
 800045c:	2210      	movs	r2, #16
 800045e:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000460:	1d3b      	adds	r3, r7, #4
 8000462:	0018      	movs	r0, r3
 8000464:	f002 fb7a 	bl	8002b5c <HAL_RCCEx_PeriphCLKConfig>
 8000468:	1e03      	subs	r3, r0, #0
 800046a:	d001      	beq.n	8000470 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800046c:	f000 fa72 	bl	8000954 <Error_Handler>
  }
}
 8000470:	46c0      	nop			; (mov r8, r8)
 8000472:	46bd      	mov	sp, r7
 8000474:	b017      	add	sp, #92	; 0x5c
 8000476:	bd90      	pop	{r4, r7, pc}

08000478 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0
  /* TIM7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM7_IRQn, 3, 0);
 800047c:	2200      	movs	r2, #0
 800047e:	2103      	movs	r1, #3
 8000480:	2012      	movs	r0, #18
 8000482:	f001 f90d 	bl	80016a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000486:	2012      	movs	r0, #18
 8000488:	f001 f91f 	bl	80016ca <HAL_NVIC_EnableIRQ>
  /* EXTI2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 3, 0);
 800048c:	2200      	movs	r2, #0
 800048e:	2103      	movs	r1, #3
 8000490:	2006      	movs	r0, #6
 8000492:	f001 f905 	bl	80016a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8000496:	2006      	movs	r0, #6
 8000498:	f001 f917 	bl	80016ca <HAL_NVIC_EnableIRQ>
}
 800049c:	46c0      	nop			; (mov r8, r8)
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}
	...

080004a4 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b084      	sub	sp, #16
 80004a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004aa:	1d3b      	adds	r3, r7, #4
 80004ac:	0018      	movs	r0, r3
 80004ae:	230c      	movs	r3, #12
 80004b0:	001a      	movs	r2, r3
 80004b2:	2100      	movs	r1, #0
 80004b4:	f006 f8ab 	bl	800660e <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80004b8:	4b26      	ldr	r3, [pc, #152]	; (8000554 <MX_ADC_Init+0xb0>)
 80004ba:	4a27      	ldr	r2, [pc, #156]	; (8000558 <MX_ADC_Init+0xb4>)
 80004bc:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80004be:	4b25      	ldr	r3, [pc, #148]	; (8000554 <MX_ADC_Init+0xb0>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80004c4:	4b23      	ldr	r3, [pc, #140]	; (8000554 <MX_ADC_Init+0xb0>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004ca:	4b22      	ldr	r3, [pc, #136]	; (8000554 <MX_ADC_Init+0xb0>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80004d0:	4b20      	ldr	r3, [pc, #128]	; (8000554 <MX_ADC_Init+0xb0>)
 80004d2:	2201      	movs	r2, #1
 80004d4:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80004d6:	4b1f      	ldr	r3, [pc, #124]	; (8000554 <MX_ADC_Init+0xb0>)
 80004d8:	2204      	movs	r2, #4
 80004da:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80004dc:	4b1d      	ldr	r3, [pc, #116]	; (8000554 <MX_ADC_Init+0xb0>)
 80004de:	2200      	movs	r2, #0
 80004e0:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80004e2:	4b1c      	ldr	r3, [pc, #112]	; (8000554 <MX_ADC_Init+0xb0>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80004e8:	4b1a      	ldr	r3, [pc, #104]	; (8000554 <MX_ADC_Init+0xb0>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80004ee:	4b19      	ldr	r3, [pc, #100]	; (8000554 <MX_ADC_Init+0xb0>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004f4:	4b17      	ldr	r3, [pc, #92]	; (8000554 <MX_ADC_Init+0xb0>)
 80004f6:	22c2      	movs	r2, #194	; 0xc2
 80004f8:	32ff      	adds	r2, #255	; 0xff
 80004fa:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004fc:	4b15      	ldr	r3, [pc, #84]	; (8000554 <MX_ADC_Init+0xb0>)
 80004fe:	2200      	movs	r2, #0
 8000500:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000502:	4b14      	ldr	r3, [pc, #80]	; (8000554 <MX_ADC_Init+0xb0>)
 8000504:	2224      	movs	r2, #36	; 0x24
 8000506:	2100      	movs	r1, #0
 8000508:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800050a:	4b12      	ldr	r3, [pc, #72]	; (8000554 <MX_ADC_Init+0xb0>)
 800050c:	2201      	movs	r2, #1
 800050e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000510:	4b10      	ldr	r3, [pc, #64]	; (8000554 <MX_ADC_Init+0xb0>)
 8000512:	0018      	movs	r0, r3
 8000514:	f000 fc72 	bl	8000dfc <HAL_ADC_Init>
 8000518:	1e03      	subs	r3, r0, #0
 800051a:	d001      	beq.n	8000520 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 800051c:	f000 fa1a 	bl	8000954 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000520:	1d3b      	adds	r3, r7, #4
 8000522:	2200      	movs	r2, #0
 8000524:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000526:	1d3b      	adds	r3, r7, #4
 8000528:	2280      	movs	r2, #128	; 0x80
 800052a:	0152      	lsls	r2, r2, #5
 800052c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800052e:	1d3b      	adds	r3, r7, #4
 8000530:	2280      	movs	r2, #128	; 0x80
 8000532:	0552      	lsls	r2, r2, #21
 8000534:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000536:	1d3a      	adds	r2, r7, #4
 8000538:	4b06      	ldr	r3, [pc, #24]	; (8000554 <MX_ADC_Init+0xb0>)
 800053a:	0011      	movs	r1, r2
 800053c:	0018      	movs	r0, r3
 800053e:	f000 fe89 	bl	8001254 <HAL_ADC_ConfigChannel>
 8000542:	1e03      	subs	r3, r0, #0
 8000544:	d001      	beq.n	800054a <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8000546:	f000 fa05 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800054a:	46c0      	nop			; (mov r8, r8)
 800054c:	46bd      	mov	sp, r7
 800054e:	b004      	add	sp, #16
 8000550:	bd80      	pop	{r7, pc}
 8000552:	46c0      	nop			; (mov r8, r8)
 8000554:	200022b4 	.word	0x200022b4
 8000558:	40012400 	.word	0x40012400

0800055c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000560:	4b1c      	ldr	r3, [pc, #112]	; (80005d4 <MX_I2C1_Init+0x78>)
 8000562:	4a1d      	ldr	r2, [pc, #116]	; (80005d8 <MX_I2C1_Init+0x7c>)
 8000564:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B0DBFF;
 8000566:	4b1b      	ldr	r3, [pc, #108]	; (80005d4 <MX_I2C1_Init+0x78>)
 8000568:	4a1c      	ldr	r2, [pc, #112]	; (80005dc <MX_I2C1_Init+0x80>)
 800056a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800056c:	4b19      	ldr	r3, [pc, #100]	; (80005d4 <MX_I2C1_Init+0x78>)
 800056e:	2200      	movs	r2, #0
 8000570:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000572:	4b18      	ldr	r3, [pc, #96]	; (80005d4 <MX_I2C1_Init+0x78>)
 8000574:	2201      	movs	r2, #1
 8000576:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000578:	4b16      	ldr	r3, [pc, #88]	; (80005d4 <MX_I2C1_Init+0x78>)
 800057a:	2200      	movs	r2, #0
 800057c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800057e:	4b15      	ldr	r3, [pc, #84]	; (80005d4 <MX_I2C1_Init+0x78>)
 8000580:	2200      	movs	r2, #0
 8000582:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000584:	4b13      	ldr	r3, [pc, #76]	; (80005d4 <MX_I2C1_Init+0x78>)
 8000586:	2200      	movs	r2, #0
 8000588:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800058a:	4b12      	ldr	r3, [pc, #72]	; (80005d4 <MX_I2C1_Init+0x78>)
 800058c:	2200      	movs	r2, #0
 800058e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000590:	4b10      	ldr	r3, [pc, #64]	; (80005d4 <MX_I2C1_Init+0x78>)
 8000592:	2200      	movs	r2, #0
 8000594:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000596:	4b0f      	ldr	r3, [pc, #60]	; (80005d4 <MX_I2C1_Init+0x78>)
 8000598:	0018      	movs	r0, r3
 800059a:	f001 fa41 	bl	8001a20 <HAL_I2C_Init>
 800059e:	1e03      	subs	r3, r0, #0
 80005a0:	d001      	beq.n	80005a6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80005a2:	f000 f9d7 	bl	8000954 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 80005a6:	2380      	movs	r3, #128	; 0x80
 80005a8:	015a      	lsls	r2, r3, #5
 80005aa:	4b0a      	ldr	r3, [pc, #40]	; (80005d4 <MX_I2C1_Init+0x78>)
 80005ac:	0011      	movs	r1, r2
 80005ae:	0018      	movs	r0, r3
 80005b0:	f001 fdea 	bl	8002188 <HAL_I2CEx_ConfigAnalogFilter>
 80005b4:	1e03      	subs	r3, r0, #0
 80005b6:	d001      	beq.n	80005bc <MX_I2C1_Init+0x60>
  {
    Error_Handler();
 80005b8:	f000 f9cc 	bl	8000954 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80005bc:	4b05      	ldr	r3, [pc, #20]	; (80005d4 <MX_I2C1_Init+0x78>)
 80005be:	2100      	movs	r1, #0
 80005c0:	0018      	movs	r0, r3
 80005c2:	f001 fe2d 	bl	8002220 <HAL_I2CEx_ConfigDigitalFilter>
 80005c6:	1e03      	subs	r3, r0, #0
 80005c8:	d001      	beq.n	80005ce <MX_I2C1_Init+0x72>
  {
    Error_Handler();
 80005ca:	f000 f9c3 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005ce:	46c0      	nop			; (mov r8, r8)
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	2000218c 	.word	0x2000218c
 80005d8:	40005400 	.word	0x40005400
 80005dc:	00b0dbff 	.word	0x00b0dbff

080005e0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80005e4:	4b1b      	ldr	r3, [pc, #108]	; (8000654 <MX_I2C2_Init+0x74>)
 80005e6:	4a1c      	ldr	r2, [pc, #112]	; (8000658 <MX_I2C2_Init+0x78>)
 80005e8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x2010091A;
 80005ea:	4b1a      	ldr	r3, [pc, #104]	; (8000654 <MX_I2C2_Init+0x74>)
 80005ec:	4a1b      	ldr	r2, [pc, #108]	; (800065c <MX_I2C2_Init+0x7c>)
 80005ee:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80005f0:	4b18      	ldr	r3, [pc, #96]	; (8000654 <MX_I2C2_Init+0x74>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005f6:	4b17      	ldr	r3, [pc, #92]	; (8000654 <MX_I2C2_Init+0x74>)
 80005f8:	2201      	movs	r2, #1
 80005fa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005fc:	4b15      	ldr	r3, [pc, #84]	; (8000654 <MX_I2C2_Init+0x74>)
 80005fe:	2200      	movs	r2, #0
 8000600:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000602:	4b14      	ldr	r3, [pc, #80]	; (8000654 <MX_I2C2_Init+0x74>)
 8000604:	2200      	movs	r2, #0
 8000606:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000608:	4b12      	ldr	r3, [pc, #72]	; (8000654 <MX_I2C2_Init+0x74>)
 800060a:	2200      	movs	r2, #0
 800060c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800060e:	4b11      	ldr	r3, [pc, #68]	; (8000654 <MX_I2C2_Init+0x74>)
 8000610:	2200      	movs	r2, #0
 8000612:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000614:	4b0f      	ldr	r3, [pc, #60]	; (8000654 <MX_I2C2_Init+0x74>)
 8000616:	2200      	movs	r2, #0
 8000618:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800061a:	4b0e      	ldr	r3, [pc, #56]	; (8000654 <MX_I2C2_Init+0x74>)
 800061c:	0018      	movs	r0, r3
 800061e:	f001 f9ff 	bl	8001a20 <HAL_I2C_Init>
 8000622:	1e03      	subs	r3, r0, #0
 8000624:	d001      	beq.n	800062a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000626:	f000 f995 	bl	8000954 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800062a:	4b0a      	ldr	r3, [pc, #40]	; (8000654 <MX_I2C2_Init+0x74>)
 800062c:	2100      	movs	r1, #0
 800062e:	0018      	movs	r0, r3
 8000630:	f001 fdaa 	bl	8002188 <HAL_I2CEx_ConfigAnalogFilter>
 8000634:	1e03      	subs	r3, r0, #0
 8000636:	d001      	beq.n	800063c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000638:	f000 f98c 	bl	8000954 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800063c:	4b05      	ldr	r3, [pc, #20]	; (8000654 <MX_I2C2_Init+0x74>)
 800063e:	2100      	movs	r1, #0
 8000640:	0018      	movs	r0, r3
 8000642:	f001 fded 	bl	8002220 <HAL_I2CEx_ConfigDigitalFilter>
 8000646:	1e03      	subs	r3, r0, #0
 8000648:	d001      	beq.n	800064e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800064a:	f000 f983 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800064e:	46c0      	nop			; (mov r8, r8)
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	200021d8 	.word	0x200021d8
 8000658:	40005800 	.word	0x40005800
 800065c:	2010091a 	.word	0x2010091a

08000660 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b096      	sub	sp, #88	; 0x58
 8000664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000666:	2348      	movs	r3, #72	; 0x48
 8000668:	18fb      	adds	r3, r7, r3
 800066a:	0018      	movs	r0, r3
 800066c:	2310      	movs	r3, #16
 800066e:	001a      	movs	r2, r3
 8000670:	2100      	movs	r1, #0
 8000672:	f005 ffcc 	bl	800660e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000676:	2340      	movs	r3, #64	; 0x40
 8000678:	18fb      	adds	r3, r7, r3
 800067a:	0018      	movs	r0, r3
 800067c:	2308      	movs	r3, #8
 800067e:	001a      	movs	r2, r3
 8000680:	2100      	movs	r1, #0
 8000682:	f005 ffc4 	bl	800660e <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000686:	2324      	movs	r3, #36	; 0x24
 8000688:	18fb      	adds	r3, r7, r3
 800068a:	0018      	movs	r0, r3
 800068c:	231c      	movs	r3, #28
 800068e:	001a      	movs	r2, r3
 8000690:	2100      	movs	r1, #0
 8000692:	f005 ffbc 	bl	800660e <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000696:	1d3b      	adds	r3, r7, #4
 8000698:	0018      	movs	r0, r3
 800069a:	2320      	movs	r3, #32
 800069c:	001a      	movs	r2, r3
 800069e:	2100      	movs	r1, #0
 80006a0:	f005 ffb5 	bl	800660e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006a4:	4b45      	ldr	r3, [pc, #276]	; (80007bc <MX_TIM1_Init+0x15c>)
 80006a6:	4a46      	ldr	r2, [pc, #280]	; (80007c0 <MX_TIM1_Init+0x160>)
 80006a8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80006aa:	4b44      	ldr	r3, [pc, #272]	; (80007bc <MX_TIM1_Init+0x15c>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006b0:	4b42      	ldr	r3, [pc, #264]	; (80007bc <MX_TIM1_Init+0x15c>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000;
 80006b6:	4b41      	ldr	r3, [pc, #260]	; (80007bc <MX_TIM1_Init+0x15c>)
 80006b8:	22fa      	movs	r2, #250	; 0xfa
 80006ba:	00d2      	lsls	r2, r2, #3
 80006bc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006be:	4b3f      	ldr	r3, [pc, #252]	; (80007bc <MX_TIM1_Init+0x15c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006c4:	4b3d      	ldr	r3, [pc, #244]	; (80007bc <MX_TIM1_Init+0x15c>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80006ca:	4b3c      	ldr	r3, [pc, #240]	; (80007bc <MX_TIM1_Init+0x15c>)
 80006cc:	2280      	movs	r2, #128	; 0x80
 80006ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80006d0:	4b3a      	ldr	r3, [pc, #232]	; (80007bc <MX_TIM1_Init+0x15c>)
 80006d2:	0018      	movs	r0, r3
 80006d4:	f002 fb20 	bl	8002d18 <HAL_TIM_Base_Init>
 80006d8:	1e03      	subs	r3, r0, #0
 80006da:	d001      	beq.n	80006e0 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 80006dc:	f000 f93a 	bl	8000954 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006e0:	2148      	movs	r1, #72	; 0x48
 80006e2:	187b      	adds	r3, r7, r1
 80006e4:	2280      	movs	r2, #128	; 0x80
 80006e6:	0152      	lsls	r2, r2, #5
 80006e8:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80006ea:	187a      	adds	r2, r7, r1
 80006ec:	4b33      	ldr	r3, [pc, #204]	; (80007bc <MX_TIM1_Init+0x15c>)
 80006ee:	0011      	movs	r1, r2
 80006f0:	0018      	movs	r0, r3
 80006f2:	f002 fdc1 	bl	8003278 <HAL_TIM_ConfigClockSource>
 80006f6:	1e03      	subs	r3, r0, #0
 80006f8:	d001      	beq.n	80006fe <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80006fa:	f000 f92b 	bl	8000954 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80006fe:	4b2f      	ldr	r3, [pc, #188]	; (80007bc <MX_TIM1_Init+0x15c>)
 8000700:	0018      	movs	r0, r3
 8000702:	f002 fbe9 	bl	8002ed8 <HAL_TIM_PWM_Init>
 8000706:	1e03      	subs	r3, r0, #0
 8000708:	d001      	beq.n	800070e <MX_TIM1_Init+0xae>
  {
    Error_Handler();
 800070a:	f000 f923 	bl	8000954 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800070e:	2140      	movs	r1, #64	; 0x40
 8000710:	187b      	adds	r3, r7, r1
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000716:	187b      	adds	r3, r7, r1
 8000718:	2200      	movs	r2, #0
 800071a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800071c:	187a      	adds	r2, r7, r1
 800071e:	4b27      	ldr	r3, [pc, #156]	; (80007bc <MX_TIM1_Init+0x15c>)
 8000720:	0011      	movs	r1, r2
 8000722:	0018      	movs	r0, r3
 8000724:	f003 f9ac 	bl	8003a80 <HAL_TIMEx_MasterConfigSynchronization>
 8000728:	1e03      	subs	r3, r0, #0
 800072a:	d001      	beq.n	8000730 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 800072c:	f000 f912 	bl	8000954 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000730:	2124      	movs	r1, #36	; 0x24
 8000732:	187b      	adds	r3, r7, r1
 8000734:	2260      	movs	r2, #96	; 0x60
 8000736:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000738:	187b      	adds	r3, r7, r1
 800073a:	2200      	movs	r2, #0
 800073c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800073e:	187b      	adds	r3, r7, r1
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000744:	187b      	adds	r3, r7, r1
 8000746:	2200      	movs	r2, #0
 8000748:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800074a:	187b      	adds	r3, r7, r1
 800074c:	2200      	movs	r2, #0
 800074e:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000750:	187b      	adds	r3, r7, r1
 8000752:	2200      	movs	r2, #0
 8000754:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000756:	1879      	adds	r1, r7, r1
 8000758:	4b18      	ldr	r3, [pc, #96]	; (80007bc <MX_TIM1_Init+0x15c>)
 800075a:	220c      	movs	r2, #12
 800075c:	0018      	movs	r0, r3
 800075e:	f002 fcc5 	bl	80030ec <HAL_TIM_PWM_ConfigChannel>
 8000762:	1e03      	subs	r3, r0, #0
 8000764:	d001      	beq.n	800076a <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 8000766:	f000 f8f5 	bl	8000954 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800076a:	1d3b      	adds	r3, r7, #4
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000770:	1d3b      	adds	r3, r7, #4
 8000772:	2200      	movs	r2, #0
 8000774:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000776:	1d3b      	adds	r3, r7, #4
 8000778:	2200      	movs	r2, #0
 800077a:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800077c:	1d3b      	adds	r3, r7, #4
 800077e:	2200      	movs	r2, #0
 8000780:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000782:	1d3b      	adds	r3, r7, #4
 8000784:	2200      	movs	r2, #0
 8000786:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000788:	1d3b      	adds	r3, r7, #4
 800078a:	2280      	movs	r2, #128	; 0x80
 800078c:	0192      	lsls	r2, r2, #6
 800078e:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000790:	1d3b      	adds	r3, r7, #4
 8000792:	2200      	movs	r2, #0
 8000794:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000796:	1d3a      	adds	r2, r7, #4
 8000798:	4b08      	ldr	r3, [pc, #32]	; (80007bc <MX_TIM1_Init+0x15c>)
 800079a:	0011      	movs	r1, r2
 800079c:	0018      	movs	r0, r3
 800079e:	f003 f9c7 	bl	8003b30 <HAL_TIMEx_ConfigBreakDeadTime>
 80007a2:	1e03      	subs	r3, r0, #0
 80007a4:	d001      	beq.n	80007aa <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 80007a6:	f000 f8d5 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80007aa:	4b04      	ldr	r3, [pc, #16]	; (80007bc <MX_TIM1_Init+0x15c>)
 80007ac:	0018      	movs	r0, r3
 80007ae:	f000 fa19 	bl	8000be4 <HAL_TIM_MspPostInit>

}
 80007b2:	46c0      	nop			; (mov r8, r8)
 80007b4:	46bd      	mov	sp, r7
 80007b6:	b016      	add	sp, #88	; 0x58
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	46c0      	nop			; (mov r8, r8)
 80007bc:	2000226c 	.word	0x2000226c
 80007c0:	40012c00 	.word	0x40012c00

080007c4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM6_Init 0 */

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80007c8:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <MX_TIM6_Init+0x38>)
 80007ca:	4a0d      	ldr	r2, [pc, #52]	; (8000800 <MX_TIM6_Init+0x3c>)
 80007cc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 48-1;
 80007ce:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <MX_TIM6_Init+0x38>)
 80007d0:	222f      	movs	r2, #47	; 0x2f
 80007d2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007d4:	4b09      	ldr	r3, [pc, #36]	; (80007fc <MX_TIM6_Init+0x38>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80007da:	4b08      	ldr	r3, [pc, #32]	; (80007fc <MX_TIM6_Init+0x38>)
 80007dc:	4a09      	ldr	r2, [pc, #36]	; (8000804 <MX_TIM6_Init+0x40>)
 80007de:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007e0:	4b06      	ldr	r3, [pc, #24]	; (80007fc <MX_TIM6_Init+0x38>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80007e6:	4b05      	ldr	r3, [pc, #20]	; (80007fc <MX_TIM6_Init+0x38>)
 80007e8:	0018      	movs	r0, r3
 80007ea:	f002 fa95 	bl	8002d18 <HAL_TIM_Base_Init>
 80007ee:	1e03      	subs	r3, r0, #0
 80007f0:	d001      	beq.n	80007f6 <MX_TIM6_Init+0x32>
  {
    Error_Handler();
 80007f2:	f000 f8af 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80007f6:	46c0      	nop			; (mov r8, r8)
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	20002224 	.word	0x20002224
 8000800:	40001000 	.word	0x40001000
 8000804:	0000ffff 	.word	0x0000ffff

08000808 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM7_Init 0 */

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800080c:	4b0d      	ldr	r3, [pc, #52]	; (8000844 <MX_TIM7_Init+0x3c>)
 800080e:	4a0e      	ldr	r2, [pc, #56]	; (8000848 <MX_TIM7_Init+0x40>)
 8000810:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 48-1;
 8000812:	4b0c      	ldr	r3, [pc, #48]	; (8000844 <MX_TIM7_Init+0x3c>)
 8000814:	222f      	movs	r2, #47	; 0x2f
 8000816:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000818:	4b0a      	ldr	r3, [pc, #40]	; (8000844 <MX_TIM7_Init+0x3c>)
 800081a:	2200      	movs	r2, #0
 800081c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000;
 800081e:	4b09      	ldr	r3, [pc, #36]	; (8000844 <MX_TIM7_Init+0x3c>)
 8000820:	22fa      	movs	r2, #250	; 0xfa
 8000822:	0092      	lsls	r2, r2, #2
 8000824:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000826:	4b07      	ldr	r3, [pc, #28]	; (8000844 <MX_TIM7_Init+0x3c>)
 8000828:	2200      	movs	r2, #0
 800082a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800082c:	4b05      	ldr	r3, [pc, #20]	; (8000844 <MX_TIM7_Init+0x3c>)
 800082e:	0018      	movs	r0, r3
 8000830:	f002 fa72 	bl	8002d18 <HAL_TIM_Base_Init>
 8000834:	1e03      	subs	r3, r0, #0
 8000836:	d001      	beq.n	800083c <MX_TIM7_Init+0x34>
  {
    Error_Handler();
 8000838:	f000 f88c 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800083c:	46c0      	nop			; (mov r8, r8)
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	46c0      	nop			; (mov r8, r8)
 8000844:	200022f4 	.word	0x200022f4
 8000848:	40001400 	.word	0x40001400

0800084c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800084c:	b590      	push	{r4, r7, lr}
 800084e:	b089      	sub	sp, #36	; 0x24
 8000850:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000852:	240c      	movs	r4, #12
 8000854:	193b      	adds	r3, r7, r4
 8000856:	0018      	movs	r0, r3
 8000858:	2314      	movs	r3, #20
 800085a:	001a      	movs	r2, r3
 800085c:	2100      	movs	r1, #0
 800085e:	f005 fed6 	bl	800660e <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000862:	4b34      	ldr	r3, [pc, #208]	; (8000934 <MX_GPIO_Init+0xe8>)
 8000864:	695a      	ldr	r2, [r3, #20]
 8000866:	4b33      	ldr	r3, [pc, #204]	; (8000934 <MX_GPIO_Init+0xe8>)
 8000868:	2180      	movs	r1, #128	; 0x80
 800086a:	0309      	lsls	r1, r1, #12
 800086c:	430a      	orrs	r2, r1
 800086e:	615a      	str	r2, [r3, #20]
 8000870:	4b30      	ldr	r3, [pc, #192]	; (8000934 <MX_GPIO_Init+0xe8>)
 8000872:	695a      	ldr	r2, [r3, #20]
 8000874:	2380      	movs	r3, #128	; 0x80
 8000876:	031b      	lsls	r3, r3, #12
 8000878:	4013      	ands	r3, r2
 800087a:	60bb      	str	r3, [r7, #8]
 800087c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800087e:	4b2d      	ldr	r3, [pc, #180]	; (8000934 <MX_GPIO_Init+0xe8>)
 8000880:	695a      	ldr	r2, [r3, #20]
 8000882:	4b2c      	ldr	r3, [pc, #176]	; (8000934 <MX_GPIO_Init+0xe8>)
 8000884:	2180      	movs	r1, #128	; 0x80
 8000886:	0289      	lsls	r1, r1, #10
 8000888:	430a      	orrs	r2, r1
 800088a:	615a      	str	r2, [r3, #20]
 800088c:	4b29      	ldr	r3, [pc, #164]	; (8000934 <MX_GPIO_Init+0xe8>)
 800088e:	695a      	ldr	r2, [r3, #20]
 8000890:	2380      	movs	r3, #128	; 0x80
 8000892:	029b      	lsls	r3, r3, #10
 8000894:	4013      	ands	r3, r2
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800089a:	4b26      	ldr	r3, [pc, #152]	; (8000934 <MX_GPIO_Init+0xe8>)
 800089c:	695a      	ldr	r2, [r3, #20]
 800089e:	4b25      	ldr	r3, [pc, #148]	; (8000934 <MX_GPIO_Init+0xe8>)
 80008a0:	2180      	movs	r1, #128	; 0x80
 80008a2:	02c9      	lsls	r1, r1, #11
 80008a4:	430a      	orrs	r2, r1
 80008a6:	615a      	str	r2, [r3, #20]
 80008a8:	4b22      	ldr	r3, [pc, #136]	; (8000934 <MX_GPIO_Init+0xe8>)
 80008aa:	695a      	ldr	r2, [r3, #20]
 80008ac:	2380      	movs	r3, #128	; 0x80
 80008ae:	02db      	lsls	r3, r3, #11
 80008b0:	4013      	ands	r3, r2
 80008b2:	603b      	str	r3, [r7, #0]
 80008b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_11, GPIO_PIN_RESET);
 80008b6:	4920      	ldr	r1, [pc, #128]	; (8000938 <MX_GPIO_Init+0xec>)
 80008b8:	4b20      	ldr	r3, [pc, #128]	; (800093c <MX_GPIO_Init+0xf0>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	0018      	movs	r0, r3
 80008be:	f001 f891 	bl	80019e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 80008c2:	193b      	adds	r3, r7, r4
 80008c4:	2213      	movs	r2, #19
 80008c6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c8:	193b      	adds	r3, r7, r4
 80008ca:	2200      	movs	r2, #0
 80008cc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	193b      	adds	r3, r7, r4
 80008d0:	2200      	movs	r2, #0
 80008d2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008d4:	193b      	adds	r3, r7, r4
 80008d6:	4a1a      	ldr	r2, [pc, #104]	; (8000940 <MX_GPIO_Init+0xf4>)
 80008d8:	0019      	movs	r1, r3
 80008da:	0010      	movs	r0, r2
 80008dc:	f000 ff12 	bl	8001704 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80008e0:	0021      	movs	r1, r4
 80008e2:	187b      	adds	r3, r7, r1
 80008e4:	220c      	movs	r2, #12
 80008e6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008e8:	187b      	adds	r3, r7, r1
 80008ea:	2288      	movs	r2, #136	; 0x88
 80008ec:	0352      	lsls	r2, r2, #13
 80008ee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	187b      	adds	r3, r7, r1
 80008f2:	2200      	movs	r2, #0
 80008f4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008f6:	000c      	movs	r4, r1
 80008f8:	187b      	adds	r3, r7, r1
 80008fa:	4a11      	ldr	r2, [pc, #68]	; (8000940 <MX_GPIO_Init+0xf4>)
 80008fc:	0019      	movs	r1, r3
 80008fe:	0010      	movs	r0, r2
 8000900:	f000 ff00 	bl	8001704 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_11;
 8000904:	0021      	movs	r1, r4
 8000906:	187b      	adds	r3, r7, r1
 8000908:	4a0b      	ldr	r2, [pc, #44]	; (8000938 <MX_GPIO_Init+0xec>)
 800090a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090c:	187b      	adds	r3, r7, r1
 800090e:	2201      	movs	r2, #1
 8000910:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	187b      	adds	r3, r7, r1
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000918:	187b      	adds	r3, r7, r1
 800091a:	2200      	movs	r2, #0
 800091c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800091e:	187b      	adds	r3, r7, r1
 8000920:	4a06      	ldr	r2, [pc, #24]	; (800093c <MX_GPIO_Init+0xf0>)
 8000922:	0019      	movs	r1, r3
 8000924:	0010      	movs	r0, r2
 8000926:	f000 feed 	bl	8001704 <HAL_GPIO_Init>

}
 800092a:	46c0      	nop			; (mov r8, r8)
 800092c:	46bd      	mov	sp, r7
 800092e:	b009      	add	sp, #36	; 0x24
 8000930:	bd90      	pop	{r4, r7, pc}
 8000932:	46c0      	nop			; (mov r8, r8)
 8000934:	40021000 	.word	0x40021000
 8000938:	00000807 	.word	0x00000807
 800093c:	48000400 	.word	0x48000400
 8000940:	48000800 	.word	0x48000800

08000944 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800094c:	2001      	movs	r0, #1
 800094e:	f003 fa21 	bl	8003d94 <osDelay>
 8000952:	e7fb      	b.n	800094c <StartDefaultTask+0x8>

08000954 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000958:	b672      	cpsid	i
}
 800095a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800095c:	e7fe      	b.n	800095c <Error_Handler+0x8>
	...

08000960 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000966:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <HAL_MspInit+0x50>)
 8000968:	699a      	ldr	r2, [r3, #24]
 800096a:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <HAL_MspInit+0x50>)
 800096c:	2101      	movs	r1, #1
 800096e:	430a      	orrs	r2, r1
 8000970:	619a      	str	r2, [r3, #24]
 8000972:	4b0f      	ldr	r3, [pc, #60]	; (80009b0 <HAL_MspInit+0x50>)
 8000974:	699b      	ldr	r3, [r3, #24]
 8000976:	2201      	movs	r2, #1
 8000978:	4013      	ands	r3, r2
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800097e:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <HAL_MspInit+0x50>)
 8000980:	69da      	ldr	r2, [r3, #28]
 8000982:	4b0b      	ldr	r3, [pc, #44]	; (80009b0 <HAL_MspInit+0x50>)
 8000984:	2180      	movs	r1, #128	; 0x80
 8000986:	0549      	lsls	r1, r1, #21
 8000988:	430a      	orrs	r2, r1
 800098a:	61da      	str	r2, [r3, #28]
 800098c:	4b08      	ldr	r3, [pc, #32]	; (80009b0 <HAL_MspInit+0x50>)
 800098e:	69da      	ldr	r2, [r3, #28]
 8000990:	2380      	movs	r3, #128	; 0x80
 8000992:	055b      	lsls	r3, r3, #21
 8000994:	4013      	ands	r3, r2
 8000996:	603b      	str	r3, [r7, #0]
 8000998:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 800099a:	2302      	movs	r3, #2
 800099c:	425b      	negs	r3, r3
 800099e:	2200      	movs	r2, #0
 80009a0:	2103      	movs	r1, #3
 80009a2:	0018      	movs	r0, r3
 80009a4:	f000 fe7c 	bl	80016a0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009a8:	46c0      	nop			; (mov r8, r8)
 80009aa:	46bd      	mov	sp, r7
 80009ac:	b002      	add	sp, #8
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	40021000 	.word	0x40021000

080009b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009b4:	b590      	push	{r4, r7, lr}
 80009b6:	b08b      	sub	sp, #44	; 0x2c
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009bc:	2414      	movs	r4, #20
 80009be:	193b      	adds	r3, r7, r4
 80009c0:	0018      	movs	r0, r3
 80009c2:	2314      	movs	r3, #20
 80009c4:	001a      	movs	r2, r3
 80009c6:	2100      	movs	r1, #0
 80009c8:	f005 fe21 	bl	800660e <memset>
  if(hadc->Instance==ADC1)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a19      	ldr	r2, [pc, #100]	; (8000a38 <HAL_ADC_MspInit+0x84>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d12b      	bne.n	8000a2e <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80009d6:	4b19      	ldr	r3, [pc, #100]	; (8000a3c <HAL_ADC_MspInit+0x88>)
 80009d8:	699a      	ldr	r2, [r3, #24]
 80009da:	4b18      	ldr	r3, [pc, #96]	; (8000a3c <HAL_ADC_MspInit+0x88>)
 80009dc:	2180      	movs	r1, #128	; 0x80
 80009de:	0089      	lsls	r1, r1, #2
 80009e0:	430a      	orrs	r2, r1
 80009e2:	619a      	str	r2, [r3, #24]
 80009e4:	4b15      	ldr	r3, [pc, #84]	; (8000a3c <HAL_ADC_MspInit+0x88>)
 80009e6:	699a      	ldr	r2, [r3, #24]
 80009e8:	2380      	movs	r3, #128	; 0x80
 80009ea:	009b      	lsls	r3, r3, #2
 80009ec:	4013      	ands	r3, r2
 80009ee:	613b      	str	r3, [r7, #16]
 80009f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f2:	4b12      	ldr	r3, [pc, #72]	; (8000a3c <HAL_ADC_MspInit+0x88>)
 80009f4:	695a      	ldr	r2, [r3, #20]
 80009f6:	4b11      	ldr	r3, [pc, #68]	; (8000a3c <HAL_ADC_MspInit+0x88>)
 80009f8:	2180      	movs	r1, #128	; 0x80
 80009fa:	0289      	lsls	r1, r1, #10
 80009fc:	430a      	orrs	r2, r1
 80009fe:	615a      	str	r2, [r3, #20]
 8000a00:	4b0e      	ldr	r3, [pc, #56]	; (8000a3c <HAL_ADC_MspInit+0x88>)
 8000a02:	695a      	ldr	r2, [r3, #20]
 8000a04:	2380      	movs	r3, #128	; 0x80
 8000a06:	029b      	lsls	r3, r3, #10
 8000a08:	4013      	ands	r3, r2
 8000a0a:	60fb      	str	r3, [r7, #12]
 8000a0c:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a0e:	193b      	adds	r3, r7, r4
 8000a10:	2201      	movs	r2, #1
 8000a12:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a14:	193b      	adds	r3, r7, r4
 8000a16:	2203      	movs	r2, #3
 8000a18:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	193b      	adds	r3, r7, r4
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a20:	193a      	adds	r2, r7, r4
 8000a22:	2390      	movs	r3, #144	; 0x90
 8000a24:	05db      	lsls	r3, r3, #23
 8000a26:	0011      	movs	r1, r2
 8000a28:	0018      	movs	r0, r3
 8000a2a:	f000 fe6b 	bl	8001704 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a2e:	46c0      	nop			; (mov r8, r8)
 8000a30:	46bd      	mov	sp, r7
 8000a32:	b00b      	add	sp, #44	; 0x2c
 8000a34:	bd90      	pop	{r4, r7, pc}
 8000a36:	46c0      	nop			; (mov r8, r8)
 8000a38:	40012400 	.word	0x40012400
 8000a3c:	40021000 	.word	0x40021000

08000a40 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a40:	b590      	push	{r4, r7, lr}
 8000a42:	b08d      	sub	sp, #52	; 0x34
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a48:	241c      	movs	r4, #28
 8000a4a:	193b      	adds	r3, r7, r4
 8000a4c:	0018      	movs	r0, r3
 8000a4e:	2314      	movs	r3, #20
 8000a50:	001a      	movs	r2, r3
 8000a52:	2100      	movs	r1, #0
 8000a54:	f005 fddb 	bl	800660e <memset>
  if(hi2c->Instance==I2C1)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a39      	ldr	r2, [pc, #228]	; (8000b44 <HAL_I2C_MspInit+0x104>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d133      	bne.n	8000aca <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a62:	4b39      	ldr	r3, [pc, #228]	; (8000b48 <HAL_I2C_MspInit+0x108>)
 8000a64:	695a      	ldr	r2, [r3, #20]
 8000a66:	4b38      	ldr	r3, [pc, #224]	; (8000b48 <HAL_I2C_MspInit+0x108>)
 8000a68:	2180      	movs	r1, #128	; 0x80
 8000a6a:	02c9      	lsls	r1, r1, #11
 8000a6c:	430a      	orrs	r2, r1
 8000a6e:	615a      	str	r2, [r3, #20]
 8000a70:	4b35      	ldr	r3, [pc, #212]	; (8000b48 <HAL_I2C_MspInit+0x108>)
 8000a72:	695a      	ldr	r2, [r3, #20]
 8000a74:	2380      	movs	r3, #128	; 0x80
 8000a76:	02db      	lsls	r3, r3, #11
 8000a78:	4013      	ands	r3, r2
 8000a7a:	61bb      	str	r3, [r7, #24]
 8000a7c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a7e:	193b      	adds	r3, r7, r4
 8000a80:	22c0      	movs	r2, #192	; 0xc0
 8000a82:	0092      	lsls	r2, r2, #2
 8000a84:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a86:	0021      	movs	r1, r4
 8000a88:	187b      	adds	r3, r7, r1
 8000a8a:	2212      	movs	r2, #18
 8000a8c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	187b      	adds	r3, r7, r1
 8000a90:	2200      	movs	r2, #0
 8000a92:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a94:	187b      	adds	r3, r7, r1
 8000a96:	2203      	movs	r2, #3
 8000a98:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000a9a:	187b      	adds	r3, r7, r1
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa0:	187b      	adds	r3, r7, r1
 8000aa2:	4a2a      	ldr	r2, [pc, #168]	; (8000b4c <HAL_I2C_MspInit+0x10c>)
 8000aa4:	0019      	movs	r1, r3
 8000aa6:	0010      	movs	r0, r2
 8000aa8:	f000 fe2c 	bl	8001704 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000aac:	4b26      	ldr	r3, [pc, #152]	; (8000b48 <HAL_I2C_MspInit+0x108>)
 8000aae:	69da      	ldr	r2, [r3, #28]
 8000ab0:	4b25      	ldr	r3, [pc, #148]	; (8000b48 <HAL_I2C_MspInit+0x108>)
 8000ab2:	2180      	movs	r1, #128	; 0x80
 8000ab4:	0389      	lsls	r1, r1, #14
 8000ab6:	430a      	orrs	r2, r1
 8000ab8:	61da      	str	r2, [r3, #28]
 8000aba:	4b23      	ldr	r3, [pc, #140]	; (8000b48 <HAL_I2C_MspInit+0x108>)
 8000abc:	69da      	ldr	r2, [r3, #28]
 8000abe:	2380      	movs	r3, #128	; 0x80
 8000ac0:	039b      	lsls	r3, r3, #14
 8000ac2:	4013      	ands	r3, r2
 8000ac4:	617b      	str	r3, [r7, #20]
 8000ac6:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000ac8:	e037      	b.n	8000b3a <HAL_I2C_MspInit+0xfa>
  else if(hi2c->Instance==I2C2)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4a20      	ldr	r2, [pc, #128]	; (8000b50 <HAL_I2C_MspInit+0x110>)
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d132      	bne.n	8000b3a <HAL_I2C_MspInit+0xfa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad4:	4b1c      	ldr	r3, [pc, #112]	; (8000b48 <HAL_I2C_MspInit+0x108>)
 8000ad6:	695a      	ldr	r2, [r3, #20]
 8000ad8:	4b1b      	ldr	r3, [pc, #108]	; (8000b48 <HAL_I2C_MspInit+0x108>)
 8000ada:	2180      	movs	r1, #128	; 0x80
 8000adc:	02c9      	lsls	r1, r1, #11
 8000ade:	430a      	orrs	r2, r1
 8000ae0:	615a      	str	r2, [r3, #20]
 8000ae2:	4b19      	ldr	r3, [pc, #100]	; (8000b48 <HAL_I2C_MspInit+0x108>)
 8000ae4:	695a      	ldr	r2, [r3, #20]
 8000ae6:	2380      	movs	r3, #128	; 0x80
 8000ae8:	02db      	lsls	r3, r3, #11
 8000aea:	4013      	ands	r3, r2
 8000aec:	613b      	str	r3, [r7, #16]
 8000aee:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000af0:	211c      	movs	r1, #28
 8000af2:	187b      	adds	r3, r7, r1
 8000af4:	22c0      	movs	r2, #192	; 0xc0
 8000af6:	01d2      	lsls	r2, r2, #7
 8000af8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000afa:	187b      	adds	r3, r7, r1
 8000afc:	2212      	movs	r2, #18
 8000afe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b00:	187b      	adds	r3, r7, r1
 8000b02:	2201      	movs	r2, #1
 8000b04:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b06:	187b      	adds	r3, r7, r1
 8000b08:	2203      	movs	r2, #3
 8000b0a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_I2C2;
 8000b0c:	187b      	adds	r3, r7, r1
 8000b0e:	2205      	movs	r2, #5
 8000b10:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b12:	187b      	adds	r3, r7, r1
 8000b14:	4a0d      	ldr	r2, [pc, #52]	; (8000b4c <HAL_I2C_MspInit+0x10c>)
 8000b16:	0019      	movs	r1, r3
 8000b18:	0010      	movs	r0, r2
 8000b1a:	f000 fdf3 	bl	8001704 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000b1e:	4b0a      	ldr	r3, [pc, #40]	; (8000b48 <HAL_I2C_MspInit+0x108>)
 8000b20:	69da      	ldr	r2, [r3, #28]
 8000b22:	4b09      	ldr	r3, [pc, #36]	; (8000b48 <HAL_I2C_MspInit+0x108>)
 8000b24:	2180      	movs	r1, #128	; 0x80
 8000b26:	03c9      	lsls	r1, r1, #15
 8000b28:	430a      	orrs	r2, r1
 8000b2a:	61da      	str	r2, [r3, #28]
 8000b2c:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <HAL_I2C_MspInit+0x108>)
 8000b2e:	69da      	ldr	r2, [r3, #28]
 8000b30:	2380      	movs	r3, #128	; 0x80
 8000b32:	03db      	lsls	r3, r3, #15
 8000b34:	4013      	ands	r3, r2
 8000b36:	60fb      	str	r3, [r7, #12]
 8000b38:	68fb      	ldr	r3, [r7, #12]
}
 8000b3a:	46c0      	nop			; (mov r8, r8)
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	b00d      	add	sp, #52	; 0x34
 8000b40:	bd90      	pop	{r4, r7, pc}
 8000b42:	46c0      	nop			; (mov r8, r8)
 8000b44:	40005400 	.word	0x40005400
 8000b48:	40021000 	.word	0x40021000
 8000b4c:	48000400 	.word	0x48000400
 8000b50:	40005800 	.word	0x40005800

08000b54 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b086      	sub	sp, #24
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a1c      	ldr	r2, [pc, #112]	; (8000bd4 <HAL_TIM_Base_MspInit+0x80>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d10e      	bne.n	8000b84 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b66:	4b1c      	ldr	r3, [pc, #112]	; (8000bd8 <HAL_TIM_Base_MspInit+0x84>)
 8000b68:	699a      	ldr	r2, [r3, #24]
 8000b6a:	4b1b      	ldr	r3, [pc, #108]	; (8000bd8 <HAL_TIM_Base_MspInit+0x84>)
 8000b6c:	2180      	movs	r1, #128	; 0x80
 8000b6e:	0109      	lsls	r1, r1, #4
 8000b70:	430a      	orrs	r2, r1
 8000b72:	619a      	str	r2, [r3, #24]
 8000b74:	4b18      	ldr	r3, [pc, #96]	; (8000bd8 <HAL_TIM_Base_MspInit+0x84>)
 8000b76:	699a      	ldr	r2, [r3, #24]
 8000b78:	2380      	movs	r3, #128	; 0x80
 8000b7a:	011b      	lsls	r3, r3, #4
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	617b      	str	r3, [r7, #20]
 8000b80:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8000b82:	e022      	b.n	8000bca <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM6)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a14      	ldr	r2, [pc, #80]	; (8000bdc <HAL_TIM_Base_MspInit+0x88>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d10c      	bne.n	8000ba8 <HAL_TIM_Base_MspInit+0x54>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000b8e:	4b12      	ldr	r3, [pc, #72]	; (8000bd8 <HAL_TIM_Base_MspInit+0x84>)
 8000b90:	69da      	ldr	r2, [r3, #28]
 8000b92:	4b11      	ldr	r3, [pc, #68]	; (8000bd8 <HAL_TIM_Base_MspInit+0x84>)
 8000b94:	2110      	movs	r1, #16
 8000b96:	430a      	orrs	r2, r1
 8000b98:	61da      	str	r2, [r3, #28]
 8000b9a:	4b0f      	ldr	r3, [pc, #60]	; (8000bd8 <HAL_TIM_Base_MspInit+0x84>)
 8000b9c:	69db      	ldr	r3, [r3, #28]
 8000b9e:	2210      	movs	r2, #16
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	613b      	str	r3, [r7, #16]
 8000ba4:	693b      	ldr	r3, [r7, #16]
}
 8000ba6:	e010      	b.n	8000bca <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM7)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a0c      	ldr	r2, [pc, #48]	; (8000be0 <HAL_TIM_Base_MspInit+0x8c>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d10b      	bne.n	8000bca <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000bb2:	4b09      	ldr	r3, [pc, #36]	; (8000bd8 <HAL_TIM_Base_MspInit+0x84>)
 8000bb4:	69da      	ldr	r2, [r3, #28]
 8000bb6:	4b08      	ldr	r3, [pc, #32]	; (8000bd8 <HAL_TIM_Base_MspInit+0x84>)
 8000bb8:	2120      	movs	r1, #32
 8000bba:	430a      	orrs	r2, r1
 8000bbc:	61da      	str	r2, [r3, #28]
 8000bbe:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <HAL_TIM_Base_MspInit+0x84>)
 8000bc0:	69db      	ldr	r3, [r3, #28]
 8000bc2:	2220      	movs	r2, #32
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	60fb      	str	r3, [r7, #12]
 8000bc8:	68fb      	ldr	r3, [r7, #12]
}
 8000bca:	46c0      	nop			; (mov r8, r8)
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	b006      	add	sp, #24
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	46c0      	nop			; (mov r8, r8)
 8000bd4:	40012c00 	.word	0x40012c00
 8000bd8:	40021000 	.word	0x40021000
 8000bdc:	40001000 	.word	0x40001000
 8000be0:	40001400 	.word	0x40001400

08000be4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000be4:	b590      	push	{r4, r7, lr}
 8000be6:	b089      	sub	sp, #36	; 0x24
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	240c      	movs	r4, #12
 8000bee:	193b      	adds	r3, r7, r4
 8000bf0:	0018      	movs	r0, r3
 8000bf2:	2314      	movs	r3, #20
 8000bf4:	001a      	movs	r2, r3
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	f005 fd09 	bl	800660e <memset>
  if(htim->Instance==TIM1)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a16      	ldr	r2, [pc, #88]	; (8000c5c <HAL_TIM_MspPostInit+0x78>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d125      	bne.n	8000c52 <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c06:	4b16      	ldr	r3, [pc, #88]	; (8000c60 <HAL_TIM_MspPostInit+0x7c>)
 8000c08:	695a      	ldr	r2, [r3, #20]
 8000c0a:	4b15      	ldr	r3, [pc, #84]	; (8000c60 <HAL_TIM_MspPostInit+0x7c>)
 8000c0c:	2180      	movs	r1, #128	; 0x80
 8000c0e:	0289      	lsls	r1, r1, #10
 8000c10:	430a      	orrs	r2, r1
 8000c12:	615a      	str	r2, [r3, #20]
 8000c14:	4b12      	ldr	r3, [pc, #72]	; (8000c60 <HAL_TIM_MspPostInit+0x7c>)
 8000c16:	695a      	ldr	r2, [r3, #20]
 8000c18:	2380      	movs	r3, #128	; 0x80
 8000c1a:	029b      	lsls	r3, r3, #10
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	60bb      	str	r3, [r7, #8]
 8000c20:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000c22:	193b      	adds	r3, r7, r4
 8000c24:	2280      	movs	r2, #128	; 0x80
 8000c26:	0112      	lsls	r2, r2, #4
 8000c28:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2a:	0021      	movs	r1, r4
 8000c2c:	187b      	adds	r3, r7, r1
 8000c2e:	2202      	movs	r2, #2
 8000c30:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	187b      	adds	r3, r7, r1
 8000c34:	2200      	movs	r2, #0
 8000c36:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c38:	187b      	adds	r3, r7, r1
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000c3e:	187b      	adds	r3, r7, r1
 8000c40:	2202      	movs	r2, #2
 8000c42:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c44:	187a      	adds	r2, r7, r1
 8000c46:	2390      	movs	r3, #144	; 0x90
 8000c48:	05db      	lsls	r3, r3, #23
 8000c4a:	0011      	movs	r1, r2
 8000c4c:	0018      	movs	r0, r3
 8000c4e:	f000 fd59 	bl	8001704 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000c52:	46c0      	nop			; (mov r8, r8)
 8000c54:	46bd      	mov	sp, r7
 8000c56:	b009      	add	sp, #36	; 0x24
 8000c58:	bd90      	pop	{r4, r7, pc}
 8000c5a:	46c0      	nop			; (mov r8, r8)
 8000c5c:	40012c00 	.word	0x40012c00
 8000c60:	40021000 	.word	0x40021000

08000c64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c68:	e7fe      	b.n	8000c68 <NMI_Handler+0x4>

08000c6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c6e:	e7fe      	b.n	8000c6e <HardFault_Handler+0x4>

08000c70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c74:	f000 f882 	bl	8000d7c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000c78:	f004 fbcc 	bl	8005414 <xTaskGetSchedulerState>
 8000c7c:	0003      	movs	r3, r0
 8000c7e:	2b01      	cmp	r3, #1
 8000c80:	d001      	beq.n	8000c86 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000c82:	f005 f859 	bl	8005d38 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c86:	46c0      	nop			; (mov r8, r8)
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000c90:	46c0      	nop			; (mov r8, r8)
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
	...

08000c98 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c98:	480d      	ldr	r0, [pc, #52]	; (8000cd0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c9a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c9c:	480d      	ldr	r0, [pc, #52]	; (8000cd4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c9e:	490e      	ldr	r1, [pc, #56]	; (8000cd8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ca0:	4a0e      	ldr	r2, [pc, #56]	; (8000cdc <LoopForever+0xe>)
  movs r3, #0
 8000ca2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ca4:	e002      	b.n	8000cac <LoopCopyDataInit>

08000ca6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ca6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ca8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000caa:	3304      	adds	r3, #4

08000cac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cb0:	d3f9      	bcc.n	8000ca6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cb2:	4a0b      	ldr	r2, [pc, #44]	; (8000ce0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cb4:	4c0b      	ldr	r4, [pc, #44]	; (8000ce4 <LoopForever+0x16>)
  movs r3, #0
 8000cb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cb8:	e001      	b.n	8000cbe <LoopFillZerobss>

08000cba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cbc:	3204      	adds	r2, #4

08000cbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cc0:	d3fb      	bcc.n	8000cba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000cc2:	f7ff ffe3 	bl	8000c8c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000cc6:	f005 fc75 	bl	80065b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cca:	f7ff fb23 	bl	8000314 <main>

08000cce <LoopForever>:

LoopForever:
    b LoopForever
 8000cce:	e7fe      	b.n	8000cce <LoopForever>
  ldr   r0, =_estack
 8000cd0:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000cd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cd8:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000cdc:	08006cdc 	.word	0x08006cdc
  ldr r2, =_sbss
 8000ce0:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000ce4:	20002380 	.word	0x20002380

08000ce8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ce8:	e7fe      	b.n	8000ce8 <ADC1_IRQHandler>
	...

08000cec <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cf0:	4b07      	ldr	r3, [pc, #28]	; (8000d10 <HAL_Init+0x24>)
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <HAL_Init+0x24>)
 8000cf6:	2110      	movs	r1, #16
 8000cf8:	430a      	orrs	r2, r1
 8000cfa:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000cfc:	2003      	movs	r0, #3
 8000cfe:	f000 f809 	bl	8000d14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d02:	f7ff fe2d 	bl	8000960 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d06:	2300      	movs	r3, #0
}
 8000d08:	0018      	movs	r0, r3
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	46c0      	nop			; (mov r8, r8)
 8000d10:	40022000 	.word	0x40022000

08000d14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d14:	b590      	push	{r4, r7, lr}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d1c:	4b14      	ldr	r3, [pc, #80]	; (8000d70 <HAL_InitTick+0x5c>)
 8000d1e:	681c      	ldr	r4, [r3, #0]
 8000d20:	4b14      	ldr	r3, [pc, #80]	; (8000d74 <HAL_InitTick+0x60>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	0019      	movs	r1, r3
 8000d26:	23fa      	movs	r3, #250	; 0xfa
 8000d28:	0098      	lsls	r0, r3, #2
 8000d2a:	f7ff f9ed 	bl	8000108 <__udivsi3>
 8000d2e:	0003      	movs	r3, r0
 8000d30:	0019      	movs	r1, r3
 8000d32:	0020      	movs	r0, r4
 8000d34:	f7ff f9e8 	bl	8000108 <__udivsi3>
 8000d38:	0003      	movs	r3, r0
 8000d3a:	0018      	movs	r0, r3
 8000d3c:	f000 fcd5 	bl	80016ea <HAL_SYSTICK_Config>
 8000d40:	1e03      	subs	r3, r0, #0
 8000d42:	d001      	beq.n	8000d48 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000d44:	2301      	movs	r3, #1
 8000d46:	e00f      	b.n	8000d68 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2b03      	cmp	r3, #3
 8000d4c:	d80b      	bhi.n	8000d66 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d4e:	6879      	ldr	r1, [r7, #4]
 8000d50:	2301      	movs	r3, #1
 8000d52:	425b      	negs	r3, r3
 8000d54:	2200      	movs	r2, #0
 8000d56:	0018      	movs	r0, r3
 8000d58:	f000 fca2 	bl	80016a0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d5c:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <HAL_InitTick+0x64>)
 8000d5e:	687a      	ldr	r2, [r7, #4]
 8000d60:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000d62:	2300      	movs	r3, #0
 8000d64:	e000      	b.n	8000d68 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000d66:	2301      	movs	r3, #1
}
 8000d68:	0018      	movs	r0, r3
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	b003      	add	sp, #12
 8000d6e:	bd90      	pop	{r4, r7, pc}
 8000d70:	20000000 	.word	0x20000000
 8000d74:	20000008 	.word	0x20000008
 8000d78:	20000004 	.word	0x20000004

08000d7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d80:	4b05      	ldr	r3, [pc, #20]	; (8000d98 <HAL_IncTick+0x1c>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	001a      	movs	r2, r3
 8000d86:	4b05      	ldr	r3, [pc, #20]	; (8000d9c <HAL_IncTick+0x20>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	18d2      	adds	r2, r2, r3
 8000d8c:	4b03      	ldr	r3, [pc, #12]	; (8000d9c <HAL_IncTick+0x20>)
 8000d8e:	601a      	str	r2, [r3, #0]
}
 8000d90:	46c0      	nop			; (mov r8, r8)
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	46c0      	nop			; (mov r8, r8)
 8000d98:	20000008 	.word	0x20000008
 8000d9c:	2000233c 	.word	0x2000233c

08000da0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  return uwTick;
 8000da4:	4b02      	ldr	r3, [pc, #8]	; (8000db0 <HAL_GetTick+0x10>)
 8000da6:	681b      	ldr	r3, [r3, #0]
}
 8000da8:	0018      	movs	r0, r3
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	46c0      	nop			; (mov r8, r8)
 8000db0:	2000233c 	.word	0x2000233c

08000db4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dbc:	f7ff fff0 	bl	8000da0 <HAL_GetTick>
 8000dc0:	0003      	movs	r3, r0
 8000dc2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	3301      	adds	r3, #1
 8000dcc:	d005      	beq.n	8000dda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dce:	4b0a      	ldr	r3, [pc, #40]	; (8000df8 <HAL_Delay+0x44>)
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	001a      	movs	r2, r3
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	189b      	adds	r3, r3, r2
 8000dd8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000dda:	46c0      	nop			; (mov r8, r8)
 8000ddc:	f7ff ffe0 	bl	8000da0 <HAL_GetTick>
 8000de0:	0002      	movs	r2, r0
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	1ad3      	subs	r3, r2, r3
 8000de6:	68fa      	ldr	r2, [r7, #12]
 8000de8:	429a      	cmp	r2, r3
 8000dea:	d8f7      	bhi.n	8000ddc <HAL_Delay+0x28>
  {
  }
}
 8000dec:	46c0      	nop			; (mov r8, r8)
 8000dee:	46c0      	nop			; (mov r8, r8)
 8000df0:	46bd      	mov	sp, r7
 8000df2:	b004      	add	sp, #16
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	46c0      	nop			; (mov r8, r8)
 8000df8:	20000008 	.word	0x20000008

08000dfc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e04:	230f      	movs	r3, #15
 8000e06:	18fb      	adds	r3, r7, r3
 8000e08:	2200      	movs	r2, #0
 8000e0a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d101      	bne.n	8000e1a <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
 8000e18:	e125      	b.n	8001066 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d10a      	bne.n	8000e38 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	2200      	movs	r2, #0
 8000e26:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2234      	movs	r2, #52	; 0x34
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	0018      	movs	r0, r3
 8000e34:	f7ff fdbe 	bl	80009b4 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e3c:	2210      	movs	r2, #16
 8000e3e:	4013      	ands	r3, r2
 8000e40:	d000      	beq.n	8000e44 <HAL_ADC_Init+0x48>
 8000e42:	e103      	b.n	800104c <HAL_ADC_Init+0x250>
 8000e44:	230f      	movs	r3, #15
 8000e46:	18fb      	adds	r3, r7, r3
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d000      	beq.n	8000e50 <HAL_ADC_Init+0x54>
 8000e4e:	e0fd      	b.n	800104c <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	689b      	ldr	r3, [r3, #8]
 8000e56:	2204      	movs	r2, #4
 8000e58:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000e5a:	d000      	beq.n	8000e5e <HAL_ADC_Init+0x62>
 8000e5c:	e0f6      	b.n	800104c <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e62:	4a83      	ldr	r2, [pc, #524]	; (8001070 <HAL_ADC_Init+0x274>)
 8000e64:	4013      	ands	r3, r2
 8000e66:	2202      	movs	r2, #2
 8000e68:	431a      	orrs	r2, r3
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	689b      	ldr	r3, [r3, #8]
 8000e74:	2203      	movs	r2, #3
 8000e76:	4013      	ands	r3, r2
 8000e78:	2b01      	cmp	r3, #1
 8000e7a:	d112      	bne.n	8000ea2 <HAL_ADC_Init+0xa6>
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	2201      	movs	r2, #1
 8000e84:	4013      	ands	r3, r2
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	d009      	beq.n	8000e9e <HAL_ADC_Init+0xa2>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	68da      	ldr	r2, [r3, #12]
 8000e90:	2380      	movs	r3, #128	; 0x80
 8000e92:	021b      	lsls	r3, r3, #8
 8000e94:	401a      	ands	r2, r3
 8000e96:	2380      	movs	r3, #128	; 0x80
 8000e98:	021b      	lsls	r3, r3, #8
 8000e9a:	429a      	cmp	r2, r3
 8000e9c:	d101      	bne.n	8000ea2 <HAL_ADC_Init+0xa6>
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e000      	b.n	8000ea4 <HAL_ADC_Init+0xa8>
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d116      	bne.n	8000ed6 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	68db      	ldr	r3, [r3, #12]
 8000eae:	2218      	movs	r2, #24
 8000eb0:	4393      	bics	r3, r2
 8000eb2:	0019      	movs	r1, r3
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	689a      	ldr	r2, [r3, #8]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	430a      	orrs	r2, r1
 8000ebe:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	691b      	ldr	r3, [r3, #16]
 8000ec6:	009b      	lsls	r3, r3, #2
 8000ec8:	0899      	lsrs	r1, r3, #2
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	685a      	ldr	r2, [r3, #4]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	430a      	orrs	r2, r1
 8000ed4:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	68da      	ldr	r2, [r3, #12]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4964      	ldr	r1, [pc, #400]	; (8001074 <HAL_ADC_Init+0x278>)
 8000ee2:	400a      	ands	r2, r1
 8000ee4:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	7e1b      	ldrb	r3, [r3, #24]
 8000eea:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	7e5b      	ldrb	r3, [r3, #25]
 8000ef0:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000ef2:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	7e9b      	ldrb	r3, [r3, #26]
 8000ef8:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000efa:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d002      	beq.n	8000f0a <HAL_ADC_Init+0x10e>
 8000f04:	2380      	movs	r3, #128	; 0x80
 8000f06:	015b      	lsls	r3, r3, #5
 8000f08:	e000      	b.n	8000f0c <HAL_ADC_Init+0x110>
 8000f0a:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000f0c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000f12:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	691b      	ldr	r3, [r3, #16]
 8000f18:	2b02      	cmp	r3, #2
 8000f1a:	d101      	bne.n	8000f20 <HAL_ADC_Init+0x124>
 8000f1c:	2304      	movs	r3, #4
 8000f1e:	e000      	b.n	8000f22 <HAL_ADC_Init+0x126>
 8000f20:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8000f22:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2124      	movs	r1, #36	; 0x24
 8000f28:	5c5b      	ldrb	r3, [r3, r1]
 8000f2a:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000f2c:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000f2e:	68ba      	ldr	r2, [r7, #8]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	7edb      	ldrb	r3, [r3, #27]
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d115      	bne.n	8000f68 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	7e9b      	ldrb	r3, [r3, #26]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d105      	bne.n	8000f50 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	2280      	movs	r2, #128	; 0x80
 8000f48:	0252      	lsls	r2, r2, #9
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	60bb      	str	r3, [r7, #8]
 8000f4e:	e00b      	b.n	8000f68 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f54:	2220      	movs	r2, #32
 8000f56:	431a      	orrs	r2, r3
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f60:	2201      	movs	r2, #1
 8000f62:	431a      	orrs	r2, r3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	69da      	ldr	r2, [r3, #28]
 8000f6c:	23c2      	movs	r3, #194	; 0xc2
 8000f6e:	33ff      	adds	r3, #255	; 0xff
 8000f70:	429a      	cmp	r2, r3
 8000f72:	d007      	beq.n	8000f84 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	68ba      	ldr	r2, [r7, #8]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	68d9      	ldr	r1, [r3, #12]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	68ba      	ldr	r2, [r7, #8]
 8000f90:	430a      	orrs	r2, r1
 8000f92:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f98:	2380      	movs	r3, #128	; 0x80
 8000f9a:	055b      	lsls	r3, r3, #21
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	d01b      	beq.n	8000fd8 <HAL_ADC_Init+0x1dc>
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fa4:	2b01      	cmp	r3, #1
 8000fa6:	d017      	beq.n	8000fd8 <HAL_ADC_Init+0x1dc>
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	d013      	beq.n	8000fd8 <HAL_ADC_Init+0x1dc>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fb4:	2b03      	cmp	r3, #3
 8000fb6:	d00f      	beq.n	8000fd8 <HAL_ADC_Init+0x1dc>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fbc:	2b04      	cmp	r3, #4
 8000fbe:	d00b      	beq.n	8000fd8 <HAL_ADC_Init+0x1dc>
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fc4:	2b05      	cmp	r3, #5
 8000fc6:	d007      	beq.n	8000fd8 <HAL_ADC_Init+0x1dc>
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fcc:	2b06      	cmp	r3, #6
 8000fce:	d003      	beq.n	8000fd8 <HAL_ADC_Init+0x1dc>
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fd4:	2b07      	cmp	r3, #7
 8000fd6:	d112      	bne.n	8000ffe <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	695a      	ldr	r2, [r3, #20]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	2107      	movs	r1, #7
 8000fe4:	438a      	bics	r2, r1
 8000fe6:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	6959      	ldr	r1, [r3, #20]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ff2:	2207      	movs	r2, #7
 8000ff4:	401a      	ands	r2, r3
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	430a      	orrs	r2, r1
 8000ffc:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	4a1c      	ldr	r2, [pc, #112]	; (8001078 <HAL_ADC_Init+0x27c>)
 8001006:	4013      	ands	r3, r2
 8001008:	68ba      	ldr	r2, [r7, #8]
 800100a:	429a      	cmp	r2, r3
 800100c:	d10b      	bne.n	8001026 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2200      	movs	r2, #0
 8001012:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001018:	2203      	movs	r2, #3
 800101a:	4393      	bics	r3, r2
 800101c:	2201      	movs	r2, #1
 800101e:	431a      	orrs	r2, r3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001024:	e01c      	b.n	8001060 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800102a:	2212      	movs	r2, #18
 800102c:	4393      	bics	r3, r2
 800102e:	2210      	movs	r2, #16
 8001030:	431a      	orrs	r2, r3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800103a:	2201      	movs	r2, #1
 800103c:	431a      	orrs	r2, r3
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8001042:	230f      	movs	r3, #15
 8001044:	18fb      	adds	r3, r7, r3
 8001046:	2201      	movs	r2, #1
 8001048:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800104a:	e009      	b.n	8001060 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001050:	2210      	movs	r2, #16
 8001052:	431a      	orrs	r2, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8001058:	230f      	movs	r3, #15
 800105a:	18fb      	adds	r3, r7, r3
 800105c:	2201      	movs	r2, #1
 800105e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001060:	230f      	movs	r3, #15
 8001062:	18fb      	adds	r3, r7, r3
 8001064:	781b      	ldrb	r3, [r3, #0]
}
 8001066:	0018      	movs	r0, r3
 8001068:	46bd      	mov	sp, r7
 800106a:	b004      	add	sp, #16
 800106c:	bd80      	pop	{r7, pc}
 800106e:	46c0      	nop			; (mov r8, r8)
 8001070:	fffffefd 	.word	0xfffffefd
 8001074:	fffe0219 	.word	0xfffe0219
 8001078:	833fffe7 	.word	0x833fffe7

0800107c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800107c:	b590      	push	{r4, r7, lr}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001084:	230f      	movs	r3, #15
 8001086:	18fb      	adds	r3, r7, r3
 8001088:	2200      	movs	r2, #0
 800108a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	2204      	movs	r2, #4
 8001094:	4013      	ands	r3, r2
 8001096:	d138      	bne.n	800110a <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2234      	movs	r2, #52	; 0x34
 800109c:	5c9b      	ldrb	r3, [r3, r2]
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d101      	bne.n	80010a6 <HAL_ADC_Start+0x2a>
 80010a2:	2302      	movs	r3, #2
 80010a4:	e038      	b.n	8001118 <HAL_ADC_Start+0x9c>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2234      	movs	r2, #52	; 0x34
 80010aa:	2101      	movs	r1, #1
 80010ac:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	7e5b      	ldrb	r3, [r3, #25]
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	d007      	beq.n	80010c6 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80010b6:	230f      	movs	r3, #15
 80010b8:	18fc      	adds	r4, r7, r3
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	0018      	movs	r0, r3
 80010be:	f000 f9bf 	bl	8001440 <ADC_Enable>
 80010c2:	0003      	movs	r3, r0
 80010c4:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80010c6:	230f      	movs	r3, #15
 80010c8:	18fb      	adds	r3, r7, r3
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d120      	bne.n	8001112 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010d4:	4a12      	ldr	r2, [pc, #72]	; (8001120 <HAL_ADC_Start+0xa4>)
 80010d6:	4013      	ands	r3, r2
 80010d8:	2280      	movs	r2, #128	; 0x80
 80010da:	0052      	lsls	r2, r2, #1
 80010dc:	431a      	orrs	r2, r3
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2200      	movs	r2, #0
 80010e6:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2234      	movs	r2, #52	; 0x34
 80010ec:	2100      	movs	r1, #0
 80010ee:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	221c      	movs	r2, #28
 80010f6:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	689a      	ldr	r2, [r3, #8]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	2104      	movs	r1, #4
 8001104:	430a      	orrs	r2, r1
 8001106:	609a      	str	r2, [r3, #8]
 8001108:	e003      	b.n	8001112 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800110a:	230f      	movs	r3, #15
 800110c:	18fb      	adds	r3, r7, r3
 800110e:	2202      	movs	r2, #2
 8001110:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001112:	230f      	movs	r3, #15
 8001114:	18fb      	adds	r3, r7, r3
 8001116:	781b      	ldrb	r3, [r3, #0]
}
 8001118:	0018      	movs	r0, r3
 800111a:	46bd      	mov	sp, r7
 800111c:	b005      	add	sp, #20
 800111e:	bd90      	pop	{r4, r7, pc}
 8001120:	fffff0fe 	.word	0xfffff0fe

08001124 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	695b      	ldr	r3, [r3, #20]
 8001132:	2b08      	cmp	r3, #8
 8001134:	d102      	bne.n	800113c <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001136:	2308      	movs	r3, #8
 8001138:	60fb      	str	r3, [r7, #12]
 800113a:	e014      	b.n	8001166 <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	68db      	ldr	r3, [r3, #12]
 8001142:	2201      	movs	r2, #1
 8001144:	4013      	ands	r3, r2
 8001146:	2b01      	cmp	r3, #1
 8001148:	d10b      	bne.n	8001162 <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800114e:	2220      	movs	r2, #32
 8001150:	431a      	orrs	r2, r3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2234      	movs	r2, #52	; 0x34
 800115a:	2100      	movs	r1, #0
 800115c:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	e071      	b.n	8001246 <HAL_ADC_PollForConversion+0x122>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001162:	230c      	movs	r3, #12
 8001164:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001166:	f7ff fe1b 	bl	8000da0 <HAL_GetTick>
 800116a:	0003      	movs	r3, r0
 800116c:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800116e:	e01f      	b.n	80011b0 <HAL_ADC_PollForConversion+0x8c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	3301      	adds	r3, #1
 8001174:	d01c      	beq.n	80011b0 <HAL_ADC_PollForConversion+0x8c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d007      	beq.n	800118c <HAL_ADC_PollForConversion+0x68>
 800117c:	f7ff fe10 	bl	8000da0 <HAL_GetTick>
 8001180:	0002      	movs	r2, r0
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	683a      	ldr	r2, [r7, #0]
 8001188:	429a      	cmp	r2, r3
 800118a:	d211      	bcs.n	80011b0 <HAL_ADC_PollForConversion+0x8c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	68fa      	ldr	r2, [r7, #12]
 8001194:	4013      	ands	r3, r2
 8001196:	d10b      	bne.n	80011b0 <HAL_ADC_PollForConversion+0x8c>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800119c:	2204      	movs	r2, #4
 800119e:	431a      	orrs	r2, r3
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	639a      	str	r2, [r3, #56]	; 0x38

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2234      	movs	r2, #52	; 0x34
 80011a8:	2100      	movs	r1, #0
 80011aa:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80011ac:	2303      	movs	r3, #3
 80011ae:	e04a      	b.n	8001246 <HAL_ADC_PollForConversion+0x122>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	68fa      	ldr	r2, [r7, #12]
 80011b8:	4013      	ands	r3, r2
 80011ba:	d0d9      	beq.n	8001170 <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011c0:	2280      	movs	r2, #128	; 0x80
 80011c2:	0092      	lsls	r2, r2, #2
 80011c4:	431a      	orrs	r2, r3
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	68da      	ldr	r2, [r3, #12]
 80011d0:	23c0      	movs	r3, #192	; 0xc0
 80011d2:	011b      	lsls	r3, r3, #4
 80011d4:	4013      	ands	r3, r2
 80011d6:	d12d      	bne.n	8001234 <HAL_ADC_PollForConversion+0x110>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d129      	bne.n	8001234 <HAL_ADC_PollForConversion+0x110>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	2208      	movs	r2, #8
 80011e8:	4013      	ands	r3, r2
 80011ea:	2b08      	cmp	r3, #8
 80011ec:	d122      	bne.n	8001234 <HAL_ADC_PollForConversion+0x110>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	2204      	movs	r2, #4
 80011f6:	4013      	ands	r3, r2
 80011f8:	d110      	bne.n	800121c <HAL_ADC_PollForConversion+0xf8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	685a      	ldr	r2, [r3, #4]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	210c      	movs	r1, #12
 8001206:	438a      	bics	r2, r1
 8001208:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800120e:	4a10      	ldr	r2, [pc, #64]	; (8001250 <HAL_ADC_PollForConversion+0x12c>)
 8001210:	4013      	ands	r3, r2
 8001212:	2201      	movs	r2, #1
 8001214:	431a      	orrs	r2, r3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	639a      	str	r2, [r3, #56]	; 0x38
 800121a:	e00b      	b.n	8001234 <HAL_ADC_PollForConversion+0x110>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001220:	2220      	movs	r2, #32
 8001222:	431a      	orrs	r2, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800122c:	2201      	movs	r2, #1
 800122e:	431a      	orrs	r2, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	7e1b      	ldrb	r3, [r3, #24]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d103      	bne.n	8001244 <HAL_ADC_PollForConversion+0x120>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	220c      	movs	r2, #12
 8001242:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001244:	2300      	movs	r3, #0
}
 8001246:	0018      	movs	r0, r3
 8001248:	46bd      	mov	sp, r7
 800124a:	b004      	add	sp, #16
 800124c:	bd80      	pop	{r7, pc}
 800124e:	46c0      	nop			; (mov r8, r8)
 8001250:	fffffefe 	.word	0xfffffefe

08001254 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800125e:	230f      	movs	r3, #15
 8001260:	18fb      	adds	r3, r7, r3
 8001262:	2200      	movs	r2, #0
 8001264:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8001266:	2300      	movs	r3, #0
 8001268:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800126e:	2380      	movs	r3, #128	; 0x80
 8001270:	055b      	lsls	r3, r3, #21
 8001272:	429a      	cmp	r2, r3
 8001274:	d011      	beq.n	800129a <HAL_ADC_ConfigChannel+0x46>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800127a:	2b01      	cmp	r3, #1
 800127c:	d00d      	beq.n	800129a <HAL_ADC_ConfigChannel+0x46>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001282:	2b02      	cmp	r3, #2
 8001284:	d009      	beq.n	800129a <HAL_ADC_ConfigChannel+0x46>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800128a:	2b03      	cmp	r3, #3
 800128c:	d005      	beq.n	800129a <HAL_ADC_ConfigChannel+0x46>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001292:	2b04      	cmp	r3, #4
 8001294:	d001      	beq.n	800129a <HAL_ADC_ConfigChannel+0x46>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2234      	movs	r2, #52	; 0x34
 800129e:	5c9b      	ldrb	r3, [r3, r2]
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d101      	bne.n	80012a8 <HAL_ADC_ConfigChannel+0x54>
 80012a4:	2302      	movs	r3, #2
 80012a6:	e0bb      	b.n	8001420 <HAL_ADC_ConfigChannel+0x1cc>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2234      	movs	r2, #52	; 0x34
 80012ac:	2101      	movs	r1, #1
 80012ae:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	2204      	movs	r2, #4
 80012b8:	4013      	ands	r3, r2
 80012ba:	d000      	beq.n	80012be <HAL_ADC_ConfigChannel+0x6a>
 80012bc:	e09f      	b.n	80013fe <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	4a59      	ldr	r2, [pc, #356]	; (8001428 <HAL_ADC_ConfigChannel+0x1d4>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d100      	bne.n	80012ca <HAL_ADC_ConfigChannel+0x76>
 80012c8:	e077      	b.n	80013ba <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2201      	movs	r2, #1
 80012d6:	409a      	lsls	r2, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	430a      	orrs	r2, r1
 80012de:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012e4:	2380      	movs	r3, #128	; 0x80
 80012e6:	055b      	lsls	r3, r3, #21
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d037      	beq.n	800135c <HAL_ADC_ConfigChannel+0x108>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d033      	beq.n	800135c <HAL_ADC_ConfigChannel+0x108>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012f8:	2b02      	cmp	r3, #2
 80012fa:	d02f      	beq.n	800135c <HAL_ADC_ConfigChannel+0x108>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001300:	2b03      	cmp	r3, #3
 8001302:	d02b      	beq.n	800135c <HAL_ADC_ConfigChannel+0x108>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001308:	2b04      	cmp	r3, #4
 800130a:	d027      	beq.n	800135c <HAL_ADC_ConfigChannel+0x108>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001310:	2b05      	cmp	r3, #5
 8001312:	d023      	beq.n	800135c <HAL_ADC_ConfigChannel+0x108>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001318:	2b06      	cmp	r3, #6
 800131a:	d01f      	beq.n	800135c <HAL_ADC_ConfigChannel+0x108>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001320:	2b07      	cmp	r3, #7
 8001322:	d01b      	beq.n	800135c <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	689a      	ldr	r2, [r3, #8]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	695b      	ldr	r3, [r3, #20]
 800132e:	2107      	movs	r1, #7
 8001330:	400b      	ands	r3, r1
 8001332:	429a      	cmp	r2, r3
 8001334:	d012      	beq.n	800135c <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	695a      	ldr	r2, [r3, #20]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	2107      	movs	r1, #7
 8001342:	438a      	bics	r2, r1
 8001344:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	6959      	ldr	r1, [r3, #20]
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	2207      	movs	r2, #7
 8001352:	401a      	ands	r2, r3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	430a      	orrs	r2, r1
 800135a:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2b10      	cmp	r3, #16
 8001362:	d003      	beq.n	800136c <HAL_ADC_ConfigChannel+0x118>
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2b11      	cmp	r3, #17
 800136a:	d152      	bne.n	8001412 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800136c:	4b2f      	ldr	r3, [pc, #188]	; (800142c <HAL_ADC_ConfigChannel+0x1d8>)
 800136e:	6819      	ldr	r1, [r3, #0]
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2b10      	cmp	r3, #16
 8001376:	d102      	bne.n	800137e <HAL_ADC_ConfigChannel+0x12a>
 8001378:	2380      	movs	r3, #128	; 0x80
 800137a:	041b      	lsls	r3, r3, #16
 800137c:	e001      	b.n	8001382 <HAL_ADC_ConfigChannel+0x12e>
 800137e:	2380      	movs	r3, #128	; 0x80
 8001380:	03db      	lsls	r3, r3, #15
 8001382:	4a2a      	ldr	r2, [pc, #168]	; (800142c <HAL_ADC_ConfigChannel+0x1d8>)
 8001384:	430b      	orrs	r3, r1
 8001386:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2b10      	cmp	r3, #16
 800138e:	d140      	bne.n	8001412 <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001390:	4b27      	ldr	r3, [pc, #156]	; (8001430 <HAL_ADC_ConfigChannel+0x1dc>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4927      	ldr	r1, [pc, #156]	; (8001434 <HAL_ADC_ConfigChannel+0x1e0>)
 8001396:	0018      	movs	r0, r3
 8001398:	f7fe feb6 	bl	8000108 <__udivsi3>
 800139c:	0003      	movs	r3, r0
 800139e:	001a      	movs	r2, r3
 80013a0:	0013      	movs	r3, r2
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	189b      	adds	r3, r3, r2
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80013aa:	e002      	b.n	80013b2 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	3b01      	subs	r3, #1
 80013b0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d1f9      	bne.n	80013ac <HAL_ADC_ConfigChannel+0x158>
 80013b8:	e02b      	b.n	8001412 <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2101      	movs	r1, #1
 80013c6:	4099      	lsls	r1, r3
 80013c8:	000b      	movs	r3, r1
 80013ca:	43d9      	mvns	r1, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	400a      	ands	r2, r1
 80013d2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2b10      	cmp	r3, #16
 80013da:	d003      	beq.n	80013e4 <HAL_ADC_ConfigChannel+0x190>
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	2b11      	cmp	r3, #17
 80013e2:	d116      	bne.n	8001412 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80013e4:	4b11      	ldr	r3, [pc, #68]	; (800142c <HAL_ADC_ConfigChannel+0x1d8>)
 80013e6:	6819      	ldr	r1, [r3, #0]
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2b10      	cmp	r3, #16
 80013ee:	d101      	bne.n	80013f4 <HAL_ADC_ConfigChannel+0x1a0>
 80013f0:	4a11      	ldr	r2, [pc, #68]	; (8001438 <HAL_ADC_ConfigChannel+0x1e4>)
 80013f2:	e000      	b.n	80013f6 <HAL_ADC_ConfigChannel+0x1a2>
 80013f4:	4a11      	ldr	r2, [pc, #68]	; (800143c <HAL_ADC_ConfigChannel+0x1e8>)
 80013f6:	4b0d      	ldr	r3, [pc, #52]	; (800142c <HAL_ADC_ConfigChannel+0x1d8>)
 80013f8:	400a      	ands	r2, r1
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	e009      	b.n	8001412 <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001402:	2220      	movs	r2, #32
 8001404:	431a      	orrs	r2, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 800140a:	230f      	movs	r3, #15
 800140c:	18fb      	adds	r3, r7, r3
 800140e:	2201      	movs	r2, #1
 8001410:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2234      	movs	r2, #52	; 0x34
 8001416:	2100      	movs	r1, #0
 8001418:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800141a:	230f      	movs	r3, #15
 800141c:	18fb      	adds	r3, r7, r3
 800141e:	781b      	ldrb	r3, [r3, #0]
}
 8001420:	0018      	movs	r0, r3
 8001422:	46bd      	mov	sp, r7
 8001424:	b004      	add	sp, #16
 8001426:	bd80      	pop	{r7, pc}
 8001428:	00001001 	.word	0x00001001
 800142c:	40012708 	.word	0x40012708
 8001430:	20000000 	.word	0x20000000
 8001434:	000f4240 	.word	0x000f4240
 8001438:	ff7fffff 	.word	0xff7fffff
 800143c:	ffbfffff 	.word	0xffbfffff

08001440 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001448:	2300      	movs	r3, #0
 800144a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800144c:	2300      	movs	r3, #0
 800144e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	2203      	movs	r2, #3
 8001458:	4013      	ands	r3, r2
 800145a:	2b01      	cmp	r3, #1
 800145c:	d112      	bne.n	8001484 <ADC_Enable+0x44>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2201      	movs	r2, #1
 8001466:	4013      	ands	r3, r2
 8001468:	2b01      	cmp	r3, #1
 800146a:	d009      	beq.n	8001480 <ADC_Enable+0x40>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	68da      	ldr	r2, [r3, #12]
 8001472:	2380      	movs	r3, #128	; 0x80
 8001474:	021b      	lsls	r3, r3, #8
 8001476:	401a      	ands	r2, r3
 8001478:	2380      	movs	r3, #128	; 0x80
 800147a:	021b      	lsls	r3, r3, #8
 800147c:	429a      	cmp	r2, r3
 800147e:	d101      	bne.n	8001484 <ADC_Enable+0x44>
 8001480:	2301      	movs	r3, #1
 8001482:	e000      	b.n	8001486 <ADC_Enable+0x46>
 8001484:	2300      	movs	r3, #0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d152      	bne.n	8001530 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	4a2a      	ldr	r2, [pc, #168]	; (800153c <ADC_Enable+0xfc>)
 8001492:	4013      	ands	r3, r2
 8001494:	d00d      	beq.n	80014b2 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800149a:	2210      	movs	r2, #16
 800149c:	431a      	orrs	r2, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014a6:	2201      	movs	r2, #1
 80014a8:	431a      	orrs	r2, r3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e03f      	b.n	8001532 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	689a      	ldr	r2, [r3, #8]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	2101      	movs	r1, #1
 80014be:	430a      	orrs	r2, r1
 80014c0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80014c2:	4b1f      	ldr	r3, [pc, #124]	; (8001540 <ADC_Enable+0x100>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	491f      	ldr	r1, [pc, #124]	; (8001544 <ADC_Enable+0x104>)
 80014c8:	0018      	movs	r0, r3
 80014ca:	f7fe fe1d 	bl	8000108 <__udivsi3>
 80014ce:	0003      	movs	r3, r0
 80014d0:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80014d2:	e002      	b.n	80014da <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	3b01      	subs	r3, #1
 80014d8:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d1f9      	bne.n	80014d4 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 80014e0:	f7ff fc5e 	bl	8000da0 <HAL_GetTick>
 80014e4:	0003      	movs	r3, r0
 80014e6:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80014e8:	e01b      	b.n	8001522 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80014ea:	f7ff fc59 	bl	8000da0 <HAL_GetTick>
 80014ee:	0002      	movs	r2, r0
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d914      	bls.n	8001522 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	2201      	movs	r2, #1
 8001500:	4013      	ands	r3, r2
 8001502:	2b01      	cmp	r3, #1
 8001504:	d00d      	beq.n	8001522 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800150a:	2210      	movs	r2, #16
 800150c:	431a      	orrs	r2, r3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001516:	2201      	movs	r2, #1
 8001518:	431a      	orrs	r2, r3
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e007      	b.n	8001532 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2201      	movs	r2, #1
 800152a:	4013      	ands	r3, r2
 800152c:	2b01      	cmp	r3, #1
 800152e:	d1dc      	bne.n	80014ea <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001530:	2300      	movs	r3, #0
}
 8001532:	0018      	movs	r0, r3
 8001534:	46bd      	mov	sp, r7
 8001536:	b004      	add	sp, #16
 8001538:	bd80      	pop	{r7, pc}
 800153a:	46c0      	nop			; (mov r8, r8)
 800153c:	80000017 	.word	0x80000017
 8001540:	20000000 	.word	0x20000000
 8001544:	000f4240 	.word	0x000f4240

08001548 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	0002      	movs	r2, r0
 8001550:	1dfb      	adds	r3, r7, #7
 8001552:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001554:	1dfb      	adds	r3, r7, #7
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	2b7f      	cmp	r3, #127	; 0x7f
 800155a:	d809      	bhi.n	8001570 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800155c:	1dfb      	adds	r3, r7, #7
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	001a      	movs	r2, r3
 8001562:	231f      	movs	r3, #31
 8001564:	401a      	ands	r2, r3
 8001566:	4b04      	ldr	r3, [pc, #16]	; (8001578 <__NVIC_EnableIRQ+0x30>)
 8001568:	2101      	movs	r1, #1
 800156a:	4091      	lsls	r1, r2
 800156c:	000a      	movs	r2, r1
 800156e:	601a      	str	r2, [r3, #0]
  }
}
 8001570:	46c0      	nop			; (mov r8, r8)
 8001572:	46bd      	mov	sp, r7
 8001574:	b002      	add	sp, #8
 8001576:	bd80      	pop	{r7, pc}
 8001578:	e000e100 	.word	0xe000e100

0800157c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800157c:	b590      	push	{r4, r7, lr}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	0002      	movs	r2, r0
 8001584:	6039      	str	r1, [r7, #0]
 8001586:	1dfb      	adds	r3, r7, #7
 8001588:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800158a:	1dfb      	adds	r3, r7, #7
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	2b7f      	cmp	r3, #127	; 0x7f
 8001590:	d828      	bhi.n	80015e4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001592:	4a2f      	ldr	r2, [pc, #188]	; (8001650 <__NVIC_SetPriority+0xd4>)
 8001594:	1dfb      	adds	r3, r7, #7
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	b25b      	sxtb	r3, r3
 800159a:	089b      	lsrs	r3, r3, #2
 800159c:	33c0      	adds	r3, #192	; 0xc0
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	589b      	ldr	r3, [r3, r2]
 80015a2:	1dfa      	adds	r2, r7, #7
 80015a4:	7812      	ldrb	r2, [r2, #0]
 80015a6:	0011      	movs	r1, r2
 80015a8:	2203      	movs	r2, #3
 80015aa:	400a      	ands	r2, r1
 80015ac:	00d2      	lsls	r2, r2, #3
 80015ae:	21ff      	movs	r1, #255	; 0xff
 80015b0:	4091      	lsls	r1, r2
 80015b2:	000a      	movs	r2, r1
 80015b4:	43d2      	mvns	r2, r2
 80015b6:	401a      	ands	r2, r3
 80015b8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	019b      	lsls	r3, r3, #6
 80015be:	22ff      	movs	r2, #255	; 0xff
 80015c0:	401a      	ands	r2, r3
 80015c2:	1dfb      	adds	r3, r7, #7
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	0018      	movs	r0, r3
 80015c8:	2303      	movs	r3, #3
 80015ca:	4003      	ands	r3, r0
 80015cc:	00db      	lsls	r3, r3, #3
 80015ce:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015d0:	481f      	ldr	r0, [pc, #124]	; (8001650 <__NVIC_SetPriority+0xd4>)
 80015d2:	1dfb      	adds	r3, r7, #7
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	b25b      	sxtb	r3, r3
 80015d8:	089b      	lsrs	r3, r3, #2
 80015da:	430a      	orrs	r2, r1
 80015dc:	33c0      	adds	r3, #192	; 0xc0
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80015e2:	e031      	b.n	8001648 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015e4:	4a1b      	ldr	r2, [pc, #108]	; (8001654 <__NVIC_SetPriority+0xd8>)
 80015e6:	1dfb      	adds	r3, r7, #7
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	0019      	movs	r1, r3
 80015ec:	230f      	movs	r3, #15
 80015ee:	400b      	ands	r3, r1
 80015f0:	3b08      	subs	r3, #8
 80015f2:	089b      	lsrs	r3, r3, #2
 80015f4:	3306      	adds	r3, #6
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	18d3      	adds	r3, r2, r3
 80015fa:	3304      	adds	r3, #4
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	1dfa      	adds	r2, r7, #7
 8001600:	7812      	ldrb	r2, [r2, #0]
 8001602:	0011      	movs	r1, r2
 8001604:	2203      	movs	r2, #3
 8001606:	400a      	ands	r2, r1
 8001608:	00d2      	lsls	r2, r2, #3
 800160a:	21ff      	movs	r1, #255	; 0xff
 800160c:	4091      	lsls	r1, r2
 800160e:	000a      	movs	r2, r1
 8001610:	43d2      	mvns	r2, r2
 8001612:	401a      	ands	r2, r3
 8001614:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	019b      	lsls	r3, r3, #6
 800161a:	22ff      	movs	r2, #255	; 0xff
 800161c:	401a      	ands	r2, r3
 800161e:	1dfb      	adds	r3, r7, #7
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	0018      	movs	r0, r3
 8001624:	2303      	movs	r3, #3
 8001626:	4003      	ands	r3, r0
 8001628:	00db      	lsls	r3, r3, #3
 800162a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800162c:	4809      	ldr	r0, [pc, #36]	; (8001654 <__NVIC_SetPriority+0xd8>)
 800162e:	1dfb      	adds	r3, r7, #7
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	001c      	movs	r4, r3
 8001634:	230f      	movs	r3, #15
 8001636:	4023      	ands	r3, r4
 8001638:	3b08      	subs	r3, #8
 800163a:	089b      	lsrs	r3, r3, #2
 800163c:	430a      	orrs	r2, r1
 800163e:	3306      	adds	r3, #6
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	18c3      	adds	r3, r0, r3
 8001644:	3304      	adds	r3, #4
 8001646:	601a      	str	r2, [r3, #0]
}
 8001648:	46c0      	nop			; (mov r8, r8)
 800164a:	46bd      	mov	sp, r7
 800164c:	b003      	add	sp, #12
 800164e:	bd90      	pop	{r4, r7, pc}
 8001650:	e000e100 	.word	0xe000e100
 8001654:	e000ed00 	.word	0xe000ed00

08001658 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	1e5a      	subs	r2, r3, #1
 8001664:	2380      	movs	r3, #128	; 0x80
 8001666:	045b      	lsls	r3, r3, #17
 8001668:	429a      	cmp	r2, r3
 800166a:	d301      	bcc.n	8001670 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800166c:	2301      	movs	r3, #1
 800166e:	e010      	b.n	8001692 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001670:	4b0a      	ldr	r3, [pc, #40]	; (800169c <SysTick_Config+0x44>)
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	3a01      	subs	r2, #1
 8001676:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001678:	2301      	movs	r3, #1
 800167a:	425b      	negs	r3, r3
 800167c:	2103      	movs	r1, #3
 800167e:	0018      	movs	r0, r3
 8001680:	f7ff ff7c 	bl	800157c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001684:	4b05      	ldr	r3, [pc, #20]	; (800169c <SysTick_Config+0x44>)
 8001686:	2200      	movs	r2, #0
 8001688:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800168a:	4b04      	ldr	r3, [pc, #16]	; (800169c <SysTick_Config+0x44>)
 800168c:	2207      	movs	r2, #7
 800168e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001690:	2300      	movs	r3, #0
}
 8001692:	0018      	movs	r0, r3
 8001694:	46bd      	mov	sp, r7
 8001696:	b002      	add	sp, #8
 8001698:	bd80      	pop	{r7, pc}
 800169a:	46c0      	nop			; (mov r8, r8)
 800169c:	e000e010 	.word	0xe000e010

080016a0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	60b9      	str	r1, [r7, #8]
 80016a8:	607a      	str	r2, [r7, #4]
 80016aa:	210f      	movs	r1, #15
 80016ac:	187b      	adds	r3, r7, r1
 80016ae:	1c02      	adds	r2, r0, #0
 80016b0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80016b2:	68ba      	ldr	r2, [r7, #8]
 80016b4:	187b      	adds	r3, r7, r1
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	b25b      	sxtb	r3, r3
 80016ba:	0011      	movs	r1, r2
 80016bc:	0018      	movs	r0, r3
 80016be:	f7ff ff5d 	bl	800157c <__NVIC_SetPriority>
}
 80016c2:	46c0      	nop			; (mov r8, r8)
 80016c4:	46bd      	mov	sp, r7
 80016c6:	b004      	add	sp, #16
 80016c8:	bd80      	pop	{r7, pc}

080016ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ca:	b580      	push	{r7, lr}
 80016cc:	b082      	sub	sp, #8
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	0002      	movs	r2, r0
 80016d2:	1dfb      	adds	r3, r7, #7
 80016d4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016d6:	1dfb      	adds	r3, r7, #7
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	b25b      	sxtb	r3, r3
 80016dc:	0018      	movs	r0, r3
 80016de:	f7ff ff33 	bl	8001548 <__NVIC_EnableIRQ>
}
 80016e2:	46c0      	nop			; (mov r8, r8)
 80016e4:	46bd      	mov	sp, r7
 80016e6:	b002      	add	sp, #8
 80016e8:	bd80      	pop	{r7, pc}

080016ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b082      	sub	sp, #8
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	0018      	movs	r0, r3
 80016f6:	f7ff ffaf 	bl	8001658 <SysTick_Config>
 80016fa:	0003      	movs	r3, r0
}
 80016fc:	0018      	movs	r0, r3
 80016fe:	46bd      	mov	sp, r7
 8001700:	b002      	add	sp, #8
 8001702:	bd80      	pop	{r7, pc}

08001704 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b086      	sub	sp, #24
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800170e:	2300      	movs	r3, #0
 8001710:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001712:	e14f      	b.n	80019b4 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2101      	movs	r1, #1
 800171a:	697a      	ldr	r2, [r7, #20]
 800171c:	4091      	lsls	r1, r2
 800171e:	000a      	movs	r2, r1
 8001720:	4013      	ands	r3, r2
 8001722:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d100      	bne.n	800172c <HAL_GPIO_Init+0x28>
 800172a:	e140      	b.n	80019ae <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	2203      	movs	r2, #3
 8001732:	4013      	ands	r3, r2
 8001734:	2b01      	cmp	r3, #1
 8001736:	d005      	beq.n	8001744 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	2203      	movs	r2, #3
 800173e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001740:	2b02      	cmp	r3, #2
 8001742:	d130      	bne.n	80017a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	2203      	movs	r2, #3
 8001750:	409a      	lsls	r2, r3
 8001752:	0013      	movs	r3, r2
 8001754:	43da      	mvns	r2, r3
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	4013      	ands	r3, r2
 800175a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	68da      	ldr	r2, [r3, #12]
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	409a      	lsls	r2, r3
 8001766:	0013      	movs	r3, r2
 8001768:	693a      	ldr	r2, [r7, #16]
 800176a:	4313      	orrs	r3, r2
 800176c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	693a      	ldr	r2, [r7, #16]
 8001772:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800177a:	2201      	movs	r2, #1
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	409a      	lsls	r2, r3
 8001780:	0013      	movs	r3, r2
 8001782:	43da      	mvns	r2, r3
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	4013      	ands	r3, r2
 8001788:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	091b      	lsrs	r3, r3, #4
 8001790:	2201      	movs	r2, #1
 8001792:	401a      	ands	r2, r3
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	409a      	lsls	r2, r3
 8001798:	0013      	movs	r3, r2
 800179a:	693a      	ldr	r2, [r7, #16]
 800179c:	4313      	orrs	r3, r2
 800179e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	693a      	ldr	r2, [r7, #16]
 80017a4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	2203      	movs	r2, #3
 80017ac:	4013      	ands	r3, r2
 80017ae:	2b03      	cmp	r3, #3
 80017b0:	d017      	beq.n	80017e2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	68db      	ldr	r3, [r3, #12]
 80017b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	2203      	movs	r2, #3
 80017be:	409a      	lsls	r2, r3
 80017c0:	0013      	movs	r3, r2
 80017c2:	43da      	mvns	r2, r3
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	4013      	ands	r3, r2
 80017c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	689a      	ldr	r2, [r3, #8]
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	005b      	lsls	r3, r3, #1
 80017d2:	409a      	lsls	r2, r3
 80017d4:	0013      	movs	r3, r2
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	4313      	orrs	r3, r2
 80017da:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	2203      	movs	r2, #3
 80017e8:	4013      	ands	r3, r2
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d123      	bne.n	8001836 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	08da      	lsrs	r2, r3, #3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	3208      	adds	r2, #8
 80017f6:	0092      	lsls	r2, r2, #2
 80017f8:	58d3      	ldr	r3, [r2, r3]
 80017fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	2207      	movs	r2, #7
 8001800:	4013      	ands	r3, r2
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	220f      	movs	r2, #15
 8001806:	409a      	lsls	r2, r3
 8001808:	0013      	movs	r3, r2
 800180a:	43da      	mvns	r2, r3
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	4013      	ands	r3, r2
 8001810:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	691a      	ldr	r2, [r3, #16]
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	2107      	movs	r1, #7
 800181a:	400b      	ands	r3, r1
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	409a      	lsls	r2, r3
 8001820:	0013      	movs	r3, r2
 8001822:	693a      	ldr	r2, [r7, #16]
 8001824:	4313      	orrs	r3, r2
 8001826:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	08da      	lsrs	r2, r3, #3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	3208      	adds	r2, #8
 8001830:	0092      	lsls	r2, r2, #2
 8001832:	6939      	ldr	r1, [r7, #16]
 8001834:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	2203      	movs	r2, #3
 8001842:	409a      	lsls	r2, r3
 8001844:	0013      	movs	r3, r2
 8001846:	43da      	mvns	r2, r3
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	4013      	ands	r3, r2
 800184c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	2203      	movs	r2, #3
 8001854:	401a      	ands	r2, r3
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	005b      	lsls	r3, r3, #1
 800185a:	409a      	lsls	r2, r3
 800185c:	0013      	movs	r3, r2
 800185e:	693a      	ldr	r2, [r7, #16]
 8001860:	4313      	orrs	r3, r2
 8001862:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	693a      	ldr	r2, [r7, #16]
 8001868:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	685a      	ldr	r2, [r3, #4]
 800186e:	23c0      	movs	r3, #192	; 0xc0
 8001870:	029b      	lsls	r3, r3, #10
 8001872:	4013      	ands	r3, r2
 8001874:	d100      	bne.n	8001878 <HAL_GPIO_Init+0x174>
 8001876:	e09a      	b.n	80019ae <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001878:	4b54      	ldr	r3, [pc, #336]	; (80019cc <HAL_GPIO_Init+0x2c8>)
 800187a:	699a      	ldr	r2, [r3, #24]
 800187c:	4b53      	ldr	r3, [pc, #332]	; (80019cc <HAL_GPIO_Init+0x2c8>)
 800187e:	2101      	movs	r1, #1
 8001880:	430a      	orrs	r2, r1
 8001882:	619a      	str	r2, [r3, #24]
 8001884:	4b51      	ldr	r3, [pc, #324]	; (80019cc <HAL_GPIO_Init+0x2c8>)
 8001886:	699b      	ldr	r3, [r3, #24]
 8001888:	2201      	movs	r2, #1
 800188a:	4013      	ands	r3, r2
 800188c:	60bb      	str	r3, [r7, #8]
 800188e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001890:	4a4f      	ldr	r2, [pc, #316]	; (80019d0 <HAL_GPIO_Init+0x2cc>)
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	089b      	lsrs	r3, r3, #2
 8001896:	3302      	adds	r3, #2
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	589b      	ldr	r3, [r3, r2]
 800189c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	2203      	movs	r2, #3
 80018a2:	4013      	ands	r3, r2
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	220f      	movs	r2, #15
 80018a8:	409a      	lsls	r2, r3
 80018aa:	0013      	movs	r3, r2
 80018ac:	43da      	mvns	r2, r3
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	4013      	ands	r3, r2
 80018b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	2390      	movs	r3, #144	; 0x90
 80018b8:	05db      	lsls	r3, r3, #23
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d013      	beq.n	80018e6 <HAL_GPIO_Init+0x1e2>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4a44      	ldr	r2, [pc, #272]	; (80019d4 <HAL_GPIO_Init+0x2d0>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d00d      	beq.n	80018e2 <HAL_GPIO_Init+0x1de>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4a43      	ldr	r2, [pc, #268]	; (80019d8 <HAL_GPIO_Init+0x2d4>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d007      	beq.n	80018de <HAL_GPIO_Init+0x1da>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4a42      	ldr	r2, [pc, #264]	; (80019dc <HAL_GPIO_Init+0x2d8>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d101      	bne.n	80018da <HAL_GPIO_Init+0x1d6>
 80018d6:	2303      	movs	r3, #3
 80018d8:	e006      	b.n	80018e8 <HAL_GPIO_Init+0x1e4>
 80018da:	2305      	movs	r3, #5
 80018dc:	e004      	b.n	80018e8 <HAL_GPIO_Init+0x1e4>
 80018de:	2302      	movs	r3, #2
 80018e0:	e002      	b.n	80018e8 <HAL_GPIO_Init+0x1e4>
 80018e2:	2301      	movs	r3, #1
 80018e4:	e000      	b.n	80018e8 <HAL_GPIO_Init+0x1e4>
 80018e6:	2300      	movs	r3, #0
 80018e8:	697a      	ldr	r2, [r7, #20]
 80018ea:	2103      	movs	r1, #3
 80018ec:	400a      	ands	r2, r1
 80018ee:	0092      	lsls	r2, r2, #2
 80018f0:	4093      	lsls	r3, r2
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80018f8:	4935      	ldr	r1, [pc, #212]	; (80019d0 <HAL_GPIO_Init+0x2cc>)
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	089b      	lsrs	r3, r3, #2
 80018fe:	3302      	adds	r3, #2
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	693a      	ldr	r2, [r7, #16]
 8001904:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001906:	4b36      	ldr	r3, [pc, #216]	; (80019e0 <HAL_GPIO_Init+0x2dc>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	43da      	mvns	r2, r3
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	4013      	ands	r3, r2
 8001914:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685a      	ldr	r2, [r3, #4]
 800191a:	2380      	movs	r3, #128	; 0x80
 800191c:	025b      	lsls	r3, r3, #9
 800191e:	4013      	ands	r3, r2
 8001920:	d003      	beq.n	800192a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001922:	693a      	ldr	r2, [r7, #16]
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	4313      	orrs	r3, r2
 8001928:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800192a:	4b2d      	ldr	r3, [pc, #180]	; (80019e0 <HAL_GPIO_Init+0x2dc>)
 800192c:	693a      	ldr	r2, [r7, #16]
 800192e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001930:	4b2b      	ldr	r3, [pc, #172]	; (80019e0 <HAL_GPIO_Init+0x2dc>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	43da      	mvns	r2, r3
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	4013      	ands	r3, r2
 800193e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685a      	ldr	r2, [r3, #4]
 8001944:	2380      	movs	r3, #128	; 0x80
 8001946:	029b      	lsls	r3, r3, #10
 8001948:	4013      	ands	r3, r2
 800194a:	d003      	beq.n	8001954 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 800194c:	693a      	ldr	r2, [r7, #16]
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	4313      	orrs	r3, r2
 8001952:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001954:	4b22      	ldr	r3, [pc, #136]	; (80019e0 <HAL_GPIO_Init+0x2dc>)
 8001956:	693a      	ldr	r2, [r7, #16]
 8001958:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800195a:	4b21      	ldr	r3, [pc, #132]	; (80019e0 <HAL_GPIO_Init+0x2dc>)
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	43da      	mvns	r2, r3
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	4013      	ands	r3, r2
 8001968:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685a      	ldr	r2, [r3, #4]
 800196e:	2380      	movs	r3, #128	; 0x80
 8001970:	035b      	lsls	r3, r3, #13
 8001972:	4013      	ands	r3, r2
 8001974:	d003      	beq.n	800197e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	4313      	orrs	r3, r2
 800197c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800197e:	4b18      	ldr	r3, [pc, #96]	; (80019e0 <HAL_GPIO_Init+0x2dc>)
 8001980:	693a      	ldr	r2, [r7, #16]
 8001982:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001984:	4b16      	ldr	r3, [pc, #88]	; (80019e0 <HAL_GPIO_Init+0x2dc>)
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	43da      	mvns	r2, r3
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	4013      	ands	r3, r2
 8001992:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685a      	ldr	r2, [r3, #4]
 8001998:	2380      	movs	r3, #128	; 0x80
 800199a:	039b      	lsls	r3, r3, #14
 800199c:	4013      	ands	r3, r2
 800199e:	d003      	beq.n	80019a8 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80019a0:	693a      	ldr	r2, [r7, #16]
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80019a8:	4b0d      	ldr	r3, [pc, #52]	; (80019e0 <HAL_GPIO_Init+0x2dc>)
 80019aa:	693a      	ldr	r2, [r7, #16]
 80019ac:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	3301      	adds	r3, #1
 80019b2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	40da      	lsrs	r2, r3
 80019bc:	1e13      	subs	r3, r2, #0
 80019be:	d000      	beq.n	80019c2 <HAL_GPIO_Init+0x2be>
 80019c0:	e6a8      	b.n	8001714 <HAL_GPIO_Init+0x10>
  } 
}
 80019c2:	46c0      	nop			; (mov r8, r8)
 80019c4:	46c0      	nop			; (mov r8, r8)
 80019c6:	46bd      	mov	sp, r7
 80019c8:	b006      	add	sp, #24
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	40021000 	.word	0x40021000
 80019d0:	40010000 	.word	0x40010000
 80019d4:	48000400 	.word	0x48000400
 80019d8:	48000800 	.word	0x48000800
 80019dc:	48000c00 	.word	0x48000c00
 80019e0:	40010400 	.word	0x40010400

080019e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	0008      	movs	r0, r1
 80019ee:	0011      	movs	r1, r2
 80019f0:	1cbb      	adds	r3, r7, #2
 80019f2:	1c02      	adds	r2, r0, #0
 80019f4:	801a      	strh	r2, [r3, #0]
 80019f6:	1c7b      	adds	r3, r7, #1
 80019f8:	1c0a      	adds	r2, r1, #0
 80019fa:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019fc:	1c7b      	adds	r3, r7, #1
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d004      	beq.n	8001a0e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a04:	1cbb      	adds	r3, r7, #2
 8001a06:	881a      	ldrh	r2, [r3, #0]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a0c:	e003      	b.n	8001a16 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a0e:	1cbb      	adds	r3, r7, #2
 8001a10:	881a      	ldrh	r2, [r3, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a16:	46c0      	nop			; (mov r8, r8)
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	b002      	add	sp, #8
 8001a1c:	bd80      	pop	{r7, pc}
	...

08001a20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d101      	bne.n	8001a32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e082      	b.n	8001b38 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2241      	movs	r2, #65	; 0x41
 8001a36:	5c9b      	ldrb	r3, [r3, r2]
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d107      	bne.n	8001a4e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2240      	movs	r2, #64	; 0x40
 8001a42:	2100      	movs	r1, #0
 8001a44:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	0018      	movs	r0, r3
 8001a4a:	f7fe fff9 	bl	8000a40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2241      	movs	r2, #65	; 0x41
 8001a52:	2124      	movs	r1, #36	; 0x24
 8001a54:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2101      	movs	r1, #1
 8001a62:	438a      	bics	r2, r1
 8001a64:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685a      	ldr	r2, [r3, #4]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4934      	ldr	r1, [pc, #208]	; (8001b40 <HAL_I2C_Init+0x120>)
 8001a70:	400a      	ands	r2, r1
 8001a72:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	689a      	ldr	r2, [r3, #8]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4931      	ldr	r1, [pc, #196]	; (8001b44 <HAL_I2C_Init+0x124>)
 8001a80:	400a      	ands	r2, r1
 8001a82:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d108      	bne.n	8001a9e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	689a      	ldr	r2, [r3, #8]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2180      	movs	r1, #128	; 0x80
 8001a96:	0209      	lsls	r1, r1, #8
 8001a98:	430a      	orrs	r2, r1
 8001a9a:	609a      	str	r2, [r3, #8]
 8001a9c:	e007      	b.n	8001aae <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	689a      	ldr	r2, [r3, #8]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	2184      	movs	r1, #132	; 0x84
 8001aa8:	0209      	lsls	r1, r1, #8
 8001aaa:	430a      	orrs	r2, r1
 8001aac:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	68db      	ldr	r3, [r3, #12]
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d104      	bne.n	8001ac0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2280      	movs	r2, #128	; 0x80
 8001abc:	0112      	lsls	r2, r2, #4
 8001abe:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	685a      	ldr	r2, [r3, #4]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	491f      	ldr	r1, [pc, #124]	; (8001b48 <HAL_I2C_Init+0x128>)
 8001acc:	430a      	orrs	r2, r1
 8001ace:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	68da      	ldr	r2, [r3, #12]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	491a      	ldr	r1, [pc, #104]	; (8001b44 <HAL_I2C_Init+0x124>)
 8001adc:	400a      	ands	r2, r1
 8001ade:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	691a      	ldr	r2, [r3, #16]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	695b      	ldr	r3, [r3, #20]
 8001ae8:	431a      	orrs	r2, r3
 8001aea:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	430a      	orrs	r2, r1
 8001af8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	69d9      	ldr	r1, [r3, #28]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6a1a      	ldr	r2, [r3, #32]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	430a      	orrs	r2, r1
 8001b08:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2101      	movs	r1, #1
 8001b16:	430a      	orrs	r2, r1
 8001b18:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2241      	movs	r2, #65	; 0x41
 8001b24:	2120      	movs	r1, #32
 8001b26:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2242      	movs	r2, #66	; 0x42
 8001b32:	2100      	movs	r1, #0
 8001b34:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001b36:	2300      	movs	r3, #0
}
 8001b38:	0018      	movs	r0, r3
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	b002      	add	sp, #8
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	f0ffffff 	.word	0xf0ffffff
 8001b44:	ffff7fff 	.word	0xffff7fff
 8001b48:	02008000 	.word	0x02008000

08001b4c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b4c:	b590      	push	{r4, r7, lr}
 8001b4e:	b089      	sub	sp, #36	; 0x24
 8001b50:	af02      	add	r7, sp, #8
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	000c      	movs	r4, r1
 8001b56:	0010      	movs	r0, r2
 8001b58:	0019      	movs	r1, r3
 8001b5a:	230a      	movs	r3, #10
 8001b5c:	18fb      	adds	r3, r7, r3
 8001b5e:	1c22      	adds	r2, r4, #0
 8001b60:	801a      	strh	r2, [r3, #0]
 8001b62:	2308      	movs	r3, #8
 8001b64:	18fb      	adds	r3, r7, r3
 8001b66:	1c02      	adds	r2, r0, #0
 8001b68:	801a      	strh	r2, [r3, #0]
 8001b6a:	1dbb      	adds	r3, r7, #6
 8001b6c:	1c0a      	adds	r2, r1, #0
 8001b6e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2241      	movs	r2, #65	; 0x41
 8001b74:	5c9b      	ldrb	r3, [r3, r2]
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	2b20      	cmp	r3, #32
 8001b7a:	d000      	beq.n	8001b7e <HAL_I2C_Mem_Write+0x32>
 8001b7c:	e10c      	b.n	8001d98 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d004      	beq.n	8001b8e <HAL_I2C_Mem_Write+0x42>
 8001b84:	232c      	movs	r3, #44	; 0x2c
 8001b86:	18fb      	adds	r3, r7, r3
 8001b88:	881b      	ldrh	r3, [r3, #0]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d105      	bne.n	8001b9a <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	2280      	movs	r2, #128	; 0x80
 8001b92:	0092      	lsls	r2, r2, #2
 8001b94:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e0ff      	b.n	8001d9a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	2240      	movs	r2, #64	; 0x40
 8001b9e:	5c9b      	ldrb	r3, [r3, r2]
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d101      	bne.n	8001ba8 <HAL_I2C_Mem_Write+0x5c>
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	e0f8      	b.n	8001d9a <HAL_I2C_Mem_Write+0x24e>
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2240      	movs	r2, #64	; 0x40
 8001bac:	2101      	movs	r1, #1
 8001bae:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001bb0:	f7ff f8f6 	bl	8000da0 <HAL_GetTick>
 8001bb4:	0003      	movs	r3, r0
 8001bb6:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001bb8:	2380      	movs	r3, #128	; 0x80
 8001bba:	0219      	lsls	r1, r3, #8
 8001bbc:	68f8      	ldr	r0, [r7, #12]
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	9300      	str	r3, [sp, #0]
 8001bc2:	2319      	movs	r3, #25
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	f000 f975 	bl	8001eb4 <I2C_WaitOnFlagUntilTimeout>
 8001bca:	1e03      	subs	r3, r0, #0
 8001bcc:	d001      	beq.n	8001bd2 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e0e3      	b.n	8001d9a <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2241      	movs	r2, #65	; 0x41
 8001bd6:	2121      	movs	r1, #33	; 0x21
 8001bd8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2242      	movs	r2, #66	; 0x42
 8001bde:	2140      	movs	r1, #64	; 0x40
 8001be0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2200      	movs	r2, #0
 8001be6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001bec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	222c      	movs	r2, #44	; 0x2c
 8001bf2:	18ba      	adds	r2, r7, r2
 8001bf4:	8812      	ldrh	r2, [r2, #0]
 8001bf6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001bfe:	1dbb      	adds	r3, r7, #6
 8001c00:	881c      	ldrh	r4, [r3, #0]
 8001c02:	2308      	movs	r3, #8
 8001c04:	18fb      	adds	r3, r7, r3
 8001c06:	881a      	ldrh	r2, [r3, #0]
 8001c08:	230a      	movs	r3, #10
 8001c0a:	18fb      	adds	r3, r7, r3
 8001c0c:	8819      	ldrh	r1, [r3, #0]
 8001c0e:	68f8      	ldr	r0, [r7, #12]
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	9301      	str	r3, [sp, #4]
 8001c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c16:	9300      	str	r3, [sp, #0]
 8001c18:	0023      	movs	r3, r4
 8001c1a:	f000 f8c5 	bl	8001da8 <I2C_RequestMemoryWrite>
 8001c1e:	1e03      	subs	r3, r0, #0
 8001c20:	d005      	beq.n	8001c2e <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2240      	movs	r2, #64	; 0x40
 8001c26:	2100      	movs	r1, #0
 8001c28:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e0b5      	b.n	8001d9a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c32:	b29b      	uxth	r3, r3
 8001c34:	2bff      	cmp	r3, #255	; 0xff
 8001c36:	d911      	bls.n	8001c5c <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	22ff      	movs	r2, #255	; 0xff
 8001c3c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c42:	b2da      	uxtb	r2, r3
 8001c44:	2380      	movs	r3, #128	; 0x80
 8001c46:	045c      	lsls	r4, r3, #17
 8001c48:	230a      	movs	r3, #10
 8001c4a:	18fb      	adds	r3, r7, r3
 8001c4c:	8819      	ldrh	r1, [r3, #0]
 8001c4e:	68f8      	ldr	r0, [r7, #12]
 8001c50:	2300      	movs	r3, #0
 8001c52:	9300      	str	r3, [sp, #0]
 8001c54:	0023      	movs	r3, r4
 8001c56:	f000 fa61 	bl	800211c <I2C_TransferConfig>
 8001c5a:	e012      	b.n	8001c82 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c60:	b29a      	uxth	r2, r3
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c6a:	b2da      	uxtb	r2, r3
 8001c6c:	2380      	movs	r3, #128	; 0x80
 8001c6e:	049c      	lsls	r4, r3, #18
 8001c70:	230a      	movs	r3, #10
 8001c72:	18fb      	adds	r3, r7, r3
 8001c74:	8819      	ldrh	r1, [r3, #0]
 8001c76:	68f8      	ldr	r0, [r7, #12]
 8001c78:	2300      	movs	r3, #0
 8001c7a:	9300      	str	r3, [sp, #0]
 8001c7c:	0023      	movs	r3, r4
 8001c7e:	f000 fa4d 	bl	800211c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c82:	697a      	ldr	r2, [r7, #20]
 8001c84:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	0018      	movs	r0, r3
 8001c8a:	f000 f952 	bl	8001f32 <I2C_WaitOnTXISFlagUntilTimeout>
 8001c8e:	1e03      	subs	r3, r0, #0
 8001c90:	d001      	beq.n	8001c96 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e081      	b.n	8001d9a <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9a:	781a      	ldrb	r2, [r3, #0]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca6:	1c5a      	adds	r2, r3, #1
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cb0:	b29b      	uxth	r3, r3
 8001cb2:	3b01      	subs	r3, #1
 8001cb4:	b29a      	uxth	r2, r3
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cbe:	3b01      	subs	r3, #1
 8001cc0:	b29a      	uxth	r2, r3
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d03a      	beq.n	8001d46 <HAL_I2C_Mem_Write+0x1fa>
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d136      	bne.n	8001d46 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001cd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001cda:	68f8      	ldr	r0, [r7, #12]
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	9300      	str	r3, [sp, #0]
 8001ce0:	0013      	movs	r3, r2
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	2180      	movs	r1, #128	; 0x80
 8001ce6:	f000 f8e5 	bl	8001eb4 <I2C_WaitOnFlagUntilTimeout>
 8001cea:	1e03      	subs	r3, r0, #0
 8001cec:	d001      	beq.n	8001cf2 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e053      	b.n	8001d9a <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cf6:	b29b      	uxth	r3, r3
 8001cf8:	2bff      	cmp	r3, #255	; 0xff
 8001cfa:	d911      	bls.n	8001d20 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	22ff      	movs	r2, #255	; 0xff
 8001d00:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d06:	b2da      	uxtb	r2, r3
 8001d08:	2380      	movs	r3, #128	; 0x80
 8001d0a:	045c      	lsls	r4, r3, #17
 8001d0c:	230a      	movs	r3, #10
 8001d0e:	18fb      	adds	r3, r7, r3
 8001d10:	8819      	ldrh	r1, [r3, #0]
 8001d12:	68f8      	ldr	r0, [r7, #12]
 8001d14:	2300      	movs	r3, #0
 8001d16:	9300      	str	r3, [sp, #0]
 8001d18:	0023      	movs	r3, r4
 8001d1a:	f000 f9ff 	bl	800211c <I2C_TransferConfig>
 8001d1e:	e012      	b.n	8001d46 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d24:	b29a      	uxth	r2, r3
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d2e:	b2da      	uxtb	r2, r3
 8001d30:	2380      	movs	r3, #128	; 0x80
 8001d32:	049c      	lsls	r4, r3, #18
 8001d34:	230a      	movs	r3, #10
 8001d36:	18fb      	adds	r3, r7, r3
 8001d38:	8819      	ldrh	r1, [r3, #0]
 8001d3a:	68f8      	ldr	r0, [r7, #12]
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	9300      	str	r3, [sp, #0]
 8001d40:	0023      	movs	r3, r4
 8001d42:	f000 f9eb 	bl	800211c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d198      	bne.n	8001c82 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d50:	697a      	ldr	r2, [r7, #20]
 8001d52:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	0018      	movs	r0, r3
 8001d58:	f000 f92a 	bl	8001fb0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001d5c:	1e03      	subs	r3, r0, #0
 8001d5e:	d001      	beq.n	8001d64 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e01a      	b.n	8001d9a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2220      	movs	r2, #32
 8001d6a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	685a      	ldr	r2, [r3, #4]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	490b      	ldr	r1, [pc, #44]	; (8001da4 <HAL_I2C_Mem_Write+0x258>)
 8001d78:	400a      	ands	r2, r1
 8001d7a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2241      	movs	r2, #65	; 0x41
 8001d80:	2120      	movs	r1, #32
 8001d82:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2242      	movs	r2, #66	; 0x42
 8001d88:	2100      	movs	r1, #0
 8001d8a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2240      	movs	r2, #64	; 0x40
 8001d90:	2100      	movs	r1, #0
 8001d92:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001d94:	2300      	movs	r3, #0
 8001d96:	e000      	b.n	8001d9a <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8001d98:	2302      	movs	r3, #2
  }
}
 8001d9a:	0018      	movs	r0, r3
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	b007      	add	sp, #28
 8001da0:	bd90      	pop	{r4, r7, pc}
 8001da2:	46c0      	nop			; (mov r8, r8)
 8001da4:	fe00e800 	.word	0xfe00e800

08001da8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001da8:	b5b0      	push	{r4, r5, r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af02      	add	r7, sp, #8
 8001dae:	60f8      	str	r0, [r7, #12]
 8001db0:	000c      	movs	r4, r1
 8001db2:	0010      	movs	r0, r2
 8001db4:	0019      	movs	r1, r3
 8001db6:	250a      	movs	r5, #10
 8001db8:	197b      	adds	r3, r7, r5
 8001dba:	1c22      	adds	r2, r4, #0
 8001dbc:	801a      	strh	r2, [r3, #0]
 8001dbe:	2308      	movs	r3, #8
 8001dc0:	18fb      	adds	r3, r7, r3
 8001dc2:	1c02      	adds	r2, r0, #0
 8001dc4:	801a      	strh	r2, [r3, #0]
 8001dc6:	1dbb      	adds	r3, r7, #6
 8001dc8:	1c0a      	adds	r2, r1, #0
 8001dca:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001dcc:	1dbb      	adds	r3, r7, #6
 8001dce:	881b      	ldrh	r3, [r3, #0]
 8001dd0:	b2da      	uxtb	r2, r3
 8001dd2:	2380      	movs	r3, #128	; 0x80
 8001dd4:	045c      	lsls	r4, r3, #17
 8001dd6:	197b      	adds	r3, r7, r5
 8001dd8:	8819      	ldrh	r1, [r3, #0]
 8001dda:	68f8      	ldr	r0, [r7, #12]
 8001ddc:	4b23      	ldr	r3, [pc, #140]	; (8001e6c <I2C_RequestMemoryWrite+0xc4>)
 8001dde:	9300      	str	r3, [sp, #0]
 8001de0:	0023      	movs	r3, r4
 8001de2:	f000 f99b 	bl	800211c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001de6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001de8:	6a39      	ldr	r1, [r7, #32]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	0018      	movs	r0, r3
 8001dee:	f000 f8a0 	bl	8001f32 <I2C_WaitOnTXISFlagUntilTimeout>
 8001df2:	1e03      	subs	r3, r0, #0
 8001df4:	d001      	beq.n	8001dfa <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e033      	b.n	8001e62 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001dfa:	1dbb      	adds	r3, r7, #6
 8001dfc:	881b      	ldrh	r3, [r3, #0]
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d107      	bne.n	8001e12 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001e02:	2308      	movs	r3, #8
 8001e04:	18fb      	adds	r3, r7, r3
 8001e06:	881b      	ldrh	r3, [r3, #0]
 8001e08:	b2da      	uxtb	r2, r3
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	629a      	str	r2, [r3, #40]	; 0x28
 8001e10:	e019      	b.n	8001e46 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001e12:	2308      	movs	r3, #8
 8001e14:	18fb      	adds	r3, r7, r3
 8001e16:	881b      	ldrh	r3, [r3, #0]
 8001e18:	0a1b      	lsrs	r3, r3, #8
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	b2da      	uxtb	r2, r3
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e26:	6a39      	ldr	r1, [r7, #32]
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	0018      	movs	r0, r3
 8001e2c:	f000 f881 	bl	8001f32 <I2C_WaitOnTXISFlagUntilTimeout>
 8001e30:	1e03      	subs	r3, r0, #0
 8001e32:	d001      	beq.n	8001e38 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e014      	b.n	8001e62 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001e38:	2308      	movs	r3, #8
 8001e3a:	18fb      	adds	r3, r7, r3
 8001e3c:	881b      	ldrh	r3, [r3, #0]
 8001e3e:	b2da      	uxtb	r2, r3
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001e46:	6a3a      	ldr	r2, [r7, #32]
 8001e48:	68f8      	ldr	r0, [r7, #12]
 8001e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4c:	9300      	str	r3, [sp, #0]
 8001e4e:	0013      	movs	r3, r2
 8001e50:	2200      	movs	r2, #0
 8001e52:	2180      	movs	r1, #128	; 0x80
 8001e54:	f000 f82e 	bl	8001eb4 <I2C_WaitOnFlagUntilTimeout>
 8001e58:	1e03      	subs	r3, r0, #0
 8001e5a:	d001      	beq.n	8001e60 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e000      	b.n	8001e62 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	0018      	movs	r0, r3
 8001e64:	46bd      	mov	sp, r7
 8001e66:	b004      	add	sp, #16
 8001e68:	bdb0      	pop	{r4, r5, r7, pc}
 8001e6a:	46c0      	nop			; (mov r8, r8)
 8001e6c:	80002000 	.word	0x80002000

08001e70 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	699b      	ldr	r3, [r3, #24]
 8001e7e:	2202      	movs	r2, #2
 8001e80:	4013      	ands	r3, r2
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d103      	bne.n	8001e8e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	699b      	ldr	r3, [r3, #24]
 8001e94:	2201      	movs	r2, #1
 8001e96:	4013      	ands	r3, r2
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d007      	beq.n	8001eac <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	699a      	ldr	r2, [r3, #24]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	2101      	movs	r1, #1
 8001ea8:	430a      	orrs	r2, r1
 8001eaa:	619a      	str	r2, [r3, #24]
  }
}
 8001eac:	46c0      	nop			; (mov r8, r8)
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	b002      	add	sp, #8
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	60f8      	str	r0, [r7, #12]
 8001ebc:	60b9      	str	r1, [r7, #8]
 8001ebe:	603b      	str	r3, [r7, #0]
 8001ec0:	1dfb      	adds	r3, r7, #7
 8001ec2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ec4:	e021      	b.n	8001f0a <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	3301      	adds	r3, #1
 8001eca:	d01e      	beq.n	8001f0a <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ecc:	f7fe ff68 	bl	8000da0 <HAL_GetTick>
 8001ed0:	0002      	movs	r2, r0
 8001ed2:	69bb      	ldr	r3, [r7, #24]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	683a      	ldr	r2, [r7, #0]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d302      	bcc.n	8001ee2 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d113      	bne.n	8001f0a <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee6:	2220      	movs	r2, #32
 8001ee8:	431a      	orrs	r2, r3
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2241      	movs	r2, #65	; 0x41
 8001ef2:	2120      	movs	r1, #32
 8001ef4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2242      	movs	r2, #66	; 0x42
 8001efa:	2100      	movs	r1, #0
 8001efc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2240      	movs	r2, #64	; 0x40
 8001f02:	2100      	movs	r1, #0
 8001f04:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e00f      	b.n	8001f2a <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	699b      	ldr	r3, [r3, #24]
 8001f10:	68ba      	ldr	r2, [r7, #8]
 8001f12:	4013      	ands	r3, r2
 8001f14:	68ba      	ldr	r2, [r7, #8]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	425a      	negs	r2, r3
 8001f1a:	4153      	adcs	r3, r2
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	001a      	movs	r2, r3
 8001f20:	1dfb      	adds	r3, r7, #7
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d0ce      	beq.n	8001ec6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	0018      	movs	r0, r3
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	b004      	add	sp, #16
 8001f30:	bd80      	pop	{r7, pc}

08001f32 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b084      	sub	sp, #16
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	60f8      	str	r0, [r7, #12]
 8001f3a:	60b9      	str	r1, [r7, #8]
 8001f3c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001f3e:	e02b      	b.n	8001f98 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	68b9      	ldr	r1, [r7, #8]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	0018      	movs	r0, r3
 8001f48:	f000 f86e 	bl	8002028 <I2C_IsAcknowledgeFailed>
 8001f4c:	1e03      	subs	r3, r0, #0
 8001f4e:	d001      	beq.n	8001f54 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e029      	b.n	8001fa8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	3301      	adds	r3, #1
 8001f58:	d01e      	beq.n	8001f98 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f5a:	f7fe ff21 	bl	8000da0 <HAL_GetTick>
 8001f5e:	0002      	movs	r2, r0
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	68ba      	ldr	r2, [r7, #8]
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d302      	bcc.n	8001f70 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d113      	bne.n	8001f98 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f74:	2220      	movs	r2, #32
 8001f76:	431a      	orrs	r2, r3
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2241      	movs	r2, #65	; 0x41
 8001f80:	2120      	movs	r1, #32
 8001f82:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2242      	movs	r2, #66	; 0x42
 8001f88:	2100      	movs	r1, #0
 8001f8a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2240      	movs	r2, #64	; 0x40
 8001f90:	2100      	movs	r1, #0
 8001f92:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e007      	b.n	8001fa8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	699b      	ldr	r3, [r3, #24]
 8001f9e:	2202      	movs	r2, #2
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d1cc      	bne.n	8001f40 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001fa6:	2300      	movs	r3, #0
}
 8001fa8:	0018      	movs	r0, r3
 8001faa:	46bd      	mov	sp, r7
 8001fac:	b004      	add	sp, #16
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	60b9      	str	r1, [r7, #8]
 8001fba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001fbc:	e028      	b.n	8002010 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	68b9      	ldr	r1, [r7, #8]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	0018      	movs	r0, r3
 8001fc6:	f000 f82f 	bl	8002028 <I2C_IsAcknowledgeFailed>
 8001fca:	1e03      	subs	r3, r0, #0
 8001fcc:	d001      	beq.n	8001fd2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e026      	b.n	8002020 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fd2:	f7fe fee5 	bl	8000da0 <HAL_GetTick>
 8001fd6:	0002      	movs	r2, r0
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	68ba      	ldr	r2, [r7, #8]
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d302      	bcc.n	8001fe8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d113      	bne.n	8002010 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fec:	2220      	movs	r2, #32
 8001fee:	431a      	orrs	r2, r3
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	2241      	movs	r2, #65	; 0x41
 8001ff8:	2120      	movs	r1, #32
 8001ffa:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2242      	movs	r2, #66	; 0x42
 8002000:	2100      	movs	r1, #0
 8002002:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2240      	movs	r2, #64	; 0x40
 8002008:	2100      	movs	r1, #0
 800200a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e007      	b.n	8002020 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	699b      	ldr	r3, [r3, #24]
 8002016:	2220      	movs	r2, #32
 8002018:	4013      	ands	r3, r2
 800201a:	2b20      	cmp	r3, #32
 800201c:	d1cf      	bne.n	8001fbe <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800201e:	2300      	movs	r3, #0
}
 8002020:	0018      	movs	r0, r3
 8002022:	46bd      	mov	sp, r7
 8002024:	b004      	add	sp, #16
 8002026:	bd80      	pop	{r7, pc}

08002028 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	60f8      	str	r0, [r7, #12]
 8002030:	60b9      	str	r1, [r7, #8]
 8002032:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	699b      	ldr	r3, [r3, #24]
 800203a:	2210      	movs	r2, #16
 800203c:	4013      	ands	r3, r2
 800203e:	2b10      	cmp	r3, #16
 8002040:	d164      	bne.n	800210c <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	685a      	ldr	r2, [r3, #4]
 8002048:	2380      	movs	r3, #128	; 0x80
 800204a:	049b      	lsls	r3, r3, #18
 800204c:	401a      	ands	r2, r3
 800204e:	2380      	movs	r3, #128	; 0x80
 8002050:	049b      	lsls	r3, r3, #18
 8002052:	429a      	cmp	r2, r3
 8002054:	d02b      	beq.n	80020ae <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	685a      	ldr	r2, [r3, #4]
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2180      	movs	r1, #128	; 0x80
 8002062:	01c9      	lsls	r1, r1, #7
 8002064:	430a      	orrs	r2, r1
 8002066:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002068:	e021      	b.n	80020ae <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	3301      	adds	r3, #1
 800206e:	d01e      	beq.n	80020ae <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002070:	f7fe fe96 	bl	8000da0 <HAL_GetTick>
 8002074:	0002      	movs	r2, r0
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	68ba      	ldr	r2, [r7, #8]
 800207c:	429a      	cmp	r2, r3
 800207e:	d302      	bcc.n	8002086 <I2C_IsAcknowledgeFailed+0x5e>
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d113      	bne.n	80020ae <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800208a:	2220      	movs	r2, #32
 800208c:	431a      	orrs	r2, r3
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2241      	movs	r2, #65	; 0x41
 8002096:	2120      	movs	r1, #32
 8002098:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2242      	movs	r2, #66	; 0x42
 800209e:	2100      	movs	r1, #0
 80020a0:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2240      	movs	r2, #64	; 0x40
 80020a6:	2100      	movs	r1, #0
 80020a8:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e02f      	b.n	800210e <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	699b      	ldr	r3, [r3, #24]
 80020b4:	2220      	movs	r2, #32
 80020b6:	4013      	ands	r3, r2
 80020b8:	2b20      	cmp	r3, #32
 80020ba:	d1d6      	bne.n	800206a <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2210      	movs	r2, #16
 80020c2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2220      	movs	r2, #32
 80020ca:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	0018      	movs	r0, r3
 80020d0:	f7ff fece 	bl	8001e70 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	685a      	ldr	r2, [r3, #4]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	490e      	ldr	r1, [pc, #56]	; (8002118 <I2C_IsAcknowledgeFailed+0xf0>)
 80020e0:	400a      	ands	r2, r1
 80020e2:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e8:	2204      	movs	r2, #4
 80020ea:	431a      	orrs	r2, r3
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2241      	movs	r2, #65	; 0x41
 80020f4:	2120      	movs	r1, #32
 80020f6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2242      	movs	r2, #66	; 0x42
 80020fc:	2100      	movs	r1, #0
 80020fe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2240      	movs	r2, #64	; 0x40
 8002104:	2100      	movs	r1, #0
 8002106:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e000      	b.n	800210e <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 800210c:	2300      	movs	r3, #0
}
 800210e:	0018      	movs	r0, r3
 8002110:	46bd      	mov	sp, r7
 8002112:	b004      	add	sp, #16
 8002114:	bd80      	pop	{r7, pc}
 8002116:	46c0      	nop			; (mov r8, r8)
 8002118:	fe00e800 	.word	0xfe00e800

0800211c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800211c:	b590      	push	{r4, r7, lr}
 800211e:	b085      	sub	sp, #20
 8002120:	af00      	add	r7, sp, #0
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	0008      	movs	r0, r1
 8002126:	0011      	movs	r1, r2
 8002128:	607b      	str	r3, [r7, #4]
 800212a:	240a      	movs	r4, #10
 800212c:	193b      	adds	r3, r7, r4
 800212e:	1c02      	adds	r2, r0, #0
 8002130:	801a      	strh	r2, [r3, #0]
 8002132:	2009      	movs	r0, #9
 8002134:	183b      	adds	r3, r7, r0
 8002136:	1c0a      	adds	r2, r1, #0
 8002138:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	6a3a      	ldr	r2, [r7, #32]
 8002142:	0d51      	lsrs	r1, r2, #21
 8002144:	2280      	movs	r2, #128	; 0x80
 8002146:	00d2      	lsls	r2, r2, #3
 8002148:	400a      	ands	r2, r1
 800214a:	490e      	ldr	r1, [pc, #56]	; (8002184 <I2C_TransferConfig+0x68>)
 800214c:	430a      	orrs	r2, r1
 800214e:	43d2      	mvns	r2, r2
 8002150:	401a      	ands	r2, r3
 8002152:	0011      	movs	r1, r2
 8002154:	193b      	adds	r3, r7, r4
 8002156:	881b      	ldrh	r3, [r3, #0]
 8002158:	059b      	lsls	r3, r3, #22
 800215a:	0d9a      	lsrs	r2, r3, #22
 800215c:	183b      	adds	r3, r7, r0
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	0418      	lsls	r0, r3, #16
 8002162:	23ff      	movs	r3, #255	; 0xff
 8002164:	041b      	lsls	r3, r3, #16
 8002166:	4003      	ands	r3, r0
 8002168:	431a      	orrs	r2, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	431a      	orrs	r2, r3
 800216e:	6a3b      	ldr	r3, [r7, #32]
 8002170:	431a      	orrs	r2, r3
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	430a      	orrs	r2, r1
 8002178:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 800217a:	46c0      	nop			; (mov r8, r8)
 800217c:	46bd      	mov	sp, r7
 800217e:	b005      	add	sp, #20
 8002180:	bd90      	pop	{r4, r7, pc}
 8002182:	46c0      	nop			; (mov r8, r8)
 8002184:	03ff63ff 	.word	0x03ff63ff

08002188 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2241      	movs	r2, #65	; 0x41
 8002196:	5c9b      	ldrb	r3, [r3, r2]
 8002198:	b2db      	uxtb	r3, r3
 800219a:	2b20      	cmp	r3, #32
 800219c:	d138      	bne.n	8002210 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2240      	movs	r2, #64	; 0x40
 80021a2:	5c9b      	ldrb	r3, [r3, r2]
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d101      	bne.n	80021ac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80021a8:	2302      	movs	r3, #2
 80021aa:	e032      	b.n	8002212 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2240      	movs	r2, #64	; 0x40
 80021b0:	2101      	movs	r1, #1
 80021b2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2241      	movs	r2, #65	; 0x41
 80021b8:	2124      	movs	r1, #36	; 0x24
 80021ba:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	2101      	movs	r1, #1
 80021c8:	438a      	bics	r2, r1
 80021ca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4911      	ldr	r1, [pc, #68]	; (800221c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80021d8:	400a      	ands	r2, r1
 80021da:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	6819      	ldr	r1, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	683a      	ldr	r2, [r7, #0]
 80021e8:	430a      	orrs	r2, r1
 80021ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	2101      	movs	r1, #1
 80021f8:	430a      	orrs	r2, r1
 80021fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2241      	movs	r2, #65	; 0x41
 8002200:	2120      	movs	r1, #32
 8002202:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2240      	movs	r2, #64	; 0x40
 8002208:	2100      	movs	r1, #0
 800220a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800220c:	2300      	movs	r3, #0
 800220e:	e000      	b.n	8002212 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002210:	2302      	movs	r3, #2
  }
}
 8002212:	0018      	movs	r0, r3
 8002214:	46bd      	mov	sp, r7
 8002216:	b002      	add	sp, #8
 8002218:	bd80      	pop	{r7, pc}
 800221a:	46c0      	nop			; (mov r8, r8)
 800221c:	ffffefff 	.word	0xffffefff

08002220 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2241      	movs	r2, #65	; 0x41
 800222e:	5c9b      	ldrb	r3, [r3, r2]
 8002230:	b2db      	uxtb	r3, r3
 8002232:	2b20      	cmp	r3, #32
 8002234:	d139      	bne.n	80022aa <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2240      	movs	r2, #64	; 0x40
 800223a:	5c9b      	ldrb	r3, [r3, r2]
 800223c:	2b01      	cmp	r3, #1
 800223e:	d101      	bne.n	8002244 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002240:	2302      	movs	r3, #2
 8002242:	e033      	b.n	80022ac <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2240      	movs	r2, #64	; 0x40
 8002248:	2101      	movs	r1, #1
 800224a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2241      	movs	r2, #65	; 0x41
 8002250:	2124      	movs	r1, #36	; 0x24
 8002252:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	2101      	movs	r1, #1
 8002260:	438a      	bics	r2, r1
 8002262:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	4a11      	ldr	r2, [pc, #68]	; (80022b4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002270:	4013      	ands	r3, r2
 8002272:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	021b      	lsls	r3, r3, #8
 8002278:	68fa      	ldr	r2, [r7, #12]
 800227a:	4313      	orrs	r3, r2
 800227c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	68fa      	ldr	r2, [r7, #12]
 8002284:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2101      	movs	r1, #1
 8002292:	430a      	orrs	r2, r1
 8002294:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2241      	movs	r2, #65	; 0x41
 800229a:	2120      	movs	r1, #32
 800229c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2240      	movs	r2, #64	; 0x40
 80022a2:	2100      	movs	r1, #0
 80022a4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80022a6:	2300      	movs	r3, #0
 80022a8:	e000      	b.n	80022ac <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80022aa:	2302      	movs	r3, #2
  }
}
 80022ac:	0018      	movs	r0, r3
 80022ae:	46bd      	mov	sp, r7
 80022b0:	b004      	add	sp, #16
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	fffff0ff 	.word	0xfffff0ff

080022b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b088      	sub	sp, #32
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d101      	bne.n	80022ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e305      	b.n	80028d6 <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	2201      	movs	r2, #1
 80022d0:	4013      	ands	r3, r2
 80022d2:	d100      	bne.n	80022d6 <HAL_RCC_OscConfig+0x1e>
 80022d4:	e08d      	b.n	80023f2 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80022d6:	4bc5      	ldr	r3, [pc, #788]	; (80025ec <HAL_RCC_OscConfig+0x334>)
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	220c      	movs	r2, #12
 80022dc:	4013      	ands	r3, r2
 80022de:	2b04      	cmp	r3, #4
 80022e0:	d00e      	beq.n	8002300 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80022e2:	4bc2      	ldr	r3, [pc, #776]	; (80025ec <HAL_RCC_OscConfig+0x334>)
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	220c      	movs	r2, #12
 80022e8:	4013      	ands	r3, r2
 80022ea:	2b08      	cmp	r3, #8
 80022ec:	d116      	bne.n	800231c <HAL_RCC_OscConfig+0x64>
 80022ee:	4bbf      	ldr	r3, [pc, #764]	; (80025ec <HAL_RCC_OscConfig+0x334>)
 80022f0:	685a      	ldr	r2, [r3, #4]
 80022f2:	23c0      	movs	r3, #192	; 0xc0
 80022f4:	025b      	lsls	r3, r3, #9
 80022f6:	401a      	ands	r2, r3
 80022f8:	2380      	movs	r3, #128	; 0x80
 80022fa:	025b      	lsls	r3, r3, #9
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d10d      	bne.n	800231c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002300:	4bba      	ldr	r3, [pc, #744]	; (80025ec <HAL_RCC_OscConfig+0x334>)
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	2380      	movs	r3, #128	; 0x80
 8002306:	029b      	lsls	r3, r3, #10
 8002308:	4013      	ands	r3, r2
 800230a:	d100      	bne.n	800230e <HAL_RCC_OscConfig+0x56>
 800230c:	e070      	b.n	80023f0 <HAL_RCC_OscConfig+0x138>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d000      	beq.n	8002318 <HAL_RCC_OscConfig+0x60>
 8002316:	e06b      	b.n	80023f0 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e2dc      	b.n	80028d6 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	2b01      	cmp	r3, #1
 8002322:	d107      	bne.n	8002334 <HAL_RCC_OscConfig+0x7c>
 8002324:	4bb1      	ldr	r3, [pc, #708]	; (80025ec <HAL_RCC_OscConfig+0x334>)
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	4bb0      	ldr	r3, [pc, #704]	; (80025ec <HAL_RCC_OscConfig+0x334>)
 800232a:	2180      	movs	r1, #128	; 0x80
 800232c:	0249      	lsls	r1, r1, #9
 800232e:	430a      	orrs	r2, r1
 8002330:	601a      	str	r2, [r3, #0]
 8002332:	e02f      	b.n	8002394 <HAL_RCC_OscConfig+0xdc>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d10c      	bne.n	8002356 <HAL_RCC_OscConfig+0x9e>
 800233c:	4bab      	ldr	r3, [pc, #684]	; (80025ec <HAL_RCC_OscConfig+0x334>)
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	4baa      	ldr	r3, [pc, #680]	; (80025ec <HAL_RCC_OscConfig+0x334>)
 8002342:	49ab      	ldr	r1, [pc, #684]	; (80025f0 <HAL_RCC_OscConfig+0x338>)
 8002344:	400a      	ands	r2, r1
 8002346:	601a      	str	r2, [r3, #0]
 8002348:	4ba8      	ldr	r3, [pc, #672]	; (80025ec <HAL_RCC_OscConfig+0x334>)
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	4ba7      	ldr	r3, [pc, #668]	; (80025ec <HAL_RCC_OscConfig+0x334>)
 800234e:	49a9      	ldr	r1, [pc, #676]	; (80025f4 <HAL_RCC_OscConfig+0x33c>)
 8002350:	400a      	ands	r2, r1
 8002352:	601a      	str	r2, [r3, #0]
 8002354:	e01e      	b.n	8002394 <HAL_RCC_OscConfig+0xdc>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	2b05      	cmp	r3, #5
 800235c:	d10e      	bne.n	800237c <HAL_RCC_OscConfig+0xc4>
 800235e:	4ba3      	ldr	r3, [pc, #652]	; (80025ec <HAL_RCC_OscConfig+0x334>)
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	4ba2      	ldr	r3, [pc, #648]	; (80025ec <HAL_RCC_OscConfig+0x334>)
 8002364:	2180      	movs	r1, #128	; 0x80
 8002366:	02c9      	lsls	r1, r1, #11
 8002368:	430a      	orrs	r2, r1
 800236a:	601a      	str	r2, [r3, #0]
 800236c:	4b9f      	ldr	r3, [pc, #636]	; (80025ec <HAL_RCC_OscConfig+0x334>)
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	4b9e      	ldr	r3, [pc, #632]	; (80025ec <HAL_RCC_OscConfig+0x334>)
 8002372:	2180      	movs	r1, #128	; 0x80
 8002374:	0249      	lsls	r1, r1, #9
 8002376:	430a      	orrs	r2, r1
 8002378:	601a      	str	r2, [r3, #0]
 800237a:	e00b      	b.n	8002394 <HAL_RCC_OscConfig+0xdc>
 800237c:	4b9b      	ldr	r3, [pc, #620]	; (80025ec <HAL_RCC_OscConfig+0x334>)
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	4b9a      	ldr	r3, [pc, #616]	; (80025ec <HAL_RCC_OscConfig+0x334>)
 8002382:	499b      	ldr	r1, [pc, #620]	; (80025f0 <HAL_RCC_OscConfig+0x338>)
 8002384:	400a      	ands	r2, r1
 8002386:	601a      	str	r2, [r3, #0]
 8002388:	4b98      	ldr	r3, [pc, #608]	; (80025ec <HAL_RCC_OscConfig+0x334>)
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	4b97      	ldr	r3, [pc, #604]	; (80025ec <HAL_RCC_OscConfig+0x334>)
 800238e:	4999      	ldr	r1, [pc, #612]	; (80025f4 <HAL_RCC_OscConfig+0x33c>)
 8002390:	400a      	ands	r2, r1
 8002392:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d014      	beq.n	80023c6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800239c:	f7fe fd00 	bl	8000da0 <HAL_GetTick>
 80023a0:	0003      	movs	r3, r0
 80023a2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023a4:	e008      	b.n	80023b8 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023a6:	f7fe fcfb 	bl	8000da0 <HAL_GetTick>
 80023aa:	0002      	movs	r2, r0
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	2b64      	cmp	r3, #100	; 0x64
 80023b2:	d901      	bls.n	80023b8 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	e28e      	b.n	80028d6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023b8:	4b8c      	ldr	r3, [pc, #560]	; (80025ec <HAL_RCC_OscConfig+0x334>)
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	2380      	movs	r3, #128	; 0x80
 80023be:	029b      	lsls	r3, r3, #10
 80023c0:	4013      	ands	r3, r2
 80023c2:	d0f0      	beq.n	80023a6 <HAL_RCC_OscConfig+0xee>
 80023c4:	e015      	b.n	80023f2 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c6:	f7fe fceb 	bl	8000da0 <HAL_GetTick>
 80023ca:	0003      	movs	r3, r0
 80023cc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023ce:	e008      	b.n	80023e2 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023d0:	f7fe fce6 	bl	8000da0 <HAL_GetTick>
 80023d4:	0002      	movs	r2, r0
 80023d6:	69bb      	ldr	r3, [r7, #24]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b64      	cmp	r3, #100	; 0x64
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e279      	b.n	80028d6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023e2:	4b82      	ldr	r3, [pc, #520]	; (80025ec <HAL_RCC_OscConfig+0x334>)
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	2380      	movs	r3, #128	; 0x80
 80023e8:	029b      	lsls	r3, r3, #10
 80023ea:	4013      	ands	r3, r2
 80023ec:	d1f0      	bne.n	80023d0 <HAL_RCC_OscConfig+0x118>
 80023ee:	e000      	b.n	80023f2 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023f0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	2202      	movs	r2, #2
 80023f8:	4013      	ands	r3, r2
 80023fa:	d100      	bne.n	80023fe <HAL_RCC_OscConfig+0x146>
 80023fc:	e06c      	b.n	80024d8 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80023fe:	4b7b      	ldr	r3, [pc, #492]	; (80025ec <HAL_RCC_OscConfig+0x334>)
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	220c      	movs	r2, #12
 8002404:	4013      	ands	r3, r2
 8002406:	d00e      	beq.n	8002426 <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002408:	4b78      	ldr	r3, [pc, #480]	; (80025ec <HAL_RCC_OscConfig+0x334>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	220c      	movs	r2, #12
 800240e:	4013      	ands	r3, r2
 8002410:	2b08      	cmp	r3, #8
 8002412:	d11f      	bne.n	8002454 <HAL_RCC_OscConfig+0x19c>
 8002414:	4b75      	ldr	r3, [pc, #468]	; (80025ec <HAL_RCC_OscConfig+0x334>)
 8002416:	685a      	ldr	r2, [r3, #4]
 8002418:	23c0      	movs	r3, #192	; 0xc0
 800241a:	025b      	lsls	r3, r3, #9
 800241c:	401a      	ands	r2, r3
 800241e:	2380      	movs	r3, #128	; 0x80
 8002420:	021b      	lsls	r3, r3, #8
 8002422:	429a      	cmp	r2, r3
 8002424:	d116      	bne.n	8002454 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002426:	4b71      	ldr	r3, [pc, #452]	; (80025ec <HAL_RCC_OscConfig+0x334>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2202      	movs	r2, #2
 800242c:	4013      	ands	r3, r2
 800242e:	d005      	beq.n	800243c <HAL_RCC_OscConfig+0x184>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	2b01      	cmp	r3, #1
 8002436:	d001      	beq.n	800243c <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e24c      	b.n	80028d6 <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800243c:	4b6b      	ldr	r3, [pc, #428]	; (80025ec <HAL_RCC_OscConfig+0x334>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	22f8      	movs	r2, #248	; 0xf8
 8002442:	4393      	bics	r3, r2
 8002444:	0019      	movs	r1, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	691b      	ldr	r3, [r3, #16]
 800244a:	00da      	lsls	r2, r3, #3
 800244c:	4b67      	ldr	r3, [pc, #412]	; (80025ec <HAL_RCC_OscConfig+0x334>)
 800244e:	430a      	orrs	r2, r1
 8002450:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002452:	e041      	b.n	80024d8 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d024      	beq.n	80024a6 <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800245c:	4b63      	ldr	r3, [pc, #396]	; (80025ec <HAL_RCC_OscConfig+0x334>)
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	4b62      	ldr	r3, [pc, #392]	; (80025ec <HAL_RCC_OscConfig+0x334>)
 8002462:	2101      	movs	r1, #1
 8002464:	430a      	orrs	r2, r1
 8002466:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002468:	f7fe fc9a 	bl	8000da0 <HAL_GetTick>
 800246c:	0003      	movs	r3, r0
 800246e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002470:	e008      	b.n	8002484 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002472:	f7fe fc95 	bl	8000da0 <HAL_GetTick>
 8002476:	0002      	movs	r2, r0
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	2b02      	cmp	r3, #2
 800247e:	d901      	bls.n	8002484 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	e228      	b.n	80028d6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002484:	4b59      	ldr	r3, [pc, #356]	; (80025ec <HAL_RCC_OscConfig+0x334>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2202      	movs	r2, #2
 800248a:	4013      	ands	r3, r2
 800248c:	d0f1      	beq.n	8002472 <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800248e:	4b57      	ldr	r3, [pc, #348]	; (80025ec <HAL_RCC_OscConfig+0x334>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	22f8      	movs	r2, #248	; 0xf8
 8002494:	4393      	bics	r3, r2
 8002496:	0019      	movs	r1, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	691b      	ldr	r3, [r3, #16]
 800249c:	00da      	lsls	r2, r3, #3
 800249e:	4b53      	ldr	r3, [pc, #332]	; (80025ec <HAL_RCC_OscConfig+0x334>)
 80024a0:	430a      	orrs	r2, r1
 80024a2:	601a      	str	r2, [r3, #0]
 80024a4:	e018      	b.n	80024d8 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024a6:	4b51      	ldr	r3, [pc, #324]	; (80025ec <HAL_RCC_OscConfig+0x334>)
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	4b50      	ldr	r3, [pc, #320]	; (80025ec <HAL_RCC_OscConfig+0x334>)
 80024ac:	2101      	movs	r1, #1
 80024ae:	438a      	bics	r2, r1
 80024b0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b2:	f7fe fc75 	bl	8000da0 <HAL_GetTick>
 80024b6:	0003      	movs	r3, r0
 80024b8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ba:	e008      	b.n	80024ce <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024bc:	f7fe fc70 	bl	8000da0 <HAL_GetTick>
 80024c0:	0002      	movs	r2, r0
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d901      	bls.n	80024ce <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e203      	b.n	80028d6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ce:	4b47      	ldr	r3, [pc, #284]	; (80025ec <HAL_RCC_OscConfig+0x334>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	2202      	movs	r2, #2
 80024d4:	4013      	ands	r3, r2
 80024d6:	d1f1      	bne.n	80024bc <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	2208      	movs	r2, #8
 80024de:	4013      	ands	r3, r2
 80024e0:	d036      	beq.n	8002550 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	69db      	ldr	r3, [r3, #28]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d019      	beq.n	800251e <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024ea:	4b40      	ldr	r3, [pc, #256]	; (80025ec <HAL_RCC_OscConfig+0x334>)
 80024ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024ee:	4b3f      	ldr	r3, [pc, #252]	; (80025ec <HAL_RCC_OscConfig+0x334>)
 80024f0:	2101      	movs	r1, #1
 80024f2:	430a      	orrs	r2, r1
 80024f4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024f6:	f7fe fc53 	bl	8000da0 <HAL_GetTick>
 80024fa:	0003      	movs	r3, r0
 80024fc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024fe:	e008      	b.n	8002512 <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002500:	f7fe fc4e 	bl	8000da0 <HAL_GetTick>
 8002504:	0002      	movs	r2, r0
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b02      	cmp	r3, #2
 800250c:	d901      	bls.n	8002512 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e1e1      	b.n	80028d6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002512:	4b36      	ldr	r3, [pc, #216]	; (80025ec <HAL_RCC_OscConfig+0x334>)
 8002514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002516:	2202      	movs	r2, #2
 8002518:	4013      	ands	r3, r2
 800251a:	d0f1      	beq.n	8002500 <HAL_RCC_OscConfig+0x248>
 800251c:	e018      	b.n	8002550 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800251e:	4b33      	ldr	r3, [pc, #204]	; (80025ec <HAL_RCC_OscConfig+0x334>)
 8002520:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002522:	4b32      	ldr	r3, [pc, #200]	; (80025ec <HAL_RCC_OscConfig+0x334>)
 8002524:	2101      	movs	r1, #1
 8002526:	438a      	bics	r2, r1
 8002528:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800252a:	f7fe fc39 	bl	8000da0 <HAL_GetTick>
 800252e:	0003      	movs	r3, r0
 8002530:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002532:	e008      	b.n	8002546 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002534:	f7fe fc34 	bl	8000da0 <HAL_GetTick>
 8002538:	0002      	movs	r2, r0
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b02      	cmp	r3, #2
 8002540:	d901      	bls.n	8002546 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e1c7      	b.n	80028d6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002546:	4b29      	ldr	r3, [pc, #164]	; (80025ec <HAL_RCC_OscConfig+0x334>)
 8002548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254a:	2202      	movs	r2, #2
 800254c:	4013      	ands	r3, r2
 800254e:	d1f1      	bne.n	8002534 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	2204      	movs	r2, #4
 8002556:	4013      	ands	r3, r2
 8002558:	d100      	bne.n	800255c <HAL_RCC_OscConfig+0x2a4>
 800255a:	e0b5      	b.n	80026c8 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 800255c:	201f      	movs	r0, #31
 800255e:	183b      	adds	r3, r7, r0
 8002560:	2200      	movs	r2, #0
 8002562:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002564:	4b21      	ldr	r3, [pc, #132]	; (80025ec <HAL_RCC_OscConfig+0x334>)
 8002566:	69da      	ldr	r2, [r3, #28]
 8002568:	2380      	movs	r3, #128	; 0x80
 800256a:	055b      	lsls	r3, r3, #21
 800256c:	4013      	ands	r3, r2
 800256e:	d110      	bne.n	8002592 <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002570:	4b1e      	ldr	r3, [pc, #120]	; (80025ec <HAL_RCC_OscConfig+0x334>)
 8002572:	69da      	ldr	r2, [r3, #28]
 8002574:	4b1d      	ldr	r3, [pc, #116]	; (80025ec <HAL_RCC_OscConfig+0x334>)
 8002576:	2180      	movs	r1, #128	; 0x80
 8002578:	0549      	lsls	r1, r1, #21
 800257a:	430a      	orrs	r2, r1
 800257c:	61da      	str	r2, [r3, #28]
 800257e:	4b1b      	ldr	r3, [pc, #108]	; (80025ec <HAL_RCC_OscConfig+0x334>)
 8002580:	69da      	ldr	r2, [r3, #28]
 8002582:	2380      	movs	r3, #128	; 0x80
 8002584:	055b      	lsls	r3, r3, #21
 8002586:	4013      	ands	r3, r2
 8002588:	60fb      	str	r3, [r7, #12]
 800258a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800258c:	183b      	adds	r3, r7, r0
 800258e:	2201      	movs	r2, #1
 8002590:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002592:	4b19      	ldr	r3, [pc, #100]	; (80025f8 <HAL_RCC_OscConfig+0x340>)
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	2380      	movs	r3, #128	; 0x80
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	4013      	ands	r3, r2
 800259c:	d11a      	bne.n	80025d4 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800259e:	4b16      	ldr	r3, [pc, #88]	; (80025f8 <HAL_RCC_OscConfig+0x340>)
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	4b15      	ldr	r3, [pc, #84]	; (80025f8 <HAL_RCC_OscConfig+0x340>)
 80025a4:	2180      	movs	r1, #128	; 0x80
 80025a6:	0049      	lsls	r1, r1, #1
 80025a8:	430a      	orrs	r2, r1
 80025aa:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025ac:	f7fe fbf8 	bl	8000da0 <HAL_GetTick>
 80025b0:	0003      	movs	r3, r0
 80025b2:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025b4:	e008      	b.n	80025c8 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025b6:	f7fe fbf3 	bl	8000da0 <HAL_GetTick>
 80025ba:	0002      	movs	r2, r0
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	2b64      	cmp	r3, #100	; 0x64
 80025c2:	d901      	bls.n	80025c8 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	e186      	b.n	80028d6 <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025c8:	4b0b      	ldr	r3, [pc, #44]	; (80025f8 <HAL_RCC_OscConfig+0x340>)
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	2380      	movs	r3, #128	; 0x80
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	4013      	ands	r3, r2
 80025d2:	d0f0      	beq.n	80025b6 <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d10f      	bne.n	80025fc <HAL_RCC_OscConfig+0x344>
 80025dc:	4b03      	ldr	r3, [pc, #12]	; (80025ec <HAL_RCC_OscConfig+0x334>)
 80025de:	6a1a      	ldr	r2, [r3, #32]
 80025e0:	4b02      	ldr	r3, [pc, #8]	; (80025ec <HAL_RCC_OscConfig+0x334>)
 80025e2:	2101      	movs	r1, #1
 80025e4:	430a      	orrs	r2, r1
 80025e6:	621a      	str	r2, [r3, #32]
 80025e8:	e036      	b.n	8002658 <HAL_RCC_OscConfig+0x3a0>
 80025ea:	46c0      	nop			; (mov r8, r8)
 80025ec:	40021000 	.word	0x40021000
 80025f0:	fffeffff 	.word	0xfffeffff
 80025f4:	fffbffff 	.word	0xfffbffff
 80025f8:	40007000 	.word	0x40007000
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d10c      	bne.n	800261e <HAL_RCC_OscConfig+0x366>
 8002604:	4bb6      	ldr	r3, [pc, #728]	; (80028e0 <HAL_RCC_OscConfig+0x628>)
 8002606:	6a1a      	ldr	r2, [r3, #32]
 8002608:	4bb5      	ldr	r3, [pc, #724]	; (80028e0 <HAL_RCC_OscConfig+0x628>)
 800260a:	2101      	movs	r1, #1
 800260c:	438a      	bics	r2, r1
 800260e:	621a      	str	r2, [r3, #32]
 8002610:	4bb3      	ldr	r3, [pc, #716]	; (80028e0 <HAL_RCC_OscConfig+0x628>)
 8002612:	6a1a      	ldr	r2, [r3, #32]
 8002614:	4bb2      	ldr	r3, [pc, #712]	; (80028e0 <HAL_RCC_OscConfig+0x628>)
 8002616:	2104      	movs	r1, #4
 8002618:	438a      	bics	r2, r1
 800261a:	621a      	str	r2, [r3, #32]
 800261c:	e01c      	b.n	8002658 <HAL_RCC_OscConfig+0x3a0>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	2b05      	cmp	r3, #5
 8002624:	d10c      	bne.n	8002640 <HAL_RCC_OscConfig+0x388>
 8002626:	4bae      	ldr	r3, [pc, #696]	; (80028e0 <HAL_RCC_OscConfig+0x628>)
 8002628:	6a1a      	ldr	r2, [r3, #32]
 800262a:	4bad      	ldr	r3, [pc, #692]	; (80028e0 <HAL_RCC_OscConfig+0x628>)
 800262c:	2104      	movs	r1, #4
 800262e:	430a      	orrs	r2, r1
 8002630:	621a      	str	r2, [r3, #32]
 8002632:	4bab      	ldr	r3, [pc, #684]	; (80028e0 <HAL_RCC_OscConfig+0x628>)
 8002634:	6a1a      	ldr	r2, [r3, #32]
 8002636:	4baa      	ldr	r3, [pc, #680]	; (80028e0 <HAL_RCC_OscConfig+0x628>)
 8002638:	2101      	movs	r1, #1
 800263a:	430a      	orrs	r2, r1
 800263c:	621a      	str	r2, [r3, #32]
 800263e:	e00b      	b.n	8002658 <HAL_RCC_OscConfig+0x3a0>
 8002640:	4ba7      	ldr	r3, [pc, #668]	; (80028e0 <HAL_RCC_OscConfig+0x628>)
 8002642:	6a1a      	ldr	r2, [r3, #32]
 8002644:	4ba6      	ldr	r3, [pc, #664]	; (80028e0 <HAL_RCC_OscConfig+0x628>)
 8002646:	2101      	movs	r1, #1
 8002648:	438a      	bics	r2, r1
 800264a:	621a      	str	r2, [r3, #32]
 800264c:	4ba4      	ldr	r3, [pc, #656]	; (80028e0 <HAL_RCC_OscConfig+0x628>)
 800264e:	6a1a      	ldr	r2, [r3, #32]
 8002650:	4ba3      	ldr	r3, [pc, #652]	; (80028e0 <HAL_RCC_OscConfig+0x628>)
 8002652:	2104      	movs	r1, #4
 8002654:	438a      	bics	r2, r1
 8002656:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d014      	beq.n	800268a <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002660:	f7fe fb9e 	bl	8000da0 <HAL_GetTick>
 8002664:	0003      	movs	r3, r0
 8002666:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002668:	e009      	b.n	800267e <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800266a:	f7fe fb99 	bl	8000da0 <HAL_GetTick>
 800266e:	0002      	movs	r2, r0
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	4a9b      	ldr	r2, [pc, #620]	; (80028e4 <HAL_RCC_OscConfig+0x62c>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d901      	bls.n	800267e <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e12b      	b.n	80028d6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800267e:	4b98      	ldr	r3, [pc, #608]	; (80028e0 <HAL_RCC_OscConfig+0x628>)
 8002680:	6a1b      	ldr	r3, [r3, #32]
 8002682:	2202      	movs	r2, #2
 8002684:	4013      	ands	r3, r2
 8002686:	d0f0      	beq.n	800266a <HAL_RCC_OscConfig+0x3b2>
 8002688:	e013      	b.n	80026b2 <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800268a:	f7fe fb89 	bl	8000da0 <HAL_GetTick>
 800268e:	0003      	movs	r3, r0
 8002690:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002692:	e009      	b.n	80026a8 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002694:	f7fe fb84 	bl	8000da0 <HAL_GetTick>
 8002698:	0002      	movs	r2, r0
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	4a91      	ldr	r2, [pc, #580]	; (80028e4 <HAL_RCC_OscConfig+0x62c>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d901      	bls.n	80026a8 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e116      	b.n	80028d6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026a8:	4b8d      	ldr	r3, [pc, #564]	; (80028e0 <HAL_RCC_OscConfig+0x628>)
 80026aa:	6a1b      	ldr	r3, [r3, #32]
 80026ac:	2202      	movs	r2, #2
 80026ae:	4013      	ands	r3, r2
 80026b0:	d1f0      	bne.n	8002694 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80026b2:	231f      	movs	r3, #31
 80026b4:	18fb      	adds	r3, r7, r3
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d105      	bne.n	80026c8 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026bc:	4b88      	ldr	r3, [pc, #544]	; (80028e0 <HAL_RCC_OscConfig+0x628>)
 80026be:	69da      	ldr	r2, [r3, #28]
 80026c0:	4b87      	ldr	r3, [pc, #540]	; (80028e0 <HAL_RCC_OscConfig+0x628>)
 80026c2:	4989      	ldr	r1, [pc, #548]	; (80028e8 <HAL_RCC_OscConfig+0x630>)
 80026c4:	400a      	ands	r2, r1
 80026c6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2210      	movs	r2, #16
 80026ce:	4013      	ands	r3, r2
 80026d0:	d063      	beq.n	800279a <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	695b      	ldr	r3, [r3, #20]
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d12a      	bne.n	8002730 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80026da:	4b81      	ldr	r3, [pc, #516]	; (80028e0 <HAL_RCC_OscConfig+0x628>)
 80026dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026de:	4b80      	ldr	r3, [pc, #512]	; (80028e0 <HAL_RCC_OscConfig+0x628>)
 80026e0:	2104      	movs	r1, #4
 80026e2:	430a      	orrs	r2, r1
 80026e4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80026e6:	4b7e      	ldr	r3, [pc, #504]	; (80028e0 <HAL_RCC_OscConfig+0x628>)
 80026e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026ea:	4b7d      	ldr	r3, [pc, #500]	; (80028e0 <HAL_RCC_OscConfig+0x628>)
 80026ec:	2101      	movs	r1, #1
 80026ee:	430a      	orrs	r2, r1
 80026f0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026f2:	f7fe fb55 	bl	8000da0 <HAL_GetTick>
 80026f6:	0003      	movs	r3, r0
 80026f8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80026fc:	f7fe fb50 	bl	8000da0 <HAL_GetTick>
 8002700:	0002      	movs	r2, r0
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b02      	cmp	r3, #2
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e0e3      	b.n	80028d6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800270e:	4b74      	ldr	r3, [pc, #464]	; (80028e0 <HAL_RCC_OscConfig+0x628>)
 8002710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002712:	2202      	movs	r2, #2
 8002714:	4013      	ands	r3, r2
 8002716:	d0f1      	beq.n	80026fc <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002718:	4b71      	ldr	r3, [pc, #452]	; (80028e0 <HAL_RCC_OscConfig+0x628>)
 800271a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800271c:	22f8      	movs	r2, #248	; 0xf8
 800271e:	4393      	bics	r3, r2
 8002720:	0019      	movs	r1, r3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	699b      	ldr	r3, [r3, #24]
 8002726:	00da      	lsls	r2, r3, #3
 8002728:	4b6d      	ldr	r3, [pc, #436]	; (80028e0 <HAL_RCC_OscConfig+0x628>)
 800272a:	430a      	orrs	r2, r1
 800272c:	635a      	str	r2, [r3, #52]	; 0x34
 800272e:	e034      	b.n	800279a <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	695b      	ldr	r3, [r3, #20]
 8002734:	3305      	adds	r3, #5
 8002736:	d111      	bne.n	800275c <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002738:	4b69      	ldr	r3, [pc, #420]	; (80028e0 <HAL_RCC_OscConfig+0x628>)
 800273a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800273c:	4b68      	ldr	r3, [pc, #416]	; (80028e0 <HAL_RCC_OscConfig+0x628>)
 800273e:	2104      	movs	r1, #4
 8002740:	438a      	bics	r2, r1
 8002742:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002744:	4b66      	ldr	r3, [pc, #408]	; (80028e0 <HAL_RCC_OscConfig+0x628>)
 8002746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002748:	22f8      	movs	r2, #248	; 0xf8
 800274a:	4393      	bics	r3, r2
 800274c:	0019      	movs	r1, r3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	699b      	ldr	r3, [r3, #24]
 8002752:	00da      	lsls	r2, r3, #3
 8002754:	4b62      	ldr	r3, [pc, #392]	; (80028e0 <HAL_RCC_OscConfig+0x628>)
 8002756:	430a      	orrs	r2, r1
 8002758:	635a      	str	r2, [r3, #52]	; 0x34
 800275a:	e01e      	b.n	800279a <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800275c:	4b60      	ldr	r3, [pc, #384]	; (80028e0 <HAL_RCC_OscConfig+0x628>)
 800275e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002760:	4b5f      	ldr	r3, [pc, #380]	; (80028e0 <HAL_RCC_OscConfig+0x628>)
 8002762:	2104      	movs	r1, #4
 8002764:	430a      	orrs	r2, r1
 8002766:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002768:	4b5d      	ldr	r3, [pc, #372]	; (80028e0 <HAL_RCC_OscConfig+0x628>)
 800276a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800276c:	4b5c      	ldr	r3, [pc, #368]	; (80028e0 <HAL_RCC_OscConfig+0x628>)
 800276e:	2101      	movs	r1, #1
 8002770:	438a      	bics	r2, r1
 8002772:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002774:	f7fe fb14 	bl	8000da0 <HAL_GetTick>
 8002778:	0003      	movs	r3, r0
 800277a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800277c:	e008      	b.n	8002790 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800277e:	f7fe fb0f 	bl	8000da0 <HAL_GetTick>
 8002782:	0002      	movs	r2, r0
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	2b02      	cmp	r3, #2
 800278a:	d901      	bls.n	8002790 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e0a2      	b.n	80028d6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002790:	4b53      	ldr	r3, [pc, #332]	; (80028e0 <HAL_RCC_OscConfig+0x628>)
 8002792:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002794:	2202      	movs	r2, #2
 8002796:	4013      	ands	r3, r2
 8002798:	d1f1      	bne.n	800277e <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6a1b      	ldr	r3, [r3, #32]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d100      	bne.n	80027a4 <HAL_RCC_OscConfig+0x4ec>
 80027a2:	e097      	b.n	80028d4 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027a4:	4b4e      	ldr	r3, [pc, #312]	; (80028e0 <HAL_RCC_OscConfig+0x628>)
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	220c      	movs	r2, #12
 80027aa:	4013      	ands	r3, r2
 80027ac:	2b08      	cmp	r3, #8
 80027ae:	d100      	bne.n	80027b2 <HAL_RCC_OscConfig+0x4fa>
 80027b0:	e06b      	b.n	800288a <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a1b      	ldr	r3, [r3, #32]
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d14c      	bne.n	8002854 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027ba:	4b49      	ldr	r3, [pc, #292]	; (80028e0 <HAL_RCC_OscConfig+0x628>)
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	4b48      	ldr	r3, [pc, #288]	; (80028e0 <HAL_RCC_OscConfig+0x628>)
 80027c0:	494a      	ldr	r1, [pc, #296]	; (80028ec <HAL_RCC_OscConfig+0x634>)
 80027c2:	400a      	ands	r2, r1
 80027c4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c6:	f7fe faeb 	bl	8000da0 <HAL_GetTick>
 80027ca:	0003      	movs	r3, r0
 80027cc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027ce:	e008      	b.n	80027e2 <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027d0:	f7fe fae6 	bl	8000da0 <HAL_GetTick>
 80027d4:	0002      	movs	r2, r0
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d901      	bls.n	80027e2 <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e079      	b.n	80028d6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027e2:	4b3f      	ldr	r3, [pc, #252]	; (80028e0 <HAL_RCC_OscConfig+0x628>)
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	2380      	movs	r3, #128	; 0x80
 80027e8:	049b      	lsls	r3, r3, #18
 80027ea:	4013      	ands	r3, r2
 80027ec:	d1f0      	bne.n	80027d0 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027ee:	4b3c      	ldr	r3, [pc, #240]	; (80028e0 <HAL_RCC_OscConfig+0x628>)
 80027f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f2:	220f      	movs	r2, #15
 80027f4:	4393      	bics	r3, r2
 80027f6:	0019      	movs	r1, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027fc:	4b38      	ldr	r3, [pc, #224]	; (80028e0 <HAL_RCC_OscConfig+0x628>)
 80027fe:	430a      	orrs	r2, r1
 8002800:	62da      	str	r2, [r3, #44]	; 0x2c
 8002802:	4b37      	ldr	r3, [pc, #220]	; (80028e0 <HAL_RCC_OscConfig+0x628>)
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	4a3a      	ldr	r2, [pc, #232]	; (80028f0 <HAL_RCC_OscConfig+0x638>)
 8002808:	4013      	ands	r3, r2
 800280a:	0019      	movs	r1, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002814:	431a      	orrs	r2, r3
 8002816:	4b32      	ldr	r3, [pc, #200]	; (80028e0 <HAL_RCC_OscConfig+0x628>)
 8002818:	430a      	orrs	r2, r1
 800281a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800281c:	4b30      	ldr	r3, [pc, #192]	; (80028e0 <HAL_RCC_OscConfig+0x628>)
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	4b2f      	ldr	r3, [pc, #188]	; (80028e0 <HAL_RCC_OscConfig+0x628>)
 8002822:	2180      	movs	r1, #128	; 0x80
 8002824:	0449      	lsls	r1, r1, #17
 8002826:	430a      	orrs	r2, r1
 8002828:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800282a:	f7fe fab9 	bl	8000da0 <HAL_GetTick>
 800282e:	0003      	movs	r3, r0
 8002830:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002832:	e008      	b.n	8002846 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002834:	f7fe fab4 	bl	8000da0 <HAL_GetTick>
 8002838:	0002      	movs	r2, r0
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	2b02      	cmp	r3, #2
 8002840:	d901      	bls.n	8002846 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e047      	b.n	80028d6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002846:	4b26      	ldr	r3, [pc, #152]	; (80028e0 <HAL_RCC_OscConfig+0x628>)
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	2380      	movs	r3, #128	; 0x80
 800284c:	049b      	lsls	r3, r3, #18
 800284e:	4013      	ands	r3, r2
 8002850:	d0f0      	beq.n	8002834 <HAL_RCC_OscConfig+0x57c>
 8002852:	e03f      	b.n	80028d4 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002854:	4b22      	ldr	r3, [pc, #136]	; (80028e0 <HAL_RCC_OscConfig+0x628>)
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	4b21      	ldr	r3, [pc, #132]	; (80028e0 <HAL_RCC_OscConfig+0x628>)
 800285a:	4924      	ldr	r1, [pc, #144]	; (80028ec <HAL_RCC_OscConfig+0x634>)
 800285c:	400a      	ands	r2, r1
 800285e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002860:	f7fe fa9e 	bl	8000da0 <HAL_GetTick>
 8002864:	0003      	movs	r3, r0
 8002866:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002868:	e008      	b.n	800287c <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800286a:	f7fe fa99 	bl	8000da0 <HAL_GetTick>
 800286e:	0002      	movs	r2, r0
 8002870:	69bb      	ldr	r3, [r7, #24]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	2b02      	cmp	r3, #2
 8002876:	d901      	bls.n	800287c <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e02c      	b.n	80028d6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800287c:	4b18      	ldr	r3, [pc, #96]	; (80028e0 <HAL_RCC_OscConfig+0x628>)
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	2380      	movs	r3, #128	; 0x80
 8002882:	049b      	lsls	r3, r3, #18
 8002884:	4013      	ands	r3, r2
 8002886:	d1f0      	bne.n	800286a <HAL_RCC_OscConfig+0x5b2>
 8002888:	e024      	b.n	80028d4 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a1b      	ldr	r3, [r3, #32]
 800288e:	2b01      	cmp	r3, #1
 8002890:	d101      	bne.n	8002896 <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e01f      	b.n	80028d6 <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002896:	4b12      	ldr	r3, [pc, #72]	; (80028e0 <HAL_RCC_OscConfig+0x628>)
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800289c:	4b10      	ldr	r3, [pc, #64]	; (80028e0 <HAL_RCC_OscConfig+0x628>)
 800289e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a0:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80028a2:	697a      	ldr	r2, [r7, #20]
 80028a4:	23c0      	movs	r3, #192	; 0xc0
 80028a6:	025b      	lsls	r3, r3, #9
 80028a8:	401a      	ands	r2, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d10e      	bne.n	80028d0 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	220f      	movs	r2, #15
 80028b6:	401a      	ands	r2, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80028bc:	429a      	cmp	r2, r3
 80028be:	d107      	bne.n	80028d0 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80028c0:	697a      	ldr	r2, [r7, #20]
 80028c2:	23f0      	movs	r3, #240	; 0xf0
 80028c4:	039b      	lsls	r3, r3, #14
 80028c6:	401a      	ands	r2, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d001      	beq.n	80028d4 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e000      	b.n	80028d6 <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	0018      	movs	r0, r3
 80028d8:	46bd      	mov	sp, r7
 80028da:	b008      	add	sp, #32
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	46c0      	nop			; (mov r8, r8)
 80028e0:	40021000 	.word	0x40021000
 80028e4:	00001388 	.word	0x00001388
 80028e8:	efffffff 	.word	0xefffffff
 80028ec:	feffffff 	.word	0xfeffffff
 80028f0:	ffc27fff 	.word	0xffc27fff

080028f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d101      	bne.n	8002908 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e0b3      	b.n	8002a70 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002908:	4b5b      	ldr	r3, [pc, #364]	; (8002a78 <HAL_RCC_ClockConfig+0x184>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2201      	movs	r2, #1
 800290e:	4013      	ands	r3, r2
 8002910:	683a      	ldr	r2, [r7, #0]
 8002912:	429a      	cmp	r2, r3
 8002914:	d911      	bls.n	800293a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002916:	4b58      	ldr	r3, [pc, #352]	; (8002a78 <HAL_RCC_ClockConfig+0x184>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2201      	movs	r2, #1
 800291c:	4393      	bics	r3, r2
 800291e:	0019      	movs	r1, r3
 8002920:	4b55      	ldr	r3, [pc, #340]	; (8002a78 <HAL_RCC_ClockConfig+0x184>)
 8002922:	683a      	ldr	r2, [r7, #0]
 8002924:	430a      	orrs	r2, r1
 8002926:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002928:	4b53      	ldr	r3, [pc, #332]	; (8002a78 <HAL_RCC_ClockConfig+0x184>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2201      	movs	r2, #1
 800292e:	4013      	ands	r3, r2
 8002930:	683a      	ldr	r2, [r7, #0]
 8002932:	429a      	cmp	r2, r3
 8002934:	d001      	beq.n	800293a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e09a      	b.n	8002a70 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2202      	movs	r2, #2
 8002940:	4013      	ands	r3, r2
 8002942:	d015      	beq.n	8002970 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2204      	movs	r2, #4
 800294a:	4013      	ands	r3, r2
 800294c:	d006      	beq.n	800295c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800294e:	4b4b      	ldr	r3, [pc, #300]	; (8002a7c <HAL_RCC_ClockConfig+0x188>)
 8002950:	685a      	ldr	r2, [r3, #4]
 8002952:	4b4a      	ldr	r3, [pc, #296]	; (8002a7c <HAL_RCC_ClockConfig+0x188>)
 8002954:	21e0      	movs	r1, #224	; 0xe0
 8002956:	00c9      	lsls	r1, r1, #3
 8002958:	430a      	orrs	r2, r1
 800295a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800295c:	4b47      	ldr	r3, [pc, #284]	; (8002a7c <HAL_RCC_ClockConfig+0x188>)
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	22f0      	movs	r2, #240	; 0xf0
 8002962:	4393      	bics	r3, r2
 8002964:	0019      	movs	r1, r3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	689a      	ldr	r2, [r3, #8]
 800296a:	4b44      	ldr	r3, [pc, #272]	; (8002a7c <HAL_RCC_ClockConfig+0x188>)
 800296c:	430a      	orrs	r2, r1
 800296e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2201      	movs	r2, #1
 8002976:	4013      	ands	r3, r2
 8002978:	d040      	beq.n	80029fc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	2b01      	cmp	r3, #1
 8002980:	d107      	bne.n	8002992 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002982:	4b3e      	ldr	r3, [pc, #248]	; (8002a7c <HAL_RCC_ClockConfig+0x188>)
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	2380      	movs	r3, #128	; 0x80
 8002988:	029b      	lsls	r3, r3, #10
 800298a:	4013      	ands	r3, r2
 800298c:	d114      	bne.n	80029b8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e06e      	b.n	8002a70 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	2b02      	cmp	r3, #2
 8002998:	d107      	bne.n	80029aa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800299a:	4b38      	ldr	r3, [pc, #224]	; (8002a7c <HAL_RCC_ClockConfig+0x188>)
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	2380      	movs	r3, #128	; 0x80
 80029a0:	049b      	lsls	r3, r3, #18
 80029a2:	4013      	ands	r3, r2
 80029a4:	d108      	bne.n	80029b8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e062      	b.n	8002a70 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029aa:	4b34      	ldr	r3, [pc, #208]	; (8002a7c <HAL_RCC_ClockConfig+0x188>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	2202      	movs	r2, #2
 80029b0:	4013      	ands	r3, r2
 80029b2:	d101      	bne.n	80029b8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e05b      	b.n	8002a70 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029b8:	4b30      	ldr	r3, [pc, #192]	; (8002a7c <HAL_RCC_ClockConfig+0x188>)
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	2203      	movs	r2, #3
 80029be:	4393      	bics	r3, r2
 80029c0:	0019      	movs	r1, r3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685a      	ldr	r2, [r3, #4]
 80029c6:	4b2d      	ldr	r3, [pc, #180]	; (8002a7c <HAL_RCC_ClockConfig+0x188>)
 80029c8:	430a      	orrs	r2, r1
 80029ca:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029cc:	f7fe f9e8 	bl	8000da0 <HAL_GetTick>
 80029d0:	0003      	movs	r3, r0
 80029d2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029d4:	e009      	b.n	80029ea <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029d6:	f7fe f9e3 	bl	8000da0 <HAL_GetTick>
 80029da:	0002      	movs	r2, r0
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	4a27      	ldr	r2, [pc, #156]	; (8002a80 <HAL_RCC_ClockConfig+0x18c>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d901      	bls.n	80029ea <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e042      	b.n	8002a70 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ea:	4b24      	ldr	r3, [pc, #144]	; (8002a7c <HAL_RCC_ClockConfig+0x188>)
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	220c      	movs	r2, #12
 80029f0:	401a      	ands	r2, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d1ec      	bne.n	80029d6 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029fc:	4b1e      	ldr	r3, [pc, #120]	; (8002a78 <HAL_RCC_ClockConfig+0x184>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2201      	movs	r2, #1
 8002a02:	4013      	ands	r3, r2
 8002a04:	683a      	ldr	r2, [r7, #0]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d211      	bcs.n	8002a2e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a0a:	4b1b      	ldr	r3, [pc, #108]	; (8002a78 <HAL_RCC_ClockConfig+0x184>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	4393      	bics	r3, r2
 8002a12:	0019      	movs	r1, r3
 8002a14:	4b18      	ldr	r3, [pc, #96]	; (8002a78 <HAL_RCC_ClockConfig+0x184>)
 8002a16:	683a      	ldr	r2, [r7, #0]
 8002a18:	430a      	orrs	r2, r1
 8002a1a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a1c:	4b16      	ldr	r3, [pc, #88]	; (8002a78 <HAL_RCC_ClockConfig+0x184>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2201      	movs	r2, #1
 8002a22:	4013      	ands	r3, r2
 8002a24:	683a      	ldr	r2, [r7, #0]
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d001      	beq.n	8002a2e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e020      	b.n	8002a70 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2204      	movs	r2, #4
 8002a34:	4013      	ands	r3, r2
 8002a36:	d009      	beq.n	8002a4c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002a38:	4b10      	ldr	r3, [pc, #64]	; (8002a7c <HAL_RCC_ClockConfig+0x188>)
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	4a11      	ldr	r2, [pc, #68]	; (8002a84 <HAL_RCC_ClockConfig+0x190>)
 8002a3e:	4013      	ands	r3, r2
 8002a40:	0019      	movs	r1, r3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	68da      	ldr	r2, [r3, #12]
 8002a46:	4b0d      	ldr	r3, [pc, #52]	; (8002a7c <HAL_RCC_ClockConfig+0x188>)
 8002a48:	430a      	orrs	r2, r1
 8002a4a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002a4c:	f000 f820 	bl	8002a90 <HAL_RCC_GetSysClockFreq>
 8002a50:	0001      	movs	r1, r0
 8002a52:	4b0a      	ldr	r3, [pc, #40]	; (8002a7c <HAL_RCC_ClockConfig+0x188>)
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	091b      	lsrs	r3, r3, #4
 8002a58:	220f      	movs	r2, #15
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	4a0a      	ldr	r2, [pc, #40]	; (8002a88 <HAL_RCC_ClockConfig+0x194>)
 8002a5e:	5cd3      	ldrb	r3, [r2, r3]
 8002a60:	000a      	movs	r2, r1
 8002a62:	40da      	lsrs	r2, r3
 8002a64:	4b09      	ldr	r3, [pc, #36]	; (8002a8c <HAL_RCC_ClockConfig+0x198>)
 8002a66:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002a68:	2003      	movs	r0, #3
 8002a6a:	f7fe f953 	bl	8000d14 <HAL_InitTick>
  
  return HAL_OK;
 8002a6e:	2300      	movs	r3, #0
}
 8002a70:	0018      	movs	r0, r3
 8002a72:	46bd      	mov	sp, r7
 8002a74:	b004      	add	sp, #16
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	40022000 	.word	0x40022000
 8002a7c:	40021000 	.word	0x40021000
 8002a80:	00001388 	.word	0x00001388
 8002a84:	fffff8ff 	.word	0xfffff8ff
 8002a88:	080066ac 	.word	0x080066ac
 8002a8c:	20000000 	.word	0x20000000

08002a90 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a90:	b590      	push	{r4, r7, lr}
 8002a92:	b08f      	sub	sp, #60	; 0x3c
 8002a94:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002a96:	2314      	movs	r3, #20
 8002a98:	18fb      	adds	r3, r7, r3
 8002a9a:	4a2c      	ldr	r2, [pc, #176]	; (8002b4c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a9c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002a9e:	c313      	stmia	r3!, {r0, r1, r4}
 8002aa0:	6812      	ldr	r2, [r2, #0]
 8002aa2:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002aa4:	1d3b      	adds	r3, r7, #4
 8002aa6:	4a2a      	ldr	r2, [pc, #168]	; (8002b50 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002aa8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002aaa:	c313      	stmia	r3!, {r0, r1, r4}
 8002aac:	6812      	ldr	r2, [r2, #0]
 8002aae:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ab8:	2300      	movs	r3, #0
 8002aba:	637b      	str	r3, [r7, #52]	; 0x34
 8002abc:	2300      	movs	r3, #0
 8002abe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002ac4:	4b23      	ldr	r3, [pc, #140]	; (8002b54 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002acc:	220c      	movs	r2, #12
 8002ace:	4013      	ands	r3, r2
 8002ad0:	2b04      	cmp	r3, #4
 8002ad2:	d002      	beq.n	8002ada <HAL_RCC_GetSysClockFreq+0x4a>
 8002ad4:	2b08      	cmp	r3, #8
 8002ad6:	d003      	beq.n	8002ae0 <HAL_RCC_GetSysClockFreq+0x50>
 8002ad8:	e02f      	b.n	8002b3a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ada:	4b1f      	ldr	r3, [pc, #124]	; (8002b58 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002adc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002ade:	e02f      	b.n	8002b40 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ae2:	0c9b      	lsrs	r3, r3, #18
 8002ae4:	220f      	movs	r2, #15
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	2214      	movs	r2, #20
 8002aea:	18ba      	adds	r2, r7, r2
 8002aec:	5cd3      	ldrb	r3, [r2, r3]
 8002aee:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002af0:	4b18      	ldr	r3, [pc, #96]	; (8002b54 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af4:	220f      	movs	r2, #15
 8002af6:	4013      	ands	r3, r2
 8002af8:	1d3a      	adds	r2, r7, #4
 8002afa:	5cd3      	ldrb	r3, [r2, r3]
 8002afc:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002afe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b00:	23c0      	movs	r3, #192	; 0xc0
 8002b02:	025b      	lsls	r3, r3, #9
 8002b04:	401a      	ands	r2, r3
 8002b06:	2380      	movs	r3, #128	; 0x80
 8002b08:	025b      	lsls	r3, r3, #9
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d109      	bne.n	8002b22 <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002b0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b10:	4811      	ldr	r0, [pc, #68]	; (8002b58 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002b12:	f7fd faf9 	bl	8000108 <__udivsi3>
 8002b16:	0003      	movs	r3, r0
 8002b18:	001a      	movs	r2, r3
 8002b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1c:	4353      	muls	r3, r2
 8002b1e:	637b      	str	r3, [r7, #52]	; 0x34
 8002b20:	e008      	b.n	8002b34 <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002b22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b24:	480c      	ldr	r0, [pc, #48]	; (8002b58 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002b26:	f7fd faef 	bl	8000108 <__udivsi3>
 8002b2a:	0003      	movs	r3, r0
 8002b2c:	001a      	movs	r2, r3
 8002b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b30:	4353      	muls	r3, r2
 8002b32:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b36:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002b38:	e002      	b.n	8002b40 <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b3a:	4b07      	ldr	r3, [pc, #28]	; (8002b58 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002b3c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002b3e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002b42:	0018      	movs	r0, r3
 8002b44:	46bd      	mov	sp, r7
 8002b46:	b00f      	add	sp, #60	; 0x3c
 8002b48:	bd90      	pop	{r4, r7, pc}
 8002b4a:	46c0      	nop			; (mov r8, r8)
 8002b4c:	08006650 	.word	0x08006650
 8002b50:	08006660 	.word	0x08006660
 8002b54:	40021000 	.word	0x40021000
 8002b58:	007a1200 	.word	0x007a1200

08002b5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b086      	sub	sp, #24
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b64:	2300      	movs	r3, #0
 8002b66:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	2380      	movs	r3, #128	; 0x80
 8002b72:	025b      	lsls	r3, r3, #9
 8002b74:	4013      	ands	r3, r2
 8002b76:	d100      	bne.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002b78:	e08e      	b.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002b7a:	2017      	movs	r0, #23
 8002b7c:	183b      	adds	r3, r7, r0
 8002b7e:	2200      	movs	r2, #0
 8002b80:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b82:	4b5f      	ldr	r3, [pc, #380]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002b84:	69da      	ldr	r2, [r3, #28]
 8002b86:	2380      	movs	r3, #128	; 0x80
 8002b88:	055b      	lsls	r3, r3, #21
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	d110      	bne.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b8e:	4b5c      	ldr	r3, [pc, #368]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002b90:	69da      	ldr	r2, [r3, #28]
 8002b92:	4b5b      	ldr	r3, [pc, #364]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002b94:	2180      	movs	r1, #128	; 0x80
 8002b96:	0549      	lsls	r1, r1, #21
 8002b98:	430a      	orrs	r2, r1
 8002b9a:	61da      	str	r2, [r3, #28]
 8002b9c:	4b58      	ldr	r3, [pc, #352]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002b9e:	69da      	ldr	r2, [r3, #28]
 8002ba0:	2380      	movs	r3, #128	; 0x80
 8002ba2:	055b      	lsls	r3, r3, #21
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	60bb      	str	r3, [r7, #8]
 8002ba8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002baa:	183b      	adds	r3, r7, r0
 8002bac:	2201      	movs	r2, #1
 8002bae:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bb0:	4b54      	ldr	r3, [pc, #336]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	2380      	movs	r3, #128	; 0x80
 8002bb6:	005b      	lsls	r3, r3, #1
 8002bb8:	4013      	ands	r3, r2
 8002bba:	d11a      	bne.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bbc:	4b51      	ldr	r3, [pc, #324]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	4b50      	ldr	r3, [pc, #320]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002bc2:	2180      	movs	r1, #128	; 0x80
 8002bc4:	0049      	lsls	r1, r1, #1
 8002bc6:	430a      	orrs	r2, r1
 8002bc8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bca:	f7fe f8e9 	bl	8000da0 <HAL_GetTick>
 8002bce:	0003      	movs	r3, r0
 8002bd0:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bd2:	e008      	b.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bd4:	f7fe f8e4 	bl	8000da0 <HAL_GetTick>
 8002bd8:	0002      	movs	r2, r0
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	2b64      	cmp	r3, #100	; 0x64
 8002be0:	d901      	bls.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e087      	b.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002be6:	4b47      	ldr	r3, [pc, #284]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	2380      	movs	r3, #128	; 0x80
 8002bec:	005b      	lsls	r3, r3, #1
 8002bee:	4013      	ands	r3, r2
 8002bf0:	d0f0      	beq.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002bf2:	4b43      	ldr	r3, [pc, #268]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002bf4:	6a1a      	ldr	r2, [r3, #32]
 8002bf6:	23c0      	movs	r3, #192	; 0xc0
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d034      	beq.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685a      	ldr	r2, [r3, #4]
 8002c08:	23c0      	movs	r3, #192	; 0xc0
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	68fa      	ldr	r2, [r7, #12]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d02c      	beq.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c14:	4b3a      	ldr	r3, [pc, #232]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002c16:	6a1b      	ldr	r3, [r3, #32]
 8002c18:	4a3b      	ldr	r2, [pc, #236]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c1e:	4b38      	ldr	r3, [pc, #224]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002c20:	6a1a      	ldr	r2, [r3, #32]
 8002c22:	4b37      	ldr	r3, [pc, #220]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002c24:	2180      	movs	r1, #128	; 0x80
 8002c26:	0249      	lsls	r1, r1, #9
 8002c28:	430a      	orrs	r2, r1
 8002c2a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c2c:	4b34      	ldr	r3, [pc, #208]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002c2e:	6a1a      	ldr	r2, [r3, #32]
 8002c30:	4b33      	ldr	r3, [pc, #204]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002c32:	4936      	ldr	r1, [pc, #216]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002c34:	400a      	ands	r2, r1
 8002c36:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002c38:	4b31      	ldr	r3, [pc, #196]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002c3a:	68fa      	ldr	r2, [r7, #12]
 8002c3c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2201      	movs	r2, #1
 8002c42:	4013      	ands	r3, r2
 8002c44:	d013      	beq.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c46:	f7fe f8ab 	bl	8000da0 <HAL_GetTick>
 8002c4a:	0003      	movs	r3, r0
 8002c4c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c4e:	e009      	b.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c50:	f7fe f8a6 	bl	8000da0 <HAL_GetTick>
 8002c54:	0002      	movs	r2, r0
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	4a2d      	ldr	r2, [pc, #180]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d901      	bls.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	e048      	b.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c64:	4b26      	ldr	r3, [pc, #152]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002c66:	6a1b      	ldr	r3, [r3, #32]
 8002c68:	2202      	movs	r2, #2
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	d0f0      	beq.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c6e:	4b24      	ldr	r3, [pc, #144]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002c70:	6a1b      	ldr	r3, [r3, #32]
 8002c72:	4a25      	ldr	r2, [pc, #148]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c74:	4013      	ands	r3, r2
 8002c76:	0019      	movs	r1, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685a      	ldr	r2, [r3, #4]
 8002c7c:	4b20      	ldr	r3, [pc, #128]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002c7e:	430a      	orrs	r2, r1
 8002c80:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c82:	2317      	movs	r3, #23
 8002c84:	18fb      	adds	r3, r7, r3
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d105      	bne.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c8c:	4b1c      	ldr	r3, [pc, #112]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002c8e:	69da      	ldr	r2, [r3, #28]
 8002c90:	4b1b      	ldr	r3, [pc, #108]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002c92:	4920      	ldr	r1, [pc, #128]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002c94:	400a      	ands	r2, r1
 8002c96:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	d009      	beq.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ca2:	4b17      	ldr	r3, [pc, #92]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca6:	2203      	movs	r2, #3
 8002ca8:	4393      	bics	r3, r2
 8002caa:	0019      	movs	r1, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	689a      	ldr	r2, [r3, #8]
 8002cb0:	4b13      	ldr	r3, [pc, #76]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002cb2:	430a      	orrs	r2, r1
 8002cb4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	2220      	movs	r2, #32
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	d009      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002cc0:	4b0f      	ldr	r3, [pc, #60]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc4:	2210      	movs	r2, #16
 8002cc6:	4393      	bics	r3, r2
 8002cc8:	0019      	movs	r1, r3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	68da      	ldr	r2, [r3, #12]
 8002cce:	4b0c      	ldr	r3, [pc, #48]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002cd0:	430a      	orrs	r2, r1
 8002cd2:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	2380      	movs	r3, #128	; 0x80
 8002cda:	029b      	lsls	r3, r3, #10
 8002cdc:	4013      	ands	r3, r2
 8002cde:	d009      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ce0:	4b07      	ldr	r3, [pc, #28]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce4:	2280      	movs	r2, #128	; 0x80
 8002ce6:	4393      	bics	r3, r2
 8002ce8:	0019      	movs	r1, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	691a      	ldr	r2, [r3, #16]
 8002cee:	4b04      	ldr	r3, [pc, #16]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002cf0:	430a      	orrs	r2, r1
 8002cf2:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	0018      	movs	r0, r3
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	b006      	add	sp, #24
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	46c0      	nop			; (mov r8, r8)
 8002d00:	40021000 	.word	0x40021000
 8002d04:	40007000 	.word	0x40007000
 8002d08:	fffffcff 	.word	0xfffffcff
 8002d0c:	fffeffff 	.word	0xfffeffff
 8002d10:	00001388 	.word	0x00001388
 8002d14:	efffffff 	.word	0xefffffff

08002d18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b082      	sub	sp, #8
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d101      	bne.n	8002d2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e042      	b.n	8002db0 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	223d      	movs	r2, #61	; 0x3d
 8002d2e:	5c9b      	ldrb	r3, [r3, r2]
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d107      	bne.n	8002d46 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	223c      	movs	r2, #60	; 0x3c
 8002d3a:	2100      	movs	r1, #0
 8002d3c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	0018      	movs	r0, r3
 8002d42:	f7fd ff07 	bl	8000b54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	223d      	movs	r2, #61	; 0x3d
 8002d4a:	2102      	movs	r1, #2
 8002d4c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	3304      	adds	r3, #4
 8002d56:	0019      	movs	r1, r3
 8002d58:	0010      	movs	r0, r2
 8002d5a:	f000 fb61 	bl	8003420 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2246      	movs	r2, #70	; 0x46
 8002d62:	2101      	movs	r1, #1
 8002d64:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	223e      	movs	r2, #62	; 0x3e
 8002d6a:	2101      	movs	r1, #1
 8002d6c:	5499      	strb	r1, [r3, r2]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	223f      	movs	r2, #63	; 0x3f
 8002d72:	2101      	movs	r1, #1
 8002d74:	5499      	strb	r1, [r3, r2]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2240      	movs	r2, #64	; 0x40
 8002d7a:	2101      	movs	r1, #1
 8002d7c:	5499      	strb	r1, [r3, r2]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2241      	movs	r2, #65	; 0x41
 8002d82:	2101      	movs	r1, #1
 8002d84:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2242      	movs	r2, #66	; 0x42
 8002d8a:	2101      	movs	r1, #1
 8002d8c:	5499      	strb	r1, [r3, r2]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2243      	movs	r2, #67	; 0x43
 8002d92:	2101      	movs	r1, #1
 8002d94:	5499      	strb	r1, [r3, r2]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2244      	movs	r2, #68	; 0x44
 8002d9a:	2101      	movs	r1, #1
 8002d9c:	5499      	strb	r1, [r3, r2]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2245      	movs	r2, #69	; 0x45
 8002da2:	2101      	movs	r1, #1
 8002da4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	223d      	movs	r2, #61	; 0x3d
 8002daa:	2101      	movs	r1, #1
 8002dac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002dae:	2300      	movs	r3, #0
}
 8002db0:	0018      	movs	r0, r3
 8002db2:	46bd      	mov	sp, r7
 8002db4:	b002      	add	sp, #8
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b084      	sub	sp, #16
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	223d      	movs	r2, #61	; 0x3d
 8002dc4:	5c9b      	ldrb	r3, [r3, r2]
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d001      	beq.n	8002dd0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e02d      	b.n	8002e2c <HAL_TIM_Base_Start+0x74>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	223d      	movs	r2, #61	; 0x3d
 8002dd4:	2102      	movs	r1, #2
 8002dd6:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a15      	ldr	r2, [pc, #84]	; (8002e34 <HAL_TIM_Base_Start+0x7c>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d009      	beq.n	8002df6 <HAL_TIM_Base_Start+0x3e>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a14      	ldr	r2, [pc, #80]	; (8002e38 <HAL_TIM_Base_Start+0x80>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d004      	beq.n	8002df6 <HAL_TIM_Base_Start+0x3e>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a12      	ldr	r2, [pc, #72]	; (8002e3c <HAL_TIM_Base_Start+0x84>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d111      	bne.n	8002e1a <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	2207      	movs	r2, #7
 8002dfe:	4013      	ands	r3, r2
 8002e00:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2b06      	cmp	r3, #6
 8002e06:	d010      	beq.n	8002e2a <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	2101      	movs	r1, #1
 8002e14:	430a      	orrs	r2, r1
 8002e16:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e18:	e007      	b.n	8002e2a <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2101      	movs	r1, #1
 8002e26:	430a      	orrs	r2, r1
 8002e28:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e2a:	2300      	movs	r3, #0
}
 8002e2c:	0018      	movs	r0, r3
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	b004      	add	sp, #16
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	40012c00 	.word	0x40012c00
 8002e38:	40000400 	.word	0x40000400
 8002e3c:	40014000 	.word	0x40014000

08002e40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b084      	sub	sp, #16
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	223d      	movs	r2, #61	; 0x3d
 8002e4c:	5c9b      	ldrb	r3, [r3, r2]
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d001      	beq.n	8002e58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e035      	b.n	8002ec4 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	223d      	movs	r2, #61	; 0x3d
 8002e5c:	2102      	movs	r1, #2
 8002e5e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	68da      	ldr	r2, [r3, #12]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	2101      	movs	r1, #1
 8002e6c:	430a      	orrs	r2, r1
 8002e6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a15      	ldr	r2, [pc, #84]	; (8002ecc <HAL_TIM_Base_Start_IT+0x8c>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d009      	beq.n	8002e8e <HAL_TIM_Base_Start_IT+0x4e>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a14      	ldr	r2, [pc, #80]	; (8002ed0 <HAL_TIM_Base_Start_IT+0x90>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d004      	beq.n	8002e8e <HAL_TIM_Base_Start_IT+0x4e>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a12      	ldr	r2, [pc, #72]	; (8002ed4 <HAL_TIM_Base_Start_IT+0x94>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d111      	bne.n	8002eb2 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	2207      	movs	r2, #7
 8002e96:	4013      	ands	r3, r2
 8002e98:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2b06      	cmp	r3, #6
 8002e9e:	d010      	beq.n	8002ec2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2101      	movs	r1, #1
 8002eac:	430a      	orrs	r2, r1
 8002eae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002eb0:	e007      	b.n	8002ec2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	2101      	movs	r1, #1
 8002ebe:	430a      	orrs	r2, r1
 8002ec0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ec2:	2300      	movs	r3, #0
}
 8002ec4:	0018      	movs	r0, r3
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	b004      	add	sp, #16
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	40012c00 	.word	0x40012c00
 8002ed0:	40000400 	.word	0x40000400
 8002ed4:	40014000 	.word	0x40014000

08002ed8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d101      	bne.n	8002eea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e042      	b.n	8002f70 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	223d      	movs	r2, #61	; 0x3d
 8002eee:	5c9b      	ldrb	r3, [r3, r2]
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d107      	bne.n	8002f06 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	223c      	movs	r2, #60	; 0x3c
 8002efa:	2100      	movs	r1, #0
 8002efc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	0018      	movs	r0, r3
 8002f02:	f000 f839 	bl	8002f78 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	223d      	movs	r2, #61	; 0x3d
 8002f0a:	2102      	movs	r1, #2
 8002f0c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	3304      	adds	r3, #4
 8002f16:	0019      	movs	r1, r3
 8002f18:	0010      	movs	r0, r2
 8002f1a:	f000 fa81 	bl	8003420 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2246      	movs	r2, #70	; 0x46
 8002f22:	2101      	movs	r1, #1
 8002f24:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	223e      	movs	r2, #62	; 0x3e
 8002f2a:	2101      	movs	r1, #1
 8002f2c:	5499      	strb	r1, [r3, r2]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	223f      	movs	r2, #63	; 0x3f
 8002f32:	2101      	movs	r1, #1
 8002f34:	5499      	strb	r1, [r3, r2]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2240      	movs	r2, #64	; 0x40
 8002f3a:	2101      	movs	r1, #1
 8002f3c:	5499      	strb	r1, [r3, r2]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2241      	movs	r2, #65	; 0x41
 8002f42:	2101      	movs	r1, #1
 8002f44:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2242      	movs	r2, #66	; 0x42
 8002f4a:	2101      	movs	r1, #1
 8002f4c:	5499      	strb	r1, [r3, r2]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2243      	movs	r2, #67	; 0x43
 8002f52:	2101      	movs	r1, #1
 8002f54:	5499      	strb	r1, [r3, r2]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2244      	movs	r2, #68	; 0x44
 8002f5a:	2101      	movs	r1, #1
 8002f5c:	5499      	strb	r1, [r3, r2]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2245      	movs	r2, #69	; 0x45
 8002f62:	2101      	movs	r1, #1
 8002f64:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	223d      	movs	r2, #61	; 0x3d
 8002f6a:	2101      	movs	r1, #1
 8002f6c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f6e:	2300      	movs	r3, #0
}
 8002f70:	0018      	movs	r0, r3
 8002f72:	46bd      	mov	sp, r7
 8002f74:	b002      	add	sp, #8
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002f80:	46c0      	nop			; (mov r8, r8)
 8002f82:	46bd      	mov	sp, r7
 8002f84:	b002      	add	sp, #8
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d108      	bne.n	8002faa <HAL_TIM_PWM_Start+0x22>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	223e      	movs	r2, #62	; 0x3e
 8002f9c:	5c9b      	ldrb	r3, [r3, r2]
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	3b01      	subs	r3, #1
 8002fa2:	1e5a      	subs	r2, r3, #1
 8002fa4:	4193      	sbcs	r3, r2
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	e01f      	b.n	8002fea <HAL_TIM_PWM_Start+0x62>
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	2b04      	cmp	r3, #4
 8002fae:	d108      	bne.n	8002fc2 <HAL_TIM_PWM_Start+0x3a>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	223f      	movs	r2, #63	; 0x3f
 8002fb4:	5c9b      	ldrb	r3, [r3, r2]
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	3b01      	subs	r3, #1
 8002fba:	1e5a      	subs	r2, r3, #1
 8002fbc:	4193      	sbcs	r3, r2
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	e013      	b.n	8002fea <HAL_TIM_PWM_Start+0x62>
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	2b08      	cmp	r3, #8
 8002fc6:	d108      	bne.n	8002fda <HAL_TIM_PWM_Start+0x52>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2240      	movs	r2, #64	; 0x40
 8002fcc:	5c9b      	ldrb	r3, [r3, r2]
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	3b01      	subs	r3, #1
 8002fd2:	1e5a      	subs	r2, r3, #1
 8002fd4:	4193      	sbcs	r3, r2
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	e007      	b.n	8002fea <HAL_TIM_PWM_Start+0x62>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2241      	movs	r2, #65	; 0x41
 8002fde:	5c9b      	ldrb	r3, [r3, r2]
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	1e5a      	subs	r2, r3, #1
 8002fe6:	4193      	sbcs	r3, r2
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d001      	beq.n	8002ff2 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e06e      	b.n	80030d0 <HAL_TIM_PWM_Start+0x148>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d104      	bne.n	8003002 <HAL_TIM_PWM_Start+0x7a>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	223e      	movs	r2, #62	; 0x3e
 8002ffc:	2102      	movs	r1, #2
 8002ffe:	5499      	strb	r1, [r3, r2]
 8003000:	e013      	b.n	800302a <HAL_TIM_PWM_Start+0xa2>
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	2b04      	cmp	r3, #4
 8003006:	d104      	bne.n	8003012 <HAL_TIM_PWM_Start+0x8a>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	223f      	movs	r2, #63	; 0x3f
 800300c:	2102      	movs	r1, #2
 800300e:	5499      	strb	r1, [r3, r2]
 8003010:	e00b      	b.n	800302a <HAL_TIM_PWM_Start+0xa2>
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	2b08      	cmp	r3, #8
 8003016:	d104      	bne.n	8003022 <HAL_TIM_PWM_Start+0x9a>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2240      	movs	r2, #64	; 0x40
 800301c:	2102      	movs	r1, #2
 800301e:	5499      	strb	r1, [r3, r2]
 8003020:	e003      	b.n	800302a <HAL_TIM_PWM_Start+0xa2>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2241      	movs	r2, #65	; 0x41
 8003026:	2102      	movs	r1, #2
 8003028:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	6839      	ldr	r1, [r7, #0]
 8003030:	2201      	movs	r2, #1
 8003032:	0018      	movs	r0, r3
 8003034:	f000 fd00 	bl	8003a38 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a26      	ldr	r2, [pc, #152]	; (80030d8 <HAL_TIM_PWM_Start+0x150>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d00e      	beq.n	8003060 <HAL_TIM_PWM_Start+0xd8>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a25      	ldr	r2, [pc, #148]	; (80030dc <HAL_TIM_PWM_Start+0x154>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d009      	beq.n	8003060 <HAL_TIM_PWM_Start+0xd8>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a23      	ldr	r2, [pc, #140]	; (80030e0 <HAL_TIM_PWM_Start+0x158>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d004      	beq.n	8003060 <HAL_TIM_PWM_Start+0xd8>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a22      	ldr	r2, [pc, #136]	; (80030e4 <HAL_TIM_PWM_Start+0x15c>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d101      	bne.n	8003064 <HAL_TIM_PWM_Start+0xdc>
 8003060:	2301      	movs	r3, #1
 8003062:	e000      	b.n	8003066 <HAL_TIM_PWM_Start+0xde>
 8003064:	2300      	movs	r3, #0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d008      	beq.n	800307c <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2180      	movs	r1, #128	; 0x80
 8003076:	0209      	lsls	r1, r1, #8
 8003078:	430a      	orrs	r2, r1
 800307a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a15      	ldr	r2, [pc, #84]	; (80030d8 <HAL_TIM_PWM_Start+0x150>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d009      	beq.n	800309a <HAL_TIM_PWM_Start+0x112>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a17      	ldr	r2, [pc, #92]	; (80030e8 <HAL_TIM_PWM_Start+0x160>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d004      	beq.n	800309a <HAL_TIM_PWM_Start+0x112>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a11      	ldr	r2, [pc, #68]	; (80030dc <HAL_TIM_PWM_Start+0x154>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d111      	bne.n	80030be <HAL_TIM_PWM_Start+0x136>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	2207      	movs	r2, #7
 80030a2:	4013      	ands	r3, r2
 80030a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2b06      	cmp	r3, #6
 80030aa:	d010      	beq.n	80030ce <HAL_TIM_PWM_Start+0x146>
    {
      __HAL_TIM_ENABLE(htim);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2101      	movs	r1, #1
 80030b8:	430a      	orrs	r2, r1
 80030ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030bc:	e007      	b.n	80030ce <HAL_TIM_PWM_Start+0x146>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2101      	movs	r1, #1
 80030ca:	430a      	orrs	r2, r1
 80030cc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030ce:	2300      	movs	r3, #0
}
 80030d0:	0018      	movs	r0, r3
 80030d2:	46bd      	mov	sp, r7
 80030d4:	b004      	add	sp, #16
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	40012c00 	.word	0x40012c00
 80030dc:	40014000 	.word	0x40014000
 80030e0:	40014400 	.word	0x40014400
 80030e4:	40014800 	.word	0x40014800
 80030e8:	40000400 	.word	0x40000400

080030ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b086      	sub	sp, #24
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	60b9      	str	r1, [r7, #8]
 80030f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030f8:	2317      	movs	r3, #23
 80030fa:	18fb      	adds	r3, r7, r3
 80030fc:	2200      	movs	r2, #0
 80030fe:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	223c      	movs	r2, #60	; 0x3c
 8003104:	5c9b      	ldrb	r3, [r3, r2]
 8003106:	2b01      	cmp	r3, #1
 8003108:	d101      	bne.n	800310e <HAL_TIM_PWM_ConfigChannel+0x22>
 800310a:	2302      	movs	r3, #2
 800310c:	e0ad      	b.n	800326a <HAL_TIM_PWM_ConfigChannel+0x17e>
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	223c      	movs	r2, #60	; 0x3c
 8003112:	2101      	movs	r1, #1
 8003114:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2b0c      	cmp	r3, #12
 800311a:	d100      	bne.n	800311e <HAL_TIM_PWM_ConfigChannel+0x32>
 800311c:	e076      	b.n	800320c <HAL_TIM_PWM_ConfigChannel+0x120>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2b0c      	cmp	r3, #12
 8003122:	d900      	bls.n	8003126 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8003124:	e095      	b.n	8003252 <HAL_TIM_PWM_ConfigChannel+0x166>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2b08      	cmp	r3, #8
 800312a:	d04e      	beq.n	80031ca <HAL_TIM_PWM_ConfigChannel+0xde>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2b08      	cmp	r3, #8
 8003130:	d900      	bls.n	8003134 <HAL_TIM_PWM_ConfigChannel+0x48>
 8003132:	e08e      	b.n	8003252 <HAL_TIM_PWM_ConfigChannel+0x166>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d003      	beq.n	8003142 <HAL_TIM_PWM_ConfigChannel+0x56>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2b04      	cmp	r3, #4
 800313e:	d021      	beq.n	8003184 <HAL_TIM_PWM_ConfigChannel+0x98>
 8003140:	e087      	b.n	8003252 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	68ba      	ldr	r2, [r7, #8]
 8003148:	0011      	movs	r1, r2
 800314a:	0018      	movs	r0, r3
 800314c:	f000 f9de 	bl	800350c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	699a      	ldr	r2, [r3, #24]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2108      	movs	r1, #8
 800315c:	430a      	orrs	r2, r1
 800315e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	699a      	ldr	r2, [r3, #24]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	2104      	movs	r1, #4
 800316c:	438a      	bics	r2, r1
 800316e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	6999      	ldr	r1, [r3, #24]
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	691a      	ldr	r2, [r3, #16]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	430a      	orrs	r2, r1
 8003180:	619a      	str	r2, [r3, #24]
      break;
 8003182:	e06b      	b.n	800325c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	68ba      	ldr	r2, [r7, #8]
 800318a:	0011      	movs	r1, r2
 800318c:	0018      	movs	r0, r3
 800318e:	f000 fa45 	bl	800361c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	699a      	ldr	r2, [r3, #24]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2180      	movs	r1, #128	; 0x80
 800319e:	0109      	lsls	r1, r1, #4
 80031a0:	430a      	orrs	r2, r1
 80031a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	699a      	ldr	r2, [r3, #24]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4931      	ldr	r1, [pc, #196]	; (8003274 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80031b0:	400a      	ands	r2, r1
 80031b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	6999      	ldr	r1, [r3, #24]
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	691b      	ldr	r3, [r3, #16]
 80031be:	021a      	lsls	r2, r3, #8
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	430a      	orrs	r2, r1
 80031c6:	619a      	str	r2, [r3, #24]
      break;
 80031c8:	e048      	b.n	800325c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	68ba      	ldr	r2, [r7, #8]
 80031d0:	0011      	movs	r1, r2
 80031d2:	0018      	movs	r0, r3
 80031d4:	f000 faa6 	bl	8003724 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	69da      	ldr	r2, [r3, #28]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2108      	movs	r1, #8
 80031e4:	430a      	orrs	r2, r1
 80031e6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	69da      	ldr	r2, [r3, #28]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2104      	movs	r1, #4
 80031f4:	438a      	bics	r2, r1
 80031f6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	69d9      	ldr	r1, [r3, #28]
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	691a      	ldr	r2, [r3, #16]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	430a      	orrs	r2, r1
 8003208:	61da      	str	r2, [r3, #28]
      break;
 800320a:	e027      	b.n	800325c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68ba      	ldr	r2, [r7, #8]
 8003212:	0011      	movs	r1, r2
 8003214:	0018      	movs	r0, r3
 8003216:	f000 fb0b 	bl	8003830 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	69da      	ldr	r2, [r3, #28]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2180      	movs	r1, #128	; 0x80
 8003226:	0109      	lsls	r1, r1, #4
 8003228:	430a      	orrs	r2, r1
 800322a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	69da      	ldr	r2, [r3, #28]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	490f      	ldr	r1, [pc, #60]	; (8003274 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003238:	400a      	ands	r2, r1
 800323a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	69d9      	ldr	r1, [r3, #28]
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	021a      	lsls	r2, r3, #8
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	430a      	orrs	r2, r1
 800324e:	61da      	str	r2, [r3, #28]
      break;
 8003250:	e004      	b.n	800325c <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8003252:	2317      	movs	r3, #23
 8003254:	18fb      	adds	r3, r7, r3
 8003256:	2201      	movs	r2, #1
 8003258:	701a      	strb	r2, [r3, #0]
      break;
 800325a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	223c      	movs	r2, #60	; 0x3c
 8003260:	2100      	movs	r1, #0
 8003262:	5499      	strb	r1, [r3, r2]

  return status;
 8003264:	2317      	movs	r3, #23
 8003266:	18fb      	adds	r3, r7, r3
 8003268:	781b      	ldrb	r3, [r3, #0]
}
 800326a:	0018      	movs	r0, r3
 800326c:	46bd      	mov	sp, r7
 800326e:	b006      	add	sp, #24
 8003270:	bd80      	pop	{r7, pc}
 8003272:	46c0      	nop			; (mov r8, r8)
 8003274:	fffffbff 	.word	0xfffffbff

08003278 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003282:	230f      	movs	r3, #15
 8003284:	18fb      	adds	r3, r7, r3
 8003286:	2200      	movs	r2, #0
 8003288:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	223c      	movs	r2, #60	; 0x3c
 800328e:	5c9b      	ldrb	r3, [r3, r2]
 8003290:	2b01      	cmp	r3, #1
 8003292:	d101      	bne.n	8003298 <HAL_TIM_ConfigClockSource+0x20>
 8003294:	2302      	movs	r3, #2
 8003296:	e0bc      	b.n	8003412 <HAL_TIM_ConfigClockSource+0x19a>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	223c      	movs	r2, #60	; 0x3c
 800329c:	2101      	movs	r1, #1
 800329e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	223d      	movs	r2, #61	; 0x3d
 80032a4:	2102      	movs	r1, #2
 80032a6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	2277      	movs	r2, #119	; 0x77
 80032b4:	4393      	bics	r3, r2
 80032b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	4a58      	ldr	r2, [pc, #352]	; (800341c <HAL_TIM_ConfigClockSource+0x1a4>)
 80032bc:	4013      	ands	r3, r2
 80032be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	68ba      	ldr	r2, [r7, #8]
 80032c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2280      	movs	r2, #128	; 0x80
 80032ce:	0192      	lsls	r2, r2, #6
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d040      	beq.n	8003356 <HAL_TIM_ConfigClockSource+0xde>
 80032d4:	2280      	movs	r2, #128	; 0x80
 80032d6:	0192      	lsls	r2, r2, #6
 80032d8:	4293      	cmp	r3, r2
 80032da:	d900      	bls.n	80032de <HAL_TIM_ConfigClockSource+0x66>
 80032dc:	e088      	b.n	80033f0 <HAL_TIM_ConfigClockSource+0x178>
 80032de:	2280      	movs	r2, #128	; 0x80
 80032e0:	0152      	lsls	r2, r2, #5
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d100      	bne.n	80032e8 <HAL_TIM_ConfigClockSource+0x70>
 80032e6:	e088      	b.n	80033fa <HAL_TIM_ConfigClockSource+0x182>
 80032e8:	2280      	movs	r2, #128	; 0x80
 80032ea:	0152      	lsls	r2, r2, #5
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d900      	bls.n	80032f2 <HAL_TIM_ConfigClockSource+0x7a>
 80032f0:	e07e      	b.n	80033f0 <HAL_TIM_ConfigClockSource+0x178>
 80032f2:	2b70      	cmp	r3, #112	; 0x70
 80032f4:	d018      	beq.n	8003328 <HAL_TIM_ConfigClockSource+0xb0>
 80032f6:	d900      	bls.n	80032fa <HAL_TIM_ConfigClockSource+0x82>
 80032f8:	e07a      	b.n	80033f0 <HAL_TIM_ConfigClockSource+0x178>
 80032fa:	2b60      	cmp	r3, #96	; 0x60
 80032fc:	d04f      	beq.n	800339e <HAL_TIM_ConfigClockSource+0x126>
 80032fe:	d900      	bls.n	8003302 <HAL_TIM_ConfigClockSource+0x8a>
 8003300:	e076      	b.n	80033f0 <HAL_TIM_ConfigClockSource+0x178>
 8003302:	2b50      	cmp	r3, #80	; 0x50
 8003304:	d03b      	beq.n	800337e <HAL_TIM_ConfigClockSource+0x106>
 8003306:	d900      	bls.n	800330a <HAL_TIM_ConfigClockSource+0x92>
 8003308:	e072      	b.n	80033f0 <HAL_TIM_ConfigClockSource+0x178>
 800330a:	2b40      	cmp	r3, #64	; 0x40
 800330c:	d057      	beq.n	80033be <HAL_TIM_ConfigClockSource+0x146>
 800330e:	d900      	bls.n	8003312 <HAL_TIM_ConfigClockSource+0x9a>
 8003310:	e06e      	b.n	80033f0 <HAL_TIM_ConfigClockSource+0x178>
 8003312:	2b30      	cmp	r3, #48	; 0x30
 8003314:	d063      	beq.n	80033de <HAL_TIM_ConfigClockSource+0x166>
 8003316:	d86b      	bhi.n	80033f0 <HAL_TIM_ConfigClockSource+0x178>
 8003318:	2b20      	cmp	r3, #32
 800331a:	d060      	beq.n	80033de <HAL_TIM_ConfigClockSource+0x166>
 800331c:	d868      	bhi.n	80033f0 <HAL_TIM_ConfigClockSource+0x178>
 800331e:	2b00      	cmp	r3, #0
 8003320:	d05d      	beq.n	80033de <HAL_TIM_ConfigClockSource+0x166>
 8003322:	2b10      	cmp	r3, #16
 8003324:	d05b      	beq.n	80033de <HAL_TIM_ConfigClockSource+0x166>
 8003326:	e063      	b.n	80033f0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6818      	ldr	r0, [r3, #0]
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	6899      	ldr	r1, [r3, #8]
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	685a      	ldr	r2, [r3, #4]
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	f000 fb5e 	bl	80039f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	2277      	movs	r2, #119	; 0x77
 8003348:	4313      	orrs	r3, r2
 800334a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68ba      	ldr	r2, [r7, #8]
 8003352:	609a      	str	r2, [r3, #8]
      break;
 8003354:	e052      	b.n	80033fc <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6818      	ldr	r0, [r3, #0]
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	6899      	ldr	r1, [r3, #8]
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	685a      	ldr	r2, [r3, #4]
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	f000 fb47 	bl	80039f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	689a      	ldr	r2, [r3, #8]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2180      	movs	r1, #128	; 0x80
 8003376:	01c9      	lsls	r1, r1, #7
 8003378:	430a      	orrs	r2, r1
 800337a:	609a      	str	r2, [r3, #8]
      break;
 800337c:	e03e      	b.n	80033fc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6818      	ldr	r0, [r3, #0]
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	6859      	ldr	r1, [r3, #4]
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	001a      	movs	r2, r3
 800338c:	f000 faba 	bl	8003904 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	2150      	movs	r1, #80	; 0x50
 8003396:	0018      	movs	r0, r3
 8003398:	f000 fb14 	bl	80039c4 <TIM_ITRx_SetConfig>
      break;
 800339c:	e02e      	b.n	80033fc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6818      	ldr	r0, [r3, #0]
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	6859      	ldr	r1, [r3, #4]
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	001a      	movs	r2, r3
 80033ac:	f000 fad8 	bl	8003960 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2160      	movs	r1, #96	; 0x60
 80033b6:	0018      	movs	r0, r3
 80033b8:	f000 fb04 	bl	80039c4 <TIM_ITRx_SetConfig>
      break;
 80033bc:	e01e      	b.n	80033fc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6818      	ldr	r0, [r3, #0]
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	6859      	ldr	r1, [r3, #4]
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	001a      	movs	r2, r3
 80033cc:	f000 fa9a 	bl	8003904 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	2140      	movs	r1, #64	; 0x40
 80033d6:	0018      	movs	r0, r3
 80033d8:	f000 faf4 	bl	80039c4 <TIM_ITRx_SetConfig>
      break;
 80033dc:	e00e      	b.n	80033fc <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	0019      	movs	r1, r3
 80033e8:	0010      	movs	r0, r2
 80033ea:	f000 faeb 	bl	80039c4 <TIM_ITRx_SetConfig>
      break;
 80033ee:	e005      	b.n	80033fc <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80033f0:	230f      	movs	r3, #15
 80033f2:	18fb      	adds	r3, r7, r3
 80033f4:	2201      	movs	r2, #1
 80033f6:	701a      	strb	r2, [r3, #0]
      break;
 80033f8:	e000      	b.n	80033fc <HAL_TIM_ConfigClockSource+0x184>
      break;
 80033fa:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	223d      	movs	r2, #61	; 0x3d
 8003400:	2101      	movs	r1, #1
 8003402:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	223c      	movs	r2, #60	; 0x3c
 8003408:	2100      	movs	r1, #0
 800340a:	5499      	strb	r1, [r3, r2]

  return status;
 800340c:	230f      	movs	r3, #15
 800340e:	18fb      	adds	r3, r7, r3
 8003410:	781b      	ldrb	r3, [r3, #0]
}
 8003412:	0018      	movs	r0, r3
 8003414:	46bd      	mov	sp, r7
 8003416:	b004      	add	sp, #16
 8003418:	bd80      	pop	{r7, pc}
 800341a:	46c0      	nop			; (mov r8, r8)
 800341c:	ffff00ff 	.word	0xffff00ff

08003420 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	4a2f      	ldr	r2, [pc, #188]	; (80034f0 <TIM_Base_SetConfig+0xd0>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d003      	beq.n	8003440 <TIM_Base_SetConfig+0x20>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	4a2e      	ldr	r2, [pc, #184]	; (80034f4 <TIM_Base_SetConfig+0xd4>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d108      	bne.n	8003452 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2270      	movs	r2, #112	; 0x70
 8003444:	4393      	bics	r3, r2
 8003446:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	68fa      	ldr	r2, [r7, #12]
 800344e:	4313      	orrs	r3, r2
 8003450:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a26      	ldr	r2, [pc, #152]	; (80034f0 <TIM_Base_SetConfig+0xd0>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d013      	beq.n	8003482 <TIM_Base_SetConfig+0x62>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a25      	ldr	r2, [pc, #148]	; (80034f4 <TIM_Base_SetConfig+0xd4>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d00f      	beq.n	8003482 <TIM_Base_SetConfig+0x62>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a24      	ldr	r2, [pc, #144]	; (80034f8 <TIM_Base_SetConfig+0xd8>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d00b      	beq.n	8003482 <TIM_Base_SetConfig+0x62>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a23      	ldr	r2, [pc, #140]	; (80034fc <TIM_Base_SetConfig+0xdc>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d007      	beq.n	8003482 <TIM_Base_SetConfig+0x62>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a22      	ldr	r2, [pc, #136]	; (8003500 <TIM_Base_SetConfig+0xe0>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d003      	beq.n	8003482 <TIM_Base_SetConfig+0x62>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a21      	ldr	r2, [pc, #132]	; (8003504 <TIM_Base_SetConfig+0xe4>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d108      	bne.n	8003494 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	4a20      	ldr	r2, [pc, #128]	; (8003508 <TIM_Base_SetConfig+0xe8>)
 8003486:	4013      	ands	r3, r2
 8003488:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	68fa      	ldr	r2, [r7, #12]
 8003490:	4313      	orrs	r3, r2
 8003492:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2280      	movs	r2, #128	; 0x80
 8003498:	4393      	bics	r3, r2
 800349a:	001a      	movs	r2, r3
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	695b      	ldr	r3, [r3, #20]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	68fa      	ldr	r2, [r7, #12]
 80034a8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	689a      	ldr	r2, [r3, #8]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a0c      	ldr	r2, [pc, #48]	; (80034f0 <TIM_Base_SetConfig+0xd0>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d00b      	beq.n	80034da <TIM_Base_SetConfig+0xba>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a0d      	ldr	r2, [pc, #52]	; (80034fc <TIM_Base_SetConfig+0xdc>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d007      	beq.n	80034da <TIM_Base_SetConfig+0xba>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a0c      	ldr	r2, [pc, #48]	; (8003500 <TIM_Base_SetConfig+0xe0>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d003      	beq.n	80034da <TIM_Base_SetConfig+0xba>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a0b      	ldr	r2, [pc, #44]	; (8003504 <TIM_Base_SetConfig+0xe4>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d103      	bne.n	80034e2 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	691a      	ldr	r2, [r3, #16]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2201      	movs	r2, #1
 80034e6:	615a      	str	r2, [r3, #20]
}
 80034e8:	46c0      	nop			; (mov r8, r8)
 80034ea:	46bd      	mov	sp, r7
 80034ec:	b004      	add	sp, #16
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	40012c00 	.word	0x40012c00
 80034f4:	40000400 	.word	0x40000400
 80034f8:	40002000 	.word	0x40002000
 80034fc:	40014000 	.word	0x40014000
 8003500:	40014400 	.word	0x40014400
 8003504:	40014800 	.word	0x40014800
 8003508:	fffffcff 	.word	0xfffffcff

0800350c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b086      	sub	sp, #24
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a1b      	ldr	r3, [r3, #32]
 800351a:	2201      	movs	r2, #1
 800351c:	4393      	bics	r3, r2
 800351e:	001a      	movs	r2, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a1b      	ldr	r3, [r3, #32]
 8003528:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	699b      	ldr	r3, [r3, #24]
 8003534:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2270      	movs	r2, #112	; 0x70
 800353a:	4393      	bics	r3, r2
 800353c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2203      	movs	r2, #3
 8003542:	4393      	bics	r3, r2
 8003544:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	68fa      	ldr	r2, [r7, #12]
 800354c:	4313      	orrs	r3, r2
 800354e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	2202      	movs	r2, #2
 8003554:	4393      	bics	r3, r2
 8003556:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	697a      	ldr	r2, [r7, #20]
 800355e:	4313      	orrs	r3, r2
 8003560:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a27      	ldr	r2, [pc, #156]	; (8003604 <TIM_OC1_SetConfig+0xf8>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d00b      	beq.n	8003582 <TIM_OC1_SetConfig+0x76>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a26      	ldr	r2, [pc, #152]	; (8003608 <TIM_OC1_SetConfig+0xfc>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d007      	beq.n	8003582 <TIM_OC1_SetConfig+0x76>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a25      	ldr	r2, [pc, #148]	; (800360c <TIM_OC1_SetConfig+0x100>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d003      	beq.n	8003582 <TIM_OC1_SetConfig+0x76>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a24      	ldr	r2, [pc, #144]	; (8003610 <TIM_OC1_SetConfig+0x104>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d10c      	bne.n	800359c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	2208      	movs	r2, #8
 8003586:	4393      	bics	r3, r2
 8003588:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	697a      	ldr	r2, [r7, #20]
 8003590:	4313      	orrs	r3, r2
 8003592:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	2204      	movs	r2, #4
 8003598:	4393      	bics	r3, r2
 800359a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4a19      	ldr	r2, [pc, #100]	; (8003604 <TIM_OC1_SetConfig+0xf8>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d00b      	beq.n	80035bc <TIM_OC1_SetConfig+0xb0>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	4a18      	ldr	r2, [pc, #96]	; (8003608 <TIM_OC1_SetConfig+0xfc>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d007      	beq.n	80035bc <TIM_OC1_SetConfig+0xb0>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	4a17      	ldr	r2, [pc, #92]	; (800360c <TIM_OC1_SetConfig+0x100>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d003      	beq.n	80035bc <TIM_OC1_SetConfig+0xb0>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	4a16      	ldr	r2, [pc, #88]	; (8003610 <TIM_OC1_SetConfig+0x104>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d111      	bne.n	80035e0 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	4a15      	ldr	r2, [pc, #84]	; (8003614 <TIM_OC1_SetConfig+0x108>)
 80035c0:	4013      	ands	r3, r2
 80035c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	4a14      	ldr	r2, [pc, #80]	; (8003618 <TIM_OC1_SetConfig+0x10c>)
 80035c8:	4013      	ands	r3, r2
 80035ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	695b      	ldr	r3, [r3, #20]
 80035d0:	693a      	ldr	r2, [r7, #16]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	699b      	ldr	r3, [r3, #24]
 80035da:	693a      	ldr	r2, [r7, #16]
 80035dc:	4313      	orrs	r3, r2
 80035de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	693a      	ldr	r2, [r7, #16]
 80035e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	68fa      	ldr	r2, [r7, #12]
 80035ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	685a      	ldr	r2, [r3, #4]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	697a      	ldr	r2, [r7, #20]
 80035f8:	621a      	str	r2, [r3, #32]
}
 80035fa:	46c0      	nop			; (mov r8, r8)
 80035fc:	46bd      	mov	sp, r7
 80035fe:	b006      	add	sp, #24
 8003600:	bd80      	pop	{r7, pc}
 8003602:	46c0      	nop			; (mov r8, r8)
 8003604:	40012c00 	.word	0x40012c00
 8003608:	40014000 	.word	0x40014000
 800360c:	40014400 	.word	0x40014400
 8003610:	40014800 	.word	0x40014800
 8003614:	fffffeff 	.word	0xfffffeff
 8003618:	fffffdff 	.word	0xfffffdff

0800361c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b086      	sub	sp, #24
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a1b      	ldr	r3, [r3, #32]
 800362a:	2210      	movs	r2, #16
 800362c:	4393      	bics	r3, r2
 800362e:	001a      	movs	r2, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6a1b      	ldr	r3, [r3, #32]
 8003638:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	699b      	ldr	r3, [r3, #24]
 8003644:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	4a2e      	ldr	r2, [pc, #184]	; (8003704 <TIM_OC2_SetConfig+0xe8>)
 800364a:	4013      	ands	r3, r2
 800364c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	4a2d      	ldr	r2, [pc, #180]	; (8003708 <TIM_OC2_SetConfig+0xec>)
 8003652:	4013      	ands	r3, r2
 8003654:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	021b      	lsls	r3, r3, #8
 800365c:	68fa      	ldr	r2, [r7, #12]
 800365e:	4313      	orrs	r3, r2
 8003660:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	2220      	movs	r2, #32
 8003666:	4393      	bics	r3, r2
 8003668:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	011b      	lsls	r3, r3, #4
 8003670:	697a      	ldr	r2, [r7, #20]
 8003672:	4313      	orrs	r3, r2
 8003674:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a24      	ldr	r2, [pc, #144]	; (800370c <TIM_OC2_SetConfig+0xf0>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d10d      	bne.n	800369a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	2280      	movs	r2, #128	; 0x80
 8003682:	4393      	bics	r3, r2
 8003684:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	011b      	lsls	r3, r3, #4
 800368c:	697a      	ldr	r2, [r7, #20]
 800368e:	4313      	orrs	r3, r2
 8003690:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	2240      	movs	r2, #64	; 0x40
 8003696:	4393      	bics	r3, r2
 8003698:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4a1b      	ldr	r2, [pc, #108]	; (800370c <TIM_OC2_SetConfig+0xf0>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d00b      	beq.n	80036ba <TIM_OC2_SetConfig+0x9e>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	4a1a      	ldr	r2, [pc, #104]	; (8003710 <TIM_OC2_SetConfig+0xf4>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d007      	beq.n	80036ba <TIM_OC2_SetConfig+0x9e>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4a19      	ldr	r2, [pc, #100]	; (8003714 <TIM_OC2_SetConfig+0xf8>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d003      	beq.n	80036ba <TIM_OC2_SetConfig+0x9e>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4a18      	ldr	r2, [pc, #96]	; (8003718 <TIM_OC2_SetConfig+0xfc>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d113      	bne.n	80036e2 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	4a17      	ldr	r2, [pc, #92]	; (800371c <TIM_OC2_SetConfig+0x100>)
 80036be:	4013      	ands	r3, r2
 80036c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	4a16      	ldr	r2, [pc, #88]	; (8003720 <TIM_OC2_SetConfig+0x104>)
 80036c6:	4013      	ands	r3, r2
 80036c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	695b      	ldr	r3, [r3, #20]
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	693a      	ldr	r2, [r7, #16]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	699b      	ldr	r3, [r3, #24]
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	693a      	ldr	r2, [r7, #16]
 80036de:	4313      	orrs	r3, r2
 80036e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	693a      	ldr	r2, [r7, #16]
 80036e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	68fa      	ldr	r2, [r7, #12]
 80036ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	685a      	ldr	r2, [r3, #4]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	697a      	ldr	r2, [r7, #20]
 80036fa:	621a      	str	r2, [r3, #32]
}
 80036fc:	46c0      	nop			; (mov r8, r8)
 80036fe:	46bd      	mov	sp, r7
 8003700:	b006      	add	sp, #24
 8003702:	bd80      	pop	{r7, pc}
 8003704:	ffff8fff 	.word	0xffff8fff
 8003708:	fffffcff 	.word	0xfffffcff
 800370c:	40012c00 	.word	0x40012c00
 8003710:	40014000 	.word	0x40014000
 8003714:	40014400 	.word	0x40014400
 8003718:	40014800 	.word	0x40014800
 800371c:	fffffbff 	.word	0xfffffbff
 8003720:	fffff7ff 	.word	0xfffff7ff

08003724 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b086      	sub	sp, #24
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a1b      	ldr	r3, [r3, #32]
 8003732:	4a35      	ldr	r2, [pc, #212]	; (8003808 <TIM_OC3_SetConfig+0xe4>)
 8003734:	401a      	ands	r2, r3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a1b      	ldr	r3, [r3, #32]
 800373e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	69db      	ldr	r3, [r3, #28]
 800374a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2270      	movs	r2, #112	; 0x70
 8003750:	4393      	bics	r3, r2
 8003752:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2203      	movs	r2, #3
 8003758:	4393      	bics	r3, r2
 800375a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	68fa      	ldr	r2, [r7, #12]
 8003762:	4313      	orrs	r3, r2
 8003764:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	4a28      	ldr	r2, [pc, #160]	; (800380c <TIM_OC3_SetConfig+0xe8>)
 800376a:	4013      	ands	r3, r2
 800376c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	021b      	lsls	r3, r3, #8
 8003774:	697a      	ldr	r2, [r7, #20]
 8003776:	4313      	orrs	r3, r2
 8003778:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a24      	ldr	r2, [pc, #144]	; (8003810 <TIM_OC3_SetConfig+0xec>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d10d      	bne.n	800379e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	4a23      	ldr	r2, [pc, #140]	; (8003814 <TIM_OC3_SetConfig+0xf0>)
 8003786:	4013      	ands	r3, r2
 8003788:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	021b      	lsls	r3, r3, #8
 8003790:	697a      	ldr	r2, [r7, #20]
 8003792:	4313      	orrs	r3, r2
 8003794:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	4a1f      	ldr	r2, [pc, #124]	; (8003818 <TIM_OC3_SetConfig+0xf4>)
 800379a:	4013      	ands	r3, r2
 800379c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a1b      	ldr	r2, [pc, #108]	; (8003810 <TIM_OC3_SetConfig+0xec>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d00b      	beq.n	80037be <TIM_OC3_SetConfig+0x9a>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a1c      	ldr	r2, [pc, #112]	; (800381c <TIM_OC3_SetConfig+0xf8>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d007      	beq.n	80037be <TIM_OC3_SetConfig+0x9a>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a1b      	ldr	r2, [pc, #108]	; (8003820 <TIM_OC3_SetConfig+0xfc>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d003      	beq.n	80037be <TIM_OC3_SetConfig+0x9a>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a1a      	ldr	r2, [pc, #104]	; (8003824 <TIM_OC3_SetConfig+0x100>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d113      	bne.n	80037e6 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	4a19      	ldr	r2, [pc, #100]	; (8003828 <TIM_OC3_SetConfig+0x104>)
 80037c2:	4013      	ands	r3, r2
 80037c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	4a18      	ldr	r2, [pc, #96]	; (800382c <TIM_OC3_SetConfig+0x108>)
 80037ca:	4013      	ands	r3, r2
 80037cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	695b      	ldr	r3, [r3, #20]
 80037d2:	011b      	lsls	r3, r3, #4
 80037d4:	693a      	ldr	r2, [r7, #16]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	011b      	lsls	r3, r3, #4
 80037e0:	693a      	ldr	r2, [r7, #16]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	693a      	ldr	r2, [r7, #16]
 80037ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	68fa      	ldr	r2, [r7, #12]
 80037f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	685a      	ldr	r2, [r3, #4]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	697a      	ldr	r2, [r7, #20]
 80037fe:	621a      	str	r2, [r3, #32]
}
 8003800:	46c0      	nop			; (mov r8, r8)
 8003802:	46bd      	mov	sp, r7
 8003804:	b006      	add	sp, #24
 8003806:	bd80      	pop	{r7, pc}
 8003808:	fffffeff 	.word	0xfffffeff
 800380c:	fffffdff 	.word	0xfffffdff
 8003810:	40012c00 	.word	0x40012c00
 8003814:	fffff7ff 	.word	0xfffff7ff
 8003818:	fffffbff 	.word	0xfffffbff
 800381c:	40014000 	.word	0x40014000
 8003820:	40014400 	.word	0x40014400
 8003824:	40014800 	.word	0x40014800
 8003828:	ffffefff 	.word	0xffffefff
 800382c:	ffffdfff 	.word	0xffffdfff

08003830 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b086      	sub	sp, #24
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a1b      	ldr	r3, [r3, #32]
 800383e:	4a28      	ldr	r2, [pc, #160]	; (80038e0 <TIM_OC4_SetConfig+0xb0>)
 8003840:	401a      	ands	r2, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a1b      	ldr	r3, [r3, #32]
 800384a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	69db      	ldr	r3, [r3, #28]
 8003856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	4a22      	ldr	r2, [pc, #136]	; (80038e4 <TIM_OC4_SetConfig+0xb4>)
 800385c:	4013      	ands	r3, r2
 800385e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	4a21      	ldr	r2, [pc, #132]	; (80038e8 <TIM_OC4_SetConfig+0xb8>)
 8003864:	4013      	ands	r3, r2
 8003866:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	021b      	lsls	r3, r3, #8
 800386e:	68fa      	ldr	r2, [r7, #12]
 8003870:	4313      	orrs	r3, r2
 8003872:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	4a1d      	ldr	r2, [pc, #116]	; (80038ec <TIM_OC4_SetConfig+0xbc>)
 8003878:	4013      	ands	r3, r2
 800387a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	031b      	lsls	r3, r3, #12
 8003882:	693a      	ldr	r2, [r7, #16]
 8003884:	4313      	orrs	r3, r2
 8003886:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	4a19      	ldr	r2, [pc, #100]	; (80038f0 <TIM_OC4_SetConfig+0xc0>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d00b      	beq.n	80038a8 <TIM_OC4_SetConfig+0x78>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	4a18      	ldr	r2, [pc, #96]	; (80038f4 <TIM_OC4_SetConfig+0xc4>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d007      	beq.n	80038a8 <TIM_OC4_SetConfig+0x78>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4a17      	ldr	r2, [pc, #92]	; (80038f8 <TIM_OC4_SetConfig+0xc8>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d003      	beq.n	80038a8 <TIM_OC4_SetConfig+0x78>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	4a16      	ldr	r2, [pc, #88]	; (80038fc <TIM_OC4_SetConfig+0xcc>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d109      	bne.n	80038bc <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	4a15      	ldr	r2, [pc, #84]	; (8003900 <TIM_OC4_SetConfig+0xd0>)
 80038ac:	4013      	ands	r3, r2
 80038ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	695b      	ldr	r3, [r3, #20]
 80038b4:	019b      	lsls	r3, r3, #6
 80038b6:	697a      	ldr	r2, [r7, #20]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	697a      	ldr	r2, [r7, #20]
 80038c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	68fa      	ldr	r2, [r7, #12]
 80038c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	685a      	ldr	r2, [r3, #4]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	693a      	ldr	r2, [r7, #16]
 80038d4:	621a      	str	r2, [r3, #32]
}
 80038d6:	46c0      	nop			; (mov r8, r8)
 80038d8:	46bd      	mov	sp, r7
 80038da:	b006      	add	sp, #24
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	46c0      	nop			; (mov r8, r8)
 80038e0:	ffffefff 	.word	0xffffefff
 80038e4:	ffff8fff 	.word	0xffff8fff
 80038e8:	fffffcff 	.word	0xfffffcff
 80038ec:	ffffdfff 	.word	0xffffdfff
 80038f0:	40012c00 	.word	0x40012c00
 80038f4:	40014000 	.word	0x40014000
 80038f8:	40014400 	.word	0x40014400
 80038fc:	40014800 	.word	0x40014800
 8003900:	ffffbfff 	.word	0xffffbfff

08003904 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b086      	sub	sp, #24
 8003908:	af00      	add	r7, sp, #0
 800390a:	60f8      	str	r0, [r7, #12]
 800390c:	60b9      	str	r1, [r7, #8]
 800390e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6a1b      	ldr	r3, [r3, #32]
 8003914:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	6a1b      	ldr	r3, [r3, #32]
 800391a:	2201      	movs	r2, #1
 800391c:	4393      	bics	r3, r2
 800391e:	001a      	movs	r2, r3
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	699b      	ldr	r3, [r3, #24]
 8003928:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	22f0      	movs	r2, #240	; 0xf0
 800392e:	4393      	bics	r3, r2
 8003930:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	011b      	lsls	r3, r3, #4
 8003936:	693a      	ldr	r2, [r7, #16]
 8003938:	4313      	orrs	r3, r2
 800393a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	220a      	movs	r2, #10
 8003940:	4393      	bics	r3, r2
 8003942:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003944:	697a      	ldr	r2, [r7, #20]
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	4313      	orrs	r3, r2
 800394a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	693a      	ldr	r2, [r7, #16]
 8003950:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	697a      	ldr	r2, [r7, #20]
 8003956:	621a      	str	r2, [r3, #32]
}
 8003958:	46c0      	nop			; (mov r8, r8)
 800395a:	46bd      	mov	sp, r7
 800395c:	b006      	add	sp, #24
 800395e:	bd80      	pop	{r7, pc}

08003960 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b086      	sub	sp, #24
 8003964:	af00      	add	r7, sp, #0
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	60b9      	str	r1, [r7, #8]
 800396a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6a1b      	ldr	r3, [r3, #32]
 8003970:	2210      	movs	r2, #16
 8003972:	4393      	bics	r3, r2
 8003974:	001a      	movs	r2, r3
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	699b      	ldr	r3, [r3, #24]
 800397e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6a1b      	ldr	r3, [r3, #32]
 8003984:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	4a0d      	ldr	r2, [pc, #52]	; (80039c0 <TIM_TI2_ConfigInputStage+0x60>)
 800398a:	4013      	ands	r3, r2
 800398c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	031b      	lsls	r3, r3, #12
 8003992:	697a      	ldr	r2, [r7, #20]
 8003994:	4313      	orrs	r3, r2
 8003996:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	22a0      	movs	r2, #160	; 0xa0
 800399c:	4393      	bics	r3, r2
 800399e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	011b      	lsls	r3, r3, #4
 80039a4:	693a      	ldr	r2, [r7, #16]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	697a      	ldr	r2, [r7, #20]
 80039ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	693a      	ldr	r2, [r7, #16]
 80039b4:	621a      	str	r2, [r3, #32]
}
 80039b6:	46c0      	nop			; (mov r8, r8)
 80039b8:	46bd      	mov	sp, r7
 80039ba:	b006      	add	sp, #24
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	46c0      	nop			; (mov r8, r8)
 80039c0:	ffff0fff 	.word	0xffff0fff

080039c4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2270      	movs	r2, #112	; 0x70
 80039d8:	4393      	bics	r3, r2
 80039da:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80039dc:	683a      	ldr	r2, [r7, #0]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	2207      	movs	r2, #7
 80039e4:	4313      	orrs	r3, r2
 80039e6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	68fa      	ldr	r2, [r7, #12]
 80039ec:	609a      	str	r2, [r3, #8]
}
 80039ee:	46c0      	nop			; (mov r8, r8)
 80039f0:	46bd      	mov	sp, r7
 80039f2:	b004      	add	sp, #16
 80039f4:	bd80      	pop	{r7, pc}
	...

080039f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b086      	sub	sp, #24
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	607a      	str	r2, [r7, #4]
 8003a04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	4a09      	ldr	r2, [pc, #36]	; (8003a34 <TIM_ETR_SetConfig+0x3c>)
 8003a10:	4013      	ands	r3, r2
 8003a12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	021a      	lsls	r2, r3, #8
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	431a      	orrs	r2, r3
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	697a      	ldr	r2, [r7, #20]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	697a      	ldr	r2, [r7, #20]
 8003a2a:	609a      	str	r2, [r3, #8]
}
 8003a2c:	46c0      	nop			; (mov r8, r8)
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	b006      	add	sp, #24
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	ffff00ff 	.word	0xffff00ff

08003a38 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b086      	sub	sp, #24
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	60b9      	str	r1, [r7, #8]
 8003a42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	221f      	movs	r2, #31
 8003a48:	4013      	ands	r3, r2
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	409a      	lsls	r2, r3
 8003a4e:	0013      	movs	r3, r2
 8003a50:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	6a1b      	ldr	r3, [r3, #32]
 8003a56:	697a      	ldr	r2, [r7, #20]
 8003a58:	43d2      	mvns	r2, r2
 8003a5a:	401a      	ands	r2, r3
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	6a1a      	ldr	r2, [r3, #32]
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	211f      	movs	r1, #31
 8003a68:	400b      	ands	r3, r1
 8003a6a:	6879      	ldr	r1, [r7, #4]
 8003a6c:	4099      	lsls	r1, r3
 8003a6e:	000b      	movs	r3, r1
 8003a70:	431a      	orrs	r2, r3
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	621a      	str	r2, [r3, #32]
}
 8003a76:	46c0      	nop			; (mov r8, r8)
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	b006      	add	sp, #24
 8003a7c:	bd80      	pop	{r7, pc}
	...

08003a80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	223c      	movs	r2, #60	; 0x3c
 8003a8e:	5c9b      	ldrb	r3, [r3, r2]
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d101      	bne.n	8003a98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a94:	2302      	movs	r3, #2
 8003a96:	e041      	b.n	8003b1c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	223c      	movs	r2, #60	; 0x3c
 8003a9c:	2101      	movs	r1, #1
 8003a9e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	223d      	movs	r2, #61	; 0x3d
 8003aa4:	2102      	movs	r1, #2
 8003aa6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2270      	movs	r2, #112	; 0x70
 8003abc:	4393      	bics	r3, r2
 8003abe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	68fa      	ldr	r2, [r7, #12]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	68fa      	ldr	r2, [r7, #12]
 8003ad0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a13      	ldr	r2, [pc, #76]	; (8003b24 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d009      	beq.n	8003af0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a11      	ldr	r2, [pc, #68]	; (8003b28 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d004      	beq.n	8003af0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a10      	ldr	r2, [pc, #64]	; (8003b2c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d10c      	bne.n	8003b0a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	2280      	movs	r2, #128	; 0x80
 8003af4:	4393      	bics	r3, r2
 8003af6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	68ba      	ldr	r2, [r7, #8]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	68ba      	ldr	r2, [r7, #8]
 8003b08:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	223d      	movs	r2, #61	; 0x3d
 8003b0e:	2101      	movs	r1, #1
 8003b10:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	223c      	movs	r2, #60	; 0x3c
 8003b16:	2100      	movs	r1, #0
 8003b18:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b1a:	2300      	movs	r3, #0
}
 8003b1c:	0018      	movs	r0, r3
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	b004      	add	sp, #16
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	40012c00 	.word	0x40012c00
 8003b28:	40000400 	.word	0x40000400
 8003b2c:	40014000 	.word	0x40014000

08003b30 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	223c      	movs	r2, #60	; 0x3c
 8003b42:	5c9b      	ldrb	r3, [r3, r2]
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d101      	bne.n	8003b4c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003b48:	2302      	movs	r3, #2
 8003b4a:	e03e      	b.n	8003bca <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	223c      	movs	r2, #60	; 0x3c
 8003b50:	2101      	movs	r1, #1
 8003b52:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	22ff      	movs	r2, #255	; 0xff
 8003b58:	4393      	bics	r3, r2
 8003b5a:	001a      	movs	r2, r3
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	4a1b      	ldr	r2, [pc, #108]	; (8003bd4 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8003b68:	401a      	ands	r2, r3
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	4a18      	ldr	r2, [pc, #96]	; (8003bd8 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8003b76:	401a      	ands	r2, r3
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	4a16      	ldr	r2, [pc, #88]	; (8003bdc <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8003b84:	401a      	ands	r2, r3
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	4a13      	ldr	r2, [pc, #76]	; (8003be0 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8003b92:	401a      	ands	r2, r3
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	691b      	ldr	r3, [r3, #16]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	4a11      	ldr	r2, [pc, #68]	; (8003be4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8003ba0:	401a      	ands	r2, r3
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	695b      	ldr	r3, [r3, #20]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	4a0e      	ldr	r2, [pc, #56]	; (8003be8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8003bae:	401a      	ands	r2, r3
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	69db      	ldr	r3, [r3, #28]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	68fa      	ldr	r2, [r7, #12]
 8003bbe:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	223c      	movs	r2, #60	; 0x3c
 8003bc4:	2100      	movs	r1, #0
 8003bc6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003bc8:	2300      	movs	r3, #0
}
 8003bca:	0018      	movs	r0, r3
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	b004      	add	sp, #16
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	46c0      	nop			; (mov r8, r8)
 8003bd4:	fffffcff 	.word	0xfffffcff
 8003bd8:	fffffbff 	.word	0xfffffbff
 8003bdc:	fffff7ff 	.word	0xfffff7ff
 8003be0:	ffffefff 	.word	0xffffefff
 8003be4:	ffffdfff 	.word	0xffffdfff
 8003be8:	ffffbfff 	.word	0xffffbfff

08003bec <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003bf2:	f3ef 8305 	mrs	r3, IPSR
 8003bf6:	60bb      	str	r3, [r7, #8]
  return(result);
 8003bf8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d109      	bne.n	8003c12 <osKernelInitialize+0x26>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bfe:	f3ef 8310 	mrs	r3, PRIMASK
 8003c02:	607b      	str	r3, [r7, #4]
  return(result);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d007      	beq.n	8003c1a <osKernelInitialize+0x2e>
 8003c0a:	4b0d      	ldr	r3, [pc, #52]	; (8003c40 <osKernelInitialize+0x54>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d103      	bne.n	8003c1a <osKernelInitialize+0x2e>
    stat = osErrorISR;
 8003c12:	2306      	movs	r3, #6
 8003c14:	425b      	negs	r3, r3
 8003c16:	60fb      	str	r3, [r7, #12]
 8003c18:	e00c      	b.n	8003c34 <osKernelInitialize+0x48>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003c1a:	4b09      	ldr	r3, [pc, #36]	; (8003c40 <osKernelInitialize+0x54>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d105      	bne.n	8003c2e <osKernelInitialize+0x42>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8003c22:	4b07      	ldr	r3, [pc, #28]	; (8003c40 <osKernelInitialize+0x54>)
 8003c24:	2201      	movs	r2, #1
 8003c26:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	60fb      	str	r3, [r7, #12]
 8003c2c:	e002      	b.n	8003c34 <osKernelInitialize+0x48>
    } else {
      stat = osError;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	425b      	negs	r3, r3
 8003c32:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003c34:	68fb      	ldr	r3, [r7, #12]
}
 8003c36:	0018      	movs	r0, r3
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	b004      	add	sp, #16
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	46c0      	nop			; (mov r8, r8)
 8003c40:	20000034 	.word	0x20000034

08003c44 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003c44:	b5b0      	push	{r4, r5, r7, lr}
 8003c46:	b090      	sub	sp, #64	; 0x40
 8003c48:	af04      	add	r7, sp, #16
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	60b9      	str	r1, [r7, #8]
 8003c4e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003c50:	2300      	movs	r3, #0
 8003c52:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c54:	f3ef 8305 	mrs	r3, IPSR
 8003c58:	61fb      	str	r3, [r7, #28]
  return(result);
 8003c5a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d000      	beq.n	8003c62 <osThreadNew+0x1e>
 8003c60:	e090      	b.n	8003d84 <osThreadNew+0x140>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c62:	f3ef 8310 	mrs	r3, PRIMASK
 8003c66:	61bb      	str	r3, [r7, #24]
  return(result);
 8003c68:	69bb      	ldr	r3, [r7, #24]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d004      	beq.n	8003c78 <osThreadNew+0x34>
 8003c6e:	4b48      	ldr	r3, [pc, #288]	; (8003d90 <osThreadNew+0x14c>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	2b02      	cmp	r3, #2
 8003c74:	d100      	bne.n	8003c78 <osThreadNew+0x34>
 8003c76:	e085      	b.n	8003d84 <osThreadNew+0x140>
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d100      	bne.n	8003c80 <osThreadNew+0x3c>
 8003c7e:	e081      	b.n	8003d84 <osThreadNew+0x140>
    stack = configMINIMAL_STACK_SIZE;
 8003c80:	2380      	movs	r3, #128	; 0x80
 8003c82:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8003c84:	2318      	movs	r3, #24
 8003c86:	627b      	str	r3, [r7, #36]	; 0x24

    empty = '\0';
 8003c88:	2117      	movs	r1, #23
 8003c8a:	187b      	adds	r3, r7, r1
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	701a      	strb	r2, [r3, #0]
    name  = &empty;
 8003c90:	187b      	adds	r3, r7, r1
 8003c92:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem   = -1;
 8003c94:	2301      	movs	r3, #1
 8003c96:	425b      	negs	r3, r3
 8003c98:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d044      	beq.n	8003d2a <osThreadNew+0xe6>
      if (attr->name != NULL) {
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d002      	beq.n	8003cae <osThreadNew+0x6a>
        name = attr->name;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	699b      	ldr	r3, [r3, #24]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d002      	beq.n	8003cbc <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	699b      	ldr	r3, [r3, #24]
 8003cba:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d007      	beq.n	8003cd2 <osThreadNew+0x8e>
 8003cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc4:	2b38      	cmp	r3, #56	; 0x38
 8003cc6:	d804      	bhi.n	8003cd2 <osThreadNew+0x8e>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	2201      	movs	r2, #1
 8003cce:	4013      	ands	r3, r2
 8003cd0:	d001      	beq.n	8003cd6 <osThreadNew+0x92>
        return (NULL);
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	e057      	b.n	8003d86 <osThreadNew+0x142>
      }

      if (attr->stack_size > 0U) {
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	695b      	ldr	r3, [r3, #20]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d003      	beq.n	8003ce6 <osThreadNew+0xa2>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	695b      	ldr	r3, [r3, #20]
 8003ce2:	089b      	lsrs	r3, r3, #2
 8003ce4:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d00e      	beq.n	8003d0c <osThreadNew+0xc8>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	68db      	ldr	r3, [r3, #12]
 8003cf2:	2b5b      	cmp	r3, #91	; 0x5b
 8003cf4:	d90a      	bls.n	8003d0c <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d006      	beq.n	8003d0c <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	695b      	ldr	r3, [r3, #20]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d002      	beq.n	8003d0c <osThreadNew+0xc8>
        mem = 1;
 8003d06:	2301      	movs	r3, #1
 8003d08:	623b      	str	r3, [r7, #32]
 8003d0a:	e010      	b.n	8003d2e <osThreadNew+0xea>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d10c      	bne.n	8003d2e <osThreadNew+0xea>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d108      	bne.n	8003d2e <osThreadNew+0xea>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	691b      	ldr	r3, [r3, #16]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d104      	bne.n	8003d2e <osThreadNew+0xea>
          mem = 0;
 8003d24:	2300      	movs	r3, #0
 8003d26:	623b      	str	r3, [r7, #32]
 8003d28:	e001      	b.n	8003d2e <osThreadNew+0xea>
        }
      }
    }
    else {
      mem = 0;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8003d2e:	6a3b      	ldr	r3, [r7, #32]
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d112      	bne.n	8003d5a <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	691a      	ldr	r2, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	689b      	ldr	r3, [r3, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003d3c:	68bd      	ldr	r5, [r7, #8]
 8003d3e:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8003d40:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d42:	68f8      	ldr	r0, [r7, #12]
 8003d44:	9302      	str	r3, [sp, #8]
 8003d46:	9201      	str	r2, [sp, #4]
 8003d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4a:	9300      	str	r3, [sp, #0]
 8003d4c:	002b      	movs	r3, r5
 8003d4e:	0022      	movs	r2, r4
 8003d50:	f000 fde5 	bl	800491e <xTaskCreateStatic>
 8003d54:	0003      	movs	r3, r0
 8003d56:	613b      	str	r3, [r7, #16]
 8003d58:	e014      	b.n	8003d84 <osThreadNew+0x140>
    }
    else {
      if (mem == 0) {
 8003d5a:	6a3b      	ldr	r3, [r7, #32]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d111      	bne.n	8003d84 <osThreadNew+0x140>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d62:	b29a      	uxth	r2, r3
 8003d64:	68bc      	ldr	r4, [r7, #8]
 8003d66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d68:	68f8      	ldr	r0, [r7, #12]
 8003d6a:	2310      	movs	r3, #16
 8003d6c:	18fb      	adds	r3, r7, r3
 8003d6e:	9301      	str	r3, [sp, #4]
 8003d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d72:	9300      	str	r3, [sp, #0]
 8003d74:	0023      	movs	r3, r4
 8003d76:	f000 fe15 	bl	80049a4 <xTaskCreate>
 8003d7a:	0003      	movs	r3, r0
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d001      	beq.n	8003d84 <osThreadNew+0x140>
          hTask = NULL;
 8003d80:	2300      	movs	r3, #0
 8003d82:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003d84:	693b      	ldr	r3, [r7, #16]
}
 8003d86:	0018      	movs	r0, r3
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	b00c      	add	sp, #48	; 0x30
 8003d8c:	bdb0      	pop	{r4, r5, r7, pc}
 8003d8e:	46c0      	nop			; (mov r8, r8)
 8003d90:	20000034 	.word	0x20000034

08003d94 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b086      	sub	sp, #24
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d9c:	f3ef 8305 	mrs	r3, IPSR
 8003da0:	613b      	str	r3, [r7, #16]
  return(result);
 8003da2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d109      	bne.n	8003dbc <osDelay+0x28>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003da8:	f3ef 8310 	mrs	r3, PRIMASK
 8003dac:	60fb      	str	r3, [r7, #12]
  return(result);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d007      	beq.n	8003dc4 <osDelay+0x30>
 8003db4:	4b0a      	ldr	r3, [pc, #40]	; (8003de0 <osDelay+0x4c>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	d103      	bne.n	8003dc4 <osDelay+0x30>
    stat = osErrorISR;
 8003dbc:	2306      	movs	r3, #6
 8003dbe:	425b      	negs	r3, r3
 8003dc0:	617b      	str	r3, [r7, #20]
 8003dc2:	e008      	b.n	8003dd6 <osDelay+0x42>
  }
  else {
    stat = osOK;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d003      	beq.n	8003dd6 <osDelay+0x42>
      vTaskDelay(ticks);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	0018      	movs	r0, r3
 8003dd2:	f000 ff1d 	bl	8004c10 <vTaskDelay>
    }
  }

  return (stat);
 8003dd6:	697b      	ldr	r3, [r7, #20]
}
 8003dd8:	0018      	movs	r0, r3
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	b006      	add	sp, #24
 8003dde:	bd80      	pop	{r7, pc}
 8003de0:	20000034 	.word	0x20000034

08003de4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	60b9      	str	r1, [r7, #8]
 8003dee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	4a06      	ldr	r2, [pc, #24]	; (8003e0c <vApplicationGetIdleTaskMemory+0x28>)
 8003df4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	4a05      	ldr	r2, [pc, #20]	; (8003e10 <vApplicationGetIdleTaskMemory+0x2c>)
 8003dfa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2280      	movs	r2, #128	; 0x80
 8003e00:	601a      	str	r2, [r3, #0]
}
 8003e02:	46c0      	nop			; (mov r8, r8)
 8003e04:	46bd      	mov	sp, r7
 8003e06:	b004      	add	sp, #16
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	46c0      	nop			; (mov r8, r8)
 8003e0c:	20000038 	.word	0x20000038
 8003e10:	20000094 	.word	0x20000094

08003e14 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	60f8      	str	r0, [r7, #12]
 8003e1c:	60b9      	str	r1, [r7, #8]
 8003e1e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	4a06      	ldr	r2, [pc, #24]	; (8003e3c <vApplicationGetTimerTaskMemory+0x28>)
 8003e24:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	4a05      	ldr	r2, [pc, #20]	; (8003e40 <vApplicationGetTimerTaskMemory+0x2c>)
 8003e2a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2280      	movs	r2, #128	; 0x80
 8003e30:	0052      	lsls	r2, r2, #1
 8003e32:	601a      	str	r2, [r3, #0]
}
 8003e34:	46c0      	nop			; (mov r8, r8)
 8003e36:	46bd      	mov	sp, r7
 8003e38:	b004      	add	sp, #16
 8003e3a:	bd80      	pop	{r7, pc}
 8003e3c:	20000294 	.word	0x20000294
 8003e40:	200002f0 	.word	0x200002f0

08003e44 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b082      	sub	sp, #8
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	3308      	adds	r3, #8
 8003e50:	001a      	movs	r2, r3
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2201      	movs	r2, #1
 8003e5a:	4252      	negs	r2, r2
 8003e5c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	3308      	adds	r3, #8
 8003e62:	001a      	movs	r2, r3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	3308      	adds	r3, #8
 8003e6c:	001a      	movs	r2, r3
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003e78:	46c0      	nop			; (mov r8, r8)
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	b002      	add	sp, #8
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b082      	sub	sp, #8
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003e8e:	46c0      	nop			; (mov r8, r8)
 8003e90:	46bd      	mov	sp, r7
 8003e92:	b002      	add	sp, #8
 8003e94:	bd80      	pop	{r7, pc}

08003e96 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003e96:	b580      	push	{r7, lr}
 8003e98:	b084      	sub	sp, #16
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	6078      	str	r0, [r7, #4]
 8003e9e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	68fa      	ldr	r2, [r7, #12]
 8003eaa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	689a      	ldr	r2, [r3, #8]
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	683a      	ldr	r2, [r7, #0]
 8003eba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	683a      	ldr	r2, [r7, #0]
 8003ec0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	1c5a      	adds	r2, r3, #1
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	601a      	str	r2, [r3, #0]
}
 8003ed2:	46c0      	nop			; (mov r8, r8)
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	b004      	add	sp, #16
 8003ed8:	bd80      	pop	{r7, pc}

08003eda <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003eda:	b580      	push	{r7, lr}
 8003edc:	b084      	sub	sp, #16
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
 8003ee2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	3301      	adds	r3, #1
 8003eee:	d103      	bne.n	8003ef8 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	691b      	ldr	r3, [r3, #16]
 8003ef4:	60fb      	str	r3, [r7, #12]
 8003ef6:	e00c      	b.n	8003f12 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	3308      	adds	r3, #8
 8003efc:	60fb      	str	r3, [r7, #12]
 8003efe:	e002      	b.n	8003f06 <vListInsert+0x2c>
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	60fb      	str	r3, [r7, #12]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68ba      	ldr	r2, [r7, #8]
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d2f6      	bcs.n	8003f00 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	685a      	ldr	r2, [r3, #4]
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	683a      	ldr	r2, [r7, #0]
 8003f20:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	68fa      	ldr	r2, [r7, #12]
 8003f26:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	683a      	ldr	r2, [r7, #0]
 8003f2c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	1c5a      	adds	r2, r3, #1
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	601a      	str	r2, [r3, #0]
}
 8003f3e:	46c0      	nop			; (mov r8, r8)
 8003f40:	46bd      	mov	sp, r7
 8003f42:	b004      	add	sp, #16
 8003f44:	bd80      	pop	{r7, pc}

08003f46 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003f46:	b580      	push	{r7, lr}
 8003f48:	b084      	sub	sp, #16
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	6892      	ldr	r2, [r2, #8]
 8003f5c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	6852      	ldr	r2, [r2, #4]
 8003f66:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d103      	bne.n	8003f7a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	689a      	ldr	r2, [r3, #8]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	1e5a      	subs	r2, r3, #1
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
}
 8003f8e:	0018      	movs	r0, r3
 8003f90:	46bd      	mov	sp, r7
 8003f92:	b004      	add	sp, #16
 8003f94:	bd80      	pop	{r7, pc}

08003f96 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003f96:	b580      	push	{r7, lr}
 8003f98:	b084      	sub	sp, #16
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
 8003f9e:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d101      	bne.n	8003fae <xQueueGenericReset+0x18>
 8003faa:	b672      	cpsid	i
 8003fac:	e7fe      	b.n	8003fac <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 8003fae:	f001 fe67 	bl	8005c80 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fbe:	434b      	muls	r3, r1
 8003fc0:	18d2      	adds	r2, r2, r3
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fdc:	1e59      	subs	r1, r3, #1
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe2:	434b      	muls	r3, r1
 8003fe4:	18d2      	adds	r2, r2, r3
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2244      	movs	r2, #68	; 0x44
 8003fee:	21ff      	movs	r1, #255	; 0xff
 8003ff0:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2245      	movs	r2, #69	; 0x45
 8003ff6:	21ff      	movs	r1, #255	; 0xff
 8003ff8:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d10d      	bne.n	800401c <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	691b      	ldr	r3, [r3, #16]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d013      	beq.n	8004030 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	3310      	adds	r3, #16
 800400c:	0018      	movs	r0, r3
 800400e:	f001 f869 	bl	80050e4 <xTaskRemoveFromEventList>
 8004012:	1e03      	subs	r3, r0, #0
 8004014:	d00c      	beq.n	8004030 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004016:	f001 fe23 	bl	8005c60 <vPortYield>
 800401a:	e009      	b.n	8004030 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	3310      	adds	r3, #16
 8004020:	0018      	movs	r0, r3
 8004022:	f7ff ff0f 	bl	8003e44 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	3324      	adds	r3, #36	; 0x24
 800402a:	0018      	movs	r0, r3
 800402c:	f7ff ff0a 	bl	8003e44 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004030:	f001 fe38 	bl	8005ca4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004034:	2301      	movs	r3, #1
}
 8004036:	0018      	movs	r0, r3
 8004038:	46bd      	mov	sp, r7
 800403a:	b004      	add	sp, #16
 800403c:	bd80      	pop	{r7, pc}

0800403e <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800403e:	b590      	push	{r4, r7, lr}
 8004040:	b089      	sub	sp, #36	; 0x24
 8004042:	af02      	add	r7, sp, #8
 8004044:	60f8      	str	r0, [r7, #12]
 8004046:	60b9      	str	r1, [r7, #8]
 8004048:	607a      	str	r2, [r7, #4]
 800404a:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d101      	bne.n	8004056 <xQueueGenericCreateStatic+0x18>
 8004052:	b672      	cpsid	i
 8004054:	e7fe      	b.n	8004054 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d101      	bne.n	8004060 <xQueueGenericCreateStatic+0x22>
 800405c:	b672      	cpsid	i
 800405e:	e7fe      	b.n	800405e <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d002      	beq.n	800406c <xQueueGenericCreateStatic+0x2e>
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d001      	beq.n	8004070 <xQueueGenericCreateStatic+0x32>
 800406c:	2301      	movs	r3, #1
 800406e:	e000      	b.n	8004072 <xQueueGenericCreateStatic+0x34>
 8004070:	2300      	movs	r3, #0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d101      	bne.n	800407a <xQueueGenericCreateStatic+0x3c>
 8004076:	b672      	cpsid	i
 8004078:	e7fe      	b.n	8004078 <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d102      	bne.n	8004086 <xQueueGenericCreateStatic+0x48>
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d101      	bne.n	800408a <xQueueGenericCreateStatic+0x4c>
 8004086:	2301      	movs	r3, #1
 8004088:	e000      	b.n	800408c <xQueueGenericCreateStatic+0x4e>
 800408a:	2300      	movs	r3, #0
 800408c:	2b00      	cmp	r3, #0
 800408e:	d101      	bne.n	8004094 <xQueueGenericCreateStatic+0x56>
 8004090:	b672      	cpsid	i
 8004092:	e7fe      	b.n	8004092 <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004094:	2350      	movs	r3, #80	; 0x50
 8004096:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	2b50      	cmp	r3, #80	; 0x50
 800409c:	d001      	beq.n	80040a2 <xQueueGenericCreateStatic+0x64>
 800409e:	b672      	cpsid	i
 80040a0:	e7fe      	b.n	80040a0 <xQueueGenericCreateStatic+0x62>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d00e      	beq.n	80040ca <xQueueGenericCreateStatic+0x8c>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	2246      	movs	r2, #70	; 0x46
 80040b0:	2101      	movs	r1, #1
 80040b2:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80040b4:	2328      	movs	r3, #40	; 0x28
 80040b6:	18fb      	adds	r3, r7, r3
 80040b8:	781c      	ldrb	r4, [r3, #0]
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	68b9      	ldr	r1, [r7, #8]
 80040be:	68f8      	ldr	r0, [r7, #12]
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	9300      	str	r3, [sp, #0]
 80040c4:	0023      	movs	r3, r4
 80040c6:	f000 f83b 	bl	8004140 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80040ca:	697b      	ldr	r3, [r7, #20]
	}
 80040cc:	0018      	movs	r0, r3
 80040ce:	46bd      	mov	sp, r7
 80040d0:	b007      	add	sp, #28
 80040d2:	bd90      	pop	{r4, r7, pc}

080040d4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80040d4:	b590      	push	{r4, r7, lr}
 80040d6:	b08b      	sub	sp, #44	; 0x2c
 80040d8:	af02      	add	r7, sp, #8
 80040da:	60f8      	str	r0, [r7, #12]
 80040dc:	60b9      	str	r1, [r7, #8]
 80040de:	1dfb      	adds	r3, r7, #7
 80040e0:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d101      	bne.n	80040ec <xQueueGenericCreate+0x18>
 80040e8:	b672      	cpsid	i
 80040ea:	e7fe      	b.n	80040ea <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d102      	bne.n	80040f8 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80040f2:	2300      	movs	r3, #0
 80040f4:	61fb      	str	r3, [r7, #28]
 80040f6:	e003      	b.n	8004100 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	68ba      	ldr	r2, [r7, #8]
 80040fc:	4353      	muls	r3, r2
 80040fe:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	3350      	adds	r3, #80	; 0x50
 8004104:	0018      	movs	r0, r3
 8004106:	f001 fe53 	bl	8005db0 <pvPortMalloc>
 800410a:	0003      	movs	r3, r0
 800410c:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 800410e:	69bb      	ldr	r3, [r7, #24]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d010      	beq.n	8004136 <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8004114:	69bb      	ldr	r3, [r7, #24]
 8004116:	3350      	adds	r3, #80	; 0x50
 8004118:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	2246      	movs	r2, #70	; 0x46
 800411e:	2100      	movs	r1, #0
 8004120:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004122:	1dfb      	adds	r3, r7, #7
 8004124:	781c      	ldrb	r4, [r3, #0]
 8004126:	697a      	ldr	r2, [r7, #20]
 8004128:	68b9      	ldr	r1, [r7, #8]
 800412a:	68f8      	ldr	r0, [r7, #12]
 800412c:	69bb      	ldr	r3, [r7, #24]
 800412e:	9300      	str	r3, [sp, #0]
 8004130:	0023      	movs	r3, r4
 8004132:	f000 f805 	bl	8004140 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004136:	69bb      	ldr	r3, [r7, #24]
	}
 8004138:	0018      	movs	r0, r3
 800413a:	46bd      	mov	sp, r7
 800413c:	b009      	add	sp, #36	; 0x24
 800413e:	bd90      	pop	{r4, r7, pc}

08004140 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	60b9      	str	r1, [r7, #8]
 800414a:	607a      	str	r2, [r7, #4]
 800414c:	001a      	movs	r2, r3
 800414e:	1cfb      	adds	r3, r7, #3
 8004150:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d103      	bne.n	8004160 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004158:	69bb      	ldr	r3, [r7, #24]
 800415a:	69ba      	ldr	r2, [r7, #24]
 800415c:	601a      	str	r2, [r3, #0]
 800415e:	e002      	b.n	8004166 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004166:	69bb      	ldr	r3, [r7, #24]
 8004168:	68fa      	ldr	r2, [r7, #12]
 800416a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800416c:	69bb      	ldr	r3, [r7, #24]
 800416e:	68ba      	ldr	r2, [r7, #8]
 8004170:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004172:	69bb      	ldr	r3, [r7, #24]
 8004174:	2101      	movs	r1, #1
 8004176:	0018      	movs	r0, r3
 8004178:	f7ff ff0d 	bl	8003f96 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800417c:	69bb      	ldr	r3, [r7, #24]
 800417e:	1cfa      	adds	r2, r7, #3
 8004180:	214c      	movs	r1, #76	; 0x4c
 8004182:	7812      	ldrb	r2, [r2, #0]
 8004184:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004186:	46c0      	nop			; (mov r8, r8)
 8004188:	46bd      	mov	sp, r7
 800418a:	b004      	add	sp, #16
 800418c:	bd80      	pop	{r7, pc}

0800418e <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800418e:	b580      	push	{r7, lr}
 8004190:	b08a      	sub	sp, #40	; 0x28
 8004192:	af00      	add	r7, sp, #0
 8004194:	60f8      	str	r0, [r7, #12]
 8004196:	60b9      	str	r1, [r7, #8]
 8004198:	607a      	str	r2, [r7, #4]
 800419a:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800419c:	2300      	movs	r3, #0
 800419e:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 80041a4:	6a3b      	ldr	r3, [r7, #32]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d101      	bne.n	80041ae <xQueueGenericSend+0x20>
 80041aa:	b672      	cpsid	i
 80041ac:	e7fe      	b.n	80041ac <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d103      	bne.n	80041bc <xQueueGenericSend+0x2e>
 80041b4:	6a3b      	ldr	r3, [r7, #32]
 80041b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d101      	bne.n	80041c0 <xQueueGenericSend+0x32>
 80041bc:	2301      	movs	r3, #1
 80041be:	e000      	b.n	80041c2 <xQueueGenericSend+0x34>
 80041c0:	2300      	movs	r3, #0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d101      	bne.n	80041ca <xQueueGenericSend+0x3c>
 80041c6:	b672      	cpsid	i
 80041c8:	e7fe      	b.n	80041c8 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	d103      	bne.n	80041d8 <xQueueGenericSend+0x4a>
 80041d0:	6a3b      	ldr	r3, [r7, #32]
 80041d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d101      	bne.n	80041dc <xQueueGenericSend+0x4e>
 80041d8:	2301      	movs	r3, #1
 80041da:	e000      	b.n	80041de <xQueueGenericSend+0x50>
 80041dc:	2300      	movs	r3, #0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d101      	bne.n	80041e6 <xQueueGenericSend+0x58>
 80041e2:	b672      	cpsid	i
 80041e4:	e7fe      	b.n	80041e4 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80041e6:	f001 f915 	bl	8005414 <xTaskGetSchedulerState>
 80041ea:	1e03      	subs	r3, r0, #0
 80041ec:	d102      	bne.n	80041f4 <xQueueGenericSend+0x66>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d101      	bne.n	80041f8 <xQueueGenericSend+0x6a>
 80041f4:	2301      	movs	r3, #1
 80041f6:	e000      	b.n	80041fa <xQueueGenericSend+0x6c>
 80041f8:	2300      	movs	r3, #0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d101      	bne.n	8004202 <xQueueGenericSend+0x74>
 80041fe:	b672      	cpsid	i
 8004200:	e7fe      	b.n	8004200 <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004202:	f001 fd3d 	bl	8005c80 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004206:	6a3b      	ldr	r3, [r7, #32]
 8004208:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800420a:	6a3b      	ldr	r3, [r7, #32]
 800420c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800420e:	429a      	cmp	r2, r3
 8004210:	d302      	bcc.n	8004218 <xQueueGenericSend+0x8a>
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	2b02      	cmp	r3, #2
 8004216:	d11e      	bne.n	8004256 <xQueueGenericSend+0xc8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004218:	683a      	ldr	r2, [r7, #0]
 800421a:	68b9      	ldr	r1, [r7, #8]
 800421c:	6a3b      	ldr	r3, [r7, #32]
 800421e:	0018      	movs	r0, r3
 8004220:	f000 fa04 	bl	800462c <prvCopyDataToQueue>
 8004224:	0003      	movs	r3, r0
 8004226:	61fb      	str	r3, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004228:	6a3b      	ldr	r3, [r7, #32]
 800422a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422c:	2b00      	cmp	r3, #0
 800422e:	d009      	beq.n	8004244 <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004230:	6a3b      	ldr	r3, [r7, #32]
 8004232:	3324      	adds	r3, #36	; 0x24
 8004234:	0018      	movs	r0, r3
 8004236:	f000 ff55 	bl	80050e4 <xTaskRemoveFromEventList>
 800423a:	1e03      	subs	r3, r0, #0
 800423c:	d007      	beq.n	800424e <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800423e:	f001 fd0f 	bl	8005c60 <vPortYield>
 8004242:	e004      	b.n	800424e <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d001      	beq.n	800424e <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800424a:	f001 fd09 	bl	8005c60 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800424e:	f001 fd29 	bl	8005ca4 <vPortExitCritical>
				return pdPASS;
 8004252:	2301      	movs	r3, #1
 8004254:	e05b      	b.n	800430e <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d103      	bne.n	8004264 <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800425c:	f001 fd22 	bl	8005ca4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004260:	2300      	movs	r3, #0
 8004262:	e054      	b.n	800430e <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004266:	2b00      	cmp	r3, #0
 8004268:	d106      	bne.n	8004278 <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800426a:	2314      	movs	r3, #20
 800426c:	18fb      	adds	r3, r7, r3
 800426e:	0018      	movs	r0, r3
 8004270:	f000 ff94 	bl	800519c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004274:	2301      	movs	r3, #1
 8004276:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004278:	f001 fd14 	bl	8005ca4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800427c:	f000 fd42 	bl	8004d04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004280:	f001 fcfe 	bl	8005c80 <vPortEnterCritical>
 8004284:	6a3b      	ldr	r3, [r7, #32]
 8004286:	2244      	movs	r2, #68	; 0x44
 8004288:	5c9b      	ldrb	r3, [r3, r2]
 800428a:	b25b      	sxtb	r3, r3
 800428c:	3301      	adds	r3, #1
 800428e:	d103      	bne.n	8004298 <xQueueGenericSend+0x10a>
 8004290:	6a3b      	ldr	r3, [r7, #32]
 8004292:	2244      	movs	r2, #68	; 0x44
 8004294:	2100      	movs	r1, #0
 8004296:	5499      	strb	r1, [r3, r2]
 8004298:	6a3b      	ldr	r3, [r7, #32]
 800429a:	2245      	movs	r2, #69	; 0x45
 800429c:	5c9b      	ldrb	r3, [r3, r2]
 800429e:	b25b      	sxtb	r3, r3
 80042a0:	3301      	adds	r3, #1
 80042a2:	d103      	bne.n	80042ac <xQueueGenericSend+0x11e>
 80042a4:	6a3b      	ldr	r3, [r7, #32]
 80042a6:	2245      	movs	r2, #69	; 0x45
 80042a8:	2100      	movs	r1, #0
 80042aa:	5499      	strb	r1, [r3, r2]
 80042ac:	f001 fcfa 	bl	8005ca4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80042b0:	1d3a      	adds	r2, r7, #4
 80042b2:	2314      	movs	r3, #20
 80042b4:	18fb      	adds	r3, r7, r3
 80042b6:	0011      	movs	r1, r2
 80042b8:	0018      	movs	r0, r3
 80042ba:	f000 ff83 	bl	80051c4 <xTaskCheckForTimeOut>
 80042be:	1e03      	subs	r3, r0, #0
 80042c0:	d11e      	bne.n	8004300 <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80042c2:	6a3b      	ldr	r3, [r7, #32]
 80042c4:	0018      	movs	r0, r3
 80042c6:	f000 fab6 	bl	8004836 <prvIsQueueFull>
 80042ca:	1e03      	subs	r3, r0, #0
 80042cc:	d011      	beq.n	80042f2 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80042ce:	6a3b      	ldr	r3, [r7, #32]
 80042d0:	3310      	adds	r3, #16
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	0011      	movs	r1, r2
 80042d6:	0018      	movs	r0, r3
 80042d8:	f000 fec0 	bl	800505c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80042dc:	6a3b      	ldr	r3, [r7, #32]
 80042de:	0018      	movs	r0, r3
 80042e0:	f000 fa35 	bl	800474e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80042e4:	f000 fd1a 	bl	8004d1c <xTaskResumeAll>
 80042e8:	1e03      	subs	r3, r0, #0
 80042ea:	d18a      	bne.n	8004202 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 80042ec:	f001 fcb8 	bl	8005c60 <vPortYield>
 80042f0:	e787      	b.n	8004202 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80042f2:	6a3b      	ldr	r3, [r7, #32]
 80042f4:	0018      	movs	r0, r3
 80042f6:	f000 fa2a 	bl	800474e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80042fa:	f000 fd0f 	bl	8004d1c <xTaskResumeAll>
 80042fe:	e780      	b.n	8004202 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004300:	6a3b      	ldr	r3, [r7, #32]
 8004302:	0018      	movs	r0, r3
 8004304:	f000 fa23 	bl	800474e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004308:	f000 fd08 	bl	8004d1c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800430c:	2300      	movs	r3, #0
		}
	}
}
 800430e:	0018      	movs	r0, r3
 8004310:	46bd      	mov	sp, r7
 8004312:	b00a      	add	sp, #40	; 0x28
 8004314:	bd80      	pop	{r7, pc}

08004316 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004316:	b590      	push	{r4, r7, lr}
 8004318:	b089      	sub	sp, #36	; 0x24
 800431a:	af00      	add	r7, sp, #0
 800431c:	60f8      	str	r0, [r7, #12]
 800431e:	60b9      	str	r1, [r7, #8]
 8004320:	607a      	str	r2, [r7, #4]
 8004322:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 8004328:	69bb      	ldr	r3, [r7, #24]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d101      	bne.n	8004332 <xQueueGenericSendFromISR+0x1c>
 800432e:	b672      	cpsid	i
 8004330:	e7fe      	b.n	8004330 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d103      	bne.n	8004340 <xQueueGenericSendFromISR+0x2a>
 8004338:	69bb      	ldr	r3, [r7, #24]
 800433a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433c:	2b00      	cmp	r3, #0
 800433e:	d101      	bne.n	8004344 <xQueueGenericSendFromISR+0x2e>
 8004340:	2301      	movs	r3, #1
 8004342:	e000      	b.n	8004346 <xQueueGenericSendFromISR+0x30>
 8004344:	2300      	movs	r3, #0
 8004346:	2b00      	cmp	r3, #0
 8004348:	d101      	bne.n	800434e <xQueueGenericSendFromISR+0x38>
 800434a:	b672      	cpsid	i
 800434c:	e7fe      	b.n	800434c <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	2b02      	cmp	r3, #2
 8004352:	d103      	bne.n	800435c <xQueueGenericSendFromISR+0x46>
 8004354:	69bb      	ldr	r3, [r7, #24]
 8004356:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004358:	2b01      	cmp	r3, #1
 800435a:	d101      	bne.n	8004360 <xQueueGenericSendFromISR+0x4a>
 800435c:	2301      	movs	r3, #1
 800435e:	e000      	b.n	8004362 <xQueueGenericSendFromISR+0x4c>
 8004360:	2300      	movs	r3, #0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d101      	bne.n	800436a <xQueueGenericSendFromISR+0x54>
 8004366:	b672      	cpsid	i
 8004368:	e7fe      	b.n	8004368 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800436a:	f001 fcb3 	bl	8005cd4 <ulSetInterruptMaskFromISR>
 800436e:	0003      	movs	r3, r0
 8004370:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004372:	69bb      	ldr	r3, [r7, #24]
 8004374:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004376:	69bb      	ldr	r3, [r7, #24]
 8004378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800437a:	429a      	cmp	r2, r3
 800437c:	d302      	bcc.n	8004384 <xQueueGenericSendFromISR+0x6e>
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	2b02      	cmp	r3, #2
 8004382:	d12e      	bne.n	80043e2 <xQueueGenericSendFromISR+0xcc>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004384:	2413      	movs	r4, #19
 8004386:	193b      	adds	r3, r7, r4
 8004388:	69ba      	ldr	r2, [r7, #24]
 800438a:	2145      	movs	r1, #69	; 0x45
 800438c:	5c52      	ldrb	r2, [r2, r1]
 800438e:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004390:	683a      	ldr	r2, [r7, #0]
 8004392:	68b9      	ldr	r1, [r7, #8]
 8004394:	69bb      	ldr	r3, [r7, #24]
 8004396:	0018      	movs	r0, r3
 8004398:	f000 f948 	bl	800462c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800439c:	193b      	adds	r3, r7, r4
 800439e:	781b      	ldrb	r3, [r3, #0]
 80043a0:	b25b      	sxtb	r3, r3
 80043a2:	3301      	adds	r3, #1
 80043a4:	d111      	bne.n	80043ca <xQueueGenericSendFromISR+0xb4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d016      	beq.n	80043dc <xQueueGenericSendFromISR+0xc6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80043ae:	69bb      	ldr	r3, [r7, #24]
 80043b0:	3324      	adds	r3, #36	; 0x24
 80043b2:	0018      	movs	r0, r3
 80043b4:	f000 fe96 	bl	80050e4 <xTaskRemoveFromEventList>
 80043b8:	1e03      	subs	r3, r0, #0
 80043ba:	d00f      	beq.n	80043dc <xQueueGenericSendFromISR+0xc6>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d00c      	beq.n	80043dc <xQueueGenericSendFromISR+0xc6>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2201      	movs	r2, #1
 80043c6:	601a      	str	r2, [r3, #0]
 80043c8:	e008      	b.n	80043dc <xQueueGenericSendFromISR+0xc6>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80043ca:	2313      	movs	r3, #19
 80043cc:	18fb      	adds	r3, r7, r3
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	3301      	adds	r3, #1
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	b259      	sxtb	r1, r3
 80043d6:	69bb      	ldr	r3, [r7, #24]
 80043d8:	2245      	movs	r2, #69	; 0x45
 80043da:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 80043dc:	2301      	movs	r3, #1
 80043de:	61fb      	str	r3, [r7, #28]
		{
 80043e0:	e001      	b.n	80043e6 <xQueueGenericSendFromISR+0xd0>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80043e2:	2300      	movs	r3, #0
 80043e4:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	0018      	movs	r0, r3
 80043ea:	f001 fc79 	bl	8005ce0 <vClearInterruptMaskFromISR>

	return xReturn;
 80043ee:	69fb      	ldr	r3, [r7, #28]
}
 80043f0:	0018      	movs	r0, r3
 80043f2:	46bd      	mov	sp, r7
 80043f4:	b009      	add	sp, #36	; 0x24
 80043f6:	bd90      	pop	{r4, r7, pc}

080043f8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b088      	sub	sp, #32
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	61bb      	str	r3, [r7, #24]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8004406:	69bb      	ldr	r3, [r7, #24]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d101      	bne.n	8004410 <xQueueGiveFromISR+0x18>
 800440c:	b672      	cpsid	i
 800440e:	e7fe      	b.n	800440e <xQueueGiveFromISR+0x16>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004410:	69bb      	ldr	r3, [r7, #24]
 8004412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004414:	2b00      	cmp	r3, #0
 8004416:	d001      	beq.n	800441c <xQueueGiveFromISR+0x24>
 8004418:	b672      	cpsid	i
 800441a:	e7fe      	b.n	800441a <xQueueGiveFromISR+0x22>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800441c:	69bb      	ldr	r3, [r7, #24]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d103      	bne.n	800442c <xQueueGiveFromISR+0x34>
 8004424:	69bb      	ldr	r3, [r7, #24]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d101      	bne.n	8004430 <xQueueGiveFromISR+0x38>
 800442c:	2301      	movs	r3, #1
 800442e:	e000      	b.n	8004432 <xQueueGiveFromISR+0x3a>
 8004430:	2300      	movs	r3, #0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d101      	bne.n	800443a <xQueueGiveFromISR+0x42>
 8004436:	b672      	cpsid	i
 8004438:	e7fe      	b.n	8004438 <xQueueGiveFromISR+0x40>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800443a:	f001 fc4b 	bl	8005cd4 <ulSetInterruptMaskFromISR>
 800443e:	0003      	movs	r3, r0
 8004440:	617b      	str	r3, [r7, #20]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004442:	69bb      	ldr	r3, [r7, #24]
 8004444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004446:	613b      	str	r3, [r7, #16]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004448:	69bb      	ldr	r3, [r7, #24]
 800444a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800444c:	693a      	ldr	r2, [r7, #16]
 800444e:	429a      	cmp	r2, r3
 8004450:	d22c      	bcs.n	80044ac <xQueueGiveFromISR+0xb4>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004452:	200f      	movs	r0, #15
 8004454:	183b      	adds	r3, r7, r0
 8004456:	69ba      	ldr	r2, [r7, #24]
 8004458:	2145      	movs	r1, #69	; 0x45
 800445a:	5c52      	ldrb	r2, [r2, r1]
 800445c:	701a      	strb	r2, [r3, #0]
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	1c5a      	adds	r2, r3, #1
 8004462:	69bb      	ldr	r3, [r7, #24]
 8004464:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004466:	183b      	adds	r3, r7, r0
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	b25b      	sxtb	r3, r3
 800446c:	3301      	adds	r3, #1
 800446e:	d111      	bne.n	8004494 <xQueueGiveFromISR+0x9c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004470:	69bb      	ldr	r3, [r7, #24]
 8004472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004474:	2b00      	cmp	r3, #0
 8004476:	d016      	beq.n	80044a6 <xQueueGiveFromISR+0xae>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004478:	69bb      	ldr	r3, [r7, #24]
 800447a:	3324      	adds	r3, #36	; 0x24
 800447c:	0018      	movs	r0, r3
 800447e:	f000 fe31 	bl	80050e4 <xTaskRemoveFromEventList>
 8004482:	1e03      	subs	r3, r0, #0
 8004484:	d00f      	beq.n	80044a6 <xQueueGiveFromISR+0xae>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d00c      	beq.n	80044a6 <xQueueGiveFromISR+0xae>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	2201      	movs	r2, #1
 8004490:	601a      	str	r2, [r3, #0]
 8004492:	e008      	b.n	80044a6 <xQueueGiveFromISR+0xae>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004494:	230f      	movs	r3, #15
 8004496:	18fb      	adds	r3, r7, r3
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	3301      	adds	r3, #1
 800449c:	b2db      	uxtb	r3, r3
 800449e:	b259      	sxtb	r1, r3
 80044a0:	69bb      	ldr	r3, [r7, #24]
 80044a2:	2245      	movs	r2, #69	; 0x45
 80044a4:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 80044a6:	2301      	movs	r3, #1
 80044a8:	61fb      	str	r3, [r7, #28]
 80044aa:	e001      	b.n	80044b0 <xQueueGiveFromISR+0xb8>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80044ac:	2300      	movs	r3, #0
 80044ae:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	0018      	movs	r0, r3
 80044b4:	f001 fc14 	bl	8005ce0 <vClearInterruptMaskFromISR>

	return xReturn;
 80044b8:	69fb      	ldr	r3, [r7, #28]
}
 80044ba:	0018      	movs	r0, r3
 80044bc:	46bd      	mov	sp, r7
 80044be:	b008      	add	sp, #32
 80044c0:	bd80      	pop	{r7, pc}

080044c2 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80044c2:	b580      	push	{r7, lr}
 80044c4:	b08a      	sub	sp, #40	; 0x28
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	60f8      	str	r0, [r7, #12]
 80044ca:	60b9      	str	r1, [r7, #8]
 80044cc:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80044ce:	2300      	movs	r3, #0
 80044d0:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80044d6:	6a3b      	ldr	r3, [r7, #32]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d101      	bne.n	80044e0 <xQueueReceive+0x1e>
 80044dc:	b672      	cpsid	i
 80044de:	e7fe      	b.n	80044de <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d103      	bne.n	80044ee <xQueueReceive+0x2c>
 80044e6:	6a3b      	ldr	r3, [r7, #32]
 80044e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d101      	bne.n	80044f2 <xQueueReceive+0x30>
 80044ee:	2301      	movs	r3, #1
 80044f0:	e000      	b.n	80044f4 <xQueueReceive+0x32>
 80044f2:	2300      	movs	r3, #0
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d101      	bne.n	80044fc <xQueueReceive+0x3a>
 80044f8:	b672      	cpsid	i
 80044fa:	e7fe      	b.n	80044fa <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80044fc:	f000 ff8a 	bl	8005414 <xTaskGetSchedulerState>
 8004500:	1e03      	subs	r3, r0, #0
 8004502:	d102      	bne.n	800450a <xQueueReceive+0x48>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d101      	bne.n	800450e <xQueueReceive+0x4c>
 800450a:	2301      	movs	r3, #1
 800450c:	e000      	b.n	8004510 <xQueueReceive+0x4e>
 800450e:	2300      	movs	r3, #0
 8004510:	2b00      	cmp	r3, #0
 8004512:	d101      	bne.n	8004518 <xQueueReceive+0x56>
 8004514:	b672      	cpsid	i
 8004516:	e7fe      	b.n	8004516 <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004518:	f001 fbb2 	bl	8005c80 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800451c:	6a3b      	ldr	r3, [r7, #32]
 800451e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004520:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d01a      	beq.n	800455e <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004528:	68ba      	ldr	r2, [r7, #8]
 800452a:	6a3b      	ldr	r3, [r7, #32]
 800452c:	0011      	movs	r1, r2
 800452e:	0018      	movs	r0, r3
 8004530:	f000 f8e7 	bl	8004702 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004534:	69fb      	ldr	r3, [r7, #28]
 8004536:	1e5a      	subs	r2, r3, #1
 8004538:	6a3b      	ldr	r3, [r7, #32]
 800453a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800453c:	6a3b      	ldr	r3, [r7, #32]
 800453e:	691b      	ldr	r3, [r3, #16]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d008      	beq.n	8004556 <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004544:	6a3b      	ldr	r3, [r7, #32]
 8004546:	3310      	adds	r3, #16
 8004548:	0018      	movs	r0, r3
 800454a:	f000 fdcb 	bl	80050e4 <xTaskRemoveFromEventList>
 800454e:	1e03      	subs	r3, r0, #0
 8004550:	d001      	beq.n	8004556 <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004552:	f001 fb85 	bl	8005c60 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004556:	f001 fba5 	bl	8005ca4 <vPortExitCritical>
				return pdPASS;
 800455a:	2301      	movs	r3, #1
 800455c:	e062      	b.n	8004624 <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d103      	bne.n	800456c <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004564:	f001 fb9e 	bl	8005ca4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004568:	2300      	movs	r3, #0
 800456a:	e05b      	b.n	8004624 <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 800456c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456e:	2b00      	cmp	r3, #0
 8004570:	d106      	bne.n	8004580 <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004572:	2314      	movs	r3, #20
 8004574:	18fb      	adds	r3, r7, r3
 8004576:	0018      	movs	r0, r3
 8004578:	f000 fe10 	bl	800519c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800457c:	2301      	movs	r3, #1
 800457e:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004580:	f001 fb90 	bl	8005ca4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004584:	f000 fbbe 	bl	8004d04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004588:	f001 fb7a 	bl	8005c80 <vPortEnterCritical>
 800458c:	6a3b      	ldr	r3, [r7, #32]
 800458e:	2244      	movs	r2, #68	; 0x44
 8004590:	5c9b      	ldrb	r3, [r3, r2]
 8004592:	b25b      	sxtb	r3, r3
 8004594:	3301      	adds	r3, #1
 8004596:	d103      	bne.n	80045a0 <xQueueReceive+0xde>
 8004598:	6a3b      	ldr	r3, [r7, #32]
 800459a:	2244      	movs	r2, #68	; 0x44
 800459c:	2100      	movs	r1, #0
 800459e:	5499      	strb	r1, [r3, r2]
 80045a0:	6a3b      	ldr	r3, [r7, #32]
 80045a2:	2245      	movs	r2, #69	; 0x45
 80045a4:	5c9b      	ldrb	r3, [r3, r2]
 80045a6:	b25b      	sxtb	r3, r3
 80045a8:	3301      	adds	r3, #1
 80045aa:	d103      	bne.n	80045b4 <xQueueReceive+0xf2>
 80045ac:	6a3b      	ldr	r3, [r7, #32]
 80045ae:	2245      	movs	r2, #69	; 0x45
 80045b0:	2100      	movs	r1, #0
 80045b2:	5499      	strb	r1, [r3, r2]
 80045b4:	f001 fb76 	bl	8005ca4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80045b8:	1d3a      	adds	r2, r7, #4
 80045ba:	2314      	movs	r3, #20
 80045bc:	18fb      	adds	r3, r7, r3
 80045be:	0011      	movs	r1, r2
 80045c0:	0018      	movs	r0, r3
 80045c2:	f000 fdff 	bl	80051c4 <xTaskCheckForTimeOut>
 80045c6:	1e03      	subs	r3, r0, #0
 80045c8:	d11e      	bne.n	8004608 <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80045ca:	6a3b      	ldr	r3, [r7, #32]
 80045cc:	0018      	movs	r0, r3
 80045ce:	f000 f91c 	bl	800480a <prvIsQueueEmpty>
 80045d2:	1e03      	subs	r3, r0, #0
 80045d4:	d011      	beq.n	80045fa <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80045d6:	6a3b      	ldr	r3, [r7, #32]
 80045d8:	3324      	adds	r3, #36	; 0x24
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	0011      	movs	r1, r2
 80045de:	0018      	movs	r0, r3
 80045e0:	f000 fd3c 	bl	800505c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80045e4:	6a3b      	ldr	r3, [r7, #32]
 80045e6:	0018      	movs	r0, r3
 80045e8:	f000 f8b1 	bl	800474e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80045ec:	f000 fb96 	bl	8004d1c <xTaskResumeAll>
 80045f0:	1e03      	subs	r3, r0, #0
 80045f2:	d191      	bne.n	8004518 <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 80045f4:	f001 fb34 	bl	8005c60 <vPortYield>
 80045f8:	e78e      	b.n	8004518 <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80045fa:	6a3b      	ldr	r3, [r7, #32]
 80045fc:	0018      	movs	r0, r3
 80045fe:	f000 f8a6 	bl	800474e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004602:	f000 fb8b 	bl	8004d1c <xTaskResumeAll>
 8004606:	e787      	b.n	8004518 <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004608:	6a3b      	ldr	r3, [r7, #32]
 800460a:	0018      	movs	r0, r3
 800460c:	f000 f89f 	bl	800474e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004610:	f000 fb84 	bl	8004d1c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004614:	6a3b      	ldr	r3, [r7, #32]
 8004616:	0018      	movs	r0, r3
 8004618:	f000 f8f7 	bl	800480a <prvIsQueueEmpty>
 800461c:	1e03      	subs	r3, r0, #0
 800461e:	d100      	bne.n	8004622 <xQueueReceive+0x160>
 8004620:	e77a      	b.n	8004518 <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004622:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004624:	0018      	movs	r0, r3
 8004626:	46bd      	mov	sp, r7
 8004628:	b00a      	add	sp, #40	; 0x28
 800462a:	bd80      	pop	{r7, pc}

0800462c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b086      	sub	sp, #24
 8004630:	af00      	add	r7, sp, #0
 8004632:	60f8      	str	r0, [r7, #12]
 8004634:	60b9      	str	r1, [r7, #8]
 8004636:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004638:	2300      	movs	r3, #0
 800463a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004640:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004646:	2b00      	cmp	r3, #0
 8004648:	d10e      	bne.n	8004668 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d14e      	bne.n	80046f0 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	0018      	movs	r0, r3
 8004658:	f000 fef8 	bl	800544c <xTaskPriorityDisinherit>
 800465c:	0003      	movs	r3, r0
 800465e:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2200      	movs	r2, #0
 8004664:	605a      	str	r2, [r3, #4]
 8004666:	e043      	b.n	80046f0 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d119      	bne.n	80046a2 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	6898      	ldr	r0, [r3, #8]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	0019      	movs	r1, r3
 800467a:	f001 ffbf 	bl	80065fc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	689a      	ldr	r2, [r3, #8]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004686:	18d2      	adds	r2, r2, r3
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	689a      	ldr	r2, [r3, #8]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	429a      	cmp	r2, r3
 8004696:	d32b      	bcc.n	80046f0 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	609a      	str	r2, [r3, #8]
 80046a0:	e026      	b.n	80046f0 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	68d8      	ldr	r0, [r3, #12]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	0019      	movs	r1, r3
 80046ae:	f001 ffa5 	bl	80065fc <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	68da      	ldr	r2, [r3, #12]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ba:	425b      	negs	r3, r3
 80046bc:	18d2      	adds	r2, r2, r3
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	68da      	ldr	r2, [r3, #12]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d207      	bcs.n	80046de <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	685a      	ldr	r2, [r3, #4]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d6:	425b      	negs	r3, r3
 80046d8:	18d2      	adds	r2, r2, r3
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2b02      	cmp	r3, #2
 80046e2:	d105      	bne.n	80046f0 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d002      	beq.n	80046f0 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	3b01      	subs	r3, #1
 80046ee:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	1c5a      	adds	r2, r3, #1
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80046f8:	697b      	ldr	r3, [r7, #20]
}
 80046fa:	0018      	movs	r0, r3
 80046fc:	46bd      	mov	sp, r7
 80046fe:	b006      	add	sp, #24
 8004700:	bd80      	pop	{r7, pc}

08004702 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004702:	b580      	push	{r7, lr}
 8004704:	b082      	sub	sp, #8
 8004706:	af00      	add	r7, sp, #0
 8004708:	6078      	str	r0, [r7, #4]
 800470a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004710:	2b00      	cmp	r3, #0
 8004712:	d018      	beq.n	8004746 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	68da      	ldr	r2, [r3, #12]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471c:	18d2      	adds	r2, r2, r3
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	68da      	ldr	r2, [r3, #12]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	429a      	cmp	r2, r3
 800472c:	d303      	bcc.n	8004736 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	68d9      	ldr	r1, [r3, #12]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	0018      	movs	r0, r3
 8004742:	f001 ff5b 	bl	80065fc <memcpy>
	}
}
 8004746:	46c0      	nop			; (mov r8, r8)
 8004748:	46bd      	mov	sp, r7
 800474a:	b002      	add	sp, #8
 800474c:	bd80      	pop	{r7, pc}

0800474e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800474e:	b580      	push	{r7, lr}
 8004750:	b084      	sub	sp, #16
 8004752:	af00      	add	r7, sp, #0
 8004754:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004756:	f001 fa93 	bl	8005c80 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800475a:	230f      	movs	r3, #15
 800475c:	18fb      	adds	r3, r7, r3
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	2145      	movs	r1, #69	; 0x45
 8004762:	5c52      	ldrb	r2, [r2, r1]
 8004764:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004766:	e013      	b.n	8004790 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476c:	2b00      	cmp	r3, #0
 800476e:	d016      	beq.n	800479e <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	3324      	adds	r3, #36	; 0x24
 8004774:	0018      	movs	r0, r3
 8004776:	f000 fcb5 	bl	80050e4 <xTaskRemoveFromEventList>
 800477a:	1e03      	subs	r3, r0, #0
 800477c:	d001      	beq.n	8004782 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800477e:	f000 fd71 	bl	8005264 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004782:	210f      	movs	r1, #15
 8004784:	187b      	adds	r3, r7, r1
 8004786:	781b      	ldrb	r3, [r3, #0]
 8004788:	3b01      	subs	r3, #1
 800478a:	b2da      	uxtb	r2, r3
 800478c:	187b      	adds	r3, r7, r1
 800478e:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004790:	230f      	movs	r3, #15
 8004792:	18fb      	adds	r3, r7, r3
 8004794:	781b      	ldrb	r3, [r3, #0]
 8004796:	b25b      	sxtb	r3, r3
 8004798:	2b00      	cmp	r3, #0
 800479a:	dce5      	bgt.n	8004768 <prvUnlockQueue+0x1a>
 800479c:	e000      	b.n	80047a0 <prvUnlockQueue+0x52>
					break;
 800479e:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2245      	movs	r2, #69	; 0x45
 80047a4:	21ff      	movs	r1, #255	; 0xff
 80047a6:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 80047a8:	f001 fa7c 	bl	8005ca4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80047ac:	f001 fa68 	bl	8005c80 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80047b0:	230e      	movs	r3, #14
 80047b2:	18fb      	adds	r3, r7, r3
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	2144      	movs	r1, #68	; 0x44
 80047b8:	5c52      	ldrb	r2, [r2, r1]
 80047ba:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80047bc:	e013      	b.n	80047e6 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	691b      	ldr	r3, [r3, #16]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d016      	beq.n	80047f4 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	3310      	adds	r3, #16
 80047ca:	0018      	movs	r0, r3
 80047cc:	f000 fc8a 	bl	80050e4 <xTaskRemoveFromEventList>
 80047d0:	1e03      	subs	r3, r0, #0
 80047d2:	d001      	beq.n	80047d8 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 80047d4:	f000 fd46 	bl	8005264 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80047d8:	210e      	movs	r1, #14
 80047da:	187b      	adds	r3, r7, r1
 80047dc:	781b      	ldrb	r3, [r3, #0]
 80047de:	3b01      	subs	r3, #1
 80047e0:	b2da      	uxtb	r2, r3
 80047e2:	187b      	adds	r3, r7, r1
 80047e4:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80047e6:	230e      	movs	r3, #14
 80047e8:	18fb      	adds	r3, r7, r3
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	b25b      	sxtb	r3, r3
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	dce5      	bgt.n	80047be <prvUnlockQueue+0x70>
 80047f2:	e000      	b.n	80047f6 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 80047f4:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2244      	movs	r2, #68	; 0x44
 80047fa:	21ff      	movs	r1, #255	; 0xff
 80047fc:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 80047fe:	f001 fa51 	bl	8005ca4 <vPortExitCritical>
}
 8004802:	46c0      	nop			; (mov r8, r8)
 8004804:	46bd      	mov	sp, r7
 8004806:	b004      	add	sp, #16
 8004808:	bd80      	pop	{r7, pc}

0800480a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800480a:	b580      	push	{r7, lr}
 800480c:	b084      	sub	sp, #16
 800480e:	af00      	add	r7, sp, #0
 8004810:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004812:	f001 fa35 	bl	8005c80 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800481a:	2b00      	cmp	r3, #0
 800481c:	d102      	bne.n	8004824 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800481e:	2301      	movs	r3, #1
 8004820:	60fb      	str	r3, [r7, #12]
 8004822:	e001      	b.n	8004828 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004824:	2300      	movs	r3, #0
 8004826:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004828:	f001 fa3c 	bl	8005ca4 <vPortExitCritical>

	return xReturn;
 800482c:	68fb      	ldr	r3, [r7, #12]
}
 800482e:	0018      	movs	r0, r3
 8004830:	46bd      	mov	sp, r7
 8004832:	b004      	add	sp, #16
 8004834:	bd80      	pop	{r7, pc}

08004836 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004836:	b580      	push	{r7, lr}
 8004838:	b084      	sub	sp, #16
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800483e:	f001 fa1f 	bl	8005c80 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800484a:	429a      	cmp	r2, r3
 800484c:	d102      	bne.n	8004854 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800484e:	2301      	movs	r3, #1
 8004850:	60fb      	str	r3, [r7, #12]
 8004852:	e001      	b.n	8004858 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004854:	2300      	movs	r3, #0
 8004856:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004858:	f001 fa24 	bl	8005ca4 <vPortExitCritical>

	return xReturn;
 800485c:	68fb      	ldr	r3, [r7, #12]
}
 800485e:	0018      	movs	r0, r3
 8004860:	46bd      	mov	sp, r7
 8004862:	b004      	add	sp, #16
 8004864:	bd80      	pop	{r7, pc}
	...

08004868 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004868:	b580      	push	{r7, lr}
 800486a:	b084      	sub	sp, #16
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004872:	2300      	movs	r3, #0
 8004874:	60fb      	str	r3, [r7, #12]
 8004876:	e015      	b.n	80048a4 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004878:	4b0e      	ldr	r3, [pc, #56]	; (80048b4 <vQueueAddToRegistry+0x4c>)
 800487a:	68fa      	ldr	r2, [r7, #12]
 800487c:	00d2      	lsls	r2, r2, #3
 800487e:	58d3      	ldr	r3, [r2, r3]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d10c      	bne.n	800489e <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004884:	4b0b      	ldr	r3, [pc, #44]	; (80048b4 <vQueueAddToRegistry+0x4c>)
 8004886:	68fa      	ldr	r2, [r7, #12]
 8004888:	00d2      	lsls	r2, r2, #3
 800488a:	6839      	ldr	r1, [r7, #0]
 800488c:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800488e:	4a09      	ldr	r2, [pc, #36]	; (80048b4 <vQueueAddToRegistry+0x4c>)
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	00db      	lsls	r3, r3, #3
 8004894:	18d3      	adds	r3, r2, r3
 8004896:	3304      	adds	r3, #4
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800489c:	e006      	b.n	80048ac <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	3301      	adds	r3, #1
 80048a2:	60fb      	str	r3, [r7, #12]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2b07      	cmp	r3, #7
 80048a8:	d9e6      	bls.n	8004878 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80048aa:	46c0      	nop			; (mov r8, r8)
 80048ac:	46c0      	nop			; (mov r8, r8)
 80048ae:	46bd      	mov	sp, r7
 80048b0:	b004      	add	sp, #16
 80048b2:	bd80      	pop	{r7, pc}
 80048b4:	20002340 	.word	0x20002340

080048b8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b086      	sub	sp, #24
 80048bc:	af00      	add	r7, sp, #0
 80048be:	60f8      	str	r0, [r7, #12]
 80048c0:	60b9      	str	r1, [r7, #8]
 80048c2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80048c8:	f001 f9da 	bl	8005c80 <vPortEnterCritical>
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	2244      	movs	r2, #68	; 0x44
 80048d0:	5c9b      	ldrb	r3, [r3, r2]
 80048d2:	b25b      	sxtb	r3, r3
 80048d4:	3301      	adds	r3, #1
 80048d6:	d103      	bne.n	80048e0 <vQueueWaitForMessageRestricted+0x28>
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	2244      	movs	r2, #68	; 0x44
 80048dc:	2100      	movs	r1, #0
 80048de:	5499      	strb	r1, [r3, r2]
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	2245      	movs	r2, #69	; 0x45
 80048e4:	5c9b      	ldrb	r3, [r3, r2]
 80048e6:	b25b      	sxtb	r3, r3
 80048e8:	3301      	adds	r3, #1
 80048ea:	d103      	bne.n	80048f4 <vQueueWaitForMessageRestricted+0x3c>
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	2245      	movs	r2, #69	; 0x45
 80048f0:	2100      	movs	r1, #0
 80048f2:	5499      	strb	r1, [r3, r2]
 80048f4:	f001 f9d6 	bl	8005ca4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d106      	bne.n	800490e <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	3324      	adds	r3, #36	; 0x24
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	68b9      	ldr	r1, [r7, #8]
 8004908:	0018      	movs	r0, r3
 800490a:	f000 fbc5 	bl	8005098 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	0018      	movs	r0, r3
 8004912:	f7ff ff1c 	bl	800474e <prvUnlockQueue>
	}
 8004916:	46c0      	nop			; (mov r8, r8)
 8004918:	46bd      	mov	sp, r7
 800491a:	b006      	add	sp, #24
 800491c:	bd80      	pop	{r7, pc}

0800491e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800491e:	b590      	push	{r4, r7, lr}
 8004920:	b08d      	sub	sp, #52	; 0x34
 8004922:	af04      	add	r7, sp, #16
 8004924:	60f8      	str	r0, [r7, #12]
 8004926:	60b9      	str	r1, [r7, #8]
 8004928:	607a      	str	r2, [r7, #4]
 800492a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800492c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800492e:	2b00      	cmp	r3, #0
 8004930:	d101      	bne.n	8004936 <xTaskCreateStatic+0x18>
 8004932:	b672      	cpsid	i
 8004934:	e7fe      	b.n	8004934 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 8004936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004938:	2b00      	cmp	r3, #0
 800493a:	d101      	bne.n	8004940 <xTaskCreateStatic+0x22>
 800493c:	b672      	cpsid	i
 800493e:	e7fe      	b.n	800493e <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004940:	235c      	movs	r3, #92	; 0x5c
 8004942:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	2b5c      	cmp	r3, #92	; 0x5c
 8004948:	d001      	beq.n	800494e <xTaskCreateStatic+0x30>
 800494a:	b672      	cpsid	i
 800494c:	e7fe      	b.n	800494c <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800494e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004950:	2b00      	cmp	r3, #0
 8004952:	d020      	beq.n	8004996 <xTaskCreateStatic+0x78>
 8004954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004956:	2b00      	cmp	r3, #0
 8004958:	d01d      	beq.n	8004996 <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800495a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800495c:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800495e:	69fb      	ldr	r3, [r7, #28]
 8004960:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004962:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004964:	69fb      	ldr	r3, [r7, #28]
 8004966:	2259      	movs	r2, #89	; 0x59
 8004968:	2102      	movs	r1, #2
 800496a:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800496c:	683c      	ldr	r4, [r7, #0]
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	68b9      	ldr	r1, [r7, #8]
 8004972:	68f8      	ldr	r0, [r7, #12]
 8004974:	2300      	movs	r3, #0
 8004976:	9303      	str	r3, [sp, #12]
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	9302      	str	r3, [sp, #8]
 800497c:	2318      	movs	r3, #24
 800497e:	18fb      	adds	r3, r7, r3
 8004980:	9301      	str	r3, [sp, #4]
 8004982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004984:	9300      	str	r3, [sp, #0]
 8004986:	0023      	movs	r3, r4
 8004988:	f000 f858 	bl	8004a3c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800498c:	69fb      	ldr	r3, [r7, #28]
 800498e:	0018      	movs	r0, r3
 8004990:	f000 f8d6 	bl	8004b40 <prvAddNewTaskToReadyList>
 8004994:	e001      	b.n	800499a <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 8004996:	2300      	movs	r3, #0
 8004998:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800499a:	69bb      	ldr	r3, [r7, #24]
	}
 800499c:	0018      	movs	r0, r3
 800499e:	46bd      	mov	sp, r7
 80049a0:	b009      	add	sp, #36	; 0x24
 80049a2:	bd90      	pop	{r4, r7, pc}

080049a4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80049a4:	b590      	push	{r4, r7, lr}
 80049a6:	b08d      	sub	sp, #52	; 0x34
 80049a8:	af04      	add	r7, sp, #16
 80049aa:	60f8      	str	r0, [r7, #12]
 80049ac:	60b9      	str	r1, [r7, #8]
 80049ae:	603b      	str	r3, [r7, #0]
 80049b0:	1dbb      	adds	r3, r7, #6
 80049b2:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049b4:	1dbb      	adds	r3, r7, #6
 80049b6:	881b      	ldrh	r3, [r3, #0]
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	0018      	movs	r0, r3
 80049bc:	f001 f9f8 	bl	8005db0 <pvPortMalloc>
 80049c0:	0003      	movs	r3, r0
 80049c2:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d010      	beq.n	80049ec <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80049ca:	205c      	movs	r0, #92	; 0x5c
 80049cc:	f001 f9f0 	bl	8005db0 <pvPortMalloc>
 80049d0:	0003      	movs	r3, r0
 80049d2:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 80049d4:	69fb      	ldr	r3, [r7, #28]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d003      	beq.n	80049e2 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	697a      	ldr	r2, [r7, #20]
 80049de:	631a      	str	r2, [r3, #48]	; 0x30
 80049e0:	e006      	b.n	80049f0 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	0018      	movs	r0, r3
 80049e6:	f001 fa89 	bl	8005efc <vPortFree>
 80049ea:	e001      	b.n	80049f0 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80049ec:	2300      	movs	r3, #0
 80049ee:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80049f0:	69fb      	ldr	r3, [r7, #28]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d01a      	beq.n	8004a2c <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	2259      	movs	r2, #89	; 0x59
 80049fa:	2100      	movs	r1, #0
 80049fc:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80049fe:	1dbb      	adds	r3, r7, #6
 8004a00:	881a      	ldrh	r2, [r3, #0]
 8004a02:	683c      	ldr	r4, [r7, #0]
 8004a04:	68b9      	ldr	r1, [r7, #8]
 8004a06:	68f8      	ldr	r0, [r7, #12]
 8004a08:	2300      	movs	r3, #0
 8004a0a:	9303      	str	r3, [sp, #12]
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	9302      	str	r3, [sp, #8]
 8004a10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a12:	9301      	str	r3, [sp, #4]
 8004a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a16:	9300      	str	r3, [sp, #0]
 8004a18:	0023      	movs	r3, r4
 8004a1a:	f000 f80f 	bl	8004a3c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004a1e:	69fb      	ldr	r3, [r7, #28]
 8004a20:	0018      	movs	r0, r3
 8004a22:	f000 f88d 	bl	8004b40 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004a26:	2301      	movs	r3, #1
 8004a28:	61bb      	str	r3, [r7, #24]
 8004a2a:	e002      	b.n	8004a32 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	425b      	negs	r3, r3
 8004a30:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004a32:	69bb      	ldr	r3, [r7, #24]
	}
 8004a34:	0018      	movs	r0, r3
 8004a36:	46bd      	mov	sp, r7
 8004a38:	b009      	add	sp, #36	; 0x24
 8004a3a:	bd90      	pop	{r4, r7, pc}

08004a3c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b086      	sub	sp, #24
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	60f8      	str	r0, [r7, #12]
 8004a44:	60b9      	str	r1, [r7, #8]
 8004a46:	607a      	str	r2, [r7, #4]
 8004a48:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a4c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	001a      	movs	r2, r3
 8004a54:	21a5      	movs	r1, #165	; 0xa5
 8004a56:	f001 fdda 	bl	800660e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4936      	ldr	r1, [pc, #216]	; (8004b3c <prvInitialiseNewTask+0x100>)
 8004a62:	468c      	mov	ip, r1
 8004a64:	4463      	add	r3, ip
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	18d3      	adds	r3, r2, r3
 8004a6a:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	2207      	movs	r2, #7
 8004a70:	4393      	bics	r3, r2
 8004a72:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	2207      	movs	r2, #7
 8004a78:	4013      	ands	r3, r2
 8004a7a:	d001      	beq.n	8004a80 <prvInitialiseNewTask+0x44>
 8004a7c:	b672      	cpsid	i
 8004a7e:	e7fe      	b.n	8004a7e <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004a80:	2300      	movs	r3, #0
 8004a82:	617b      	str	r3, [r7, #20]
 8004a84:	e013      	b.n	8004aae <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004a86:	68ba      	ldr	r2, [r7, #8]
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	18d3      	adds	r3, r2, r3
 8004a8c:	7818      	ldrb	r0, [r3, #0]
 8004a8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a90:	2134      	movs	r1, #52	; 0x34
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	18d3      	adds	r3, r2, r3
 8004a96:	185b      	adds	r3, r3, r1
 8004a98:	1c02      	adds	r2, r0, #0
 8004a9a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004a9c:	68ba      	ldr	r2, [r7, #8]
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	18d3      	adds	r3, r2, r3
 8004aa2:	781b      	ldrb	r3, [r3, #0]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d006      	beq.n	8004ab6 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	3301      	adds	r3, #1
 8004aac:	617b      	str	r3, [r7, #20]
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	2b0f      	cmp	r3, #15
 8004ab2:	d9e8      	bls.n	8004a86 <prvInitialiseNewTask+0x4a>
 8004ab4:	e000      	b.n	8004ab8 <prvInitialiseNewTask+0x7c>
		{
			break;
 8004ab6:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aba:	2243      	movs	r2, #67	; 0x43
 8004abc:	2100      	movs	r1, #0
 8004abe:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004ac0:	6a3b      	ldr	r3, [r7, #32]
 8004ac2:	2b37      	cmp	r3, #55	; 0x37
 8004ac4:	d901      	bls.n	8004aca <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004ac6:	2337      	movs	r3, #55	; 0x37
 8004ac8:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004acc:	6a3a      	ldr	r2, [r7, #32]
 8004ace:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad2:	6a3a      	ldr	r2, [r7, #32]
 8004ad4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad8:	2200      	movs	r2, #0
 8004ada:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ade:	3304      	adds	r3, #4
 8004ae0:	0018      	movs	r0, r3
 8004ae2:	f7ff f9cd 	bl	8003e80 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae8:	3318      	adds	r3, #24
 8004aea:	0018      	movs	r0, r3
 8004aec:	f7ff f9c8 	bl	8003e80 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004af4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004af6:	6a3b      	ldr	r3, [r7, #32]
 8004af8:	2238      	movs	r2, #56	; 0x38
 8004afa:	1ad2      	subs	r2, r2, r3
 8004afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004afe:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b04:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b08:	2200      	movs	r2, #0
 8004b0a:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b0e:	2258      	movs	r2, #88	; 0x58
 8004b10:	2100      	movs	r1, #0
 8004b12:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004b14:	683a      	ldr	r2, [r7, #0]
 8004b16:	68f9      	ldr	r1, [r7, #12]
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	0018      	movs	r0, r3
 8004b1c:	f001 f816 	bl	8005b4c <pxPortInitialiseStack>
 8004b20:	0002      	movs	r2, r0
 8004b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b24:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d002      	beq.n	8004b32 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b30:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b32:	46c0      	nop			; (mov r8, r8)
 8004b34:	46bd      	mov	sp, r7
 8004b36:	b006      	add	sp, #24
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	46c0      	nop			; (mov r8, r8)
 8004b3c:	3fffffff 	.word	0x3fffffff

08004b40 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b082      	sub	sp, #8
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004b48:	f001 f89a 	bl	8005c80 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004b4c:	4b2a      	ldr	r3, [pc, #168]	; (8004bf8 <prvAddNewTaskToReadyList+0xb8>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	1c5a      	adds	r2, r3, #1
 8004b52:	4b29      	ldr	r3, [pc, #164]	; (8004bf8 <prvAddNewTaskToReadyList+0xb8>)
 8004b54:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8004b56:	4b29      	ldr	r3, [pc, #164]	; (8004bfc <prvAddNewTaskToReadyList+0xbc>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d109      	bne.n	8004b72 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004b5e:	4b27      	ldr	r3, [pc, #156]	; (8004bfc <prvAddNewTaskToReadyList+0xbc>)
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004b64:	4b24      	ldr	r3, [pc, #144]	; (8004bf8 <prvAddNewTaskToReadyList+0xb8>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d110      	bne.n	8004b8e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004b6c:	f000 fb94 	bl	8005298 <prvInitialiseTaskLists>
 8004b70:	e00d      	b.n	8004b8e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004b72:	4b23      	ldr	r3, [pc, #140]	; (8004c00 <prvAddNewTaskToReadyList+0xc0>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d109      	bne.n	8004b8e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004b7a:	4b20      	ldr	r3, [pc, #128]	; (8004bfc <prvAddNewTaskToReadyList+0xbc>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d802      	bhi.n	8004b8e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004b88:	4b1c      	ldr	r3, [pc, #112]	; (8004bfc <prvAddNewTaskToReadyList+0xbc>)
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004b8e:	4b1d      	ldr	r3, [pc, #116]	; (8004c04 <prvAddNewTaskToReadyList+0xc4>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	1c5a      	adds	r2, r3, #1
 8004b94:	4b1b      	ldr	r3, [pc, #108]	; (8004c04 <prvAddNewTaskToReadyList+0xc4>)
 8004b96:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004b98:	4b1a      	ldr	r3, [pc, #104]	; (8004c04 <prvAddNewTaskToReadyList+0xc4>)
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ba4:	4b18      	ldr	r3, [pc, #96]	; (8004c08 <prvAddNewTaskToReadyList+0xc8>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d903      	bls.n	8004bb4 <prvAddNewTaskToReadyList+0x74>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bb0:	4b15      	ldr	r3, [pc, #84]	; (8004c08 <prvAddNewTaskToReadyList+0xc8>)
 8004bb2:	601a      	str	r2, [r3, #0]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bb8:	0013      	movs	r3, r2
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	189b      	adds	r3, r3, r2
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	4a12      	ldr	r2, [pc, #72]	; (8004c0c <prvAddNewTaskToReadyList+0xcc>)
 8004bc2:	189a      	adds	r2, r3, r2
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	3304      	adds	r3, #4
 8004bc8:	0019      	movs	r1, r3
 8004bca:	0010      	movs	r0, r2
 8004bcc:	f7ff f963 	bl	8003e96 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004bd0:	f001 f868 	bl	8005ca4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004bd4:	4b0a      	ldr	r3, [pc, #40]	; (8004c00 <prvAddNewTaskToReadyList+0xc0>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d008      	beq.n	8004bee <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004bdc:	4b07      	ldr	r3, [pc, #28]	; (8004bfc <prvAddNewTaskToReadyList+0xbc>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d201      	bcs.n	8004bee <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004bea:	f001 f839 	bl	8005c60 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004bee:	46c0      	nop			; (mov r8, r8)
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	b002      	add	sp, #8
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	46c0      	nop			; (mov r8, r8)
 8004bf8:	20000bc4 	.word	0x20000bc4
 8004bfc:	200006f0 	.word	0x200006f0
 8004c00:	20000bd0 	.word	0x20000bd0
 8004c04:	20000be0 	.word	0x20000be0
 8004c08:	20000bcc 	.word	0x20000bcc
 8004c0c:	200006f4 	.word	0x200006f4

08004c10 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b084      	sub	sp, #16
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d010      	beq.n	8004c44 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004c22:	4b0d      	ldr	r3, [pc, #52]	; (8004c58 <vTaskDelay+0x48>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d001      	beq.n	8004c2e <vTaskDelay+0x1e>
 8004c2a:	b672      	cpsid	i
 8004c2c:	e7fe      	b.n	8004c2c <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8004c2e:	f000 f869 	bl	8004d04 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2100      	movs	r1, #0
 8004c36:	0018      	movs	r0, r3
 8004c38:	f000 fc64 	bl	8005504 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004c3c:	f000 f86e 	bl	8004d1c <xTaskResumeAll>
 8004c40:	0003      	movs	r3, r0
 8004c42:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d101      	bne.n	8004c4e <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 8004c4a:	f001 f809 	bl	8005c60 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004c4e:	46c0      	nop			; (mov r8, r8)
 8004c50:	46bd      	mov	sp, r7
 8004c52:	b004      	add	sp, #16
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	46c0      	nop			; (mov r8, r8)
 8004c58:	20000bec 	.word	0x20000bec

08004c5c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004c5c:	b590      	push	{r4, r7, lr}
 8004c5e:	b089      	sub	sp, #36	; 0x24
 8004c60:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004c62:	2300      	movs	r3, #0
 8004c64:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004c66:	2300      	movs	r3, #0
 8004c68:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004c6a:	003a      	movs	r2, r7
 8004c6c:	1d39      	adds	r1, r7, #4
 8004c6e:	2308      	movs	r3, #8
 8004c70:	18fb      	adds	r3, r7, r3
 8004c72:	0018      	movs	r0, r3
 8004c74:	f7ff f8b6 	bl	8003de4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004c78:	683c      	ldr	r4, [r7, #0]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	68ba      	ldr	r2, [r7, #8]
 8004c7e:	491b      	ldr	r1, [pc, #108]	; (8004cec <vTaskStartScheduler+0x90>)
 8004c80:	481b      	ldr	r0, [pc, #108]	; (8004cf0 <vTaskStartScheduler+0x94>)
 8004c82:	9202      	str	r2, [sp, #8]
 8004c84:	9301      	str	r3, [sp, #4]
 8004c86:	2300      	movs	r3, #0
 8004c88:	9300      	str	r3, [sp, #0]
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	0022      	movs	r2, r4
 8004c8e:	f7ff fe46 	bl	800491e <xTaskCreateStatic>
 8004c92:	0002      	movs	r2, r0
 8004c94:	4b17      	ldr	r3, [pc, #92]	; (8004cf4 <vTaskStartScheduler+0x98>)
 8004c96:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004c98:	4b16      	ldr	r3, [pc, #88]	; (8004cf4 <vTaskStartScheduler+0x98>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d002      	beq.n	8004ca6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	60fb      	str	r3, [r7, #12]
 8004ca4:	e001      	b.n	8004caa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d103      	bne.n	8004cb8 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 8004cb0:	f000 fc7c 	bl	80055ac <xTimerCreateTimerTask>
 8004cb4:	0003      	movs	r3, r0
 8004cb6:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d10d      	bne.n	8004cda <vTaskStartScheduler+0x7e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8004cbe:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004cc0:	4b0d      	ldr	r3, [pc, #52]	; (8004cf8 <vTaskStartScheduler+0x9c>)
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	4252      	negs	r2, r2
 8004cc6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004cc8:	4b0c      	ldr	r3, [pc, #48]	; (8004cfc <vTaskStartScheduler+0xa0>)
 8004cca:	2201      	movs	r2, #1
 8004ccc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004cce:	4b0c      	ldr	r3, [pc, #48]	; (8004d00 <vTaskStartScheduler+0xa4>)
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004cd4:	f000 ffa0 	bl	8005c18 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004cd8:	e004      	b.n	8004ce4 <vTaskStartScheduler+0x88>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	3301      	adds	r3, #1
 8004cde:	d101      	bne.n	8004ce4 <vTaskStartScheduler+0x88>
 8004ce0:	b672      	cpsid	i
 8004ce2:	e7fe      	b.n	8004ce2 <vTaskStartScheduler+0x86>
}
 8004ce4:	46c0      	nop			; (mov r8, r8)
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	b005      	add	sp, #20
 8004cea:	bd90      	pop	{r4, r7, pc}
 8004cec:	08006670 	.word	0x08006670
 8004cf0:	08005279 	.word	0x08005279
 8004cf4:	20000be8 	.word	0x20000be8
 8004cf8:	20000be4 	.word	0x20000be4
 8004cfc:	20000bd0 	.word	0x20000bd0
 8004d00:	20000bc8 	.word	0x20000bc8

08004d04 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004d08:	4b03      	ldr	r3, [pc, #12]	; (8004d18 <vTaskSuspendAll+0x14>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	1c5a      	adds	r2, r3, #1
 8004d0e:	4b02      	ldr	r3, [pc, #8]	; (8004d18 <vTaskSuspendAll+0x14>)
 8004d10:	601a      	str	r2, [r3, #0]
}
 8004d12:	46c0      	nop			; (mov r8, r8)
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}
 8004d18:	20000bec 	.word	0x20000bec

08004d1c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b084      	sub	sp, #16
 8004d20:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004d22:	2300      	movs	r3, #0
 8004d24:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004d26:	2300      	movs	r3, #0
 8004d28:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004d2a:	4b3a      	ldr	r3, [pc, #232]	; (8004e14 <xTaskResumeAll+0xf8>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d101      	bne.n	8004d36 <xTaskResumeAll+0x1a>
 8004d32:	b672      	cpsid	i
 8004d34:	e7fe      	b.n	8004d34 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004d36:	f000 ffa3 	bl	8005c80 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004d3a:	4b36      	ldr	r3, [pc, #216]	; (8004e14 <xTaskResumeAll+0xf8>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	1e5a      	subs	r2, r3, #1
 8004d40:	4b34      	ldr	r3, [pc, #208]	; (8004e14 <xTaskResumeAll+0xf8>)
 8004d42:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d44:	4b33      	ldr	r3, [pc, #204]	; (8004e14 <xTaskResumeAll+0xf8>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d15b      	bne.n	8004e04 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004d4c:	4b32      	ldr	r3, [pc, #200]	; (8004e18 <xTaskResumeAll+0xfc>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d057      	beq.n	8004e04 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004d54:	e02f      	b.n	8004db6 <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004d56:	4b31      	ldr	r3, [pc, #196]	; (8004e1c <xTaskResumeAll+0x100>)
 8004d58:	68db      	ldr	r3, [r3, #12]
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	3318      	adds	r3, #24
 8004d62:	0018      	movs	r0, r3
 8004d64:	f7ff f8ef 	bl	8003f46 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	3304      	adds	r3, #4
 8004d6c:	0018      	movs	r0, r3
 8004d6e:	f7ff f8ea 	bl	8003f46 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d76:	4b2a      	ldr	r3, [pc, #168]	; (8004e20 <xTaskResumeAll+0x104>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d903      	bls.n	8004d86 <xTaskResumeAll+0x6a>
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d82:	4b27      	ldr	r3, [pc, #156]	; (8004e20 <xTaskResumeAll+0x104>)
 8004d84:	601a      	str	r2, [r3, #0]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d8a:	0013      	movs	r3, r2
 8004d8c:	009b      	lsls	r3, r3, #2
 8004d8e:	189b      	adds	r3, r3, r2
 8004d90:	009b      	lsls	r3, r3, #2
 8004d92:	4a24      	ldr	r2, [pc, #144]	; (8004e24 <xTaskResumeAll+0x108>)
 8004d94:	189a      	adds	r2, r3, r2
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	3304      	adds	r3, #4
 8004d9a:	0019      	movs	r1, r3
 8004d9c:	0010      	movs	r0, r2
 8004d9e:	f7ff f87a 	bl	8003e96 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004da6:	4b20      	ldr	r3, [pc, #128]	; (8004e28 <xTaskResumeAll+0x10c>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d302      	bcc.n	8004db6 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8004db0:	4b1e      	ldr	r3, [pc, #120]	; (8004e2c <xTaskResumeAll+0x110>)
 8004db2:	2201      	movs	r2, #1
 8004db4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004db6:	4b19      	ldr	r3, [pc, #100]	; (8004e1c <xTaskResumeAll+0x100>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d1cb      	bne.n	8004d56 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d001      	beq.n	8004dc8 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004dc4:	f000 fb02 	bl	80053cc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004dc8:	4b19      	ldr	r3, [pc, #100]	; (8004e30 <xTaskResumeAll+0x114>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d00f      	beq.n	8004df4 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004dd4:	f000 f83c 	bl	8004e50 <xTaskIncrementTick>
 8004dd8:	1e03      	subs	r3, r0, #0
 8004dda:	d002      	beq.n	8004de2 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8004ddc:	4b13      	ldr	r3, [pc, #76]	; (8004e2c <xTaskResumeAll+0x110>)
 8004dde:	2201      	movs	r2, #1
 8004de0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	3b01      	subs	r3, #1
 8004de6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d1f2      	bne.n	8004dd4 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 8004dee:	4b10      	ldr	r3, [pc, #64]	; (8004e30 <xTaskResumeAll+0x114>)
 8004df0:	2200      	movs	r2, #0
 8004df2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004df4:	4b0d      	ldr	r3, [pc, #52]	; (8004e2c <xTaskResumeAll+0x110>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d003      	beq.n	8004e04 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004e00:	f000 ff2e 	bl	8005c60 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004e04:	f000 ff4e 	bl	8005ca4 <vPortExitCritical>

	return xAlreadyYielded;
 8004e08:	68bb      	ldr	r3, [r7, #8]
}
 8004e0a:	0018      	movs	r0, r3
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	b004      	add	sp, #16
 8004e10:	bd80      	pop	{r7, pc}
 8004e12:	46c0      	nop			; (mov r8, r8)
 8004e14:	20000bec 	.word	0x20000bec
 8004e18:	20000bc4 	.word	0x20000bc4
 8004e1c:	20000b84 	.word	0x20000b84
 8004e20:	20000bcc 	.word	0x20000bcc
 8004e24:	200006f4 	.word	0x200006f4
 8004e28:	200006f0 	.word	0x200006f0
 8004e2c:	20000bd8 	.word	0x20000bd8
 8004e30:	20000bd4 	.word	0x20000bd4

08004e34 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b082      	sub	sp, #8
 8004e38:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004e3a:	4b04      	ldr	r3, [pc, #16]	; (8004e4c <xTaskGetTickCount+0x18>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004e40:	687b      	ldr	r3, [r7, #4]
}
 8004e42:	0018      	movs	r0, r3
 8004e44:	46bd      	mov	sp, r7
 8004e46:	b002      	add	sp, #8
 8004e48:	bd80      	pop	{r7, pc}
 8004e4a:	46c0      	nop			; (mov r8, r8)
 8004e4c:	20000bc8 	.word	0x20000bc8

08004e50 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b086      	sub	sp, #24
 8004e54:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004e56:	2300      	movs	r3, #0
 8004e58:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e5a:	4b4c      	ldr	r3, [pc, #304]	; (8004f8c <xTaskIncrementTick+0x13c>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d000      	beq.n	8004e64 <xTaskIncrementTick+0x14>
 8004e62:	e083      	b.n	8004f6c <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004e64:	4b4a      	ldr	r3, [pc, #296]	; (8004f90 <xTaskIncrementTick+0x140>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	3301      	adds	r3, #1
 8004e6a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004e6c:	4b48      	ldr	r3, [pc, #288]	; (8004f90 <xTaskIncrementTick+0x140>)
 8004e6e:	693a      	ldr	r2, [r7, #16]
 8004e70:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d117      	bne.n	8004ea8 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8004e78:	4b46      	ldr	r3, [pc, #280]	; (8004f94 <xTaskIncrementTick+0x144>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d001      	beq.n	8004e86 <xTaskIncrementTick+0x36>
 8004e82:	b672      	cpsid	i
 8004e84:	e7fe      	b.n	8004e84 <xTaskIncrementTick+0x34>
 8004e86:	4b43      	ldr	r3, [pc, #268]	; (8004f94 <xTaskIncrementTick+0x144>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	60fb      	str	r3, [r7, #12]
 8004e8c:	4b42      	ldr	r3, [pc, #264]	; (8004f98 <xTaskIncrementTick+0x148>)
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	4b40      	ldr	r3, [pc, #256]	; (8004f94 <xTaskIncrementTick+0x144>)
 8004e92:	601a      	str	r2, [r3, #0]
 8004e94:	4b40      	ldr	r3, [pc, #256]	; (8004f98 <xTaskIncrementTick+0x148>)
 8004e96:	68fa      	ldr	r2, [r7, #12]
 8004e98:	601a      	str	r2, [r3, #0]
 8004e9a:	4b40      	ldr	r3, [pc, #256]	; (8004f9c <xTaskIncrementTick+0x14c>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	1c5a      	adds	r2, r3, #1
 8004ea0:	4b3e      	ldr	r3, [pc, #248]	; (8004f9c <xTaskIncrementTick+0x14c>)
 8004ea2:	601a      	str	r2, [r3, #0]
 8004ea4:	f000 fa92 	bl	80053cc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004ea8:	4b3d      	ldr	r3, [pc, #244]	; (8004fa0 <xTaskIncrementTick+0x150>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	693a      	ldr	r2, [r7, #16]
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	d34e      	bcc.n	8004f50 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004eb2:	4b38      	ldr	r3, [pc, #224]	; (8004f94 <xTaskIncrementTick+0x144>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d101      	bne.n	8004ec0 <xTaskIncrementTick+0x70>
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e000      	b.n	8004ec2 <xTaskIncrementTick+0x72>
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d004      	beq.n	8004ed0 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ec6:	4b36      	ldr	r3, [pc, #216]	; (8004fa0 <xTaskIncrementTick+0x150>)
 8004ec8:	2201      	movs	r2, #1
 8004eca:	4252      	negs	r2, r2
 8004ecc:	601a      	str	r2, [r3, #0]
					break;
 8004ece:	e03f      	b.n	8004f50 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004ed0:	4b30      	ldr	r3, [pc, #192]	; (8004f94 <xTaskIncrementTick+0x144>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	68db      	ldr	r3, [r3, #12]
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004ee0:	693a      	ldr	r2, [r7, #16]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d203      	bcs.n	8004ef0 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004ee8:	4b2d      	ldr	r3, [pc, #180]	; (8004fa0 <xTaskIncrementTick+0x150>)
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	601a      	str	r2, [r3, #0]
						break;
 8004eee:	e02f      	b.n	8004f50 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	3304      	adds	r3, #4
 8004ef4:	0018      	movs	r0, r3
 8004ef6:	f7ff f826 	bl	8003f46 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d004      	beq.n	8004f0c <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	3318      	adds	r3, #24
 8004f06:	0018      	movs	r0, r3
 8004f08:	f7ff f81d 	bl	8003f46 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f10:	4b24      	ldr	r3, [pc, #144]	; (8004fa4 <xTaskIncrementTick+0x154>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d903      	bls.n	8004f20 <xTaskIncrementTick+0xd0>
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f1c:	4b21      	ldr	r3, [pc, #132]	; (8004fa4 <xTaskIncrementTick+0x154>)
 8004f1e:	601a      	str	r2, [r3, #0]
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f24:	0013      	movs	r3, r2
 8004f26:	009b      	lsls	r3, r3, #2
 8004f28:	189b      	adds	r3, r3, r2
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	4a1e      	ldr	r2, [pc, #120]	; (8004fa8 <xTaskIncrementTick+0x158>)
 8004f2e:	189a      	adds	r2, r3, r2
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	3304      	adds	r3, #4
 8004f34:	0019      	movs	r1, r3
 8004f36:	0010      	movs	r0, r2
 8004f38:	f7fe ffad 	bl	8003e96 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f40:	4b1a      	ldr	r3, [pc, #104]	; (8004fac <xTaskIncrementTick+0x15c>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d3b3      	bcc.n	8004eb2 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f4e:	e7b0      	b.n	8004eb2 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004f50:	4b16      	ldr	r3, [pc, #88]	; (8004fac <xTaskIncrementTick+0x15c>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f56:	4914      	ldr	r1, [pc, #80]	; (8004fa8 <xTaskIncrementTick+0x158>)
 8004f58:	0013      	movs	r3, r2
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	189b      	adds	r3, r3, r2
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	585b      	ldr	r3, [r3, r1]
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	d907      	bls.n	8004f76 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8004f66:	2301      	movs	r3, #1
 8004f68:	617b      	str	r3, [r7, #20]
 8004f6a:	e004      	b.n	8004f76 <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004f6c:	4b10      	ldr	r3, [pc, #64]	; (8004fb0 <xTaskIncrementTick+0x160>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	1c5a      	adds	r2, r3, #1
 8004f72:	4b0f      	ldr	r3, [pc, #60]	; (8004fb0 <xTaskIncrementTick+0x160>)
 8004f74:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004f76:	4b0f      	ldr	r3, [pc, #60]	; (8004fb4 <xTaskIncrementTick+0x164>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d001      	beq.n	8004f82 <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004f82:	697b      	ldr	r3, [r7, #20]
}
 8004f84:	0018      	movs	r0, r3
 8004f86:	46bd      	mov	sp, r7
 8004f88:	b006      	add	sp, #24
 8004f8a:	bd80      	pop	{r7, pc}
 8004f8c:	20000bec 	.word	0x20000bec
 8004f90:	20000bc8 	.word	0x20000bc8
 8004f94:	20000b7c 	.word	0x20000b7c
 8004f98:	20000b80 	.word	0x20000b80
 8004f9c:	20000bdc 	.word	0x20000bdc
 8004fa0:	20000be4 	.word	0x20000be4
 8004fa4:	20000bcc 	.word	0x20000bcc
 8004fa8:	200006f4 	.word	0x200006f4
 8004fac:	200006f0 	.word	0x200006f0
 8004fb0:	20000bd4 	.word	0x20000bd4
 8004fb4:	20000bd8 	.word	0x20000bd8

08004fb8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b082      	sub	sp, #8
 8004fbc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004fbe:	4b22      	ldr	r3, [pc, #136]	; (8005048 <vTaskSwitchContext+0x90>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d003      	beq.n	8004fce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004fc6:	4b21      	ldr	r3, [pc, #132]	; (800504c <vTaskSwitchContext+0x94>)
 8004fc8:	2201      	movs	r2, #1
 8004fca:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004fcc:	e037      	b.n	800503e <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 8004fce:	4b1f      	ldr	r3, [pc, #124]	; (800504c <vTaskSwitchContext+0x94>)
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004fd4:	4b1e      	ldr	r3, [pc, #120]	; (8005050 <vTaskSwitchContext+0x98>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	607b      	str	r3, [r7, #4]
 8004fda:	e007      	b.n	8004fec <vTaskSwitchContext+0x34>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d101      	bne.n	8004fe6 <vTaskSwitchContext+0x2e>
 8004fe2:	b672      	cpsid	i
 8004fe4:	e7fe      	b.n	8004fe4 <vTaskSwitchContext+0x2c>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	3b01      	subs	r3, #1
 8004fea:	607b      	str	r3, [r7, #4]
 8004fec:	4919      	ldr	r1, [pc, #100]	; (8005054 <vTaskSwitchContext+0x9c>)
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	0013      	movs	r3, r2
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	189b      	adds	r3, r3, r2
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	585b      	ldr	r3, [r3, r1]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d0ee      	beq.n	8004fdc <vTaskSwitchContext+0x24>
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	0013      	movs	r3, r2
 8005002:	009b      	lsls	r3, r3, #2
 8005004:	189b      	adds	r3, r3, r2
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	4a12      	ldr	r2, [pc, #72]	; (8005054 <vTaskSwitchContext+0x9c>)
 800500a:	189b      	adds	r3, r3, r2
 800500c:	603b      	str	r3, [r7, #0]
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	685a      	ldr	r2, [r3, #4]
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	605a      	str	r2, [r3, #4]
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	685a      	ldr	r2, [r3, #4]
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	3308      	adds	r3, #8
 8005020:	429a      	cmp	r2, r3
 8005022:	d104      	bne.n	800502e <vTaskSwitchContext+0x76>
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	685a      	ldr	r2, [r3, #4]
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	605a      	str	r2, [r3, #4]
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	68da      	ldr	r2, [r3, #12]
 8005034:	4b08      	ldr	r3, [pc, #32]	; (8005058 <vTaskSwitchContext+0xa0>)
 8005036:	601a      	str	r2, [r3, #0]
 8005038:	4b05      	ldr	r3, [pc, #20]	; (8005050 <vTaskSwitchContext+0x98>)
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	601a      	str	r2, [r3, #0]
}
 800503e:	46c0      	nop			; (mov r8, r8)
 8005040:	46bd      	mov	sp, r7
 8005042:	b002      	add	sp, #8
 8005044:	bd80      	pop	{r7, pc}
 8005046:	46c0      	nop			; (mov r8, r8)
 8005048:	20000bec 	.word	0x20000bec
 800504c:	20000bd8 	.word	0x20000bd8
 8005050:	20000bcc 	.word	0x20000bcc
 8005054:	200006f4 	.word	0x200006f4
 8005058:	200006f0 	.word	0x200006f0

0800505c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b082      	sub	sp, #8
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d101      	bne.n	8005070 <vTaskPlaceOnEventList+0x14>
 800506c:	b672      	cpsid	i
 800506e:	e7fe      	b.n	800506e <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005070:	4b08      	ldr	r3, [pc, #32]	; (8005094 <vTaskPlaceOnEventList+0x38>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	3318      	adds	r3, #24
 8005076:	001a      	movs	r2, r3
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	0011      	movs	r1, r2
 800507c:	0018      	movs	r0, r3
 800507e:	f7fe ff2c 	bl	8003eda <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	2101      	movs	r1, #1
 8005086:	0018      	movs	r0, r3
 8005088:	f000 fa3c 	bl	8005504 <prvAddCurrentTaskToDelayedList>
}
 800508c:	46c0      	nop			; (mov r8, r8)
 800508e:	46bd      	mov	sp, r7
 8005090:	b002      	add	sp, #8
 8005092:	bd80      	pop	{r7, pc}
 8005094:	200006f0 	.word	0x200006f0

08005098 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005098:	b580      	push	{r7, lr}
 800509a:	b084      	sub	sp, #16
 800509c:	af00      	add	r7, sp, #0
 800509e:	60f8      	str	r0, [r7, #12]
 80050a0:	60b9      	str	r1, [r7, #8]
 80050a2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d101      	bne.n	80050ae <vTaskPlaceOnEventListRestricted+0x16>
 80050aa:	b672      	cpsid	i
 80050ac:	e7fe      	b.n	80050ac <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80050ae:	4b0c      	ldr	r3, [pc, #48]	; (80050e0 <vTaskPlaceOnEventListRestricted+0x48>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	3318      	adds	r3, #24
 80050b4:	001a      	movs	r2, r3
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	0011      	movs	r1, r2
 80050ba:	0018      	movs	r0, r3
 80050bc:	f7fe feeb 	bl	8003e96 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d002      	beq.n	80050cc <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 80050c6:	2301      	movs	r3, #1
 80050c8:	425b      	negs	r3, r3
 80050ca:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80050cc:	687a      	ldr	r2, [r7, #4]
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	0011      	movs	r1, r2
 80050d2:	0018      	movs	r0, r3
 80050d4:	f000 fa16 	bl	8005504 <prvAddCurrentTaskToDelayedList>
	}
 80050d8:	46c0      	nop			; (mov r8, r8)
 80050da:	46bd      	mov	sp, r7
 80050dc:	b004      	add	sp, #16
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	200006f0 	.word	0x200006f0

080050e4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b084      	sub	sp, #16
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	68db      	ldr	r3, [r3, #12]
 80050f2:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d101      	bne.n	80050fe <xTaskRemoveFromEventList+0x1a>
 80050fa:	b672      	cpsid	i
 80050fc:	e7fe      	b.n	80050fc <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	3318      	adds	r3, #24
 8005102:	0018      	movs	r0, r3
 8005104:	f7fe ff1f 	bl	8003f46 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005108:	4b1e      	ldr	r3, [pc, #120]	; (8005184 <xTaskRemoveFromEventList+0xa0>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d11d      	bne.n	800514c <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	3304      	adds	r3, #4
 8005114:	0018      	movs	r0, r3
 8005116:	f7fe ff16 	bl	8003f46 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800511e:	4b1a      	ldr	r3, [pc, #104]	; (8005188 <xTaskRemoveFromEventList+0xa4>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	429a      	cmp	r2, r3
 8005124:	d903      	bls.n	800512e <xTaskRemoveFromEventList+0x4a>
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800512a:	4b17      	ldr	r3, [pc, #92]	; (8005188 <xTaskRemoveFromEventList+0xa4>)
 800512c:	601a      	str	r2, [r3, #0]
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005132:	0013      	movs	r3, r2
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	189b      	adds	r3, r3, r2
 8005138:	009b      	lsls	r3, r3, #2
 800513a:	4a14      	ldr	r2, [pc, #80]	; (800518c <xTaskRemoveFromEventList+0xa8>)
 800513c:	189a      	adds	r2, r3, r2
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	3304      	adds	r3, #4
 8005142:	0019      	movs	r1, r3
 8005144:	0010      	movs	r0, r2
 8005146:	f7fe fea6 	bl	8003e96 <vListInsertEnd>
 800514a:	e007      	b.n	800515c <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	3318      	adds	r3, #24
 8005150:	001a      	movs	r2, r3
 8005152:	4b0f      	ldr	r3, [pc, #60]	; (8005190 <xTaskRemoveFromEventList+0xac>)
 8005154:	0011      	movs	r1, r2
 8005156:	0018      	movs	r0, r3
 8005158:	f7fe fe9d 	bl	8003e96 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005160:	4b0c      	ldr	r3, [pc, #48]	; (8005194 <xTaskRemoveFromEventList+0xb0>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005166:	429a      	cmp	r2, r3
 8005168:	d905      	bls.n	8005176 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800516a:	2301      	movs	r3, #1
 800516c:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800516e:	4b0a      	ldr	r3, [pc, #40]	; (8005198 <xTaskRemoveFromEventList+0xb4>)
 8005170:	2201      	movs	r2, #1
 8005172:	601a      	str	r2, [r3, #0]
 8005174:	e001      	b.n	800517a <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 8005176:	2300      	movs	r3, #0
 8005178:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800517a:	68fb      	ldr	r3, [r7, #12]
}
 800517c:	0018      	movs	r0, r3
 800517e:	46bd      	mov	sp, r7
 8005180:	b004      	add	sp, #16
 8005182:	bd80      	pop	{r7, pc}
 8005184:	20000bec 	.word	0x20000bec
 8005188:	20000bcc 	.word	0x20000bcc
 800518c:	200006f4 	.word	0x200006f4
 8005190:	20000b84 	.word	0x20000b84
 8005194:	200006f0 	.word	0x200006f0
 8005198:	20000bd8 	.word	0x20000bd8

0800519c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b082      	sub	sp, #8
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80051a4:	4b05      	ldr	r3, [pc, #20]	; (80051bc <vTaskInternalSetTimeOutState+0x20>)
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80051ac:	4b04      	ldr	r3, [pc, #16]	; (80051c0 <vTaskInternalSetTimeOutState+0x24>)
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	605a      	str	r2, [r3, #4]
}
 80051b4:	46c0      	nop			; (mov r8, r8)
 80051b6:	46bd      	mov	sp, r7
 80051b8:	b002      	add	sp, #8
 80051ba:	bd80      	pop	{r7, pc}
 80051bc:	20000bdc 	.word	0x20000bdc
 80051c0:	20000bc8 	.word	0x20000bc8

080051c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b086      	sub	sp, #24
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d101      	bne.n	80051d8 <xTaskCheckForTimeOut+0x14>
 80051d4:	b672      	cpsid	i
 80051d6:	e7fe      	b.n	80051d6 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d101      	bne.n	80051e2 <xTaskCheckForTimeOut+0x1e>
 80051de:	b672      	cpsid	i
 80051e0:	e7fe      	b.n	80051e0 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 80051e2:	f000 fd4d 	bl	8005c80 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80051e6:	4b1d      	ldr	r3, [pc, #116]	; (800525c <xTaskCheckForTimeOut+0x98>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	693a      	ldr	r2, [r7, #16]
 80051f2:	1ad3      	subs	r3, r2, r3
 80051f4:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	3301      	adds	r3, #1
 80051fc:	d102      	bne.n	8005204 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80051fe:	2300      	movs	r3, #0
 8005200:	617b      	str	r3, [r7, #20]
 8005202:	e024      	b.n	800524e <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	4b15      	ldr	r3, [pc, #84]	; (8005260 <xTaskCheckForTimeOut+0x9c>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	429a      	cmp	r2, r3
 800520e:	d007      	beq.n	8005220 <xTaskCheckForTimeOut+0x5c>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	693a      	ldr	r2, [r7, #16]
 8005216:	429a      	cmp	r2, r3
 8005218:	d302      	bcc.n	8005220 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800521a:	2301      	movs	r3, #1
 800521c:	617b      	str	r3, [r7, #20]
 800521e:	e016      	b.n	800524e <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	68fa      	ldr	r2, [r7, #12]
 8005226:	429a      	cmp	r2, r3
 8005228:	d20c      	bcs.n	8005244 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	1ad2      	subs	r2, r2, r3
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	0018      	movs	r0, r3
 800523a:	f7ff ffaf 	bl	800519c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800523e:	2300      	movs	r3, #0
 8005240:	617b      	str	r3, [r7, #20]
 8005242:	e004      	b.n	800524e <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	2200      	movs	r2, #0
 8005248:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800524a:	2301      	movs	r3, #1
 800524c:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800524e:	f000 fd29 	bl	8005ca4 <vPortExitCritical>

	return xReturn;
 8005252:	697b      	ldr	r3, [r7, #20]
}
 8005254:	0018      	movs	r0, r3
 8005256:	46bd      	mov	sp, r7
 8005258:	b006      	add	sp, #24
 800525a:	bd80      	pop	{r7, pc}
 800525c:	20000bc8 	.word	0x20000bc8
 8005260:	20000bdc 	.word	0x20000bdc

08005264 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005264:	b580      	push	{r7, lr}
 8005266:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005268:	4b02      	ldr	r3, [pc, #8]	; (8005274 <vTaskMissedYield+0x10>)
 800526a:	2201      	movs	r2, #1
 800526c:	601a      	str	r2, [r3, #0]
}
 800526e:	46c0      	nop			; (mov r8, r8)
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}
 8005274:	20000bd8 	.word	0x20000bd8

08005278 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b082      	sub	sp, #8
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005280:	f000 f84e 	bl	8005320 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005284:	4b03      	ldr	r3, [pc, #12]	; (8005294 <prvIdleTask+0x1c>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	2b01      	cmp	r3, #1
 800528a:	d9f9      	bls.n	8005280 <prvIdleTask+0x8>
			{
				taskYIELD();
 800528c:	f000 fce8 	bl	8005c60 <vPortYield>
		prvCheckTasksWaitingTermination();
 8005290:	e7f6      	b.n	8005280 <prvIdleTask+0x8>
 8005292:	46c0      	nop			; (mov r8, r8)
 8005294:	200006f4 	.word	0x200006f4

08005298 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b082      	sub	sp, #8
 800529c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800529e:	2300      	movs	r3, #0
 80052a0:	607b      	str	r3, [r7, #4]
 80052a2:	e00c      	b.n	80052be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80052a4:	687a      	ldr	r2, [r7, #4]
 80052a6:	0013      	movs	r3, r2
 80052a8:	009b      	lsls	r3, r3, #2
 80052aa:	189b      	adds	r3, r3, r2
 80052ac:	009b      	lsls	r3, r3, #2
 80052ae:	4a14      	ldr	r2, [pc, #80]	; (8005300 <prvInitialiseTaskLists+0x68>)
 80052b0:	189b      	adds	r3, r3, r2
 80052b2:	0018      	movs	r0, r3
 80052b4:	f7fe fdc6 	bl	8003e44 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	3301      	adds	r3, #1
 80052bc:	607b      	str	r3, [r7, #4]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2b37      	cmp	r3, #55	; 0x37
 80052c2:	d9ef      	bls.n	80052a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80052c4:	4b0f      	ldr	r3, [pc, #60]	; (8005304 <prvInitialiseTaskLists+0x6c>)
 80052c6:	0018      	movs	r0, r3
 80052c8:	f7fe fdbc 	bl	8003e44 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80052cc:	4b0e      	ldr	r3, [pc, #56]	; (8005308 <prvInitialiseTaskLists+0x70>)
 80052ce:	0018      	movs	r0, r3
 80052d0:	f7fe fdb8 	bl	8003e44 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80052d4:	4b0d      	ldr	r3, [pc, #52]	; (800530c <prvInitialiseTaskLists+0x74>)
 80052d6:	0018      	movs	r0, r3
 80052d8:	f7fe fdb4 	bl	8003e44 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80052dc:	4b0c      	ldr	r3, [pc, #48]	; (8005310 <prvInitialiseTaskLists+0x78>)
 80052de:	0018      	movs	r0, r3
 80052e0:	f7fe fdb0 	bl	8003e44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80052e4:	4b0b      	ldr	r3, [pc, #44]	; (8005314 <prvInitialiseTaskLists+0x7c>)
 80052e6:	0018      	movs	r0, r3
 80052e8:	f7fe fdac 	bl	8003e44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80052ec:	4b0a      	ldr	r3, [pc, #40]	; (8005318 <prvInitialiseTaskLists+0x80>)
 80052ee:	4a05      	ldr	r2, [pc, #20]	; (8005304 <prvInitialiseTaskLists+0x6c>)
 80052f0:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80052f2:	4b0a      	ldr	r3, [pc, #40]	; (800531c <prvInitialiseTaskLists+0x84>)
 80052f4:	4a04      	ldr	r2, [pc, #16]	; (8005308 <prvInitialiseTaskLists+0x70>)
 80052f6:	601a      	str	r2, [r3, #0]
}
 80052f8:	46c0      	nop			; (mov r8, r8)
 80052fa:	46bd      	mov	sp, r7
 80052fc:	b002      	add	sp, #8
 80052fe:	bd80      	pop	{r7, pc}
 8005300:	200006f4 	.word	0x200006f4
 8005304:	20000b54 	.word	0x20000b54
 8005308:	20000b68 	.word	0x20000b68
 800530c:	20000b84 	.word	0x20000b84
 8005310:	20000b98 	.word	0x20000b98
 8005314:	20000bb0 	.word	0x20000bb0
 8005318:	20000b7c 	.word	0x20000b7c
 800531c:	20000b80 	.word	0x20000b80

08005320 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b082      	sub	sp, #8
 8005324:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005326:	e01a      	b.n	800535e <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8005328:	f000 fcaa 	bl	8005c80 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800532c:	4b10      	ldr	r3, [pc, #64]	; (8005370 <prvCheckTasksWaitingTermination+0x50>)
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	68db      	ldr	r3, [r3, #12]
 8005332:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	3304      	adds	r3, #4
 8005338:	0018      	movs	r0, r3
 800533a:	f7fe fe04 	bl	8003f46 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800533e:	4b0d      	ldr	r3, [pc, #52]	; (8005374 <prvCheckTasksWaitingTermination+0x54>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	1e5a      	subs	r2, r3, #1
 8005344:	4b0b      	ldr	r3, [pc, #44]	; (8005374 <prvCheckTasksWaitingTermination+0x54>)
 8005346:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005348:	4b0b      	ldr	r3, [pc, #44]	; (8005378 <prvCheckTasksWaitingTermination+0x58>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	1e5a      	subs	r2, r3, #1
 800534e:	4b0a      	ldr	r3, [pc, #40]	; (8005378 <prvCheckTasksWaitingTermination+0x58>)
 8005350:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8005352:	f000 fca7 	bl	8005ca4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	0018      	movs	r0, r3
 800535a:	f000 f80f 	bl	800537c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800535e:	4b06      	ldr	r3, [pc, #24]	; (8005378 <prvCheckTasksWaitingTermination+0x58>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d1e0      	bne.n	8005328 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005366:	46c0      	nop			; (mov r8, r8)
 8005368:	46c0      	nop			; (mov r8, r8)
 800536a:	46bd      	mov	sp, r7
 800536c:	b002      	add	sp, #8
 800536e:	bd80      	pop	{r7, pc}
 8005370:	20000b98 	.word	0x20000b98
 8005374:	20000bc4 	.word	0x20000bc4
 8005378:	20000bac 	.word	0x20000bac

0800537c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800537c:	b580      	push	{r7, lr}
 800537e:	b082      	sub	sp, #8
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2259      	movs	r2, #89	; 0x59
 8005388:	5c9b      	ldrb	r3, [r3, r2]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d109      	bne.n	80053a2 <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005392:	0018      	movs	r0, r3
 8005394:	f000 fdb2 	bl	8005efc <vPortFree>
				vPortFree( pxTCB );
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	0018      	movs	r0, r3
 800539c:	f000 fdae 	bl	8005efc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80053a0:	e010      	b.n	80053c4 <prvDeleteTCB+0x48>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2259      	movs	r2, #89	; 0x59
 80053a6:	5c9b      	ldrb	r3, [r3, r2]
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d104      	bne.n	80053b6 <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	0018      	movs	r0, r3
 80053b0:	f000 fda4 	bl	8005efc <vPortFree>
	}
 80053b4:	e006      	b.n	80053c4 <prvDeleteTCB+0x48>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2259      	movs	r2, #89	; 0x59
 80053ba:	5c9b      	ldrb	r3, [r3, r2]
 80053bc:	2b02      	cmp	r3, #2
 80053be:	d001      	beq.n	80053c4 <prvDeleteTCB+0x48>
 80053c0:	b672      	cpsid	i
 80053c2:	e7fe      	b.n	80053c2 <prvDeleteTCB+0x46>
	}
 80053c4:	46c0      	nop			; (mov r8, r8)
 80053c6:	46bd      	mov	sp, r7
 80053c8:	b002      	add	sp, #8
 80053ca:	bd80      	pop	{r7, pc}

080053cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b082      	sub	sp, #8
 80053d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80053d2:	4b0e      	ldr	r3, [pc, #56]	; (800540c <prvResetNextTaskUnblockTime+0x40>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d101      	bne.n	80053e0 <prvResetNextTaskUnblockTime+0x14>
 80053dc:	2301      	movs	r3, #1
 80053de:	e000      	b.n	80053e2 <prvResetNextTaskUnblockTime+0x16>
 80053e0:	2300      	movs	r3, #0
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d004      	beq.n	80053f0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80053e6:	4b0a      	ldr	r3, [pc, #40]	; (8005410 <prvResetNextTaskUnblockTime+0x44>)
 80053e8:	2201      	movs	r2, #1
 80053ea:	4252      	negs	r2, r2
 80053ec:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80053ee:	e008      	b.n	8005402 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80053f0:	4b06      	ldr	r3, [pc, #24]	; (800540c <prvResetNextTaskUnblockTime+0x40>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	685a      	ldr	r2, [r3, #4]
 80053fe:	4b04      	ldr	r3, [pc, #16]	; (8005410 <prvResetNextTaskUnblockTime+0x44>)
 8005400:	601a      	str	r2, [r3, #0]
}
 8005402:	46c0      	nop			; (mov r8, r8)
 8005404:	46bd      	mov	sp, r7
 8005406:	b002      	add	sp, #8
 8005408:	bd80      	pop	{r7, pc}
 800540a:	46c0      	nop			; (mov r8, r8)
 800540c:	20000b7c 	.word	0x20000b7c
 8005410:	20000be4 	.word	0x20000be4

08005414 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005414:	b580      	push	{r7, lr}
 8005416:	b082      	sub	sp, #8
 8005418:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800541a:	4b0a      	ldr	r3, [pc, #40]	; (8005444 <xTaskGetSchedulerState+0x30>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d102      	bne.n	8005428 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005422:	2301      	movs	r3, #1
 8005424:	607b      	str	r3, [r7, #4]
 8005426:	e008      	b.n	800543a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005428:	4b07      	ldr	r3, [pc, #28]	; (8005448 <xTaskGetSchedulerState+0x34>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d102      	bne.n	8005436 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005430:	2302      	movs	r3, #2
 8005432:	607b      	str	r3, [r7, #4]
 8005434:	e001      	b.n	800543a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005436:	2300      	movs	r3, #0
 8005438:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800543a:	687b      	ldr	r3, [r7, #4]
	}
 800543c:	0018      	movs	r0, r3
 800543e:	46bd      	mov	sp, r7
 8005440:	b002      	add	sp, #8
 8005442:	bd80      	pop	{r7, pc}
 8005444:	20000bd0 	.word	0x20000bd0
 8005448:	20000bec 	.word	0x20000bec

0800544c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800544c:	b580      	push	{r7, lr}
 800544e:	b084      	sub	sp, #16
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005458:	2300      	movs	r3, #0
 800545a:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d044      	beq.n	80054ec <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005462:	4b25      	ldr	r3, [pc, #148]	; (80054f8 <xTaskPriorityDisinherit+0xac>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	68ba      	ldr	r2, [r7, #8]
 8005468:	429a      	cmp	r2, r3
 800546a:	d001      	beq.n	8005470 <xTaskPriorityDisinherit+0x24>
 800546c:	b672      	cpsid	i
 800546e:	e7fe      	b.n	800546e <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005474:	2b00      	cmp	r3, #0
 8005476:	d101      	bne.n	800547c <xTaskPriorityDisinherit+0x30>
 8005478:	b672      	cpsid	i
 800547a:	e7fe      	b.n	800547a <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005480:	1e5a      	subs	r2, r3, #1
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800548e:	429a      	cmp	r2, r3
 8005490:	d02c      	beq.n	80054ec <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005496:	2b00      	cmp	r3, #0
 8005498:	d128      	bne.n	80054ec <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	3304      	adds	r3, #4
 800549e:	0018      	movs	r0, r3
 80054a0:	f7fe fd51 	bl	8003f46 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054b0:	2238      	movs	r2, #56	; 0x38
 80054b2:	1ad2      	subs	r2, r2, r3
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054bc:	4b0f      	ldr	r3, [pc, #60]	; (80054fc <xTaskPriorityDisinherit+0xb0>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d903      	bls.n	80054cc <xTaskPriorityDisinherit+0x80>
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054c8:	4b0c      	ldr	r3, [pc, #48]	; (80054fc <xTaskPriorityDisinherit+0xb0>)
 80054ca:	601a      	str	r2, [r3, #0]
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054d0:	0013      	movs	r3, r2
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	189b      	adds	r3, r3, r2
 80054d6:	009b      	lsls	r3, r3, #2
 80054d8:	4a09      	ldr	r2, [pc, #36]	; (8005500 <xTaskPriorityDisinherit+0xb4>)
 80054da:	189a      	adds	r2, r3, r2
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	3304      	adds	r3, #4
 80054e0:	0019      	movs	r1, r3
 80054e2:	0010      	movs	r0, r2
 80054e4:	f7fe fcd7 	bl	8003e96 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80054e8:	2301      	movs	r3, #1
 80054ea:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80054ec:	68fb      	ldr	r3, [r7, #12]
	}
 80054ee:	0018      	movs	r0, r3
 80054f0:	46bd      	mov	sp, r7
 80054f2:	b004      	add	sp, #16
 80054f4:	bd80      	pop	{r7, pc}
 80054f6:	46c0      	nop			; (mov r8, r8)
 80054f8:	200006f0 	.word	0x200006f0
 80054fc:	20000bcc 	.word	0x20000bcc
 8005500:	200006f4 	.word	0x200006f4

08005504 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b084      	sub	sp, #16
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
 800550c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800550e:	4b21      	ldr	r3, [pc, #132]	; (8005594 <prvAddCurrentTaskToDelayedList+0x90>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005514:	4b20      	ldr	r3, [pc, #128]	; (8005598 <prvAddCurrentTaskToDelayedList+0x94>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	3304      	adds	r3, #4
 800551a:	0018      	movs	r0, r3
 800551c:	f7fe fd13 	bl	8003f46 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	3301      	adds	r3, #1
 8005524:	d10b      	bne.n	800553e <prvAddCurrentTaskToDelayedList+0x3a>
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d008      	beq.n	800553e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800552c:	4b1a      	ldr	r3, [pc, #104]	; (8005598 <prvAddCurrentTaskToDelayedList+0x94>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	1d1a      	adds	r2, r3, #4
 8005532:	4b1a      	ldr	r3, [pc, #104]	; (800559c <prvAddCurrentTaskToDelayedList+0x98>)
 8005534:	0011      	movs	r1, r2
 8005536:	0018      	movs	r0, r3
 8005538:	f7fe fcad 	bl	8003e96 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800553c:	e026      	b.n	800558c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800553e:	68fa      	ldr	r2, [r7, #12]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	18d3      	adds	r3, r2, r3
 8005544:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005546:	4b14      	ldr	r3, [pc, #80]	; (8005598 <prvAddCurrentTaskToDelayedList+0x94>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	68ba      	ldr	r2, [r7, #8]
 800554c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800554e:	68ba      	ldr	r2, [r7, #8]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	429a      	cmp	r2, r3
 8005554:	d209      	bcs.n	800556a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005556:	4b12      	ldr	r3, [pc, #72]	; (80055a0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	4b0f      	ldr	r3, [pc, #60]	; (8005598 <prvAddCurrentTaskToDelayedList+0x94>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	3304      	adds	r3, #4
 8005560:	0019      	movs	r1, r3
 8005562:	0010      	movs	r0, r2
 8005564:	f7fe fcb9 	bl	8003eda <vListInsert>
}
 8005568:	e010      	b.n	800558c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800556a:	4b0e      	ldr	r3, [pc, #56]	; (80055a4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	4b0a      	ldr	r3, [pc, #40]	; (8005598 <prvAddCurrentTaskToDelayedList+0x94>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	3304      	adds	r3, #4
 8005574:	0019      	movs	r1, r3
 8005576:	0010      	movs	r0, r2
 8005578:	f7fe fcaf 	bl	8003eda <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800557c:	4b0a      	ldr	r3, [pc, #40]	; (80055a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	68ba      	ldr	r2, [r7, #8]
 8005582:	429a      	cmp	r2, r3
 8005584:	d202      	bcs.n	800558c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005586:	4b08      	ldr	r3, [pc, #32]	; (80055a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005588:	68ba      	ldr	r2, [r7, #8]
 800558a:	601a      	str	r2, [r3, #0]
}
 800558c:	46c0      	nop			; (mov r8, r8)
 800558e:	46bd      	mov	sp, r7
 8005590:	b004      	add	sp, #16
 8005592:	bd80      	pop	{r7, pc}
 8005594:	20000bc8 	.word	0x20000bc8
 8005598:	200006f0 	.word	0x200006f0
 800559c:	20000bb0 	.word	0x20000bb0
 80055a0:	20000b80 	.word	0x20000b80
 80055a4:	20000b7c 	.word	0x20000b7c
 80055a8:	20000be4 	.word	0x20000be4

080055ac <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80055ac:	b590      	push	{r4, r7, lr}
 80055ae:	b089      	sub	sp, #36	; 0x24
 80055b0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80055b2:	2300      	movs	r3, #0
 80055b4:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80055b6:	f000 fa87 	bl	8005ac8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80055ba:	4b17      	ldr	r3, [pc, #92]	; (8005618 <xTimerCreateTimerTask+0x6c>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d020      	beq.n	8005604 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80055c2:	2300      	movs	r3, #0
 80055c4:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80055c6:	2300      	movs	r3, #0
 80055c8:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80055ca:	003a      	movs	r2, r7
 80055cc:	1d39      	adds	r1, r7, #4
 80055ce:	2308      	movs	r3, #8
 80055d0:	18fb      	adds	r3, r7, r3
 80055d2:	0018      	movs	r0, r3
 80055d4:	f7fe fc1e 	bl	8003e14 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80055d8:	683c      	ldr	r4, [r7, #0]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	68ba      	ldr	r2, [r7, #8]
 80055de:	490f      	ldr	r1, [pc, #60]	; (800561c <xTimerCreateTimerTask+0x70>)
 80055e0:	480f      	ldr	r0, [pc, #60]	; (8005620 <xTimerCreateTimerTask+0x74>)
 80055e2:	9202      	str	r2, [sp, #8]
 80055e4:	9301      	str	r3, [sp, #4]
 80055e6:	2302      	movs	r3, #2
 80055e8:	9300      	str	r3, [sp, #0]
 80055ea:	2300      	movs	r3, #0
 80055ec:	0022      	movs	r2, r4
 80055ee:	f7ff f996 	bl	800491e <xTaskCreateStatic>
 80055f2:	0002      	movs	r2, r0
 80055f4:	4b0b      	ldr	r3, [pc, #44]	; (8005624 <xTimerCreateTimerTask+0x78>)
 80055f6:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80055f8:	4b0a      	ldr	r3, [pc, #40]	; (8005624 <xTimerCreateTimerTask+0x78>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d001      	beq.n	8005604 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 8005600:	2301      	movs	r3, #1
 8005602:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d101      	bne.n	800560e <xTimerCreateTimerTask+0x62>
 800560a:	b672      	cpsid	i
 800560c:	e7fe      	b.n	800560c <xTimerCreateTimerTask+0x60>
	return xReturn;
 800560e:	68fb      	ldr	r3, [r7, #12]
}
 8005610:	0018      	movs	r0, r3
 8005612:	46bd      	mov	sp, r7
 8005614:	b005      	add	sp, #20
 8005616:	bd90      	pop	{r4, r7, pc}
 8005618:	20000c20 	.word	0x20000c20
 800561c:	08006678 	.word	0x08006678
 8005620:	0800572d 	.word	0x0800572d
 8005624:	20000c24 	.word	0x20000c24

08005628 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005628:	b590      	push	{r4, r7, lr}
 800562a:	b08b      	sub	sp, #44	; 0x2c
 800562c:	af00      	add	r7, sp, #0
 800562e:	60f8      	str	r0, [r7, #12]
 8005630:	60b9      	str	r1, [r7, #8]
 8005632:	607a      	str	r2, [r7, #4]
 8005634:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005636:	2300      	movs	r3, #0
 8005638:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d101      	bne.n	8005644 <xTimerGenericCommand+0x1c>
 8005640:	b672      	cpsid	i
 8005642:	e7fe      	b.n	8005642 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005644:	4b1c      	ldr	r3, [pc, #112]	; (80056b8 <xTimerGenericCommand+0x90>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d030      	beq.n	80056ae <xTimerGenericCommand+0x86>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800564c:	2414      	movs	r4, #20
 800564e:	193b      	adds	r3, r7, r4
 8005650:	68ba      	ldr	r2, [r7, #8]
 8005652:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005654:	193b      	adds	r3, r7, r4
 8005656:	687a      	ldr	r2, [r7, #4]
 8005658:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800565a:	193b      	adds	r3, r7, r4
 800565c:	68fa      	ldr	r2, [r7, #12]
 800565e:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	2b05      	cmp	r3, #5
 8005664:	dc19      	bgt.n	800569a <xTimerGenericCommand+0x72>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005666:	f7ff fed5 	bl	8005414 <xTaskGetSchedulerState>
 800566a:	0003      	movs	r3, r0
 800566c:	2b02      	cmp	r3, #2
 800566e:	d109      	bne.n	8005684 <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005670:	4b11      	ldr	r3, [pc, #68]	; (80056b8 <xTimerGenericCommand+0x90>)
 8005672:	6818      	ldr	r0, [r3, #0]
 8005674:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005676:	1939      	adds	r1, r7, r4
 8005678:	2300      	movs	r3, #0
 800567a:	f7fe fd88 	bl	800418e <xQueueGenericSend>
 800567e:	0003      	movs	r3, r0
 8005680:	627b      	str	r3, [r7, #36]	; 0x24
 8005682:	e014      	b.n	80056ae <xTimerGenericCommand+0x86>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005684:	4b0c      	ldr	r3, [pc, #48]	; (80056b8 <xTimerGenericCommand+0x90>)
 8005686:	6818      	ldr	r0, [r3, #0]
 8005688:	2314      	movs	r3, #20
 800568a:	18f9      	adds	r1, r7, r3
 800568c:	2300      	movs	r3, #0
 800568e:	2200      	movs	r2, #0
 8005690:	f7fe fd7d 	bl	800418e <xQueueGenericSend>
 8005694:	0003      	movs	r3, r0
 8005696:	627b      	str	r3, [r7, #36]	; 0x24
 8005698:	e009      	b.n	80056ae <xTimerGenericCommand+0x86>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800569a:	4b07      	ldr	r3, [pc, #28]	; (80056b8 <xTimerGenericCommand+0x90>)
 800569c:	6818      	ldr	r0, [r3, #0]
 800569e:	683a      	ldr	r2, [r7, #0]
 80056a0:	2314      	movs	r3, #20
 80056a2:	18f9      	adds	r1, r7, r3
 80056a4:	2300      	movs	r3, #0
 80056a6:	f7fe fe36 	bl	8004316 <xQueueGenericSendFromISR>
 80056aa:	0003      	movs	r3, r0
 80056ac:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80056ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80056b0:	0018      	movs	r0, r3
 80056b2:	46bd      	mov	sp, r7
 80056b4:	b00b      	add	sp, #44	; 0x2c
 80056b6:	bd90      	pop	{r4, r7, pc}
 80056b8:	20000c20 	.word	0x20000c20

080056bc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b086      	sub	sp, #24
 80056c0:	af02      	add	r7, sp, #8
 80056c2:	6078      	str	r0, [r7, #4]
 80056c4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80056c6:	4b18      	ldr	r3, [pc, #96]	; (8005728 <prvProcessExpiredTimer+0x6c>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	68db      	ldr	r3, [r3, #12]
 80056ce:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	3304      	adds	r3, #4
 80056d4:	0018      	movs	r0, r3
 80056d6:	f7fe fc36 	bl	8003f46 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	69db      	ldr	r3, [r3, #28]
 80056de:	2b01      	cmp	r3, #1
 80056e0:	d119      	bne.n	8005716 <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	699a      	ldr	r2, [r3, #24]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	18d1      	adds	r1, r2, r3
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	683a      	ldr	r2, [r7, #0]
 80056ee:	68f8      	ldr	r0, [r7, #12]
 80056f0:	f000 f8b6 	bl	8005860 <prvInsertTimerInActiveList>
 80056f4:	1e03      	subs	r3, r0, #0
 80056f6:	d00e      	beq.n	8005716 <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80056f8:	687a      	ldr	r2, [r7, #4]
 80056fa:	68f8      	ldr	r0, [r7, #12]
 80056fc:	2300      	movs	r3, #0
 80056fe:	9300      	str	r3, [sp, #0]
 8005700:	2300      	movs	r3, #0
 8005702:	2100      	movs	r1, #0
 8005704:	f7ff ff90 	bl	8005628 <xTimerGenericCommand>
 8005708:	0003      	movs	r3, r0
 800570a:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d101      	bne.n	8005716 <prvProcessExpiredTimer+0x5a>
 8005712:	b672      	cpsid	i
 8005714:	e7fe      	b.n	8005714 <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800571a:	68fa      	ldr	r2, [r7, #12]
 800571c:	0010      	movs	r0, r2
 800571e:	4798      	blx	r3
}
 8005720:	46c0      	nop			; (mov r8, r8)
 8005722:	46bd      	mov	sp, r7
 8005724:	b004      	add	sp, #16
 8005726:	bd80      	pop	{r7, pc}
 8005728:	20000c18 	.word	0x20000c18

0800572c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b084      	sub	sp, #16
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005734:	2308      	movs	r3, #8
 8005736:	18fb      	adds	r3, r7, r3
 8005738:	0018      	movs	r0, r3
 800573a:	f000 f851 	bl	80057e0 <prvGetNextExpireTime>
 800573e:	0003      	movs	r3, r0
 8005740:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005742:	68ba      	ldr	r2, [r7, #8]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	0011      	movs	r1, r2
 8005748:	0018      	movs	r0, r3
 800574a:	f000 f803 	bl	8005754 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800574e:	f000 f8c9 	bl	80058e4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005752:	e7ef      	b.n	8005734 <prvTimerTask+0x8>

08005754 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b084      	sub	sp, #16
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800575e:	f7ff fad1 	bl	8004d04 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005762:	2308      	movs	r3, #8
 8005764:	18fb      	adds	r3, r7, r3
 8005766:	0018      	movs	r0, r3
 8005768:	f000 f85a 	bl	8005820 <prvSampleTimeNow>
 800576c:	0003      	movs	r3, r0
 800576e:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d129      	bne.n	80057ca <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d10c      	bne.n	8005796 <prvProcessTimerOrBlockTask+0x42>
 800577c:	687a      	ldr	r2, [r7, #4]
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	429a      	cmp	r2, r3
 8005782:	d808      	bhi.n	8005796 <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 8005784:	f7ff faca 	bl	8004d1c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005788:	68fa      	ldr	r2, [r7, #12]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	0011      	movs	r1, r2
 800578e:	0018      	movs	r0, r3
 8005790:	f7ff ff94 	bl	80056bc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005794:	e01b      	b.n	80057ce <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d006      	beq.n	80057aa <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800579c:	4b0e      	ldr	r3, [pc, #56]	; (80057d8 <prvProcessTimerOrBlockTask+0x84>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	425a      	negs	r2, r3
 80057a4:	4153      	adcs	r3, r2
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80057aa:	4b0c      	ldr	r3, [pc, #48]	; (80057dc <prvProcessTimerOrBlockTask+0x88>)
 80057ac:	6818      	ldr	r0, [r3, #0]
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	1ad3      	subs	r3, r2, r3
 80057b4:	683a      	ldr	r2, [r7, #0]
 80057b6:	0019      	movs	r1, r3
 80057b8:	f7ff f87e 	bl	80048b8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80057bc:	f7ff faae 	bl	8004d1c <xTaskResumeAll>
 80057c0:	1e03      	subs	r3, r0, #0
 80057c2:	d104      	bne.n	80057ce <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 80057c4:	f000 fa4c 	bl	8005c60 <vPortYield>
}
 80057c8:	e001      	b.n	80057ce <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 80057ca:	f7ff faa7 	bl	8004d1c <xTaskResumeAll>
}
 80057ce:	46c0      	nop			; (mov r8, r8)
 80057d0:	46bd      	mov	sp, r7
 80057d2:	b004      	add	sp, #16
 80057d4:	bd80      	pop	{r7, pc}
 80057d6:	46c0      	nop			; (mov r8, r8)
 80057d8:	20000c1c 	.word	0x20000c1c
 80057dc:	20000c20 	.word	0x20000c20

080057e0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b084      	sub	sp, #16
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80057e8:	4b0c      	ldr	r3, [pc, #48]	; (800581c <prvGetNextExpireTime+0x3c>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	425a      	negs	r2, r3
 80057f0:	4153      	adcs	r3, r2
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	001a      	movs	r2, r3
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d105      	bne.n	800580e <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005802:	4b06      	ldr	r3, [pc, #24]	; (800581c <prvGetNextExpireTime+0x3c>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	68db      	ldr	r3, [r3, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	60fb      	str	r3, [r7, #12]
 800580c:	e001      	b.n	8005812 <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800580e:	2300      	movs	r3, #0
 8005810:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005812:	68fb      	ldr	r3, [r7, #12]
}
 8005814:	0018      	movs	r0, r3
 8005816:	46bd      	mov	sp, r7
 8005818:	b004      	add	sp, #16
 800581a:	bd80      	pop	{r7, pc}
 800581c:	20000c18 	.word	0x20000c18

08005820 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b084      	sub	sp, #16
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005828:	f7ff fb04 	bl	8004e34 <xTaskGetTickCount>
 800582c:	0003      	movs	r3, r0
 800582e:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 8005830:	4b0a      	ldr	r3, [pc, #40]	; (800585c <prvSampleTimeNow+0x3c>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	68fa      	ldr	r2, [r7, #12]
 8005836:	429a      	cmp	r2, r3
 8005838:	d205      	bcs.n	8005846 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 800583a:	f000 f8eb 	bl	8005a14 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2201      	movs	r2, #1
 8005842:	601a      	str	r2, [r3, #0]
 8005844:	e002      	b.n	800584c <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2200      	movs	r2, #0
 800584a:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800584c:	4b03      	ldr	r3, [pc, #12]	; (800585c <prvSampleTimeNow+0x3c>)
 800584e:	68fa      	ldr	r2, [r7, #12]
 8005850:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 8005852:	68fb      	ldr	r3, [r7, #12]
}
 8005854:	0018      	movs	r0, r3
 8005856:	46bd      	mov	sp, r7
 8005858:	b004      	add	sp, #16
 800585a:	bd80      	pop	{r7, pc}
 800585c:	20000c28 	.word	0x20000c28

08005860 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b086      	sub	sp, #24
 8005864:	af00      	add	r7, sp, #0
 8005866:	60f8      	str	r0, [r7, #12]
 8005868:	60b9      	str	r1, [r7, #8]
 800586a:	607a      	str	r2, [r7, #4]
 800586c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800586e:	2300      	movs	r3, #0
 8005870:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	68ba      	ldr	r2, [r7, #8]
 8005876:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	68fa      	ldr	r2, [r7, #12]
 800587c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800587e:	68ba      	ldr	r2, [r7, #8]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	429a      	cmp	r2, r3
 8005884:	d812      	bhi.n	80058ac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005886:	687a      	ldr	r2, [r7, #4]
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	1ad2      	subs	r2, r2, r3
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	699b      	ldr	r3, [r3, #24]
 8005890:	429a      	cmp	r2, r3
 8005892:	d302      	bcc.n	800589a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005894:	2301      	movs	r3, #1
 8005896:	617b      	str	r3, [r7, #20]
 8005898:	e01b      	b.n	80058d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800589a:	4b10      	ldr	r3, [pc, #64]	; (80058dc <prvInsertTimerInActiveList+0x7c>)
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	3304      	adds	r3, #4
 80058a2:	0019      	movs	r1, r3
 80058a4:	0010      	movs	r0, r2
 80058a6:	f7fe fb18 	bl	8003eda <vListInsert>
 80058aa:	e012      	b.n	80058d2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80058ac:	687a      	ldr	r2, [r7, #4]
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d206      	bcs.n	80058c2 <prvInsertTimerInActiveList+0x62>
 80058b4:	68ba      	ldr	r2, [r7, #8]
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d302      	bcc.n	80058c2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80058bc:	2301      	movs	r3, #1
 80058be:	617b      	str	r3, [r7, #20]
 80058c0:	e007      	b.n	80058d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80058c2:	4b07      	ldr	r3, [pc, #28]	; (80058e0 <prvInsertTimerInActiveList+0x80>)
 80058c4:	681a      	ldr	r2, [r3, #0]
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	3304      	adds	r3, #4
 80058ca:	0019      	movs	r1, r3
 80058cc:	0010      	movs	r0, r2
 80058ce:	f7fe fb04 	bl	8003eda <vListInsert>
		}
	}

	return xProcessTimerNow;
 80058d2:	697b      	ldr	r3, [r7, #20]
}
 80058d4:	0018      	movs	r0, r3
 80058d6:	46bd      	mov	sp, r7
 80058d8:	b006      	add	sp, #24
 80058da:	bd80      	pop	{r7, pc}
 80058dc:	20000c1c 	.word	0x20000c1c
 80058e0:	20000c18 	.word	0x20000c18

080058e4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80058e4:	b590      	push	{r4, r7, lr}
 80058e6:	b08d      	sub	sp, #52	; 0x34
 80058e8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80058ea:	e07f      	b.n	80059ec <prvProcessReceivedCommands+0x108>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80058ec:	2208      	movs	r2, #8
 80058ee:	18bb      	adds	r3, r7, r2
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	da0f      	bge.n	8005916 <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80058f6:	18bb      	adds	r3, r7, r2
 80058f8:	3304      	adds	r3, #4
 80058fa:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80058fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d101      	bne.n	8005906 <prvProcessReceivedCommands+0x22>
 8005902:	b672      	cpsid	i
 8005904:	e7fe      	b.n	8005904 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590c:	6858      	ldr	r0, [r3, #4]
 800590e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	0019      	movs	r1, r3
 8005914:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005916:	2208      	movs	r2, #8
 8005918:	18bb      	adds	r3, r7, r2
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	2b00      	cmp	r3, #0
 800591e:	db64      	blt.n	80059ea <prvProcessReceivedCommands+0x106>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005920:	18bb      	adds	r3, r7, r2
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005926:	6a3b      	ldr	r3, [r7, #32]
 8005928:	695b      	ldr	r3, [r3, #20]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d004      	beq.n	8005938 <prvProcessReceivedCommands+0x54>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800592e:	6a3b      	ldr	r3, [r7, #32]
 8005930:	3304      	adds	r3, #4
 8005932:	0018      	movs	r0, r3
 8005934:	f7fe fb07 	bl	8003f46 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005938:	1d3b      	adds	r3, r7, #4
 800593a:	0018      	movs	r0, r3
 800593c:	f7ff ff70 	bl	8005820 <prvSampleTimeNow>
 8005940:	0003      	movs	r3, r0
 8005942:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 8005944:	2308      	movs	r3, #8
 8005946:	18fb      	adds	r3, r7, r3
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	2b09      	cmp	r3, #9
 800594c:	d84e      	bhi.n	80059ec <prvProcessReceivedCommands+0x108>
 800594e:	009a      	lsls	r2, r3, #2
 8005950:	4b2e      	ldr	r3, [pc, #184]	; (8005a0c <prvProcessReceivedCommands+0x128>)
 8005952:	18d3      	adds	r3, r2, r3
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005958:	2408      	movs	r4, #8
 800595a:	193b      	adds	r3, r7, r4
 800595c:	685a      	ldr	r2, [r3, #4]
 800595e:	6a3b      	ldr	r3, [r7, #32]
 8005960:	699b      	ldr	r3, [r3, #24]
 8005962:	18d1      	adds	r1, r2, r3
 8005964:	193b      	adds	r3, r7, r4
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	69fa      	ldr	r2, [r7, #28]
 800596a:	6a38      	ldr	r0, [r7, #32]
 800596c:	f7ff ff78 	bl	8005860 <prvInsertTimerInActiveList>
 8005970:	1e03      	subs	r3, r0, #0
 8005972:	d03b      	beq.n	80059ec <prvProcessReceivedCommands+0x108>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005974:	6a3b      	ldr	r3, [r7, #32]
 8005976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005978:	6a3a      	ldr	r2, [r7, #32]
 800597a:	0010      	movs	r0, r2
 800597c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800597e:	6a3b      	ldr	r3, [r7, #32]
 8005980:	69db      	ldr	r3, [r3, #28]
 8005982:	2b01      	cmp	r3, #1
 8005984:	d132      	bne.n	80059ec <prvProcessReceivedCommands+0x108>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005986:	193b      	adds	r3, r7, r4
 8005988:	685a      	ldr	r2, [r3, #4]
 800598a:	6a3b      	ldr	r3, [r7, #32]
 800598c:	699b      	ldr	r3, [r3, #24]
 800598e:	18d2      	adds	r2, r2, r3
 8005990:	6a38      	ldr	r0, [r7, #32]
 8005992:	2300      	movs	r3, #0
 8005994:	9300      	str	r3, [sp, #0]
 8005996:	2300      	movs	r3, #0
 8005998:	2100      	movs	r1, #0
 800599a:	f7ff fe45 	bl	8005628 <xTimerGenericCommand>
 800599e:	0003      	movs	r3, r0
 80059a0:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 80059a2:	69bb      	ldr	r3, [r7, #24]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d121      	bne.n	80059ec <prvProcessReceivedCommands+0x108>
 80059a8:	b672      	cpsid	i
 80059aa:	e7fe      	b.n	80059aa <prvProcessReceivedCommands+0xc6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80059ac:	2308      	movs	r3, #8
 80059ae:	18fb      	adds	r3, r7, r3
 80059b0:	685a      	ldr	r2, [r3, #4]
 80059b2:	6a3b      	ldr	r3, [r7, #32]
 80059b4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80059b6:	6a3b      	ldr	r3, [r7, #32]
 80059b8:	699b      	ldr	r3, [r3, #24]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d101      	bne.n	80059c2 <prvProcessReceivedCommands+0xde>
 80059be:	b672      	cpsid	i
 80059c0:	e7fe      	b.n	80059c0 <prvProcessReceivedCommands+0xdc>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80059c2:	6a3b      	ldr	r3, [r7, #32]
 80059c4:	699a      	ldr	r2, [r3, #24]
 80059c6:	69fb      	ldr	r3, [r7, #28]
 80059c8:	18d1      	adds	r1, r2, r3
 80059ca:	69fb      	ldr	r3, [r7, #28]
 80059cc:	69fa      	ldr	r2, [r7, #28]
 80059ce:	6a38      	ldr	r0, [r7, #32]
 80059d0:	f7ff ff46 	bl	8005860 <prvInsertTimerInActiveList>
					break;
 80059d4:	e00a      	b.n	80059ec <prvProcessReceivedCommands+0x108>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80059d6:	6a3b      	ldr	r3, [r7, #32]
 80059d8:	222c      	movs	r2, #44	; 0x2c
 80059da:	5c9b      	ldrb	r3, [r3, r2]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d105      	bne.n	80059ec <prvProcessReceivedCommands+0x108>
						{
							vPortFree( pxTimer );
 80059e0:	6a3b      	ldr	r3, [r7, #32]
 80059e2:	0018      	movs	r0, r3
 80059e4:	f000 fa8a 	bl	8005efc <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80059e8:	e000      	b.n	80059ec <prvProcessReceivedCommands+0x108>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80059ea:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80059ec:	4b08      	ldr	r3, [pc, #32]	; (8005a10 <prvProcessReceivedCommands+0x12c>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	2208      	movs	r2, #8
 80059f2:	18b9      	adds	r1, r7, r2
 80059f4:	2200      	movs	r2, #0
 80059f6:	0018      	movs	r0, r3
 80059f8:	f7fe fd63 	bl	80044c2 <xQueueReceive>
 80059fc:	1e03      	subs	r3, r0, #0
 80059fe:	d000      	beq.n	8005a02 <prvProcessReceivedCommands+0x11e>
 8005a00:	e774      	b.n	80058ec <prvProcessReceivedCommands+0x8>
	}
}
 8005a02:	46c0      	nop			; (mov r8, r8)
 8005a04:	46c0      	nop			; (mov r8, r8)
 8005a06:	46bd      	mov	sp, r7
 8005a08:	b00b      	add	sp, #44	; 0x2c
 8005a0a:	bd90      	pop	{r4, r7, pc}
 8005a0c:	080066bc 	.word	0x080066bc
 8005a10:	20000c20 	.word	0x20000c20

08005a14 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b088      	sub	sp, #32
 8005a18:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005a1a:	e03e      	b.n	8005a9a <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005a1c:	4b28      	ldr	r3, [pc, #160]	; (8005ac0 <prvSwitchTimerLists+0xac>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	68db      	ldr	r3, [r3, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005a26:	4b26      	ldr	r3, [pc, #152]	; (8005ac0 <prvSwitchTimerLists+0xac>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	68db      	ldr	r3, [r3, #12]
 8005a2c:	68db      	ldr	r3, [r3, #12]
 8005a2e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	3304      	adds	r3, #4
 8005a34:	0018      	movs	r0, r3
 8005a36:	f7fe fa86 	bl	8003f46 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a3e:	68fa      	ldr	r2, [r7, #12]
 8005a40:	0010      	movs	r0, r2
 8005a42:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	69db      	ldr	r3, [r3, #28]
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	d126      	bne.n	8005a9a <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	699b      	ldr	r3, [r3, #24]
 8005a50:	693a      	ldr	r2, [r7, #16]
 8005a52:	18d3      	adds	r3, r2, r3
 8005a54:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005a56:	68ba      	ldr	r2, [r7, #8]
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d90e      	bls.n	8005a7c <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	68ba      	ldr	r2, [r7, #8]
 8005a62:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	68fa      	ldr	r2, [r7, #12]
 8005a68:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005a6a:	4b15      	ldr	r3, [pc, #84]	; (8005ac0 <prvSwitchTimerLists+0xac>)
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	3304      	adds	r3, #4
 8005a72:	0019      	movs	r1, r3
 8005a74:	0010      	movs	r0, r2
 8005a76:	f7fe fa30 	bl	8003eda <vListInsert>
 8005a7a:	e00e      	b.n	8005a9a <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005a7c:	693a      	ldr	r2, [r7, #16]
 8005a7e:	68f8      	ldr	r0, [r7, #12]
 8005a80:	2300      	movs	r3, #0
 8005a82:	9300      	str	r3, [sp, #0]
 8005a84:	2300      	movs	r3, #0
 8005a86:	2100      	movs	r1, #0
 8005a88:	f7ff fdce 	bl	8005628 <xTimerGenericCommand>
 8005a8c:	0003      	movs	r3, r0
 8005a8e:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d101      	bne.n	8005a9a <prvSwitchTimerLists+0x86>
 8005a96:	b672      	cpsid	i
 8005a98:	e7fe      	b.n	8005a98 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005a9a:	4b09      	ldr	r3, [pc, #36]	; (8005ac0 <prvSwitchTimerLists+0xac>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d1bb      	bne.n	8005a1c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005aa4:	4b06      	ldr	r3, [pc, #24]	; (8005ac0 <prvSwitchTimerLists+0xac>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005aaa:	4b06      	ldr	r3, [pc, #24]	; (8005ac4 <prvSwitchTimerLists+0xb0>)
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	4b04      	ldr	r3, [pc, #16]	; (8005ac0 <prvSwitchTimerLists+0xac>)
 8005ab0:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 8005ab2:	4b04      	ldr	r3, [pc, #16]	; (8005ac4 <prvSwitchTimerLists+0xb0>)
 8005ab4:	697a      	ldr	r2, [r7, #20]
 8005ab6:	601a      	str	r2, [r3, #0]
}
 8005ab8:	46c0      	nop			; (mov r8, r8)
 8005aba:	46bd      	mov	sp, r7
 8005abc:	b006      	add	sp, #24
 8005abe:	bd80      	pop	{r7, pc}
 8005ac0:	20000c18 	.word	0x20000c18
 8005ac4:	20000c1c 	.word	0x20000c1c

08005ac8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b082      	sub	sp, #8
 8005acc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005ace:	f000 f8d7 	bl	8005c80 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005ad2:	4b16      	ldr	r3, [pc, #88]	; (8005b2c <prvCheckForValidListAndQueue+0x64>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d123      	bne.n	8005b22 <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 8005ada:	4b15      	ldr	r3, [pc, #84]	; (8005b30 <prvCheckForValidListAndQueue+0x68>)
 8005adc:	0018      	movs	r0, r3
 8005ade:	f7fe f9b1 	bl	8003e44 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005ae2:	4b14      	ldr	r3, [pc, #80]	; (8005b34 <prvCheckForValidListAndQueue+0x6c>)
 8005ae4:	0018      	movs	r0, r3
 8005ae6:	f7fe f9ad 	bl	8003e44 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005aea:	4b13      	ldr	r3, [pc, #76]	; (8005b38 <prvCheckForValidListAndQueue+0x70>)
 8005aec:	4a10      	ldr	r2, [pc, #64]	; (8005b30 <prvCheckForValidListAndQueue+0x68>)
 8005aee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005af0:	4b12      	ldr	r3, [pc, #72]	; (8005b3c <prvCheckForValidListAndQueue+0x74>)
 8005af2:	4a10      	ldr	r2, [pc, #64]	; (8005b34 <prvCheckForValidListAndQueue+0x6c>)
 8005af4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005af6:	4b12      	ldr	r3, [pc, #72]	; (8005b40 <prvCheckForValidListAndQueue+0x78>)
 8005af8:	4a12      	ldr	r2, [pc, #72]	; (8005b44 <prvCheckForValidListAndQueue+0x7c>)
 8005afa:	2100      	movs	r1, #0
 8005afc:	9100      	str	r1, [sp, #0]
 8005afe:	2110      	movs	r1, #16
 8005b00:	200a      	movs	r0, #10
 8005b02:	f7fe fa9c 	bl	800403e <xQueueGenericCreateStatic>
 8005b06:	0002      	movs	r2, r0
 8005b08:	4b08      	ldr	r3, [pc, #32]	; (8005b2c <prvCheckForValidListAndQueue+0x64>)
 8005b0a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005b0c:	4b07      	ldr	r3, [pc, #28]	; (8005b2c <prvCheckForValidListAndQueue+0x64>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d006      	beq.n	8005b22 <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005b14:	4b05      	ldr	r3, [pc, #20]	; (8005b2c <prvCheckForValidListAndQueue+0x64>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a0b      	ldr	r2, [pc, #44]	; (8005b48 <prvCheckForValidListAndQueue+0x80>)
 8005b1a:	0011      	movs	r1, r2
 8005b1c:	0018      	movs	r0, r3
 8005b1e:	f7fe fea3 	bl	8004868 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005b22:	f000 f8bf 	bl	8005ca4 <vPortExitCritical>
}
 8005b26:	46c0      	nop			; (mov r8, r8)
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}
 8005b2c:	20000c20 	.word	0x20000c20
 8005b30:	20000bf0 	.word	0x20000bf0
 8005b34:	20000c04 	.word	0x20000c04
 8005b38:	20000c18 	.word	0x20000c18
 8005b3c:	20000c1c 	.word	0x20000c1c
 8005b40:	20000ccc 	.word	0x20000ccc
 8005b44:	20000c2c 	.word	0x20000c2c
 8005b48:	08006680 	.word	0x08006680

08005b4c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b084      	sub	sp, #16
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	60f8      	str	r0, [r7, #12]
 8005b54:	60b9      	str	r1, [r7, #8]
 8005b56:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	3b04      	subs	r3, #4
 8005b5c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2280      	movs	r2, #128	; 0x80
 8005b62:	0452      	lsls	r2, r2, #17
 8005b64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	3b04      	subs	r3, #4
 8005b6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8005b6c:	68ba      	ldr	r2, [r7, #8]
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	3b04      	subs	r3, #4
 8005b76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005b78:	4a08      	ldr	r2, [pc, #32]	; (8005b9c <pxPortInitialiseStack+0x50>)
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	3b14      	subs	r3, #20
 8005b82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	3b20      	subs	r3, #32
 8005b8e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005b90:	68fb      	ldr	r3, [r7, #12]
}
 8005b92:	0018      	movs	r0, r3
 8005b94:	46bd      	mov	sp, r7
 8005b96:	b004      	add	sp, #16
 8005b98:	bd80      	pop	{r7, pc}
 8005b9a:	46c0      	nop			; (mov r8, r8)
 8005b9c:	08005ba1 	.word	0x08005ba1

08005ba0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b082      	sub	sp, #8
 8005ba4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005baa:	4b08      	ldr	r3, [pc, #32]	; (8005bcc <prvTaskExitError+0x2c>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	3301      	adds	r3, #1
 8005bb0:	d001      	beq.n	8005bb6 <prvTaskExitError+0x16>
 8005bb2:	b672      	cpsid	i
 8005bb4:	e7fe      	b.n	8005bb4 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8005bb6:	b672      	cpsid	i
	while( ulDummy == 0 )
 8005bb8:	46c0      	nop			; (mov r8, r8)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d0fc      	beq.n	8005bba <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005bc0:	46c0      	nop			; (mov r8, r8)
 8005bc2:	46c0      	nop			; (mov r8, r8)
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	b002      	add	sp, #8
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	46c0      	nop			; (mov r8, r8)
 8005bcc:	2000000c 	.word	0x2000000c

08005bd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8005bd4:	46c0      	nop			; (mov r8, r8)
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}
 8005bda:	0000      	movs	r0, r0
 8005bdc:	0000      	movs	r0, r0
	...

08005be0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8005be0:	4a0b      	ldr	r2, [pc, #44]	; (8005c10 <pxCurrentTCBConst2>)
 8005be2:	6813      	ldr	r3, [r2, #0]
 8005be4:	6818      	ldr	r0, [r3, #0]
 8005be6:	3020      	adds	r0, #32
 8005be8:	f380 8809 	msr	PSP, r0
 8005bec:	2002      	movs	r0, #2
 8005bee:	f380 8814 	msr	CONTROL, r0
 8005bf2:	f3bf 8f6f 	isb	sy
 8005bf6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8005bf8:	46ae      	mov	lr, r5
 8005bfa:	bc08      	pop	{r3}
 8005bfc:	bc04      	pop	{r2}
 8005bfe:	b662      	cpsie	i
 8005c00:	4718      	bx	r3
 8005c02:	46c0      	nop			; (mov r8, r8)
 8005c04:	46c0      	nop			; (mov r8, r8)
 8005c06:	46c0      	nop			; (mov r8, r8)
 8005c08:	46c0      	nop			; (mov r8, r8)
 8005c0a:	46c0      	nop			; (mov r8, r8)
 8005c0c:	46c0      	nop			; (mov r8, r8)
 8005c0e:	46c0      	nop			; (mov r8, r8)

08005c10 <pxCurrentTCBConst2>:
 8005c10:	200006f0 	.word	0x200006f0
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8005c14:	46c0      	nop			; (mov r8, r8)
 8005c16:	46c0      	nop			; (mov r8, r8)

08005c18 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8005c1c:	4b0e      	ldr	r3, [pc, #56]	; (8005c58 <xPortStartScheduler+0x40>)
 8005c1e:	681a      	ldr	r2, [r3, #0]
 8005c20:	4b0d      	ldr	r3, [pc, #52]	; (8005c58 <xPortStartScheduler+0x40>)
 8005c22:	21ff      	movs	r1, #255	; 0xff
 8005c24:	0409      	lsls	r1, r1, #16
 8005c26:	430a      	orrs	r2, r1
 8005c28:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8005c2a:	4b0b      	ldr	r3, [pc, #44]	; (8005c58 <xPortStartScheduler+0x40>)
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	4b0a      	ldr	r3, [pc, #40]	; (8005c58 <xPortStartScheduler+0x40>)
 8005c30:	21ff      	movs	r1, #255	; 0xff
 8005c32:	0609      	lsls	r1, r1, #24
 8005c34:	430a      	orrs	r2, r1
 8005c36:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8005c38:	f000 f898 	bl	8005d6c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005c3c:	4b07      	ldr	r3, [pc, #28]	; (8005c5c <xPortStartScheduler+0x44>)
 8005c3e:	2200      	movs	r2, #0
 8005c40:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8005c42:	f7ff ffcd 	bl	8005be0 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005c46:	f7ff f9b7 	bl	8004fb8 <vTaskSwitchContext>
	prvTaskExitError();
 8005c4a:	f7ff ffa9 	bl	8005ba0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005c4e:	2300      	movs	r3, #0
}
 8005c50:	0018      	movs	r0, r3
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	46c0      	nop			; (mov r8, r8)
 8005c58:	e000ed20 	.word	0xe000ed20
 8005c5c:	2000000c 	.word	0x2000000c

08005c60 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8005c64:	4b05      	ldr	r3, [pc, #20]	; (8005c7c <vPortYield+0x1c>)
 8005c66:	2280      	movs	r2, #128	; 0x80
 8005c68:	0552      	lsls	r2, r2, #21
 8005c6a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8005c6c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8005c70:	f3bf 8f6f 	isb	sy
}
 8005c74:	46c0      	nop			; (mov r8, r8)
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}
 8005c7a:	46c0      	nop			; (mov r8, r8)
 8005c7c:	e000ed04 	.word	0xe000ed04

08005c80 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8005c84:	b672      	cpsid	i
    uxCriticalNesting++;
 8005c86:	4b06      	ldr	r3, [pc, #24]	; (8005ca0 <vPortEnterCritical+0x20>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	1c5a      	adds	r2, r3, #1
 8005c8c:	4b04      	ldr	r3, [pc, #16]	; (8005ca0 <vPortEnterCritical+0x20>)
 8005c8e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8005c90:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8005c94:	f3bf 8f6f 	isb	sy
}
 8005c98:	46c0      	nop			; (mov r8, r8)
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}
 8005c9e:	46c0      	nop			; (mov r8, r8)
 8005ca0:	2000000c 	.word	0x2000000c

08005ca4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005ca8:	4b09      	ldr	r3, [pc, #36]	; (8005cd0 <vPortExitCritical+0x2c>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d101      	bne.n	8005cb4 <vPortExitCritical+0x10>
 8005cb0:	b672      	cpsid	i
 8005cb2:	e7fe      	b.n	8005cb2 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8005cb4:	4b06      	ldr	r3, [pc, #24]	; (8005cd0 <vPortExitCritical+0x2c>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	1e5a      	subs	r2, r3, #1
 8005cba:	4b05      	ldr	r3, [pc, #20]	; (8005cd0 <vPortExitCritical+0x2c>)
 8005cbc:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 8005cbe:	4b04      	ldr	r3, [pc, #16]	; (8005cd0 <vPortExitCritical+0x2c>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d100      	bne.n	8005cc8 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8005cc6:	b662      	cpsie	i
    }
}
 8005cc8:	46c0      	nop			; (mov r8, r8)
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}
 8005cce:	46c0      	nop			; (mov r8, r8)
 8005cd0:	2000000c 	.word	0x2000000c

08005cd4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8005cd4:	f3ef 8010 	mrs	r0, PRIMASK
 8005cd8:	b672      	cpsid	i
 8005cda:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 8005cdc:	46c0      	nop			; (mov r8, r8)
 8005cde:	0018      	movs	r0, r3

08005ce0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8005ce0:	f380 8810 	msr	PRIMASK, r0
 8005ce4:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8005ce6:	46c0      	nop			; (mov r8, r8)
	...

08005cf0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005cf0:	f3ef 8009 	mrs	r0, PSP
 8005cf4:	4b0e      	ldr	r3, [pc, #56]	; (8005d30 <pxCurrentTCBConst>)
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	3820      	subs	r0, #32
 8005cfa:	6010      	str	r0, [r2, #0]
 8005cfc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8005cfe:	4644      	mov	r4, r8
 8005d00:	464d      	mov	r5, r9
 8005d02:	4656      	mov	r6, sl
 8005d04:	465f      	mov	r7, fp
 8005d06:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8005d08:	b508      	push	{r3, lr}
 8005d0a:	b672      	cpsid	i
 8005d0c:	f7ff f954 	bl	8004fb8 <vTaskSwitchContext>
 8005d10:	b662      	cpsie	i
 8005d12:	bc0c      	pop	{r2, r3}
 8005d14:	6811      	ldr	r1, [r2, #0]
 8005d16:	6808      	ldr	r0, [r1, #0]
 8005d18:	3010      	adds	r0, #16
 8005d1a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8005d1c:	46a0      	mov	r8, r4
 8005d1e:	46a9      	mov	r9, r5
 8005d20:	46b2      	mov	sl, r6
 8005d22:	46bb      	mov	fp, r7
 8005d24:	f380 8809 	msr	PSP, r0
 8005d28:	3820      	subs	r0, #32
 8005d2a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8005d2c:	4718      	bx	r3
 8005d2e:	46c0      	nop			; (mov r8, r8)

08005d30 <pxCurrentTCBConst>:
 8005d30:	200006f0 	.word	0x200006f0
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8005d34:	46c0      	nop			; (mov r8, r8)
 8005d36:	46c0      	nop			; (mov r8, r8)

08005d38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b082      	sub	sp, #8
 8005d3c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8005d3e:	f7ff ffc9 	bl	8005cd4 <ulSetInterruptMaskFromISR>
 8005d42:	0003      	movs	r3, r0
 8005d44:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005d46:	f7ff f883 	bl	8004e50 <xTaskIncrementTick>
 8005d4a:	1e03      	subs	r3, r0, #0
 8005d4c:	d003      	beq.n	8005d56 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8005d4e:	4b06      	ldr	r3, [pc, #24]	; (8005d68 <xPortSysTickHandler+0x30>)
 8005d50:	2280      	movs	r2, #128	; 0x80
 8005d52:	0552      	lsls	r2, r2, #21
 8005d54:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	0018      	movs	r0, r3
 8005d5a:	f7ff ffc1 	bl	8005ce0 <vClearInterruptMaskFromISR>
}
 8005d5e:	46c0      	nop			; (mov r8, r8)
 8005d60:	46bd      	mov	sp, r7
 8005d62:	b002      	add	sp, #8
 8005d64:	bd80      	pop	{r7, pc}
 8005d66:	46c0      	nop			; (mov r8, r8)
 8005d68:	e000ed04 	.word	0xe000ed04

08005d6c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8005d70:	4b0b      	ldr	r3, [pc, #44]	; (8005da0 <prvSetupTimerInterrupt+0x34>)
 8005d72:	2200      	movs	r2, #0
 8005d74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8005d76:	4b0b      	ldr	r3, [pc, #44]	; (8005da4 <prvSetupTimerInterrupt+0x38>)
 8005d78:	2200      	movs	r2, #0
 8005d7a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005d7c:	4b0a      	ldr	r3, [pc, #40]	; (8005da8 <prvSetupTimerInterrupt+0x3c>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	22fa      	movs	r2, #250	; 0xfa
 8005d82:	0091      	lsls	r1, r2, #2
 8005d84:	0018      	movs	r0, r3
 8005d86:	f7fa f9bf 	bl	8000108 <__udivsi3>
 8005d8a:	0003      	movs	r3, r0
 8005d8c:	001a      	movs	r2, r3
 8005d8e:	4b07      	ldr	r3, [pc, #28]	; (8005dac <prvSetupTimerInterrupt+0x40>)
 8005d90:	3a01      	subs	r2, #1
 8005d92:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8005d94:	4b02      	ldr	r3, [pc, #8]	; (8005da0 <prvSetupTimerInterrupt+0x34>)
 8005d96:	2207      	movs	r2, #7
 8005d98:	601a      	str	r2, [r3, #0]
}
 8005d9a:	46c0      	nop			; (mov r8, r8)
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}
 8005da0:	e000e010 	.word	0xe000e010
 8005da4:	e000e018 	.word	0xe000e018
 8005da8:	20000000 	.word	0x20000000
 8005dac:	e000e014 	.word	0xe000e014

08005db0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b086      	sub	sp, #24
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005db8:	2300      	movs	r3, #0
 8005dba:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8005dbc:	f7fe ffa2 	bl	8004d04 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005dc0:	4b49      	ldr	r3, [pc, #292]	; (8005ee8 <pvPortMalloc+0x138>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d101      	bne.n	8005dcc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005dc8:	f000 f8e0 	bl	8005f8c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005dcc:	4b47      	ldr	r3, [pc, #284]	; (8005eec <pvPortMalloc+0x13c>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	687a      	ldr	r2, [r7, #4]
 8005dd2:	4013      	ands	r3, r2
 8005dd4:	d000      	beq.n	8005dd8 <pvPortMalloc+0x28>
 8005dd6:	e079      	b.n	8005ecc <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d012      	beq.n	8005e04 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 8005dde:	2208      	movs	r2, #8
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	189b      	adds	r3, r3, r2
 8005de4:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2207      	movs	r2, #7
 8005dea:	4013      	ands	r3, r2
 8005dec:	d00a      	beq.n	8005e04 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2207      	movs	r2, #7
 8005df2:	4393      	bics	r3, r2
 8005df4:	3308      	adds	r3, #8
 8005df6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2207      	movs	r2, #7
 8005dfc:	4013      	ands	r3, r2
 8005dfe:	d001      	beq.n	8005e04 <pvPortMalloc+0x54>
 8005e00:	b672      	cpsid	i
 8005e02:	e7fe      	b.n	8005e02 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d060      	beq.n	8005ecc <pvPortMalloc+0x11c>
 8005e0a:	4b39      	ldr	r3, [pc, #228]	; (8005ef0 <pvPortMalloc+0x140>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d85b      	bhi.n	8005ecc <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005e14:	4b37      	ldr	r3, [pc, #220]	; (8005ef4 <pvPortMalloc+0x144>)
 8005e16:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8005e18:	4b36      	ldr	r3, [pc, #216]	; (8005ef4 <pvPortMalloc+0x144>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005e1e:	e004      	b.n	8005e2a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	687a      	ldr	r2, [r7, #4]
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d903      	bls.n	8005e3c <pvPortMalloc+0x8c>
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d1f1      	bne.n	8005e20 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005e3c:	4b2a      	ldr	r3, [pc, #168]	; (8005ee8 <pvPortMalloc+0x138>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	697a      	ldr	r2, [r7, #20]
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d042      	beq.n	8005ecc <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	2208      	movs	r2, #8
 8005e4c:	189b      	adds	r3, r3, r2
 8005e4e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	685a      	ldr	r2, [r3, #4]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	1ad2      	subs	r2, r2, r3
 8005e60:	2308      	movs	r3, #8
 8005e62:	005b      	lsls	r3, r3, #1
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d916      	bls.n	8005e96 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005e68:	697a      	ldr	r2, [r7, #20]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	18d3      	adds	r3, r2, r3
 8005e6e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	2207      	movs	r2, #7
 8005e74:	4013      	ands	r3, r2
 8005e76:	d001      	beq.n	8005e7c <pvPortMalloc+0xcc>
 8005e78:	b672      	cpsid	i
 8005e7a:	e7fe      	b.n	8005e7a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	685a      	ldr	r2, [r3, #4]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	1ad2      	subs	r2, r2, r3
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	687a      	ldr	r2, [r7, #4]
 8005e8c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	0018      	movs	r0, r3
 8005e92:	f000 f8db 	bl	800604c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005e96:	4b16      	ldr	r3, [pc, #88]	; (8005ef0 <pvPortMalloc+0x140>)
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	1ad2      	subs	r2, r2, r3
 8005ea0:	4b13      	ldr	r3, [pc, #76]	; (8005ef0 <pvPortMalloc+0x140>)
 8005ea2:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005ea4:	4b12      	ldr	r3, [pc, #72]	; (8005ef0 <pvPortMalloc+0x140>)
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	4b13      	ldr	r3, [pc, #76]	; (8005ef8 <pvPortMalloc+0x148>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	429a      	cmp	r2, r3
 8005eae:	d203      	bcs.n	8005eb8 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005eb0:	4b0f      	ldr	r3, [pc, #60]	; (8005ef0 <pvPortMalloc+0x140>)
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	4b10      	ldr	r3, [pc, #64]	; (8005ef8 <pvPortMalloc+0x148>)
 8005eb6:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	685a      	ldr	r2, [r3, #4]
 8005ebc:	4b0b      	ldr	r3, [pc, #44]	; (8005eec <pvPortMalloc+0x13c>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	431a      	orrs	r2, r3
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005ecc:	f7fe ff26 	bl	8004d1c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2207      	movs	r2, #7
 8005ed4:	4013      	ands	r3, r2
 8005ed6:	d001      	beq.n	8005edc <pvPortMalloc+0x12c>
 8005ed8:	b672      	cpsid	i
 8005eda:	e7fe      	b.n	8005eda <pvPortMalloc+0x12a>
	return pvReturn;
 8005edc:	68fb      	ldr	r3, [r7, #12]
}
 8005ede:	0018      	movs	r0, r3
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	b006      	add	sp, #24
 8005ee4:	bd80      	pop	{r7, pc}
 8005ee6:	46c0      	nop			; (mov r8, r8)
 8005ee8:	20001924 	.word	0x20001924
 8005eec:	20001930 	.word	0x20001930
 8005ef0:	20001928 	.word	0x20001928
 8005ef4:	2000191c 	.word	0x2000191c
 8005ef8:	2000192c 	.word	0x2000192c

08005efc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b084      	sub	sp, #16
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d035      	beq.n	8005f7a <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005f0e:	2308      	movs	r3, #8
 8005f10:	425b      	negs	r3, r3
 8005f12:	68fa      	ldr	r2, [r7, #12]
 8005f14:	18d3      	adds	r3, r2, r3
 8005f16:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	685a      	ldr	r2, [r3, #4]
 8005f20:	4b18      	ldr	r3, [pc, #96]	; (8005f84 <vPortFree+0x88>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4013      	ands	r3, r2
 8005f26:	d101      	bne.n	8005f2c <vPortFree+0x30>
 8005f28:	b672      	cpsid	i
 8005f2a:	e7fe      	b.n	8005f2a <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d001      	beq.n	8005f38 <vPortFree+0x3c>
 8005f34:	b672      	cpsid	i
 8005f36:	e7fe      	b.n	8005f36 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	685a      	ldr	r2, [r3, #4]
 8005f3c:	4b11      	ldr	r3, [pc, #68]	; (8005f84 <vPortFree+0x88>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4013      	ands	r3, r2
 8005f42:	d01a      	beq.n	8005f7a <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d116      	bne.n	8005f7a <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	685a      	ldr	r2, [r3, #4]
 8005f50:	4b0c      	ldr	r3, [pc, #48]	; (8005f84 <vPortFree+0x88>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	43db      	mvns	r3, r3
 8005f56:	401a      	ands	r2, r3
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005f5c:	f7fe fed2 	bl	8004d04 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	685a      	ldr	r2, [r3, #4]
 8005f64:	4b08      	ldr	r3, [pc, #32]	; (8005f88 <vPortFree+0x8c>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	18d2      	adds	r2, r2, r3
 8005f6a:	4b07      	ldr	r3, [pc, #28]	; (8005f88 <vPortFree+0x8c>)
 8005f6c:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	0018      	movs	r0, r3
 8005f72:	f000 f86b 	bl	800604c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005f76:	f7fe fed1 	bl	8004d1c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005f7a:	46c0      	nop			; (mov r8, r8)
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	b004      	add	sp, #16
 8005f80:	bd80      	pop	{r7, pc}
 8005f82:	46c0      	nop			; (mov r8, r8)
 8005f84:	20001930 	.word	0x20001930
 8005f88:	20001928 	.word	0x20001928

08005f8c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b084      	sub	sp, #16
 8005f90:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005f92:	23c0      	movs	r3, #192	; 0xc0
 8005f94:	011b      	lsls	r3, r3, #4
 8005f96:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005f98:	4b26      	ldr	r3, [pc, #152]	; (8006034 <prvHeapInit+0xa8>)
 8005f9a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2207      	movs	r2, #7
 8005fa0:	4013      	ands	r3, r2
 8005fa2:	d00c      	beq.n	8005fbe <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	3307      	adds	r3, #7
 8005fa8:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2207      	movs	r2, #7
 8005fae:	4393      	bics	r3, r2
 8005fb0:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005fb2:	68ba      	ldr	r2, [r7, #8]
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	1ad2      	subs	r2, r2, r3
 8005fb8:	4b1e      	ldr	r3, [pc, #120]	; (8006034 <prvHeapInit+0xa8>)
 8005fba:	18d3      	adds	r3, r2, r3
 8005fbc:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005fc2:	4b1d      	ldr	r3, [pc, #116]	; (8006038 <prvHeapInit+0xac>)
 8005fc4:	687a      	ldr	r2, [r7, #4]
 8005fc6:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005fc8:	4b1b      	ldr	r3, [pc, #108]	; (8006038 <prvHeapInit+0xac>)
 8005fca:	2200      	movs	r2, #0
 8005fcc:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	68ba      	ldr	r2, [r7, #8]
 8005fd2:	18d3      	adds	r3, r2, r3
 8005fd4:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005fd6:	2208      	movs	r2, #8
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	1a9b      	subs	r3, r3, r2
 8005fdc:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2207      	movs	r2, #7
 8005fe2:	4393      	bics	r3, r2
 8005fe4:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005fe6:	68fa      	ldr	r2, [r7, #12]
 8005fe8:	4b14      	ldr	r3, [pc, #80]	; (800603c <prvHeapInit+0xb0>)
 8005fea:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8005fec:	4b13      	ldr	r3, [pc, #76]	; (800603c <prvHeapInit+0xb0>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005ff4:	4b11      	ldr	r3, [pc, #68]	; (800603c <prvHeapInit+0xb0>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	68fa      	ldr	r2, [r7, #12]
 8006004:	1ad2      	subs	r2, r2, r3
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800600a:	4b0c      	ldr	r3, [pc, #48]	; (800603c <prvHeapInit+0xb0>)
 800600c:	681a      	ldr	r2, [r3, #0]
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	685a      	ldr	r2, [r3, #4]
 8006016:	4b0a      	ldr	r3, [pc, #40]	; (8006040 <prvHeapInit+0xb4>)
 8006018:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	685a      	ldr	r2, [r3, #4]
 800601e:	4b09      	ldr	r3, [pc, #36]	; (8006044 <prvHeapInit+0xb8>)
 8006020:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006022:	4b09      	ldr	r3, [pc, #36]	; (8006048 <prvHeapInit+0xbc>)
 8006024:	2280      	movs	r2, #128	; 0x80
 8006026:	0612      	lsls	r2, r2, #24
 8006028:	601a      	str	r2, [r3, #0]
}
 800602a:	46c0      	nop			; (mov r8, r8)
 800602c:	46bd      	mov	sp, r7
 800602e:	b004      	add	sp, #16
 8006030:	bd80      	pop	{r7, pc}
 8006032:	46c0      	nop			; (mov r8, r8)
 8006034:	20000d1c 	.word	0x20000d1c
 8006038:	2000191c 	.word	0x2000191c
 800603c:	20001924 	.word	0x20001924
 8006040:	2000192c 	.word	0x2000192c
 8006044:	20001928 	.word	0x20001928
 8006048:	20001930 	.word	0x20001930

0800604c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b084      	sub	sp, #16
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006054:	4b27      	ldr	r3, [pc, #156]	; (80060f4 <prvInsertBlockIntoFreeList+0xa8>)
 8006056:	60fb      	str	r3, [r7, #12]
 8006058:	e002      	b.n	8006060 <prvInsertBlockIntoFreeList+0x14>
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	60fb      	str	r3, [r7, #12]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	687a      	ldr	r2, [r7, #4]
 8006066:	429a      	cmp	r2, r3
 8006068:	d8f7      	bhi.n	800605a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	68ba      	ldr	r2, [r7, #8]
 8006074:	18d3      	adds	r3, r2, r3
 8006076:	687a      	ldr	r2, [r7, #4]
 8006078:	429a      	cmp	r2, r3
 800607a:	d108      	bne.n	800608e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	685a      	ldr	r2, [r3, #4]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	18d2      	adds	r2, r2, r3
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	68ba      	ldr	r2, [r7, #8]
 8006098:	18d2      	adds	r2, r2, r3
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	429a      	cmp	r2, r3
 80060a0:	d118      	bne.n	80060d4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681a      	ldr	r2, [r3, #0]
 80060a6:	4b14      	ldr	r3, [pc, #80]	; (80060f8 <prvInsertBlockIntoFreeList+0xac>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	429a      	cmp	r2, r3
 80060ac:	d00d      	beq.n	80060ca <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	685a      	ldr	r2, [r3, #4]
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	18d2      	adds	r2, r2, r3
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	601a      	str	r2, [r3, #0]
 80060c8:	e008      	b.n	80060dc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80060ca:	4b0b      	ldr	r3, [pc, #44]	; (80060f8 <prvInsertBlockIntoFreeList+0xac>)
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	601a      	str	r2, [r3, #0]
 80060d2:	e003      	b.n	80060dc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80060dc:	68fa      	ldr	r2, [r7, #12]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d002      	beq.n	80060ea <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	687a      	ldr	r2, [r7, #4]
 80060e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80060ea:	46c0      	nop			; (mov r8, r8)
 80060ec:	46bd      	mov	sp, r7
 80060ee:	b004      	add	sp, #16
 80060f0:	bd80      	pop	{r7, pc}
 80060f2:	46c0      	nop			; (mov r8, r8)
 80060f4:	2000191c 	.word	0x2000191c
 80060f8:	20001924 	.word	0x20001924

080060fc <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80060fc:	b580      	push	{r7, lr}
 80060fe:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8006100:	46c0      	nop			; (mov r8, r8)
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}
	...

08006108 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8006108:	b580      	push	{r7, lr}
 800610a:	b086      	sub	sp, #24
 800610c:	af04      	add	r7, sp, #16
 800610e:	0002      	movs	r2, r0
 8006110:	1dfb      	adds	r3, r7, #7
 8006112:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8006114:	4808      	ldr	r0, [pc, #32]	; (8006138 <ssd1306_WriteCommand+0x30>)
 8006116:	2301      	movs	r3, #1
 8006118:	425b      	negs	r3, r3
 800611a:	9302      	str	r3, [sp, #8]
 800611c:	2301      	movs	r3, #1
 800611e:	9301      	str	r3, [sp, #4]
 8006120:	1dfb      	adds	r3, r7, #7
 8006122:	9300      	str	r3, [sp, #0]
 8006124:	2301      	movs	r3, #1
 8006126:	2200      	movs	r2, #0
 8006128:	2178      	movs	r1, #120	; 0x78
 800612a:	f7fb fd0f 	bl	8001b4c <HAL_I2C_Mem_Write>
}
 800612e:	46c0      	nop			; (mov r8, r8)
 8006130:	46bd      	mov	sp, r7
 8006132:	b002      	add	sp, #8
 8006134:	bd80      	pop	{r7, pc}
 8006136:	46c0      	nop			; (mov r8, r8)
 8006138:	2000218c 	.word	0x2000218c

0800613c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 800613c:	b580      	push	{r7, lr}
 800613e:	b086      	sub	sp, #24
 8006140:	af04      	add	r7, sp, #16
 8006142:	6078      	str	r0, [r7, #4]
 8006144:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	b29b      	uxth	r3, r3
 800614a:	4808      	ldr	r0, [pc, #32]	; (800616c <ssd1306_WriteData+0x30>)
 800614c:	2201      	movs	r2, #1
 800614e:	4252      	negs	r2, r2
 8006150:	9202      	str	r2, [sp, #8]
 8006152:	9301      	str	r3, [sp, #4]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	9300      	str	r3, [sp, #0]
 8006158:	2301      	movs	r3, #1
 800615a:	2240      	movs	r2, #64	; 0x40
 800615c:	2178      	movs	r1, #120	; 0x78
 800615e:	f7fb fcf5 	bl	8001b4c <HAL_I2C_Mem_Write>
}
 8006162:	46c0      	nop			; (mov r8, r8)
 8006164:	46bd      	mov	sp, r7
 8006166:	b002      	add	sp, #8
 8006168:	bd80      	pop	{r7, pc}
 800616a:	46c0      	nop			; (mov r8, r8)
 800616c:	2000218c 	.word	0x2000218c

08006170 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8006170:	b580      	push	{r7, lr}
 8006172:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8006174:	f7ff ffc2 	bl	80060fc <ssd1306_Reset>

    // Wait for the screen to boot
    //HAL_Delay(100);

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8006178:	2000      	movs	r0, #0
 800617a:	f000 f9f5 	bl	8006568 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 800617e:	2020      	movs	r0, #32
 8006180:	f7ff ffc2 	bl	8006108 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8006184:	2000      	movs	r0, #0
 8006186:	f7ff ffbf 	bl	8006108 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800618a:	20b0      	movs	r0, #176	; 0xb0
 800618c:	f7ff ffbc 	bl	8006108 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8006190:	20c8      	movs	r0, #200	; 0xc8
 8006192:	f7ff ffb9 	bl	8006108 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8006196:	2000      	movs	r0, #0
 8006198:	f7ff ffb6 	bl	8006108 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800619c:	2010      	movs	r0, #16
 800619e:	f7ff ffb3 	bl	8006108 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDC);
 80061a2:	20dc      	movs	r0, #220	; 0xdc
 80061a4:	f7ff ffb0 	bl	8006108 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //--set start line address - CHECK
 80061a8:	2000      	movs	r0, #0
 80061aa:	f7ff ffad 	bl	8006108 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80061ae:	20ff      	movs	r0, #255	; 0xff
 80061b0:	f000 f9c2 	bl	8006538 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80061b4:	20a1      	movs	r0, #161	; 0xa1
 80061b6:	f7ff ffa7 	bl	8006108 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80061ba:	20a6      	movs	r0, #166	; 0xa6
 80061bc:	f7ff ffa4 	bl	8006108 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80061c0:	20a8      	movs	r0, #168	; 0xa8
 80061c2:	f7ff ffa1 	bl	8006108 <ssd1306_WriteCommand>
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
#elif (SSD1306_HEIGHT == 128)
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
    ssd1306_WriteCommand(0x3F);
 80061c6:	203f      	movs	r0, #63	; 0x3f
 80061c8:	f7ff ff9e 	bl	8006108 <ssd1306_WriteCommand>
//#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80061cc:	20a4      	movs	r0, #164	; 0xa4
 80061ce:	f7ff ff9b 	bl	8006108 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80061d2:	20d3      	movs	r0, #211	; 0xd3
 80061d4:	f7ff ff98 	bl	8006108 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //-not offset
 80061d8:	2022      	movs	r0, #34	; 0x22
 80061da:	f7ff ff95 	bl	8006108 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80061de:	20d5      	movs	r0, #213	; 0xd5
 80061e0:	f7ff ff92 	bl	8006108 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80061e4:	20f0      	movs	r0, #240	; 0xf0
 80061e6:	f7ff ff8f 	bl	8006108 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80061ea:	20d9      	movs	r0, #217	; 0xd9
 80061ec:	f7ff ff8c 	bl	8006108 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80061f0:	2022      	movs	r0, #34	; 0x22
 80061f2:	f7ff ff89 	bl	8006108 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80061f6:	20da      	movs	r0, #218	; 0xda
 80061f8:	f7ff ff86 	bl	8006108 <ssd1306_WriteCommand>
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
#elif (SSD1306_HEIGHT == 128)
    ssd1306_WriteCommand(0x12);
#else
    ssd1306_WriteCommand(0x12);
 80061fc:	2012      	movs	r0, #18
 80061fe:	f7ff ff83 	bl	8006108 <ssd1306_WriteCommand>
//#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8006202:	20db      	movs	r0, #219	; 0xdb
 8006204:	f7ff ff80 	bl	8006108 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8006208:	2020      	movs	r0, #32
 800620a:	f7ff ff7d 	bl	8006108 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800620e:	208d      	movs	r0, #141	; 0x8d
 8006210:	f7ff ff7a 	bl	8006108 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8006214:	2014      	movs	r0, #20
 8006216:	f7ff ff77 	bl	8006108 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800621a:	2001      	movs	r0, #1
 800621c:	f000 f9a4 	bl	8006568 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8006220:	2000      	movs	r0, #0
 8006222:	f000 f811 	bl	8006248 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8006226:	f000 f833 	bl	8006290 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800622a:	4b06      	ldr	r3, [pc, #24]	; (8006244 <ssd1306_Init+0xd4>)
 800622c:	2200      	movs	r2, #0
 800622e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8006230:	4b04      	ldr	r3, [pc, #16]	; (8006244 <ssd1306_Init+0xd4>)
 8006232:	2200      	movs	r2, #0
 8006234:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8006236:	4b03      	ldr	r3, [pc, #12]	; (8006244 <ssd1306_Init+0xd4>)
 8006238:	2201      	movs	r2, #1
 800623a:	711a      	strb	r2, [r3, #4]
}
 800623c:	46c0      	nop			; (mov r8, r8)
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}
 8006242:	46c0      	nop			; (mov r8, r8)
 8006244:	20002154 	.word	0x20002154

08006248 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8006248:	b580      	push	{r7, lr}
 800624a:	b084      	sub	sp, #16
 800624c:	af00      	add	r7, sp, #0
 800624e:	0002      	movs	r2, r0
 8006250:	1dfb      	adds	r3, r7, #7
 8006252:	701a      	strb	r2, [r3, #0]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8006254:	2300      	movs	r3, #0
 8006256:	60fb      	str	r3, [r7, #12]
 8006258:	e00e      	b.n	8006278 <ssd1306_Fill+0x30>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 800625a:	1dfb      	adds	r3, r7, #7
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d101      	bne.n	8006266 <ssd1306_Fill+0x1e>
 8006262:	2100      	movs	r1, #0
 8006264:	e000      	b.n	8006268 <ssd1306_Fill+0x20>
 8006266:	21ff      	movs	r1, #255	; 0xff
 8006268:	4a08      	ldr	r2, [pc, #32]	; (800628c <ssd1306_Fill+0x44>)
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	18d3      	adds	r3, r2, r3
 800626e:	1c0a      	adds	r2, r1, #0
 8006270:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	3301      	adds	r3, #1
 8006276:	60fb      	str	r3, [r7, #12]
 8006278:	68fa      	ldr	r2, [r7, #12]
 800627a:	2382      	movs	r3, #130	; 0x82
 800627c:	011b      	lsls	r3, r3, #4
 800627e:	429a      	cmp	r2, r3
 8006280:	d3eb      	bcc.n	800625a <ssd1306_Fill+0x12>
    }
}
 8006282:	46c0      	nop			; (mov r8, r8)
 8006284:	46c0      	nop			; (mov r8, r8)
 8006286:	46bd      	mov	sp, r7
 8006288:	b004      	add	sp, #16
 800628a:	bd80      	pop	{r7, pc}
 800628c:	20001934 	.word	0x20001934

08006290 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8006290:	b580      	push	{r7, lr}
 8006292:	b082      	sub	sp, #8
 8006294:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8006296:	1dfb      	adds	r3, r7, #7
 8006298:	2200      	movs	r2, #0
 800629a:	701a      	strb	r2, [r3, #0]
 800629c:	e01a      	b.n	80062d4 <ssd1306_UpdateScreen+0x44>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 800629e:	1dfb      	adds	r3, r7, #7
 80062a0:	781b      	ldrb	r3, [r3, #0]
 80062a2:	3b50      	subs	r3, #80	; 0x50
 80062a4:	b2db      	uxtb	r3, r3
 80062a6:	0018      	movs	r0, r3
 80062a8:	f7ff ff2e 	bl	8006108 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 80062ac:	2000      	movs	r0, #0
 80062ae:	f7ff ff2b 	bl	8006108 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 80062b2:	2010      	movs	r0, #16
 80062b4:	f7ff ff28 	bl	8006108 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80062b8:	1dfb      	adds	r3, r7, #7
 80062ba:	781b      	ldrb	r3, [r3, #0]
 80062bc:	01da      	lsls	r2, r3, #7
 80062be:	4b0a      	ldr	r3, [pc, #40]	; (80062e8 <ssd1306_UpdateScreen+0x58>)
 80062c0:	18d3      	adds	r3, r2, r3
 80062c2:	2180      	movs	r1, #128	; 0x80
 80062c4:	0018      	movs	r0, r3
 80062c6:	f7ff ff39 	bl	800613c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80062ca:	1dfb      	adds	r3, r7, #7
 80062cc:	781a      	ldrb	r2, [r3, #0]
 80062ce:	1dfb      	adds	r3, r7, #7
 80062d0:	3201      	adds	r2, #1
 80062d2:	701a      	strb	r2, [r3, #0]
 80062d4:	1dfb      	adds	r3, r7, #7
 80062d6:	781b      	ldrb	r3, [r3, #0]
 80062d8:	2b0f      	cmp	r3, #15
 80062da:	d9e0      	bls.n	800629e <ssd1306_UpdateScreen+0xe>
    }
}
 80062dc:	46c0      	nop			; (mov r8, r8)
 80062de:	46c0      	nop			; (mov r8, r8)
 80062e0:	46bd      	mov	sp, r7
 80062e2:	b002      	add	sp, #8
 80062e4:	bd80      	pop	{r7, pc}
 80062e6:	46c0      	nop			; (mov r8, r8)
 80062e8:	20001934 	.word	0x20001934

080062ec <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80062ec:	b590      	push	{r4, r7, lr}
 80062ee:	b083      	sub	sp, #12
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	0004      	movs	r4, r0
 80062f4:	0008      	movs	r0, r1
 80062f6:	0011      	movs	r1, r2
 80062f8:	1dfb      	adds	r3, r7, #7
 80062fa:	1c22      	adds	r2, r4, #0
 80062fc:	701a      	strb	r2, [r3, #0]
 80062fe:	1dbb      	adds	r3, r7, #6
 8006300:	1c02      	adds	r2, r0, #0
 8006302:	701a      	strb	r2, [r3, #0]
 8006304:	1d7b      	adds	r3, r7, #5
 8006306:	1c0a      	adds	r2, r1, #0
 8006308:	701a      	strb	r2, [r3, #0]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800630a:	1dfb      	adds	r3, r7, #7
 800630c:	781b      	ldrb	r3, [r3, #0]
 800630e:	b25b      	sxtb	r3, r3
 8006310:	2b00      	cmp	r3, #0
 8006312:	db47      	blt.n	80063a4 <ssd1306_DrawPixel+0xb8>
 8006314:	1dbb      	adds	r3, r7, #6
 8006316:	781b      	ldrb	r3, [r3, #0]
 8006318:	2b81      	cmp	r3, #129	; 0x81
 800631a:	d843      	bhi.n	80063a4 <ssd1306_DrawPixel+0xb8>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 800631c:	1d7b      	adds	r3, r7, #5
 800631e:	781b      	ldrb	r3, [r3, #0]
 8006320:	2b01      	cmp	r3, #1
 8006322:	d11e      	bne.n	8006362 <ssd1306_DrawPixel+0x76>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8006324:	1dfb      	adds	r3, r7, #7
 8006326:	781a      	ldrb	r2, [r3, #0]
 8006328:	1dbb      	adds	r3, r7, #6
 800632a:	781b      	ldrb	r3, [r3, #0]
 800632c:	08db      	lsrs	r3, r3, #3
 800632e:	b2d8      	uxtb	r0, r3
 8006330:	0003      	movs	r3, r0
 8006332:	01db      	lsls	r3, r3, #7
 8006334:	18d3      	adds	r3, r2, r3
 8006336:	4a1d      	ldr	r2, [pc, #116]	; (80063ac <ssd1306_DrawPixel+0xc0>)
 8006338:	5cd3      	ldrb	r3, [r2, r3]
 800633a:	b25a      	sxtb	r2, r3
 800633c:	1dbb      	adds	r3, r7, #6
 800633e:	781b      	ldrb	r3, [r3, #0]
 8006340:	2107      	movs	r1, #7
 8006342:	400b      	ands	r3, r1
 8006344:	2101      	movs	r1, #1
 8006346:	4099      	lsls	r1, r3
 8006348:	000b      	movs	r3, r1
 800634a:	b25b      	sxtb	r3, r3
 800634c:	4313      	orrs	r3, r2
 800634e:	b259      	sxtb	r1, r3
 8006350:	1dfb      	adds	r3, r7, #7
 8006352:	781a      	ldrb	r2, [r3, #0]
 8006354:	0003      	movs	r3, r0
 8006356:	01db      	lsls	r3, r3, #7
 8006358:	18d3      	adds	r3, r2, r3
 800635a:	b2c9      	uxtb	r1, r1
 800635c:	4a13      	ldr	r2, [pc, #76]	; (80063ac <ssd1306_DrawPixel+0xc0>)
 800635e:	54d1      	strb	r1, [r2, r3]
 8006360:	e021      	b.n	80063a6 <ssd1306_DrawPixel+0xba>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8006362:	1dfb      	adds	r3, r7, #7
 8006364:	781a      	ldrb	r2, [r3, #0]
 8006366:	1dbb      	adds	r3, r7, #6
 8006368:	781b      	ldrb	r3, [r3, #0]
 800636a:	08db      	lsrs	r3, r3, #3
 800636c:	b2d8      	uxtb	r0, r3
 800636e:	0003      	movs	r3, r0
 8006370:	01db      	lsls	r3, r3, #7
 8006372:	18d3      	adds	r3, r2, r3
 8006374:	4a0d      	ldr	r2, [pc, #52]	; (80063ac <ssd1306_DrawPixel+0xc0>)
 8006376:	5cd3      	ldrb	r3, [r2, r3]
 8006378:	b25b      	sxtb	r3, r3
 800637a:	1dba      	adds	r2, r7, #6
 800637c:	7812      	ldrb	r2, [r2, #0]
 800637e:	2107      	movs	r1, #7
 8006380:	400a      	ands	r2, r1
 8006382:	2101      	movs	r1, #1
 8006384:	4091      	lsls	r1, r2
 8006386:	000a      	movs	r2, r1
 8006388:	b252      	sxtb	r2, r2
 800638a:	43d2      	mvns	r2, r2
 800638c:	b252      	sxtb	r2, r2
 800638e:	4013      	ands	r3, r2
 8006390:	b259      	sxtb	r1, r3
 8006392:	1dfb      	adds	r3, r7, #7
 8006394:	781a      	ldrb	r2, [r3, #0]
 8006396:	0003      	movs	r3, r0
 8006398:	01db      	lsls	r3, r3, #7
 800639a:	18d3      	adds	r3, r2, r3
 800639c:	b2c9      	uxtb	r1, r1
 800639e:	4a03      	ldr	r2, [pc, #12]	; (80063ac <ssd1306_DrawPixel+0xc0>)
 80063a0:	54d1      	strb	r1, [r2, r3]
 80063a2:	e000      	b.n	80063a6 <ssd1306_DrawPixel+0xba>
        return;
 80063a4:	46c0      	nop			; (mov r8, r8)
    }
}
 80063a6:	46bd      	mov	sp, r7
 80063a8:	b003      	add	sp, #12
 80063aa:	bd90      	pop	{r4, r7, pc}
 80063ac:	20001934 	.word	0x20001934

080063b0 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80063b0:	b590      	push	{r4, r7, lr}
 80063b2:	b089      	sub	sp, #36	; 0x24
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	0004      	movs	r4, r0
 80063b8:	1d38      	adds	r0, r7, #4
 80063ba:	6001      	str	r1, [r0, #0]
 80063bc:	6042      	str	r2, [r0, #4]
 80063be:	0019      	movs	r1, r3
 80063c0:	200f      	movs	r0, #15
 80063c2:	183b      	adds	r3, r7, r0
 80063c4:	1c22      	adds	r2, r4, #0
 80063c6:	701a      	strb	r2, [r3, #0]
 80063c8:	230e      	movs	r3, #14
 80063ca:	18fb      	adds	r3, r7, r3
 80063cc:	1c0a      	adds	r2, r1, #0
 80063ce:	701a      	strb	r2, [r3, #0]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80063d0:	183b      	adds	r3, r7, r0
 80063d2:	781b      	ldrb	r3, [r3, #0]
 80063d4:	2b1f      	cmp	r3, #31
 80063d6:	d903      	bls.n	80063e0 <ssd1306_WriteChar+0x30>
 80063d8:	183b      	adds	r3, r7, r0
 80063da:	781b      	ldrb	r3, [r3, #0]
 80063dc:	2b7e      	cmp	r3, #126	; 0x7e
 80063de:	d901      	bls.n	80063e4 <ssd1306_WriteChar+0x34>
        return 0;
 80063e0:	2300      	movs	r3, #0
 80063e2:	e078      	b.n	80064d6 <ssd1306_WriteChar+0x126>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80063e4:	4b3e      	ldr	r3, [pc, #248]	; (80064e0 <ssd1306_WriteChar+0x130>)
 80063e6:	881b      	ldrh	r3, [r3, #0]
 80063e8:	001a      	movs	r2, r3
 80063ea:	1d3b      	adds	r3, r7, #4
 80063ec:	781b      	ldrb	r3, [r3, #0]
 80063ee:	18d3      	adds	r3, r2, r3
 80063f0:	2b80      	cmp	r3, #128	; 0x80
 80063f2:	dc07      	bgt.n	8006404 <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80063f4:	4b3a      	ldr	r3, [pc, #232]	; (80064e0 <ssd1306_WriteChar+0x130>)
 80063f6:	885b      	ldrh	r3, [r3, #2]
 80063f8:	001a      	movs	r2, r3
 80063fa:	1d3b      	adds	r3, r7, #4
 80063fc:	785b      	ldrb	r3, [r3, #1]
 80063fe:	18d3      	adds	r3, r2, r3
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8006400:	2b82      	cmp	r3, #130	; 0x82
 8006402:	dd01      	ble.n	8006408 <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 8006404:	2300      	movs	r3, #0
 8006406:	e066      	b.n	80064d6 <ssd1306_WriteChar+0x126>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8006408:	2300      	movs	r3, #0
 800640a:	61fb      	str	r3, [r7, #28]
 800640c:	e051      	b.n	80064b2 <ssd1306_WriteChar+0x102>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800640e:	1d3b      	adds	r3, r7, #4
 8006410:	685a      	ldr	r2, [r3, #4]
 8006412:	230f      	movs	r3, #15
 8006414:	18fb      	adds	r3, r7, r3
 8006416:	781b      	ldrb	r3, [r3, #0]
 8006418:	3b20      	subs	r3, #32
 800641a:	1d39      	adds	r1, r7, #4
 800641c:	7849      	ldrb	r1, [r1, #1]
 800641e:	434b      	muls	r3, r1
 8006420:	0019      	movs	r1, r3
 8006422:	69fb      	ldr	r3, [r7, #28]
 8006424:	18cb      	adds	r3, r1, r3
 8006426:	005b      	lsls	r3, r3, #1
 8006428:	18d3      	adds	r3, r2, r3
 800642a:	881b      	ldrh	r3, [r3, #0]
 800642c:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 800642e:	2300      	movs	r3, #0
 8006430:	61bb      	str	r3, [r7, #24]
 8006432:	e035      	b.n	80064a0 <ssd1306_WriteChar+0xf0>
            if((b << j) & 0x8000)  {
 8006434:	697a      	ldr	r2, [r7, #20]
 8006436:	69bb      	ldr	r3, [r7, #24]
 8006438:	409a      	lsls	r2, r3
 800643a:	2380      	movs	r3, #128	; 0x80
 800643c:	021b      	lsls	r3, r3, #8
 800643e:	4013      	ands	r3, r2
 8006440:	d014      	beq.n	800646c <ssd1306_WriteChar+0xbc>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8006442:	4b27      	ldr	r3, [pc, #156]	; (80064e0 <ssd1306_WriteChar+0x130>)
 8006444:	881b      	ldrh	r3, [r3, #0]
 8006446:	b2da      	uxtb	r2, r3
 8006448:	69bb      	ldr	r3, [r7, #24]
 800644a:	b2db      	uxtb	r3, r3
 800644c:	18d3      	adds	r3, r2, r3
 800644e:	b2d8      	uxtb	r0, r3
 8006450:	4b23      	ldr	r3, [pc, #140]	; (80064e0 <ssd1306_WriteChar+0x130>)
 8006452:	885b      	ldrh	r3, [r3, #2]
 8006454:	b2da      	uxtb	r2, r3
 8006456:	69fb      	ldr	r3, [r7, #28]
 8006458:	b2db      	uxtb	r3, r3
 800645a:	18d3      	adds	r3, r2, r3
 800645c:	b2d9      	uxtb	r1, r3
 800645e:	230e      	movs	r3, #14
 8006460:	18fb      	adds	r3, r7, r3
 8006462:	781b      	ldrb	r3, [r3, #0]
 8006464:	001a      	movs	r2, r3
 8006466:	f7ff ff41 	bl	80062ec <ssd1306_DrawPixel>
 800646a:	e016      	b.n	800649a <ssd1306_WriteChar+0xea>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800646c:	4b1c      	ldr	r3, [pc, #112]	; (80064e0 <ssd1306_WriteChar+0x130>)
 800646e:	881b      	ldrh	r3, [r3, #0]
 8006470:	b2da      	uxtb	r2, r3
 8006472:	69bb      	ldr	r3, [r7, #24]
 8006474:	b2db      	uxtb	r3, r3
 8006476:	18d3      	adds	r3, r2, r3
 8006478:	b2d8      	uxtb	r0, r3
 800647a:	4b19      	ldr	r3, [pc, #100]	; (80064e0 <ssd1306_WriteChar+0x130>)
 800647c:	885b      	ldrh	r3, [r3, #2]
 800647e:	b2da      	uxtb	r2, r3
 8006480:	69fb      	ldr	r3, [r7, #28]
 8006482:	b2db      	uxtb	r3, r3
 8006484:	18d3      	adds	r3, r2, r3
 8006486:	b2d9      	uxtb	r1, r3
 8006488:	230e      	movs	r3, #14
 800648a:	18fb      	adds	r3, r7, r3
 800648c:	781b      	ldrb	r3, [r3, #0]
 800648e:	425a      	negs	r2, r3
 8006490:	4153      	adcs	r3, r2
 8006492:	b2db      	uxtb	r3, r3
 8006494:	001a      	movs	r2, r3
 8006496:	f7ff ff29 	bl	80062ec <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 800649a:	69bb      	ldr	r3, [r7, #24]
 800649c:	3301      	adds	r3, #1
 800649e:	61bb      	str	r3, [r7, #24]
 80064a0:	1d3b      	adds	r3, r7, #4
 80064a2:	781b      	ldrb	r3, [r3, #0]
 80064a4:	001a      	movs	r2, r3
 80064a6:	69bb      	ldr	r3, [r7, #24]
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d3c3      	bcc.n	8006434 <ssd1306_WriteChar+0x84>
    for(i = 0; i < Font.FontHeight; i++) {
 80064ac:	69fb      	ldr	r3, [r7, #28]
 80064ae:	3301      	adds	r3, #1
 80064b0:	61fb      	str	r3, [r7, #28]
 80064b2:	1d3b      	adds	r3, r7, #4
 80064b4:	785b      	ldrb	r3, [r3, #1]
 80064b6:	001a      	movs	r2, r3
 80064b8:	69fb      	ldr	r3, [r7, #28]
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d3a7      	bcc.n	800640e <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80064be:	4b08      	ldr	r3, [pc, #32]	; (80064e0 <ssd1306_WriteChar+0x130>)
 80064c0:	881a      	ldrh	r2, [r3, #0]
 80064c2:	1d3b      	adds	r3, r7, #4
 80064c4:	781b      	ldrb	r3, [r3, #0]
 80064c6:	b29b      	uxth	r3, r3
 80064c8:	18d3      	adds	r3, r2, r3
 80064ca:	b29a      	uxth	r2, r3
 80064cc:	4b04      	ldr	r3, [pc, #16]	; (80064e0 <ssd1306_WriteChar+0x130>)
 80064ce:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80064d0:	230f      	movs	r3, #15
 80064d2:	18fb      	adds	r3, r7, r3
 80064d4:	781b      	ldrb	r3, [r3, #0]
}
 80064d6:	0018      	movs	r0, r3
 80064d8:	46bd      	mov	sp, r7
 80064da:	b009      	add	sp, #36	; 0x24
 80064dc:	bd90      	pop	{r4, r7, pc}
 80064de:	46c0      	nop			; (mov r8, r8)
 80064e0:	20002154 	.word	0x20002154

080064e4 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b084      	sub	sp, #16
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	60f8      	str	r0, [r7, #12]
 80064ec:	1d38      	adds	r0, r7, #4
 80064ee:	6001      	str	r1, [r0, #0]
 80064f0:	6042      	str	r2, [r0, #4]
 80064f2:	001a      	movs	r2, r3
 80064f4:	1cfb      	adds	r3, r7, #3
 80064f6:	701a      	strb	r2, [r3, #0]
    // Write until null-byte
    while (*str) {
 80064f8:	e014      	b.n	8006524 <ssd1306_WriteString+0x40>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	7818      	ldrb	r0, [r3, #0]
 80064fe:	1cfb      	adds	r3, r7, #3
 8006500:	781b      	ldrb	r3, [r3, #0]
 8006502:	1d3a      	adds	r2, r7, #4
 8006504:	6811      	ldr	r1, [r2, #0]
 8006506:	6852      	ldr	r2, [r2, #4]
 8006508:	f7ff ff52 	bl	80063b0 <ssd1306_WriteChar>
 800650c:	0003      	movs	r3, r0
 800650e:	001a      	movs	r2, r3
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	781b      	ldrb	r3, [r3, #0]
 8006514:	429a      	cmp	r2, r3
 8006516:	d002      	beq.n	800651e <ssd1306_WriteString+0x3a>
            // Char could not be written
            return *str;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	781b      	ldrb	r3, [r3, #0]
 800651c:	e008      	b.n	8006530 <ssd1306_WriteString+0x4c>
        }
        
        // Next char
        str++;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	3301      	adds	r3, #1
 8006522:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d1e6      	bne.n	80064fa <ssd1306_WriteString+0x16>
    }
    
    // Everything ok
    return *str;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	781b      	ldrb	r3, [r3, #0]
}
 8006530:	0018      	movs	r0, r3
 8006532:	46bd      	mov	sp, r7
 8006534:	b004      	add	sp, #16
 8006536:	bd80      	pop	{r7, pc}

08006538 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8006538:	b580      	push	{r7, lr}
 800653a:	b084      	sub	sp, #16
 800653c:	af00      	add	r7, sp, #0
 800653e:	0002      	movs	r2, r0
 8006540:	1dfb      	adds	r3, r7, #7
 8006542:	701a      	strb	r2, [r3, #0]
    const uint8_t kSetContrastControlRegister = 0x81;
 8006544:	210f      	movs	r1, #15
 8006546:	187b      	adds	r3, r7, r1
 8006548:	2281      	movs	r2, #129	; 0x81
 800654a:	701a      	strb	r2, [r3, #0]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800654c:	187b      	adds	r3, r7, r1
 800654e:	781b      	ldrb	r3, [r3, #0]
 8006550:	0018      	movs	r0, r3
 8006552:	f7ff fdd9 	bl	8006108 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8006556:	1dfb      	adds	r3, r7, #7
 8006558:	781b      	ldrb	r3, [r3, #0]
 800655a:	0018      	movs	r0, r3
 800655c:	f7ff fdd4 	bl	8006108 <ssd1306_WriteCommand>
}
 8006560:	46c0      	nop			; (mov r8, r8)
 8006562:	46bd      	mov	sp, r7
 8006564:	b004      	add	sp, #16
 8006566:	bd80      	pop	{r7, pc}

08006568 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8006568:	b580      	push	{r7, lr}
 800656a:	b084      	sub	sp, #16
 800656c:	af00      	add	r7, sp, #0
 800656e:	0002      	movs	r2, r0
 8006570:	1dfb      	adds	r3, r7, #7
 8006572:	701a      	strb	r2, [r3, #0]
    uint8_t value;
    if (on) {
 8006574:	1dfb      	adds	r3, r7, #7
 8006576:	781b      	ldrb	r3, [r3, #0]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d007      	beq.n	800658c <ssd1306_SetDisplayOn+0x24>
        value = 0xAF;   // Display on
 800657c:	230f      	movs	r3, #15
 800657e:	18fb      	adds	r3, r7, r3
 8006580:	22af      	movs	r2, #175	; 0xaf
 8006582:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 1;
 8006584:	4b0a      	ldr	r3, [pc, #40]	; (80065b0 <ssd1306_SetDisplayOn+0x48>)
 8006586:	2201      	movs	r2, #1
 8006588:	715a      	strb	r2, [r3, #5]
 800658a:	e006      	b.n	800659a <ssd1306_SetDisplayOn+0x32>
    } else {
        value = 0xAE;   // Display off
 800658c:	230f      	movs	r3, #15
 800658e:	18fb      	adds	r3, r7, r3
 8006590:	22ae      	movs	r2, #174	; 0xae
 8006592:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 0;
 8006594:	4b06      	ldr	r3, [pc, #24]	; (80065b0 <ssd1306_SetDisplayOn+0x48>)
 8006596:	2200      	movs	r2, #0
 8006598:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800659a:	230f      	movs	r3, #15
 800659c:	18fb      	adds	r3, r7, r3
 800659e:	781b      	ldrb	r3, [r3, #0]
 80065a0:	0018      	movs	r0, r3
 80065a2:	f7ff fdb1 	bl	8006108 <ssd1306_WriteCommand>
}
 80065a6:	46c0      	nop			; (mov r8, r8)
 80065a8:	46bd      	mov	sp, r7
 80065aa:	b004      	add	sp, #16
 80065ac:	bd80      	pop	{r7, pc}
 80065ae:	46c0      	nop			; (mov r8, r8)
 80065b0:	20002154 	.word	0x20002154

080065b4 <__libc_init_array>:
 80065b4:	b570      	push	{r4, r5, r6, lr}
 80065b6:	2600      	movs	r6, #0
 80065b8:	4d0c      	ldr	r5, [pc, #48]	; (80065ec <__libc_init_array+0x38>)
 80065ba:	4c0d      	ldr	r4, [pc, #52]	; (80065f0 <__libc_init_array+0x3c>)
 80065bc:	1b64      	subs	r4, r4, r5
 80065be:	10a4      	asrs	r4, r4, #2
 80065c0:	42a6      	cmp	r6, r4
 80065c2:	d109      	bne.n	80065d8 <__libc_init_array+0x24>
 80065c4:	2600      	movs	r6, #0
 80065c6:	f000 f82b 	bl	8006620 <_init>
 80065ca:	4d0a      	ldr	r5, [pc, #40]	; (80065f4 <__libc_init_array+0x40>)
 80065cc:	4c0a      	ldr	r4, [pc, #40]	; (80065f8 <__libc_init_array+0x44>)
 80065ce:	1b64      	subs	r4, r4, r5
 80065d0:	10a4      	asrs	r4, r4, #2
 80065d2:	42a6      	cmp	r6, r4
 80065d4:	d105      	bne.n	80065e2 <__libc_init_array+0x2e>
 80065d6:	bd70      	pop	{r4, r5, r6, pc}
 80065d8:	00b3      	lsls	r3, r6, #2
 80065da:	58eb      	ldr	r3, [r5, r3]
 80065dc:	4798      	blx	r3
 80065de:	3601      	adds	r6, #1
 80065e0:	e7ee      	b.n	80065c0 <__libc_init_array+0xc>
 80065e2:	00b3      	lsls	r3, r6, #2
 80065e4:	58eb      	ldr	r3, [r5, r3]
 80065e6:	4798      	blx	r3
 80065e8:	3601      	adds	r6, #1
 80065ea:	e7f2      	b.n	80065d2 <__libc_init_array+0x1e>
 80065ec:	08006cd4 	.word	0x08006cd4
 80065f0:	08006cd4 	.word	0x08006cd4
 80065f4:	08006cd4 	.word	0x08006cd4
 80065f8:	08006cd8 	.word	0x08006cd8

080065fc <memcpy>:
 80065fc:	2300      	movs	r3, #0
 80065fe:	b510      	push	{r4, lr}
 8006600:	429a      	cmp	r2, r3
 8006602:	d100      	bne.n	8006606 <memcpy+0xa>
 8006604:	bd10      	pop	{r4, pc}
 8006606:	5ccc      	ldrb	r4, [r1, r3]
 8006608:	54c4      	strb	r4, [r0, r3]
 800660a:	3301      	adds	r3, #1
 800660c:	e7f8      	b.n	8006600 <memcpy+0x4>

0800660e <memset>:
 800660e:	0003      	movs	r3, r0
 8006610:	1882      	adds	r2, r0, r2
 8006612:	4293      	cmp	r3, r2
 8006614:	d100      	bne.n	8006618 <memset+0xa>
 8006616:	4770      	bx	lr
 8006618:	7019      	strb	r1, [r3, #0]
 800661a:	3301      	adds	r3, #1
 800661c:	e7f9      	b.n	8006612 <memset+0x4>
	...

08006620 <_init>:
 8006620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006622:	46c0      	nop			; (mov r8, r8)
 8006624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006626:	bc08      	pop	{r3}
 8006628:	469e      	mov	lr, r3
 800662a:	4770      	bx	lr

0800662c <_fini>:
 800662c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800662e:	46c0      	nop			; (mov r8, r8)
 8006630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006632:	bc08      	pop	{r3}
 8006634:	469e      	mov	lr, r3
 8006636:	4770      	bx	lr
