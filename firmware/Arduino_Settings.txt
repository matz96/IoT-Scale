setLEDCurrent(200); //Max IR LED current
setIRDutyCycle(40); //Set to highest duty cycle
setProxIntegrationTime(8); //Set to max integration
setProxResolution(16); //Set to 16-bit output
enableSmartPersistance(); //Turn on smart presistance
powerOnProximity(); //Turn on prox sensing

void VCNL4040::setLEDCurrent(uint8_t currentValue)
{
	if(currentValue > 200 - 1) currentValue = VCNL4040_LED_200MA;
	else if(currentValue > 180 - 1) currentValue = VCNL4040_LED_180MA;
	else if(currentValue > 160 - 1) currentValue = VCNL4040_LED_160MA;
	else if(currentValue > 140 - 1) currentValue = VCNL4040_LED_140MA;
	else if(currentValue > 120 - 1) currentValue = VCNL4040_LED_120MA;
	else if(currentValue > 100 - 1) currentValue = VCNL4040_LED_100MA;
	else if(currentValue > 75 - 1) currentValue = VCNL4040_LED_75MA;
	else currentValue = VCNL4040_LED_50MA;

	bitMask(VCNL4040_PS_MS, UPPER, VCNL4040_LED_I_MASK, currentValue);
}
static const uint8_t VCNL4040_LED_I_MASK = (uint8_t)~((1 << 2) | (1 << 1) | (1 << 0));
static const uint8_t VCNL4040_LED_200MA = (1 << 2) | (1 << 1) | (1 << 0);

void VCNL4040::setIRDutyCycle(uint16_t dutyValue)
{
  if(dutyValue > 320 - 1) dutyValue = VCNL4040_PS_DUTY_320;
  else if(dutyValue > 160 - 1) dutyValue = VCNL4040_PS_DUTY_160;
  else if(dutyValue > 80 - 1) dutyValue = VCNL4040_PS_DUTY_80;
  else dutyValue = VCNL4040_PS_DUTY_40;
  
  bitMask(VCNL4040_PS_CONF1, LOWER, VCNL4040_PS_DUTY_MASK, dutyValue);
}
static const uint8_t VCNL4040_PS_DUTY_MASK = (uint8_t)~((1 << 7) | (1 << 6));
static const uint8_t VCNL4040_PS_DUTY_320 = (1 << 7) | (1 << 6);


//Sets the integration time for the proximity sensor
void VCNL4040::setProxIntegrationTime(uint8_t timeValue)
{
  if(timeValue > 8 - 1) timeValue = VCNL4040_PS_IT_8T;
  else if(timeValue > 4 - 1) timeValue = VCNL4040_PS_IT_4T;
  else if(timeValue > 3 - 1) timeValue = VCNL4040_PS_IT_3T;
  else if(timeValue > 2 - 1) timeValue = VCNL4040_PS_IT_2T;
  else timeValue = VCNL4040_PS_IT_1T;

  bitMask(VCNL4040_PS_CONF1, LOWER, VCNL4040_PS_IT_MASK, timeValue);
}
static const uint8_t VCNL4040_PS_IT_MASK = (uint8_t)~((1 << 3) | (1 << 2) | (1 << 1));

void VCNL4040::setProxResolution(uint8_t resolutionValue)
{
	if(resolutionValue > 16 - 1) resolutionValue = VCNL4040_PS_HD_16_BIT;
	else resolutionValue = VCNL4040_PS_HD_12_BIT;
	
  bitMask(VCNL4040_PS_CONF2, UPPER, VCNL4040_PS_HD_MASK, resolutionValue);
}
static const uint8_t VCNL4040_PS_HD_MASK = (uint8_t)~((1 << 3));

void VCNL4040::enableSmartPersistance(void)
{
  bitMask(VCNL4040_PS_CONF3, LOWER, VCNL4040_PS_SMART_PERS_MASK, VCNL4040_PS_SMART_PERS_ENABLE);
}
static const uint8_t VCNL4040_PS_SMART_PERS_MASK = (uint8_t)~((1 << 4));

void VCNL4040::powerOnProximity(void)
{
  bitMask(VCNL4040_PS_CONF1, LOWER, VCNL4040_PS_SD_MASK, VCNL4040_PS_SD_POWER_ON);
}
static const uint8_t VCNL4040_PS_SD_MASK = (uint8_t)~((1 << 0));
