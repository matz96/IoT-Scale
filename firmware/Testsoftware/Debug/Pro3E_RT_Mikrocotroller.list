
Pro3E_RT_Mikrocotroller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003958  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000064c  08003a18  08003a18  00013a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004064  08004064  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08004064  08004064  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004064  08004064  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004064  08004064  00014064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004068  08004068  00014068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800406c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000091c  20000014  08004080  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000930  08004080  00020930  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ee24  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002163  00000000  00000000  0002ee60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd8  00000000  00000000  00030fc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cc8  00000000  00000000  00031da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000116d8  00000000  00000000  00032a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010526  00000000  00000000  00044140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006a0e9  00000000  00000000  00054666  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000be74f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031f8  00000000  00000000  000be7a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000014 	.word	0x20000014
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003a00 	.word	0x08003a00

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000018 	.word	0x20000018
 8000104:	08003a00 	.word	0x08003a00

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b590      	push	{r4, r7, lr}
 8000222:	b08f      	sub	sp, #60	; 0x3c
 8000224:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f000 fbf3 	bl	8000a10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022a:	f000 f861 	bl	80002f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022e:	f000 fa0b 	bl	8000648 <MX_GPIO_Init>
  MX_ADC_Init();
 8000232:	f000 f8bb 	bl	80003ac <MX_ADC_Init>
  MX_TIM1_Init();
 8000236:	f000 f955 	bl	80004e4 <MX_TIM1_Init>
  MX_I2C1_Init();
 800023a:	f000 f913 	bl	8000464 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  //init_vcnl4040();
  uint16_t pwm_value = 0;
 800023e:	2332      	movs	r3, #50	; 0x32
 8000240:	18fb      	adds	r3, r7, r3
 8000242:	2200      	movs	r2, #0
 8000244:	801a      	strh	r2, [r3, #0]
  uint16_t step = 0;
 8000246:	2330      	movs	r3, #48	; 0x30
 8000248:	18fb      	adds	r3, r7, r3
 800024a:	2200      	movs	r2, #0
 800024c:	801a      	strh	r2, [r3, #0]
  uint16_t prox = 0;
 800024e:	232e      	movs	r3, #46	; 0x2e
 8000250:	18fb      	adds	r3, r7, r3
 8000252:	2200      	movs	r2, #0
 8000254:	801a      	strh	r2, [r3, #0]
  int32_t CH1_DC = 0;
 8000256:	2300      	movs	r3, #0
 8000258:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800025a:	4b21      	ldr	r3, [pc, #132]	; (80002e0 <main+0xc0>)
 800025c:	210c      	movs	r1, #12
 800025e:	0018      	movs	r0, r3
 8000260:	f002 fafa 	bl	8002858 <HAL_TIM_PWM_Start>

  ssd1306_Init();
 8000264:	f003 f964 	bl	8003530 <ssd1306_Init>
  ssd1306_SetDisplayOn(1);
 8000268:	2001      	movs	r0, #1
 800026a:	f003 fb77 	bl	800395c <ssd1306_SetDisplayOn>
	  if(pwm_value == 2000) step = -100;
	  pwm_value += step;
	  user_pwm_setvalue(pwm_value);
	  */
	  static int i = 0;
	  char text[] = "Hallo Welt dies ist ein Test des Displays";
 800026e:	1d3b      	adds	r3, r7, #4
 8000270:	4a1c      	ldr	r2, [pc, #112]	; (80002e4 <main+0xc4>)
 8000272:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000274:	c313      	stmia	r3!, {r0, r1, r4}
 8000276:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000278:	c313      	stmia	r3!, {r0, r1, r4}
 800027a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800027c:	c313      	stmia	r3!, {r0, r1, r4}
 800027e:	6811      	ldr	r1, [r2, #0]
 8000280:	6019      	str	r1, [r3, #0]
 8000282:	8892      	ldrh	r2, [r2, #4]
 8000284:	809a      	strh	r2, [r3, #4]
	  ssd1306_Fill(White);
 8000286:	2001      	movs	r0, #1
 8000288:	f003 f9be 	bl	8003608 <ssd1306_Fill>
	  ssd1306_SetCursor(5, 5);
 800028c:	2105      	movs	r1, #5
 800028e:	2005      	movs	r0, #5
 8000290:	f003 fb32 	bl	80038f8 <ssd1306_SetCursor>
	  ssd1306_WriteString(text,  Font_6x8, Black);
 8000294:	4a14      	ldr	r2, [pc, #80]	; (80002e8 <main+0xc8>)
 8000296:	1d38      	adds	r0, r7, #4
 8000298:	2300      	movs	r3, #0
 800029a:	6811      	ldr	r1, [r2, #0]
 800029c:	6852      	ldr	r2, [r2, #4]
 800029e:	f003 fb01 	bl	80038a4 <ssd1306_WriteString>
	  //ssd1306_WriteString(*text, Font_6x8 , White);
	  ssd1306_UpdateScreen();
 80002a2:	f003 f9d5 	bl	8003650 <ssd1306_UpdateScreen>

	  //Prescale of PWM: 1000 -> ~8kHz
	  while (CH1_DC < 1000)
 80002a6:	e008      	b.n	80002ba <main+0x9a>
	        {
	            TIM1->CCR4 = CH1_DC;
 80002a8:	4b10      	ldr	r3, [pc, #64]	; (80002ec <main+0xcc>)
 80002aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80002ac:	641a      	str	r2, [r3, #64]	; 0x40
	            CH1_DC += 70;
 80002ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80002b0:	3346      	adds	r3, #70	; 0x46
 80002b2:	637b      	str	r3, [r7, #52]	; 0x34
	            HAL_Delay(100);
 80002b4:	2064      	movs	r0, #100	; 0x64
 80002b6:	f000 fc0f 	bl	8000ad8 <HAL_Delay>
	  while (CH1_DC < 1000)
 80002ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80002bc:	23fa      	movs	r3, #250	; 0xfa
 80002be:	009b      	lsls	r3, r3, #2
 80002c0:	429a      	cmp	r2, r3
 80002c2:	dbf1      	blt.n	80002a8 <main+0x88>
	        }
		while(CH1_DC > 0)
 80002c4:	e008      	b.n	80002d8 <main+0xb8>
		{
			TIM1->CCR4 = CH1_DC;
 80002c6:	4b09      	ldr	r3, [pc, #36]	; (80002ec <main+0xcc>)
 80002c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80002ca:	641a      	str	r2, [r3, #64]	; 0x40
			CH1_DC -= 70;
 80002cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80002ce:	3b46      	subs	r3, #70	; 0x46
 80002d0:	637b      	str	r3, [r7, #52]	; 0x34
			HAL_Delay(100);
 80002d2:	2064      	movs	r0, #100	; 0x64
 80002d4:	f000 fc00 	bl	8000ad8 <HAL_Delay>
		while(CH1_DC > 0)
 80002d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80002da:	2b00      	cmp	r3, #0
 80002dc:	dcf3      	bgt.n	80002c6 <main+0xa6>
  {
 80002de:	e7c6      	b.n	800026e <main+0x4e>
 80002e0:	200008a4 	.word	0x200008a4
 80002e4:	08003a18 	.word	0x08003a18
 80002e8:	2000000c 	.word	0x2000000c
 80002ec:	40012c00 	.word	0x40012c00

080002f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002f0:	b590      	push	{r4, r7, lr}
 80002f2:	b097      	sub	sp, #92	; 0x5c
 80002f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002f6:	2428      	movs	r4, #40	; 0x28
 80002f8:	193b      	adds	r3, r7, r4
 80002fa:	0018      	movs	r0, r3
 80002fc:	2330      	movs	r3, #48	; 0x30
 80002fe:	001a      	movs	r2, r3
 8000300:	2100      	movs	r1, #0
 8000302:	f003 fb75 	bl	80039f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000306:	2318      	movs	r3, #24
 8000308:	18fb      	adds	r3, r7, r3
 800030a:	0018      	movs	r0, r3
 800030c:	2310      	movs	r3, #16
 800030e:	001a      	movs	r2, r3
 8000310:	2100      	movs	r1, #0
 8000312:	f003 fb6d 	bl	80039f0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000316:	1d3b      	adds	r3, r7, #4
 8000318:	0018      	movs	r0, r3
 800031a:	2314      	movs	r3, #20
 800031c:	001a      	movs	r2, r3
 800031e:	2100      	movs	r1, #0
 8000320:	f003 fb66 	bl	80039f0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8000324:	0021      	movs	r1, r4
 8000326:	187b      	adds	r3, r7, r1
 8000328:	2212      	movs	r2, #18
 800032a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800032c:	187b      	adds	r3, r7, r1
 800032e:	2201      	movs	r2, #1
 8000330:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000332:	187b      	adds	r3, r7, r1
 8000334:	2201      	movs	r2, #1
 8000336:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000338:	187b      	adds	r3, r7, r1
 800033a:	2210      	movs	r2, #16
 800033c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 800033e:	187b      	adds	r3, r7, r1
 8000340:	2210      	movs	r2, #16
 8000342:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000344:	187b      	adds	r3, r7, r1
 8000346:	2200      	movs	r2, #0
 8000348:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800034a:	187b      	adds	r3, r7, r1
 800034c:	0018      	movs	r0, r3
 800034e:	f001 fcab 	bl	8001ca8 <HAL_RCC_OscConfig>
 8000352:	1e03      	subs	r3, r0, #0
 8000354:	d001      	beq.n	800035a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000356:	f000 f9f7 	bl	8000748 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800035a:	2118      	movs	r1, #24
 800035c:	187b      	adds	r3, r7, r1
 800035e:	2207      	movs	r2, #7
 8000360:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000362:	187b      	adds	r3, r7, r1
 8000364:	2200      	movs	r2, #0
 8000366:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000368:	187b      	adds	r3, r7, r1
 800036a:	2200      	movs	r2, #0
 800036c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800036e:	187b      	adds	r3, r7, r1
 8000370:	2200      	movs	r2, #0
 8000372:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000374:	187b      	adds	r3, r7, r1
 8000376:	2100      	movs	r1, #0
 8000378:	0018      	movs	r0, r3
 800037a:	f001 ffb3 	bl	80022e4 <HAL_RCC_ClockConfig>
 800037e:	1e03      	subs	r3, r0, #0
 8000380:	d001      	beq.n	8000386 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000382:	f000 f9e1 	bl	8000748 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000386:	1d3b      	adds	r3, r7, #4
 8000388:	2220      	movs	r2, #32
 800038a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800038c:	1d3b      	adds	r3, r7, #4
 800038e:	2200      	movs	r2, #0
 8000390:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000392:	1d3b      	adds	r3, r7, #4
 8000394:	0018      	movs	r0, r3
 8000396:	f002 f8d9 	bl	800254c <HAL_RCCEx_PeriphCLKConfig>
 800039a:	1e03      	subs	r3, r0, #0
 800039c:	d001      	beq.n	80003a2 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800039e:	f000 f9d3 	bl	8000748 <Error_Handler>
  }
}
 80003a2:	46c0      	nop			; (mov r8, r8)
 80003a4:	46bd      	mov	sp, r7
 80003a6:	b017      	add	sp, #92	; 0x5c
 80003a8:	bd90      	pop	{r4, r7, pc}
	...

080003ac <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b084      	sub	sp, #16
 80003b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003b2:	1d3b      	adds	r3, r7, #4
 80003b4:	0018      	movs	r0, r3
 80003b6:	230c      	movs	r3, #12
 80003b8:	001a      	movs	r2, r3
 80003ba:	2100      	movs	r1, #0
 80003bc:	f003 fb18 	bl	80039f0 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80003c0:	4b26      	ldr	r3, [pc, #152]	; (800045c <MX_ADC_Init+0xb0>)
 80003c2:	4a27      	ldr	r2, [pc, #156]	; (8000460 <MX_ADC_Init+0xb4>)
 80003c4:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80003c6:	4b25      	ldr	r3, [pc, #148]	; (800045c <MX_ADC_Init+0xb0>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80003cc:	4b23      	ldr	r3, [pc, #140]	; (800045c <MX_ADC_Init+0xb0>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003d2:	4b22      	ldr	r3, [pc, #136]	; (800045c <MX_ADC_Init+0xb0>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80003d8:	4b20      	ldr	r3, [pc, #128]	; (800045c <MX_ADC_Init+0xb0>)
 80003da:	2201      	movs	r2, #1
 80003dc:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003de:	4b1f      	ldr	r3, [pc, #124]	; (800045c <MX_ADC_Init+0xb0>)
 80003e0:	2204      	movs	r2, #4
 80003e2:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80003e4:	4b1d      	ldr	r3, [pc, #116]	; (800045c <MX_ADC_Init+0xb0>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80003ea:	4b1c      	ldr	r3, [pc, #112]	; (800045c <MX_ADC_Init+0xb0>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80003f0:	4b1a      	ldr	r3, [pc, #104]	; (800045c <MX_ADC_Init+0xb0>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80003f6:	4b19      	ldr	r3, [pc, #100]	; (800045c <MX_ADC_Init+0xb0>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003fc:	4b17      	ldr	r3, [pc, #92]	; (800045c <MX_ADC_Init+0xb0>)
 80003fe:	22c2      	movs	r2, #194	; 0xc2
 8000400:	32ff      	adds	r2, #255	; 0xff
 8000402:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000404:	4b15      	ldr	r3, [pc, #84]	; (800045c <MX_ADC_Init+0xb0>)
 8000406:	2200      	movs	r2, #0
 8000408:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 800040a:	4b14      	ldr	r3, [pc, #80]	; (800045c <MX_ADC_Init+0xb0>)
 800040c:	2224      	movs	r2, #36	; 0x24
 800040e:	2100      	movs	r1, #0
 8000410:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000412:	4b12      	ldr	r3, [pc, #72]	; (800045c <MX_ADC_Init+0xb0>)
 8000414:	2201      	movs	r2, #1
 8000416:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000418:	4b10      	ldr	r3, [pc, #64]	; (800045c <MX_ADC_Init+0xb0>)
 800041a:	0018      	movs	r0, r3
 800041c:	f000 fb80 	bl	8000b20 <HAL_ADC_Init>
 8000420:	1e03      	subs	r3, r0, #0
 8000422:	d001      	beq.n	8000428 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000424:	f000 f990 	bl	8000748 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000428:	1d3b      	adds	r3, r7, #4
 800042a:	2200      	movs	r2, #0
 800042c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800042e:	1d3b      	adds	r3, r7, #4
 8000430:	2280      	movs	r2, #128	; 0x80
 8000432:	0152      	lsls	r2, r2, #5
 8000434:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000436:	1d3b      	adds	r3, r7, #4
 8000438:	2280      	movs	r2, #128	; 0x80
 800043a:	0552      	lsls	r2, r2, #21
 800043c:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800043e:	1d3a      	adds	r2, r7, #4
 8000440:	4b06      	ldr	r3, [pc, #24]	; (800045c <MX_ADC_Init+0xb0>)
 8000442:	0011      	movs	r1, r2
 8000444:	0018      	movs	r0, r3
 8000446:	f000 fcab 	bl	8000da0 <HAL_ADC_ConfigChannel>
 800044a:	1e03      	subs	r3, r0, #0
 800044c:	d001      	beq.n	8000452 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 800044e:	f000 f97b 	bl	8000748 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000452:	46c0      	nop			; (mov r8, r8)
 8000454:	46bd      	mov	sp, r7
 8000456:	b004      	add	sp, #16
 8000458:	bd80      	pop	{r7, pc}
 800045a:	46c0      	nop			; (mov r8, r8)
 800045c:	200008ec 	.word	0x200008ec
 8000460:	40012400 	.word	0x40012400

08000464 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000468:	4b1b      	ldr	r3, [pc, #108]	; (80004d8 <MX_I2C1_Init+0x74>)
 800046a:	4a1c      	ldr	r2, [pc, #112]	; (80004dc <MX_I2C1_Init+0x78>)
 800046c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800046e:	4b1a      	ldr	r3, [pc, #104]	; (80004d8 <MX_I2C1_Init+0x74>)
 8000470:	4a1b      	ldr	r2, [pc, #108]	; (80004e0 <MX_I2C1_Init+0x7c>)
 8000472:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 120;
 8000474:	4b18      	ldr	r3, [pc, #96]	; (80004d8 <MX_I2C1_Init+0x74>)
 8000476:	2278      	movs	r2, #120	; 0x78
 8000478:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800047a:	4b17      	ldr	r3, [pc, #92]	; (80004d8 <MX_I2C1_Init+0x74>)
 800047c:	2201      	movs	r2, #1
 800047e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000480:	4b15      	ldr	r3, [pc, #84]	; (80004d8 <MX_I2C1_Init+0x74>)
 8000482:	2200      	movs	r2, #0
 8000484:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000486:	4b14      	ldr	r3, [pc, #80]	; (80004d8 <MX_I2C1_Init+0x74>)
 8000488:	2200      	movs	r2, #0
 800048a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800048c:	4b12      	ldr	r3, [pc, #72]	; (80004d8 <MX_I2C1_Init+0x74>)
 800048e:	2200      	movs	r2, #0
 8000490:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000492:	4b11      	ldr	r3, [pc, #68]	; (80004d8 <MX_I2C1_Init+0x74>)
 8000494:	2200      	movs	r2, #0
 8000496:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000498:	4b0f      	ldr	r3, [pc, #60]	; (80004d8 <MX_I2C1_Init+0x74>)
 800049a:	2200      	movs	r2, #0
 800049c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800049e:	4b0e      	ldr	r3, [pc, #56]	; (80004d8 <MX_I2C1_Init+0x74>)
 80004a0:	0018      	movs	r0, r3
 80004a2:	f000 ffb5 	bl	8001410 <HAL_I2C_Init>
 80004a6:	1e03      	subs	r3, r0, #0
 80004a8:	d001      	beq.n	80004ae <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80004aa:	f000 f94d 	bl	8000748 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80004ae:	4b0a      	ldr	r3, [pc, #40]	; (80004d8 <MX_I2C1_Init+0x74>)
 80004b0:	2100      	movs	r1, #0
 80004b2:	0018      	movs	r0, r3
 80004b4:	f001 fb60 	bl	8001b78 <HAL_I2CEx_ConfigAnalogFilter>
 80004b8:	1e03      	subs	r3, r0, #0
 80004ba:	d001      	beq.n	80004c0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80004bc:	f000 f944 	bl	8000748 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80004c0:	4b05      	ldr	r3, [pc, #20]	; (80004d8 <MX_I2C1_Init+0x74>)
 80004c2:	2100      	movs	r1, #0
 80004c4:	0018      	movs	r0, r3
 80004c6:	f001 fba3 	bl	8001c10 <HAL_I2CEx_ConfigDigitalFilter>
 80004ca:	1e03      	subs	r3, r0, #0
 80004cc:	d001      	beq.n	80004d2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80004ce:	f000 f93b 	bl	8000748 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80004d2:	46c0      	nop			; (mov r8, r8)
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	20000858 	.word	0x20000858
 80004dc:	40005400 	.word	0x40005400
 80004e0:	2000090e 	.word	0x2000090e

080004e4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b096      	sub	sp, #88	; 0x58
 80004e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004ea:	2348      	movs	r3, #72	; 0x48
 80004ec:	18fb      	adds	r3, r7, r3
 80004ee:	0018      	movs	r0, r3
 80004f0:	2310      	movs	r3, #16
 80004f2:	001a      	movs	r2, r3
 80004f4:	2100      	movs	r1, #0
 80004f6:	f003 fa7b 	bl	80039f0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004fa:	2340      	movs	r3, #64	; 0x40
 80004fc:	18fb      	adds	r3, r7, r3
 80004fe:	0018      	movs	r0, r3
 8000500:	2308      	movs	r3, #8
 8000502:	001a      	movs	r2, r3
 8000504:	2100      	movs	r1, #0
 8000506:	f003 fa73 	bl	80039f0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800050a:	2324      	movs	r3, #36	; 0x24
 800050c:	18fb      	adds	r3, r7, r3
 800050e:	0018      	movs	r0, r3
 8000510:	231c      	movs	r3, #28
 8000512:	001a      	movs	r2, r3
 8000514:	2100      	movs	r1, #0
 8000516:	f003 fa6b 	bl	80039f0 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800051a:	1d3b      	adds	r3, r7, #4
 800051c:	0018      	movs	r0, r3
 800051e:	2320      	movs	r3, #32
 8000520:	001a      	movs	r2, r3
 8000522:	2100      	movs	r1, #0
 8000524:	f003 fa64 	bl	80039f0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000528:	4b45      	ldr	r3, [pc, #276]	; (8000640 <MX_TIM1_Init+0x15c>)
 800052a:	4a46      	ldr	r2, [pc, #280]	; (8000644 <MX_TIM1_Init+0x160>)
 800052c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800052e:	4b44      	ldr	r3, [pc, #272]	; (8000640 <MX_TIM1_Init+0x15c>)
 8000530:	2200      	movs	r2, #0
 8000532:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000534:	4b42      	ldr	r3, [pc, #264]	; (8000640 <MX_TIM1_Init+0x15c>)
 8000536:	2200      	movs	r2, #0
 8000538:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 800053a:	4b41      	ldr	r3, [pc, #260]	; (8000640 <MX_TIM1_Init+0x15c>)
 800053c:	22fa      	movs	r2, #250	; 0xfa
 800053e:	0092      	lsls	r2, r2, #2
 8000540:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000542:	4b3f      	ldr	r3, [pc, #252]	; (8000640 <MX_TIM1_Init+0x15c>)
 8000544:	2200      	movs	r2, #0
 8000546:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000548:	4b3d      	ldr	r3, [pc, #244]	; (8000640 <MX_TIM1_Init+0x15c>)
 800054a:	2200      	movs	r2, #0
 800054c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800054e:	4b3c      	ldr	r3, [pc, #240]	; (8000640 <MX_TIM1_Init+0x15c>)
 8000550:	2280      	movs	r2, #128	; 0x80
 8000552:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000554:	4b3a      	ldr	r3, [pc, #232]	; (8000640 <MX_TIM1_Init+0x15c>)
 8000556:	0018      	movs	r0, r3
 8000558:	f002 f8d6 	bl	8002708 <HAL_TIM_Base_Init>
 800055c:	1e03      	subs	r3, r0, #0
 800055e:	d001      	beq.n	8000564 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 8000560:	f000 f8f2 	bl	8000748 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000564:	2148      	movs	r1, #72	; 0x48
 8000566:	187b      	adds	r3, r7, r1
 8000568:	2280      	movs	r2, #128	; 0x80
 800056a:	0152      	lsls	r2, r2, #5
 800056c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800056e:	187a      	adds	r2, r7, r1
 8000570:	4b33      	ldr	r3, [pc, #204]	; (8000640 <MX_TIM1_Init+0x15c>)
 8000572:	0011      	movs	r1, r2
 8000574:	0018      	movs	r0, r3
 8000576:	f002 fae7 	bl	8002b48 <HAL_TIM_ConfigClockSource>
 800057a:	1e03      	subs	r3, r0, #0
 800057c:	d001      	beq.n	8000582 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800057e:	f000 f8e3 	bl	8000748 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000582:	4b2f      	ldr	r3, [pc, #188]	; (8000640 <MX_TIM1_Init+0x15c>)
 8000584:	0018      	movs	r0, r3
 8000586:	f002 f90f 	bl	80027a8 <HAL_TIM_PWM_Init>
 800058a:	1e03      	subs	r3, r0, #0
 800058c:	d001      	beq.n	8000592 <MX_TIM1_Init+0xae>
  {
    Error_Handler();
 800058e:	f000 f8db 	bl	8000748 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000592:	2140      	movs	r1, #64	; 0x40
 8000594:	187b      	adds	r3, r7, r1
 8000596:	2200      	movs	r2, #0
 8000598:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800059a:	187b      	adds	r3, r7, r1
 800059c:	2200      	movs	r2, #0
 800059e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80005a0:	187a      	adds	r2, r7, r1
 80005a2:	4b27      	ldr	r3, [pc, #156]	; (8000640 <MX_TIM1_Init+0x15c>)
 80005a4:	0011      	movs	r1, r2
 80005a6:	0018      	movs	r0, r3
 80005a8:	f002 fed2 	bl	8003350 <HAL_TIMEx_MasterConfigSynchronization>
 80005ac:	1e03      	subs	r3, r0, #0
 80005ae:	d001      	beq.n	80005b4 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 80005b0:	f000 f8ca 	bl	8000748 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005b4:	2124      	movs	r1, #36	; 0x24
 80005b6:	187b      	adds	r3, r7, r1
 80005b8:	2260      	movs	r2, #96	; 0x60
 80005ba:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80005bc:	187b      	adds	r3, r7, r1
 80005be:	2200      	movs	r2, #0
 80005c0:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005c2:	187b      	adds	r3, r7, r1
 80005c4:	2200      	movs	r2, #0
 80005c6:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005c8:	187b      	adds	r3, r7, r1
 80005ca:	2200      	movs	r2, #0
 80005cc:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80005ce:	187b      	adds	r3, r7, r1
 80005d0:	2200      	movs	r2, #0
 80005d2:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80005d4:	187b      	adds	r3, r7, r1
 80005d6:	2200      	movs	r2, #0
 80005d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80005da:	1879      	adds	r1, r7, r1
 80005dc:	4b18      	ldr	r3, [pc, #96]	; (8000640 <MX_TIM1_Init+0x15c>)
 80005de:	220c      	movs	r2, #12
 80005e0:	0018      	movs	r0, r3
 80005e2:	f002 f9eb 	bl	80029bc <HAL_TIM_PWM_ConfigChannel>
 80005e6:	1e03      	subs	r3, r0, #0
 80005e8:	d001      	beq.n	80005ee <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 80005ea:	f000 f8ad 	bl	8000748 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80005ee:	1d3b      	adds	r3, r7, #4
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80005f4:	1d3b      	adds	r3, r7, #4
 80005f6:	2200      	movs	r2, #0
 80005f8:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80005fa:	1d3b      	adds	r3, r7, #4
 80005fc:	2200      	movs	r2, #0
 80005fe:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000600:	1d3b      	adds	r3, r7, #4
 8000602:	2200      	movs	r2, #0
 8000604:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000606:	1d3b      	adds	r3, r7, #4
 8000608:	2200      	movs	r2, #0
 800060a:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800060c:	1d3b      	adds	r3, r7, #4
 800060e:	2280      	movs	r2, #128	; 0x80
 8000610:	0192      	lsls	r2, r2, #6
 8000612:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000614:	1d3b      	adds	r3, r7, #4
 8000616:	2200      	movs	r2, #0
 8000618:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800061a:	1d3a      	adds	r2, r7, #4
 800061c:	4b08      	ldr	r3, [pc, #32]	; (8000640 <MX_TIM1_Init+0x15c>)
 800061e:	0011      	movs	r1, r2
 8000620:	0018      	movs	r0, r3
 8000622:	f002 feed 	bl	8003400 <HAL_TIMEx_ConfigBreakDeadTime>
 8000626:	1e03      	subs	r3, r0, #0
 8000628:	d001      	beq.n	800062e <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 800062a:	f000 f88d 	bl	8000748 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800062e:	4b04      	ldr	r3, [pc, #16]	; (8000640 <MX_TIM1_Init+0x15c>)
 8000630:	0018      	movs	r0, r3
 8000632:	f000 f967 	bl	8000904 <HAL_TIM_MspPostInit>

}
 8000636:	46c0      	nop			; (mov r8, r8)
 8000638:	46bd      	mov	sp, r7
 800063a:	b016      	add	sp, #88	; 0x58
 800063c:	bd80      	pop	{r7, pc}
 800063e:	46c0      	nop			; (mov r8, r8)
 8000640:	200008a4 	.word	0x200008a4
 8000644:	40012c00 	.word	0x40012c00

08000648 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000648:	b590      	push	{r4, r7, lr}
 800064a:	b089      	sub	sp, #36	; 0x24
 800064c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064e:	240c      	movs	r4, #12
 8000650:	193b      	adds	r3, r7, r4
 8000652:	0018      	movs	r0, r3
 8000654:	2314      	movs	r3, #20
 8000656:	001a      	movs	r2, r3
 8000658:	2100      	movs	r1, #0
 800065a:	f003 f9c9 	bl	80039f0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800065e:	4b36      	ldr	r3, [pc, #216]	; (8000738 <MX_GPIO_Init+0xf0>)
 8000660:	695a      	ldr	r2, [r3, #20]
 8000662:	4b35      	ldr	r3, [pc, #212]	; (8000738 <MX_GPIO_Init+0xf0>)
 8000664:	2180      	movs	r1, #128	; 0x80
 8000666:	0309      	lsls	r1, r1, #12
 8000668:	430a      	orrs	r2, r1
 800066a:	615a      	str	r2, [r3, #20]
 800066c:	4b32      	ldr	r3, [pc, #200]	; (8000738 <MX_GPIO_Init+0xf0>)
 800066e:	695a      	ldr	r2, [r3, #20]
 8000670:	2380      	movs	r3, #128	; 0x80
 8000672:	031b      	lsls	r3, r3, #12
 8000674:	4013      	ands	r3, r2
 8000676:	60bb      	str	r3, [r7, #8]
 8000678:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800067a:	4b2f      	ldr	r3, [pc, #188]	; (8000738 <MX_GPIO_Init+0xf0>)
 800067c:	695a      	ldr	r2, [r3, #20]
 800067e:	4b2e      	ldr	r3, [pc, #184]	; (8000738 <MX_GPIO_Init+0xf0>)
 8000680:	2180      	movs	r1, #128	; 0x80
 8000682:	0289      	lsls	r1, r1, #10
 8000684:	430a      	orrs	r2, r1
 8000686:	615a      	str	r2, [r3, #20]
 8000688:	4b2b      	ldr	r3, [pc, #172]	; (8000738 <MX_GPIO_Init+0xf0>)
 800068a:	695a      	ldr	r2, [r3, #20]
 800068c:	2380      	movs	r3, #128	; 0x80
 800068e:	029b      	lsls	r3, r3, #10
 8000690:	4013      	ands	r3, r2
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000696:	4b28      	ldr	r3, [pc, #160]	; (8000738 <MX_GPIO_Init+0xf0>)
 8000698:	695a      	ldr	r2, [r3, #20]
 800069a:	4b27      	ldr	r3, [pc, #156]	; (8000738 <MX_GPIO_Init+0xf0>)
 800069c:	2180      	movs	r1, #128	; 0x80
 800069e:	02c9      	lsls	r1, r1, #11
 80006a0:	430a      	orrs	r2, r1
 80006a2:	615a      	str	r2, [r3, #20]
 80006a4:	4b24      	ldr	r3, [pc, #144]	; (8000738 <MX_GPIO_Init+0xf0>)
 80006a6:	695a      	ldr	r2, [r3, #20]
 80006a8:	2380      	movs	r3, #128	; 0x80
 80006aa:	02db      	lsls	r3, r3, #11
 80006ac:	4013      	ands	r3, r2
 80006ae:	603b      	str	r3, [r7, #0]
 80006b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_11
 80006b2:	4922      	ldr	r1, [pc, #136]	; (800073c <MX_GPIO_Init+0xf4>)
 80006b4:	4b22      	ldr	r3, [pc, #136]	; (8000740 <MX_GPIO_Init+0xf8>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	0018      	movs	r0, r3
 80006ba:	f000 fe8b 	bl	80013d4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80006be:	193b      	adds	r3, r7, r4
 80006c0:	221f      	movs	r2, #31
 80006c2:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006c4:	193b      	adds	r3, r7, r4
 80006c6:	2200      	movs	r2, #0
 80006c8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ca:	193b      	adds	r3, r7, r4
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006d0:	193b      	adds	r3, r7, r4
 80006d2:	4a1c      	ldr	r2, [pc, #112]	; (8000744 <MX_GPIO_Init+0xfc>)
 80006d4:	0019      	movs	r1, r3
 80006d6:	0010      	movs	r0, r2
 80006d8:	f000 fd0c 	bl	80010f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB11
                           PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_11
 80006dc:	193b      	adds	r3, r7, r4
 80006de:	4a17      	ldr	r2, [pc, #92]	; (800073c <MX_GPIO_Init+0xf4>)
 80006e0:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e2:	193b      	adds	r3, r7, r4
 80006e4:	2201      	movs	r2, #1
 80006e6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e8:	193b      	adds	r3, r7, r4
 80006ea:	2200      	movs	r2, #0
 80006ec:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ee:	193b      	adds	r3, r7, r4
 80006f0:	2200      	movs	r2, #0
 80006f2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006f4:	193b      	adds	r3, r7, r4
 80006f6:	4a12      	ldr	r2, [pc, #72]	; (8000740 <MX_GPIO_Init+0xf8>)
 80006f8:	0019      	movs	r1, r3
 80006fa:	0010      	movs	r0, r2
 80006fc:	f000 fcfa 	bl	80010f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000700:	0021      	movs	r1, r4
 8000702:	187b      	adds	r3, r7, r1
 8000704:	22e0      	movs	r2, #224	; 0xe0
 8000706:	0212      	lsls	r2, r2, #8
 8000708:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800070a:	187b      	adds	r3, r7, r1
 800070c:	2202      	movs	r2, #2
 800070e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000710:	187b      	adds	r3, r7, r1
 8000712:	2200      	movs	r2, #0
 8000714:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000716:	187b      	adds	r3, r7, r1
 8000718:	2203      	movs	r2, #3
 800071a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 800071c:	187b      	adds	r3, r7, r1
 800071e:	2200      	movs	r2, #0
 8000720:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000722:	187b      	adds	r3, r7, r1
 8000724:	4a06      	ldr	r2, [pc, #24]	; (8000740 <MX_GPIO_Init+0xf8>)
 8000726:	0019      	movs	r1, r3
 8000728:	0010      	movs	r0, r2
 800072a:	f000 fce3 	bl	80010f4 <HAL_GPIO_Init>

}
 800072e:	46c0      	nop			; (mov r8, r8)
 8000730:	46bd      	mov	sp, r7
 8000732:	b009      	add	sp, #36	; 0x24
 8000734:	bd90      	pop	{r4, r7, pc}
 8000736:	46c0      	nop			; (mov r8, r8)
 8000738:	40021000 	.word	0x40021000
 800073c:	00001807 	.word	0x00001807
 8000740:	48000400 	.word	0x48000400
 8000744:	48000800 	.word	0x48000800

08000748 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800074c:	b672      	cpsid	i
}
 800074e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000750:	e7fe      	b.n	8000750 <Error_Handler+0x8>
	...

08000754 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800075a:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <HAL_MspInit+0x44>)
 800075c:	699a      	ldr	r2, [r3, #24]
 800075e:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <HAL_MspInit+0x44>)
 8000760:	2101      	movs	r1, #1
 8000762:	430a      	orrs	r2, r1
 8000764:	619a      	str	r2, [r3, #24]
 8000766:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <HAL_MspInit+0x44>)
 8000768:	699b      	ldr	r3, [r3, #24]
 800076a:	2201      	movs	r2, #1
 800076c:	4013      	ands	r3, r2
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000772:	4b09      	ldr	r3, [pc, #36]	; (8000798 <HAL_MspInit+0x44>)
 8000774:	69da      	ldr	r2, [r3, #28]
 8000776:	4b08      	ldr	r3, [pc, #32]	; (8000798 <HAL_MspInit+0x44>)
 8000778:	2180      	movs	r1, #128	; 0x80
 800077a:	0549      	lsls	r1, r1, #21
 800077c:	430a      	orrs	r2, r1
 800077e:	61da      	str	r2, [r3, #28]
 8000780:	4b05      	ldr	r3, [pc, #20]	; (8000798 <HAL_MspInit+0x44>)
 8000782:	69da      	ldr	r2, [r3, #28]
 8000784:	2380      	movs	r3, #128	; 0x80
 8000786:	055b      	lsls	r3, r3, #21
 8000788:	4013      	ands	r3, r2
 800078a:	603b      	str	r3, [r7, #0]
 800078c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800078e:	46c0      	nop			; (mov r8, r8)
 8000790:	46bd      	mov	sp, r7
 8000792:	b002      	add	sp, #8
 8000794:	bd80      	pop	{r7, pc}
 8000796:	46c0      	nop			; (mov r8, r8)
 8000798:	40021000 	.word	0x40021000

0800079c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800079c:	b590      	push	{r4, r7, lr}
 800079e:	b08b      	sub	sp, #44	; 0x2c
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a4:	2414      	movs	r4, #20
 80007a6:	193b      	adds	r3, r7, r4
 80007a8:	0018      	movs	r0, r3
 80007aa:	2314      	movs	r3, #20
 80007ac:	001a      	movs	r2, r3
 80007ae:	2100      	movs	r1, #0
 80007b0:	f003 f91e 	bl	80039f0 <memset>
  if(hadc->Instance==ADC1)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a19      	ldr	r2, [pc, #100]	; (8000820 <HAL_ADC_MspInit+0x84>)
 80007ba:	4293      	cmp	r3, r2
 80007bc:	d12b      	bne.n	8000816 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80007be:	4b19      	ldr	r3, [pc, #100]	; (8000824 <HAL_ADC_MspInit+0x88>)
 80007c0:	699a      	ldr	r2, [r3, #24]
 80007c2:	4b18      	ldr	r3, [pc, #96]	; (8000824 <HAL_ADC_MspInit+0x88>)
 80007c4:	2180      	movs	r1, #128	; 0x80
 80007c6:	0089      	lsls	r1, r1, #2
 80007c8:	430a      	orrs	r2, r1
 80007ca:	619a      	str	r2, [r3, #24]
 80007cc:	4b15      	ldr	r3, [pc, #84]	; (8000824 <HAL_ADC_MspInit+0x88>)
 80007ce:	699a      	ldr	r2, [r3, #24]
 80007d0:	2380      	movs	r3, #128	; 0x80
 80007d2:	009b      	lsls	r3, r3, #2
 80007d4:	4013      	ands	r3, r2
 80007d6:	613b      	str	r3, [r7, #16]
 80007d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007da:	4b12      	ldr	r3, [pc, #72]	; (8000824 <HAL_ADC_MspInit+0x88>)
 80007dc:	695a      	ldr	r2, [r3, #20]
 80007de:	4b11      	ldr	r3, [pc, #68]	; (8000824 <HAL_ADC_MspInit+0x88>)
 80007e0:	2180      	movs	r1, #128	; 0x80
 80007e2:	0289      	lsls	r1, r1, #10
 80007e4:	430a      	orrs	r2, r1
 80007e6:	615a      	str	r2, [r3, #20]
 80007e8:	4b0e      	ldr	r3, [pc, #56]	; (8000824 <HAL_ADC_MspInit+0x88>)
 80007ea:	695a      	ldr	r2, [r3, #20]
 80007ec:	2380      	movs	r3, #128	; 0x80
 80007ee:	029b      	lsls	r3, r3, #10
 80007f0:	4013      	ands	r3, r2
 80007f2:	60fb      	str	r3, [r7, #12]
 80007f4:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007f6:	193b      	adds	r3, r7, r4
 80007f8:	2201      	movs	r2, #1
 80007fa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007fc:	193b      	adds	r3, r7, r4
 80007fe:	2203      	movs	r2, #3
 8000800:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	193b      	adds	r3, r7, r4
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000808:	193a      	adds	r2, r7, r4
 800080a:	2390      	movs	r3, #144	; 0x90
 800080c:	05db      	lsls	r3, r3, #23
 800080e:	0011      	movs	r1, r2
 8000810:	0018      	movs	r0, r3
 8000812:	f000 fc6f 	bl	80010f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000816:	46c0      	nop			; (mov r8, r8)
 8000818:	46bd      	mov	sp, r7
 800081a:	b00b      	add	sp, #44	; 0x2c
 800081c:	bd90      	pop	{r4, r7, pc}
 800081e:	46c0      	nop			; (mov r8, r8)
 8000820:	40012400 	.word	0x40012400
 8000824:	40021000 	.word	0x40021000

08000828 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000828:	b590      	push	{r4, r7, lr}
 800082a:	b08b      	sub	sp, #44	; 0x2c
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000830:	2414      	movs	r4, #20
 8000832:	193b      	adds	r3, r7, r4
 8000834:	0018      	movs	r0, r3
 8000836:	2314      	movs	r3, #20
 8000838:	001a      	movs	r2, r3
 800083a:	2100      	movs	r1, #0
 800083c:	f003 f8d8 	bl	80039f0 <memset>
  if(hi2c->Instance==I2C1)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a1c      	ldr	r2, [pc, #112]	; (80008b8 <HAL_I2C_MspInit+0x90>)
 8000846:	4293      	cmp	r3, r2
 8000848:	d132      	bne.n	80008b0 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800084a:	4b1c      	ldr	r3, [pc, #112]	; (80008bc <HAL_I2C_MspInit+0x94>)
 800084c:	695a      	ldr	r2, [r3, #20]
 800084e:	4b1b      	ldr	r3, [pc, #108]	; (80008bc <HAL_I2C_MspInit+0x94>)
 8000850:	2180      	movs	r1, #128	; 0x80
 8000852:	02c9      	lsls	r1, r1, #11
 8000854:	430a      	orrs	r2, r1
 8000856:	615a      	str	r2, [r3, #20]
 8000858:	4b18      	ldr	r3, [pc, #96]	; (80008bc <HAL_I2C_MspInit+0x94>)
 800085a:	695a      	ldr	r2, [r3, #20]
 800085c:	2380      	movs	r3, #128	; 0x80
 800085e:	02db      	lsls	r3, r3, #11
 8000860:	4013      	ands	r3, r2
 8000862:	613b      	str	r3, [r7, #16]
 8000864:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000866:	193b      	adds	r3, r7, r4
 8000868:	22c0      	movs	r2, #192	; 0xc0
 800086a:	0092      	lsls	r2, r2, #2
 800086c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800086e:	0021      	movs	r1, r4
 8000870:	187b      	adds	r3, r7, r1
 8000872:	2212      	movs	r2, #18
 8000874:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	187b      	adds	r3, r7, r1
 8000878:	2200      	movs	r2, #0
 800087a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800087c:	187b      	adds	r3, r7, r1
 800087e:	2203      	movs	r2, #3
 8000880:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000882:	187b      	adds	r3, r7, r1
 8000884:	2201      	movs	r2, #1
 8000886:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000888:	187b      	adds	r3, r7, r1
 800088a:	4a0d      	ldr	r2, [pc, #52]	; (80008c0 <HAL_I2C_MspInit+0x98>)
 800088c:	0019      	movs	r1, r3
 800088e:	0010      	movs	r0, r2
 8000890:	f000 fc30 	bl	80010f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000894:	4b09      	ldr	r3, [pc, #36]	; (80008bc <HAL_I2C_MspInit+0x94>)
 8000896:	69da      	ldr	r2, [r3, #28]
 8000898:	4b08      	ldr	r3, [pc, #32]	; (80008bc <HAL_I2C_MspInit+0x94>)
 800089a:	2180      	movs	r1, #128	; 0x80
 800089c:	0389      	lsls	r1, r1, #14
 800089e:	430a      	orrs	r2, r1
 80008a0:	61da      	str	r2, [r3, #28]
 80008a2:	4b06      	ldr	r3, [pc, #24]	; (80008bc <HAL_I2C_MspInit+0x94>)
 80008a4:	69da      	ldr	r2, [r3, #28]
 80008a6:	2380      	movs	r3, #128	; 0x80
 80008a8:	039b      	lsls	r3, r3, #14
 80008aa:	4013      	ands	r3, r2
 80008ac:	60fb      	str	r3, [r7, #12]
 80008ae:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80008b0:	46c0      	nop			; (mov r8, r8)
 80008b2:	46bd      	mov	sp, r7
 80008b4:	b00b      	add	sp, #44	; 0x2c
 80008b6:	bd90      	pop	{r4, r7, pc}
 80008b8:	40005400 	.word	0x40005400
 80008bc:	40021000 	.word	0x40021000
 80008c0:	48000400 	.word	0x48000400

080008c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a0a      	ldr	r2, [pc, #40]	; (80008fc <HAL_TIM_Base_MspInit+0x38>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d10d      	bne.n	80008f2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80008d6:	4b0a      	ldr	r3, [pc, #40]	; (8000900 <HAL_TIM_Base_MspInit+0x3c>)
 80008d8:	699a      	ldr	r2, [r3, #24]
 80008da:	4b09      	ldr	r3, [pc, #36]	; (8000900 <HAL_TIM_Base_MspInit+0x3c>)
 80008dc:	2180      	movs	r1, #128	; 0x80
 80008de:	0109      	lsls	r1, r1, #4
 80008e0:	430a      	orrs	r2, r1
 80008e2:	619a      	str	r2, [r3, #24]
 80008e4:	4b06      	ldr	r3, [pc, #24]	; (8000900 <HAL_TIM_Base_MspInit+0x3c>)
 80008e6:	699a      	ldr	r2, [r3, #24]
 80008e8:	2380      	movs	r3, #128	; 0x80
 80008ea:	011b      	lsls	r3, r3, #4
 80008ec:	4013      	ands	r3, r2
 80008ee:	60fb      	str	r3, [r7, #12]
 80008f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80008f2:	46c0      	nop			; (mov r8, r8)
 80008f4:	46bd      	mov	sp, r7
 80008f6:	b004      	add	sp, #16
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	46c0      	nop			; (mov r8, r8)
 80008fc:	40012c00 	.word	0x40012c00
 8000900:	40021000 	.word	0x40021000

08000904 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000904:	b590      	push	{r4, r7, lr}
 8000906:	b089      	sub	sp, #36	; 0x24
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090c:	240c      	movs	r4, #12
 800090e:	193b      	adds	r3, r7, r4
 8000910:	0018      	movs	r0, r3
 8000912:	2314      	movs	r3, #20
 8000914:	001a      	movs	r2, r3
 8000916:	2100      	movs	r1, #0
 8000918:	f003 f86a 	bl	80039f0 <memset>
  if(htim->Instance==TIM1)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a16      	ldr	r2, [pc, #88]	; (800097c <HAL_TIM_MspPostInit+0x78>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d125      	bne.n	8000972 <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000926:	4b16      	ldr	r3, [pc, #88]	; (8000980 <HAL_TIM_MspPostInit+0x7c>)
 8000928:	695a      	ldr	r2, [r3, #20]
 800092a:	4b15      	ldr	r3, [pc, #84]	; (8000980 <HAL_TIM_MspPostInit+0x7c>)
 800092c:	2180      	movs	r1, #128	; 0x80
 800092e:	0289      	lsls	r1, r1, #10
 8000930:	430a      	orrs	r2, r1
 8000932:	615a      	str	r2, [r3, #20]
 8000934:	4b12      	ldr	r3, [pc, #72]	; (8000980 <HAL_TIM_MspPostInit+0x7c>)
 8000936:	695a      	ldr	r2, [r3, #20]
 8000938:	2380      	movs	r3, #128	; 0x80
 800093a:	029b      	lsls	r3, r3, #10
 800093c:	4013      	ands	r3, r2
 800093e:	60bb      	str	r3, [r7, #8]
 8000940:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000942:	193b      	adds	r3, r7, r4
 8000944:	2280      	movs	r2, #128	; 0x80
 8000946:	0112      	lsls	r2, r2, #4
 8000948:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094a:	0021      	movs	r1, r4
 800094c:	187b      	adds	r3, r7, r1
 800094e:	2202      	movs	r2, #2
 8000950:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	187b      	adds	r3, r7, r1
 8000954:	2200      	movs	r2, #0
 8000956:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000958:	187b      	adds	r3, r7, r1
 800095a:	2200      	movs	r2, #0
 800095c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800095e:	187b      	adds	r3, r7, r1
 8000960:	2202      	movs	r2, #2
 8000962:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000964:	187a      	adds	r2, r7, r1
 8000966:	2390      	movs	r3, #144	; 0x90
 8000968:	05db      	lsls	r3, r3, #23
 800096a:	0011      	movs	r1, r2
 800096c:	0018      	movs	r0, r3
 800096e:	f000 fbc1 	bl	80010f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000972:	46c0      	nop			; (mov r8, r8)
 8000974:	46bd      	mov	sp, r7
 8000976:	b009      	add	sp, #36	; 0x24
 8000978:	bd90      	pop	{r4, r7, pc}
 800097a:	46c0      	nop			; (mov r8, r8)
 800097c:	40012c00 	.word	0x40012c00
 8000980:	40021000 	.word	0x40021000

08000984 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000988:	e7fe      	b.n	8000988 <NMI_Handler+0x4>

0800098a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800098a:	b580      	push	{r7, lr}
 800098c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800098e:	e7fe      	b.n	800098e <HardFault_Handler+0x4>

08000990 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000994:	46c0      	nop			; (mov r8, r8)
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}

0800099a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800099a:	b580      	push	{r7, lr}
 800099c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800099e:	46c0      	nop			; (mov r8, r8)
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}

080009a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009a8:	f000 f87a 	bl	8000aa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009ac:	46c0      	nop			; (mov r8, r8)
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}

080009b2 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009b2:	b580      	push	{r7, lr}
 80009b4:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80009b6:	46c0      	nop			; (mov r8, r8)
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}

080009bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009bc:	480d      	ldr	r0, [pc, #52]	; (80009f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009be:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009c0:	480d      	ldr	r0, [pc, #52]	; (80009f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80009c2:	490e      	ldr	r1, [pc, #56]	; (80009fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80009c4:	4a0e      	ldr	r2, [pc, #56]	; (8000a00 <LoopForever+0xe>)
  movs r3, #0
 80009c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009c8:	e002      	b.n	80009d0 <LoopCopyDataInit>

080009ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ce:	3304      	adds	r3, #4

080009d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009d4:	d3f9      	bcc.n	80009ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009d6:	4a0b      	ldr	r2, [pc, #44]	; (8000a04 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009d8:	4c0b      	ldr	r4, [pc, #44]	; (8000a08 <LoopForever+0x16>)
  movs r3, #0
 80009da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009dc:	e001      	b.n	80009e2 <LoopFillZerobss>

080009de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009e0:	3204      	adds	r2, #4

080009e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009e4:	d3fb      	bcc.n	80009de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80009e6:	f7ff ffe4 	bl	80009b2 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80009ea:	f002 ffdd 	bl	80039a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009ee:	f7ff fc17 	bl	8000220 <main>

080009f2 <LoopForever>:

LoopForever:
    b LoopForever
 80009f2:	e7fe      	b.n	80009f2 <LoopForever>
  ldr   r0, =_estack
 80009f4:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80009f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009fc:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000a00:	0800406c 	.word	0x0800406c
  ldr r2, =_sbss
 8000a04:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000a08:	20000930 	.word	0x20000930

08000a0c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a0c:	e7fe      	b.n	8000a0c <ADC1_IRQHandler>
	...

08000a10 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a14:	4b07      	ldr	r3, [pc, #28]	; (8000a34 <HAL_Init+0x24>)
 8000a16:	681a      	ldr	r2, [r3, #0]
 8000a18:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <HAL_Init+0x24>)
 8000a1a:	2110      	movs	r1, #16
 8000a1c:	430a      	orrs	r2, r1
 8000a1e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000a20:	2003      	movs	r0, #3
 8000a22:	f000 f809 	bl	8000a38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a26:	f7ff fe95 	bl	8000754 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a2a:	2300      	movs	r3, #0
}
 8000a2c:	0018      	movs	r0, r3
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	46c0      	nop			; (mov r8, r8)
 8000a34:	40022000 	.word	0x40022000

08000a38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a38:	b590      	push	{r4, r7, lr}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a40:	4b14      	ldr	r3, [pc, #80]	; (8000a94 <HAL_InitTick+0x5c>)
 8000a42:	681c      	ldr	r4, [r3, #0]
 8000a44:	4b14      	ldr	r3, [pc, #80]	; (8000a98 <HAL_InitTick+0x60>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	0019      	movs	r1, r3
 8000a4a:	23fa      	movs	r3, #250	; 0xfa
 8000a4c:	0098      	lsls	r0, r3, #2
 8000a4e:	f7ff fb5b 	bl	8000108 <__udivsi3>
 8000a52:	0003      	movs	r3, r0
 8000a54:	0019      	movs	r1, r3
 8000a56:	0020      	movs	r0, r4
 8000a58:	f7ff fb56 	bl	8000108 <__udivsi3>
 8000a5c:	0003      	movs	r3, r0
 8000a5e:	0018      	movs	r0, r3
 8000a60:	f000 fb3b 	bl	80010da <HAL_SYSTICK_Config>
 8000a64:	1e03      	subs	r3, r0, #0
 8000a66:	d001      	beq.n	8000a6c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	e00f      	b.n	8000a8c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	2b03      	cmp	r3, #3
 8000a70:	d80b      	bhi.n	8000a8a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a72:	6879      	ldr	r1, [r7, #4]
 8000a74:	2301      	movs	r3, #1
 8000a76:	425b      	negs	r3, r3
 8000a78:	2200      	movs	r2, #0
 8000a7a:	0018      	movs	r0, r3
 8000a7c:	f000 fb18 	bl	80010b0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a80:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <HAL_InitTick+0x64>)
 8000a82:	687a      	ldr	r2, [r7, #4]
 8000a84:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000a86:	2300      	movs	r3, #0
 8000a88:	e000      	b.n	8000a8c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000a8a:	2301      	movs	r3, #1
}
 8000a8c:	0018      	movs	r0, r3
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	b003      	add	sp, #12
 8000a92:	bd90      	pop	{r4, r7, pc}
 8000a94:	20000000 	.word	0x20000000
 8000a98:	20000008 	.word	0x20000008
 8000a9c:	20000004 	.word	0x20000004

08000aa0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000aa4:	4b05      	ldr	r3, [pc, #20]	; (8000abc <HAL_IncTick+0x1c>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	001a      	movs	r2, r3
 8000aaa:	4b05      	ldr	r3, [pc, #20]	; (8000ac0 <HAL_IncTick+0x20>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	18d2      	adds	r2, r2, r3
 8000ab0:	4b03      	ldr	r3, [pc, #12]	; (8000ac0 <HAL_IncTick+0x20>)
 8000ab2:	601a      	str	r2, [r3, #0]
}
 8000ab4:	46c0      	nop			; (mov r8, r8)
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	46c0      	nop			; (mov r8, r8)
 8000abc:	20000008 	.word	0x20000008
 8000ac0:	2000092c 	.word	0x2000092c

08000ac4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ac8:	4b02      	ldr	r3, [pc, #8]	; (8000ad4 <HAL_GetTick+0x10>)
 8000aca:	681b      	ldr	r3, [r3, #0]
}
 8000acc:	0018      	movs	r0, r3
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	46c0      	nop			; (mov r8, r8)
 8000ad4:	2000092c 	.word	0x2000092c

08000ad8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ae0:	f7ff fff0 	bl	8000ac4 <HAL_GetTick>
 8000ae4:	0003      	movs	r3, r0
 8000ae6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	3301      	adds	r3, #1
 8000af0:	d005      	beq.n	8000afe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000af2:	4b0a      	ldr	r3, [pc, #40]	; (8000b1c <HAL_Delay+0x44>)
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	001a      	movs	r2, r3
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	189b      	adds	r3, r3, r2
 8000afc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000afe:	46c0      	nop			; (mov r8, r8)
 8000b00:	f7ff ffe0 	bl	8000ac4 <HAL_GetTick>
 8000b04:	0002      	movs	r2, r0
 8000b06:	68bb      	ldr	r3, [r7, #8]
 8000b08:	1ad3      	subs	r3, r2, r3
 8000b0a:	68fa      	ldr	r2, [r7, #12]
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	d8f7      	bhi.n	8000b00 <HAL_Delay+0x28>
  {
  }
}
 8000b10:	46c0      	nop			; (mov r8, r8)
 8000b12:	46c0      	nop			; (mov r8, r8)
 8000b14:	46bd      	mov	sp, r7
 8000b16:	b004      	add	sp, #16
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	46c0      	nop			; (mov r8, r8)
 8000b1c:	20000008 	.word	0x20000008

08000b20 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b084      	sub	sp, #16
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b28:	230f      	movs	r3, #15
 8000b2a:	18fb      	adds	r3, r7, r3
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8000b30:	2300      	movs	r3, #0
 8000b32:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d101      	bne.n	8000b3e <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	e125      	b.n	8000d8a <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d10a      	bne.n	8000b5c <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	2200      	movs	r2, #0
 8000b4a:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	2234      	movs	r2, #52	; 0x34
 8000b50:	2100      	movs	r1, #0
 8000b52:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	0018      	movs	r0, r3
 8000b58:	f7ff fe20 	bl	800079c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b60:	2210      	movs	r2, #16
 8000b62:	4013      	ands	r3, r2
 8000b64:	d000      	beq.n	8000b68 <HAL_ADC_Init+0x48>
 8000b66:	e103      	b.n	8000d70 <HAL_ADC_Init+0x250>
 8000b68:	230f      	movs	r3, #15
 8000b6a:	18fb      	adds	r3, r7, r3
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d000      	beq.n	8000b74 <HAL_ADC_Init+0x54>
 8000b72:	e0fd      	b.n	8000d70 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	689b      	ldr	r3, [r3, #8]
 8000b7a:	2204      	movs	r2, #4
 8000b7c:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000b7e:	d000      	beq.n	8000b82 <HAL_ADC_Init+0x62>
 8000b80:	e0f6      	b.n	8000d70 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b86:	4a83      	ldr	r2, [pc, #524]	; (8000d94 <HAL_ADC_Init+0x274>)
 8000b88:	4013      	ands	r3, r2
 8000b8a:	2202      	movs	r2, #2
 8000b8c:	431a      	orrs	r2, r3
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	689b      	ldr	r3, [r3, #8]
 8000b98:	2203      	movs	r2, #3
 8000b9a:	4013      	ands	r3, r2
 8000b9c:	2b01      	cmp	r3, #1
 8000b9e:	d112      	bne.n	8000bc6 <HAL_ADC_Init+0xa6>
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	4013      	ands	r3, r2
 8000baa:	2b01      	cmp	r3, #1
 8000bac:	d009      	beq.n	8000bc2 <HAL_ADC_Init+0xa2>
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	68da      	ldr	r2, [r3, #12]
 8000bb4:	2380      	movs	r3, #128	; 0x80
 8000bb6:	021b      	lsls	r3, r3, #8
 8000bb8:	401a      	ands	r2, r3
 8000bba:	2380      	movs	r3, #128	; 0x80
 8000bbc:	021b      	lsls	r3, r3, #8
 8000bbe:	429a      	cmp	r2, r3
 8000bc0:	d101      	bne.n	8000bc6 <HAL_ADC_Init+0xa6>
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	e000      	b.n	8000bc8 <HAL_ADC_Init+0xa8>
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d116      	bne.n	8000bfa <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	68db      	ldr	r3, [r3, #12]
 8000bd2:	2218      	movs	r2, #24
 8000bd4:	4393      	bics	r3, r2
 8000bd6:	0019      	movs	r1, r3
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	689a      	ldr	r2, [r3, #8]
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	430a      	orrs	r2, r1
 8000be2:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	691b      	ldr	r3, [r3, #16]
 8000bea:	009b      	lsls	r3, r3, #2
 8000bec:	0899      	lsrs	r1, r3, #2
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	685a      	ldr	r2, [r3, #4]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	430a      	orrs	r2, r1
 8000bf8:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	68da      	ldr	r2, [r3, #12]
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4964      	ldr	r1, [pc, #400]	; (8000d98 <HAL_ADC_Init+0x278>)
 8000c06:	400a      	ands	r2, r1
 8000c08:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	7e1b      	ldrb	r3, [r3, #24]
 8000c0e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	7e5b      	ldrb	r3, [r3, #25]
 8000c14:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000c16:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	7e9b      	ldrb	r3, [r3, #26]
 8000c1c:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000c1e:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c24:	2b01      	cmp	r3, #1
 8000c26:	d002      	beq.n	8000c2e <HAL_ADC_Init+0x10e>
 8000c28:	2380      	movs	r3, #128	; 0x80
 8000c2a:	015b      	lsls	r3, r3, #5
 8000c2c:	e000      	b.n	8000c30 <HAL_ADC_Init+0x110>
 8000c2e:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000c30:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000c36:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	691b      	ldr	r3, [r3, #16]
 8000c3c:	2b02      	cmp	r3, #2
 8000c3e:	d101      	bne.n	8000c44 <HAL_ADC_Init+0x124>
 8000c40:	2304      	movs	r3, #4
 8000c42:	e000      	b.n	8000c46 <HAL_ADC_Init+0x126>
 8000c44:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8000c46:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	2124      	movs	r1, #36	; 0x24
 8000c4c:	5c5b      	ldrb	r3, [r3, r1]
 8000c4e:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000c50:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000c52:	68ba      	ldr	r2, [r7, #8]
 8000c54:	4313      	orrs	r3, r2
 8000c56:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	7edb      	ldrb	r3, [r3, #27]
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	d115      	bne.n	8000c8c <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	7e9b      	ldrb	r3, [r3, #26]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d105      	bne.n	8000c74 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	2280      	movs	r2, #128	; 0x80
 8000c6c:	0252      	lsls	r2, r2, #9
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	60bb      	str	r3, [r7, #8]
 8000c72:	e00b      	b.n	8000c8c <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c78:	2220      	movs	r2, #32
 8000c7a:	431a      	orrs	r2, r3
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c84:	2201      	movs	r2, #1
 8000c86:	431a      	orrs	r2, r3
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	69da      	ldr	r2, [r3, #28]
 8000c90:	23c2      	movs	r3, #194	; 0xc2
 8000c92:	33ff      	adds	r3, #255	; 0xff
 8000c94:	429a      	cmp	r2, r3
 8000c96:	d007      	beq.n	8000ca8 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	68ba      	ldr	r2, [r7, #8]
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	68d9      	ldr	r1, [r3, #12]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	68ba      	ldr	r2, [r7, #8]
 8000cb4:	430a      	orrs	r2, r1
 8000cb6:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cbc:	2380      	movs	r3, #128	; 0x80
 8000cbe:	055b      	lsls	r3, r3, #21
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	d01b      	beq.n	8000cfc <HAL_ADC_Init+0x1dc>
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cc8:	2b01      	cmp	r3, #1
 8000cca:	d017      	beq.n	8000cfc <HAL_ADC_Init+0x1dc>
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cd0:	2b02      	cmp	r3, #2
 8000cd2:	d013      	beq.n	8000cfc <HAL_ADC_Init+0x1dc>
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cd8:	2b03      	cmp	r3, #3
 8000cda:	d00f      	beq.n	8000cfc <HAL_ADC_Init+0x1dc>
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ce0:	2b04      	cmp	r3, #4
 8000ce2:	d00b      	beq.n	8000cfc <HAL_ADC_Init+0x1dc>
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ce8:	2b05      	cmp	r3, #5
 8000cea:	d007      	beq.n	8000cfc <HAL_ADC_Init+0x1dc>
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cf0:	2b06      	cmp	r3, #6
 8000cf2:	d003      	beq.n	8000cfc <HAL_ADC_Init+0x1dc>
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cf8:	2b07      	cmp	r3, #7
 8000cfa:	d112      	bne.n	8000d22 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	695a      	ldr	r2, [r3, #20]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	2107      	movs	r1, #7
 8000d08:	438a      	bics	r2, r1
 8000d0a:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	6959      	ldr	r1, [r3, #20]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d16:	2207      	movs	r2, #7
 8000d18:	401a      	ands	r2, r3
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	430a      	orrs	r2, r1
 8000d20:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	4a1c      	ldr	r2, [pc, #112]	; (8000d9c <HAL_ADC_Init+0x27c>)
 8000d2a:	4013      	ands	r3, r2
 8000d2c:	68ba      	ldr	r2, [r7, #8]
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	d10b      	bne.n	8000d4a <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	2200      	movs	r2, #0
 8000d36:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d3c:	2203      	movs	r2, #3
 8000d3e:	4393      	bics	r3, r2
 8000d40:	2201      	movs	r2, #1
 8000d42:	431a      	orrs	r2, r3
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000d48:	e01c      	b.n	8000d84 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d4e:	2212      	movs	r2, #18
 8000d50:	4393      	bics	r3, r2
 8000d52:	2210      	movs	r2, #16
 8000d54:	431a      	orrs	r2, r3
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d5e:	2201      	movs	r2, #1
 8000d60:	431a      	orrs	r2, r3
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8000d66:	230f      	movs	r3, #15
 8000d68:	18fb      	adds	r3, r7, r3
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000d6e:	e009      	b.n	8000d84 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d74:	2210      	movs	r2, #16
 8000d76:	431a      	orrs	r2, r3
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8000d7c:	230f      	movs	r3, #15
 8000d7e:	18fb      	adds	r3, r7, r3
 8000d80:	2201      	movs	r2, #1
 8000d82:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000d84:	230f      	movs	r3, #15
 8000d86:	18fb      	adds	r3, r7, r3
 8000d88:	781b      	ldrb	r3, [r3, #0]
}
 8000d8a:	0018      	movs	r0, r3
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	b004      	add	sp, #16
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	46c0      	nop			; (mov r8, r8)
 8000d94:	fffffefd 	.word	0xfffffefd
 8000d98:	fffe0219 	.word	0xfffe0219
 8000d9c:	833fffe7 	.word	0x833fffe7

08000da0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
 8000da8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000daa:	230f      	movs	r3, #15
 8000dac:	18fb      	adds	r3, r7, r3
 8000dae:	2200      	movs	r2, #0
 8000db0:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8000db2:	2300      	movs	r3, #0
 8000db4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000dba:	2380      	movs	r3, #128	; 0x80
 8000dbc:	055b      	lsls	r3, r3, #21
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	d011      	beq.n	8000de6 <HAL_ADC_ConfigChannel+0x46>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d00d      	beq.n	8000de6 <HAL_ADC_ConfigChannel+0x46>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dce:	2b02      	cmp	r3, #2
 8000dd0:	d009      	beq.n	8000de6 <HAL_ADC_ConfigChannel+0x46>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dd6:	2b03      	cmp	r3, #3
 8000dd8:	d005      	beq.n	8000de6 <HAL_ADC_ConfigChannel+0x46>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dde:	2b04      	cmp	r3, #4
 8000de0:	d001      	beq.n	8000de6 <HAL_ADC_ConfigChannel+0x46>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2234      	movs	r2, #52	; 0x34
 8000dea:	5c9b      	ldrb	r3, [r3, r2]
 8000dec:	2b01      	cmp	r3, #1
 8000dee:	d101      	bne.n	8000df4 <HAL_ADC_ConfigChannel+0x54>
 8000df0:	2302      	movs	r3, #2
 8000df2:	e0bb      	b.n	8000f6c <HAL_ADC_ConfigChannel+0x1cc>
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2234      	movs	r2, #52	; 0x34
 8000df8:	2101      	movs	r1, #1
 8000dfa:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	689b      	ldr	r3, [r3, #8]
 8000e02:	2204      	movs	r2, #4
 8000e04:	4013      	ands	r3, r2
 8000e06:	d000      	beq.n	8000e0a <HAL_ADC_ConfigChannel+0x6a>
 8000e08:	e09f      	b.n	8000f4a <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	4a59      	ldr	r2, [pc, #356]	; (8000f74 <HAL_ADC_ConfigChannel+0x1d4>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d100      	bne.n	8000e16 <HAL_ADC_ConfigChannel+0x76>
 8000e14:	e077      	b.n	8000f06 <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	2201      	movs	r2, #1
 8000e22:	409a      	lsls	r2, r3
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	430a      	orrs	r2, r1
 8000e2a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e30:	2380      	movs	r3, #128	; 0x80
 8000e32:	055b      	lsls	r3, r3, #21
 8000e34:	429a      	cmp	r2, r3
 8000e36:	d037      	beq.n	8000ea8 <HAL_ADC_ConfigChannel+0x108>
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e3c:	2b01      	cmp	r3, #1
 8000e3e:	d033      	beq.n	8000ea8 <HAL_ADC_ConfigChannel+0x108>
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e44:	2b02      	cmp	r3, #2
 8000e46:	d02f      	beq.n	8000ea8 <HAL_ADC_ConfigChannel+0x108>
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e4c:	2b03      	cmp	r3, #3
 8000e4e:	d02b      	beq.n	8000ea8 <HAL_ADC_ConfigChannel+0x108>
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e54:	2b04      	cmp	r3, #4
 8000e56:	d027      	beq.n	8000ea8 <HAL_ADC_ConfigChannel+0x108>
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e5c:	2b05      	cmp	r3, #5
 8000e5e:	d023      	beq.n	8000ea8 <HAL_ADC_ConfigChannel+0x108>
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e64:	2b06      	cmp	r3, #6
 8000e66:	d01f      	beq.n	8000ea8 <HAL_ADC_ConfigChannel+0x108>
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e6c:	2b07      	cmp	r3, #7
 8000e6e:	d01b      	beq.n	8000ea8 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	689a      	ldr	r2, [r3, #8]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	695b      	ldr	r3, [r3, #20]
 8000e7a:	2107      	movs	r1, #7
 8000e7c:	400b      	ands	r3, r1
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	d012      	beq.n	8000ea8 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	695a      	ldr	r2, [r3, #20]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	2107      	movs	r1, #7
 8000e8e:	438a      	bics	r2, r1
 8000e90:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	6959      	ldr	r1, [r3, #20]
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	689b      	ldr	r3, [r3, #8]
 8000e9c:	2207      	movs	r2, #7
 8000e9e:	401a      	ands	r2, r3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	430a      	orrs	r2, r1
 8000ea6:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	2b10      	cmp	r3, #16
 8000eae:	d003      	beq.n	8000eb8 <HAL_ADC_ConfigChannel+0x118>
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	2b11      	cmp	r3, #17
 8000eb6:	d152      	bne.n	8000f5e <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000eb8:	4b2f      	ldr	r3, [pc, #188]	; (8000f78 <HAL_ADC_ConfigChannel+0x1d8>)
 8000eba:	6819      	ldr	r1, [r3, #0]
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	2b10      	cmp	r3, #16
 8000ec2:	d102      	bne.n	8000eca <HAL_ADC_ConfigChannel+0x12a>
 8000ec4:	2380      	movs	r3, #128	; 0x80
 8000ec6:	041b      	lsls	r3, r3, #16
 8000ec8:	e001      	b.n	8000ece <HAL_ADC_ConfigChannel+0x12e>
 8000eca:	2380      	movs	r3, #128	; 0x80
 8000ecc:	03db      	lsls	r3, r3, #15
 8000ece:	4a2a      	ldr	r2, [pc, #168]	; (8000f78 <HAL_ADC_ConfigChannel+0x1d8>)
 8000ed0:	430b      	orrs	r3, r1
 8000ed2:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	2b10      	cmp	r3, #16
 8000eda:	d140      	bne.n	8000f5e <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000edc:	4b27      	ldr	r3, [pc, #156]	; (8000f7c <HAL_ADC_ConfigChannel+0x1dc>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4927      	ldr	r1, [pc, #156]	; (8000f80 <HAL_ADC_ConfigChannel+0x1e0>)
 8000ee2:	0018      	movs	r0, r3
 8000ee4:	f7ff f910 	bl	8000108 <__udivsi3>
 8000ee8:	0003      	movs	r3, r0
 8000eea:	001a      	movs	r2, r3
 8000eec:	0013      	movs	r3, r2
 8000eee:	009b      	lsls	r3, r3, #2
 8000ef0:	189b      	adds	r3, r3, r2
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000ef6:	e002      	b.n	8000efe <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	3b01      	subs	r3, #1
 8000efc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000efe:	68bb      	ldr	r3, [r7, #8]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d1f9      	bne.n	8000ef8 <HAL_ADC_ConfigChannel+0x158>
 8000f04:	e02b      	b.n	8000f5e <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	2101      	movs	r1, #1
 8000f12:	4099      	lsls	r1, r3
 8000f14:	000b      	movs	r3, r1
 8000f16:	43d9      	mvns	r1, r3
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	400a      	ands	r2, r1
 8000f1e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	2b10      	cmp	r3, #16
 8000f26:	d003      	beq.n	8000f30 <HAL_ADC_ConfigChannel+0x190>
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	2b11      	cmp	r3, #17
 8000f2e:	d116      	bne.n	8000f5e <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000f30:	4b11      	ldr	r3, [pc, #68]	; (8000f78 <HAL_ADC_ConfigChannel+0x1d8>)
 8000f32:	6819      	ldr	r1, [r3, #0]
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	2b10      	cmp	r3, #16
 8000f3a:	d101      	bne.n	8000f40 <HAL_ADC_ConfigChannel+0x1a0>
 8000f3c:	4a11      	ldr	r2, [pc, #68]	; (8000f84 <HAL_ADC_ConfigChannel+0x1e4>)
 8000f3e:	e000      	b.n	8000f42 <HAL_ADC_ConfigChannel+0x1a2>
 8000f40:	4a11      	ldr	r2, [pc, #68]	; (8000f88 <HAL_ADC_ConfigChannel+0x1e8>)
 8000f42:	4b0d      	ldr	r3, [pc, #52]	; (8000f78 <HAL_ADC_ConfigChannel+0x1d8>)
 8000f44:	400a      	ands	r2, r1
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	e009      	b.n	8000f5e <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f4e:	2220      	movs	r2, #32
 8000f50:	431a      	orrs	r2, r3
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8000f56:	230f      	movs	r3, #15
 8000f58:	18fb      	adds	r3, r7, r3
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2234      	movs	r2, #52	; 0x34
 8000f62:	2100      	movs	r1, #0
 8000f64:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8000f66:	230f      	movs	r3, #15
 8000f68:	18fb      	adds	r3, r7, r3
 8000f6a:	781b      	ldrb	r3, [r3, #0]
}
 8000f6c:	0018      	movs	r0, r3
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	b004      	add	sp, #16
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	00001001 	.word	0x00001001
 8000f78:	40012708 	.word	0x40012708
 8000f7c:	20000000 	.word	0x20000000
 8000f80:	000f4240 	.word	0x000f4240
 8000f84:	ff7fffff 	.word	0xff7fffff
 8000f88:	ffbfffff 	.word	0xffbfffff

08000f8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f8c:	b590      	push	{r4, r7, lr}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	0002      	movs	r2, r0
 8000f94:	6039      	str	r1, [r7, #0]
 8000f96:	1dfb      	adds	r3, r7, #7
 8000f98:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f9a:	1dfb      	adds	r3, r7, #7
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	2b7f      	cmp	r3, #127	; 0x7f
 8000fa0:	d828      	bhi.n	8000ff4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fa2:	4a2f      	ldr	r2, [pc, #188]	; (8001060 <__NVIC_SetPriority+0xd4>)
 8000fa4:	1dfb      	adds	r3, r7, #7
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	b25b      	sxtb	r3, r3
 8000faa:	089b      	lsrs	r3, r3, #2
 8000fac:	33c0      	adds	r3, #192	; 0xc0
 8000fae:	009b      	lsls	r3, r3, #2
 8000fb0:	589b      	ldr	r3, [r3, r2]
 8000fb2:	1dfa      	adds	r2, r7, #7
 8000fb4:	7812      	ldrb	r2, [r2, #0]
 8000fb6:	0011      	movs	r1, r2
 8000fb8:	2203      	movs	r2, #3
 8000fba:	400a      	ands	r2, r1
 8000fbc:	00d2      	lsls	r2, r2, #3
 8000fbe:	21ff      	movs	r1, #255	; 0xff
 8000fc0:	4091      	lsls	r1, r2
 8000fc2:	000a      	movs	r2, r1
 8000fc4:	43d2      	mvns	r2, r2
 8000fc6:	401a      	ands	r2, r3
 8000fc8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	019b      	lsls	r3, r3, #6
 8000fce:	22ff      	movs	r2, #255	; 0xff
 8000fd0:	401a      	ands	r2, r3
 8000fd2:	1dfb      	adds	r3, r7, #7
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	0018      	movs	r0, r3
 8000fd8:	2303      	movs	r3, #3
 8000fda:	4003      	ands	r3, r0
 8000fdc:	00db      	lsls	r3, r3, #3
 8000fde:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fe0:	481f      	ldr	r0, [pc, #124]	; (8001060 <__NVIC_SetPriority+0xd4>)
 8000fe2:	1dfb      	adds	r3, r7, #7
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	b25b      	sxtb	r3, r3
 8000fe8:	089b      	lsrs	r3, r3, #2
 8000fea:	430a      	orrs	r2, r1
 8000fec:	33c0      	adds	r3, #192	; 0xc0
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000ff2:	e031      	b.n	8001058 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ff4:	4a1b      	ldr	r2, [pc, #108]	; (8001064 <__NVIC_SetPriority+0xd8>)
 8000ff6:	1dfb      	adds	r3, r7, #7
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	0019      	movs	r1, r3
 8000ffc:	230f      	movs	r3, #15
 8000ffe:	400b      	ands	r3, r1
 8001000:	3b08      	subs	r3, #8
 8001002:	089b      	lsrs	r3, r3, #2
 8001004:	3306      	adds	r3, #6
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	18d3      	adds	r3, r2, r3
 800100a:	3304      	adds	r3, #4
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	1dfa      	adds	r2, r7, #7
 8001010:	7812      	ldrb	r2, [r2, #0]
 8001012:	0011      	movs	r1, r2
 8001014:	2203      	movs	r2, #3
 8001016:	400a      	ands	r2, r1
 8001018:	00d2      	lsls	r2, r2, #3
 800101a:	21ff      	movs	r1, #255	; 0xff
 800101c:	4091      	lsls	r1, r2
 800101e:	000a      	movs	r2, r1
 8001020:	43d2      	mvns	r2, r2
 8001022:	401a      	ands	r2, r3
 8001024:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	019b      	lsls	r3, r3, #6
 800102a:	22ff      	movs	r2, #255	; 0xff
 800102c:	401a      	ands	r2, r3
 800102e:	1dfb      	adds	r3, r7, #7
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	0018      	movs	r0, r3
 8001034:	2303      	movs	r3, #3
 8001036:	4003      	ands	r3, r0
 8001038:	00db      	lsls	r3, r3, #3
 800103a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800103c:	4809      	ldr	r0, [pc, #36]	; (8001064 <__NVIC_SetPriority+0xd8>)
 800103e:	1dfb      	adds	r3, r7, #7
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	001c      	movs	r4, r3
 8001044:	230f      	movs	r3, #15
 8001046:	4023      	ands	r3, r4
 8001048:	3b08      	subs	r3, #8
 800104a:	089b      	lsrs	r3, r3, #2
 800104c:	430a      	orrs	r2, r1
 800104e:	3306      	adds	r3, #6
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	18c3      	adds	r3, r0, r3
 8001054:	3304      	adds	r3, #4
 8001056:	601a      	str	r2, [r3, #0]
}
 8001058:	46c0      	nop			; (mov r8, r8)
 800105a:	46bd      	mov	sp, r7
 800105c:	b003      	add	sp, #12
 800105e:	bd90      	pop	{r4, r7, pc}
 8001060:	e000e100 	.word	0xe000e100
 8001064:	e000ed00 	.word	0xe000ed00

08001068 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	1e5a      	subs	r2, r3, #1
 8001074:	2380      	movs	r3, #128	; 0x80
 8001076:	045b      	lsls	r3, r3, #17
 8001078:	429a      	cmp	r2, r3
 800107a:	d301      	bcc.n	8001080 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800107c:	2301      	movs	r3, #1
 800107e:	e010      	b.n	80010a2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001080:	4b0a      	ldr	r3, [pc, #40]	; (80010ac <SysTick_Config+0x44>)
 8001082:	687a      	ldr	r2, [r7, #4]
 8001084:	3a01      	subs	r2, #1
 8001086:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001088:	2301      	movs	r3, #1
 800108a:	425b      	negs	r3, r3
 800108c:	2103      	movs	r1, #3
 800108e:	0018      	movs	r0, r3
 8001090:	f7ff ff7c 	bl	8000f8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001094:	4b05      	ldr	r3, [pc, #20]	; (80010ac <SysTick_Config+0x44>)
 8001096:	2200      	movs	r2, #0
 8001098:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800109a:	4b04      	ldr	r3, [pc, #16]	; (80010ac <SysTick_Config+0x44>)
 800109c:	2207      	movs	r2, #7
 800109e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010a0:	2300      	movs	r3, #0
}
 80010a2:	0018      	movs	r0, r3
 80010a4:	46bd      	mov	sp, r7
 80010a6:	b002      	add	sp, #8
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	46c0      	nop			; (mov r8, r8)
 80010ac:	e000e010 	.word	0xe000e010

080010b0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	60b9      	str	r1, [r7, #8]
 80010b8:	607a      	str	r2, [r7, #4]
 80010ba:	210f      	movs	r1, #15
 80010bc:	187b      	adds	r3, r7, r1
 80010be:	1c02      	adds	r2, r0, #0
 80010c0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80010c2:	68ba      	ldr	r2, [r7, #8]
 80010c4:	187b      	adds	r3, r7, r1
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	b25b      	sxtb	r3, r3
 80010ca:	0011      	movs	r1, r2
 80010cc:	0018      	movs	r0, r3
 80010ce:	f7ff ff5d 	bl	8000f8c <__NVIC_SetPriority>
}
 80010d2:	46c0      	nop			; (mov r8, r8)
 80010d4:	46bd      	mov	sp, r7
 80010d6:	b004      	add	sp, #16
 80010d8:	bd80      	pop	{r7, pc}

080010da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	b082      	sub	sp, #8
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	0018      	movs	r0, r3
 80010e6:	f7ff ffbf 	bl	8001068 <SysTick_Config>
 80010ea:	0003      	movs	r3, r0
}
 80010ec:	0018      	movs	r0, r3
 80010ee:	46bd      	mov	sp, r7
 80010f0:	b002      	add	sp, #8
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b086      	sub	sp, #24
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010fe:	2300      	movs	r3, #0
 8001100:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001102:	e14f      	b.n	80013a4 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2101      	movs	r1, #1
 800110a:	697a      	ldr	r2, [r7, #20]
 800110c:	4091      	lsls	r1, r2
 800110e:	000a      	movs	r2, r1
 8001110:	4013      	ands	r3, r2
 8001112:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d100      	bne.n	800111c <HAL_GPIO_Init+0x28>
 800111a:	e140      	b.n	800139e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	2203      	movs	r2, #3
 8001122:	4013      	ands	r3, r2
 8001124:	2b01      	cmp	r3, #1
 8001126:	d005      	beq.n	8001134 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	2203      	movs	r2, #3
 800112e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001130:	2b02      	cmp	r3, #2
 8001132:	d130      	bne.n	8001196 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	689b      	ldr	r3, [r3, #8]
 8001138:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	005b      	lsls	r3, r3, #1
 800113e:	2203      	movs	r2, #3
 8001140:	409a      	lsls	r2, r3
 8001142:	0013      	movs	r3, r2
 8001144:	43da      	mvns	r2, r3
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	4013      	ands	r3, r2
 800114a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	68da      	ldr	r2, [r3, #12]
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	409a      	lsls	r2, r3
 8001156:	0013      	movs	r3, r2
 8001158:	693a      	ldr	r2, [r7, #16]
 800115a:	4313      	orrs	r3, r2
 800115c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	693a      	ldr	r2, [r7, #16]
 8001162:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800116a:	2201      	movs	r2, #1
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	409a      	lsls	r2, r3
 8001170:	0013      	movs	r3, r2
 8001172:	43da      	mvns	r2, r3
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	4013      	ands	r3, r2
 8001178:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	091b      	lsrs	r3, r3, #4
 8001180:	2201      	movs	r2, #1
 8001182:	401a      	ands	r2, r3
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	409a      	lsls	r2, r3
 8001188:	0013      	movs	r3, r2
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	4313      	orrs	r3, r2
 800118e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	2203      	movs	r2, #3
 800119c:	4013      	ands	r3, r2
 800119e:	2b03      	cmp	r3, #3
 80011a0:	d017      	beq.n	80011d2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	68db      	ldr	r3, [r3, #12]
 80011a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	2203      	movs	r2, #3
 80011ae:	409a      	lsls	r2, r3
 80011b0:	0013      	movs	r3, r2
 80011b2:	43da      	mvns	r2, r3
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	4013      	ands	r3, r2
 80011b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	689a      	ldr	r2, [r3, #8]
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	409a      	lsls	r2, r3
 80011c4:	0013      	movs	r3, r2
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	2203      	movs	r2, #3
 80011d8:	4013      	ands	r3, r2
 80011da:	2b02      	cmp	r3, #2
 80011dc:	d123      	bne.n	8001226 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	08da      	lsrs	r2, r3, #3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	3208      	adds	r2, #8
 80011e6:	0092      	lsls	r2, r2, #2
 80011e8:	58d3      	ldr	r3, [r2, r3]
 80011ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	2207      	movs	r2, #7
 80011f0:	4013      	ands	r3, r2
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	220f      	movs	r2, #15
 80011f6:	409a      	lsls	r2, r3
 80011f8:	0013      	movs	r3, r2
 80011fa:	43da      	mvns	r2, r3
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	4013      	ands	r3, r2
 8001200:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	691a      	ldr	r2, [r3, #16]
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	2107      	movs	r1, #7
 800120a:	400b      	ands	r3, r1
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	409a      	lsls	r2, r3
 8001210:	0013      	movs	r3, r2
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	4313      	orrs	r3, r2
 8001216:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	08da      	lsrs	r2, r3, #3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	3208      	adds	r2, #8
 8001220:	0092      	lsls	r2, r2, #2
 8001222:	6939      	ldr	r1, [r7, #16]
 8001224:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	2203      	movs	r2, #3
 8001232:	409a      	lsls	r2, r3
 8001234:	0013      	movs	r3, r2
 8001236:	43da      	mvns	r2, r3
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	4013      	ands	r3, r2
 800123c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	2203      	movs	r2, #3
 8001244:	401a      	ands	r2, r3
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	409a      	lsls	r2, r3
 800124c:	0013      	movs	r3, r2
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	4313      	orrs	r3, r2
 8001252:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685a      	ldr	r2, [r3, #4]
 800125e:	23c0      	movs	r3, #192	; 0xc0
 8001260:	029b      	lsls	r3, r3, #10
 8001262:	4013      	ands	r3, r2
 8001264:	d100      	bne.n	8001268 <HAL_GPIO_Init+0x174>
 8001266:	e09a      	b.n	800139e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001268:	4b54      	ldr	r3, [pc, #336]	; (80013bc <HAL_GPIO_Init+0x2c8>)
 800126a:	699a      	ldr	r2, [r3, #24]
 800126c:	4b53      	ldr	r3, [pc, #332]	; (80013bc <HAL_GPIO_Init+0x2c8>)
 800126e:	2101      	movs	r1, #1
 8001270:	430a      	orrs	r2, r1
 8001272:	619a      	str	r2, [r3, #24]
 8001274:	4b51      	ldr	r3, [pc, #324]	; (80013bc <HAL_GPIO_Init+0x2c8>)
 8001276:	699b      	ldr	r3, [r3, #24]
 8001278:	2201      	movs	r2, #1
 800127a:	4013      	ands	r3, r2
 800127c:	60bb      	str	r3, [r7, #8]
 800127e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001280:	4a4f      	ldr	r2, [pc, #316]	; (80013c0 <HAL_GPIO_Init+0x2cc>)
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	089b      	lsrs	r3, r3, #2
 8001286:	3302      	adds	r3, #2
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	589b      	ldr	r3, [r3, r2]
 800128c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	2203      	movs	r2, #3
 8001292:	4013      	ands	r3, r2
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	220f      	movs	r2, #15
 8001298:	409a      	lsls	r2, r3
 800129a:	0013      	movs	r3, r2
 800129c:	43da      	mvns	r2, r3
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	4013      	ands	r3, r2
 80012a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012a4:	687a      	ldr	r2, [r7, #4]
 80012a6:	2390      	movs	r3, #144	; 0x90
 80012a8:	05db      	lsls	r3, r3, #23
 80012aa:	429a      	cmp	r2, r3
 80012ac:	d013      	beq.n	80012d6 <HAL_GPIO_Init+0x1e2>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4a44      	ldr	r2, [pc, #272]	; (80013c4 <HAL_GPIO_Init+0x2d0>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d00d      	beq.n	80012d2 <HAL_GPIO_Init+0x1de>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4a43      	ldr	r2, [pc, #268]	; (80013c8 <HAL_GPIO_Init+0x2d4>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d007      	beq.n	80012ce <HAL_GPIO_Init+0x1da>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a42      	ldr	r2, [pc, #264]	; (80013cc <HAL_GPIO_Init+0x2d8>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d101      	bne.n	80012ca <HAL_GPIO_Init+0x1d6>
 80012c6:	2303      	movs	r3, #3
 80012c8:	e006      	b.n	80012d8 <HAL_GPIO_Init+0x1e4>
 80012ca:	2305      	movs	r3, #5
 80012cc:	e004      	b.n	80012d8 <HAL_GPIO_Init+0x1e4>
 80012ce:	2302      	movs	r3, #2
 80012d0:	e002      	b.n	80012d8 <HAL_GPIO_Init+0x1e4>
 80012d2:	2301      	movs	r3, #1
 80012d4:	e000      	b.n	80012d8 <HAL_GPIO_Init+0x1e4>
 80012d6:	2300      	movs	r3, #0
 80012d8:	697a      	ldr	r2, [r7, #20]
 80012da:	2103      	movs	r1, #3
 80012dc:	400a      	ands	r2, r1
 80012de:	0092      	lsls	r2, r2, #2
 80012e0:	4093      	lsls	r3, r2
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80012e8:	4935      	ldr	r1, [pc, #212]	; (80013c0 <HAL_GPIO_Init+0x2cc>)
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	089b      	lsrs	r3, r3, #2
 80012ee:	3302      	adds	r3, #2
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012f6:	4b36      	ldr	r3, [pc, #216]	; (80013d0 <HAL_GPIO_Init+0x2dc>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	43da      	mvns	r2, r3
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	4013      	ands	r3, r2
 8001304:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685a      	ldr	r2, [r3, #4]
 800130a:	2380      	movs	r3, #128	; 0x80
 800130c:	025b      	lsls	r3, r3, #9
 800130e:	4013      	ands	r3, r2
 8001310:	d003      	beq.n	800131a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	4313      	orrs	r3, r2
 8001318:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800131a:	4b2d      	ldr	r3, [pc, #180]	; (80013d0 <HAL_GPIO_Init+0x2dc>)
 800131c:	693a      	ldr	r2, [r7, #16]
 800131e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001320:	4b2b      	ldr	r3, [pc, #172]	; (80013d0 <HAL_GPIO_Init+0x2dc>)
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	43da      	mvns	r2, r3
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	4013      	ands	r3, r2
 800132e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685a      	ldr	r2, [r3, #4]
 8001334:	2380      	movs	r3, #128	; 0x80
 8001336:	029b      	lsls	r3, r3, #10
 8001338:	4013      	ands	r3, r2
 800133a:	d003      	beq.n	8001344 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 800133c:	693a      	ldr	r2, [r7, #16]
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	4313      	orrs	r3, r2
 8001342:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001344:	4b22      	ldr	r3, [pc, #136]	; (80013d0 <HAL_GPIO_Init+0x2dc>)
 8001346:	693a      	ldr	r2, [r7, #16]
 8001348:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800134a:	4b21      	ldr	r3, [pc, #132]	; (80013d0 <HAL_GPIO_Init+0x2dc>)
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	43da      	mvns	r2, r3
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	4013      	ands	r3, r2
 8001358:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685a      	ldr	r2, [r3, #4]
 800135e:	2380      	movs	r3, #128	; 0x80
 8001360:	035b      	lsls	r3, r3, #13
 8001362:	4013      	ands	r3, r2
 8001364:	d003      	beq.n	800136e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	4313      	orrs	r3, r2
 800136c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800136e:	4b18      	ldr	r3, [pc, #96]	; (80013d0 <HAL_GPIO_Init+0x2dc>)
 8001370:	693a      	ldr	r2, [r7, #16]
 8001372:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001374:	4b16      	ldr	r3, [pc, #88]	; (80013d0 <HAL_GPIO_Init+0x2dc>)
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	43da      	mvns	r2, r3
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	4013      	ands	r3, r2
 8001382:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685a      	ldr	r2, [r3, #4]
 8001388:	2380      	movs	r3, #128	; 0x80
 800138a:	039b      	lsls	r3, r3, #14
 800138c:	4013      	ands	r3, r2
 800138e:	d003      	beq.n	8001398 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001390:	693a      	ldr	r2, [r7, #16]
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	4313      	orrs	r3, r2
 8001396:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001398:	4b0d      	ldr	r3, [pc, #52]	; (80013d0 <HAL_GPIO_Init+0x2dc>)
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	3301      	adds	r3, #1
 80013a2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	40da      	lsrs	r2, r3
 80013ac:	1e13      	subs	r3, r2, #0
 80013ae:	d000      	beq.n	80013b2 <HAL_GPIO_Init+0x2be>
 80013b0:	e6a8      	b.n	8001104 <HAL_GPIO_Init+0x10>
  } 
}
 80013b2:	46c0      	nop			; (mov r8, r8)
 80013b4:	46c0      	nop			; (mov r8, r8)
 80013b6:	46bd      	mov	sp, r7
 80013b8:	b006      	add	sp, #24
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	40021000 	.word	0x40021000
 80013c0:	40010000 	.word	0x40010000
 80013c4:	48000400 	.word	0x48000400
 80013c8:	48000800 	.word	0x48000800
 80013cc:	48000c00 	.word	0x48000c00
 80013d0:	40010400 	.word	0x40010400

080013d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	0008      	movs	r0, r1
 80013de:	0011      	movs	r1, r2
 80013e0:	1cbb      	adds	r3, r7, #2
 80013e2:	1c02      	adds	r2, r0, #0
 80013e4:	801a      	strh	r2, [r3, #0]
 80013e6:	1c7b      	adds	r3, r7, #1
 80013e8:	1c0a      	adds	r2, r1, #0
 80013ea:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013ec:	1c7b      	adds	r3, r7, #1
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d004      	beq.n	80013fe <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013f4:	1cbb      	adds	r3, r7, #2
 80013f6:	881a      	ldrh	r2, [r3, #0]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013fc:	e003      	b.n	8001406 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013fe:	1cbb      	adds	r3, r7, #2
 8001400:	881a      	ldrh	r2, [r3, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001406:	46c0      	nop			; (mov r8, r8)
 8001408:	46bd      	mov	sp, r7
 800140a:	b002      	add	sp, #8
 800140c:	bd80      	pop	{r7, pc}
	...

08001410 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d101      	bne.n	8001422 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e082      	b.n	8001528 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2241      	movs	r2, #65	; 0x41
 8001426:	5c9b      	ldrb	r3, [r3, r2]
 8001428:	b2db      	uxtb	r3, r3
 800142a:	2b00      	cmp	r3, #0
 800142c:	d107      	bne.n	800143e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2240      	movs	r2, #64	; 0x40
 8001432:	2100      	movs	r1, #0
 8001434:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	0018      	movs	r0, r3
 800143a:	f7ff f9f5 	bl	8000828 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2241      	movs	r2, #65	; 0x41
 8001442:	2124      	movs	r1, #36	; 0x24
 8001444:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2101      	movs	r1, #1
 8001452:	438a      	bics	r2, r1
 8001454:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	685a      	ldr	r2, [r3, #4]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4934      	ldr	r1, [pc, #208]	; (8001530 <HAL_I2C_Init+0x120>)
 8001460:	400a      	ands	r2, r1
 8001462:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	689a      	ldr	r2, [r3, #8]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4931      	ldr	r1, [pc, #196]	; (8001534 <HAL_I2C_Init+0x124>)
 8001470:	400a      	ands	r2, r1
 8001472:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	2b01      	cmp	r3, #1
 800147a:	d108      	bne.n	800148e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	689a      	ldr	r2, [r3, #8]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2180      	movs	r1, #128	; 0x80
 8001486:	0209      	lsls	r1, r1, #8
 8001488:	430a      	orrs	r2, r1
 800148a:	609a      	str	r2, [r3, #8]
 800148c:	e007      	b.n	800149e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	689a      	ldr	r2, [r3, #8]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	2184      	movs	r1, #132	; 0x84
 8001498:	0209      	lsls	r1, r1, #8
 800149a:	430a      	orrs	r2, r1
 800149c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	68db      	ldr	r3, [r3, #12]
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d104      	bne.n	80014b0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	2280      	movs	r2, #128	; 0x80
 80014ac:	0112      	lsls	r2, r2, #4
 80014ae:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	685a      	ldr	r2, [r3, #4]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	491f      	ldr	r1, [pc, #124]	; (8001538 <HAL_I2C_Init+0x128>)
 80014bc:	430a      	orrs	r2, r1
 80014be:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	68da      	ldr	r2, [r3, #12]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	491a      	ldr	r1, [pc, #104]	; (8001534 <HAL_I2C_Init+0x124>)
 80014cc:	400a      	ands	r2, r1
 80014ce:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	691a      	ldr	r2, [r3, #16]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	695b      	ldr	r3, [r3, #20]
 80014d8:	431a      	orrs	r2, r3
 80014da:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	699b      	ldr	r3, [r3, #24]
 80014e0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	430a      	orrs	r2, r1
 80014e8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	69d9      	ldr	r1, [r3, #28]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6a1a      	ldr	r2, [r3, #32]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	430a      	orrs	r2, r1
 80014f8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2101      	movs	r1, #1
 8001506:	430a      	orrs	r2, r1
 8001508:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2200      	movs	r2, #0
 800150e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2241      	movs	r2, #65	; 0x41
 8001514:	2120      	movs	r1, #32
 8001516:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2200      	movs	r2, #0
 800151c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2242      	movs	r2, #66	; 0x42
 8001522:	2100      	movs	r1, #0
 8001524:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001526:	2300      	movs	r3, #0
}
 8001528:	0018      	movs	r0, r3
 800152a:	46bd      	mov	sp, r7
 800152c:	b002      	add	sp, #8
 800152e:	bd80      	pop	{r7, pc}
 8001530:	f0ffffff 	.word	0xf0ffffff
 8001534:	ffff7fff 	.word	0xffff7fff
 8001538:	02008000 	.word	0x02008000

0800153c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800153c:	b590      	push	{r4, r7, lr}
 800153e:	b089      	sub	sp, #36	; 0x24
 8001540:	af02      	add	r7, sp, #8
 8001542:	60f8      	str	r0, [r7, #12]
 8001544:	000c      	movs	r4, r1
 8001546:	0010      	movs	r0, r2
 8001548:	0019      	movs	r1, r3
 800154a:	230a      	movs	r3, #10
 800154c:	18fb      	adds	r3, r7, r3
 800154e:	1c22      	adds	r2, r4, #0
 8001550:	801a      	strh	r2, [r3, #0]
 8001552:	2308      	movs	r3, #8
 8001554:	18fb      	adds	r3, r7, r3
 8001556:	1c02      	adds	r2, r0, #0
 8001558:	801a      	strh	r2, [r3, #0]
 800155a:	1dbb      	adds	r3, r7, #6
 800155c:	1c0a      	adds	r2, r1, #0
 800155e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	2241      	movs	r2, #65	; 0x41
 8001564:	5c9b      	ldrb	r3, [r3, r2]
 8001566:	b2db      	uxtb	r3, r3
 8001568:	2b20      	cmp	r3, #32
 800156a:	d000      	beq.n	800156e <HAL_I2C_Mem_Write+0x32>
 800156c:	e10c      	b.n	8001788 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 800156e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001570:	2b00      	cmp	r3, #0
 8001572:	d004      	beq.n	800157e <HAL_I2C_Mem_Write+0x42>
 8001574:	232c      	movs	r3, #44	; 0x2c
 8001576:	18fb      	adds	r3, r7, r3
 8001578:	881b      	ldrh	r3, [r3, #0]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d105      	bne.n	800158a <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	2280      	movs	r2, #128	; 0x80
 8001582:	0092      	lsls	r2, r2, #2
 8001584:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e0ff      	b.n	800178a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	2240      	movs	r2, #64	; 0x40
 800158e:	5c9b      	ldrb	r3, [r3, r2]
 8001590:	2b01      	cmp	r3, #1
 8001592:	d101      	bne.n	8001598 <HAL_I2C_Mem_Write+0x5c>
 8001594:	2302      	movs	r3, #2
 8001596:	e0f8      	b.n	800178a <HAL_I2C_Mem_Write+0x24e>
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	2240      	movs	r2, #64	; 0x40
 800159c:	2101      	movs	r1, #1
 800159e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80015a0:	f7ff fa90 	bl	8000ac4 <HAL_GetTick>
 80015a4:	0003      	movs	r3, r0
 80015a6:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80015a8:	2380      	movs	r3, #128	; 0x80
 80015aa:	0219      	lsls	r1, r3, #8
 80015ac:	68f8      	ldr	r0, [r7, #12]
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	9300      	str	r3, [sp, #0]
 80015b2:	2319      	movs	r3, #25
 80015b4:	2201      	movs	r2, #1
 80015b6:	f000 f975 	bl	80018a4 <I2C_WaitOnFlagUntilTimeout>
 80015ba:	1e03      	subs	r3, r0, #0
 80015bc:	d001      	beq.n	80015c2 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e0e3      	b.n	800178a <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	2241      	movs	r2, #65	; 0x41
 80015c6:	2121      	movs	r1, #33	; 0x21
 80015c8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	2242      	movs	r2, #66	; 0x42
 80015ce:	2140      	movs	r1, #64	; 0x40
 80015d0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	2200      	movs	r2, #0
 80015d6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015dc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	222c      	movs	r2, #44	; 0x2c
 80015e2:	18ba      	adds	r2, r7, r2
 80015e4:	8812      	ldrh	r2, [r2, #0]
 80015e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	2200      	movs	r2, #0
 80015ec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80015ee:	1dbb      	adds	r3, r7, #6
 80015f0:	881c      	ldrh	r4, [r3, #0]
 80015f2:	2308      	movs	r3, #8
 80015f4:	18fb      	adds	r3, r7, r3
 80015f6:	881a      	ldrh	r2, [r3, #0]
 80015f8:	230a      	movs	r3, #10
 80015fa:	18fb      	adds	r3, r7, r3
 80015fc:	8819      	ldrh	r1, [r3, #0]
 80015fe:	68f8      	ldr	r0, [r7, #12]
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	9301      	str	r3, [sp, #4]
 8001604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001606:	9300      	str	r3, [sp, #0]
 8001608:	0023      	movs	r3, r4
 800160a:	f000 f8c5 	bl	8001798 <I2C_RequestMemoryWrite>
 800160e:	1e03      	subs	r3, r0, #0
 8001610:	d005      	beq.n	800161e <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	2240      	movs	r2, #64	; 0x40
 8001616:	2100      	movs	r1, #0
 8001618:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e0b5      	b.n	800178a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001622:	b29b      	uxth	r3, r3
 8001624:	2bff      	cmp	r3, #255	; 0xff
 8001626:	d911      	bls.n	800164c <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	22ff      	movs	r2, #255	; 0xff
 800162c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001632:	b2da      	uxtb	r2, r3
 8001634:	2380      	movs	r3, #128	; 0x80
 8001636:	045c      	lsls	r4, r3, #17
 8001638:	230a      	movs	r3, #10
 800163a:	18fb      	adds	r3, r7, r3
 800163c:	8819      	ldrh	r1, [r3, #0]
 800163e:	68f8      	ldr	r0, [r7, #12]
 8001640:	2300      	movs	r3, #0
 8001642:	9300      	str	r3, [sp, #0]
 8001644:	0023      	movs	r3, r4
 8001646:	f000 fa61 	bl	8001b0c <I2C_TransferConfig>
 800164a:	e012      	b.n	8001672 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001650:	b29a      	uxth	r2, r3
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800165a:	b2da      	uxtb	r2, r3
 800165c:	2380      	movs	r3, #128	; 0x80
 800165e:	049c      	lsls	r4, r3, #18
 8001660:	230a      	movs	r3, #10
 8001662:	18fb      	adds	r3, r7, r3
 8001664:	8819      	ldrh	r1, [r3, #0]
 8001666:	68f8      	ldr	r0, [r7, #12]
 8001668:	2300      	movs	r3, #0
 800166a:	9300      	str	r3, [sp, #0]
 800166c:	0023      	movs	r3, r4
 800166e:	f000 fa4d 	bl	8001b0c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001672:	697a      	ldr	r2, [r7, #20]
 8001674:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	0018      	movs	r0, r3
 800167a:	f000 f952 	bl	8001922 <I2C_WaitOnTXISFlagUntilTimeout>
 800167e:	1e03      	subs	r3, r0, #0
 8001680:	d001      	beq.n	8001686 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e081      	b.n	800178a <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800168a:	781a      	ldrb	r2, [r3, #0]
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001696:	1c5a      	adds	r2, r3, #1
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016a0:	b29b      	uxth	r3, r3
 80016a2:	3b01      	subs	r3, #1
 80016a4:	b29a      	uxth	r2, r3
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016ae:	3b01      	subs	r3, #1
 80016b0:	b29a      	uxth	r2, r3
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016ba:	b29b      	uxth	r3, r3
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d03a      	beq.n	8001736 <HAL_I2C_Mem_Write+0x1fa>
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d136      	bne.n	8001736 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80016c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80016ca:	68f8      	ldr	r0, [r7, #12]
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	9300      	str	r3, [sp, #0]
 80016d0:	0013      	movs	r3, r2
 80016d2:	2200      	movs	r2, #0
 80016d4:	2180      	movs	r1, #128	; 0x80
 80016d6:	f000 f8e5 	bl	80018a4 <I2C_WaitOnFlagUntilTimeout>
 80016da:	1e03      	subs	r3, r0, #0
 80016dc:	d001      	beq.n	80016e2 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e053      	b.n	800178a <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	2bff      	cmp	r3, #255	; 0xff
 80016ea:	d911      	bls.n	8001710 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	22ff      	movs	r2, #255	; 0xff
 80016f0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016f6:	b2da      	uxtb	r2, r3
 80016f8:	2380      	movs	r3, #128	; 0x80
 80016fa:	045c      	lsls	r4, r3, #17
 80016fc:	230a      	movs	r3, #10
 80016fe:	18fb      	adds	r3, r7, r3
 8001700:	8819      	ldrh	r1, [r3, #0]
 8001702:	68f8      	ldr	r0, [r7, #12]
 8001704:	2300      	movs	r3, #0
 8001706:	9300      	str	r3, [sp, #0]
 8001708:	0023      	movs	r3, r4
 800170a:	f000 f9ff 	bl	8001b0c <I2C_TransferConfig>
 800170e:	e012      	b.n	8001736 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001714:	b29a      	uxth	r2, r3
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800171e:	b2da      	uxtb	r2, r3
 8001720:	2380      	movs	r3, #128	; 0x80
 8001722:	049c      	lsls	r4, r3, #18
 8001724:	230a      	movs	r3, #10
 8001726:	18fb      	adds	r3, r7, r3
 8001728:	8819      	ldrh	r1, [r3, #0]
 800172a:	68f8      	ldr	r0, [r7, #12]
 800172c:	2300      	movs	r3, #0
 800172e:	9300      	str	r3, [sp, #0]
 8001730:	0023      	movs	r3, r4
 8001732:	f000 f9eb 	bl	8001b0c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800173a:	b29b      	uxth	r3, r3
 800173c:	2b00      	cmp	r3, #0
 800173e:	d198      	bne.n	8001672 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001740:	697a      	ldr	r2, [r7, #20]
 8001742:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	0018      	movs	r0, r3
 8001748:	f000 f92a 	bl	80019a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800174c:	1e03      	subs	r3, r0, #0
 800174e:	d001      	beq.n	8001754 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	e01a      	b.n	800178a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2220      	movs	r2, #32
 800175a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	685a      	ldr	r2, [r3, #4]
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	490b      	ldr	r1, [pc, #44]	; (8001794 <HAL_I2C_Mem_Write+0x258>)
 8001768:	400a      	ands	r2, r1
 800176a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	2241      	movs	r2, #65	; 0x41
 8001770:	2120      	movs	r1, #32
 8001772:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	2242      	movs	r2, #66	; 0x42
 8001778:	2100      	movs	r1, #0
 800177a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	2240      	movs	r2, #64	; 0x40
 8001780:	2100      	movs	r1, #0
 8001782:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001784:	2300      	movs	r3, #0
 8001786:	e000      	b.n	800178a <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8001788:	2302      	movs	r3, #2
  }
}
 800178a:	0018      	movs	r0, r3
 800178c:	46bd      	mov	sp, r7
 800178e:	b007      	add	sp, #28
 8001790:	bd90      	pop	{r4, r7, pc}
 8001792:	46c0      	nop			; (mov r8, r8)
 8001794:	fe00e800 	.word	0xfe00e800

08001798 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001798:	b5b0      	push	{r4, r5, r7, lr}
 800179a:	b086      	sub	sp, #24
 800179c:	af02      	add	r7, sp, #8
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	000c      	movs	r4, r1
 80017a2:	0010      	movs	r0, r2
 80017a4:	0019      	movs	r1, r3
 80017a6:	250a      	movs	r5, #10
 80017a8:	197b      	adds	r3, r7, r5
 80017aa:	1c22      	adds	r2, r4, #0
 80017ac:	801a      	strh	r2, [r3, #0]
 80017ae:	2308      	movs	r3, #8
 80017b0:	18fb      	adds	r3, r7, r3
 80017b2:	1c02      	adds	r2, r0, #0
 80017b4:	801a      	strh	r2, [r3, #0]
 80017b6:	1dbb      	adds	r3, r7, #6
 80017b8:	1c0a      	adds	r2, r1, #0
 80017ba:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80017bc:	1dbb      	adds	r3, r7, #6
 80017be:	881b      	ldrh	r3, [r3, #0]
 80017c0:	b2da      	uxtb	r2, r3
 80017c2:	2380      	movs	r3, #128	; 0x80
 80017c4:	045c      	lsls	r4, r3, #17
 80017c6:	197b      	adds	r3, r7, r5
 80017c8:	8819      	ldrh	r1, [r3, #0]
 80017ca:	68f8      	ldr	r0, [r7, #12]
 80017cc:	4b23      	ldr	r3, [pc, #140]	; (800185c <I2C_RequestMemoryWrite+0xc4>)
 80017ce:	9300      	str	r3, [sp, #0]
 80017d0:	0023      	movs	r3, r4
 80017d2:	f000 f99b 	bl	8001b0c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80017d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017d8:	6a39      	ldr	r1, [r7, #32]
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	0018      	movs	r0, r3
 80017de:	f000 f8a0 	bl	8001922 <I2C_WaitOnTXISFlagUntilTimeout>
 80017e2:	1e03      	subs	r3, r0, #0
 80017e4:	d001      	beq.n	80017ea <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e033      	b.n	8001852 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80017ea:	1dbb      	adds	r3, r7, #6
 80017ec:	881b      	ldrh	r3, [r3, #0]
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d107      	bne.n	8001802 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80017f2:	2308      	movs	r3, #8
 80017f4:	18fb      	adds	r3, r7, r3
 80017f6:	881b      	ldrh	r3, [r3, #0]
 80017f8:	b2da      	uxtb	r2, r3
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	629a      	str	r2, [r3, #40]	; 0x28
 8001800:	e019      	b.n	8001836 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001802:	2308      	movs	r3, #8
 8001804:	18fb      	adds	r3, r7, r3
 8001806:	881b      	ldrh	r3, [r3, #0]
 8001808:	0a1b      	lsrs	r3, r3, #8
 800180a:	b29b      	uxth	r3, r3
 800180c:	b2da      	uxtb	r2, r3
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001814:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001816:	6a39      	ldr	r1, [r7, #32]
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	0018      	movs	r0, r3
 800181c:	f000 f881 	bl	8001922 <I2C_WaitOnTXISFlagUntilTimeout>
 8001820:	1e03      	subs	r3, r0, #0
 8001822:	d001      	beq.n	8001828 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e014      	b.n	8001852 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001828:	2308      	movs	r3, #8
 800182a:	18fb      	adds	r3, r7, r3
 800182c:	881b      	ldrh	r3, [r3, #0]
 800182e:	b2da      	uxtb	r2, r3
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001836:	6a3a      	ldr	r2, [r7, #32]
 8001838:	68f8      	ldr	r0, [r7, #12]
 800183a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183c:	9300      	str	r3, [sp, #0]
 800183e:	0013      	movs	r3, r2
 8001840:	2200      	movs	r2, #0
 8001842:	2180      	movs	r1, #128	; 0x80
 8001844:	f000 f82e 	bl	80018a4 <I2C_WaitOnFlagUntilTimeout>
 8001848:	1e03      	subs	r3, r0, #0
 800184a:	d001      	beq.n	8001850 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e000      	b.n	8001852 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8001850:	2300      	movs	r3, #0
}
 8001852:	0018      	movs	r0, r3
 8001854:	46bd      	mov	sp, r7
 8001856:	b004      	add	sp, #16
 8001858:	bdb0      	pop	{r4, r5, r7, pc}
 800185a:	46c0      	nop			; (mov r8, r8)
 800185c:	80002000 	.word	0x80002000

08001860 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	699b      	ldr	r3, [r3, #24]
 800186e:	2202      	movs	r2, #2
 8001870:	4013      	ands	r3, r2
 8001872:	2b02      	cmp	r3, #2
 8001874:	d103      	bne.n	800187e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	2200      	movs	r2, #0
 800187c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	699b      	ldr	r3, [r3, #24]
 8001884:	2201      	movs	r2, #1
 8001886:	4013      	ands	r3, r2
 8001888:	2b01      	cmp	r3, #1
 800188a:	d007      	beq.n	800189c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	699a      	ldr	r2, [r3, #24]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2101      	movs	r1, #1
 8001898:	430a      	orrs	r2, r1
 800189a:	619a      	str	r2, [r3, #24]
  }
}
 800189c:	46c0      	nop			; (mov r8, r8)
 800189e:	46bd      	mov	sp, r7
 80018a0:	b002      	add	sp, #8
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	60f8      	str	r0, [r7, #12]
 80018ac:	60b9      	str	r1, [r7, #8]
 80018ae:	603b      	str	r3, [r7, #0]
 80018b0:	1dfb      	adds	r3, r7, #7
 80018b2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80018b4:	e021      	b.n	80018fa <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	3301      	adds	r3, #1
 80018ba:	d01e      	beq.n	80018fa <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018bc:	f7ff f902 	bl	8000ac4 <HAL_GetTick>
 80018c0:	0002      	movs	r2, r0
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	683a      	ldr	r2, [r7, #0]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d302      	bcc.n	80018d2 <I2C_WaitOnFlagUntilTimeout+0x2e>
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d113      	bne.n	80018fa <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d6:	2220      	movs	r2, #32
 80018d8:	431a      	orrs	r2, r3
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	2241      	movs	r2, #65	; 0x41
 80018e2:	2120      	movs	r1, #32
 80018e4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	2242      	movs	r2, #66	; 0x42
 80018ea:	2100      	movs	r1, #0
 80018ec:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	2240      	movs	r2, #64	; 0x40
 80018f2:	2100      	movs	r1, #0
 80018f4:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e00f      	b.n	800191a <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	699b      	ldr	r3, [r3, #24]
 8001900:	68ba      	ldr	r2, [r7, #8]
 8001902:	4013      	ands	r3, r2
 8001904:	68ba      	ldr	r2, [r7, #8]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	425a      	negs	r2, r3
 800190a:	4153      	adcs	r3, r2
 800190c:	b2db      	uxtb	r3, r3
 800190e:	001a      	movs	r2, r3
 8001910:	1dfb      	adds	r3, r7, #7
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	429a      	cmp	r2, r3
 8001916:	d0ce      	beq.n	80018b6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001918:	2300      	movs	r3, #0
}
 800191a:	0018      	movs	r0, r3
 800191c:	46bd      	mov	sp, r7
 800191e:	b004      	add	sp, #16
 8001920:	bd80      	pop	{r7, pc}

08001922 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001922:	b580      	push	{r7, lr}
 8001924:	b084      	sub	sp, #16
 8001926:	af00      	add	r7, sp, #0
 8001928:	60f8      	str	r0, [r7, #12]
 800192a:	60b9      	str	r1, [r7, #8]
 800192c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800192e:	e02b      	b.n	8001988 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	68b9      	ldr	r1, [r7, #8]
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	0018      	movs	r0, r3
 8001938:	f000 f86e 	bl	8001a18 <I2C_IsAcknowledgeFailed>
 800193c:	1e03      	subs	r3, r0, #0
 800193e:	d001      	beq.n	8001944 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e029      	b.n	8001998 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	3301      	adds	r3, #1
 8001948:	d01e      	beq.n	8001988 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800194a:	f7ff f8bb 	bl	8000ac4 <HAL_GetTick>
 800194e:	0002      	movs	r2, r0
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	68ba      	ldr	r2, [r7, #8]
 8001956:	429a      	cmp	r2, r3
 8001958:	d302      	bcc.n	8001960 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d113      	bne.n	8001988 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001964:	2220      	movs	r2, #32
 8001966:	431a      	orrs	r2, r3
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	2241      	movs	r2, #65	; 0x41
 8001970:	2120      	movs	r1, #32
 8001972:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	2242      	movs	r2, #66	; 0x42
 8001978:	2100      	movs	r1, #0
 800197a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2240      	movs	r2, #64	; 0x40
 8001980:	2100      	movs	r1, #0
 8001982:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e007      	b.n	8001998 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	699b      	ldr	r3, [r3, #24]
 800198e:	2202      	movs	r2, #2
 8001990:	4013      	ands	r3, r2
 8001992:	2b02      	cmp	r3, #2
 8001994:	d1cc      	bne.n	8001930 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001996:	2300      	movs	r3, #0
}
 8001998:	0018      	movs	r0, r3
 800199a:	46bd      	mov	sp, r7
 800199c:	b004      	add	sp, #16
 800199e:	bd80      	pop	{r7, pc}

080019a0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	60b9      	str	r1, [r7, #8]
 80019aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80019ac:	e028      	b.n	8001a00 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	68b9      	ldr	r1, [r7, #8]
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	0018      	movs	r0, r3
 80019b6:	f000 f82f 	bl	8001a18 <I2C_IsAcknowledgeFailed>
 80019ba:	1e03      	subs	r3, r0, #0
 80019bc:	d001      	beq.n	80019c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e026      	b.n	8001a10 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019c2:	f7ff f87f 	bl	8000ac4 <HAL_GetTick>
 80019c6:	0002      	movs	r2, r0
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	68ba      	ldr	r2, [r7, #8]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d302      	bcc.n	80019d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d113      	bne.n	8001a00 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019dc:	2220      	movs	r2, #32
 80019de:	431a      	orrs	r2, r3
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2241      	movs	r2, #65	; 0x41
 80019e8:	2120      	movs	r1, #32
 80019ea:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	2242      	movs	r2, #66	; 0x42
 80019f0:	2100      	movs	r1, #0
 80019f2:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	2240      	movs	r2, #64	; 0x40
 80019f8:	2100      	movs	r1, #0
 80019fa:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e007      	b.n	8001a10 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	699b      	ldr	r3, [r3, #24]
 8001a06:	2220      	movs	r2, #32
 8001a08:	4013      	ands	r3, r2
 8001a0a:	2b20      	cmp	r3, #32
 8001a0c:	d1cf      	bne.n	80019ae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001a0e:	2300      	movs	r3, #0
}
 8001a10:	0018      	movs	r0, r3
 8001a12:	46bd      	mov	sp, r7
 8001a14:	b004      	add	sp, #16
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	60f8      	str	r0, [r7, #12]
 8001a20:	60b9      	str	r1, [r7, #8]
 8001a22:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	699b      	ldr	r3, [r3, #24]
 8001a2a:	2210      	movs	r2, #16
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	2b10      	cmp	r3, #16
 8001a30:	d164      	bne.n	8001afc <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	685a      	ldr	r2, [r3, #4]
 8001a38:	2380      	movs	r3, #128	; 0x80
 8001a3a:	049b      	lsls	r3, r3, #18
 8001a3c:	401a      	ands	r2, r3
 8001a3e:	2380      	movs	r3, #128	; 0x80
 8001a40:	049b      	lsls	r3, r3, #18
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d02b      	beq.n	8001a9e <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	685a      	ldr	r2, [r3, #4]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2180      	movs	r1, #128	; 0x80
 8001a52:	01c9      	lsls	r1, r1, #7
 8001a54:	430a      	orrs	r2, r1
 8001a56:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a58:	e021      	b.n	8001a9e <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	d01e      	beq.n	8001a9e <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a60:	f7ff f830 	bl	8000ac4 <HAL_GetTick>
 8001a64:	0002      	movs	r2, r0
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	68ba      	ldr	r2, [r7, #8]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d302      	bcc.n	8001a76 <I2C_IsAcknowledgeFailed+0x5e>
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d113      	bne.n	8001a9e <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a7a:	2220      	movs	r2, #32
 8001a7c:	431a      	orrs	r2, r3
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	2241      	movs	r2, #65	; 0x41
 8001a86:	2120      	movs	r1, #32
 8001a88:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	2242      	movs	r2, #66	; 0x42
 8001a8e:	2100      	movs	r1, #0
 8001a90:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2240      	movs	r2, #64	; 0x40
 8001a96:	2100      	movs	r1, #0
 8001a98:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e02f      	b.n	8001afe <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	699b      	ldr	r3, [r3, #24]
 8001aa4:	2220      	movs	r2, #32
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	2b20      	cmp	r3, #32
 8001aaa:	d1d6      	bne.n	8001a5a <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2210      	movs	r2, #16
 8001ab2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2220      	movs	r2, #32
 8001aba:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	0018      	movs	r0, r3
 8001ac0:	f7ff fece 	bl	8001860 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	685a      	ldr	r2, [r3, #4]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	490e      	ldr	r1, [pc, #56]	; (8001b08 <I2C_IsAcknowledgeFailed+0xf0>)
 8001ad0:	400a      	ands	r2, r1
 8001ad2:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad8:	2204      	movs	r2, #4
 8001ada:	431a      	orrs	r2, r3
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2241      	movs	r2, #65	; 0x41
 8001ae4:	2120      	movs	r1, #32
 8001ae6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2242      	movs	r2, #66	; 0x42
 8001aec:	2100      	movs	r1, #0
 8001aee:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	2240      	movs	r2, #64	; 0x40
 8001af4:	2100      	movs	r1, #0
 8001af6:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e000      	b.n	8001afe <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8001afc:	2300      	movs	r3, #0
}
 8001afe:	0018      	movs	r0, r3
 8001b00:	46bd      	mov	sp, r7
 8001b02:	b004      	add	sp, #16
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	46c0      	nop			; (mov r8, r8)
 8001b08:	fe00e800 	.word	0xfe00e800

08001b0c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001b0c:	b590      	push	{r4, r7, lr}
 8001b0e:	b085      	sub	sp, #20
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	0008      	movs	r0, r1
 8001b16:	0011      	movs	r1, r2
 8001b18:	607b      	str	r3, [r7, #4]
 8001b1a:	240a      	movs	r4, #10
 8001b1c:	193b      	adds	r3, r7, r4
 8001b1e:	1c02      	adds	r2, r0, #0
 8001b20:	801a      	strh	r2, [r3, #0]
 8001b22:	2009      	movs	r0, #9
 8001b24:	183b      	adds	r3, r7, r0
 8001b26:	1c0a      	adds	r2, r1, #0
 8001b28:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	6a3a      	ldr	r2, [r7, #32]
 8001b32:	0d51      	lsrs	r1, r2, #21
 8001b34:	2280      	movs	r2, #128	; 0x80
 8001b36:	00d2      	lsls	r2, r2, #3
 8001b38:	400a      	ands	r2, r1
 8001b3a:	490e      	ldr	r1, [pc, #56]	; (8001b74 <I2C_TransferConfig+0x68>)
 8001b3c:	430a      	orrs	r2, r1
 8001b3e:	43d2      	mvns	r2, r2
 8001b40:	401a      	ands	r2, r3
 8001b42:	0011      	movs	r1, r2
 8001b44:	193b      	adds	r3, r7, r4
 8001b46:	881b      	ldrh	r3, [r3, #0]
 8001b48:	059b      	lsls	r3, r3, #22
 8001b4a:	0d9a      	lsrs	r2, r3, #22
 8001b4c:	183b      	adds	r3, r7, r0
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	0418      	lsls	r0, r3, #16
 8001b52:	23ff      	movs	r3, #255	; 0xff
 8001b54:	041b      	lsls	r3, r3, #16
 8001b56:	4003      	ands	r3, r0
 8001b58:	431a      	orrs	r2, r3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	431a      	orrs	r2, r3
 8001b5e:	6a3b      	ldr	r3, [r7, #32]
 8001b60:	431a      	orrs	r2, r3
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	430a      	orrs	r2, r1
 8001b68:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8001b6a:	46c0      	nop			; (mov r8, r8)
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	b005      	add	sp, #20
 8001b70:	bd90      	pop	{r4, r7, pc}
 8001b72:	46c0      	nop			; (mov r8, r8)
 8001b74:	03ff63ff 	.word	0x03ff63ff

08001b78 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2241      	movs	r2, #65	; 0x41
 8001b86:	5c9b      	ldrb	r3, [r3, r2]
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	2b20      	cmp	r3, #32
 8001b8c:	d138      	bne.n	8001c00 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2240      	movs	r2, #64	; 0x40
 8001b92:	5c9b      	ldrb	r3, [r3, r2]
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d101      	bne.n	8001b9c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001b98:	2302      	movs	r3, #2
 8001b9a:	e032      	b.n	8001c02 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2240      	movs	r2, #64	; 0x40
 8001ba0:	2101      	movs	r1, #1
 8001ba2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2241      	movs	r2, #65	; 0x41
 8001ba8:	2124      	movs	r1, #36	; 0x24
 8001baa:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	2101      	movs	r1, #1
 8001bb8:	438a      	bics	r2, r1
 8001bba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4911      	ldr	r1, [pc, #68]	; (8001c0c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001bc8:	400a      	ands	r2, r1
 8001bca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	6819      	ldr	r1, [r3, #0]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	683a      	ldr	r2, [r7, #0]
 8001bd8:	430a      	orrs	r2, r1
 8001bda:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	2101      	movs	r1, #1
 8001be8:	430a      	orrs	r2, r1
 8001bea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2241      	movs	r2, #65	; 0x41
 8001bf0:	2120      	movs	r1, #32
 8001bf2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2240      	movs	r2, #64	; 0x40
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	e000      	b.n	8001c02 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001c00:	2302      	movs	r3, #2
  }
}
 8001c02:	0018      	movs	r0, r3
 8001c04:	46bd      	mov	sp, r7
 8001c06:	b002      	add	sp, #8
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	46c0      	nop			; (mov r8, r8)
 8001c0c:	ffffefff 	.word	0xffffefff

08001c10 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2241      	movs	r2, #65	; 0x41
 8001c1e:	5c9b      	ldrb	r3, [r3, r2]
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	2b20      	cmp	r3, #32
 8001c24:	d139      	bne.n	8001c9a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2240      	movs	r2, #64	; 0x40
 8001c2a:	5c9b      	ldrb	r3, [r3, r2]
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d101      	bne.n	8001c34 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001c30:	2302      	movs	r3, #2
 8001c32:	e033      	b.n	8001c9c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2240      	movs	r2, #64	; 0x40
 8001c38:	2101      	movs	r1, #1
 8001c3a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2241      	movs	r2, #65	; 0x41
 8001c40:	2124      	movs	r1, #36	; 0x24
 8001c42:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	2101      	movs	r1, #1
 8001c50:	438a      	bics	r2, r1
 8001c52:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	4a11      	ldr	r2, [pc, #68]	; (8001ca4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001c60:	4013      	ands	r3, r2
 8001c62:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	021b      	lsls	r3, r3, #8
 8001c68:	68fa      	ldr	r2, [r7, #12]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	68fa      	ldr	r2, [r7, #12]
 8001c74:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2101      	movs	r1, #1
 8001c82:	430a      	orrs	r2, r1
 8001c84:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2241      	movs	r2, #65	; 0x41
 8001c8a:	2120      	movs	r1, #32
 8001c8c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2240      	movs	r2, #64	; 0x40
 8001c92:	2100      	movs	r1, #0
 8001c94:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001c96:	2300      	movs	r3, #0
 8001c98:	e000      	b.n	8001c9c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001c9a:	2302      	movs	r3, #2
  }
}
 8001c9c:	0018      	movs	r0, r3
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	b004      	add	sp, #16
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	fffff0ff 	.word	0xfffff0ff

08001ca8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b088      	sub	sp, #32
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d101      	bne.n	8001cba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e305      	b.n	80022c6 <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	d100      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x1e>
 8001cc4:	e08d      	b.n	8001de2 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001cc6:	4bc5      	ldr	r3, [pc, #788]	; (8001fdc <HAL_RCC_OscConfig+0x334>)
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	220c      	movs	r2, #12
 8001ccc:	4013      	ands	r3, r2
 8001cce:	2b04      	cmp	r3, #4
 8001cd0:	d00e      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001cd2:	4bc2      	ldr	r3, [pc, #776]	; (8001fdc <HAL_RCC_OscConfig+0x334>)
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	220c      	movs	r2, #12
 8001cd8:	4013      	ands	r3, r2
 8001cda:	2b08      	cmp	r3, #8
 8001cdc:	d116      	bne.n	8001d0c <HAL_RCC_OscConfig+0x64>
 8001cde:	4bbf      	ldr	r3, [pc, #764]	; (8001fdc <HAL_RCC_OscConfig+0x334>)
 8001ce0:	685a      	ldr	r2, [r3, #4]
 8001ce2:	23c0      	movs	r3, #192	; 0xc0
 8001ce4:	025b      	lsls	r3, r3, #9
 8001ce6:	401a      	ands	r2, r3
 8001ce8:	2380      	movs	r3, #128	; 0x80
 8001cea:	025b      	lsls	r3, r3, #9
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d10d      	bne.n	8001d0c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cf0:	4bba      	ldr	r3, [pc, #744]	; (8001fdc <HAL_RCC_OscConfig+0x334>)
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	2380      	movs	r3, #128	; 0x80
 8001cf6:	029b      	lsls	r3, r3, #10
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	d100      	bne.n	8001cfe <HAL_RCC_OscConfig+0x56>
 8001cfc:	e070      	b.n	8001de0 <HAL_RCC_OscConfig+0x138>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d000      	beq.n	8001d08 <HAL_RCC_OscConfig+0x60>
 8001d06:	e06b      	b.n	8001de0 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e2dc      	b.n	80022c6 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d107      	bne.n	8001d24 <HAL_RCC_OscConfig+0x7c>
 8001d14:	4bb1      	ldr	r3, [pc, #708]	; (8001fdc <HAL_RCC_OscConfig+0x334>)
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	4bb0      	ldr	r3, [pc, #704]	; (8001fdc <HAL_RCC_OscConfig+0x334>)
 8001d1a:	2180      	movs	r1, #128	; 0x80
 8001d1c:	0249      	lsls	r1, r1, #9
 8001d1e:	430a      	orrs	r2, r1
 8001d20:	601a      	str	r2, [r3, #0]
 8001d22:	e02f      	b.n	8001d84 <HAL_RCC_OscConfig+0xdc>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d10c      	bne.n	8001d46 <HAL_RCC_OscConfig+0x9e>
 8001d2c:	4bab      	ldr	r3, [pc, #684]	; (8001fdc <HAL_RCC_OscConfig+0x334>)
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	4baa      	ldr	r3, [pc, #680]	; (8001fdc <HAL_RCC_OscConfig+0x334>)
 8001d32:	49ab      	ldr	r1, [pc, #684]	; (8001fe0 <HAL_RCC_OscConfig+0x338>)
 8001d34:	400a      	ands	r2, r1
 8001d36:	601a      	str	r2, [r3, #0]
 8001d38:	4ba8      	ldr	r3, [pc, #672]	; (8001fdc <HAL_RCC_OscConfig+0x334>)
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	4ba7      	ldr	r3, [pc, #668]	; (8001fdc <HAL_RCC_OscConfig+0x334>)
 8001d3e:	49a9      	ldr	r1, [pc, #676]	; (8001fe4 <HAL_RCC_OscConfig+0x33c>)
 8001d40:	400a      	ands	r2, r1
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	e01e      	b.n	8001d84 <HAL_RCC_OscConfig+0xdc>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	2b05      	cmp	r3, #5
 8001d4c:	d10e      	bne.n	8001d6c <HAL_RCC_OscConfig+0xc4>
 8001d4e:	4ba3      	ldr	r3, [pc, #652]	; (8001fdc <HAL_RCC_OscConfig+0x334>)
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	4ba2      	ldr	r3, [pc, #648]	; (8001fdc <HAL_RCC_OscConfig+0x334>)
 8001d54:	2180      	movs	r1, #128	; 0x80
 8001d56:	02c9      	lsls	r1, r1, #11
 8001d58:	430a      	orrs	r2, r1
 8001d5a:	601a      	str	r2, [r3, #0]
 8001d5c:	4b9f      	ldr	r3, [pc, #636]	; (8001fdc <HAL_RCC_OscConfig+0x334>)
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	4b9e      	ldr	r3, [pc, #632]	; (8001fdc <HAL_RCC_OscConfig+0x334>)
 8001d62:	2180      	movs	r1, #128	; 0x80
 8001d64:	0249      	lsls	r1, r1, #9
 8001d66:	430a      	orrs	r2, r1
 8001d68:	601a      	str	r2, [r3, #0]
 8001d6a:	e00b      	b.n	8001d84 <HAL_RCC_OscConfig+0xdc>
 8001d6c:	4b9b      	ldr	r3, [pc, #620]	; (8001fdc <HAL_RCC_OscConfig+0x334>)
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	4b9a      	ldr	r3, [pc, #616]	; (8001fdc <HAL_RCC_OscConfig+0x334>)
 8001d72:	499b      	ldr	r1, [pc, #620]	; (8001fe0 <HAL_RCC_OscConfig+0x338>)
 8001d74:	400a      	ands	r2, r1
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	4b98      	ldr	r3, [pc, #608]	; (8001fdc <HAL_RCC_OscConfig+0x334>)
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	4b97      	ldr	r3, [pc, #604]	; (8001fdc <HAL_RCC_OscConfig+0x334>)
 8001d7e:	4999      	ldr	r1, [pc, #612]	; (8001fe4 <HAL_RCC_OscConfig+0x33c>)
 8001d80:	400a      	ands	r2, r1
 8001d82:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d014      	beq.n	8001db6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d8c:	f7fe fe9a 	bl	8000ac4 <HAL_GetTick>
 8001d90:	0003      	movs	r3, r0
 8001d92:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d94:	e008      	b.n	8001da8 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d96:	f7fe fe95 	bl	8000ac4 <HAL_GetTick>
 8001d9a:	0002      	movs	r2, r0
 8001d9c:	69bb      	ldr	r3, [r7, #24]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	2b64      	cmp	r3, #100	; 0x64
 8001da2:	d901      	bls.n	8001da8 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001da4:	2303      	movs	r3, #3
 8001da6:	e28e      	b.n	80022c6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001da8:	4b8c      	ldr	r3, [pc, #560]	; (8001fdc <HAL_RCC_OscConfig+0x334>)
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	2380      	movs	r3, #128	; 0x80
 8001dae:	029b      	lsls	r3, r3, #10
 8001db0:	4013      	ands	r3, r2
 8001db2:	d0f0      	beq.n	8001d96 <HAL_RCC_OscConfig+0xee>
 8001db4:	e015      	b.n	8001de2 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db6:	f7fe fe85 	bl	8000ac4 <HAL_GetTick>
 8001dba:	0003      	movs	r3, r0
 8001dbc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dbe:	e008      	b.n	8001dd2 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dc0:	f7fe fe80 	bl	8000ac4 <HAL_GetTick>
 8001dc4:	0002      	movs	r2, r0
 8001dc6:	69bb      	ldr	r3, [r7, #24]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b64      	cmp	r3, #100	; 0x64
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e279      	b.n	80022c6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dd2:	4b82      	ldr	r3, [pc, #520]	; (8001fdc <HAL_RCC_OscConfig+0x334>)
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	2380      	movs	r3, #128	; 0x80
 8001dd8:	029b      	lsls	r3, r3, #10
 8001dda:	4013      	ands	r3, r2
 8001ddc:	d1f0      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x118>
 8001dde:	e000      	b.n	8001de2 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001de0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	2202      	movs	r2, #2
 8001de8:	4013      	ands	r3, r2
 8001dea:	d100      	bne.n	8001dee <HAL_RCC_OscConfig+0x146>
 8001dec:	e06c      	b.n	8001ec8 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001dee:	4b7b      	ldr	r3, [pc, #492]	; (8001fdc <HAL_RCC_OscConfig+0x334>)
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	220c      	movs	r2, #12
 8001df4:	4013      	ands	r3, r2
 8001df6:	d00e      	beq.n	8001e16 <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001df8:	4b78      	ldr	r3, [pc, #480]	; (8001fdc <HAL_RCC_OscConfig+0x334>)
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	220c      	movs	r2, #12
 8001dfe:	4013      	ands	r3, r2
 8001e00:	2b08      	cmp	r3, #8
 8001e02:	d11f      	bne.n	8001e44 <HAL_RCC_OscConfig+0x19c>
 8001e04:	4b75      	ldr	r3, [pc, #468]	; (8001fdc <HAL_RCC_OscConfig+0x334>)
 8001e06:	685a      	ldr	r2, [r3, #4]
 8001e08:	23c0      	movs	r3, #192	; 0xc0
 8001e0a:	025b      	lsls	r3, r3, #9
 8001e0c:	401a      	ands	r2, r3
 8001e0e:	2380      	movs	r3, #128	; 0x80
 8001e10:	021b      	lsls	r3, r3, #8
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d116      	bne.n	8001e44 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e16:	4b71      	ldr	r3, [pc, #452]	; (8001fdc <HAL_RCC_OscConfig+0x334>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	2202      	movs	r2, #2
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	d005      	beq.n	8001e2c <HAL_RCC_OscConfig+0x184>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d001      	beq.n	8001e2c <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e24c      	b.n	80022c6 <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e2c:	4b6b      	ldr	r3, [pc, #428]	; (8001fdc <HAL_RCC_OscConfig+0x334>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	22f8      	movs	r2, #248	; 0xf8
 8001e32:	4393      	bics	r3, r2
 8001e34:	0019      	movs	r1, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	691b      	ldr	r3, [r3, #16]
 8001e3a:	00da      	lsls	r2, r3, #3
 8001e3c:	4b67      	ldr	r3, [pc, #412]	; (8001fdc <HAL_RCC_OscConfig+0x334>)
 8001e3e:	430a      	orrs	r2, r1
 8001e40:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e42:	e041      	b.n	8001ec8 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d024      	beq.n	8001e96 <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e4c:	4b63      	ldr	r3, [pc, #396]	; (8001fdc <HAL_RCC_OscConfig+0x334>)
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	4b62      	ldr	r3, [pc, #392]	; (8001fdc <HAL_RCC_OscConfig+0x334>)
 8001e52:	2101      	movs	r1, #1
 8001e54:	430a      	orrs	r2, r1
 8001e56:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e58:	f7fe fe34 	bl	8000ac4 <HAL_GetTick>
 8001e5c:	0003      	movs	r3, r0
 8001e5e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e60:	e008      	b.n	8001e74 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e62:	f7fe fe2f 	bl	8000ac4 <HAL_GetTick>
 8001e66:	0002      	movs	r2, r0
 8001e68:	69bb      	ldr	r3, [r7, #24]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d901      	bls.n	8001e74 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001e70:	2303      	movs	r3, #3
 8001e72:	e228      	b.n	80022c6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e74:	4b59      	ldr	r3, [pc, #356]	; (8001fdc <HAL_RCC_OscConfig+0x334>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2202      	movs	r2, #2
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	d0f1      	beq.n	8001e62 <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e7e:	4b57      	ldr	r3, [pc, #348]	; (8001fdc <HAL_RCC_OscConfig+0x334>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	22f8      	movs	r2, #248	; 0xf8
 8001e84:	4393      	bics	r3, r2
 8001e86:	0019      	movs	r1, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	691b      	ldr	r3, [r3, #16]
 8001e8c:	00da      	lsls	r2, r3, #3
 8001e8e:	4b53      	ldr	r3, [pc, #332]	; (8001fdc <HAL_RCC_OscConfig+0x334>)
 8001e90:	430a      	orrs	r2, r1
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	e018      	b.n	8001ec8 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e96:	4b51      	ldr	r3, [pc, #324]	; (8001fdc <HAL_RCC_OscConfig+0x334>)
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	4b50      	ldr	r3, [pc, #320]	; (8001fdc <HAL_RCC_OscConfig+0x334>)
 8001e9c:	2101      	movs	r1, #1
 8001e9e:	438a      	bics	r2, r1
 8001ea0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea2:	f7fe fe0f 	bl	8000ac4 <HAL_GetTick>
 8001ea6:	0003      	movs	r3, r0
 8001ea8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eaa:	e008      	b.n	8001ebe <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001eac:	f7fe fe0a 	bl	8000ac4 <HAL_GetTick>
 8001eb0:	0002      	movs	r2, r0
 8001eb2:	69bb      	ldr	r3, [r7, #24]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d901      	bls.n	8001ebe <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e203      	b.n	80022c6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ebe:	4b47      	ldr	r3, [pc, #284]	; (8001fdc <HAL_RCC_OscConfig+0x334>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	2202      	movs	r2, #2
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	d1f1      	bne.n	8001eac <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2208      	movs	r2, #8
 8001ece:	4013      	ands	r3, r2
 8001ed0:	d036      	beq.n	8001f40 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	69db      	ldr	r3, [r3, #28]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d019      	beq.n	8001f0e <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001eda:	4b40      	ldr	r3, [pc, #256]	; (8001fdc <HAL_RCC_OscConfig+0x334>)
 8001edc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ede:	4b3f      	ldr	r3, [pc, #252]	; (8001fdc <HAL_RCC_OscConfig+0x334>)
 8001ee0:	2101      	movs	r1, #1
 8001ee2:	430a      	orrs	r2, r1
 8001ee4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ee6:	f7fe fded 	bl	8000ac4 <HAL_GetTick>
 8001eea:	0003      	movs	r3, r0
 8001eec:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eee:	e008      	b.n	8001f02 <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ef0:	f7fe fde8 	bl	8000ac4 <HAL_GetTick>
 8001ef4:	0002      	movs	r2, r0
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d901      	bls.n	8001f02 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e1e1      	b.n	80022c6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f02:	4b36      	ldr	r3, [pc, #216]	; (8001fdc <HAL_RCC_OscConfig+0x334>)
 8001f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f06:	2202      	movs	r2, #2
 8001f08:	4013      	ands	r3, r2
 8001f0a:	d0f1      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x248>
 8001f0c:	e018      	b.n	8001f40 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f0e:	4b33      	ldr	r3, [pc, #204]	; (8001fdc <HAL_RCC_OscConfig+0x334>)
 8001f10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f12:	4b32      	ldr	r3, [pc, #200]	; (8001fdc <HAL_RCC_OscConfig+0x334>)
 8001f14:	2101      	movs	r1, #1
 8001f16:	438a      	bics	r2, r1
 8001f18:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f1a:	f7fe fdd3 	bl	8000ac4 <HAL_GetTick>
 8001f1e:	0003      	movs	r3, r0
 8001f20:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f22:	e008      	b.n	8001f36 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f24:	f7fe fdce 	bl	8000ac4 <HAL_GetTick>
 8001f28:	0002      	movs	r2, r0
 8001f2a:	69bb      	ldr	r3, [r7, #24]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e1c7      	b.n	80022c6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f36:	4b29      	ldr	r3, [pc, #164]	; (8001fdc <HAL_RCC_OscConfig+0x334>)
 8001f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3a:	2202      	movs	r2, #2
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	d1f1      	bne.n	8001f24 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2204      	movs	r2, #4
 8001f46:	4013      	ands	r3, r2
 8001f48:	d100      	bne.n	8001f4c <HAL_RCC_OscConfig+0x2a4>
 8001f4a:	e0b5      	b.n	80020b8 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f4c:	201f      	movs	r0, #31
 8001f4e:	183b      	adds	r3, r7, r0
 8001f50:	2200      	movs	r2, #0
 8001f52:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f54:	4b21      	ldr	r3, [pc, #132]	; (8001fdc <HAL_RCC_OscConfig+0x334>)
 8001f56:	69da      	ldr	r2, [r3, #28]
 8001f58:	2380      	movs	r3, #128	; 0x80
 8001f5a:	055b      	lsls	r3, r3, #21
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	d110      	bne.n	8001f82 <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f60:	4b1e      	ldr	r3, [pc, #120]	; (8001fdc <HAL_RCC_OscConfig+0x334>)
 8001f62:	69da      	ldr	r2, [r3, #28]
 8001f64:	4b1d      	ldr	r3, [pc, #116]	; (8001fdc <HAL_RCC_OscConfig+0x334>)
 8001f66:	2180      	movs	r1, #128	; 0x80
 8001f68:	0549      	lsls	r1, r1, #21
 8001f6a:	430a      	orrs	r2, r1
 8001f6c:	61da      	str	r2, [r3, #28]
 8001f6e:	4b1b      	ldr	r3, [pc, #108]	; (8001fdc <HAL_RCC_OscConfig+0x334>)
 8001f70:	69da      	ldr	r2, [r3, #28]
 8001f72:	2380      	movs	r3, #128	; 0x80
 8001f74:	055b      	lsls	r3, r3, #21
 8001f76:	4013      	ands	r3, r2
 8001f78:	60fb      	str	r3, [r7, #12]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001f7c:	183b      	adds	r3, r7, r0
 8001f7e:	2201      	movs	r2, #1
 8001f80:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f82:	4b19      	ldr	r3, [pc, #100]	; (8001fe8 <HAL_RCC_OscConfig+0x340>)
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	2380      	movs	r3, #128	; 0x80
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	d11a      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f8e:	4b16      	ldr	r3, [pc, #88]	; (8001fe8 <HAL_RCC_OscConfig+0x340>)
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	4b15      	ldr	r3, [pc, #84]	; (8001fe8 <HAL_RCC_OscConfig+0x340>)
 8001f94:	2180      	movs	r1, #128	; 0x80
 8001f96:	0049      	lsls	r1, r1, #1
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f9c:	f7fe fd92 	bl	8000ac4 <HAL_GetTick>
 8001fa0:	0003      	movs	r3, r0
 8001fa2:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fa4:	e008      	b.n	8001fb8 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fa6:	f7fe fd8d 	bl	8000ac4 <HAL_GetTick>
 8001faa:	0002      	movs	r2, r0
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	2b64      	cmp	r3, #100	; 0x64
 8001fb2:	d901      	bls.n	8001fb8 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e186      	b.n	80022c6 <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fb8:	4b0b      	ldr	r3, [pc, #44]	; (8001fe8 <HAL_RCC_OscConfig+0x340>)
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	2380      	movs	r3, #128	; 0x80
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	d0f0      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d10f      	bne.n	8001fec <HAL_RCC_OscConfig+0x344>
 8001fcc:	4b03      	ldr	r3, [pc, #12]	; (8001fdc <HAL_RCC_OscConfig+0x334>)
 8001fce:	6a1a      	ldr	r2, [r3, #32]
 8001fd0:	4b02      	ldr	r3, [pc, #8]	; (8001fdc <HAL_RCC_OscConfig+0x334>)
 8001fd2:	2101      	movs	r1, #1
 8001fd4:	430a      	orrs	r2, r1
 8001fd6:	621a      	str	r2, [r3, #32]
 8001fd8:	e036      	b.n	8002048 <HAL_RCC_OscConfig+0x3a0>
 8001fda:	46c0      	nop			; (mov r8, r8)
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	fffeffff 	.word	0xfffeffff
 8001fe4:	fffbffff 	.word	0xfffbffff
 8001fe8:	40007000 	.word	0x40007000
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d10c      	bne.n	800200e <HAL_RCC_OscConfig+0x366>
 8001ff4:	4bb6      	ldr	r3, [pc, #728]	; (80022d0 <HAL_RCC_OscConfig+0x628>)
 8001ff6:	6a1a      	ldr	r2, [r3, #32]
 8001ff8:	4bb5      	ldr	r3, [pc, #724]	; (80022d0 <HAL_RCC_OscConfig+0x628>)
 8001ffa:	2101      	movs	r1, #1
 8001ffc:	438a      	bics	r2, r1
 8001ffe:	621a      	str	r2, [r3, #32]
 8002000:	4bb3      	ldr	r3, [pc, #716]	; (80022d0 <HAL_RCC_OscConfig+0x628>)
 8002002:	6a1a      	ldr	r2, [r3, #32]
 8002004:	4bb2      	ldr	r3, [pc, #712]	; (80022d0 <HAL_RCC_OscConfig+0x628>)
 8002006:	2104      	movs	r1, #4
 8002008:	438a      	bics	r2, r1
 800200a:	621a      	str	r2, [r3, #32]
 800200c:	e01c      	b.n	8002048 <HAL_RCC_OscConfig+0x3a0>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	2b05      	cmp	r3, #5
 8002014:	d10c      	bne.n	8002030 <HAL_RCC_OscConfig+0x388>
 8002016:	4bae      	ldr	r3, [pc, #696]	; (80022d0 <HAL_RCC_OscConfig+0x628>)
 8002018:	6a1a      	ldr	r2, [r3, #32]
 800201a:	4bad      	ldr	r3, [pc, #692]	; (80022d0 <HAL_RCC_OscConfig+0x628>)
 800201c:	2104      	movs	r1, #4
 800201e:	430a      	orrs	r2, r1
 8002020:	621a      	str	r2, [r3, #32]
 8002022:	4bab      	ldr	r3, [pc, #684]	; (80022d0 <HAL_RCC_OscConfig+0x628>)
 8002024:	6a1a      	ldr	r2, [r3, #32]
 8002026:	4baa      	ldr	r3, [pc, #680]	; (80022d0 <HAL_RCC_OscConfig+0x628>)
 8002028:	2101      	movs	r1, #1
 800202a:	430a      	orrs	r2, r1
 800202c:	621a      	str	r2, [r3, #32]
 800202e:	e00b      	b.n	8002048 <HAL_RCC_OscConfig+0x3a0>
 8002030:	4ba7      	ldr	r3, [pc, #668]	; (80022d0 <HAL_RCC_OscConfig+0x628>)
 8002032:	6a1a      	ldr	r2, [r3, #32]
 8002034:	4ba6      	ldr	r3, [pc, #664]	; (80022d0 <HAL_RCC_OscConfig+0x628>)
 8002036:	2101      	movs	r1, #1
 8002038:	438a      	bics	r2, r1
 800203a:	621a      	str	r2, [r3, #32]
 800203c:	4ba4      	ldr	r3, [pc, #656]	; (80022d0 <HAL_RCC_OscConfig+0x628>)
 800203e:	6a1a      	ldr	r2, [r3, #32]
 8002040:	4ba3      	ldr	r3, [pc, #652]	; (80022d0 <HAL_RCC_OscConfig+0x628>)
 8002042:	2104      	movs	r1, #4
 8002044:	438a      	bics	r2, r1
 8002046:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d014      	beq.n	800207a <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002050:	f7fe fd38 	bl	8000ac4 <HAL_GetTick>
 8002054:	0003      	movs	r3, r0
 8002056:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002058:	e009      	b.n	800206e <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800205a:	f7fe fd33 	bl	8000ac4 <HAL_GetTick>
 800205e:	0002      	movs	r2, r0
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	4a9b      	ldr	r2, [pc, #620]	; (80022d4 <HAL_RCC_OscConfig+0x62c>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e12b      	b.n	80022c6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800206e:	4b98      	ldr	r3, [pc, #608]	; (80022d0 <HAL_RCC_OscConfig+0x628>)
 8002070:	6a1b      	ldr	r3, [r3, #32]
 8002072:	2202      	movs	r2, #2
 8002074:	4013      	ands	r3, r2
 8002076:	d0f0      	beq.n	800205a <HAL_RCC_OscConfig+0x3b2>
 8002078:	e013      	b.n	80020a2 <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800207a:	f7fe fd23 	bl	8000ac4 <HAL_GetTick>
 800207e:	0003      	movs	r3, r0
 8002080:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002082:	e009      	b.n	8002098 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002084:	f7fe fd1e 	bl	8000ac4 <HAL_GetTick>
 8002088:	0002      	movs	r2, r0
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	4a91      	ldr	r2, [pc, #580]	; (80022d4 <HAL_RCC_OscConfig+0x62c>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d901      	bls.n	8002098 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e116      	b.n	80022c6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002098:	4b8d      	ldr	r3, [pc, #564]	; (80022d0 <HAL_RCC_OscConfig+0x628>)
 800209a:	6a1b      	ldr	r3, [r3, #32]
 800209c:	2202      	movs	r2, #2
 800209e:	4013      	ands	r3, r2
 80020a0:	d1f0      	bne.n	8002084 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80020a2:	231f      	movs	r3, #31
 80020a4:	18fb      	adds	r3, r7, r3
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d105      	bne.n	80020b8 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020ac:	4b88      	ldr	r3, [pc, #544]	; (80022d0 <HAL_RCC_OscConfig+0x628>)
 80020ae:	69da      	ldr	r2, [r3, #28]
 80020b0:	4b87      	ldr	r3, [pc, #540]	; (80022d0 <HAL_RCC_OscConfig+0x628>)
 80020b2:	4989      	ldr	r1, [pc, #548]	; (80022d8 <HAL_RCC_OscConfig+0x630>)
 80020b4:	400a      	ands	r2, r1
 80020b6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2210      	movs	r2, #16
 80020be:	4013      	ands	r3, r2
 80020c0:	d063      	beq.n	800218a <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	695b      	ldr	r3, [r3, #20]
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d12a      	bne.n	8002120 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80020ca:	4b81      	ldr	r3, [pc, #516]	; (80022d0 <HAL_RCC_OscConfig+0x628>)
 80020cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020ce:	4b80      	ldr	r3, [pc, #512]	; (80022d0 <HAL_RCC_OscConfig+0x628>)
 80020d0:	2104      	movs	r1, #4
 80020d2:	430a      	orrs	r2, r1
 80020d4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80020d6:	4b7e      	ldr	r3, [pc, #504]	; (80022d0 <HAL_RCC_OscConfig+0x628>)
 80020d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020da:	4b7d      	ldr	r3, [pc, #500]	; (80022d0 <HAL_RCC_OscConfig+0x628>)
 80020dc:	2101      	movs	r1, #1
 80020de:	430a      	orrs	r2, r1
 80020e0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020e2:	f7fe fcef 	bl	8000ac4 <HAL_GetTick>
 80020e6:	0003      	movs	r3, r0
 80020e8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80020ea:	e008      	b.n	80020fe <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80020ec:	f7fe fcea 	bl	8000ac4 <HAL_GetTick>
 80020f0:	0002      	movs	r2, r0
 80020f2:	69bb      	ldr	r3, [r7, #24]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d901      	bls.n	80020fe <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e0e3      	b.n	80022c6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80020fe:	4b74      	ldr	r3, [pc, #464]	; (80022d0 <HAL_RCC_OscConfig+0x628>)
 8002100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002102:	2202      	movs	r2, #2
 8002104:	4013      	ands	r3, r2
 8002106:	d0f1      	beq.n	80020ec <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002108:	4b71      	ldr	r3, [pc, #452]	; (80022d0 <HAL_RCC_OscConfig+0x628>)
 800210a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800210c:	22f8      	movs	r2, #248	; 0xf8
 800210e:	4393      	bics	r3, r2
 8002110:	0019      	movs	r1, r3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	699b      	ldr	r3, [r3, #24]
 8002116:	00da      	lsls	r2, r3, #3
 8002118:	4b6d      	ldr	r3, [pc, #436]	; (80022d0 <HAL_RCC_OscConfig+0x628>)
 800211a:	430a      	orrs	r2, r1
 800211c:	635a      	str	r2, [r3, #52]	; 0x34
 800211e:	e034      	b.n	800218a <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	695b      	ldr	r3, [r3, #20]
 8002124:	3305      	adds	r3, #5
 8002126:	d111      	bne.n	800214c <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002128:	4b69      	ldr	r3, [pc, #420]	; (80022d0 <HAL_RCC_OscConfig+0x628>)
 800212a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800212c:	4b68      	ldr	r3, [pc, #416]	; (80022d0 <HAL_RCC_OscConfig+0x628>)
 800212e:	2104      	movs	r1, #4
 8002130:	438a      	bics	r2, r1
 8002132:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002134:	4b66      	ldr	r3, [pc, #408]	; (80022d0 <HAL_RCC_OscConfig+0x628>)
 8002136:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002138:	22f8      	movs	r2, #248	; 0xf8
 800213a:	4393      	bics	r3, r2
 800213c:	0019      	movs	r1, r3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	699b      	ldr	r3, [r3, #24]
 8002142:	00da      	lsls	r2, r3, #3
 8002144:	4b62      	ldr	r3, [pc, #392]	; (80022d0 <HAL_RCC_OscConfig+0x628>)
 8002146:	430a      	orrs	r2, r1
 8002148:	635a      	str	r2, [r3, #52]	; 0x34
 800214a:	e01e      	b.n	800218a <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800214c:	4b60      	ldr	r3, [pc, #384]	; (80022d0 <HAL_RCC_OscConfig+0x628>)
 800214e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002150:	4b5f      	ldr	r3, [pc, #380]	; (80022d0 <HAL_RCC_OscConfig+0x628>)
 8002152:	2104      	movs	r1, #4
 8002154:	430a      	orrs	r2, r1
 8002156:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002158:	4b5d      	ldr	r3, [pc, #372]	; (80022d0 <HAL_RCC_OscConfig+0x628>)
 800215a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800215c:	4b5c      	ldr	r3, [pc, #368]	; (80022d0 <HAL_RCC_OscConfig+0x628>)
 800215e:	2101      	movs	r1, #1
 8002160:	438a      	bics	r2, r1
 8002162:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002164:	f7fe fcae 	bl	8000ac4 <HAL_GetTick>
 8002168:	0003      	movs	r3, r0
 800216a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800216c:	e008      	b.n	8002180 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800216e:	f7fe fca9 	bl	8000ac4 <HAL_GetTick>
 8002172:	0002      	movs	r2, r0
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	2b02      	cmp	r3, #2
 800217a:	d901      	bls.n	8002180 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	e0a2      	b.n	80022c6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002180:	4b53      	ldr	r3, [pc, #332]	; (80022d0 <HAL_RCC_OscConfig+0x628>)
 8002182:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002184:	2202      	movs	r2, #2
 8002186:	4013      	ands	r3, r2
 8002188:	d1f1      	bne.n	800216e <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6a1b      	ldr	r3, [r3, #32]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d100      	bne.n	8002194 <HAL_RCC_OscConfig+0x4ec>
 8002192:	e097      	b.n	80022c4 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002194:	4b4e      	ldr	r3, [pc, #312]	; (80022d0 <HAL_RCC_OscConfig+0x628>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	220c      	movs	r2, #12
 800219a:	4013      	ands	r3, r2
 800219c:	2b08      	cmp	r3, #8
 800219e:	d100      	bne.n	80021a2 <HAL_RCC_OscConfig+0x4fa>
 80021a0:	e06b      	b.n	800227a <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6a1b      	ldr	r3, [r3, #32]
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d14c      	bne.n	8002244 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021aa:	4b49      	ldr	r3, [pc, #292]	; (80022d0 <HAL_RCC_OscConfig+0x628>)
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	4b48      	ldr	r3, [pc, #288]	; (80022d0 <HAL_RCC_OscConfig+0x628>)
 80021b0:	494a      	ldr	r1, [pc, #296]	; (80022dc <HAL_RCC_OscConfig+0x634>)
 80021b2:	400a      	ands	r2, r1
 80021b4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b6:	f7fe fc85 	bl	8000ac4 <HAL_GetTick>
 80021ba:	0003      	movs	r3, r0
 80021bc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021be:	e008      	b.n	80021d2 <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021c0:	f7fe fc80 	bl	8000ac4 <HAL_GetTick>
 80021c4:	0002      	movs	r2, r0
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d901      	bls.n	80021d2 <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e079      	b.n	80022c6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021d2:	4b3f      	ldr	r3, [pc, #252]	; (80022d0 <HAL_RCC_OscConfig+0x628>)
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	2380      	movs	r3, #128	; 0x80
 80021d8:	049b      	lsls	r3, r3, #18
 80021da:	4013      	ands	r3, r2
 80021dc:	d1f0      	bne.n	80021c0 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021de:	4b3c      	ldr	r3, [pc, #240]	; (80022d0 <HAL_RCC_OscConfig+0x628>)
 80021e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e2:	220f      	movs	r2, #15
 80021e4:	4393      	bics	r3, r2
 80021e6:	0019      	movs	r1, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021ec:	4b38      	ldr	r3, [pc, #224]	; (80022d0 <HAL_RCC_OscConfig+0x628>)
 80021ee:	430a      	orrs	r2, r1
 80021f0:	62da      	str	r2, [r3, #44]	; 0x2c
 80021f2:	4b37      	ldr	r3, [pc, #220]	; (80022d0 <HAL_RCC_OscConfig+0x628>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	4a3a      	ldr	r2, [pc, #232]	; (80022e0 <HAL_RCC_OscConfig+0x638>)
 80021f8:	4013      	ands	r3, r2
 80021fa:	0019      	movs	r1, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002204:	431a      	orrs	r2, r3
 8002206:	4b32      	ldr	r3, [pc, #200]	; (80022d0 <HAL_RCC_OscConfig+0x628>)
 8002208:	430a      	orrs	r2, r1
 800220a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800220c:	4b30      	ldr	r3, [pc, #192]	; (80022d0 <HAL_RCC_OscConfig+0x628>)
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	4b2f      	ldr	r3, [pc, #188]	; (80022d0 <HAL_RCC_OscConfig+0x628>)
 8002212:	2180      	movs	r1, #128	; 0x80
 8002214:	0449      	lsls	r1, r1, #17
 8002216:	430a      	orrs	r2, r1
 8002218:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800221a:	f7fe fc53 	bl	8000ac4 <HAL_GetTick>
 800221e:	0003      	movs	r3, r0
 8002220:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002222:	e008      	b.n	8002236 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002224:	f7fe fc4e 	bl	8000ac4 <HAL_GetTick>
 8002228:	0002      	movs	r2, r0
 800222a:	69bb      	ldr	r3, [r7, #24]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	2b02      	cmp	r3, #2
 8002230:	d901      	bls.n	8002236 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e047      	b.n	80022c6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002236:	4b26      	ldr	r3, [pc, #152]	; (80022d0 <HAL_RCC_OscConfig+0x628>)
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	2380      	movs	r3, #128	; 0x80
 800223c:	049b      	lsls	r3, r3, #18
 800223e:	4013      	ands	r3, r2
 8002240:	d0f0      	beq.n	8002224 <HAL_RCC_OscConfig+0x57c>
 8002242:	e03f      	b.n	80022c4 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002244:	4b22      	ldr	r3, [pc, #136]	; (80022d0 <HAL_RCC_OscConfig+0x628>)
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	4b21      	ldr	r3, [pc, #132]	; (80022d0 <HAL_RCC_OscConfig+0x628>)
 800224a:	4924      	ldr	r1, [pc, #144]	; (80022dc <HAL_RCC_OscConfig+0x634>)
 800224c:	400a      	ands	r2, r1
 800224e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002250:	f7fe fc38 	bl	8000ac4 <HAL_GetTick>
 8002254:	0003      	movs	r3, r0
 8002256:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002258:	e008      	b.n	800226c <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800225a:	f7fe fc33 	bl	8000ac4 <HAL_GetTick>
 800225e:	0002      	movs	r2, r0
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	2b02      	cmp	r3, #2
 8002266:	d901      	bls.n	800226c <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8002268:	2303      	movs	r3, #3
 800226a:	e02c      	b.n	80022c6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800226c:	4b18      	ldr	r3, [pc, #96]	; (80022d0 <HAL_RCC_OscConfig+0x628>)
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	2380      	movs	r3, #128	; 0x80
 8002272:	049b      	lsls	r3, r3, #18
 8002274:	4013      	ands	r3, r2
 8002276:	d1f0      	bne.n	800225a <HAL_RCC_OscConfig+0x5b2>
 8002278:	e024      	b.n	80022c4 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6a1b      	ldr	r3, [r3, #32]
 800227e:	2b01      	cmp	r3, #1
 8002280:	d101      	bne.n	8002286 <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e01f      	b.n	80022c6 <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002286:	4b12      	ldr	r3, [pc, #72]	; (80022d0 <HAL_RCC_OscConfig+0x628>)
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800228c:	4b10      	ldr	r3, [pc, #64]	; (80022d0 <HAL_RCC_OscConfig+0x628>)
 800228e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002290:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002292:	697a      	ldr	r2, [r7, #20]
 8002294:	23c0      	movs	r3, #192	; 0xc0
 8002296:	025b      	lsls	r3, r3, #9
 8002298:	401a      	ands	r2, r3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229e:	429a      	cmp	r2, r3
 80022a0:	d10e      	bne.n	80022c0 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	220f      	movs	r2, #15
 80022a6:	401a      	ands	r2, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d107      	bne.n	80022c0 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80022b0:	697a      	ldr	r2, [r7, #20]
 80022b2:	23f0      	movs	r3, #240	; 0xf0
 80022b4:	039b      	lsls	r3, r3, #14
 80022b6:	401a      	ands	r2, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80022bc:	429a      	cmp	r2, r3
 80022be:	d001      	beq.n	80022c4 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e000      	b.n	80022c6 <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	0018      	movs	r0, r3
 80022c8:	46bd      	mov	sp, r7
 80022ca:	b008      	add	sp, #32
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	46c0      	nop			; (mov r8, r8)
 80022d0:	40021000 	.word	0x40021000
 80022d4:	00001388 	.word	0x00001388
 80022d8:	efffffff 	.word	0xefffffff
 80022dc:	feffffff 	.word	0xfeffffff
 80022e0:	ffc27fff 	.word	0xffc27fff

080022e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d101      	bne.n	80022f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e0b3      	b.n	8002460 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022f8:	4b5b      	ldr	r3, [pc, #364]	; (8002468 <HAL_RCC_ClockConfig+0x184>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2201      	movs	r2, #1
 80022fe:	4013      	ands	r3, r2
 8002300:	683a      	ldr	r2, [r7, #0]
 8002302:	429a      	cmp	r2, r3
 8002304:	d911      	bls.n	800232a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002306:	4b58      	ldr	r3, [pc, #352]	; (8002468 <HAL_RCC_ClockConfig+0x184>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	2201      	movs	r2, #1
 800230c:	4393      	bics	r3, r2
 800230e:	0019      	movs	r1, r3
 8002310:	4b55      	ldr	r3, [pc, #340]	; (8002468 <HAL_RCC_ClockConfig+0x184>)
 8002312:	683a      	ldr	r2, [r7, #0]
 8002314:	430a      	orrs	r2, r1
 8002316:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002318:	4b53      	ldr	r3, [pc, #332]	; (8002468 <HAL_RCC_ClockConfig+0x184>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2201      	movs	r2, #1
 800231e:	4013      	ands	r3, r2
 8002320:	683a      	ldr	r2, [r7, #0]
 8002322:	429a      	cmp	r2, r3
 8002324:	d001      	beq.n	800232a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e09a      	b.n	8002460 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2202      	movs	r2, #2
 8002330:	4013      	ands	r3, r2
 8002332:	d015      	beq.n	8002360 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2204      	movs	r2, #4
 800233a:	4013      	ands	r3, r2
 800233c:	d006      	beq.n	800234c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800233e:	4b4b      	ldr	r3, [pc, #300]	; (800246c <HAL_RCC_ClockConfig+0x188>)
 8002340:	685a      	ldr	r2, [r3, #4]
 8002342:	4b4a      	ldr	r3, [pc, #296]	; (800246c <HAL_RCC_ClockConfig+0x188>)
 8002344:	21e0      	movs	r1, #224	; 0xe0
 8002346:	00c9      	lsls	r1, r1, #3
 8002348:	430a      	orrs	r2, r1
 800234a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800234c:	4b47      	ldr	r3, [pc, #284]	; (800246c <HAL_RCC_ClockConfig+0x188>)
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	22f0      	movs	r2, #240	; 0xf0
 8002352:	4393      	bics	r3, r2
 8002354:	0019      	movs	r1, r3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	689a      	ldr	r2, [r3, #8]
 800235a:	4b44      	ldr	r3, [pc, #272]	; (800246c <HAL_RCC_ClockConfig+0x188>)
 800235c:	430a      	orrs	r2, r1
 800235e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2201      	movs	r2, #1
 8002366:	4013      	ands	r3, r2
 8002368:	d040      	beq.n	80023ec <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	2b01      	cmp	r3, #1
 8002370:	d107      	bne.n	8002382 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002372:	4b3e      	ldr	r3, [pc, #248]	; (800246c <HAL_RCC_ClockConfig+0x188>)
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	2380      	movs	r3, #128	; 0x80
 8002378:	029b      	lsls	r3, r3, #10
 800237a:	4013      	ands	r3, r2
 800237c:	d114      	bne.n	80023a8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e06e      	b.n	8002460 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	2b02      	cmp	r3, #2
 8002388:	d107      	bne.n	800239a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800238a:	4b38      	ldr	r3, [pc, #224]	; (800246c <HAL_RCC_ClockConfig+0x188>)
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	2380      	movs	r3, #128	; 0x80
 8002390:	049b      	lsls	r3, r3, #18
 8002392:	4013      	ands	r3, r2
 8002394:	d108      	bne.n	80023a8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e062      	b.n	8002460 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800239a:	4b34      	ldr	r3, [pc, #208]	; (800246c <HAL_RCC_ClockConfig+0x188>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	2202      	movs	r2, #2
 80023a0:	4013      	ands	r3, r2
 80023a2:	d101      	bne.n	80023a8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e05b      	b.n	8002460 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023a8:	4b30      	ldr	r3, [pc, #192]	; (800246c <HAL_RCC_ClockConfig+0x188>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	2203      	movs	r2, #3
 80023ae:	4393      	bics	r3, r2
 80023b0:	0019      	movs	r1, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685a      	ldr	r2, [r3, #4]
 80023b6:	4b2d      	ldr	r3, [pc, #180]	; (800246c <HAL_RCC_ClockConfig+0x188>)
 80023b8:	430a      	orrs	r2, r1
 80023ba:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023bc:	f7fe fb82 	bl	8000ac4 <HAL_GetTick>
 80023c0:	0003      	movs	r3, r0
 80023c2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023c4:	e009      	b.n	80023da <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023c6:	f7fe fb7d 	bl	8000ac4 <HAL_GetTick>
 80023ca:	0002      	movs	r2, r0
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	4a27      	ldr	r2, [pc, #156]	; (8002470 <HAL_RCC_ClockConfig+0x18c>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d901      	bls.n	80023da <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e042      	b.n	8002460 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023da:	4b24      	ldr	r3, [pc, #144]	; (800246c <HAL_RCC_ClockConfig+0x188>)
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	220c      	movs	r2, #12
 80023e0:	401a      	ands	r2, r3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d1ec      	bne.n	80023c6 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023ec:	4b1e      	ldr	r3, [pc, #120]	; (8002468 <HAL_RCC_ClockConfig+0x184>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2201      	movs	r2, #1
 80023f2:	4013      	ands	r3, r2
 80023f4:	683a      	ldr	r2, [r7, #0]
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d211      	bcs.n	800241e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023fa:	4b1b      	ldr	r3, [pc, #108]	; (8002468 <HAL_RCC_ClockConfig+0x184>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2201      	movs	r2, #1
 8002400:	4393      	bics	r3, r2
 8002402:	0019      	movs	r1, r3
 8002404:	4b18      	ldr	r3, [pc, #96]	; (8002468 <HAL_RCC_ClockConfig+0x184>)
 8002406:	683a      	ldr	r2, [r7, #0]
 8002408:	430a      	orrs	r2, r1
 800240a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800240c:	4b16      	ldr	r3, [pc, #88]	; (8002468 <HAL_RCC_ClockConfig+0x184>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2201      	movs	r2, #1
 8002412:	4013      	ands	r3, r2
 8002414:	683a      	ldr	r2, [r7, #0]
 8002416:	429a      	cmp	r2, r3
 8002418:	d001      	beq.n	800241e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e020      	b.n	8002460 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	2204      	movs	r2, #4
 8002424:	4013      	ands	r3, r2
 8002426:	d009      	beq.n	800243c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002428:	4b10      	ldr	r3, [pc, #64]	; (800246c <HAL_RCC_ClockConfig+0x188>)
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	4a11      	ldr	r2, [pc, #68]	; (8002474 <HAL_RCC_ClockConfig+0x190>)
 800242e:	4013      	ands	r3, r2
 8002430:	0019      	movs	r1, r3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	68da      	ldr	r2, [r3, #12]
 8002436:	4b0d      	ldr	r3, [pc, #52]	; (800246c <HAL_RCC_ClockConfig+0x188>)
 8002438:	430a      	orrs	r2, r1
 800243a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800243c:	f000 f820 	bl	8002480 <HAL_RCC_GetSysClockFreq>
 8002440:	0001      	movs	r1, r0
 8002442:	4b0a      	ldr	r3, [pc, #40]	; (800246c <HAL_RCC_ClockConfig+0x188>)
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	091b      	lsrs	r3, r3, #4
 8002448:	220f      	movs	r2, #15
 800244a:	4013      	ands	r3, r2
 800244c:	4a0a      	ldr	r2, [pc, #40]	; (8002478 <HAL_RCC_ClockConfig+0x194>)
 800244e:	5cd3      	ldrb	r3, [r2, r3]
 8002450:	000a      	movs	r2, r1
 8002452:	40da      	lsrs	r2, r3
 8002454:	4b09      	ldr	r3, [pc, #36]	; (800247c <HAL_RCC_ClockConfig+0x198>)
 8002456:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002458:	2003      	movs	r0, #3
 800245a:	f7fe faed 	bl	8000a38 <HAL_InitTick>
  
  return HAL_OK;
 800245e:	2300      	movs	r3, #0
}
 8002460:	0018      	movs	r0, r3
 8002462:	46bd      	mov	sp, r7
 8002464:	b004      	add	sp, #16
 8002466:	bd80      	pop	{r7, pc}
 8002468:	40022000 	.word	0x40022000
 800246c:	40021000 	.word	0x40021000
 8002470:	00001388 	.word	0x00001388
 8002474:	fffff8ff 	.word	0xfffff8ff
 8002478:	08003a64 	.word	0x08003a64
 800247c:	20000000 	.word	0x20000000

08002480 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002480:	b590      	push	{r4, r7, lr}
 8002482:	b08f      	sub	sp, #60	; 0x3c
 8002484:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002486:	2314      	movs	r3, #20
 8002488:	18fb      	adds	r3, r7, r3
 800248a:	4a2c      	ldr	r2, [pc, #176]	; (800253c <HAL_RCC_GetSysClockFreq+0xbc>)
 800248c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800248e:	c313      	stmia	r3!, {r0, r1, r4}
 8002490:	6812      	ldr	r2, [r2, #0]
 8002492:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002494:	1d3b      	adds	r3, r7, #4
 8002496:	4a2a      	ldr	r2, [pc, #168]	; (8002540 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002498:	ca13      	ldmia	r2!, {r0, r1, r4}
 800249a:	c313      	stmia	r3!, {r0, r1, r4}
 800249c:	6812      	ldr	r2, [r2, #0]
 800249e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024a0:	2300      	movs	r3, #0
 80024a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024a4:	2300      	movs	r3, #0
 80024a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80024a8:	2300      	movs	r3, #0
 80024aa:	637b      	str	r3, [r7, #52]	; 0x34
 80024ac:	2300      	movs	r3, #0
 80024ae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80024b0:	2300      	movs	r3, #0
 80024b2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80024b4:	4b23      	ldr	r3, [pc, #140]	; (8002544 <HAL_RCC_GetSysClockFreq+0xc4>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024bc:	220c      	movs	r2, #12
 80024be:	4013      	ands	r3, r2
 80024c0:	2b04      	cmp	r3, #4
 80024c2:	d002      	beq.n	80024ca <HAL_RCC_GetSysClockFreq+0x4a>
 80024c4:	2b08      	cmp	r3, #8
 80024c6:	d003      	beq.n	80024d0 <HAL_RCC_GetSysClockFreq+0x50>
 80024c8:	e02f      	b.n	800252a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024ca:	4b1f      	ldr	r3, [pc, #124]	; (8002548 <HAL_RCC_GetSysClockFreq+0xc8>)
 80024cc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80024ce:	e02f      	b.n	8002530 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80024d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024d2:	0c9b      	lsrs	r3, r3, #18
 80024d4:	220f      	movs	r2, #15
 80024d6:	4013      	ands	r3, r2
 80024d8:	2214      	movs	r2, #20
 80024da:	18ba      	adds	r2, r7, r2
 80024dc:	5cd3      	ldrb	r3, [r2, r3]
 80024de:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80024e0:	4b18      	ldr	r3, [pc, #96]	; (8002544 <HAL_RCC_GetSysClockFreq+0xc4>)
 80024e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e4:	220f      	movs	r2, #15
 80024e6:	4013      	ands	r3, r2
 80024e8:	1d3a      	adds	r2, r7, #4
 80024ea:	5cd3      	ldrb	r3, [r2, r3]
 80024ec:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80024ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024f0:	23c0      	movs	r3, #192	; 0xc0
 80024f2:	025b      	lsls	r3, r3, #9
 80024f4:	401a      	ands	r2, r3
 80024f6:	2380      	movs	r3, #128	; 0x80
 80024f8:	025b      	lsls	r3, r3, #9
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d109      	bne.n	8002512 <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80024fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002500:	4811      	ldr	r0, [pc, #68]	; (8002548 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002502:	f7fd fe01 	bl	8000108 <__udivsi3>
 8002506:	0003      	movs	r3, r0
 8002508:	001a      	movs	r2, r3
 800250a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250c:	4353      	muls	r3, r2
 800250e:	637b      	str	r3, [r7, #52]	; 0x34
 8002510:	e008      	b.n	8002524 <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002512:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002514:	480c      	ldr	r0, [pc, #48]	; (8002548 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002516:	f7fd fdf7 	bl	8000108 <__udivsi3>
 800251a:	0003      	movs	r3, r0
 800251c:	001a      	movs	r2, r3
 800251e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002520:	4353      	muls	r3, r2
 8002522:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002526:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002528:	e002      	b.n	8002530 <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800252a:	4b07      	ldr	r3, [pc, #28]	; (8002548 <HAL_RCC_GetSysClockFreq+0xc8>)
 800252c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800252e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002532:	0018      	movs	r0, r3
 8002534:	46bd      	mov	sp, r7
 8002536:	b00f      	add	sp, #60	; 0x3c
 8002538:	bd90      	pop	{r4, r7, pc}
 800253a:	46c0      	nop			; (mov r8, r8)
 800253c:	08003a44 	.word	0x08003a44
 8002540:	08003a54 	.word	0x08003a54
 8002544:	40021000 	.word	0x40021000
 8002548:	007a1200 	.word	0x007a1200

0800254c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b086      	sub	sp, #24
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002554:	2300      	movs	r3, #0
 8002556:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002558:	2300      	movs	r3, #0
 800255a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	2380      	movs	r3, #128	; 0x80
 8002562:	025b      	lsls	r3, r3, #9
 8002564:	4013      	ands	r3, r2
 8002566:	d100      	bne.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002568:	e08e      	b.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800256a:	2017      	movs	r0, #23
 800256c:	183b      	adds	r3, r7, r0
 800256e:	2200      	movs	r2, #0
 8002570:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002572:	4b5f      	ldr	r3, [pc, #380]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002574:	69da      	ldr	r2, [r3, #28]
 8002576:	2380      	movs	r3, #128	; 0x80
 8002578:	055b      	lsls	r3, r3, #21
 800257a:	4013      	ands	r3, r2
 800257c:	d110      	bne.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800257e:	4b5c      	ldr	r3, [pc, #368]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002580:	69da      	ldr	r2, [r3, #28]
 8002582:	4b5b      	ldr	r3, [pc, #364]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002584:	2180      	movs	r1, #128	; 0x80
 8002586:	0549      	lsls	r1, r1, #21
 8002588:	430a      	orrs	r2, r1
 800258a:	61da      	str	r2, [r3, #28]
 800258c:	4b58      	ldr	r3, [pc, #352]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800258e:	69da      	ldr	r2, [r3, #28]
 8002590:	2380      	movs	r3, #128	; 0x80
 8002592:	055b      	lsls	r3, r3, #21
 8002594:	4013      	ands	r3, r2
 8002596:	60bb      	str	r3, [r7, #8]
 8002598:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800259a:	183b      	adds	r3, r7, r0
 800259c:	2201      	movs	r2, #1
 800259e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025a0:	4b54      	ldr	r3, [pc, #336]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	2380      	movs	r3, #128	; 0x80
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	4013      	ands	r3, r2
 80025aa:	d11a      	bne.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025ac:	4b51      	ldr	r3, [pc, #324]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	4b50      	ldr	r3, [pc, #320]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80025b2:	2180      	movs	r1, #128	; 0x80
 80025b4:	0049      	lsls	r1, r1, #1
 80025b6:	430a      	orrs	r2, r1
 80025b8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025ba:	f7fe fa83 	bl	8000ac4 <HAL_GetTick>
 80025be:	0003      	movs	r3, r0
 80025c0:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025c2:	e008      	b.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025c4:	f7fe fa7e 	bl	8000ac4 <HAL_GetTick>
 80025c8:	0002      	movs	r2, r0
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	2b64      	cmp	r3, #100	; 0x64
 80025d0:	d901      	bls.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e087      	b.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025d6:	4b47      	ldr	r3, [pc, #284]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	2380      	movs	r3, #128	; 0x80
 80025dc:	005b      	lsls	r3, r3, #1
 80025de:	4013      	ands	r3, r2
 80025e0:	d0f0      	beq.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80025e2:	4b43      	ldr	r3, [pc, #268]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80025e4:	6a1a      	ldr	r2, [r3, #32]
 80025e6:	23c0      	movs	r3, #192	; 0xc0
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	4013      	ands	r3, r2
 80025ec:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d034      	beq.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x112>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	685a      	ldr	r2, [r3, #4]
 80025f8:	23c0      	movs	r3, #192	; 0xc0
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	4013      	ands	r3, r2
 80025fe:	68fa      	ldr	r2, [r7, #12]
 8002600:	429a      	cmp	r2, r3
 8002602:	d02c      	beq.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002604:	4b3a      	ldr	r3, [pc, #232]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002606:	6a1b      	ldr	r3, [r3, #32]
 8002608:	4a3b      	ldr	r2, [pc, #236]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800260a:	4013      	ands	r3, r2
 800260c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800260e:	4b38      	ldr	r3, [pc, #224]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002610:	6a1a      	ldr	r2, [r3, #32]
 8002612:	4b37      	ldr	r3, [pc, #220]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002614:	2180      	movs	r1, #128	; 0x80
 8002616:	0249      	lsls	r1, r1, #9
 8002618:	430a      	orrs	r2, r1
 800261a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800261c:	4b34      	ldr	r3, [pc, #208]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800261e:	6a1a      	ldr	r2, [r3, #32]
 8002620:	4b33      	ldr	r3, [pc, #204]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002622:	4936      	ldr	r1, [pc, #216]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002624:	400a      	ands	r2, r1
 8002626:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002628:	4b31      	ldr	r3, [pc, #196]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800262a:	68fa      	ldr	r2, [r7, #12]
 800262c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2201      	movs	r2, #1
 8002632:	4013      	ands	r3, r2
 8002634:	d013      	beq.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002636:	f7fe fa45 	bl	8000ac4 <HAL_GetTick>
 800263a:	0003      	movs	r3, r0
 800263c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800263e:	e009      	b.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002640:	f7fe fa40 	bl	8000ac4 <HAL_GetTick>
 8002644:	0002      	movs	r2, r0
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	4a2d      	ldr	r2, [pc, #180]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d901      	bls.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002650:	2303      	movs	r3, #3
 8002652:	e048      	b.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002654:	4b26      	ldr	r3, [pc, #152]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002656:	6a1b      	ldr	r3, [r3, #32]
 8002658:	2202      	movs	r2, #2
 800265a:	4013      	ands	r3, r2
 800265c:	d0f0      	beq.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800265e:	4b24      	ldr	r3, [pc, #144]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002660:	6a1b      	ldr	r3, [r3, #32]
 8002662:	4a25      	ldr	r2, [pc, #148]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002664:	4013      	ands	r3, r2
 8002666:	0019      	movs	r1, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685a      	ldr	r2, [r3, #4]
 800266c:	4b20      	ldr	r3, [pc, #128]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800266e:	430a      	orrs	r2, r1
 8002670:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002672:	2317      	movs	r3, #23
 8002674:	18fb      	adds	r3, r7, r3
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	2b01      	cmp	r3, #1
 800267a:	d105      	bne.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800267c:	4b1c      	ldr	r3, [pc, #112]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800267e:	69da      	ldr	r2, [r3, #28]
 8002680:	4b1b      	ldr	r3, [pc, #108]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002682:	4920      	ldr	r1, [pc, #128]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002684:	400a      	ands	r2, r1
 8002686:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2201      	movs	r2, #1
 800268e:	4013      	ands	r3, r2
 8002690:	d009      	beq.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002692:	4b17      	ldr	r3, [pc, #92]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002696:	2203      	movs	r2, #3
 8002698:	4393      	bics	r3, r2
 800269a:	0019      	movs	r1, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	689a      	ldr	r2, [r3, #8]
 80026a0:	4b13      	ldr	r3, [pc, #76]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80026a2:	430a      	orrs	r2, r1
 80026a4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	2220      	movs	r2, #32
 80026ac:	4013      	ands	r3, r2
 80026ae:	d009      	beq.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026b0:	4b0f      	ldr	r3, [pc, #60]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80026b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b4:	2210      	movs	r2, #16
 80026b6:	4393      	bics	r3, r2
 80026b8:	0019      	movs	r1, r3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	68da      	ldr	r2, [r3, #12]
 80026be:	4b0c      	ldr	r3, [pc, #48]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80026c0:	430a      	orrs	r2, r1
 80026c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	2380      	movs	r3, #128	; 0x80
 80026ca:	029b      	lsls	r3, r3, #10
 80026cc:	4013      	ands	r3, r2
 80026ce:	d009      	beq.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80026d0:	4b07      	ldr	r3, [pc, #28]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80026d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d4:	2280      	movs	r2, #128	; 0x80
 80026d6:	4393      	bics	r3, r2
 80026d8:	0019      	movs	r1, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	691a      	ldr	r2, [r3, #16]
 80026de:	4b04      	ldr	r3, [pc, #16]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80026e0:	430a      	orrs	r2, r1
 80026e2:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	0018      	movs	r0, r3
 80026e8:	46bd      	mov	sp, r7
 80026ea:	b006      	add	sp, #24
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	46c0      	nop			; (mov r8, r8)
 80026f0:	40021000 	.word	0x40021000
 80026f4:	40007000 	.word	0x40007000
 80026f8:	fffffcff 	.word	0xfffffcff
 80026fc:	fffeffff 	.word	0xfffeffff
 8002700:	00001388 	.word	0x00001388
 8002704:	efffffff 	.word	0xefffffff

08002708 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d101      	bne.n	800271a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e042      	b.n	80027a0 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	223d      	movs	r2, #61	; 0x3d
 800271e:	5c9b      	ldrb	r3, [r3, r2]
 8002720:	b2db      	uxtb	r3, r3
 8002722:	2b00      	cmp	r3, #0
 8002724:	d107      	bne.n	8002736 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	223c      	movs	r2, #60	; 0x3c
 800272a:	2100      	movs	r1, #0
 800272c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	0018      	movs	r0, r3
 8002732:	f7fe f8c7 	bl	80008c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	223d      	movs	r2, #61	; 0x3d
 800273a:	2102      	movs	r1, #2
 800273c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	3304      	adds	r3, #4
 8002746:	0019      	movs	r1, r3
 8002748:	0010      	movs	r0, r2
 800274a:	f000 fad1 	bl	8002cf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2246      	movs	r2, #70	; 0x46
 8002752:	2101      	movs	r1, #1
 8002754:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	223e      	movs	r2, #62	; 0x3e
 800275a:	2101      	movs	r1, #1
 800275c:	5499      	strb	r1, [r3, r2]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	223f      	movs	r2, #63	; 0x3f
 8002762:	2101      	movs	r1, #1
 8002764:	5499      	strb	r1, [r3, r2]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2240      	movs	r2, #64	; 0x40
 800276a:	2101      	movs	r1, #1
 800276c:	5499      	strb	r1, [r3, r2]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2241      	movs	r2, #65	; 0x41
 8002772:	2101      	movs	r1, #1
 8002774:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2242      	movs	r2, #66	; 0x42
 800277a:	2101      	movs	r1, #1
 800277c:	5499      	strb	r1, [r3, r2]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2243      	movs	r2, #67	; 0x43
 8002782:	2101      	movs	r1, #1
 8002784:	5499      	strb	r1, [r3, r2]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2244      	movs	r2, #68	; 0x44
 800278a:	2101      	movs	r1, #1
 800278c:	5499      	strb	r1, [r3, r2]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2245      	movs	r2, #69	; 0x45
 8002792:	2101      	movs	r1, #1
 8002794:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	223d      	movs	r2, #61	; 0x3d
 800279a:	2101      	movs	r1, #1
 800279c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800279e:	2300      	movs	r3, #0
}
 80027a0:	0018      	movs	r0, r3
 80027a2:	46bd      	mov	sp, r7
 80027a4:	b002      	add	sp, #8
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d101      	bne.n	80027ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e042      	b.n	8002840 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	223d      	movs	r2, #61	; 0x3d
 80027be:	5c9b      	ldrb	r3, [r3, r2]
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d107      	bne.n	80027d6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	223c      	movs	r2, #60	; 0x3c
 80027ca:	2100      	movs	r1, #0
 80027cc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	0018      	movs	r0, r3
 80027d2:	f000 f839 	bl	8002848 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	223d      	movs	r2, #61	; 0x3d
 80027da:	2102      	movs	r1, #2
 80027dc:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	3304      	adds	r3, #4
 80027e6:	0019      	movs	r1, r3
 80027e8:	0010      	movs	r0, r2
 80027ea:	f000 fa81 	bl	8002cf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2246      	movs	r2, #70	; 0x46
 80027f2:	2101      	movs	r1, #1
 80027f4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	223e      	movs	r2, #62	; 0x3e
 80027fa:	2101      	movs	r1, #1
 80027fc:	5499      	strb	r1, [r3, r2]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	223f      	movs	r2, #63	; 0x3f
 8002802:	2101      	movs	r1, #1
 8002804:	5499      	strb	r1, [r3, r2]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2240      	movs	r2, #64	; 0x40
 800280a:	2101      	movs	r1, #1
 800280c:	5499      	strb	r1, [r3, r2]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2241      	movs	r2, #65	; 0x41
 8002812:	2101      	movs	r1, #1
 8002814:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2242      	movs	r2, #66	; 0x42
 800281a:	2101      	movs	r1, #1
 800281c:	5499      	strb	r1, [r3, r2]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2243      	movs	r2, #67	; 0x43
 8002822:	2101      	movs	r1, #1
 8002824:	5499      	strb	r1, [r3, r2]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2244      	movs	r2, #68	; 0x44
 800282a:	2101      	movs	r1, #1
 800282c:	5499      	strb	r1, [r3, r2]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2245      	movs	r2, #69	; 0x45
 8002832:	2101      	movs	r1, #1
 8002834:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	223d      	movs	r2, #61	; 0x3d
 800283a:	2101      	movs	r1, #1
 800283c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800283e:	2300      	movs	r3, #0
}
 8002840:	0018      	movs	r0, r3
 8002842:	46bd      	mov	sp, r7
 8002844:	b002      	add	sp, #8
 8002846:	bd80      	pop	{r7, pc}

08002848 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002850:	46c0      	nop			; (mov r8, r8)
 8002852:	46bd      	mov	sp, r7
 8002854:	b002      	add	sp, #8
 8002856:	bd80      	pop	{r7, pc}

08002858 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d108      	bne.n	800287a <HAL_TIM_PWM_Start+0x22>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	223e      	movs	r2, #62	; 0x3e
 800286c:	5c9b      	ldrb	r3, [r3, r2]
 800286e:	b2db      	uxtb	r3, r3
 8002870:	3b01      	subs	r3, #1
 8002872:	1e5a      	subs	r2, r3, #1
 8002874:	4193      	sbcs	r3, r2
 8002876:	b2db      	uxtb	r3, r3
 8002878:	e01f      	b.n	80028ba <HAL_TIM_PWM_Start+0x62>
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	2b04      	cmp	r3, #4
 800287e:	d108      	bne.n	8002892 <HAL_TIM_PWM_Start+0x3a>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	223f      	movs	r2, #63	; 0x3f
 8002884:	5c9b      	ldrb	r3, [r3, r2]
 8002886:	b2db      	uxtb	r3, r3
 8002888:	3b01      	subs	r3, #1
 800288a:	1e5a      	subs	r2, r3, #1
 800288c:	4193      	sbcs	r3, r2
 800288e:	b2db      	uxtb	r3, r3
 8002890:	e013      	b.n	80028ba <HAL_TIM_PWM_Start+0x62>
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	2b08      	cmp	r3, #8
 8002896:	d108      	bne.n	80028aa <HAL_TIM_PWM_Start+0x52>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2240      	movs	r2, #64	; 0x40
 800289c:	5c9b      	ldrb	r3, [r3, r2]
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	3b01      	subs	r3, #1
 80028a2:	1e5a      	subs	r2, r3, #1
 80028a4:	4193      	sbcs	r3, r2
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	e007      	b.n	80028ba <HAL_TIM_PWM_Start+0x62>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2241      	movs	r2, #65	; 0x41
 80028ae:	5c9b      	ldrb	r3, [r3, r2]
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	3b01      	subs	r3, #1
 80028b4:	1e5a      	subs	r2, r3, #1
 80028b6:	4193      	sbcs	r3, r2
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d001      	beq.n	80028c2 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e06e      	b.n	80029a0 <HAL_TIM_PWM_Start+0x148>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d104      	bne.n	80028d2 <HAL_TIM_PWM_Start+0x7a>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	223e      	movs	r2, #62	; 0x3e
 80028cc:	2102      	movs	r1, #2
 80028ce:	5499      	strb	r1, [r3, r2]
 80028d0:	e013      	b.n	80028fa <HAL_TIM_PWM_Start+0xa2>
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	2b04      	cmp	r3, #4
 80028d6:	d104      	bne.n	80028e2 <HAL_TIM_PWM_Start+0x8a>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	223f      	movs	r2, #63	; 0x3f
 80028dc:	2102      	movs	r1, #2
 80028de:	5499      	strb	r1, [r3, r2]
 80028e0:	e00b      	b.n	80028fa <HAL_TIM_PWM_Start+0xa2>
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	2b08      	cmp	r3, #8
 80028e6:	d104      	bne.n	80028f2 <HAL_TIM_PWM_Start+0x9a>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2240      	movs	r2, #64	; 0x40
 80028ec:	2102      	movs	r1, #2
 80028ee:	5499      	strb	r1, [r3, r2]
 80028f0:	e003      	b.n	80028fa <HAL_TIM_PWM_Start+0xa2>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2241      	movs	r2, #65	; 0x41
 80028f6:	2102      	movs	r1, #2
 80028f8:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	6839      	ldr	r1, [r7, #0]
 8002900:	2201      	movs	r2, #1
 8002902:	0018      	movs	r0, r3
 8002904:	f000 fd00 	bl	8003308 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a26      	ldr	r2, [pc, #152]	; (80029a8 <HAL_TIM_PWM_Start+0x150>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d00e      	beq.n	8002930 <HAL_TIM_PWM_Start+0xd8>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a25      	ldr	r2, [pc, #148]	; (80029ac <HAL_TIM_PWM_Start+0x154>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d009      	beq.n	8002930 <HAL_TIM_PWM_Start+0xd8>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a23      	ldr	r2, [pc, #140]	; (80029b0 <HAL_TIM_PWM_Start+0x158>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d004      	beq.n	8002930 <HAL_TIM_PWM_Start+0xd8>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a22      	ldr	r2, [pc, #136]	; (80029b4 <HAL_TIM_PWM_Start+0x15c>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d101      	bne.n	8002934 <HAL_TIM_PWM_Start+0xdc>
 8002930:	2301      	movs	r3, #1
 8002932:	e000      	b.n	8002936 <HAL_TIM_PWM_Start+0xde>
 8002934:	2300      	movs	r3, #0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d008      	beq.n	800294c <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2180      	movs	r1, #128	; 0x80
 8002946:	0209      	lsls	r1, r1, #8
 8002948:	430a      	orrs	r2, r1
 800294a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a15      	ldr	r2, [pc, #84]	; (80029a8 <HAL_TIM_PWM_Start+0x150>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d009      	beq.n	800296a <HAL_TIM_PWM_Start+0x112>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a17      	ldr	r2, [pc, #92]	; (80029b8 <HAL_TIM_PWM_Start+0x160>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d004      	beq.n	800296a <HAL_TIM_PWM_Start+0x112>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a11      	ldr	r2, [pc, #68]	; (80029ac <HAL_TIM_PWM_Start+0x154>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d111      	bne.n	800298e <HAL_TIM_PWM_Start+0x136>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	2207      	movs	r2, #7
 8002972:	4013      	ands	r3, r2
 8002974:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2b06      	cmp	r3, #6
 800297a:	d010      	beq.n	800299e <HAL_TIM_PWM_Start+0x146>
    {
      __HAL_TIM_ENABLE(htim);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2101      	movs	r1, #1
 8002988:	430a      	orrs	r2, r1
 800298a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800298c:	e007      	b.n	800299e <HAL_TIM_PWM_Start+0x146>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2101      	movs	r1, #1
 800299a:	430a      	orrs	r2, r1
 800299c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800299e:	2300      	movs	r3, #0
}
 80029a0:	0018      	movs	r0, r3
 80029a2:	46bd      	mov	sp, r7
 80029a4:	b004      	add	sp, #16
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	40012c00 	.word	0x40012c00
 80029ac:	40014000 	.word	0x40014000
 80029b0:	40014400 	.word	0x40014400
 80029b4:	40014800 	.word	0x40014800
 80029b8:	40000400 	.word	0x40000400

080029bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b086      	sub	sp, #24
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	60b9      	str	r1, [r7, #8]
 80029c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029c8:	2317      	movs	r3, #23
 80029ca:	18fb      	adds	r3, r7, r3
 80029cc:	2200      	movs	r2, #0
 80029ce:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	223c      	movs	r2, #60	; 0x3c
 80029d4:	5c9b      	ldrb	r3, [r3, r2]
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d101      	bne.n	80029de <HAL_TIM_PWM_ConfigChannel+0x22>
 80029da:	2302      	movs	r3, #2
 80029dc:	e0ad      	b.n	8002b3a <HAL_TIM_PWM_ConfigChannel+0x17e>
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	223c      	movs	r2, #60	; 0x3c
 80029e2:	2101      	movs	r1, #1
 80029e4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2b0c      	cmp	r3, #12
 80029ea:	d100      	bne.n	80029ee <HAL_TIM_PWM_ConfigChannel+0x32>
 80029ec:	e076      	b.n	8002adc <HAL_TIM_PWM_ConfigChannel+0x120>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2b0c      	cmp	r3, #12
 80029f2:	d900      	bls.n	80029f6 <HAL_TIM_PWM_ConfigChannel+0x3a>
 80029f4:	e095      	b.n	8002b22 <HAL_TIM_PWM_ConfigChannel+0x166>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2b08      	cmp	r3, #8
 80029fa:	d04e      	beq.n	8002a9a <HAL_TIM_PWM_ConfigChannel+0xde>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2b08      	cmp	r3, #8
 8002a00:	d900      	bls.n	8002a04 <HAL_TIM_PWM_ConfigChannel+0x48>
 8002a02:	e08e      	b.n	8002b22 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d003      	beq.n	8002a12 <HAL_TIM_PWM_ConfigChannel+0x56>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2b04      	cmp	r3, #4
 8002a0e:	d021      	beq.n	8002a54 <HAL_TIM_PWM_ConfigChannel+0x98>
 8002a10:	e087      	b.n	8002b22 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	68ba      	ldr	r2, [r7, #8]
 8002a18:	0011      	movs	r1, r2
 8002a1a:	0018      	movs	r0, r3
 8002a1c:	f000 f9de 	bl	8002ddc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	699a      	ldr	r2, [r3, #24]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2108      	movs	r1, #8
 8002a2c:	430a      	orrs	r2, r1
 8002a2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	699a      	ldr	r2, [r3, #24]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	2104      	movs	r1, #4
 8002a3c:	438a      	bics	r2, r1
 8002a3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	6999      	ldr	r1, [r3, #24]
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	691a      	ldr	r2, [r3, #16]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	619a      	str	r2, [r3, #24]
      break;
 8002a52:	e06b      	b.n	8002b2c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	68ba      	ldr	r2, [r7, #8]
 8002a5a:	0011      	movs	r1, r2
 8002a5c:	0018      	movs	r0, r3
 8002a5e:	f000 fa45 	bl	8002eec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	699a      	ldr	r2, [r3, #24]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2180      	movs	r1, #128	; 0x80
 8002a6e:	0109      	lsls	r1, r1, #4
 8002a70:	430a      	orrs	r2, r1
 8002a72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	699a      	ldr	r2, [r3, #24]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4931      	ldr	r1, [pc, #196]	; (8002b44 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002a80:	400a      	ands	r2, r1
 8002a82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	6999      	ldr	r1, [r3, #24]
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	691b      	ldr	r3, [r3, #16]
 8002a8e:	021a      	lsls	r2, r3, #8
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	430a      	orrs	r2, r1
 8002a96:	619a      	str	r2, [r3, #24]
      break;
 8002a98:	e048      	b.n	8002b2c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	68ba      	ldr	r2, [r7, #8]
 8002aa0:	0011      	movs	r1, r2
 8002aa2:	0018      	movs	r0, r3
 8002aa4:	f000 faa6 	bl	8002ff4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	69da      	ldr	r2, [r3, #28]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2108      	movs	r1, #8
 8002ab4:	430a      	orrs	r2, r1
 8002ab6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	69da      	ldr	r2, [r3, #28]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	2104      	movs	r1, #4
 8002ac4:	438a      	bics	r2, r1
 8002ac6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	69d9      	ldr	r1, [r3, #28]
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	691a      	ldr	r2, [r3, #16]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	430a      	orrs	r2, r1
 8002ad8:	61da      	str	r2, [r3, #28]
      break;
 8002ada:	e027      	b.n	8002b2c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	68ba      	ldr	r2, [r7, #8]
 8002ae2:	0011      	movs	r1, r2
 8002ae4:	0018      	movs	r0, r3
 8002ae6:	f000 fb0b 	bl	8003100 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	69da      	ldr	r2, [r3, #28]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2180      	movs	r1, #128	; 0x80
 8002af6:	0109      	lsls	r1, r1, #4
 8002af8:	430a      	orrs	r2, r1
 8002afa:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	69da      	ldr	r2, [r3, #28]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	490f      	ldr	r1, [pc, #60]	; (8002b44 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002b08:	400a      	ands	r2, r1
 8002b0a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	69d9      	ldr	r1, [r3, #28]
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	021a      	lsls	r2, r3, #8
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	430a      	orrs	r2, r1
 8002b1e:	61da      	str	r2, [r3, #28]
      break;
 8002b20:	e004      	b.n	8002b2c <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8002b22:	2317      	movs	r3, #23
 8002b24:	18fb      	adds	r3, r7, r3
 8002b26:	2201      	movs	r2, #1
 8002b28:	701a      	strb	r2, [r3, #0]
      break;
 8002b2a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	223c      	movs	r2, #60	; 0x3c
 8002b30:	2100      	movs	r1, #0
 8002b32:	5499      	strb	r1, [r3, r2]

  return status;
 8002b34:	2317      	movs	r3, #23
 8002b36:	18fb      	adds	r3, r7, r3
 8002b38:	781b      	ldrb	r3, [r3, #0]
}
 8002b3a:	0018      	movs	r0, r3
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	b006      	add	sp, #24
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	46c0      	nop			; (mov r8, r8)
 8002b44:	fffffbff 	.word	0xfffffbff

08002b48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b52:	230f      	movs	r3, #15
 8002b54:	18fb      	adds	r3, r7, r3
 8002b56:	2200      	movs	r2, #0
 8002b58:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	223c      	movs	r2, #60	; 0x3c
 8002b5e:	5c9b      	ldrb	r3, [r3, r2]
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d101      	bne.n	8002b68 <HAL_TIM_ConfigClockSource+0x20>
 8002b64:	2302      	movs	r3, #2
 8002b66:	e0bc      	b.n	8002ce2 <HAL_TIM_ConfigClockSource+0x19a>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	223c      	movs	r2, #60	; 0x3c
 8002b6c:	2101      	movs	r1, #1
 8002b6e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	223d      	movs	r2, #61	; 0x3d
 8002b74:	2102      	movs	r1, #2
 8002b76:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	2277      	movs	r2, #119	; 0x77
 8002b84:	4393      	bics	r3, r2
 8002b86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	4a58      	ldr	r2, [pc, #352]	; (8002cec <HAL_TIM_ConfigClockSource+0x1a4>)
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	68ba      	ldr	r2, [r7, #8]
 8002b96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2280      	movs	r2, #128	; 0x80
 8002b9e:	0192      	lsls	r2, r2, #6
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d040      	beq.n	8002c26 <HAL_TIM_ConfigClockSource+0xde>
 8002ba4:	2280      	movs	r2, #128	; 0x80
 8002ba6:	0192      	lsls	r2, r2, #6
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d900      	bls.n	8002bae <HAL_TIM_ConfigClockSource+0x66>
 8002bac:	e088      	b.n	8002cc0 <HAL_TIM_ConfigClockSource+0x178>
 8002bae:	2280      	movs	r2, #128	; 0x80
 8002bb0:	0152      	lsls	r2, r2, #5
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d100      	bne.n	8002bb8 <HAL_TIM_ConfigClockSource+0x70>
 8002bb6:	e088      	b.n	8002cca <HAL_TIM_ConfigClockSource+0x182>
 8002bb8:	2280      	movs	r2, #128	; 0x80
 8002bba:	0152      	lsls	r2, r2, #5
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d900      	bls.n	8002bc2 <HAL_TIM_ConfigClockSource+0x7a>
 8002bc0:	e07e      	b.n	8002cc0 <HAL_TIM_ConfigClockSource+0x178>
 8002bc2:	2b70      	cmp	r3, #112	; 0x70
 8002bc4:	d018      	beq.n	8002bf8 <HAL_TIM_ConfigClockSource+0xb0>
 8002bc6:	d900      	bls.n	8002bca <HAL_TIM_ConfigClockSource+0x82>
 8002bc8:	e07a      	b.n	8002cc0 <HAL_TIM_ConfigClockSource+0x178>
 8002bca:	2b60      	cmp	r3, #96	; 0x60
 8002bcc:	d04f      	beq.n	8002c6e <HAL_TIM_ConfigClockSource+0x126>
 8002bce:	d900      	bls.n	8002bd2 <HAL_TIM_ConfigClockSource+0x8a>
 8002bd0:	e076      	b.n	8002cc0 <HAL_TIM_ConfigClockSource+0x178>
 8002bd2:	2b50      	cmp	r3, #80	; 0x50
 8002bd4:	d03b      	beq.n	8002c4e <HAL_TIM_ConfigClockSource+0x106>
 8002bd6:	d900      	bls.n	8002bda <HAL_TIM_ConfigClockSource+0x92>
 8002bd8:	e072      	b.n	8002cc0 <HAL_TIM_ConfigClockSource+0x178>
 8002bda:	2b40      	cmp	r3, #64	; 0x40
 8002bdc:	d057      	beq.n	8002c8e <HAL_TIM_ConfigClockSource+0x146>
 8002bde:	d900      	bls.n	8002be2 <HAL_TIM_ConfigClockSource+0x9a>
 8002be0:	e06e      	b.n	8002cc0 <HAL_TIM_ConfigClockSource+0x178>
 8002be2:	2b30      	cmp	r3, #48	; 0x30
 8002be4:	d063      	beq.n	8002cae <HAL_TIM_ConfigClockSource+0x166>
 8002be6:	d86b      	bhi.n	8002cc0 <HAL_TIM_ConfigClockSource+0x178>
 8002be8:	2b20      	cmp	r3, #32
 8002bea:	d060      	beq.n	8002cae <HAL_TIM_ConfigClockSource+0x166>
 8002bec:	d868      	bhi.n	8002cc0 <HAL_TIM_ConfigClockSource+0x178>
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d05d      	beq.n	8002cae <HAL_TIM_ConfigClockSource+0x166>
 8002bf2:	2b10      	cmp	r3, #16
 8002bf4:	d05b      	beq.n	8002cae <HAL_TIM_ConfigClockSource+0x166>
 8002bf6:	e063      	b.n	8002cc0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6818      	ldr	r0, [r3, #0]
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	6899      	ldr	r1, [r3, #8]
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	685a      	ldr	r2, [r3, #4]
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	f000 fb5e 	bl	80032c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	2277      	movs	r2, #119	; 0x77
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	68ba      	ldr	r2, [r7, #8]
 8002c22:	609a      	str	r2, [r3, #8]
      break;
 8002c24:	e052      	b.n	8002ccc <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6818      	ldr	r0, [r3, #0]
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	6899      	ldr	r1, [r3, #8]
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	685a      	ldr	r2, [r3, #4]
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	f000 fb47 	bl	80032c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	689a      	ldr	r2, [r3, #8]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2180      	movs	r1, #128	; 0x80
 8002c46:	01c9      	lsls	r1, r1, #7
 8002c48:	430a      	orrs	r2, r1
 8002c4a:	609a      	str	r2, [r3, #8]
      break;
 8002c4c:	e03e      	b.n	8002ccc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6818      	ldr	r0, [r3, #0]
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	6859      	ldr	r1, [r3, #4]
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	001a      	movs	r2, r3
 8002c5c:	f000 faba 	bl	80031d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2150      	movs	r1, #80	; 0x50
 8002c66:	0018      	movs	r0, r3
 8002c68:	f000 fb14 	bl	8003294 <TIM_ITRx_SetConfig>
      break;
 8002c6c:	e02e      	b.n	8002ccc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6818      	ldr	r0, [r3, #0]
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	6859      	ldr	r1, [r3, #4]
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	001a      	movs	r2, r3
 8002c7c:	f000 fad8 	bl	8003230 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2160      	movs	r1, #96	; 0x60
 8002c86:	0018      	movs	r0, r3
 8002c88:	f000 fb04 	bl	8003294 <TIM_ITRx_SetConfig>
      break;
 8002c8c:	e01e      	b.n	8002ccc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6818      	ldr	r0, [r3, #0]
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	6859      	ldr	r1, [r3, #4]
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	001a      	movs	r2, r3
 8002c9c:	f000 fa9a 	bl	80031d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2140      	movs	r1, #64	; 0x40
 8002ca6:	0018      	movs	r0, r3
 8002ca8:	f000 faf4 	bl	8003294 <TIM_ITRx_SetConfig>
      break;
 8002cac:	e00e      	b.n	8002ccc <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	0019      	movs	r1, r3
 8002cb8:	0010      	movs	r0, r2
 8002cba:	f000 faeb 	bl	8003294 <TIM_ITRx_SetConfig>
      break;
 8002cbe:	e005      	b.n	8002ccc <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002cc0:	230f      	movs	r3, #15
 8002cc2:	18fb      	adds	r3, r7, r3
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	701a      	strb	r2, [r3, #0]
      break;
 8002cc8:	e000      	b.n	8002ccc <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002cca:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	223d      	movs	r2, #61	; 0x3d
 8002cd0:	2101      	movs	r1, #1
 8002cd2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	223c      	movs	r2, #60	; 0x3c
 8002cd8:	2100      	movs	r1, #0
 8002cda:	5499      	strb	r1, [r3, r2]

  return status;
 8002cdc:	230f      	movs	r3, #15
 8002cde:	18fb      	adds	r3, r7, r3
 8002ce0:	781b      	ldrb	r3, [r3, #0]
}
 8002ce2:	0018      	movs	r0, r3
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	b004      	add	sp, #16
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	46c0      	nop			; (mov r8, r8)
 8002cec:	ffff00ff 	.word	0xffff00ff

08002cf0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	4a2f      	ldr	r2, [pc, #188]	; (8002dc0 <TIM_Base_SetConfig+0xd0>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d003      	beq.n	8002d10 <TIM_Base_SetConfig+0x20>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	4a2e      	ldr	r2, [pc, #184]	; (8002dc4 <TIM_Base_SetConfig+0xd4>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d108      	bne.n	8002d22 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2270      	movs	r2, #112	; 0x70
 8002d14:	4393      	bics	r3, r2
 8002d16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	68fa      	ldr	r2, [r7, #12]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a26      	ldr	r2, [pc, #152]	; (8002dc0 <TIM_Base_SetConfig+0xd0>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d013      	beq.n	8002d52 <TIM_Base_SetConfig+0x62>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a25      	ldr	r2, [pc, #148]	; (8002dc4 <TIM_Base_SetConfig+0xd4>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d00f      	beq.n	8002d52 <TIM_Base_SetConfig+0x62>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4a24      	ldr	r2, [pc, #144]	; (8002dc8 <TIM_Base_SetConfig+0xd8>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d00b      	beq.n	8002d52 <TIM_Base_SetConfig+0x62>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a23      	ldr	r2, [pc, #140]	; (8002dcc <TIM_Base_SetConfig+0xdc>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d007      	beq.n	8002d52 <TIM_Base_SetConfig+0x62>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a22      	ldr	r2, [pc, #136]	; (8002dd0 <TIM_Base_SetConfig+0xe0>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d003      	beq.n	8002d52 <TIM_Base_SetConfig+0x62>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a21      	ldr	r2, [pc, #132]	; (8002dd4 <TIM_Base_SetConfig+0xe4>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d108      	bne.n	8002d64 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	4a20      	ldr	r2, [pc, #128]	; (8002dd8 <TIM_Base_SetConfig+0xe8>)
 8002d56:	4013      	ands	r3, r2
 8002d58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	68fa      	ldr	r2, [r7, #12]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2280      	movs	r2, #128	; 0x80
 8002d68:	4393      	bics	r3, r2
 8002d6a:	001a      	movs	r2, r3
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	695b      	ldr	r3, [r3, #20]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	68fa      	ldr	r2, [r7, #12]
 8002d78:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	689a      	ldr	r2, [r3, #8]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a0c      	ldr	r2, [pc, #48]	; (8002dc0 <TIM_Base_SetConfig+0xd0>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d00b      	beq.n	8002daa <TIM_Base_SetConfig+0xba>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a0d      	ldr	r2, [pc, #52]	; (8002dcc <TIM_Base_SetConfig+0xdc>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d007      	beq.n	8002daa <TIM_Base_SetConfig+0xba>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a0c      	ldr	r2, [pc, #48]	; (8002dd0 <TIM_Base_SetConfig+0xe0>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d003      	beq.n	8002daa <TIM_Base_SetConfig+0xba>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a0b      	ldr	r2, [pc, #44]	; (8002dd4 <TIM_Base_SetConfig+0xe4>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d103      	bne.n	8002db2 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	691a      	ldr	r2, [r3, #16]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2201      	movs	r2, #1
 8002db6:	615a      	str	r2, [r3, #20]
}
 8002db8:	46c0      	nop			; (mov r8, r8)
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	b004      	add	sp, #16
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	40012c00 	.word	0x40012c00
 8002dc4:	40000400 	.word	0x40000400
 8002dc8:	40002000 	.word	0x40002000
 8002dcc:	40014000 	.word	0x40014000
 8002dd0:	40014400 	.word	0x40014400
 8002dd4:	40014800 	.word	0x40014800
 8002dd8:	fffffcff 	.word	0xfffffcff

08002ddc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b086      	sub	sp, #24
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6a1b      	ldr	r3, [r3, #32]
 8002dea:	2201      	movs	r2, #1
 8002dec:	4393      	bics	r3, r2
 8002dee:	001a      	movs	r2, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a1b      	ldr	r3, [r3, #32]
 8002df8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	699b      	ldr	r3, [r3, #24]
 8002e04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2270      	movs	r2, #112	; 0x70
 8002e0a:	4393      	bics	r3, r2
 8002e0c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2203      	movs	r2, #3
 8002e12:	4393      	bics	r3, r2
 8002e14:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	68fa      	ldr	r2, [r7, #12]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	2202      	movs	r2, #2
 8002e24:	4393      	bics	r3, r2
 8002e26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	697a      	ldr	r2, [r7, #20]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a27      	ldr	r2, [pc, #156]	; (8002ed4 <TIM_OC1_SetConfig+0xf8>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d00b      	beq.n	8002e52 <TIM_OC1_SetConfig+0x76>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a26      	ldr	r2, [pc, #152]	; (8002ed8 <TIM_OC1_SetConfig+0xfc>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d007      	beq.n	8002e52 <TIM_OC1_SetConfig+0x76>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a25      	ldr	r2, [pc, #148]	; (8002edc <TIM_OC1_SetConfig+0x100>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d003      	beq.n	8002e52 <TIM_OC1_SetConfig+0x76>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a24      	ldr	r2, [pc, #144]	; (8002ee0 <TIM_OC1_SetConfig+0x104>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d10c      	bne.n	8002e6c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	2208      	movs	r2, #8
 8002e56:	4393      	bics	r3, r2
 8002e58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	697a      	ldr	r2, [r7, #20]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	2204      	movs	r2, #4
 8002e68:	4393      	bics	r3, r2
 8002e6a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	4a19      	ldr	r2, [pc, #100]	; (8002ed4 <TIM_OC1_SetConfig+0xf8>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d00b      	beq.n	8002e8c <TIM_OC1_SetConfig+0xb0>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	4a18      	ldr	r2, [pc, #96]	; (8002ed8 <TIM_OC1_SetConfig+0xfc>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d007      	beq.n	8002e8c <TIM_OC1_SetConfig+0xb0>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	4a17      	ldr	r2, [pc, #92]	; (8002edc <TIM_OC1_SetConfig+0x100>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d003      	beq.n	8002e8c <TIM_OC1_SetConfig+0xb0>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	4a16      	ldr	r2, [pc, #88]	; (8002ee0 <TIM_OC1_SetConfig+0x104>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d111      	bne.n	8002eb0 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	4a15      	ldr	r2, [pc, #84]	; (8002ee4 <TIM_OC1_SetConfig+0x108>)
 8002e90:	4013      	ands	r3, r2
 8002e92:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	4a14      	ldr	r2, [pc, #80]	; (8002ee8 <TIM_OC1_SetConfig+0x10c>)
 8002e98:	4013      	ands	r3, r2
 8002e9a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	695b      	ldr	r3, [r3, #20]
 8002ea0:	693a      	ldr	r2, [r7, #16]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	699b      	ldr	r3, [r3, #24]
 8002eaa:	693a      	ldr	r2, [r7, #16]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	693a      	ldr	r2, [r7, #16]
 8002eb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	68fa      	ldr	r2, [r7, #12]
 8002eba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	685a      	ldr	r2, [r3, #4]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	697a      	ldr	r2, [r7, #20]
 8002ec8:	621a      	str	r2, [r3, #32]
}
 8002eca:	46c0      	nop			; (mov r8, r8)
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	b006      	add	sp, #24
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	46c0      	nop			; (mov r8, r8)
 8002ed4:	40012c00 	.word	0x40012c00
 8002ed8:	40014000 	.word	0x40014000
 8002edc:	40014400 	.word	0x40014400
 8002ee0:	40014800 	.word	0x40014800
 8002ee4:	fffffeff 	.word	0xfffffeff
 8002ee8:	fffffdff 	.word	0xfffffdff

08002eec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b086      	sub	sp, #24
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a1b      	ldr	r3, [r3, #32]
 8002efa:	2210      	movs	r2, #16
 8002efc:	4393      	bics	r3, r2
 8002efe:	001a      	movs	r2, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6a1b      	ldr	r3, [r3, #32]
 8002f08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	699b      	ldr	r3, [r3, #24]
 8002f14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	4a2e      	ldr	r2, [pc, #184]	; (8002fd4 <TIM_OC2_SetConfig+0xe8>)
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	4a2d      	ldr	r2, [pc, #180]	; (8002fd8 <TIM_OC2_SetConfig+0xec>)
 8002f22:	4013      	ands	r3, r2
 8002f24:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	021b      	lsls	r3, r3, #8
 8002f2c:	68fa      	ldr	r2, [r7, #12]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	2220      	movs	r2, #32
 8002f36:	4393      	bics	r3, r2
 8002f38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	011b      	lsls	r3, r3, #4
 8002f40:	697a      	ldr	r2, [r7, #20]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a24      	ldr	r2, [pc, #144]	; (8002fdc <TIM_OC2_SetConfig+0xf0>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d10d      	bne.n	8002f6a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	2280      	movs	r2, #128	; 0x80
 8002f52:	4393      	bics	r3, r2
 8002f54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	011b      	lsls	r3, r3, #4
 8002f5c:	697a      	ldr	r2, [r7, #20]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	2240      	movs	r2, #64	; 0x40
 8002f66:	4393      	bics	r3, r2
 8002f68:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4a1b      	ldr	r2, [pc, #108]	; (8002fdc <TIM_OC2_SetConfig+0xf0>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d00b      	beq.n	8002f8a <TIM_OC2_SetConfig+0x9e>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a1a      	ldr	r2, [pc, #104]	; (8002fe0 <TIM_OC2_SetConfig+0xf4>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d007      	beq.n	8002f8a <TIM_OC2_SetConfig+0x9e>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a19      	ldr	r2, [pc, #100]	; (8002fe4 <TIM_OC2_SetConfig+0xf8>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d003      	beq.n	8002f8a <TIM_OC2_SetConfig+0x9e>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4a18      	ldr	r2, [pc, #96]	; (8002fe8 <TIM_OC2_SetConfig+0xfc>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d113      	bne.n	8002fb2 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	4a17      	ldr	r2, [pc, #92]	; (8002fec <TIM_OC2_SetConfig+0x100>)
 8002f8e:	4013      	ands	r3, r2
 8002f90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	4a16      	ldr	r2, [pc, #88]	; (8002ff0 <TIM_OC2_SetConfig+0x104>)
 8002f96:	4013      	ands	r3, r2
 8002f98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	695b      	ldr	r3, [r3, #20]
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	693a      	ldr	r2, [r7, #16]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	699b      	ldr	r3, [r3, #24]
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	693a      	ldr	r2, [r7, #16]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	693a      	ldr	r2, [r7, #16]
 8002fb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	68fa      	ldr	r2, [r7, #12]
 8002fbc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	685a      	ldr	r2, [r3, #4]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	697a      	ldr	r2, [r7, #20]
 8002fca:	621a      	str	r2, [r3, #32]
}
 8002fcc:	46c0      	nop			; (mov r8, r8)
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	b006      	add	sp, #24
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	ffff8fff 	.word	0xffff8fff
 8002fd8:	fffffcff 	.word	0xfffffcff
 8002fdc:	40012c00 	.word	0x40012c00
 8002fe0:	40014000 	.word	0x40014000
 8002fe4:	40014400 	.word	0x40014400
 8002fe8:	40014800 	.word	0x40014800
 8002fec:	fffffbff 	.word	0xfffffbff
 8002ff0:	fffff7ff 	.word	0xfffff7ff

08002ff4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b086      	sub	sp, #24
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a1b      	ldr	r3, [r3, #32]
 8003002:	4a35      	ldr	r2, [pc, #212]	; (80030d8 <TIM_OC3_SetConfig+0xe4>)
 8003004:	401a      	ands	r2, r3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a1b      	ldr	r3, [r3, #32]
 800300e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	69db      	ldr	r3, [r3, #28]
 800301a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2270      	movs	r2, #112	; 0x70
 8003020:	4393      	bics	r3, r2
 8003022:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2203      	movs	r2, #3
 8003028:	4393      	bics	r3, r2
 800302a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	68fa      	ldr	r2, [r7, #12]
 8003032:	4313      	orrs	r3, r2
 8003034:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	4a28      	ldr	r2, [pc, #160]	; (80030dc <TIM_OC3_SetConfig+0xe8>)
 800303a:	4013      	ands	r3, r2
 800303c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	021b      	lsls	r3, r3, #8
 8003044:	697a      	ldr	r2, [r7, #20]
 8003046:	4313      	orrs	r3, r2
 8003048:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4a24      	ldr	r2, [pc, #144]	; (80030e0 <TIM_OC3_SetConfig+0xec>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d10d      	bne.n	800306e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	4a23      	ldr	r2, [pc, #140]	; (80030e4 <TIM_OC3_SetConfig+0xf0>)
 8003056:	4013      	ands	r3, r2
 8003058:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	021b      	lsls	r3, r3, #8
 8003060:	697a      	ldr	r2, [r7, #20]
 8003062:	4313      	orrs	r3, r2
 8003064:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	4a1f      	ldr	r2, [pc, #124]	; (80030e8 <TIM_OC3_SetConfig+0xf4>)
 800306a:	4013      	ands	r3, r2
 800306c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a1b      	ldr	r2, [pc, #108]	; (80030e0 <TIM_OC3_SetConfig+0xec>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d00b      	beq.n	800308e <TIM_OC3_SetConfig+0x9a>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4a1c      	ldr	r2, [pc, #112]	; (80030ec <TIM_OC3_SetConfig+0xf8>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d007      	beq.n	800308e <TIM_OC3_SetConfig+0x9a>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a1b      	ldr	r2, [pc, #108]	; (80030f0 <TIM_OC3_SetConfig+0xfc>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d003      	beq.n	800308e <TIM_OC3_SetConfig+0x9a>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a1a      	ldr	r2, [pc, #104]	; (80030f4 <TIM_OC3_SetConfig+0x100>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d113      	bne.n	80030b6 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	4a19      	ldr	r2, [pc, #100]	; (80030f8 <TIM_OC3_SetConfig+0x104>)
 8003092:	4013      	ands	r3, r2
 8003094:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	4a18      	ldr	r2, [pc, #96]	; (80030fc <TIM_OC3_SetConfig+0x108>)
 800309a:	4013      	ands	r3, r2
 800309c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	695b      	ldr	r3, [r3, #20]
 80030a2:	011b      	lsls	r3, r3, #4
 80030a4:	693a      	ldr	r2, [r7, #16]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	699b      	ldr	r3, [r3, #24]
 80030ae:	011b      	lsls	r3, r3, #4
 80030b0:	693a      	ldr	r2, [r7, #16]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	693a      	ldr	r2, [r7, #16]
 80030ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	68fa      	ldr	r2, [r7, #12]
 80030c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	685a      	ldr	r2, [r3, #4]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	697a      	ldr	r2, [r7, #20]
 80030ce:	621a      	str	r2, [r3, #32]
}
 80030d0:	46c0      	nop			; (mov r8, r8)
 80030d2:	46bd      	mov	sp, r7
 80030d4:	b006      	add	sp, #24
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	fffffeff 	.word	0xfffffeff
 80030dc:	fffffdff 	.word	0xfffffdff
 80030e0:	40012c00 	.word	0x40012c00
 80030e4:	fffff7ff 	.word	0xfffff7ff
 80030e8:	fffffbff 	.word	0xfffffbff
 80030ec:	40014000 	.word	0x40014000
 80030f0:	40014400 	.word	0x40014400
 80030f4:	40014800 	.word	0x40014800
 80030f8:	ffffefff 	.word	0xffffefff
 80030fc:	ffffdfff 	.word	0xffffdfff

08003100 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b086      	sub	sp, #24
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a1b      	ldr	r3, [r3, #32]
 800310e:	4a28      	ldr	r2, [pc, #160]	; (80031b0 <TIM_OC4_SetConfig+0xb0>)
 8003110:	401a      	ands	r2, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a1b      	ldr	r3, [r3, #32]
 800311a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	69db      	ldr	r3, [r3, #28]
 8003126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	4a22      	ldr	r2, [pc, #136]	; (80031b4 <TIM_OC4_SetConfig+0xb4>)
 800312c:	4013      	ands	r3, r2
 800312e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	4a21      	ldr	r2, [pc, #132]	; (80031b8 <TIM_OC4_SetConfig+0xb8>)
 8003134:	4013      	ands	r3, r2
 8003136:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	021b      	lsls	r3, r3, #8
 800313e:	68fa      	ldr	r2, [r7, #12]
 8003140:	4313      	orrs	r3, r2
 8003142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	4a1d      	ldr	r2, [pc, #116]	; (80031bc <TIM_OC4_SetConfig+0xbc>)
 8003148:	4013      	ands	r3, r2
 800314a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	031b      	lsls	r3, r3, #12
 8003152:	693a      	ldr	r2, [r7, #16]
 8003154:	4313      	orrs	r3, r2
 8003156:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4a19      	ldr	r2, [pc, #100]	; (80031c0 <TIM_OC4_SetConfig+0xc0>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d00b      	beq.n	8003178 <TIM_OC4_SetConfig+0x78>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	4a18      	ldr	r2, [pc, #96]	; (80031c4 <TIM_OC4_SetConfig+0xc4>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d007      	beq.n	8003178 <TIM_OC4_SetConfig+0x78>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	4a17      	ldr	r2, [pc, #92]	; (80031c8 <TIM_OC4_SetConfig+0xc8>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d003      	beq.n	8003178 <TIM_OC4_SetConfig+0x78>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	4a16      	ldr	r2, [pc, #88]	; (80031cc <TIM_OC4_SetConfig+0xcc>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d109      	bne.n	800318c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	4a15      	ldr	r2, [pc, #84]	; (80031d0 <TIM_OC4_SetConfig+0xd0>)
 800317c:	4013      	ands	r3, r2
 800317e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	695b      	ldr	r3, [r3, #20]
 8003184:	019b      	lsls	r3, r3, #6
 8003186:	697a      	ldr	r2, [r7, #20]
 8003188:	4313      	orrs	r3, r2
 800318a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	697a      	ldr	r2, [r7, #20]
 8003190:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	68fa      	ldr	r2, [r7, #12]
 8003196:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	685a      	ldr	r2, [r3, #4]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	693a      	ldr	r2, [r7, #16]
 80031a4:	621a      	str	r2, [r3, #32]
}
 80031a6:	46c0      	nop			; (mov r8, r8)
 80031a8:	46bd      	mov	sp, r7
 80031aa:	b006      	add	sp, #24
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	46c0      	nop			; (mov r8, r8)
 80031b0:	ffffefff 	.word	0xffffefff
 80031b4:	ffff8fff 	.word	0xffff8fff
 80031b8:	fffffcff 	.word	0xfffffcff
 80031bc:	ffffdfff 	.word	0xffffdfff
 80031c0:	40012c00 	.word	0x40012c00
 80031c4:	40014000 	.word	0x40014000
 80031c8:	40014400 	.word	0x40014400
 80031cc:	40014800 	.word	0x40014800
 80031d0:	ffffbfff 	.word	0xffffbfff

080031d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b086      	sub	sp, #24
 80031d8:	af00      	add	r7, sp, #0
 80031da:	60f8      	str	r0, [r7, #12]
 80031dc:	60b9      	str	r1, [r7, #8]
 80031de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6a1b      	ldr	r3, [r3, #32]
 80031e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	6a1b      	ldr	r3, [r3, #32]
 80031ea:	2201      	movs	r2, #1
 80031ec:	4393      	bics	r3, r2
 80031ee:	001a      	movs	r2, r3
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	699b      	ldr	r3, [r3, #24]
 80031f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	22f0      	movs	r2, #240	; 0xf0
 80031fe:	4393      	bics	r3, r2
 8003200:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	011b      	lsls	r3, r3, #4
 8003206:	693a      	ldr	r2, [r7, #16]
 8003208:	4313      	orrs	r3, r2
 800320a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	220a      	movs	r2, #10
 8003210:	4393      	bics	r3, r2
 8003212:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003214:	697a      	ldr	r2, [r7, #20]
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	4313      	orrs	r3, r2
 800321a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	693a      	ldr	r2, [r7, #16]
 8003220:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	697a      	ldr	r2, [r7, #20]
 8003226:	621a      	str	r2, [r3, #32]
}
 8003228:	46c0      	nop			; (mov r8, r8)
 800322a:	46bd      	mov	sp, r7
 800322c:	b006      	add	sp, #24
 800322e:	bd80      	pop	{r7, pc}

08003230 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b086      	sub	sp, #24
 8003234:	af00      	add	r7, sp, #0
 8003236:	60f8      	str	r0, [r7, #12]
 8003238:	60b9      	str	r1, [r7, #8]
 800323a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6a1b      	ldr	r3, [r3, #32]
 8003240:	2210      	movs	r2, #16
 8003242:	4393      	bics	r3, r2
 8003244:	001a      	movs	r2, r3
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	699b      	ldr	r3, [r3, #24]
 800324e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6a1b      	ldr	r3, [r3, #32]
 8003254:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	4a0d      	ldr	r2, [pc, #52]	; (8003290 <TIM_TI2_ConfigInputStage+0x60>)
 800325a:	4013      	ands	r3, r2
 800325c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	031b      	lsls	r3, r3, #12
 8003262:	697a      	ldr	r2, [r7, #20]
 8003264:	4313      	orrs	r3, r2
 8003266:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	22a0      	movs	r2, #160	; 0xa0
 800326c:	4393      	bics	r3, r2
 800326e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	011b      	lsls	r3, r3, #4
 8003274:	693a      	ldr	r2, [r7, #16]
 8003276:	4313      	orrs	r3, r2
 8003278:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	697a      	ldr	r2, [r7, #20]
 800327e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	693a      	ldr	r2, [r7, #16]
 8003284:	621a      	str	r2, [r3, #32]
}
 8003286:	46c0      	nop			; (mov r8, r8)
 8003288:	46bd      	mov	sp, r7
 800328a:	b006      	add	sp, #24
 800328c:	bd80      	pop	{r7, pc}
 800328e:	46c0      	nop			; (mov r8, r8)
 8003290:	ffff0fff 	.word	0xffff0fff

08003294 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2270      	movs	r2, #112	; 0x70
 80032a8:	4393      	bics	r3, r2
 80032aa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80032ac:	683a      	ldr	r2, [r7, #0]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	2207      	movs	r2, #7
 80032b4:	4313      	orrs	r3, r2
 80032b6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	68fa      	ldr	r2, [r7, #12]
 80032bc:	609a      	str	r2, [r3, #8]
}
 80032be:	46c0      	nop			; (mov r8, r8)
 80032c0:	46bd      	mov	sp, r7
 80032c2:	b004      	add	sp, #16
 80032c4:	bd80      	pop	{r7, pc}
	...

080032c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b086      	sub	sp, #24
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	60f8      	str	r0, [r7, #12]
 80032d0:	60b9      	str	r1, [r7, #8]
 80032d2:	607a      	str	r2, [r7, #4]
 80032d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	4a09      	ldr	r2, [pc, #36]	; (8003304 <TIM_ETR_SetConfig+0x3c>)
 80032e0:	4013      	ands	r3, r2
 80032e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	021a      	lsls	r2, r3, #8
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	431a      	orrs	r2, r3
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	697a      	ldr	r2, [r7, #20]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	697a      	ldr	r2, [r7, #20]
 80032fa:	609a      	str	r2, [r3, #8]
}
 80032fc:	46c0      	nop			; (mov r8, r8)
 80032fe:	46bd      	mov	sp, r7
 8003300:	b006      	add	sp, #24
 8003302:	bd80      	pop	{r7, pc}
 8003304:	ffff00ff 	.word	0xffff00ff

08003308 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b086      	sub	sp, #24
 800330c:	af00      	add	r7, sp, #0
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	221f      	movs	r2, #31
 8003318:	4013      	ands	r3, r2
 800331a:	2201      	movs	r2, #1
 800331c:	409a      	lsls	r2, r3
 800331e:	0013      	movs	r3, r2
 8003320:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6a1b      	ldr	r3, [r3, #32]
 8003326:	697a      	ldr	r2, [r7, #20]
 8003328:	43d2      	mvns	r2, r2
 800332a:	401a      	ands	r2, r3
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6a1a      	ldr	r2, [r3, #32]
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	211f      	movs	r1, #31
 8003338:	400b      	ands	r3, r1
 800333a:	6879      	ldr	r1, [r7, #4]
 800333c:	4099      	lsls	r1, r3
 800333e:	000b      	movs	r3, r1
 8003340:	431a      	orrs	r2, r3
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	621a      	str	r2, [r3, #32]
}
 8003346:	46c0      	nop			; (mov r8, r8)
 8003348:	46bd      	mov	sp, r7
 800334a:	b006      	add	sp, #24
 800334c:	bd80      	pop	{r7, pc}
	...

08003350 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b084      	sub	sp, #16
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	223c      	movs	r2, #60	; 0x3c
 800335e:	5c9b      	ldrb	r3, [r3, r2]
 8003360:	2b01      	cmp	r3, #1
 8003362:	d101      	bne.n	8003368 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003364:	2302      	movs	r3, #2
 8003366:	e041      	b.n	80033ec <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	223c      	movs	r2, #60	; 0x3c
 800336c:	2101      	movs	r1, #1
 800336e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	223d      	movs	r2, #61	; 0x3d
 8003374:	2102      	movs	r1, #2
 8003376:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2270      	movs	r2, #112	; 0x70
 800338c:	4393      	bics	r3, r2
 800338e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	68fa      	ldr	r2, [r7, #12]
 8003396:	4313      	orrs	r3, r2
 8003398:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	68fa      	ldr	r2, [r7, #12]
 80033a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a13      	ldr	r2, [pc, #76]	; (80033f4 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d009      	beq.n	80033c0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a11      	ldr	r2, [pc, #68]	; (80033f8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d004      	beq.n	80033c0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a10      	ldr	r2, [pc, #64]	; (80033fc <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d10c      	bne.n	80033da <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	2280      	movs	r2, #128	; 0x80
 80033c4:	4393      	bics	r3, r2
 80033c6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	68ba      	ldr	r2, [r7, #8]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	68ba      	ldr	r2, [r7, #8]
 80033d8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	223d      	movs	r2, #61	; 0x3d
 80033de:	2101      	movs	r1, #1
 80033e0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	223c      	movs	r2, #60	; 0x3c
 80033e6:	2100      	movs	r1, #0
 80033e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80033ea:	2300      	movs	r3, #0
}
 80033ec:	0018      	movs	r0, r3
 80033ee:	46bd      	mov	sp, r7
 80033f0:	b004      	add	sp, #16
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	40012c00 	.word	0x40012c00
 80033f8:	40000400 	.word	0x40000400
 80033fc:	40014000 	.word	0x40014000

08003400 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800340a:	2300      	movs	r3, #0
 800340c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	223c      	movs	r2, #60	; 0x3c
 8003412:	5c9b      	ldrb	r3, [r3, r2]
 8003414:	2b01      	cmp	r3, #1
 8003416:	d101      	bne.n	800341c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003418:	2302      	movs	r3, #2
 800341a:	e03e      	b.n	800349a <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	223c      	movs	r2, #60	; 0x3c
 8003420:	2101      	movs	r1, #1
 8003422:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	22ff      	movs	r2, #255	; 0xff
 8003428:	4393      	bics	r3, r2
 800342a:	001a      	movs	r2, r3
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	4313      	orrs	r3, r2
 8003432:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	4a1b      	ldr	r2, [pc, #108]	; (80034a4 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8003438:	401a      	ands	r2, r3
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	4313      	orrs	r3, r2
 8003440:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	4a18      	ldr	r2, [pc, #96]	; (80034a8 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8003446:	401a      	ands	r2, r3
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	4313      	orrs	r3, r2
 800344e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	4a16      	ldr	r2, [pc, #88]	; (80034ac <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8003454:	401a      	ands	r2, r3
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4313      	orrs	r3, r2
 800345c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	4a13      	ldr	r2, [pc, #76]	; (80034b0 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8003462:	401a      	ands	r2, r3
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	691b      	ldr	r3, [r3, #16]
 8003468:	4313      	orrs	r3, r2
 800346a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	4a11      	ldr	r2, [pc, #68]	; (80034b4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8003470:	401a      	ands	r2, r3
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	695b      	ldr	r3, [r3, #20]
 8003476:	4313      	orrs	r3, r2
 8003478:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	4a0e      	ldr	r2, [pc, #56]	; (80034b8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 800347e:	401a      	ands	r2, r3
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	69db      	ldr	r3, [r3, #28]
 8003484:	4313      	orrs	r3, r2
 8003486:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	68fa      	ldr	r2, [r7, #12]
 800348e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	223c      	movs	r2, #60	; 0x3c
 8003494:	2100      	movs	r1, #0
 8003496:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003498:	2300      	movs	r3, #0
}
 800349a:	0018      	movs	r0, r3
 800349c:	46bd      	mov	sp, r7
 800349e:	b004      	add	sp, #16
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	46c0      	nop			; (mov r8, r8)
 80034a4:	fffffcff 	.word	0xfffffcff
 80034a8:	fffffbff 	.word	0xfffffbff
 80034ac:	fffff7ff 	.word	0xfffff7ff
 80034b0:	ffffefff 	.word	0xffffefff
 80034b4:	ffffdfff 	.word	0xffffdfff
 80034b8:	ffffbfff 	.word	0xffffbfff

080034bc <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80034bc:	b580      	push	{r7, lr}
 80034be:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80034c0:	46c0      	nop			; (mov r8, r8)
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
	...

080034c8 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b086      	sub	sp, #24
 80034cc:	af04      	add	r7, sp, #16
 80034ce:	0002      	movs	r2, r0
 80034d0:	1dfb      	adds	r3, r7, #7
 80034d2:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80034d4:	4808      	ldr	r0, [pc, #32]	; (80034f8 <ssd1306_WriteCommand+0x30>)
 80034d6:	2301      	movs	r3, #1
 80034d8:	425b      	negs	r3, r3
 80034da:	9302      	str	r3, [sp, #8]
 80034dc:	2301      	movs	r3, #1
 80034de:	9301      	str	r3, [sp, #4]
 80034e0:	1dfb      	adds	r3, r7, #7
 80034e2:	9300      	str	r3, [sp, #0]
 80034e4:	2301      	movs	r3, #1
 80034e6:	2200      	movs	r2, #0
 80034e8:	2178      	movs	r1, #120	; 0x78
 80034ea:	f7fe f827 	bl	800153c <HAL_I2C_Mem_Write>
}
 80034ee:	46c0      	nop			; (mov r8, r8)
 80034f0:	46bd      	mov	sp, r7
 80034f2:	b002      	add	sp, #8
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	46c0      	nop			; (mov r8, r8)
 80034f8:	20000858 	.word	0x20000858

080034fc <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b086      	sub	sp, #24
 8003500:	af04      	add	r7, sp, #16
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	b29b      	uxth	r3, r3
 800350a:	4808      	ldr	r0, [pc, #32]	; (800352c <ssd1306_WriteData+0x30>)
 800350c:	2201      	movs	r2, #1
 800350e:	4252      	negs	r2, r2
 8003510:	9202      	str	r2, [sp, #8]
 8003512:	9301      	str	r3, [sp, #4]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	9300      	str	r3, [sp, #0]
 8003518:	2301      	movs	r3, #1
 800351a:	2240      	movs	r2, #64	; 0x40
 800351c:	2178      	movs	r1, #120	; 0x78
 800351e:	f7fe f80d 	bl	800153c <HAL_I2C_Mem_Write>
}
 8003522:	46c0      	nop			; (mov r8, r8)
 8003524:	46bd      	mov	sp, r7
 8003526:	b002      	add	sp, #8
 8003528:	bd80      	pop	{r7, pc}
 800352a:	46c0      	nop			; (mov r8, r8)
 800352c:	20000858 	.word	0x20000858

08003530 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8003530:	b580      	push	{r7, lr}
 8003532:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8003534:	f7ff ffc2 	bl	80034bc <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8003538:	2064      	movs	r0, #100	; 0x64
 800353a:	f7fd facd 	bl	8000ad8 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800353e:	2000      	movs	r0, #0
 8003540:	f000 fa0c 	bl	800395c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8003544:	2020      	movs	r0, #32
 8003546:	f7ff ffbf 	bl	80034c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x01); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800354a:	2001      	movs	r0, #1
 800354c:	f7ff ffbc 	bl	80034c8 <ssd1306_WriteCommand>
    //ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8003550:	20c8      	movs	r0, #200	; 0xc8
 8003552:	f7ff ffb9 	bl	80034c8 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8003556:	2000      	movs	r0, #0
 8003558:	f7ff ffb6 	bl	80034c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800355c:	2010      	movs	r0, #16
 800355e:	f7ff ffb3 	bl	80034c8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDC);
 8003562:	20dc      	movs	r0, #220	; 0xdc
 8003564:	f7ff ffb0 	bl	80034c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //--set start line address - CHECK
 8003568:	2000      	movs	r0, #0
 800356a:	f7ff ffad 	bl	80034c8 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800356e:	20ff      	movs	r0, #255	; 0xff
 8003570:	f000 f9dc 	bl	800392c <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8003574:	20a1      	movs	r0, #161	; 0xa1
 8003576:	f7ff ffa7 	bl	80034c8 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800357a:	20a6      	movs	r0, #166	; 0xa6
 800357c:	f7ff ffa4 	bl	80034c8 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8003580:	20a8      	movs	r0, #168	; 0xa8
 8003582:	f7ff ffa1 	bl	80034c8 <ssd1306_WriteCommand>
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
#elif (SSD1306_HEIGHT == 128)
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
    ssd1306_WriteCommand(0x3F);
 8003586:	203f      	movs	r0, #63	; 0x3f
 8003588:	f7ff ff9e 	bl	80034c8 <ssd1306_WriteCommand>
//#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800358c:	20a4      	movs	r0, #164	; 0xa4
 800358e:	f7ff ff9b 	bl	80034c8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8003592:	20d3      	movs	r0, #211	; 0xd3
 8003594:	f7ff ff98 	bl	80034c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //-not offset
 8003598:	2022      	movs	r0, #34	; 0x22
 800359a:	f7ff ff95 	bl	80034c8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800359e:	20d5      	movs	r0, #213	; 0xd5
 80035a0:	f7ff ff92 	bl	80034c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80035a4:	20f0      	movs	r0, #240	; 0xf0
 80035a6:	f7ff ff8f 	bl	80034c8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80035aa:	20d9      	movs	r0, #217	; 0xd9
 80035ac:	f7ff ff8c 	bl	80034c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80035b0:	2022      	movs	r0, #34	; 0x22
 80035b2:	f7ff ff89 	bl	80034c8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80035b6:	20da      	movs	r0, #218	; 0xda
 80035b8:	f7ff ff86 	bl	80034c8 <ssd1306_WriteCommand>
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
#elif (SSD1306_HEIGHT == 128)
    ssd1306_WriteCommand(0x12);
#else
    ssd1306_WriteCommand(0x12);
 80035bc:	2012      	movs	r0, #18
 80035be:	f7ff ff83 	bl	80034c8 <ssd1306_WriteCommand>
//#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80035c2:	20db      	movs	r0, #219	; 0xdb
 80035c4:	f7ff ff80 	bl	80034c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80035c8:	2020      	movs	r0, #32
 80035ca:	f7ff ff7d 	bl	80034c8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80035ce:	208d      	movs	r0, #141	; 0x8d
 80035d0:	f7ff ff7a 	bl	80034c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80035d4:	2014      	movs	r0, #20
 80035d6:	f7ff ff77 	bl	80034c8 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80035da:	2001      	movs	r0, #1
 80035dc:	f000 f9be 	bl	800395c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80035e0:	2000      	movs	r0, #0
 80035e2:	f000 f811 	bl	8003608 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80035e6:	f000 f833 	bl	8003650 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80035ea:	4b06      	ldr	r3, [pc, #24]	; (8003604 <ssd1306_Init+0xd4>)
 80035ec:	2200      	movs	r2, #0
 80035ee:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80035f0:	4b04      	ldr	r3, [pc, #16]	; (8003604 <ssd1306_Init+0xd4>)
 80035f2:	2200      	movs	r2, #0
 80035f4:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80035f6:	4b03      	ldr	r3, [pc, #12]	; (8003604 <ssd1306_Init+0xd4>)
 80035f8:	2201      	movs	r2, #1
 80035fa:	711a      	strb	r2, [r3, #4]
}
 80035fc:	46c0      	nop			; (mov r8, r8)
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
 8003602:	46c0      	nop			; (mov r8, r8)
 8003604:	20000850 	.word	0x20000850

08003608 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8003608:	b580      	push	{r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0
 800360e:	0002      	movs	r2, r0
 8003610:	1dfb      	adds	r3, r7, #7
 8003612:	701a      	strb	r2, [r3, #0]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8003614:	2300      	movs	r3, #0
 8003616:	60fb      	str	r3, [r7, #12]
 8003618:	e00e      	b.n	8003638 <ssd1306_Fill+0x30>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 800361a:	1dfb      	adds	r3, r7, #7
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d101      	bne.n	8003626 <ssd1306_Fill+0x1e>
 8003622:	2100      	movs	r1, #0
 8003624:	e000      	b.n	8003628 <ssd1306_Fill+0x20>
 8003626:	21ff      	movs	r1, #255	; 0xff
 8003628:	4a08      	ldr	r2, [pc, #32]	; (800364c <ssd1306_Fill+0x44>)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	18d3      	adds	r3, r2, r3
 800362e:	1c0a      	adds	r2, r1, #0
 8003630:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	3301      	adds	r3, #1
 8003636:	60fb      	str	r3, [r7, #12]
 8003638:	68fa      	ldr	r2, [r7, #12]
 800363a:	2382      	movs	r3, #130	; 0x82
 800363c:	011b      	lsls	r3, r3, #4
 800363e:	429a      	cmp	r2, r3
 8003640:	d3eb      	bcc.n	800361a <ssd1306_Fill+0x12>
    }
}
 8003642:	46c0      	nop			; (mov r8, r8)
 8003644:	46c0      	nop			; (mov r8, r8)
 8003646:	46bd      	mov	sp, r7
 8003648:	b004      	add	sp, #16
 800364a:	bd80      	pop	{r7, pc}
 800364c:	20000030 	.word	0x20000030

08003650 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8003656:	1dfb      	adds	r3, r7, #7
 8003658:	2200      	movs	r2, #0
 800365a:	701a      	strb	r2, [r3, #0]
 800365c:	e01a      	b.n	8003694 <ssd1306_UpdateScreen+0x44>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 800365e:	1dfb      	adds	r3, r7, #7
 8003660:	781b      	ldrb	r3, [r3, #0]
 8003662:	3b50      	subs	r3, #80	; 0x50
 8003664:	b2db      	uxtb	r3, r3
 8003666:	0018      	movs	r0, r3
 8003668:	f7ff ff2e 	bl	80034c8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 800366c:	2000      	movs	r0, #0
 800366e:	f7ff ff2b 	bl	80034c8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8003672:	2010      	movs	r0, #16
 8003674:	f7ff ff28 	bl	80034c8 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8003678:	1dfb      	adds	r3, r7, #7
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	01da      	lsls	r2, r3, #7
 800367e:	4b0a      	ldr	r3, [pc, #40]	; (80036a8 <ssd1306_UpdateScreen+0x58>)
 8003680:	18d3      	adds	r3, r2, r3
 8003682:	2180      	movs	r1, #128	; 0x80
 8003684:	0018      	movs	r0, r3
 8003686:	f7ff ff39 	bl	80034fc <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800368a:	1dfb      	adds	r3, r7, #7
 800368c:	781a      	ldrb	r2, [r3, #0]
 800368e:	1dfb      	adds	r3, r7, #7
 8003690:	3201      	adds	r2, #1
 8003692:	701a      	strb	r2, [r3, #0]
 8003694:	1dfb      	adds	r3, r7, #7
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	2b0f      	cmp	r3, #15
 800369a:	d9e0      	bls.n	800365e <ssd1306_UpdateScreen+0xe>
    }
}
 800369c:	46c0      	nop			; (mov r8, r8)
 800369e:	46c0      	nop			; (mov r8, r8)
 80036a0:	46bd      	mov	sp, r7
 80036a2:	b002      	add	sp, #8
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	46c0      	nop			; (mov r8, r8)
 80036a8:	20000030 	.word	0x20000030

080036ac <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80036ac:	b590      	push	{r4, r7, lr}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	0004      	movs	r4, r0
 80036b4:	0008      	movs	r0, r1
 80036b6:	0011      	movs	r1, r2
 80036b8:	1dfb      	adds	r3, r7, #7
 80036ba:	1c22      	adds	r2, r4, #0
 80036bc:	701a      	strb	r2, [r3, #0]
 80036be:	1dbb      	adds	r3, r7, #6
 80036c0:	1c02      	adds	r2, r0, #0
 80036c2:	701a      	strb	r2, [r3, #0]
 80036c4:	1d7b      	adds	r3, r7, #5
 80036c6:	1c0a      	adds	r2, r1, #0
 80036c8:	701a      	strb	r2, [r3, #0]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80036ca:	1dfb      	adds	r3, r7, #7
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	b25b      	sxtb	r3, r3
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	db47      	blt.n	8003764 <ssd1306_DrawPixel+0xb8>
 80036d4:	1dbb      	adds	r3, r7, #6
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	2b81      	cmp	r3, #129	; 0x81
 80036da:	d843      	bhi.n	8003764 <ssd1306_DrawPixel+0xb8>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80036dc:	1d7b      	adds	r3, r7, #5
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d11e      	bne.n	8003722 <ssd1306_DrawPixel+0x76>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80036e4:	1dfb      	adds	r3, r7, #7
 80036e6:	781a      	ldrb	r2, [r3, #0]
 80036e8:	1dbb      	adds	r3, r7, #6
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	08db      	lsrs	r3, r3, #3
 80036ee:	b2d8      	uxtb	r0, r3
 80036f0:	0003      	movs	r3, r0
 80036f2:	01db      	lsls	r3, r3, #7
 80036f4:	18d3      	adds	r3, r2, r3
 80036f6:	4a1d      	ldr	r2, [pc, #116]	; (800376c <ssd1306_DrawPixel+0xc0>)
 80036f8:	5cd3      	ldrb	r3, [r2, r3]
 80036fa:	b25a      	sxtb	r2, r3
 80036fc:	1dbb      	adds	r3, r7, #6
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	2107      	movs	r1, #7
 8003702:	400b      	ands	r3, r1
 8003704:	2101      	movs	r1, #1
 8003706:	4099      	lsls	r1, r3
 8003708:	000b      	movs	r3, r1
 800370a:	b25b      	sxtb	r3, r3
 800370c:	4313      	orrs	r3, r2
 800370e:	b259      	sxtb	r1, r3
 8003710:	1dfb      	adds	r3, r7, #7
 8003712:	781a      	ldrb	r2, [r3, #0]
 8003714:	0003      	movs	r3, r0
 8003716:	01db      	lsls	r3, r3, #7
 8003718:	18d3      	adds	r3, r2, r3
 800371a:	b2c9      	uxtb	r1, r1
 800371c:	4a13      	ldr	r2, [pc, #76]	; (800376c <ssd1306_DrawPixel+0xc0>)
 800371e:	54d1      	strb	r1, [r2, r3]
 8003720:	e021      	b.n	8003766 <ssd1306_DrawPixel+0xba>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8003722:	1dfb      	adds	r3, r7, #7
 8003724:	781a      	ldrb	r2, [r3, #0]
 8003726:	1dbb      	adds	r3, r7, #6
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	08db      	lsrs	r3, r3, #3
 800372c:	b2d8      	uxtb	r0, r3
 800372e:	0003      	movs	r3, r0
 8003730:	01db      	lsls	r3, r3, #7
 8003732:	18d3      	adds	r3, r2, r3
 8003734:	4a0d      	ldr	r2, [pc, #52]	; (800376c <ssd1306_DrawPixel+0xc0>)
 8003736:	5cd3      	ldrb	r3, [r2, r3]
 8003738:	b25b      	sxtb	r3, r3
 800373a:	1dba      	adds	r2, r7, #6
 800373c:	7812      	ldrb	r2, [r2, #0]
 800373e:	2107      	movs	r1, #7
 8003740:	400a      	ands	r2, r1
 8003742:	2101      	movs	r1, #1
 8003744:	4091      	lsls	r1, r2
 8003746:	000a      	movs	r2, r1
 8003748:	b252      	sxtb	r2, r2
 800374a:	43d2      	mvns	r2, r2
 800374c:	b252      	sxtb	r2, r2
 800374e:	4013      	ands	r3, r2
 8003750:	b259      	sxtb	r1, r3
 8003752:	1dfb      	adds	r3, r7, #7
 8003754:	781a      	ldrb	r2, [r3, #0]
 8003756:	0003      	movs	r3, r0
 8003758:	01db      	lsls	r3, r3, #7
 800375a:	18d3      	adds	r3, r2, r3
 800375c:	b2c9      	uxtb	r1, r1
 800375e:	4a03      	ldr	r2, [pc, #12]	; (800376c <ssd1306_DrawPixel+0xc0>)
 8003760:	54d1      	strb	r1, [r2, r3]
 8003762:	e000      	b.n	8003766 <ssd1306_DrawPixel+0xba>
        return;
 8003764:	46c0      	nop			; (mov r8, r8)
    }
}
 8003766:	46bd      	mov	sp, r7
 8003768:	b003      	add	sp, #12
 800376a:	bd90      	pop	{r4, r7, pc}
 800376c:	20000030 	.word	0x20000030

08003770 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8003770:	b590      	push	{r4, r7, lr}
 8003772:	b089      	sub	sp, #36	; 0x24
 8003774:	af00      	add	r7, sp, #0
 8003776:	0004      	movs	r4, r0
 8003778:	1d38      	adds	r0, r7, #4
 800377a:	6001      	str	r1, [r0, #0]
 800377c:	6042      	str	r2, [r0, #4]
 800377e:	0019      	movs	r1, r3
 8003780:	200f      	movs	r0, #15
 8003782:	183b      	adds	r3, r7, r0
 8003784:	1c22      	adds	r2, r4, #0
 8003786:	701a      	strb	r2, [r3, #0]
 8003788:	230e      	movs	r3, #14
 800378a:	18fb      	adds	r3, r7, r3
 800378c:	1c0a      	adds	r2, r1, #0
 800378e:	701a      	strb	r2, [r3, #0]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8003790:	183b      	adds	r3, r7, r0
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	2b1f      	cmp	r3, #31
 8003796:	d903      	bls.n	80037a0 <ssd1306_WriteChar+0x30>
 8003798:	183b      	adds	r3, r7, r0
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	2b7e      	cmp	r3, #126	; 0x7e
 800379e:	d901      	bls.n	80037a4 <ssd1306_WriteChar+0x34>
        return 0;
 80037a0:	2300      	movs	r3, #0
 80037a2:	e078      	b.n	8003896 <ssd1306_WriteChar+0x126>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80037a4:	4b3e      	ldr	r3, [pc, #248]	; (80038a0 <ssd1306_WriteChar+0x130>)
 80037a6:	881b      	ldrh	r3, [r3, #0]
 80037a8:	001a      	movs	r2, r3
 80037aa:	1d3b      	adds	r3, r7, #4
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	18d3      	adds	r3, r2, r3
 80037b0:	2b80      	cmp	r3, #128	; 0x80
 80037b2:	dc07      	bgt.n	80037c4 <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80037b4:	4b3a      	ldr	r3, [pc, #232]	; (80038a0 <ssd1306_WriteChar+0x130>)
 80037b6:	885b      	ldrh	r3, [r3, #2]
 80037b8:	001a      	movs	r2, r3
 80037ba:	1d3b      	adds	r3, r7, #4
 80037bc:	785b      	ldrb	r3, [r3, #1]
 80037be:	18d3      	adds	r3, r2, r3
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80037c0:	2b82      	cmp	r3, #130	; 0x82
 80037c2:	dd01      	ble.n	80037c8 <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 80037c4:	2300      	movs	r3, #0
 80037c6:	e066      	b.n	8003896 <ssd1306_WriteChar+0x126>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80037c8:	2300      	movs	r3, #0
 80037ca:	61fb      	str	r3, [r7, #28]
 80037cc:	e051      	b.n	8003872 <ssd1306_WriteChar+0x102>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80037ce:	1d3b      	adds	r3, r7, #4
 80037d0:	685a      	ldr	r2, [r3, #4]
 80037d2:	230f      	movs	r3, #15
 80037d4:	18fb      	adds	r3, r7, r3
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	3b20      	subs	r3, #32
 80037da:	1d39      	adds	r1, r7, #4
 80037dc:	7849      	ldrb	r1, [r1, #1]
 80037de:	434b      	muls	r3, r1
 80037e0:	0019      	movs	r1, r3
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	18cb      	adds	r3, r1, r3
 80037e6:	005b      	lsls	r3, r3, #1
 80037e8:	18d3      	adds	r3, r2, r3
 80037ea:	881b      	ldrh	r3, [r3, #0]
 80037ec:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80037ee:	2300      	movs	r3, #0
 80037f0:	61bb      	str	r3, [r7, #24]
 80037f2:	e035      	b.n	8003860 <ssd1306_WriteChar+0xf0>
            if((b << j) & 0x8000)  {
 80037f4:	697a      	ldr	r2, [r7, #20]
 80037f6:	69bb      	ldr	r3, [r7, #24]
 80037f8:	409a      	lsls	r2, r3
 80037fa:	2380      	movs	r3, #128	; 0x80
 80037fc:	021b      	lsls	r3, r3, #8
 80037fe:	4013      	ands	r3, r2
 8003800:	d014      	beq.n	800382c <ssd1306_WriteChar+0xbc>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8003802:	4b27      	ldr	r3, [pc, #156]	; (80038a0 <ssd1306_WriteChar+0x130>)
 8003804:	881b      	ldrh	r3, [r3, #0]
 8003806:	b2da      	uxtb	r2, r3
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	b2db      	uxtb	r3, r3
 800380c:	18d3      	adds	r3, r2, r3
 800380e:	b2d8      	uxtb	r0, r3
 8003810:	4b23      	ldr	r3, [pc, #140]	; (80038a0 <ssd1306_WriteChar+0x130>)
 8003812:	885b      	ldrh	r3, [r3, #2]
 8003814:	b2da      	uxtb	r2, r3
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	b2db      	uxtb	r3, r3
 800381a:	18d3      	adds	r3, r2, r3
 800381c:	b2d9      	uxtb	r1, r3
 800381e:	230e      	movs	r3, #14
 8003820:	18fb      	adds	r3, r7, r3
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	001a      	movs	r2, r3
 8003826:	f7ff ff41 	bl	80036ac <ssd1306_DrawPixel>
 800382a:	e016      	b.n	800385a <ssd1306_WriteChar+0xea>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800382c:	4b1c      	ldr	r3, [pc, #112]	; (80038a0 <ssd1306_WriteChar+0x130>)
 800382e:	881b      	ldrh	r3, [r3, #0]
 8003830:	b2da      	uxtb	r2, r3
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	b2db      	uxtb	r3, r3
 8003836:	18d3      	adds	r3, r2, r3
 8003838:	b2d8      	uxtb	r0, r3
 800383a:	4b19      	ldr	r3, [pc, #100]	; (80038a0 <ssd1306_WriteChar+0x130>)
 800383c:	885b      	ldrh	r3, [r3, #2]
 800383e:	b2da      	uxtb	r2, r3
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	b2db      	uxtb	r3, r3
 8003844:	18d3      	adds	r3, r2, r3
 8003846:	b2d9      	uxtb	r1, r3
 8003848:	230e      	movs	r3, #14
 800384a:	18fb      	adds	r3, r7, r3
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	425a      	negs	r2, r3
 8003850:	4153      	adcs	r3, r2
 8003852:	b2db      	uxtb	r3, r3
 8003854:	001a      	movs	r2, r3
 8003856:	f7ff ff29 	bl	80036ac <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	3301      	adds	r3, #1
 800385e:	61bb      	str	r3, [r7, #24]
 8003860:	1d3b      	adds	r3, r7, #4
 8003862:	781b      	ldrb	r3, [r3, #0]
 8003864:	001a      	movs	r2, r3
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	4293      	cmp	r3, r2
 800386a:	d3c3      	bcc.n	80037f4 <ssd1306_WriteChar+0x84>
    for(i = 0; i < Font.FontHeight; i++) {
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	3301      	adds	r3, #1
 8003870:	61fb      	str	r3, [r7, #28]
 8003872:	1d3b      	adds	r3, r7, #4
 8003874:	785b      	ldrb	r3, [r3, #1]
 8003876:	001a      	movs	r2, r3
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	4293      	cmp	r3, r2
 800387c:	d3a7      	bcc.n	80037ce <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800387e:	4b08      	ldr	r3, [pc, #32]	; (80038a0 <ssd1306_WriteChar+0x130>)
 8003880:	881a      	ldrh	r2, [r3, #0]
 8003882:	1d3b      	adds	r3, r7, #4
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	b29b      	uxth	r3, r3
 8003888:	18d3      	adds	r3, r2, r3
 800388a:	b29a      	uxth	r2, r3
 800388c:	4b04      	ldr	r3, [pc, #16]	; (80038a0 <ssd1306_WriteChar+0x130>)
 800388e:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8003890:	230f      	movs	r3, #15
 8003892:	18fb      	adds	r3, r7, r3
 8003894:	781b      	ldrb	r3, [r3, #0]
}
 8003896:	0018      	movs	r0, r3
 8003898:	46bd      	mov	sp, r7
 800389a:	b009      	add	sp, #36	; 0x24
 800389c:	bd90      	pop	{r4, r7, pc}
 800389e:	46c0      	nop			; (mov r8, r8)
 80038a0:	20000850 	.word	0x20000850

080038a4 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	1d38      	adds	r0, r7, #4
 80038ae:	6001      	str	r1, [r0, #0]
 80038b0:	6042      	str	r2, [r0, #4]
 80038b2:	001a      	movs	r2, r3
 80038b4:	1cfb      	adds	r3, r7, #3
 80038b6:	701a      	strb	r2, [r3, #0]
    // Write until null-byte
    while (*str) {
 80038b8:	e014      	b.n	80038e4 <ssd1306_WriteString+0x40>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	7818      	ldrb	r0, [r3, #0]
 80038be:	1cfb      	adds	r3, r7, #3
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	1d3a      	adds	r2, r7, #4
 80038c4:	6811      	ldr	r1, [r2, #0]
 80038c6:	6852      	ldr	r2, [r2, #4]
 80038c8:	f7ff ff52 	bl	8003770 <ssd1306_WriteChar>
 80038cc:	0003      	movs	r3, r0
 80038ce:	001a      	movs	r2, r3
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d002      	beq.n	80038de <ssd1306_WriteString+0x3a>
            // Char could not be written
            return *str;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	e008      	b.n	80038f0 <ssd1306_WriteString+0x4c>
        }
        
        // Next char
        str++;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	3301      	adds	r3, #1
 80038e2:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	781b      	ldrb	r3, [r3, #0]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d1e6      	bne.n	80038ba <ssd1306_WriteString+0x16>
    }
    
    // Everything ok
    return *str;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	781b      	ldrb	r3, [r3, #0]
}
 80038f0:	0018      	movs	r0, r3
 80038f2:	46bd      	mov	sp, r7
 80038f4:	b004      	add	sp, #16
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	0002      	movs	r2, r0
 8003900:	1dfb      	adds	r3, r7, #7
 8003902:	701a      	strb	r2, [r3, #0]
 8003904:	1dbb      	adds	r3, r7, #6
 8003906:	1c0a      	adds	r2, r1, #0
 8003908:	701a      	strb	r2, [r3, #0]
    SSD1306.CurrentX = x;
 800390a:	1dfb      	adds	r3, r7, #7
 800390c:	781b      	ldrb	r3, [r3, #0]
 800390e:	b29a      	uxth	r2, r3
 8003910:	4b05      	ldr	r3, [pc, #20]	; (8003928 <ssd1306_SetCursor+0x30>)
 8003912:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8003914:	1dbb      	adds	r3, r7, #6
 8003916:	781b      	ldrb	r3, [r3, #0]
 8003918:	b29a      	uxth	r2, r3
 800391a:	4b03      	ldr	r3, [pc, #12]	; (8003928 <ssd1306_SetCursor+0x30>)
 800391c:	805a      	strh	r2, [r3, #2]
}
 800391e:	46c0      	nop			; (mov r8, r8)
 8003920:	46bd      	mov	sp, r7
 8003922:	b002      	add	sp, #8
 8003924:	bd80      	pop	{r7, pc}
 8003926:	46c0      	nop			; (mov r8, r8)
 8003928:	20000850 	.word	0x20000850

0800392c <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
 8003932:	0002      	movs	r2, r0
 8003934:	1dfb      	adds	r3, r7, #7
 8003936:	701a      	strb	r2, [r3, #0]
    const uint8_t kSetContrastControlRegister = 0x81;
 8003938:	210f      	movs	r1, #15
 800393a:	187b      	adds	r3, r7, r1
 800393c:	2281      	movs	r2, #129	; 0x81
 800393e:	701a      	strb	r2, [r3, #0]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8003940:	187b      	adds	r3, r7, r1
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	0018      	movs	r0, r3
 8003946:	f7ff fdbf 	bl	80034c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800394a:	1dfb      	adds	r3, r7, #7
 800394c:	781b      	ldrb	r3, [r3, #0]
 800394e:	0018      	movs	r0, r3
 8003950:	f7ff fdba 	bl	80034c8 <ssd1306_WriteCommand>
}
 8003954:	46c0      	nop			; (mov r8, r8)
 8003956:	46bd      	mov	sp, r7
 8003958:	b004      	add	sp, #16
 800395a:	bd80      	pop	{r7, pc}

0800395c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	0002      	movs	r2, r0
 8003964:	1dfb      	adds	r3, r7, #7
 8003966:	701a      	strb	r2, [r3, #0]
    uint8_t value;
    if (on) {
 8003968:	1dfb      	adds	r3, r7, #7
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d007      	beq.n	8003980 <ssd1306_SetDisplayOn+0x24>
        value = 0xAF;   // Display on
 8003970:	230f      	movs	r3, #15
 8003972:	18fb      	adds	r3, r7, r3
 8003974:	22af      	movs	r2, #175	; 0xaf
 8003976:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 1;
 8003978:	4b0a      	ldr	r3, [pc, #40]	; (80039a4 <ssd1306_SetDisplayOn+0x48>)
 800397a:	2201      	movs	r2, #1
 800397c:	715a      	strb	r2, [r3, #5]
 800397e:	e006      	b.n	800398e <ssd1306_SetDisplayOn+0x32>
    } else {
        value = 0xAE;   // Display off
 8003980:	230f      	movs	r3, #15
 8003982:	18fb      	adds	r3, r7, r3
 8003984:	22ae      	movs	r2, #174	; 0xae
 8003986:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 0;
 8003988:	4b06      	ldr	r3, [pc, #24]	; (80039a4 <ssd1306_SetDisplayOn+0x48>)
 800398a:	2200      	movs	r2, #0
 800398c:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800398e:	230f      	movs	r3, #15
 8003990:	18fb      	adds	r3, r7, r3
 8003992:	781b      	ldrb	r3, [r3, #0]
 8003994:	0018      	movs	r0, r3
 8003996:	f7ff fd97 	bl	80034c8 <ssd1306_WriteCommand>
}
 800399a:	46c0      	nop			; (mov r8, r8)
 800399c:	46bd      	mov	sp, r7
 800399e:	b004      	add	sp, #16
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	46c0      	nop			; (mov r8, r8)
 80039a4:	20000850 	.word	0x20000850

080039a8 <__libc_init_array>:
 80039a8:	b570      	push	{r4, r5, r6, lr}
 80039aa:	2600      	movs	r6, #0
 80039ac:	4d0c      	ldr	r5, [pc, #48]	; (80039e0 <__libc_init_array+0x38>)
 80039ae:	4c0d      	ldr	r4, [pc, #52]	; (80039e4 <__libc_init_array+0x3c>)
 80039b0:	1b64      	subs	r4, r4, r5
 80039b2:	10a4      	asrs	r4, r4, #2
 80039b4:	42a6      	cmp	r6, r4
 80039b6:	d109      	bne.n	80039cc <__libc_init_array+0x24>
 80039b8:	2600      	movs	r6, #0
 80039ba:	f000 f821 	bl	8003a00 <_init>
 80039be:	4d0a      	ldr	r5, [pc, #40]	; (80039e8 <__libc_init_array+0x40>)
 80039c0:	4c0a      	ldr	r4, [pc, #40]	; (80039ec <__libc_init_array+0x44>)
 80039c2:	1b64      	subs	r4, r4, r5
 80039c4:	10a4      	asrs	r4, r4, #2
 80039c6:	42a6      	cmp	r6, r4
 80039c8:	d105      	bne.n	80039d6 <__libc_init_array+0x2e>
 80039ca:	bd70      	pop	{r4, r5, r6, pc}
 80039cc:	00b3      	lsls	r3, r6, #2
 80039ce:	58eb      	ldr	r3, [r5, r3]
 80039d0:	4798      	blx	r3
 80039d2:	3601      	adds	r6, #1
 80039d4:	e7ee      	b.n	80039b4 <__libc_init_array+0xc>
 80039d6:	00b3      	lsls	r3, r6, #2
 80039d8:	58eb      	ldr	r3, [r5, r3]
 80039da:	4798      	blx	r3
 80039dc:	3601      	adds	r6, #1
 80039de:	e7f2      	b.n	80039c6 <__libc_init_array+0x1e>
 80039e0:	08004064 	.word	0x08004064
 80039e4:	08004064 	.word	0x08004064
 80039e8:	08004064 	.word	0x08004064
 80039ec:	08004068 	.word	0x08004068

080039f0 <memset>:
 80039f0:	0003      	movs	r3, r0
 80039f2:	1882      	adds	r2, r0, r2
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d100      	bne.n	80039fa <memset+0xa>
 80039f8:	4770      	bx	lr
 80039fa:	7019      	strb	r1, [r3, #0]
 80039fc:	3301      	adds	r3, #1
 80039fe:	e7f9      	b.n	80039f4 <memset+0x4>

08003a00 <_init>:
 8003a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a02:	46c0      	nop			; (mov r8, r8)
 8003a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a06:	bc08      	pop	{r3}
 8003a08:	469e      	mov	lr, r3
 8003a0a:	4770      	bx	lr

08003a0c <_fini>:
 8003a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a0e:	46c0      	nop			; (mov r8, r8)
 8003a10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a12:	bc08      	pop	{r3}
 8003a14:	469e      	mov	lr, r3
 8003a16:	4770      	bx	lr
