
Pro3E_RT_Mikrocotroller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002de8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002ea8  08002ea8  00012ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ed8  08002ed8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002ed8  08002ed8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ed8  08002ed8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ed8  08002ed8  00012ed8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002edc  08002edc  00012edc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002ee0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  2000000c  08002eec  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000100  08002eec  00020100  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d2cf  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d0b  00000000  00000000  0002d303  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cf8  00000000  00000000  0002f010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c10  00000000  00000000  0002fd08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001103b  00000000  00000000  00030918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f2f9  00000000  00000000  00041953  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00068edb  00000000  00000000  00050c4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b9b27  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f20  00000000  00000000  000b9b7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002e90 	.word	0x08002e90

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002e90 	.word	0x08002e90

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f000 fbcf 	bl	80009c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022a:	f000 f83d 	bl	80002a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022e:	f000 f9e7 	bl	8000600 <MX_GPIO_Init>
  MX_ADC_Init();
 8000232:	f000 f897 	bl	8000364 <MX_ADC_Init>
  MX_TIM1_Init();
 8000236:	f000 f931 	bl	800049c <MX_TIM1_Init>
  MX_I2C1_Init();
 800023a:	f000 f8ef 	bl	800041c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  //init_vcnl4040();
  uint16_t pwm_value = 0;
 800023e:	230a      	movs	r3, #10
 8000240:	18fb      	adds	r3, r7, r3
 8000242:	2200      	movs	r2, #0
 8000244:	801a      	strh	r2, [r3, #0]
  uint16_t step = 0;
 8000246:	2308      	movs	r3, #8
 8000248:	18fb      	adds	r3, r7, r3
 800024a:	2200      	movs	r2, #0
 800024c:	801a      	strh	r2, [r3, #0]
  uint16_t prox = 0;
 800024e:	1dbb      	adds	r3, r7, #6
 8000250:	2200      	movs	r2, #0
 8000252:	801a      	strh	r2, [r3, #0]
  int32_t CH1_DC = 0;
 8000254:	2300      	movs	r3, #0
 8000256:	60fb      	str	r3, [r7, #12]
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000258:	4b10      	ldr	r3, [pc, #64]	; (800029c <main+0x7c>)
 800025a:	210c      	movs	r1, #12
 800025c:	0018      	movs	r0, r3
 800025e:	f001 ffb9 	bl	80021d4 <HAL_TIM_PWM_Start>
	  user_pwm_setvalue(pwm_value);
	  */



	  while (CH1_DC < 7000)
 8000262:	e008      	b.n	8000276 <main+0x56>
	        {
	            TIM1->CCR4 = CH1_DC;
 8000264:	4b0e      	ldr	r3, [pc, #56]	; (80002a0 <main+0x80>)
 8000266:	68fa      	ldr	r2, [r7, #12]
 8000268:	641a      	str	r2, [r3, #64]	; 0x40
	            CH1_DC += 70;
 800026a:	68fb      	ldr	r3, [r7, #12]
 800026c:	3346      	adds	r3, #70	; 0x46
 800026e:	60fb      	str	r3, [r7, #12]
	            HAL_Delay(100);
 8000270:	2064      	movs	r0, #100	; 0x64
 8000272:	f000 fc0d 	bl	8000a90 <HAL_Delay>
	  while (CH1_DC < 7000)
 8000276:	68fb      	ldr	r3, [r7, #12]
 8000278:	4a0a      	ldr	r2, [pc, #40]	; (80002a4 <main+0x84>)
 800027a:	4293      	cmp	r3, r2
 800027c:	ddf2      	ble.n	8000264 <main+0x44>
	        }
		while(CH1_DC > 0)
 800027e:	e008      	b.n	8000292 <main+0x72>
		{
			TIM1->CCR4 = CH1_DC;
 8000280:	4b07      	ldr	r3, [pc, #28]	; (80002a0 <main+0x80>)
 8000282:	68fa      	ldr	r2, [r7, #12]
 8000284:	641a      	str	r2, [r3, #64]	; 0x40
			CH1_DC -= 70;
 8000286:	68fb      	ldr	r3, [r7, #12]
 8000288:	3b46      	subs	r3, #70	; 0x46
 800028a:	60fb      	str	r3, [r7, #12]
			HAL_Delay(100);
 800028c:	2064      	movs	r0, #100	; 0x64
 800028e:	f000 fbff 	bl	8000a90 <HAL_Delay>
		while(CH1_DC > 0)
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	2b00      	cmp	r3, #0
 8000296:	dcf3      	bgt.n	8000280 <main+0x60>
	  while (CH1_DC < 7000)
 8000298:	e7ed      	b.n	8000276 <main+0x56>
 800029a:	46c0      	nop			; (mov r8, r8)
 800029c:	20000074 	.word	0x20000074
 80002a0:	40012c00 	.word	0x40012c00
 80002a4:	00001b57 	.word	0x00001b57

080002a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a8:	b590      	push	{r4, r7, lr}
 80002aa:	b097      	sub	sp, #92	; 0x5c
 80002ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ae:	2428      	movs	r4, #40	; 0x28
 80002b0:	193b      	adds	r3, r7, r4
 80002b2:	0018      	movs	r0, r3
 80002b4:	2330      	movs	r3, #48	; 0x30
 80002b6:	001a      	movs	r2, r3
 80002b8:	2100      	movs	r1, #0
 80002ba:	f002 fde1 	bl	8002e80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002be:	2318      	movs	r3, #24
 80002c0:	18fb      	adds	r3, r7, r3
 80002c2:	0018      	movs	r0, r3
 80002c4:	2310      	movs	r3, #16
 80002c6:	001a      	movs	r2, r3
 80002c8:	2100      	movs	r1, #0
 80002ca:	f002 fdd9 	bl	8002e80 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002ce:	1d3b      	adds	r3, r7, #4
 80002d0:	0018      	movs	r0, r3
 80002d2:	2314      	movs	r3, #20
 80002d4:	001a      	movs	r2, r3
 80002d6:	2100      	movs	r1, #0
 80002d8:	f002 fdd2 	bl	8002e80 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 80002dc:	0021      	movs	r1, r4
 80002de:	187b      	adds	r3, r7, r1
 80002e0:	2212      	movs	r2, #18
 80002e2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002e4:	187b      	adds	r3, r7, r1
 80002e6:	2201      	movs	r2, #1
 80002e8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80002ea:	187b      	adds	r3, r7, r1
 80002ec:	2201      	movs	r2, #1
 80002ee:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002f0:	187b      	adds	r3, r7, r1
 80002f2:	2210      	movs	r2, #16
 80002f4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80002f6:	187b      	adds	r3, r7, r1
 80002f8:	2210      	movs	r2, #16
 80002fa:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002fc:	187b      	adds	r3, r7, r1
 80002fe:	2200      	movs	r2, #0
 8000300:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000302:	187b      	adds	r3, r7, r1
 8000304:	0018      	movs	r0, r3
 8000306:	f001 f98d 	bl	8001624 <HAL_RCC_OscConfig>
 800030a:	1e03      	subs	r3, r0, #0
 800030c:	d001      	beq.n	8000312 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800030e:	f000 f9f7 	bl	8000700 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000312:	2118      	movs	r1, #24
 8000314:	187b      	adds	r3, r7, r1
 8000316:	2207      	movs	r2, #7
 8000318:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800031a:	187b      	adds	r3, r7, r1
 800031c:	2200      	movs	r2, #0
 800031e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000320:	187b      	adds	r3, r7, r1
 8000322:	2200      	movs	r2, #0
 8000324:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000326:	187b      	adds	r3, r7, r1
 8000328:	2200      	movs	r2, #0
 800032a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800032c:	187b      	adds	r3, r7, r1
 800032e:	2100      	movs	r1, #0
 8000330:	0018      	movs	r0, r3
 8000332:	f001 fc95 	bl	8001c60 <HAL_RCC_ClockConfig>
 8000336:	1e03      	subs	r3, r0, #0
 8000338:	d001      	beq.n	800033e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800033a:	f000 f9e1 	bl	8000700 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800033e:	1d3b      	adds	r3, r7, #4
 8000340:	2220      	movs	r2, #32
 8000342:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000344:	1d3b      	adds	r3, r7, #4
 8000346:	2200      	movs	r2, #0
 8000348:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800034a:	1d3b      	adds	r3, r7, #4
 800034c:	0018      	movs	r0, r3
 800034e:	f001 fdbb 	bl	8001ec8 <HAL_RCCEx_PeriphCLKConfig>
 8000352:	1e03      	subs	r3, r0, #0
 8000354:	d001      	beq.n	800035a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000356:	f000 f9d3 	bl	8000700 <Error_Handler>
  }
}
 800035a:	46c0      	nop			; (mov r8, r8)
 800035c:	46bd      	mov	sp, r7
 800035e:	b017      	add	sp, #92	; 0x5c
 8000360:	bd90      	pop	{r4, r7, pc}
	...

08000364 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b084      	sub	sp, #16
 8000368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800036a:	1d3b      	adds	r3, r7, #4
 800036c:	0018      	movs	r0, r3
 800036e:	230c      	movs	r3, #12
 8000370:	001a      	movs	r2, r3
 8000372:	2100      	movs	r1, #0
 8000374:	f002 fd84 	bl	8002e80 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000378:	4b26      	ldr	r3, [pc, #152]	; (8000414 <MX_ADC_Init+0xb0>)
 800037a:	4a27      	ldr	r2, [pc, #156]	; (8000418 <MX_ADC_Init+0xb4>)
 800037c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800037e:	4b25      	ldr	r3, [pc, #148]	; (8000414 <MX_ADC_Init+0xb0>)
 8000380:	2200      	movs	r2, #0
 8000382:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000384:	4b23      	ldr	r3, [pc, #140]	; (8000414 <MX_ADC_Init+0xb0>)
 8000386:	2200      	movs	r2, #0
 8000388:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800038a:	4b22      	ldr	r3, [pc, #136]	; (8000414 <MX_ADC_Init+0xb0>)
 800038c:	2200      	movs	r2, #0
 800038e:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000390:	4b20      	ldr	r3, [pc, #128]	; (8000414 <MX_ADC_Init+0xb0>)
 8000392:	2201      	movs	r2, #1
 8000394:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000396:	4b1f      	ldr	r3, [pc, #124]	; (8000414 <MX_ADC_Init+0xb0>)
 8000398:	2204      	movs	r2, #4
 800039a:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800039c:	4b1d      	ldr	r3, [pc, #116]	; (8000414 <MX_ADC_Init+0xb0>)
 800039e:	2200      	movs	r2, #0
 80003a0:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80003a2:	4b1c      	ldr	r3, [pc, #112]	; (8000414 <MX_ADC_Init+0xb0>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80003a8:	4b1a      	ldr	r3, [pc, #104]	; (8000414 <MX_ADC_Init+0xb0>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80003ae:	4b19      	ldr	r3, [pc, #100]	; (8000414 <MX_ADC_Init+0xb0>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003b4:	4b17      	ldr	r3, [pc, #92]	; (8000414 <MX_ADC_Init+0xb0>)
 80003b6:	22c2      	movs	r2, #194	; 0xc2
 80003b8:	32ff      	adds	r2, #255	; 0xff
 80003ba:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003bc:	4b15      	ldr	r3, [pc, #84]	; (8000414 <MX_ADC_Init+0xb0>)
 80003be:	2200      	movs	r2, #0
 80003c0:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80003c2:	4b14      	ldr	r3, [pc, #80]	; (8000414 <MX_ADC_Init+0xb0>)
 80003c4:	2224      	movs	r2, #36	; 0x24
 80003c6:	2100      	movs	r1, #0
 80003c8:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80003ca:	4b12      	ldr	r3, [pc, #72]	; (8000414 <MX_ADC_Init+0xb0>)
 80003cc:	2201      	movs	r2, #1
 80003ce:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80003d0:	4b10      	ldr	r3, [pc, #64]	; (8000414 <MX_ADC_Init+0xb0>)
 80003d2:	0018      	movs	r0, r3
 80003d4:	f000 fb80 	bl	8000ad8 <HAL_ADC_Init>
 80003d8:	1e03      	subs	r3, r0, #0
 80003da:	d001      	beq.n	80003e0 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80003dc:	f000 f990 	bl	8000700 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80003e0:	1d3b      	adds	r3, r7, #4
 80003e2:	2200      	movs	r2, #0
 80003e4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80003e6:	1d3b      	adds	r3, r7, #4
 80003e8:	2280      	movs	r2, #128	; 0x80
 80003ea:	0152      	lsls	r2, r2, #5
 80003ec:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80003ee:	1d3b      	adds	r3, r7, #4
 80003f0:	2280      	movs	r2, #128	; 0x80
 80003f2:	0552      	lsls	r2, r2, #21
 80003f4:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80003f6:	1d3a      	adds	r2, r7, #4
 80003f8:	4b06      	ldr	r3, [pc, #24]	; (8000414 <MX_ADC_Init+0xb0>)
 80003fa:	0011      	movs	r1, r2
 80003fc:	0018      	movs	r0, r3
 80003fe:	f000 fcab 	bl	8000d58 <HAL_ADC_ConfigChannel>
 8000402:	1e03      	subs	r3, r0, #0
 8000404:	d001      	beq.n	800040a <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8000406:	f000 f97b 	bl	8000700 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800040a:	46c0      	nop			; (mov r8, r8)
 800040c:	46bd      	mov	sp, r7
 800040e:	b004      	add	sp, #16
 8000410:	bd80      	pop	{r7, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	200000bc 	.word	0x200000bc
 8000418:	40012400 	.word	0x40012400

0800041c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000420:	4b1b      	ldr	r3, [pc, #108]	; (8000490 <MX_I2C1_Init+0x74>)
 8000422:	4a1c      	ldr	r2, [pc, #112]	; (8000494 <MX_I2C1_Init+0x78>)
 8000424:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 8000426:	4b1a      	ldr	r3, [pc, #104]	; (8000490 <MX_I2C1_Init+0x74>)
 8000428:	4a1b      	ldr	r2, [pc, #108]	; (8000498 <MX_I2C1_Init+0x7c>)
 800042a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 120;
 800042c:	4b18      	ldr	r3, [pc, #96]	; (8000490 <MX_I2C1_Init+0x74>)
 800042e:	2278      	movs	r2, #120	; 0x78
 8000430:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000432:	4b17      	ldr	r3, [pc, #92]	; (8000490 <MX_I2C1_Init+0x74>)
 8000434:	2201      	movs	r2, #1
 8000436:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000438:	4b15      	ldr	r3, [pc, #84]	; (8000490 <MX_I2C1_Init+0x74>)
 800043a:	2200      	movs	r2, #0
 800043c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800043e:	4b14      	ldr	r3, [pc, #80]	; (8000490 <MX_I2C1_Init+0x74>)
 8000440:	2200      	movs	r2, #0
 8000442:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000444:	4b12      	ldr	r3, [pc, #72]	; (8000490 <MX_I2C1_Init+0x74>)
 8000446:	2200      	movs	r2, #0
 8000448:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800044a:	4b11      	ldr	r3, [pc, #68]	; (8000490 <MX_I2C1_Init+0x74>)
 800044c:	2200      	movs	r2, #0
 800044e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000450:	4b0f      	ldr	r3, [pc, #60]	; (8000490 <MX_I2C1_Init+0x74>)
 8000452:	2200      	movs	r2, #0
 8000454:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000456:	4b0e      	ldr	r3, [pc, #56]	; (8000490 <MX_I2C1_Init+0x74>)
 8000458:	0018      	movs	r0, r3
 800045a:	f000 ffb5 	bl	80013c8 <HAL_I2C_Init>
 800045e:	1e03      	subs	r3, r0, #0
 8000460:	d001      	beq.n	8000466 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000462:	f000 f94d 	bl	8000700 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000466:	4b0a      	ldr	r3, [pc, #40]	; (8000490 <MX_I2C1_Init+0x74>)
 8000468:	2100      	movs	r1, #0
 800046a:	0018      	movs	r0, r3
 800046c:	f001 f842 	bl	80014f4 <HAL_I2CEx_ConfigAnalogFilter>
 8000470:	1e03      	subs	r3, r0, #0
 8000472:	d001      	beq.n	8000478 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000474:	f000 f944 	bl	8000700 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000478:	4b05      	ldr	r3, [pc, #20]	; (8000490 <MX_I2C1_Init+0x74>)
 800047a:	2100      	movs	r1, #0
 800047c:	0018      	movs	r0, r3
 800047e:	f001 f885 	bl	800158c <HAL_I2CEx_ConfigDigitalFilter>
 8000482:	1e03      	subs	r3, r0, #0
 8000484:	d001      	beq.n	800048a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000486:	f000 f93b 	bl	8000700 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}
 8000490:	20000028 	.word	0x20000028
 8000494:	40005400 	.word	0x40005400
 8000498:	0000020b 	.word	0x0000020b

0800049c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b096      	sub	sp, #88	; 0x58
 80004a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004a2:	2348      	movs	r3, #72	; 0x48
 80004a4:	18fb      	adds	r3, r7, r3
 80004a6:	0018      	movs	r0, r3
 80004a8:	2310      	movs	r3, #16
 80004aa:	001a      	movs	r2, r3
 80004ac:	2100      	movs	r1, #0
 80004ae:	f002 fce7 	bl	8002e80 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004b2:	2340      	movs	r3, #64	; 0x40
 80004b4:	18fb      	adds	r3, r7, r3
 80004b6:	0018      	movs	r0, r3
 80004b8:	2308      	movs	r3, #8
 80004ba:	001a      	movs	r2, r3
 80004bc:	2100      	movs	r1, #0
 80004be:	f002 fcdf 	bl	8002e80 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004c2:	2324      	movs	r3, #36	; 0x24
 80004c4:	18fb      	adds	r3, r7, r3
 80004c6:	0018      	movs	r0, r3
 80004c8:	231c      	movs	r3, #28
 80004ca:	001a      	movs	r2, r3
 80004cc:	2100      	movs	r1, #0
 80004ce:	f002 fcd7 	bl	8002e80 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80004d2:	1d3b      	adds	r3, r7, #4
 80004d4:	0018      	movs	r0, r3
 80004d6:	2320      	movs	r3, #32
 80004d8:	001a      	movs	r2, r3
 80004da:	2100      	movs	r1, #0
 80004dc:	f002 fcd0 	bl	8002e80 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80004e0:	4b44      	ldr	r3, [pc, #272]	; (80005f4 <MX_TIM1_Init+0x158>)
 80004e2:	4a45      	ldr	r2, [pc, #276]	; (80005f8 <MX_TIM1_Init+0x15c>)
 80004e4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80004e6:	4b43      	ldr	r3, [pc, #268]	; (80005f4 <MX_TIM1_Init+0x158>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004ec:	4b41      	ldr	r3, [pc, #260]	; (80005f4 <MX_TIM1_Init+0x158>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7000;
 80004f2:	4b40      	ldr	r3, [pc, #256]	; (80005f4 <MX_TIM1_Init+0x158>)
 80004f4:	4a41      	ldr	r2, [pc, #260]	; (80005fc <MX_TIM1_Init+0x160>)
 80004f6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004f8:	4b3e      	ldr	r3, [pc, #248]	; (80005f4 <MX_TIM1_Init+0x158>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80004fe:	4b3d      	ldr	r3, [pc, #244]	; (80005f4 <MX_TIM1_Init+0x158>)
 8000500:	2200      	movs	r2, #0
 8000502:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000504:	4b3b      	ldr	r3, [pc, #236]	; (80005f4 <MX_TIM1_Init+0x158>)
 8000506:	2280      	movs	r2, #128	; 0x80
 8000508:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800050a:	4b3a      	ldr	r3, [pc, #232]	; (80005f4 <MX_TIM1_Init+0x158>)
 800050c:	0018      	movs	r0, r3
 800050e:	f001 fdb9 	bl	8002084 <HAL_TIM_Base_Init>
 8000512:	1e03      	subs	r3, r0, #0
 8000514:	d001      	beq.n	800051a <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8000516:	f000 f8f3 	bl	8000700 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800051a:	2148      	movs	r1, #72	; 0x48
 800051c:	187b      	adds	r3, r7, r1
 800051e:	2280      	movs	r2, #128	; 0x80
 8000520:	0152      	lsls	r2, r2, #5
 8000522:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000524:	187a      	adds	r2, r7, r1
 8000526:	4b33      	ldr	r3, [pc, #204]	; (80005f4 <MX_TIM1_Init+0x158>)
 8000528:	0011      	movs	r1, r2
 800052a:	0018      	movs	r0, r3
 800052c:	f001 ffca 	bl	80024c4 <HAL_TIM_ConfigClockSource>
 8000530:	1e03      	subs	r3, r0, #0
 8000532:	d001      	beq.n	8000538 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000534:	f000 f8e4 	bl	8000700 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000538:	4b2e      	ldr	r3, [pc, #184]	; (80005f4 <MX_TIM1_Init+0x158>)
 800053a:	0018      	movs	r0, r3
 800053c:	f001 fdf2 	bl	8002124 <HAL_TIM_PWM_Init>
 8000540:	1e03      	subs	r3, r0, #0
 8000542:	d001      	beq.n	8000548 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8000544:	f000 f8dc 	bl	8000700 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000548:	2140      	movs	r1, #64	; 0x40
 800054a:	187b      	adds	r3, r7, r1
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000550:	187b      	adds	r3, r7, r1
 8000552:	2200      	movs	r2, #0
 8000554:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000556:	187a      	adds	r2, r7, r1
 8000558:	4b26      	ldr	r3, [pc, #152]	; (80005f4 <MX_TIM1_Init+0x158>)
 800055a:	0011      	movs	r1, r2
 800055c:	0018      	movs	r0, r3
 800055e:	f002 fbb5 	bl	8002ccc <HAL_TIMEx_MasterConfigSynchronization>
 8000562:	1e03      	subs	r3, r0, #0
 8000564:	d001      	beq.n	800056a <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 8000566:	f000 f8cb 	bl	8000700 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800056a:	2124      	movs	r1, #36	; 0x24
 800056c:	187b      	adds	r3, r7, r1
 800056e:	2260      	movs	r2, #96	; 0x60
 8000570:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000572:	187b      	adds	r3, r7, r1
 8000574:	2200      	movs	r2, #0
 8000576:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000578:	187b      	adds	r3, r7, r1
 800057a:	2200      	movs	r2, #0
 800057c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800057e:	187b      	adds	r3, r7, r1
 8000580:	2200      	movs	r2, #0
 8000582:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000584:	187b      	adds	r3, r7, r1
 8000586:	2200      	movs	r2, #0
 8000588:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800058a:	187b      	adds	r3, r7, r1
 800058c:	2200      	movs	r2, #0
 800058e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000590:	1879      	adds	r1, r7, r1
 8000592:	4b18      	ldr	r3, [pc, #96]	; (80005f4 <MX_TIM1_Init+0x158>)
 8000594:	220c      	movs	r2, #12
 8000596:	0018      	movs	r0, r3
 8000598:	f001 fece 	bl	8002338 <HAL_TIM_PWM_ConfigChannel>
 800059c:	1e03      	subs	r3, r0, #0
 800059e:	d001      	beq.n	80005a4 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 80005a0:	f000 f8ae 	bl	8000700 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80005a4:	1d3b      	adds	r3, r7, #4
 80005a6:	2200      	movs	r2, #0
 80005a8:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80005aa:	1d3b      	adds	r3, r7, #4
 80005ac:	2200      	movs	r2, #0
 80005ae:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80005b0:	1d3b      	adds	r3, r7, #4
 80005b2:	2200      	movs	r2, #0
 80005b4:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80005b6:	1d3b      	adds	r3, r7, #4
 80005b8:	2200      	movs	r2, #0
 80005ba:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80005bc:	1d3b      	adds	r3, r7, #4
 80005be:	2200      	movs	r2, #0
 80005c0:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80005c2:	1d3b      	adds	r3, r7, #4
 80005c4:	2280      	movs	r2, #128	; 0x80
 80005c6:	0192      	lsls	r2, r2, #6
 80005c8:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80005ca:	1d3b      	adds	r3, r7, #4
 80005cc:	2200      	movs	r2, #0
 80005ce:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80005d0:	1d3a      	adds	r2, r7, #4
 80005d2:	4b08      	ldr	r3, [pc, #32]	; (80005f4 <MX_TIM1_Init+0x158>)
 80005d4:	0011      	movs	r1, r2
 80005d6:	0018      	movs	r0, r3
 80005d8:	f002 fbd0 	bl	8002d7c <HAL_TIMEx_ConfigBreakDeadTime>
 80005dc:	1e03      	subs	r3, r0, #0
 80005de:	d001      	beq.n	80005e4 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 80005e0:	f000 f88e 	bl	8000700 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80005e4:	4b03      	ldr	r3, [pc, #12]	; (80005f4 <MX_TIM1_Init+0x158>)
 80005e6:	0018      	movs	r0, r3
 80005e8:	f000 f968 	bl	80008bc <HAL_TIM_MspPostInit>

}
 80005ec:	46c0      	nop			; (mov r8, r8)
 80005ee:	46bd      	mov	sp, r7
 80005f0:	b016      	add	sp, #88	; 0x58
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	20000074 	.word	0x20000074
 80005f8:	40012c00 	.word	0x40012c00
 80005fc:	00001b58 	.word	0x00001b58

08000600 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000600:	b590      	push	{r4, r7, lr}
 8000602:	b089      	sub	sp, #36	; 0x24
 8000604:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000606:	240c      	movs	r4, #12
 8000608:	193b      	adds	r3, r7, r4
 800060a:	0018      	movs	r0, r3
 800060c:	2314      	movs	r3, #20
 800060e:	001a      	movs	r2, r3
 8000610:	2100      	movs	r1, #0
 8000612:	f002 fc35 	bl	8002e80 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000616:	4b36      	ldr	r3, [pc, #216]	; (80006f0 <MX_GPIO_Init+0xf0>)
 8000618:	695a      	ldr	r2, [r3, #20]
 800061a:	4b35      	ldr	r3, [pc, #212]	; (80006f0 <MX_GPIO_Init+0xf0>)
 800061c:	2180      	movs	r1, #128	; 0x80
 800061e:	0309      	lsls	r1, r1, #12
 8000620:	430a      	orrs	r2, r1
 8000622:	615a      	str	r2, [r3, #20]
 8000624:	4b32      	ldr	r3, [pc, #200]	; (80006f0 <MX_GPIO_Init+0xf0>)
 8000626:	695a      	ldr	r2, [r3, #20]
 8000628:	2380      	movs	r3, #128	; 0x80
 800062a:	031b      	lsls	r3, r3, #12
 800062c:	4013      	ands	r3, r2
 800062e:	60bb      	str	r3, [r7, #8]
 8000630:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000632:	4b2f      	ldr	r3, [pc, #188]	; (80006f0 <MX_GPIO_Init+0xf0>)
 8000634:	695a      	ldr	r2, [r3, #20]
 8000636:	4b2e      	ldr	r3, [pc, #184]	; (80006f0 <MX_GPIO_Init+0xf0>)
 8000638:	2180      	movs	r1, #128	; 0x80
 800063a:	0289      	lsls	r1, r1, #10
 800063c:	430a      	orrs	r2, r1
 800063e:	615a      	str	r2, [r3, #20]
 8000640:	4b2b      	ldr	r3, [pc, #172]	; (80006f0 <MX_GPIO_Init+0xf0>)
 8000642:	695a      	ldr	r2, [r3, #20]
 8000644:	2380      	movs	r3, #128	; 0x80
 8000646:	029b      	lsls	r3, r3, #10
 8000648:	4013      	ands	r3, r2
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800064e:	4b28      	ldr	r3, [pc, #160]	; (80006f0 <MX_GPIO_Init+0xf0>)
 8000650:	695a      	ldr	r2, [r3, #20]
 8000652:	4b27      	ldr	r3, [pc, #156]	; (80006f0 <MX_GPIO_Init+0xf0>)
 8000654:	2180      	movs	r1, #128	; 0x80
 8000656:	02c9      	lsls	r1, r1, #11
 8000658:	430a      	orrs	r2, r1
 800065a:	615a      	str	r2, [r3, #20]
 800065c:	4b24      	ldr	r3, [pc, #144]	; (80006f0 <MX_GPIO_Init+0xf0>)
 800065e:	695a      	ldr	r2, [r3, #20]
 8000660:	2380      	movs	r3, #128	; 0x80
 8000662:	02db      	lsls	r3, r3, #11
 8000664:	4013      	ands	r3, r2
 8000666:	603b      	str	r3, [r7, #0]
 8000668:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_11
 800066a:	4922      	ldr	r1, [pc, #136]	; (80006f4 <MX_GPIO_Init+0xf4>)
 800066c:	4b22      	ldr	r3, [pc, #136]	; (80006f8 <MX_GPIO_Init+0xf8>)
 800066e:	2200      	movs	r2, #0
 8000670:	0018      	movs	r0, r3
 8000672:	f000 fe8b 	bl	800138c <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000676:	193b      	adds	r3, r7, r4
 8000678:	221f      	movs	r2, #31
 800067a:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800067c:	193b      	adds	r3, r7, r4
 800067e:	2200      	movs	r2, #0
 8000680:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000682:	193b      	adds	r3, r7, r4
 8000684:	2200      	movs	r2, #0
 8000686:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000688:	193b      	adds	r3, r7, r4
 800068a:	4a1c      	ldr	r2, [pc, #112]	; (80006fc <MX_GPIO_Init+0xfc>)
 800068c:	0019      	movs	r1, r3
 800068e:	0010      	movs	r0, r2
 8000690:	f000 fd0c 	bl	80010ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB11
                           PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_11
 8000694:	193b      	adds	r3, r7, r4
 8000696:	4a17      	ldr	r2, [pc, #92]	; (80006f4 <MX_GPIO_Init+0xf4>)
 8000698:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800069a:	193b      	adds	r3, r7, r4
 800069c:	2201      	movs	r2, #1
 800069e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a0:	193b      	adds	r3, r7, r4
 80006a2:	2200      	movs	r2, #0
 80006a4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a6:	193b      	adds	r3, r7, r4
 80006a8:	2200      	movs	r2, #0
 80006aa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ac:	193b      	adds	r3, r7, r4
 80006ae:	4a12      	ldr	r2, [pc, #72]	; (80006f8 <MX_GPIO_Init+0xf8>)
 80006b0:	0019      	movs	r1, r3
 80006b2:	0010      	movs	r0, r2
 80006b4:	f000 fcfa 	bl	80010ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80006b8:	0021      	movs	r1, r4
 80006ba:	187b      	adds	r3, r7, r1
 80006bc:	22e0      	movs	r2, #224	; 0xe0
 80006be:	0212      	lsls	r2, r2, #8
 80006c0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c2:	187b      	adds	r3, r7, r1
 80006c4:	2202      	movs	r2, #2
 80006c6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c8:	187b      	adds	r3, r7, r1
 80006ca:	2200      	movs	r2, #0
 80006cc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006ce:	187b      	adds	r3, r7, r1
 80006d0:	2203      	movs	r2, #3
 80006d2:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 80006d4:	187b      	adds	r3, r7, r1
 80006d6:	2200      	movs	r2, #0
 80006d8:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006da:	187b      	adds	r3, r7, r1
 80006dc:	4a06      	ldr	r2, [pc, #24]	; (80006f8 <MX_GPIO_Init+0xf8>)
 80006de:	0019      	movs	r1, r3
 80006e0:	0010      	movs	r0, r2
 80006e2:	f000 fce3 	bl	80010ac <HAL_GPIO_Init>

}
 80006e6:	46c0      	nop			; (mov r8, r8)
 80006e8:	46bd      	mov	sp, r7
 80006ea:	b009      	add	sp, #36	; 0x24
 80006ec:	bd90      	pop	{r4, r7, pc}
 80006ee:	46c0      	nop			; (mov r8, r8)
 80006f0:	40021000 	.word	0x40021000
 80006f4:	00001807 	.word	0x00001807
 80006f8:	48000400 	.word	0x48000400
 80006fc:	48000800 	.word	0x48000800

08000700 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000704:	b672      	cpsid	i
}
 8000706:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000708:	e7fe      	b.n	8000708 <Error_Handler+0x8>
	...

0800070c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000712:	4b0f      	ldr	r3, [pc, #60]	; (8000750 <HAL_MspInit+0x44>)
 8000714:	699a      	ldr	r2, [r3, #24]
 8000716:	4b0e      	ldr	r3, [pc, #56]	; (8000750 <HAL_MspInit+0x44>)
 8000718:	2101      	movs	r1, #1
 800071a:	430a      	orrs	r2, r1
 800071c:	619a      	str	r2, [r3, #24]
 800071e:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <HAL_MspInit+0x44>)
 8000720:	699b      	ldr	r3, [r3, #24]
 8000722:	2201      	movs	r2, #1
 8000724:	4013      	ands	r3, r2
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800072a:	4b09      	ldr	r3, [pc, #36]	; (8000750 <HAL_MspInit+0x44>)
 800072c:	69da      	ldr	r2, [r3, #28]
 800072e:	4b08      	ldr	r3, [pc, #32]	; (8000750 <HAL_MspInit+0x44>)
 8000730:	2180      	movs	r1, #128	; 0x80
 8000732:	0549      	lsls	r1, r1, #21
 8000734:	430a      	orrs	r2, r1
 8000736:	61da      	str	r2, [r3, #28]
 8000738:	4b05      	ldr	r3, [pc, #20]	; (8000750 <HAL_MspInit+0x44>)
 800073a:	69da      	ldr	r2, [r3, #28]
 800073c:	2380      	movs	r3, #128	; 0x80
 800073e:	055b      	lsls	r3, r3, #21
 8000740:	4013      	ands	r3, r2
 8000742:	603b      	str	r3, [r7, #0]
 8000744:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000746:	46c0      	nop			; (mov r8, r8)
 8000748:	46bd      	mov	sp, r7
 800074a:	b002      	add	sp, #8
 800074c:	bd80      	pop	{r7, pc}
 800074e:	46c0      	nop			; (mov r8, r8)
 8000750:	40021000 	.word	0x40021000

08000754 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000754:	b590      	push	{r4, r7, lr}
 8000756:	b08b      	sub	sp, #44	; 0x2c
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075c:	2414      	movs	r4, #20
 800075e:	193b      	adds	r3, r7, r4
 8000760:	0018      	movs	r0, r3
 8000762:	2314      	movs	r3, #20
 8000764:	001a      	movs	r2, r3
 8000766:	2100      	movs	r1, #0
 8000768:	f002 fb8a 	bl	8002e80 <memset>
  if(hadc->Instance==ADC1)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a19      	ldr	r2, [pc, #100]	; (80007d8 <HAL_ADC_MspInit+0x84>)
 8000772:	4293      	cmp	r3, r2
 8000774:	d12b      	bne.n	80007ce <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000776:	4b19      	ldr	r3, [pc, #100]	; (80007dc <HAL_ADC_MspInit+0x88>)
 8000778:	699a      	ldr	r2, [r3, #24]
 800077a:	4b18      	ldr	r3, [pc, #96]	; (80007dc <HAL_ADC_MspInit+0x88>)
 800077c:	2180      	movs	r1, #128	; 0x80
 800077e:	0089      	lsls	r1, r1, #2
 8000780:	430a      	orrs	r2, r1
 8000782:	619a      	str	r2, [r3, #24]
 8000784:	4b15      	ldr	r3, [pc, #84]	; (80007dc <HAL_ADC_MspInit+0x88>)
 8000786:	699a      	ldr	r2, [r3, #24]
 8000788:	2380      	movs	r3, #128	; 0x80
 800078a:	009b      	lsls	r3, r3, #2
 800078c:	4013      	ands	r3, r2
 800078e:	613b      	str	r3, [r7, #16]
 8000790:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000792:	4b12      	ldr	r3, [pc, #72]	; (80007dc <HAL_ADC_MspInit+0x88>)
 8000794:	695a      	ldr	r2, [r3, #20]
 8000796:	4b11      	ldr	r3, [pc, #68]	; (80007dc <HAL_ADC_MspInit+0x88>)
 8000798:	2180      	movs	r1, #128	; 0x80
 800079a:	0289      	lsls	r1, r1, #10
 800079c:	430a      	orrs	r2, r1
 800079e:	615a      	str	r2, [r3, #20]
 80007a0:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <HAL_ADC_MspInit+0x88>)
 80007a2:	695a      	ldr	r2, [r3, #20]
 80007a4:	2380      	movs	r3, #128	; 0x80
 80007a6:	029b      	lsls	r3, r3, #10
 80007a8:	4013      	ands	r3, r2
 80007aa:	60fb      	str	r3, [r7, #12]
 80007ac:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007ae:	193b      	adds	r3, r7, r4
 80007b0:	2201      	movs	r2, #1
 80007b2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007b4:	193b      	adds	r3, r7, r4
 80007b6:	2203      	movs	r2, #3
 80007b8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ba:	193b      	adds	r3, r7, r4
 80007bc:	2200      	movs	r2, #0
 80007be:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c0:	193a      	adds	r2, r7, r4
 80007c2:	2390      	movs	r3, #144	; 0x90
 80007c4:	05db      	lsls	r3, r3, #23
 80007c6:	0011      	movs	r1, r2
 80007c8:	0018      	movs	r0, r3
 80007ca:	f000 fc6f 	bl	80010ac <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80007ce:	46c0      	nop			; (mov r8, r8)
 80007d0:	46bd      	mov	sp, r7
 80007d2:	b00b      	add	sp, #44	; 0x2c
 80007d4:	bd90      	pop	{r4, r7, pc}
 80007d6:	46c0      	nop			; (mov r8, r8)
 80007d8:	40012400 	.word	0x40012400
 80007dc:	40021000 	.word	0x40021000

080007e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007e0:	b590      	push	{r4, r7, lr}
 80007e2:	b08b      	sub	sp, #44	; 0x2c
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e8:	2414      	movs	r4, #20
 80007ea:	193b      	adds	r3, r7, r4
 80007ec:	0018      	movs	r0, r3
 80007ee:	2314      	movs	r3, #20
 80007f0:	001a      	movs	r2, r3
 80007f2:	2100      	movs	r1, #0
 80007f4:	f002 fb44 	bl	8002e80 <memset>
  if(hi2c->Instance==I2C1)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a1c      	ldr	r2, [pc, #112]	; (8000870 <HAL_I2C_MspInit+0x90>)
 80007fe:	4293      	cmp	r3, r2
 8000800:	d132      	bne.n	8000868 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000802:	4b1c      	ldr	r3, [pc, #112]	; (8000874 <HAL_I2C_MspInit+0x94>)
 8000804:	695a      	ldr	r2, [r3, #20]
 8000806:	4b1b      	ldr	r3, [pc, #108]	; (8000874 <HAL_I2C_MspInit+0x94>)
 8000808:	2180      	movs	r1, #128	; 0x80
 800080a:	02c9      	lsls	r1, r1, #11
 800080c:	430a      	orrs	r2, r1
 800080e:	615a      	str	r2, [r3, #20]
 8000810:	4b18      	ldr	r3, [pc, #96]	; (8000874 <HAL_I2C_MspInit+0x94>)
 8000812:	695a      	ldr	r2, [r3, #20]
 8000814:	2380      	movs	r3, #128	; 0x80
 8000816:	02db      	lsls	r3, r3, #11
 8000818:	4013      	ands	r3, r2
 800081a:	613b      	str	r3, [r7, #16]
 800081c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800081e:	193b      	adds	r3, r7, r4
 8000820:	22c0      	movs	r2, #192	; 0xc0
 8000822:	0092      	lsls	r2, r2, #2
 8000824:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000826:	0021      	movs	r1, r4
 8000828:	187b      	adds	r3, r7, r1
 800082a:	2212      	movs	r2, #18
 800082c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082e:	187b      	adds	r3, r7, r1
 8000830:	2200      	movs	r2, #0
 8000832:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000834:	187b      	adds	r3, r7, r1
 8000836:	2203      	movs	r2, #3
 8000838:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800083a:	187b      	adds	r3, r7, r1
 800083c:	2201      	movs	r2, #1
 800083e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000840:	187b      	adds	r3, r7, r1
 8000842:	4a0d      	ldr	r2, [pc, #52]	; (8000878 <HAL_I2C_MspInit+0x98>)
 8000844:	0019      	movs	r1, r3
 8000846:	0010      	movs	r0, r2
 8000848:	f000 fc30 	bl	80010ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800084c:	4b09      	ldr	r3, [pc, #36]	; (8000874 <HAL_I2C_MspInit+0x94>)
 800084e:	69da      	ldr	r2, [r3, #28]
 8000850:	4b08      	ldr	r3, [pc, #32]	; (8000874 <HAL_I2C_MspInit+0x94>)
 8000852:	2180      	movs	r1, #128	; 0x80
 8000854:	0389      	lsls	r1, r1, #14
 8000856:	430a      	orrs	r2, r1
 8000858:	61da      	str	r2, [r3, #28]
 800085a:	4b06      	ldr	r3, [pc, #24]	; (8000874 <HAL_I2C_MspInit+0x94>)
 800085c:	69da      	ldr	r2, [r3, #28]
 800085e:	2380      	movs	r3, #128	; 0x80
 8000860:	039b      	lsls	r3, r3, #14
 8000862:	4013      	ands	r3, r2
 8000864:	60fb      	str	r3, [r7, #12]
 8000866:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000868:	46c0      	nop			; (mov r8, r8)
 800086a:	46bd      	mov	sp, r7
 800086c:	b00b      	add	sp, #44	; 0x2c
 800086e:	bd90      	pop	{r4, r7, pc}
 8000870:	40005400 	.word	0x40005400
 8000874:	40021000 	.word	0x40021000
 8000878:	48000400 	.word	0x48000400

0800087c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a0a      	ldr	r2, [pc, #40]	; (80008b4 <HAL_TIM_Base_MspInit+0x38>)
 800088a:	4293      	cmp	r3, r2
 800088c:	d10d      	bne.n	80008aa <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800088e:	4b0a      	ldr	r3, [pc, #40]	; (80008b8 <HAL_TIM_Base_MspInit+0x3c>)
 8000890:	699a      	ldr	r2, [r3, #24]
 8000892:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <HAL_TIM_Base_MspInit+0x3c>)
 8000894:	2180      	movs	r1, #128	; 0x80
 8000896:	0109      	lsls	r1, r1, #4
 8000898:	430a      	orrs	r2, r1
 800089a:	619a      	str	r2, [r3, #24]
 800089c:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <HAL_TIM_Base_MspInit+0x3c>)
 800089e:	699a      	ldr	r2, [r3, #24]
 80008a0:	2380      	movs	r3, #128	; 0x80
 80008a2:	011b      	lsls	r3, r3, #4
 80008a4:	4013      	ands	r3, r2
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80008aa:	46c0      	nop			; (mov r8, r8)
 80008ac:	46bd      	mov	sp, r7
 80008ae:	b004      	add	sp, #16
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	46c0      	nop			; (mov r8, r8)
 80008b4:	40012c00 	.word	0x40012c00
 80008b8:	40021000 	.word	0x40021000

080008bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80008bc:	b590      	push	{r4, r7, lr}
 80008be:	b089      	sub	sp, #36	; 0x24
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c4:	240c      	movs	r4, #12
 80008c6:	193b      	adds	r3, r7, r4
 80008c8:	0018      	movs	r0, r3
 80008ca:	2314      	movs	r3, #20
 80008cc:	001a      	movs	r2, r3
 80008ce:	2100      	movs	r1, #0
 80008d0:	f002 fad6 	bl	8002e80 <memset>
  if(htim->Instance==TIM1)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a16      	ldr	r2, [pc, #88]	; (8000934 <HAL_TIM_MspPostInit+0x78>)
 80008da:	4293      	cmp	r3, r2
 80008dc:	d125      	bne.n	800092a <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008de:	4b16      	ldr	r3, [pc, #88]	; (8000938 <HAL_TIM_MspPostInit+0x7c>)
 80008e0:	695a      	ldr	r2, [r3, #20]
 80008e2:	4b15      	ldr	r3, [pc, #84]	; (8000938 <HAL_TIM_MspPostInit+0x7c>)
 80008e4:	2180      	movs	r1, #128	; 0x80
 80008e6:	0289      	lsls	r1, r1, #10
 80008e8:	430a      	orrs	r2, r1
 80008ea:	615a      	str	r2, [r3, #20]
 80008ec:	4b12      	ldr	r3, [pc, #72]	; (8000938 <HAL_TIM_MspPostInit+0x7c>)
 80008ee:	695a      	ldr	r2, [r3, #20]
 80008f0:	2380      	movs	r3, #128	; 0x80
 80008f2:	029b      	lsls	r3, r3, #10
 80008f4:	4013      	ands	r3, r2
 80008f6:	60bb      	str	r3, [r7, #8]
 80008f8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80008fa:	193b      	adds	r3, r7, r4
 80008fc:	2280      	movs	r2, #128	; 0x80
 80008fe:	0112      	lsls	r2, r2, #4
 8000900:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000902:	0021      	movs	r1, r4
 8000904:	187b      	adds	r3, r7, r1
 8000906:	2202      	movs	r2, #2
 8000908:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	187b      	adds	r3, r7, r1
 800090c:	2200      	movs	r2, #0
 800090e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000910:	187b      	adds	r3, r7, r1
 8000912:	2200      	movs	r2, #0
 8000914:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000916:	187b      	adds	r3, r7, r1
 8000918:	2202      	movs	r2, #2
 800091a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800091c:	187a      	adds	r2, r7, r1
 800091e:	2390      	movs	r3, #144	; 0x90
 8000920:	05db      	lsls	r3, r3, #23
 8000922:	0011      	movs	r1, r2
 8000924:	0018      	movs	r0, r3
 8000926:	f000 fbc1 	bl	80010ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800092a:	46c0      	nop			; (mov r8, r8)
 800092c:	46bd      	mov	sp, r7
 800092e:	b009      	add	sp, #36	; 0x24
 8000930:	bd90      	pop	{r4, r7, pc}
 8000932:	46c0      	nop			; (mov r8, r8)
 8000934:	40012c00 	.word	0x40012c00
 8000938:	40021000 	.word	0x40021000

0800093c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000940:	e7fe      	b.n	8000940 <NMI_Handler+0x4>

08000942 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000942:	b580      	push	{r7, lr}
 8000944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000946:	e7fe      	b.n	8000946 <HardFault_Handler+0x4>

08000948 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800094c:	46c0      	nop			; (mov r8, r8)
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}

08000952 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000952:	b580      	push	{r7, lr}
 8000954:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000956:	46c0      	nop			; (mov r8, r8)
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}

0800095c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000960:	f000 f87a 	bl	8000a58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000964:	46c0      	nop			; (mov r8, r8)
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}

0800096a <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800096a:	b580      	push	{r7, lr}
 800096c:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800096e:	46c0      	nop			; (mov r8, r8)
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}

08000974 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000974:	480d      	ldr	r0, [pc, #52]	; (80009ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000976:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000978:	480d      	ldr	r0, [pc, #52]	; (80009b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800097a:	490e      	ldr	r1, [pc, #56]	; (80009b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800097c:	4a0e      	ldr	r2, [pc, #56]	; (80009b8 <LoopForever+0xe>)
  movs r3, #0
 800097e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000980:	e002      	b.n	8000988 <LoopCopyDataInit>

08000982 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000982:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000984:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000986:	3304      	adds	r3, #4

08000988 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000988:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800098a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800098c:	d3f9      	bcc.n	8000982 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800098e:	4a0b      	ldr	r2, [pc, #44]	; (80009bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000990:	4c0b      	ldr	r4, [pc, #44]	; (80009c0 <LoopForever+0x16>)
  movs r3, #0
 8000992:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000994:	e001      	b.n	800099a <LoopFillZerobss>

08000996 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000996:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000998:	3204      	adds	r2, #4

0800099a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800099a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800099c:	d3fb      	bcc.n	8000996 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800099e:	f7ff ffe4 	bl	800096a <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80009a2:	f002 fa49 	bl	8002e38 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009a6:	f7ff fc3b 	bl	8000220 <main>

080009aa <LoopForever>:

LoopForever:
    b LoopForever
 80009aa:	e7fe      	b.n	80009aa <LoopForever>
  ldr   r0, =_estack
 80009ac:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80009b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009b4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009b8:	08002ee0 	.word	0x08002ee0
  ldr r2, =_sbss
 80009bc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009c0:	20000100 	.word	0x20000100

080009c4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009c4:	e7fe      	b.n	80009c4 <ADC1_IRQHandler>
	...

080009c8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009cc:	4b07      	ldr	r3, [pc, #28]	; (80009ec <HAL_Init+0x24>)
 80009ce:	681a      	ldr	r2, [r3, #0]
 80009d0:	4b06      	ldr	r3, [pc, #24]	; (80009ec <HAL_Init+0x24>)
 80009d2:	2110      	movs	r1, #16
 80009d4:	430a      	orrs	r2, r1
 80009d6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80009d8:	2003      	movs	r0, #3
 80009da:	f000 f809 	bl	80009f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009de:	f7ff fe95 	bl	800070c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009e2:	2300      	movs	r3, #0
}
 80009e4:	0018      	movs	r0, r3
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	46c0      	nop			; (mov r8, r8)
 80009ec:	40022000 	.word	0x40022000

080009f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009f0:	b590      	push	{r4, r7, lr}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009f8:	4b14      	ldr	r3, [pc, #80]	; (8000a4c <HAL_InitTick+0x5c>)
 80009fa:	681c      	ldr	r4, [r3, #0]
 80009fc:	4b14      	ldr	r3, [pc, #80]	; (8000a50 <HAL_InitTick+0x60>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	0019      	movs	r1, r3
 8000a02:	23fa      	movs	r3, #250	; 0xfa
 8000a04:	0098      	lsls	r0, r3, #2
 8000a06:	f7ff fb7f 	bl	8000108 <__udivsi3>
 8000a0a:	0003      	movs	r3, r0
 8000a0c:	0019      	movs	r1, r3
 8000a0e:	0020      	movs	r0, r4
 8000a10:	f7ff fb7a 	bl	8000108 <__udivsi3>
 8000a14:	0003      	movs	r3, r0
 8000a16:	0018      	movs	r0, r3
 8000a18:	f000 fb3b 	bl	8001092 <HAL_SYSTICK_Config>
 8000a1c:	1e03      	subs	r3, r0, #0
 8000a1e:	d001      	beq.n	8000a24 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000a20:	2301      	movs	r3, #1
 8000a22:	e00f      	b.n	8000a44 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2b03      	cmp	r3, #3
 8000a28:	d80b      	bhi.n	8000a42 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a2a:	6879      	ldr	r1, [r7, #4]
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	425b      	negs	r3, r3
 8000a30:	2200      	movs	r2, #0
 8000a32:	0018      	movs	r0, r3
 8000a34:	f000 fb18 	bl	8001068 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a38:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <HAL_InitTick+0x64>)
 8000a3a:	687a      	ldr	r2, [r7, #4]
 8000a3c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	e000      	b.n	8000a44 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000a42:	2301      	movs	r3, #1
}
 8000a44:	0018      	movs	r0, r3
 8000a46:	46bd      	mov	sp, r7
 8000a48:	b003      	add	sp, #12
 8000a4a:	bd90      	pop	{r4, r7, pc}
 8000a4c:	20000000 	.word	0x20000000
 8000a50:	20000008 	.word	0x20000008
 8000a54:	20000004 	.word	0x20000004

08000a58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a5c:	4b05      	ldr	r3, [pc, #20]	; (8000a74 <HAL_IncTick+0x1c>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	001a      	movs	r2, r3
 8000a62:	4b05      	ldr	r3, [pc, #20]	; (8000a78 <HAL_IncTick+0x20>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	18d2      	adds	r2, r2, r3
 8000a68:	4b03      	ldr	r3, [pc, #12]	; (8000a78 <HAL_IncTick+0x20>)
 8000a6a:	601a      	str	r2, [r3, #0]
}
 8000a6c:	46c0      	nop			; (mov r8, r8)
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	46c0      	nop			; (mov r8, r8)
 8000a74:	20000008 	.word	0x20000008
 8000a78:	200000fc 	.word	0x200000fc

08000a7c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a80:	4b02      	ldr	r3, [pc, #8]	; (8000a8c <HAL_GetTick+0x10>)
 8000a82:	681b      	ldr	r3, [r3, #0]
}
 8000a84:	0018      	movs	r0, r3
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	46c0      	nop			; (mov r8, r8)
 8000a8c:	200000fc 	.word	0x200000fc

08000a90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b084      	sub	sp, #16
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a98:	f7ff fff0 	bl	8000a7c <HAL_GetTick>
 8000a9c:	0003      	movs	r3, r0
 8000a9e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	3301      	adds	r3, #1
 8000aa8:	d005      	beq.n	8000ab6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000aaa:	4b0a      	ldr	r3, [pc, #40]	; (8000ad4 <HAL_Delay+0x44>)
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	001a      	movs	r2, r3
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	189b      	adds	r3, r3, r2
 8000ab4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000ab6:	46c0      	nop			; (mov r8, r8)
 8000ab8:	f7ff ffe0 	bl	8000a7c <HAL_GetTick>
 8000abc:	0002      	movs	r2, r0
 8000abe:	68bb      	ldr	r3, [r7, #8]
 8000ac0:	1ad3      	subs	r3, r2, r3
 8000ac2:	68fa      	ldr	r2, [r7, #12]
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	d8f7      	bhi.n	8000ab8 <HAL_Delay+0x28>
  {
  }
}
 8000ac8:	46c0      	nop			; (mov r8, r8)
 8000aca:	46c0      	nop			; (mov r8, r8)
 8000acc:	46bd      	mov	sp, r7
 8000ace:	b004      	add	sp, #16
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	46c0      	nop			; (mov r8, r8)
 8000ad4:	20000008 	.word	0x20000008

08000ad8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ae0:	230f      	movs	r3, #15
 8000ae2:	18fb      	adds	r3, r7, r3
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d101      	bne.n	8000af6 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8000af2:	2301      	movs	r3, #1
 8000af4:	e125      	b.n	8000d42 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d10a      	bne.n	8000b14 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	2200      	movs	r2, #0
 8000b02:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	2234      	movs	r2, #52	; 0x34
 8000b08:	2100      	movs	r1, #0
 8000b0a:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	0018      	movs	r0, r3
 8000b10:	f7ff fe20 	bl	8000754 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b18:	2210      	movs	r2, #16
 8000b1a:	4013      	ands	r3, r2
 8000b1c:	d000      	beq.n	8000b20 <HAL_ADC_Init+0x48>
 8000b1e:	e103      	b.n	8000d28 <HAL_ADC_Init+0x250>
 8000b20:	230f      	movs	r3, #15
 8000b22:	18fb      	adds	r3, r7, r3
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d000      	beq.n	8000b2c <HAL_ADC_Init+0x54>
 8000b2a:	e0fd      	b.n	8000d28 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	689b      	ldr	r3, [r3, #8]
 8000b32:	2204      	movs	r2, #4
 8000b34:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000b36:	d000      	beq.n	8000b3a <HAL_ADC_Init+0x62>
 8000b38:	e0f6      	b.n	8000d28 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b3e:	4a83      	ldr	r2, [pc, #524]	; (8000d4c <HAL_ADC_Init+0x274>)
 8000b40:	4013      	ands	r3, r2
 8000b42:	2202      	movs	r2, #2
 8000b44:	431a      	orrs	r2, r3
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	689b      	ldr	r3, [r3, #8]
 8000b50:	2203      	movs	r2, #3
 8000b52:	4013      	ands	r3, r2
 8000b54:	2b01      	cmp	r3, #1
 8000b56:	d112      	bne.n	8000b7e <HAL_ADC_Init+0xa6>
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	2201      	movs	r2, #1
 8000b60:	4013      	ands	r3, r2
 8000b62:	2b01      	cmp	r3, #1
 8000b64:	d009      	beq.n	8000b7a <HAL_ADC_Init+0xa2>
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	68da      	ldr	r2, [r3, #12]
 8000b6c:	2380      	movs	r3, #128	; 0x80
 8000b6e:	021b      	lsls	r3, r3, #8
 8000b70:	401a      	ands	r2, r3
 8000b72:	2380      	movs	r3, #128	; 0x80
 8000b74:	021b      	lsls	r3, r3, #8
 8000b76:	429a      	cmp	r2, r3
 8000b78:	d101      	bne.n	8000b7e <HAL_ADC_Init+0xa6>
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	e000      	b.n	8000b80 <HAL_ADC_Init+0xa8>
 8000b7e:	2300      	movs	r3, #0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d116      	bne.n	8000bb2 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	68db      	ldr	r3, [r3, #12]
 8000b8a:	2218      	movs	r2, #24
 8000b8c:	4393      	bics	r3, r2
 8000b8e:	0019      	movs	r1, r3
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	689a      	ldr	r2, [r3, #8]
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	430a      	orrs	r2, r1
 8000b9a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	691b      	ldr	r3, [r3, #16]
 8000ba2:	009b      	lsls	r3, r3, #2
 8000ba4:	0899      	lsrs	r1, r3, #2
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	685a      	ldr	r2, [r3, #4]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	430a      	orrs	r2, r1
 8000bb0:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	68da      	ldr	r2, [r3, #12]
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4964      	ldr	r1, [pc, #400]	; (8000d50 <HAL_ADC_Init+0x278>)
 8000bbe:	400a      	ands	r2, r1
 8000bc0:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	7e1b      	ldrb	r3, [r3, #24]
 8000bc6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	7e5b      	ldrb	r3, [r3, #25]
 8000bcc:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000bce:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	7e9b      	ldrb	r3, [r3, #26]
 8000bd4:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000bd6:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bdc:	2b01      	cmp	r3, #1
 8000bde:	d002      	beq.n	8000be6 <HAL_ADC_Init+0x10e>
 8000be0:	2380      	movs	r3, #128	; 0x80
 8000be2:	015b      	lsls	r3, r3, #5
 8000be4:	e000      	b.n	8000be8 <HAL_ADC_Init+0x110>
 8000be6:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000be8:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000bee:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	691b      	ldr	r3, [r3, #16]
 8000bf4:	2b02      	cmp	r3, #2
 8000bf6:	d101      	bne.n	8000bfc <HAL_ADC_Init+0x124>
 8000bf8:	2304      	movs	r3, #4
 8000bfa:	e000      	b.n	8000bfe <HAL_ADC_Init+0x126>
 8000bfc:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8000bfe:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	2124      	movs	r1, #36	; 0x24
 8000c04:	5c5b      	ldrb	r3, [r3, r1]
 8000c06:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000c08:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000c0a:	68ba      	ldr	r2, [r7, #8]
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	7edb      	ldrb	r3, [r3, #27]
 8000c14:	2b01      	cmp	r3, #1
 8000c16:	d115      	bne.n	8000c44 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	7e9b      	ldrb	r3, [r3, #26]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d105      	bne.n	8000c2c <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	2280      	movs	r2, #128	; 0x80
 8000c24:	0252      	lsls	r2, r2, #9
 8000c26:	4313      	orrs	r3, r2
 8000c28:	60bb      	str	r3, [r7, #8]
 8000c2a:	e00b      	b.n	8000c44 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c30:	2220      	movs	r2, #32
 8000c32:	431a      	orrs	r2, r3
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	431a      	orrs	r2, r3
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	69da      	ldr	r2, [r3, #28]
 8000c48:	23c2      	movs	r3, #194	; 0xc2
 8000c4a:	33ff      	adds	r3, #255	; 0xff
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	d007      	beq.n	8000c60 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	68ba      	ldr	r2, [r7, #8]
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	68d9      	ldr	r1, [r3, #12]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	68ba      	ldr	r2, [r7, #8]
 8000c6c:	430a      	orrs	r2, r1
 8000c6e:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c74:	2380      	movs	r3, #128	; 0x80
 8000c76:	055b      	lsls	r3, r3, #21
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	d01b      	beq.n	8000cb4 <HAL_ADC_Init+0x1dc>
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c80:	2b01      	cmp	r3, #1
 8000c82:	d017      	beq.n	8000cb4 <HAL_ADC_Init+0x1dc>
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c88:	2b02      	cmp	r3, #2
 8000c8a:	d013      	beq.n	8000cb4 <HAL_ADC_Init+0x1dc>
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c90:	2b03      	cmp	r3, #3
 8000c92:	d00f      	beq.n	8000cb4 <HAL_ADC_Init+0x1dc>
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c98:	2b04      	cmp	r3, #4
 8000c9a:	d00b      	beq.n	8000cb4 <HAL_ADC_Init+0x1dc>
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ca0:	2b05      	cmp	r3, #5
 8000ca2:	d007      	beq.n	8000cb4 <HAL_ADC_Init+0x1dc>
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ca8:	2b06      	cmp	r3, #6
 8000caa:	d003      	beq.n	8000cb4 <HAL_ADC_Init+0x1dc>
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cb0:	2b07      	cmp	r3, #7
 8000cb2:	d112      	bne.n	8000cda <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	695a      	ldr	r2, [r3, #20]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	2107      	movs	r1, #7
 8000cc0:	438a      	bics	r2, r1
 8000cc2:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	6959      	ldr	r1, [r3, #20]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cce:	2207      	movs	r2, #7
 8000cd0:	401a      	ands	r2, r3
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	430a      	orrs	r2, r1
 8000cd8:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	68db      	ldr	r3, [r3, #12]
 8000ce0:	4a1c      	ldr	r2, [pc, #112]	; (8000d54 <HAL_ADC_Init+0x27c>)
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	68ba      	ldr	r2, [r7, #8]
 8000ce6:	429a      	cmp	r2, r3
 8000ce8:	d10b      	bne.n	8000d02 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2200      	movs	r2, #0
 8000cee:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cf4:	2203      	movs	r2, #3
 8000cf6:	4393      	bics	r3, r2
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	431a      	orrs	r2, r3
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000d00:	e01c      	b.n	8000d3c <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d06:	2212      	movs	r2, #18
 8000d08:	4393      	bics	r3, r2
 8000d0a:	2210      	movs	r2, #16
 8000d0c:	431a      	orrs	r2, r3
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d16:	2201      	movs	r2, #1
 8000d18:	431a      	orrs	r2, r3
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8000d1e:	230f      	movs	r3, #15
 8000d20:	18fb      	adds	r3, r7, r3
 8000d22:	2201      	movs	r2, #1
 8000d24:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000d26:	e009      	b.n	8000d3c <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d2c:	2210      	movs	r2, #16
 8000d2e:	431a      	orrs	r2, r3
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8000d34:	230f      	movs	r3, #15
 8000d36:	18fb      	adds	r3, r7, r3
 8000d38:	2201      	movs	r2, #1
 8000d3a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000d3c:	230f      	movs	r3, #15
 8000d3e:	18fb      	adds	r3, r7, r3
 8000d40:	781b      	ldrb	r3, [r3, #0]
}
 8000d42:	0018      	movs	r0, r3
 8000d44:	46bd      	mov	sp, r7
 8000d46:	b004      	add	sp, #16
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	46c0      	nop			; (mov r8, r8)
 8000d4c:	fffffefd 	.word	0xfffffefd
 8000d50:	fffe0219 	.word	0xfffe0219
 8000d54:	833fffe7 	.word	0x833fffe7

08000d58 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d62:	230f      	movs	r3, #15
 8000d64:	18fb      	adds	r3, r7, r3
 8000d66:	2200      	movs	r2, #0
 8000d68:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d72:	2380      	movs	r3, #128	; 0x80
 8000d74:	055b      	lsls	r3, r3, #21
 8000d76:	429a      	cmp	r2, r3
 8000d78:	d011      	beq.n	8000d9e <HAL_ADC_ConfigChannel+0x46>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d7e:	2b01      	cmp	r3, #1
 8000d80:	d00d      	beq.n	8000d9e <HAL_ADC_ConfigChannel+0x46>
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d86:	2b02      	cmp	r3, #2
 8000d88:	d009      	beq.n	8000d9e <HAL_ADC_ConfigChannel+0x46>
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d8e:	2b03      	cmp	r3, #3
 8000d90:	d005      	beq.n	8000d9e <HAL_ADC_ConfigChannel+0x46>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d96:	2b04      	cmp	r3, #4
 8000d98:	d001      	beq.n	8000d9e <HAL_ADC_ConfigChannel+0x46>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2234      	movs	r2, #52	; 0x34
 8000da2:	5c9b      	ldrb	r3, [r3, r2]
 8000da4:	2b01      	cmp	r3, #1
 8000da6:	d101      	bne.n	8000dac <HAL_ADC_ConfigChannel+0x54>
 8000da8:	2302      	movs	r3, #2
 8000daa:	e0bb      	b.n	8000f24 <HAL_ADC_ConfigChannel+0x1cc>
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	2234      	movs	r2, #52	; 0x34
 8000db0:	2101      	movs	r1, #1
 8000db2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	689b      	ldr	r3, [r3, #8]
 8000dba:	2204      	movs	r2, #4
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	d000      	beq.n	8000dc2 <HAL_ADC_ConfigChannel+0x6a>
 8000dc0:	e09f      	b.n	8000f02 <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	4a59      	ldr	r2, [pc, #356]	; (8000f2c <HAL_ADC_ConfigChannel+0x1d4>)
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	d100      	bne.n	8000dce <HAL_ADC_ConfigChannel+0x76>
 8000dcc:	e077      	b.n	8000ebe <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	2201      	movs	r2, #1
 8000dda:	409a      	lsls	r2, r3
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	430a      	orrs	r2, r1
 8000de2:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000de8:	2380      	movs	r3, #128	; 0x80
 8000dea:	055b      	lsls	r3, r3, #21
 8000dec:	429a      	cmp	r2, r3
 8000dee:	d037      	beq.n	8000e60 <HAL_ADC_ConfigChannel+0x108>
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000df4:	2b01      	cmp	r3, #1
 8000df6:	d033      	beq.n	8000e60 <HAL_ADC_ConfigChannel+0x108>
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dfc:	2b02      	cmp	r3, #2
 8000dfe:	d02f      	beq.n	8000e60 <HAL_ADC_ConfigChannel+0x108>
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e04:	2b03      	cmp	r3, #3
 8000e06:	d02b      	beq.n	8000e60 <HAL_ADC_ConfigChannel+0x108>
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e0c:	2b04      	cmp	r3, #4
 8000e0e:	d027      	beq.n	8000e60 <HAL_ADC_ConfigChannel+0x108>
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e14:	2b05      	cmp	r3, #5
 8000e16:	d023      	beq.n	8000e60 <HAL_ADC_ConfigChannel+0x108>
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e1c:	2b06      	cmp	r3, #6
 8000e1e:	d01f      	beq.n	8000e60 <HAL_ADC_ConfigChannel+0x108>
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e24:	2b07      	cmp	r3, #7
 8000e26:	d01b      	beq.n	8000e60 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	689a      	ldr	r2, [r3, #8]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	695b      	ldr	r3, [r3, #20]
 8000e32:	2107      	movs	r1, #7
 8000e34:	400b      	ands	r3, r1
 8000e36:	429a      	cmp	r2, r3
 8000e38:	d012      	beq.n	8000e60 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	695a      	ldr	r2, [r3, #20]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	2107      	movs	r1, #7
 8000e46:	438a      	bics	r2, r1
 8000e48:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	6959      	ldr	r1, [r3, #20]
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	689b      	ldr	r3, [r3, #8]
 8000e54:	2207      	movs	r2, #7
 8000e56:	401a      	ands	r2, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	430a      	orrs	r2, r1
 8000e5e:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	2b10      	cmp	r3, #16
 8000e66:	d003      	beq.n	8000e70 <HAL_ADC_ConfigChannel+0x118>
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	2b11      	cmp	r3, #17
 8000e6e:	d152      	bne.n	8000f16 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000e70:	4b2f      	ldr	r3, [pc, #188]	; (8000f30 <HAL_ADC_ConfigChannel+0x1d8>)
 8000e72:	6819      	ldr	r1, [r3, #0]
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	2b10      	cmp	r3, #16
 8000e7a:	d102      	bne.n	8000e82 <HAL_ADC_ConfigChannel+0x12a>
 8000e7c:	2380      	movs	r3, #128	; 0x80
 8000e7e:	041b      	lsls	r3, r3, #16
 8000e80:	e001      	b.n	8000e86 <HAL_ADC_ConfigChannel+0x12e>
 8000e82:	2380      	movs	r3, #128	; 0x80
 8000e84:	03db      	lsls	r3, r3, #15
 8000e86:	4a2a      	ldr	r2, [pc, #168]	; (8000f30 <HAL_ADC_ConfigChannel+0x1d8>)
 8000e88:	430b      	orrs	r3, r1
 8000e8a:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	2b10      	cmp	r3, #16
 8000e92:	d140      	bne.n	8000f16 <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000e94:	4b27      	ldr	r3, [pc, #156]	; (8000f34 <HAL_ADC_ConfigChannel+0x1dc>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4927      	ldr	r1, [pc, #156]	; (8000f38 <HAL_ADC_ConfigChannel+0x1e0>)
 8000e9a:	0018      	movs	r0, r3
 8000e9c:	f7ff f934 	bl	8000108 <__udivsi3>
 8000ea0:	0003      	movs	r3, r0
 8000ea2:	001a      	movs	r2, r3
 8000ea4:	0013      	movs	r3, r2
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	189b      	adds	r3, r3, r2
 8000eaa:	005b      	lsls	r3, r3, #1
 8000eac:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000eae:	e002      	b.n	8000eb6 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	3b01      	subs	r3, #1
 8000eb4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000eb6:	68bb      	ldr	r3, [r7, #8]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d1f9      	bne.n	8000eb0 <HAL_ADC_ConfigChannel+0x158>
 8000ebc:	e02b      	b.n	8000f16 <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	2101      	movs	r1, #1
 8000eca:	4099      	lsls	r1, r3
 8000ecc:	000b      	movs	r3, r1
 8000ece:	43d9      	mvns	r1, r3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	400a      	ands	r2, r1
 8000ed6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	2b10      	cmp	r3, #16
 8000ede:	d003      	beq.n	8000ee8 <HAL_ADC_ConfigChannel+0x190>
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2b11      	cmp	r3, #17
 8000ee6:	d116      	bne.n	8000f16 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000ee8:	4b11      	ldr	r3, [pc, #68]	; (8000f30 <HAL_ADC_ConfigChannel+0x1d8>)
 8000eea:	6819      	ldr	r1, [r3, #0]
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2b10      	cmp	r3, #16
 8000ef2:	d101      	bne.n	8000ef8 <HAL_ADC_ConfigChannel+0x1a0>
 8000ef4:	4a11      	ldr	r2, [pc, #68]	; (8000f3c <HAL_ADC_ConfigChannel+0x1e4>)
 8000ef6:	e000      	b.n	8000efa <HAL_ADC_ConfigChannel+0x1a2>
 8000ef8:	4a11      	ldr	r2, [pc, #68]	; (8000f40 <HAL_ADC_ConfigChannel+0x1e8>)
 8000efa:	4b0d      	ldr	r3, [pc, #52]	; (8000f30 <HAL_ADC_ConfigChannel+0x1d8>)
 8000efc:	400a      	ands	r2, r1
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	e009      	b.n	8000f16 <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f06:	2220      	movs	r2, #32
 8000f08:	431a      	orrs	r2, r3
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8000f0e:	230f      	movs	r3, #15
 8000f10:	18fb      	adds	r3, r7, r3
 8000f12:	2201      	movs	r2, #1
 8000f14:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2234      	movs	r2, #52	; 0x34
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8000f1e:	230f      	movs	r3, #15
 8000f20:	18fb      	adds	r3, r7, r3
 8000f22:	781b      	ldrb	r3, [r3, #0]
}
 8000f24:	0018      	movs	r0, r3
 8000f26:	46bd      	mov	sp, r7
 8000f28:	b004      	add	sp, #16
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	00001001 	.word	0x00001001
 8000f30:	40012708 	.word	0x40012708
 8000f34:	20000000 	.word	0x20000000
 8000f38:	000f4240 	.word	0x000f4240
 8000f3c:	ff7fffff 	.word	0xff7fffff
 8000f40:	ffbfffff 	.word	0xffbfffff

08000f44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f44:	b590      	push	{r4, r7, lr}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	0002      	movs	r2, r0
 8000f4c:	6039      	str	r1, [r7, #0]
 8000f4e:	1dfb      	adds	r3, r7, #7
 8000f50:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f52:	1dfb      	adds	r3, r7, #7
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	2b7f      	cmp	r3, #127	; 0x7f
 8000f58:	d828      	bhi.n	8000fac <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f5a:	4a2f      	ldr	r2, [pc, #188]	; (8001018 <__NVIC_SetPriority+0xd4>)
 8000f5c:	1dfb      	adds	r3, r7, #7
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	b25b      	sxtb	r3, r3
 8000f62:	089b      	lsrs	r3, r3, #2
 8000f64:	33c0      	adds	r3, #192	; 0xc0
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	589b      	ldr	r3, [r3, r2]
 8000f6a:	1dfa      	adds	r2, r7, #7
 8000f6c:	7812      	ldrb	r2, [r2, #0]
 8000f6e:	0011      	movs	r1, r2
 8000f70:	2203      	movs	r2, #3
 8000f72:	400a      	ands	r2, r1
 8000f74:	00d2      	lsls	r2, r2, #3
 8000f76:	21ff      	movs	r1, #255	; 0xff
 8000f78:	4091      	lsls	r1, r2
 8000f7a:	000a      	movs	r2, r1
 8000f7c:	43d2      	mvns	r2, r2
 8000f7e:	401a      	ands	r2, r3
 8000f80:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	019b      	lsls	r3, r3, #6
 8000f86:	22ff      	movs	r2, #255	; 0xff
 8000f88:	401a      	ands	r2, r3
 8000f8a:	1dfb      	adds	r3, r7, #7
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	0018      	movs	r0, r3
 8000f90:	2303      	movs	r3, #3
 8000f92:	4003      	ands	r3, r0
 8000f94:	00db      	lsls	r3, r3, #3
 8000f96:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f98:	481f      	ldr	r0, [pc, #124]	; (8001018 <__NVIC_SetPriority+0xd4>)
 8000f9a:	1dfb      	adds	r3, r7, #7
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	b25b      	sxtb	r3, r3
 8000fa0:	089b      	lsrs	r3, r3, #2
 8000fa2:	430a      	orrs	r2, r1
 8000fa4:	33c0      	adds	r3, #192	; 0xc0
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000faa:	e031      	b.n	8001010 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fac:	4a1b      	ldr	r2, [pc, #108]	; (800101c <__NVIC_SetPriority+0xd8>)
 8000fae:	1dfb      	adds	r3, r7, #7
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	0019      	movs	r1, r3
 8000fb4:	230f      	movs	r3, #15
 8000fb6:	400b      	ands	r3, r1
 8000fb8:	3b08      	subs	r3, #8
 8000fba:	089b      	lsrs	r3, r3, #2
 8000fbc:	3306      	adds	r3, #6
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	18d3      	adds	r3, r2, r3
 8000fc2:	3304      	adds	r3, #4
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	1dfa      	adds	r2, r7, #7
 8000fc8:	7812      	ldrb	r2, [r2, #0]
 8000fca:	0011      	movs	r1, r2
 8000fcc:	2203      	movs	r2, #3
 8000fce:	400a      	ands	r2, r1
 8000fd0:	00d2      	lsls	r2, r2, #3
 8000fd2:	21ff      	movs	r1, #255	; 0xff
 8000fd4:	4091      	lsls	r1, r2
 8000fd6:	000a      	movs	r2, r1
 8000fd8:	43d2      	mvns	r2, r2
 8000fda:	401a      	ands	r2, r3
 8000fdc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	019b      	lsls	r3, r3, #6
 8000fe2:	22ff      	movs	r2, #255	; 0xff
 8000fe4:	401a      	ands	r2, r3
 8000fe6:	1dfb      	adds	r3, r7, #7
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	0018      	movs	r0, r3
 8000fec:	2303      	movs	r3, #3
 8000fee:	4003      	ands	r3, r0
 8000ff0:	00db      	lsls	r3, r3, #3
 8000ff2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ff4:	4809      	ldr	r0, [pc, #36]	; (800101c <__NVIC_SetPriority+0xd8>)
 8000ff6:	1dfb      	adds	r3, r7, #7
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	001c      	movs	r4, r3
 8000ffc:	230f      	movs	r3, #15
 8000ffe:	4023      	ands	r3, r4
 8001000:	3b08      	subs	r3, #8
 8001002:	089b      	lsrs	r3, r3, #2
 8001004:	430a      	orrs	r2, r1
 8001006:	3306      	adds	r3, #6
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	18c3      	adds	r3, r0, r3
 800100c:	3304      	adds	r3, #4
 800100e:	601a      	str	r2, [r3, #0]
}
 8001010:	46c0      	nop			; (mov r8, r8)
 8001012:	46bd      	mov	sp, r7
 8001014:	b003      	add	sp, #12
 8001016:	bd90      	pop	{r4, r7, pc}
 8001018:	e000e100 	.word	0xe000e100
 800101c:	e000ed00 	.word	0xe000ed00

08001020 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	1e5a      	subs	r2, r3, #1
 800102c:	2380      	movs	r3, #128	; 0x80
 800102e:	045b      	lsls	r3, r3, #17
 8001030:	429a      	cmp	r2, r3
 8001032:	d301      	bcc.n	8001038 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001034:	2301      	movs	r3, #1
 8001036:	e010      	b.n	800105a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001038:	4b0a      	ldr	r3, [pc, #40]	; (8001064 <SysTick_Config+0x44>)
 800103a:	687a      	ldr	r2, [r7, #4]
 800103c:	3a01      	subs	r2, #1
 800103e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001040:	2301      	movs	r3, #1
 8001042:	425b      	negs	r3, r3
 8001044:	2103      	movs	r1, #3
 8001046:	0018      	movs	r0, r3
 8001048:	f7ff ff7c 	bl	8000f44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800104c:	4b05      	ldr	r3, [pc, #20]	; (8001064 <SysTick_Config+0x44>)
 800104e:	2200      	movs	r2, #0
 8001050:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001052:	4b04      	ldr	r3, [pc, #16]	; (8001064 <SysTick_Config+0x44>)
 8001054:	2207      	movs	r2, #7
 8001056:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001058:	2300      	movs	r3, #0
}
 800105a:	0018      	movs	r0, r3
 800105c:	46bd      	mov	sp, r7
 800105e:	b002      	add	sp, #8
 8001060:	bd80      	pop	{r7, pc}
 8001062:	46c0      	nop			; (mov r8, r8)
 8001064:	e000e010 	.word	0xe000e010

08001068 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	60b9      	str	r1, [r7, #8]
 8001070:	607a      	str	r2, [r7, #4]
 8001072:	210f      	movs	r1, #15
 8001074:	187b      	adds	r3, r7, r1
 8001076:	1c02      	adds	r2, r0, #0
 8001078:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800107a:	68ba      	ldr	r2, [r7, #8]
 800107c:	187b      	adds	r3, r7, r1
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	b25b      	sxtb	r3, r3
 8001082:	0011      	movs	r1, r2
 8001084:	0018      	movs	r0, r3
 8001086:	f7ff ff5d 	bl	8000f44 <__NVIC_SetPriority>
}
 800108a:	46c0      	nop			; (mov r8, r8)
 800108c:	46bd      	mov	sp, r7
 800108e:	b004      	add	sp, #16
 8001090:	bd80      	pop	{r7, pc}

08001092 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001092:	b580      	push	{r7, lr}
 8001094:	b082      	sub	sp, #8
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	0018      	movs	r0, r3
 800109e:	f7ff ffbf 	bl	8001020 <SysTick_Config>
 80010a2:	0003      	movs	r3, r0
}
 80010a4:	0018      	movs	r0, r3
 80010a6:	46bd      	mov	sp, r7
 80010a8:	b002      	add	sp, #8
 80010aa:	bd80      	pop	{r7, pc}

080010ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b086      	sub	sp, #24
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010b6:	2300      	movs	r3, #0
 80010b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010ba:	e14f      	b.n	800135c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2101      	movs	r1, #1
 80010c2:	697a      	ldr	r2, [r7, #20]
 80010c4:	4091      	lsls	r1, r2
 80010c6:	000a      	movs	r2, r1
 80010c8:	4013      	ands	r3, r2
 80010ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d100      	bne.n	80010d4 <HAL_GPIO_Init+0x28>
 80010d2:	e140      	b.n	8001356 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	2203      	movs	r2, #3
 80010da:	4013      	ands	r3, r2
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d005      	beq.n	80010ec <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	2203      	movs	r2, #3
 80010e6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80010e8:	2b02      	cmp	r3, #2
 80010ea:	d130      	bne.n	800114e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	689b      	ldr	r3, [r3, #8]
 80010f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	2203      	movs	r2, #3
 80010f8:	409a      	lsls	r2, r3
 80010fa:	0013      	movs	r3, r2
 80010fc:	43da      	mvns	r2, r3
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	4013      	ands	r3, r2
 8001102:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	68da      	ldr	r2, [r3, #12]
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	409a      	lsls	r2, r3
 800110e:	0013      	movs	r3, r2
 8001110:	693a      	ldr	r2, [r7, #16]
 8001112:	4313      	orrs	r3, r2
 8001114:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	693a      	ldr	r2, [r7, #16]
 800111a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001122:	2201      	movs	r2, #1
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	409a      	lsls	r2, r3
 8001128:	0013      	movs	r3, r2
 800112a:	43da      	mvns	r2, r3
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	4013      	ands	r3, r2
 8001130:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	091b      	lsrs	r3, r3, #4
 8001138:	2201      	movs	r2, #1
 800113a:	401a      	ands	r2, r3
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	409a      	lsls	r2, r3
 8001140:	0013      	movs	r3, r2
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	4313      	orrs	r3, r2
 8001146:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	2203      	movs	r2, #3
 8001154:	4013      	ands	r3, r2
 8001156:	2b03      	cmp	r3, #3
 8001158:	d017      	beq.n	800118a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	68db      	ldr	r3, [r3, #12]
 800115e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	2203      	movs	r2, #3
 8001166:	409a      	lsls	r2, r3
 8001168:	0013      	movs	r3, r2
 800116a:	43da      	mvns	r2, r3
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	4013      	ands	r3, r2
 8001170:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	689a      	ldr	r2, [r3, #8]
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	409a      	lsls	r2, r3
 800117c:	0013      	movs	r3, r2
 800117e:	693a      	ldr	r2, [r7, #16]
 8001180:	4313      	orrs	r3, r2
 8001182:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	2203      	movs	r2, #3
 8001190:	4013      	ands	r3, r2
 8001192:	2b02      	cmp	r3, #2
 8001194:	d123      	bne.n	80011de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	08da      	lsrs	r2, r3, #3
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	3208      	adds	r2, #8
 800119e:	0092      	lsls	r2, r2, #2
 80011a0:	58d3      	ldr	r3, [r2, r3]
 80011a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	2207      	movs	r2, #7
 80011a8:	4013      	ands	r3, r2
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	220f      	movs	r2, #15
 80011ae:	409a      	lsls	r2, r3
 80011b0:	0013      	movs	r3, r2
 80011b2:	43da      	mvns	r2, r3
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	4013      	ands	r3, r2
 80011b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	691a      	ldr	r2, [r3, #16]
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	2107      	movs	r1, #7
 80011c2:	400b      	ands	r3, r1
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	409a      	lsls	r2, r3
 80011c8:	0013      	movs	r3, r2
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	08da      	lsrs	r2, r3, #3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	3208      	adds	r2, #8
 80011d8:	0092      	lsls	r2, r2, #2
 80011da:	6939      	ldr	r1, [r7, #16]
 80011dc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	2203      	movs	r2, #3
 80011ea:	409a      	lsls	r2, r3
 80011ec:	0013      	movs	r3, r2
 80011ee:	43da      	mvns	r2, r3
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	4013      	ands	r3, r2
 80011f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	2203      	movs	r2, #3
 80011fc:	401a      	ands	r2, r3
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	409a      	lsls	r2, r3
 8001204:	0013      	movs	r3, r2
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	4313      	orrs	r3, r2
 800120a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	693a      	ldr	r2, [r7, #16]
 8001210:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	685a      	ldr	r2, [r3, #4]
 8001216:	23c0      	movs	r3, #192	; 0xc0
 8001218:	029b      	lsls	r3, r3, #10
 800121a:	4013      	ands	r3, r2
 800121c:	d100      	bne.n	8001220 <HAL_GPIO_Init+0x174>
 800121e:	e09a      	b.n	8001356 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001220:	4b54      	ldr	r3, [pc, #336]	; (8001374 <HAL_GPIO_Init+0x2c8>)
 8001222:	699a      	ldr	r2, [r3, #24]
 8001224:	4b53      	ldr	r3, [pc, #332]	; (8001374 <HAL_GPIO_Init+0x2c8>)
 8001226:	2101      	movs	r1, #1
 8001228:	430a      	orrs	r2, r1
 800122a:	619a      	str	r2, [r3, #24]
 800122c:	4b51      	ldr	r3, [pc, #324]	; (8001374 <HAL_GPIO_Init+0x2c8>)
 800122e:	699b      	ldr	r3, [r3, #24]
 8001230:	2201      	movs	r2, #1
 8001232:	4013      	ands	r3, r2
 8001234:	60bb      	str	r3, [r7, #8]
 8001236:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001238:	4a4f      	ldr	r2, [pc, #316]	; (8001378 <HAL_GPIO_Init+0x2cc>)
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	089b      	lsrs	r3, r3, #2
 800123e:	3302      	adds	r3, #2
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	589b      	ldr	r3, [r3, r2]
 8001244:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	2203      	movs	r2, #3
 800124a:	4013      	ands	r3, r2
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	220f      	movs	r2, #15
 8001250:	409a      	lsls	r2, r3
 8001252:	0013      	movs	r3, r2
 8001254:	43da      	mvns	r2, r3
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	4013      	ands	r3, r2
 800125a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	2390      	movs	r3, #144	; 0x90
 8001260:	05db      	lsls	r3, r3, #23
 8001262:	429a      	cmp	r2, r3
 8001264:	d013      	beq.n	800128e <HAL_GPIO_Init+0x1e2>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a44      	ldr	r2, [pc, #272]	; (800137c <HAL_GPIO_Init+0x2d0>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d00d      	beq.n	800128a <HAL_GPIO_Init+0x1de>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a43      	ldr	r2, [pc, #268]	; (8001380 <HAL_GPIO_Init+0x2d4>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d007      	beq.n	8001286 <HAL_GPIO_Init+0x1da>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a42      	ldr	r2, [pc, #264]	; (8001384 <HAL_GPIO_Init+0x2d8>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d101      	bne.n	8001282 <HAL_GPIO_Init+0x1d6>
 800127e:	2303      	movs	r3, #3
 8001280:	e006      	b.n	8001290 <HAL_GPIO_Init+0x1e4>
 8001282:	2305      	movs	r3, #5
 8001284:	e004      	b.n	8001290 <HAL_GPIO_Init+0x1e4>
 8001286:	2302      	movs	r3, #2
 8001288:	e002      	b.n	8001290 <HAL_GPIO_Init+0x1e4>
 800128a:	2301      	movs	r3, #1
 800128c:	e000      	b.n	8001290 <HAL_GPIO_Init+0x1e4>
 800128e:	2300      	movs	r3, #0
 8001290:	697a      	ldr	r2, [r7, #20]
 8001292:	2103      	movs	r1, #3
 8001294:	400a      	ands	r2, r1
 8001296:	0092      	lsls	r2, r2, #2
 8001298:	4093      	lsls	r3, r2
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	4313      	orrs	r3, r2
 800129e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80012a0:	4935      	ldr	r1, [pc, #212]	; (8001378 <HAL_GPIO_Init+0x2cc>)
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	089b      	lsrs	r3, r3, #2
 80012a6:	3302      	adds	r3, #2
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012ae:	4b36      	ldr	r3, [pc, #216]	; (8001388 <HAL_GPIO_Init+0x2dc>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	43da      	mvns	r2, r3
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	4013      	ands	r3, r2
 80012bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685a      	ldr	r2, [r3, #4]
 80012c2:	2380      	movs	r3, #128	; 0x80
 80012c4:	025b      	lsls	r3, r3, #9
 80012c6:	4013      	ands	r3, r2
 80012c8:	d003      	beq.n	80012d2 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80012d2:	4b2d      	ldr	r3, [pc, #180]	; (8001388 <HAL_GPIO_Init+0x2dc>)
 80012d4:	693a      	ldr	r2, [r7, #16]
 80012d6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80012d8:	4b2b      	ldr	r3, [pc, #172]	; (8001388 <HAL_GPIO_Init+0x2dc>)
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	43da      	mvns	r2, r3
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	4013      	ands	r3, r2
 80012e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685a      	ldr	r2, [r3, #4]
 80012ec:	2380      	movs	r3, #128	; 0x80
 80012ee:	029b      	lsls	r3, r3, #10
 80012f0:	4013      	ands	r3, r2
 80012f2:	d003      	beq.n	80012fc <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80012f4:	693a      	ldr	r2, [r7, #16]
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80012fc:	4b22      	ldr	r3, [pc, #136]	; (8001388 <HAL_GPIO_Init+0x2dc>)
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001302:	4b21      	ldr	r3, [pc, #132]	; (8001388 <HAL_GPIO_Init+0x2dc>)
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	43da      	mvns	r2, r3
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	4013      	ands	r3, r2
 8001310:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685a      	ldr	r2, [r3, #4]
 8001316:	2380      	movs	r3, #128	; 0x80
 8001318:	035b      	lsls	r3, r3, #13
 800131a:	4013      	ands	r3, r2
 800131c:	d003      	beq.n	8001326 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	4313      	orrs	r3, r2
 8001324:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001326:	4b18      	ldr	r3, [pc, #96]	; (8001388 <HAL_GPIO_Init+0x2dc>)
 8001328:	693a      	ldr	r2, [r7, #16]
 800132a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800132c:	4b16      	ldr	r3, [pc, #88]	; (8001388 <HAL_GPIO_Init+0x2dc>)
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	43da      	mvns	r2, r3
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	4013      	ands	r3, r2
 800133a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685a      	ldr	r2, [r3, #4]
 8001340:	2380      	movs	r3, #128	; 0x80
 8001342:	039b      	lsls	r3, r3, #14
 8001344:	4013      	ands	r3, r2
 8001346:	d003      	beq.n	8001350 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001348:	693a      	ldr	r2, [r7, #16]
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	4313      	orrs	r3, r2
 800134e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001350:	4b0d      	ldr	r3, [pc, #52]	; (8001388 <HAL_GPIO_Init+0x2dc>)
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	3301      	adds	r3, #1
 800135a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	40da      	lsrs	r2, r3
 8001364:	1e13      	subs	r3, r2, #0
 8001366:	d000      	beq.n	800136a <HAL_GPIO_Init+0x2be>
 8001368:	e6a8      	b.n	80010bc <HAL_GPIO_Init+0x10>
  } 
}
 800136a:	46c0      	nop			; (mov r8, r8)
 800136c:	46c0      	nop			; (mov r8, r8)
 800136e:	46bd      	mov	sp, r7
 8001370:	b006      	add	sp, #24
 8001372:	bd80      	pop	{r7, pc}
 8001374:	40021000 	.word	0x40021000
 8001378:	40010000 	.word	0x40010000
 800137c:	48000400 	.word	0x48000400
 8001380:	48000800 	.word	0x48000800
 8001384:	48000c00 	.word	0x48000c00
 8001388:	40010400 	.word	0x40010400

0800138c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	0008      	movs	r0, r1
 8001396:	0011      	movs	r1, r2
 8001398:	1cbb      	adds	r3, r7, #2
 800139a:	1c02      	adds	r2, r0, #0
 800139c:	801a      	strh	r2, [r3, #0]
 800139e:	1c7b      	adds	r3, r7, #1
 80013a0:	1c0a      	adds	r2, r1, #0
 80013a2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013a4:	1c7b      	adds	r3, r7, #1
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d004      	beq.n	80013b6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013ac:	1cbb      	adds	r3, r7, #2
 80013ae:	881a      	ldrh	r2, [r3, #0]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013b4:	e003      	b.n	80013be <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013b6:	1cbb      	adds	r3, r7, #2
 80013b8:	881a      	ldrh	r2, [r3, #0]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013be:	46c0      	nop			; (mov r8, r8)
 80013c0:	46bd      	mov	sp, r7
 80013c2:	b002      	add	sp, #8
 80013c4:	bd80      	pop	{r7, pc}
	...

080013c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d101      	bne.n	80013da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e082      	b.n	80014e0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2241      	movs	r2, #65	; 0x41
 80013de:	5c9b      	ldrb	r3, [r3, r2]
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d107      	bne.n	80013f6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2240      	movs	r2, #64	; 0x40
 80013ea:	2100      	movs	r1, #0
 80013ec:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	0018      	movs	r0, r3
 80013f2:	f7ff f9f5 	bl	80007e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2241      	movs	r2, #65	; 0x41
 80013fa:	2124      	movs	r1, #36	; 0x24
 80013fc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2101      	movs	r1, #1
 800140a:	438a      	bics	r2, r1
 800140c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	685a      	ldr	r2, [r3, #4]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4934      	ldr	r1, [pc, #208]	; (80014e8 <HAL_I2C_Init+0x120>)
 8001418:	400a      	ands	r2, r1
 800141a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	689a      	ldr	r2, [r3, #8]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4931      	ldr	r1, [pc, #196]	; (80014ec <HAL_I2C_Init+0x124>)
 8001428:	400a      	ands	r2, r1
 800142a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	2b01      	cmp	r3, #1
 8001432:	d108      	bne.n	8001446 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	689a      	ldr	r2, [r3, #8]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2180      	movs	r1, #128	; 0x80
 800143e:	0209      	lsls	r1, r1, #8
 8001440:	430a      	orrs	r2, r1
 8001442:	609a      	str	r2, [r3, #8]
 8001444:	e007      	b.n	8001456 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	689a      	ldr	r2, [r3, #8]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	2184      	movs	r1, #132	; 0x84
 8001450:	0209      	lsls	r1, r1, #8
 8001452:	430a      	orrs	r2, r1
 8001454:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	68db      	ldr	r3, [r3, #12]
 800145a:	2b02      	cmp	r3, #2
 800145c:	d104      	bne.n	8001468 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	2280      	movs	r2, #128	; 0x80
 8001464:	0112      	lsls	r2, r2, #4
 8001466:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	685a      	ldr	r2, [r3, #4]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	491f      	ldr	r1, [pc, #124]	; (80014f0 <HAL_I2C_Init+0x128>)
 8001474:	430a      	orrs	r2, r1
 8001476:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	68da      	ldr	r2, [r3, #12]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	491a      	ldr	r1, [pc, #104]	; (80014ec <HAL_I2C_Init+0x124>)
 8001484:	400a      	ands	r2, r1
 8001486:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	691a      	ldr	r2, [r3, #16]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	695b      	ldr	r3, [r3, #20]
 8001490:	431a      	orrs	r2, r3
 8001492:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	699b      	ldr	r3, [r3, #24]
 8001498:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	430a      	orrs	r2, r1
 80014a0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	69d9      	ldr	r1, [r3, #28]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6a1a      	ldr	r2, [r3, #32]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	430a      	orrs	r2, r1
 80014b0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	2101      	movs	r1, #1
 80014be:	430a      	orrs	r2, r1
 80014c0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2200      	movs	r2, #0
 80014c6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2241      	movs	r2, #65	; 0x41
 80014cc:	2120      	movs	r1, #32
 80014ce:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2200      	movs	r2, #0
 80014d4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2242      	movs	r2, #66	; 0x42
 80014da:	2100      	movs	r1, #0
 80014dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80014de:	2300      	movs	r3, #0
}
 80014e0:	0018      	movs	r0, r3
 80014e2:	46bd      	mov	sp, r7
 80014e4:	b002      	add	sp, #8
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	f0ffffff 	.word	0xf0ffffff
 80014ec:	ffff7fff 	.word	0xffff7fff
 80014f0:	02008000 	.word	0x02008000

080014f4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2241      	movs	r2, #65	; 0x41
 8001502:	5c9b      	ldrb	r3, [r3, r2]
 8001504:	b2db      	uxtb	r3, r3
 8001506:	2b20      	cmp	r3, #32
 8001508:	d138      	bne.n	800157c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2240      	movs	r2, #64	; 0x40
 800150e:	5c9b      	ldrb	r3, [r3, r2]
 8001510:	2b01      	cmp	r3, #1
 8001512:	d101      	bne.n	8001518 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001514:	2302      	movs	r3, #2
 8001516:	e032      	b.n	800157e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2240      	movs	r2, #64	; 0x40
 800151c:	2101      	movs	r1, #1
 800151e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2241      	movs	r2, #65	; 0x41
 8001524:	2124      	movs	r1, #36	; 0x24
 8001526:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	2101      	movs	r1, #1
 8001534:	438a      	bics	r2, r1
 8001536:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4911      	ldr	r1, [pc, #68]	; (8001588 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001544:	400a      	ands	r2, r1
 8001546:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	6819      	ldr	r1, [r3, #0]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	683a      	ldr	r2, [r7, #0]
 8001554:	430a      	orrs	r2, r1
 8001556:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	2101      	movs	r1, #1
 8001564:	430a      	orrs	r2, r1
 8001566:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2241      	movs	r2, #65	; 0x41
 800156c:	2120      	movs	r1, #32
 800156e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2240      	movs	r2, #64	; 0x40
 8001574:	2100      	movs	r1, #0
 8001576:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001578:	2300      	movs	r3, #0
 800157a:	e000      	b.n	800157e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800157c:	2302      	movs	r3, #2
  }
}
 800157e:	0018      	movs	r0, r3
 8001580:	46bd      	mov	sp, r7
 8001582:	b002      	add	sp, #8
 8001584:	bd80      	pop	{r7, pc}
 8001586:	46c0      	nop			; (mov r8, r8)
 8001588:	ffffefff 	.word	0xffffefff

0800158c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2241      	movs	r2, #65	; 0x41
 800159a:	5c9b      	ldrb	r3, [r3, r2]
 800159c:	b2db      	uxtb	r3, r3
 800159e:	2b20      	cmp	r3, #32
 80015a0:	d139      	bne.n	8001616 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2240      	movs	r2, #64	; 0x40
 80015a6:	5c9b      	ldrb	r3, [r3, r2]
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d101      	bne.n	80015b0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80015ac:	2302      	movs	r3, #2
 80015ae:	e033      	b.n	8001618 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2240      	movs	r2, #64	; 0x40
 80015b4:	2101      	movs	r1, #1
 80015b6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2241      	movs	r2, #65	; 0x41
 80015bc:	2124      	movs	r1, #36	; 0x24
 80015be:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	2101      	movs	r1, #1
 80015cc:	438a      	bics	r2, r1
 80015ce:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	4a11      	ldr	r2, [pc, #68]	; (8001620 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80015dc:	4013      	ands	r3, r2
 80015de:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	021b      	lsls	r3, r3, #8
 80015e4:	68fa      	ldr	r2, [r7, #12]
 80015e6:	4313      	orrs	r3, r2
 80015e8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	68fa      	ldr	r2, [r7, #12]
 80015f0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2101      	movs	r1, #1
 80015fe:	430a      	orrs	r2, r1
 8001600:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2241      	movs	r2, #65	; 0x41
 8001606:	2120      	movs	r1, #32
 8001608:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2240      	movs	r2, #64	; 0x40
 800160e:	2100      	movs	r1, #0
 8001610:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001612:	2300      	movs	r3, #0
 8001614:	e000      	b.n	8001618 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001616:	2302      	movs	r3, #2
  }
}
 8001618:	0018      	movs	r0, r3
 800161a:	46bd      	mov	sp, r7
 800161c:	b004      	add	sp, #16
 800161e:	bd80      	pop	{r7, pc}
 8001620:	fffff0ff 	.word	0xfffff0ff

08001624 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b088      	sub	sp, #32
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d101      	bne.n	8001636 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e305      	b.n	8001c42 <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	2201      	movs	r2, #1
 800163c:	4013      	ands	r3, r2
 800163e:	d100      	bne.n	8001642 <HAL_RCC_OscConfig+0x1e>
 8001640:	e08d      	b.n	800175e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001642:	4bc5      	ldr	r3, [pc, #788]	; (8001958 <HAL_RCC_OscConfig+0x334>)
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	220c      	movs	r2, #12
 8001648:	4013      	ands	r3, r2
 800164a:	2b04      	cmp	r3, #4
 800164c:	d00e      	beq.n	800166c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800164e:	4bc2      	ldr	r3, [pc, #776]	; (8001958 <HAL_RCC_OscConfig+0x334>)
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	220c      	movs	r2, #12
 8001654:	4013      	ands	r3, r2
 8001656:	2b08      	cmp	r3, #8
 8001658:	d116      	bne.n	8001688 <HAL_RCC_OscConfig+0x64>
 800165a:	4bbf      	ldr	r3, [pc, #764]	; (8001958 <HAL_RCC_OscConfig+0x334>)
 800165c:	685a      	ldr	r2, [r3, #4]
 800165e:	23c0      	movs	r3, #192	; 0xc0
 8001660:	025b      	lsls	r3, r3, #9
 8001662:	401a      	ands	r2, r3
 8001664:	2380      	movs	r3, #128	; 0x80
 8001666:	025b      	lsls	r3, r3, #9
 8001668:	429a      	cmp	r2, r3
 800166a:	d10d      	bne.n	8001688 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800166c:	4bba      	ldr	r3, [pc, #744]	; (8001958 <HAL_RCC_OscConfig+0x334>)
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	2380      	movs	r3, #128	; 0x80
 8001672:	029b      	lsls	r3, r3, #10
 8001674:	4013      	ands	r3, r2
 8001676:	d100      	bne.n	800167a <HAL_RCC_OscConfig+0x56>
 8001678:	e070      	b.n	800175c <HAL_RCC_OscConfig+0x138>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d000      	beq.n	8001684 <HAL_RCC_OscConfig+0x60>
 8001682:	e06b      	b.n	800175c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	e2dc      	b.n	8001c42 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	2b01      	cmp	r3, #1
 800168e:	d107      	bne.n	80016a0 <HAL_RCC_OscConfig+0x7c>
 8001690:	4bb1      	ldr	r3, [pc, #708]	; (8001958 <HAL_RCC_OscConfig+0x334>)
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	4bb0      	ldr	r3, [pc, #704]	; (8001958 <HAL_RCC_OscConfig+0x334>)
 8001696:	2180      	movs	r1, #128	; 0x80
 8001698:	0249      	lsls	r1, r1, #9
 800169a:	430a      	orrs	r2, r1
 800169c:	601a      	str	r2, [r3, #0]
 800169e:	e02f      	b.n	8001700 <HAL_RCC_OscConfig+0xdc>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d10c      	bne.n	80016c2 <HAL_RCC_OscConfig+0x9e>
 80016a8:	4bab      	ldr	r3, [pc, #684]	; (8001958 <HAL_RCC_OscConfig+0x334>)
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	4baa      	ldr	r3, [pc, #680]	; (8001958 <HAL_RCC_OscConfig+0x334>)
 80016ae:	49ab      	ldr	r1, [pc, #684]	; (800195c <HAL_RCC_OscConfig+0x338>)
 80016b0:	400a      	ands	r2, r1
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	4ba8      	ldr	r3, [pc, #672]	; (8001958 <HAL_RCC_OscConfig+0x334>)
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	4ba7      	ldr	r3, [pc, #668]	; (8001958 <HAL_RCC_OscConfig+0x334>)
 80016ba:	49a9      	ldr	r1, [pc, #676]	; (8001960 <HAL_RCC_OscConfig+0x33c>)
 80016bc:	400a      	ands	r2, r1
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	e01e      	b.n	8001700 <HAL_RCC_OscConfig+0xdc>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	2b05      	cmp	r3, #5
 80016c8:	d10e      	bne.n	80016e8 <HAL_RCC_OscConfig+0xc4>
 80016ca:	4ba3      	ldr	r3, [pc, #652]	; (8001958 <HAL_RCC_OscConfig+0x334>)
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	4ba2      	ldr	r3, [pc, #648]	; (8001958 <HAL_RCC_OscConfig+0x334>)
 80016d0:	2180      	movs	r1, #128	; 0x80
 80016d2:	02c9      	lsls	r1, r1, #11
 80016d4:	430a      	orrs	r2, r1
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	4b9f      	ldr	r3, [pc, #636]	; (8001958 <HAL_RCC_OscConfig+0x334>)
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	4b9e      	ldr	r3, [pc, #632]	; (8001958 <HAL_RCC_OscConfig+0x334>)
 80016de:	2180      	movs	r1, #128	; 0x80
 80016e0:	0249      	lsls	r1, r1, #9
 80016e2:	430a      	orrs	r2, r1
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	e00b      	b.n	8001700 <HAL_RCC_OscConfig+0xdc>
 80016e8:	4b9b      	ldr	r3, [pc, #620]	; (8001958 <HAL_RCC_OscConfig+0x334>)
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	4b9a      	ldr	r3, [pc, #616]	; (8001958 <HAL_RCC_OscConfig+0x334>)
 80016ee:	499b      	ldr	r1, [pc, #620]	; (800195c <HAL_RCC_OscConfig+0x338>)
 80016f0:	400a      	ands	r2, r1
 80016f2:	601a      	str	r2, [r3, #0]
 80016f4:	4b98      	ldr	r3, [pc, #608]	; (8001958 <HAL_RCC_OscConfig+0x334>)
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	4b97      	ldr	r3, [pc, #604]	; (8001958 <HAL_RCC_OscConfig+0x334>)
 80016fa:	4999      	ldr	r1, [pc, #612]	; (8001960 <HAL_RCC_OscConfig+0x33c>)
 80016fc:	400a      	ands	r2, r1
 80016fe:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d014      	beq.n	8001732 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001708:	f7ff f9b8 	bl	8000a7c <HAL_GetTick>
 800170c:	0003      	movs	r3, r0
 800170e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001710:	e008      	b.n	8001724 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001712:	f7ff f9b3 	bl	8000a7c <HAL_GetTick>
 8001716:	0002      	movs	r2, r0
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	2b64      	cmp	r3, #100	; 0x64
 800171e:	d901      	bls.n	8001724 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001720:	2303      	movs	r3, #3
 8001722:	e28e      	b.n	8001c42 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001724:	4b8c      	ldr	r3, [pc, #560]	; (8001958 <HAL_RCC_OscConfig+0x334>)
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	2380      	movs	r3, #128	; 0x80
 800172a:	029b      	lsls	r3, r3, #10
 800172c:	4013      	ands	r3, r2
 800172e:	d0f0      	beq.n	8001712 <HAL_RCC_OscConfig+0xee>
 8001730:	e015      	b.n	800175e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001732:	f7ff f9a3 	bl	8000a7c <HAL_GetTick>
 8001736:	0003      	movs	r3, r0
 8001738:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800173a:	e008      	b.n	800174e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800173c:	f7ff f99e 	bl	8000a7c <HAL_GetTick>
 8001740:	0002      	movs	r2, r0
 8001742:	69bb      	ldr	r3, [r7, #24]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	2b64      	cmp	r3, #100	; 0x64
 8001748:	d901      	bls.n	800174e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800174a:	2303      	movs	r3, #3
 800174c:	e279      	b.n	8001c42 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800174e:	4b82      	ldr	r3, [pc, #520]	; (8001958 <HAL_RCC_OscConfig+0x334>)
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	2380      	movs	r3, #128	; 0x80
 8001754:	029b      	lsls	r3, r3, #10
 8001756:	4013      	ands	r3, r2
 8001758:	d1f0      	bne.n	800173c <HAL_RCC_OscConfig+0x118>
 800175a:	e000      	b.n	800175e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800175c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	2202      	movs	r2, #2
 8001764:	4013      	ands	r3, r2
 8001766:	d100      	bne.n	800176a <HAL_RCC_OscConfig+0x146>
 8001768:	e06c      	b.n	8001844 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800176a:	4b7b      	ldr	r3, [pc, #492]	; (8001958 <HAL_RCC_OscConfig+0x334>)
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	220c      	movs	r2, #12
 8001770:	4013      	ands	r3, r2
 8001772:	d00e      	beq.n	8001792 <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001774:	4b78      	ldr	r3, [pc, #480]	; (8001958 <HAL_RCC_OscConfig+0x334>)
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	220c      	movs	r2, #12
 800177a:	4013      	ands	r3, r2
 800177c:	2b08      	cmp	r3, #8
 800177e:	d11f      	bne.n	80017c0 <HAL_RCC_OscConfig+0x19c>
 8001780:	4b75      	ldr	r3, [pc, #468]	; (8001958 <HAL_RCC_OscConfig+0x334>)
 8001782:	685a      	ldr	r2, [r3, #4]
 8001784:	23c0      	movs	r3, #192	; 0xc0
 8001786:	025b      	lsls	r3, r3, #9
 8001788:	401a      	ands	r2, r3
 800178a:	2380      	movs	r3, #128	; 0x80
 800178c:	021b      	lsls	r3, r3, #8
 800178e:	429a      	cmp	r2, r3
 8001790:	d116      	bne.n	80017c0 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001792:	4b71      	ldr	r3, [pc, #452]	; (8001958 <HAL_RCC_OscConfig+0x334>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	2202      	movs	r2, #2
 8001798:	4013      	ands	r3, r2
 800179a:	d005      	beq.n	80017a8 <HAL_RCC_OscConfig+0x184>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d001      	beq.n	80017a8 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e24c      	b.n	8001c42 <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017a8:	4b6b      	ldr	r3, [pc, #428]	; (8001958 <HAL_RCC_OscConfig+0x334>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	22f8      	movs	r2, #248	; 0xf8
 80017ae:	4393      	bics	r3, r2
 80017b0:	0019      	movs	r1, r3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	691b      	ldr	r3, [r3, #16]
 80017b6:	00da      	lsls	r2, r3, #3
 80017b8:	4b67      	ldr	r3, [pc, #412]	; (8001958 <HAL_RCC_OscConfig+0x334>)
 80017ba:	430a      	orrs	r2, r1
 80017bc:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017be:	e041      	b.n	8001844 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d024      	beq.n	8001812 <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017c8:	4b63      	ldr	r3, [pc, #396]	; (8001958 <HAL_RCC_OscConfig+0x334>)
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	4b62      	ldr	r3, [pc, #392]	; (8001958 <HAL_RCC_OscConfig+0x334>)
 80017ce:	2101      	movs	r1, #1
 80017d0:	430a      	orrs	r2, r1
 80017d2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d4:	f7ff f952 	bl	8000a7c <HAL_GetTick>
 80017d8:	0003      	movs	r3, r0
 80017da:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017dc:	e008      	b.n	80017f0 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017de:	f7ff f94d 	bl	8000a7c <HAL_GetTick>
 80017e2:	0002      	movs	r2, r0
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	d901      	bls.n	80017f0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80017ec:	2303      	movs	r3, #3
 80017ee:	e228      	b.n	8001c42 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017f0:	4b59      	ldr	r3, [pc, #356]	; (8001958 <HAL_RCC_OscConfig+0x334>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2202      	movs	r2, #2
 80017f6:	4013      	ands	r3, r2
 80017f8:	d0f1      	beq.n	80017de <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017fa:	4b57      	ldr	r3, [pc, #348]	; (8001958 <HAL_RCC_OscConfig+0x334>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	22f8      	movs	r2, #248	; 0xf8
 8001800:	4393      	bics	r3, r2
 8001802:	0019      	movs	r1, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	691b      	ldr	r3, [r3, #16]
 8001808:	00da      	lsls	r2, r3, #3
 800180a:	4b53      	ldr	r3, [pc, #332]	; (8001958 <HAL_RCC_OscConfig+0x334>)
 800180c:	430a      	orrs	r2, r1
 800180e:	601a      	str	r2, [r3, #0]
 8001810:	e018      	b.n	8001844 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001812:	4b51      	ldr	r3, [pc, #324]	; (8001958 <HAL_RCC_OscConfig+0x334>)
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	4b50      	ldr	r3, [pc, #320]	; (8001958 <HAL_RCC_OscConfig+0x334>)
 8001818:	2101      	movs	r1, #1
 800181a:	438a      	bics	r2, r1
 800181c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800181e:	f7ff f92d 	bl	8000a7c <HAL_GetTick>
 8001822:	0003      	movs	r3, r0
 8001824:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001826:	e008      	b.n	800183a <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001828:	f7ff f928 	bl	8000a7c <HAL_GetTick>
 800182c:	0002      	movs	r2, r0
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	2b02      	cmp	r3, #2
 8001834:	d901      	bls.n	800183a <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e203      	b.n	8001c42 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800183a:	4b47      	ldr	r3, [pc, #284]	; (8001958 <HAL_RCC_OscConfig+0x334>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	2202      	movs	r2, #2
 8001840:	4013      	ands	r3, r2
 8001842:	d1f1      	bne.n	8001828 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2208      	movs	r2, #8
 800184a:	4013      	ands	r3, r2
 800184c:	d036      	beq.n	80018bc <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	69db      	ldr	r3, [r3, #28]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d019      	beq.n	800188a <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001856:	4b40      	ldr	r3, [pc, #256]	; (8001958 <HAL_RCC_OscConfig+0x334>)
 8001858:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800185a:	4b3f      	ldr	r3, [pc, #252]	; (8001958 <HAL_RCC_OscConfig+0x334>)
 800185c:	2101      	movs	r1, #1
 800185e:	430a      	orrs	r2, r1
 8001860:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001862:	f7ff f90b 	bl	8000a7c <HAL_GetTick>
 8001866:	0003      	movs	r3, r0
 8001868:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800186a:	e008      	b.n	800187e <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800186c:	f7ff f906 	bl	8000a7c <HAL_GetTick>
 8001870:	0002      	movs	r2, r0
 8001872:	69bb      	ldr	r3, [r7, #24]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	2b02      	cmp	r3, #2
 8001878:	d901      	bls.n	800187e <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e1e1      	b.n	8001c42 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800187e:	4b36      	ldr	r3, [pc, #216]	; (8001958 <HAL_RCC_OscConfig+0x334>)
 8001880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001882:	2202      	movs	r2, #2
 8001884:	4013      	ands	r3, r2
 8001886:	d0f1      	beq.n	800186c <HAL_RCC_OscConfig+0x248>
 8001888:	e018      	b.n	80018bc <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800188a:	4b33      	ldr	r3, [pc, #204]	; (8001958 <HAL_RCC_OscConfig+0x334>)
 800188c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800188e:	4b32      	ldr	r3, [pc, #200]	; (8001958 <HAL_RCC_OscConfig+0x334>)
 8001890:	2101      	movs	r1, #1
 8001892:	438a      	bics	r2, r1
 8001894:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001896:	f7ff f8f1 	bl	8000a7c <HAL_GetTick>
 800189a:	0003      	movs	r3, r0
 800189c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800189e:	e008      	b.n	80018b2 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018a0:	f7ff f8ec 	bl	8000a7c <HAL_GetTick>
 80018a4:	0002      	movs	r2, r0
 80018a6:	69bb      	ldr	r3, [r7, #24]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d901      	bls.n	80018b2 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e1c7      	b.n	8001c42 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018b2:	4b29      	ldr	r3, [pc, #164]	; (8001958 <HAL_RCC_OscConfig+0x334>)
 80018b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b6:	2202      	movs	r2, #2
 80018b8:	4013      	ands	r3, r2
 80018ba:	d1f1      	bne.n	80018a0 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2204      	movs	r2, #4
 80018c2:	4013      	ands	r3, r2
 80018c4:	d100      	bne.n	80018c8 <HAL_RCC_OscConfig+0x2a4>
 80018c6:	e0b5      	b.n	8001a34 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018c8:	201f      	movs	r0, #31
 80018ca:	183b      	adds	r3, r7, r0
 80018cc:	2200      	movs	r2, #0
 80018ce:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018d0:	4b21      	ldr	r3, [pc, #132]	; (8001958 <HAL_RCC_OscConfig+0x334>)
 80018d2:	69da      	ldr	r2, [r3, #28]
 80018d4:	2380      	movs	r3, #128	; 0x80
 80018d6:	055b      	lsls	r3, r3, #21
 80018d8:	4013      	ands	r3, r2
 80018da:	d110      	bne.n	80018fe <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018dc:	4b1e      	ldr	r3, [pc, #120]	; (8001958 <HAL_RCC_OscConfig+0x334>)
 80018de:	69da      	ldr	r2, [r3, #28]
 80018e0:	4b1d      	ldr	r3, [pc, #116]	; (8001958 <HAL_RCC_OscConfig+0x334>)
 80018e2:	2180      	movs	r1, #128	; 0x80
 80018e4:	0549      	lsls	r1, r1, #21
 80018e6:	430a      	orrs	r2, r1
 80018e8:	61da      	str	r2, [r3, #28]
 80018ea:	4b1b      	ldr	r3, [pc, #108]	; (8001958 <HAL_RCC_OscConfig+0x334>)
 80018ec:	69da      	ldr	r2, [r3, #28]
 80018ee:	2380      	movs	r3, #128	; 0x80
 80018f0:	055b      	lsls	r3, r3, #21
 80018f2:	4013      	ands	r3, r2
 80018f4:	60fb      	str	r3, [r7, #12]
 80018f6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80018f8:	183b      	adds	r3, r7, r0
 80018fa:	2201      	movs	r2, #1
 80018fc:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018fe:	4b19      	ldr	r3, [pc, #100]	; (8001964 <HAL_RCC_OscConfig+0x340>)
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	2380      	movs	r3, #128	; 0x80
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	4013      	ands	r3, r2
 8001908:	d11a      	bne.n	8001940 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800190a:	4b16      	ldr	r3, [pc, #88]	; (8001964 <HAL_RCC_OscConfig+0x340>)
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	4b15      	ldr	r3, [pc, #84]	; (8001964 <HAL_RCC_OscConfig+0x340>)
 8001910:	2180      	movs	r1, #128	; 0x80
 8001912:	0049      	lsls	r1, r1, #1
 8001914:	430a      	orrs	r2, r1
 8001916:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001918:	f7ff f8b0 	bl	8000a7c <HAL_GetTick>
 800191c:	0003      	movs	r3, r0
 800191e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001920:	e008      	b.n	8001934 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001922:	f7ff f8ab 	bl	8000a7c <HAL_GetTick>
 8001926:	0002      	movs	r2, r0
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	2b64      	cmp	r3, #100	; 0x64
 800192e:	d901      	bls.n	8001934 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 8001930:	2303      	movs	r3, #3
 8001932:	e186      	b.n	8001c42 <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001934:	4b0b      	ldr	r3, [pc, #44]	; (8001964 <HAL_RCC_OscConfig+0x340>)
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	2380      	movs	r3, #128	; 0x80
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	4013      	ands	r3, r2
 800193e:	d0f0      	beq.n	8001922 <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d10f      	bne.n	8001968 <HAL_RCC_OscConfig+0x344>
 8001948:	4b03      	ldr	r3, [pc, #12]	; (8001958 <HAL_RCC_OscConfig+0x334>)
 800194a:	6a1a      	ldr	r2, [r3, #32]
 800194c:	4b02      	ldr	r3, [pc, #8]	; (8001958 <HAL_RCC_OscConfig+0x334>)
 800194e:	2101      	movs	r1, #1
 8001950:	430a      	orrs	r2, r1
 8001952:	621a      	str	r2, [r3, #32]
 8001954:	e036      	b.n	80019c4 <HAL_RCC_OscConfig+0x3a0>
 8001956:	46c0      	nop			; (mov r8, r8)
 8001958:	40021000 	.word	0x40021000
 800195c:	fffeffff 	.word	0xfffeffff
 8001960:	fffbffff 	.word	0xfffbffff
 8001964:	40007000 	.word	0x40007000
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d10c      	bne.n	800198a <HAL_RCC_OscConfig+0x366>
 8001970:	4bb6      	ldr	r3, [pc, #728]	; (8001c4c <HAL_RCC_OscConfig+0x628>)
 8001972:	6a1a      	ldr	r2, [r3, #32]
 8001974:	4bb5      	ldr	r3, [pc, #724]	; (8001c4c <HAL_RCC_OscConfig+0x628>)
 8001976:	2101      	movs	r1, #1
 8001978:	438a      	bics	r2, r1
 800197a:	621a      	str	r2, [r3, #32]
 800197c:	4bb3      	ldr	r3, [pc, #716]	; (8001c4c <HAL_RCC_OscConfig+0x628>)
 800197e:	6a1a      	ldr	r2, [r3, #32]
 8001980:	4bb2      	ldr	r3, [pc, #712]	; (8001c4c <HAL_RCC_OscConfig+0x628>)
 8001982:	2104      	movs	r1, #4
 8001984:	438a      	bics	r2, r1
 8001986:	621a      	str	r2, [r3, #32]
 8001988:	e01c      	b.n	80019c4 <HAL_RCC_OscConfig+0x3a0>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	2b05      	cmp	r3, #5
 8001990:	d10c      	bne.n	80019ac <HAL_RCC_OscConfig+0x388>
 8001992:	4bae      	ldr	r3, [pc, #696]	; (8001c4c <HAL_RCC_OscConfig+0x628>)
 8001994:	6a1a      	ldr	r2, [r3, #32]
 8001996:	4bad      	ldr	r3, [pc, #692]	; (8001c4c <HAL_RCC_OscConfig+0x628>)
 8001998:	2104      	movs	r1, #4
 800199a:	430a      	orrs	r2, r1
 800199c:	621a      	str	r2, [r3, #32]
 800199e:	4bab      	ldr	r3, [pc, #684]	; (8001c4c <HAL_RCC_OscConfig+0x628>)
 80019a0:	6a1a      	ldr	r2, [r3, #32]
 80019a2:	4baa      	ldr	r3, [pc, #680]	; (8001c4c <HAL_RCC_OscConfig+0x628>)
 80019a4:	2101      	movs	r1, #1
 80019a6:	430a      	orrs	r2, r1
 80019a8:	621a      	str	r2, [r3, #32]
 80019aa:	e00b      	b.n	80019c4 <HAL_RCC_OscConfig+0x3a0>
 80019ac:	4ba7      	ldr	r3, [pc, #668]	; (8001c4c <HAL_RCC_OscConfig+0x628>)
 80019ae:	6a1a      	ldr	r2, [r3, #32]
 80019b0:	4ba6      	ldr	r3, [pc, #664]	; (8001c4c <HAL_RCC_OscConfig+0x628>)
 80019b2:	2101      	movs	r1, #1
 80019b4:	438a      	bics	r2, r1
 80019b6:	621a      	str	r2, [r3, #32]
 80019b8:	4ba4      	ldr	r3, [pc, #656]	; (8001c4c <HAL_RCC_OscConfig+0x628>)
 80019ba:	6a1a      	ldr	r2, [r3, #32]
 80019bc:	4ba3      	ldr	r3, [pc, #652]	; (8001c4c <HAL_RCC_OscConfig+0x628>)
 80019be:	2104      	movs	r1, #4
 80019c0:	438a      	bics	r2, r1
 80019c2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d014      	beq.n	80019f6 <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019cc:	f7ff f856 	bl	8000a7c <HAL_GetTick>
 80019d0:	0003      	movs	r3, r0
 80019d2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019d4:	e009      	b.n	80019ea <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019d6:	f7ff f851 	bl	8000a7c <HAL_GetTick>
 80019da:	0002      	movs	r2, r0
 80019dc:	69bb      	ldr	r3, [r7, #24]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	4a9b      	ldr	r2, [pc, #620]	; (8001c50 <HAL_RCC_OscConfig+0x62c>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e12b      	b.n	8001c42 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019ea:	4b98      	ldr	r3, [pc, #608]	; (8001c4c <HAL_RCC_OscConfig+0x628>)
 80019ec:	6a1b      	ldr	r3, [r3, #32]
 80019ee:	2202      	movs	r2, #2
 80019f0:	4013      	ands	r3, r2
 80019f2:	d0f0      	beq.n	80019d6 <HAL_RCC_OscConfig+0x3b2>
 80019f4:	e013      	b.n	8001a1e <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019f6:	f7ff f841 	bl	8000a7c <HAL_GetTick>
 80019fa:	0003      	movs	r3, r0
 80019fc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019fe:	e009      	b.n	8001a14 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a00:	f7ff f83c 	bl	8000a7c <HAL_GetTick>
 8001a04:	0002      	movs	r2, r0
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	4a91      	ldr	r2, [pc, #580]	; (8001c50 <HAL_RCC_OscConfig+0x62c>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d901      	bls.n	8001a14 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8001a10:	2303      	movs	r3, #3
 8001a12:	e116      	b.n	8001c42 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a14:	4b8d      	ldr	r3, [pc, #564]	; (8001c4c <HAL_RCC_OscConfig+0x628>)
 8001a16:	6a1b      	ldr	r3, [r3, #32]
 8001a18:	2202      	movs	r2, #2
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	d1f0      	bne.n	8001a00 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a1e:	231f      	movs	r3, #31
 8001a20:	18fb      	adds	r3, r7, r3
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d105      	bne.n	8001a34 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a28:	4b88      	ldr	r3, [pc, #544]	; (8001c4c <HAL_RCC_OscConfig+0x628>)
 8001a2a:	69da      	ldr	r2, [r3, #28]
 8001a2c:	4b87      	ldr	r3, [pc, #540]	; (8001c4c <HAL_RCC_OscConfig+0x628>)
 8001a2e:	4989      	ldr	r1, [pc, #548]	; (8001c54 <HAL_RCC_OscConfig+0x630>)
 8001a30:	400a      	ands	r2, r1
 8001a32:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2210      	movs	r2, #16
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	d063      	beq.n	8001b06 <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	695b      	ldr	r3, [r3, #20]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d12a      	bne.n	8001a9c <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001a46:	4b81      	ldr	r3, [pc, #516]	; (8001c4c <HAL_RCC_OscConfig+0x628>)
 8001a48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a4a:	4b80      	ldr	r3, [pc, #512]	; (8001c4c <HAL_RCC_OscConfig+0x628>)
 8001a4c:	2104      	movs	r1, #4
 8001a4e:	430a      	orrs	r2, r1
 8001a50:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001a52:	4b7e      	ldr	r3, [pc, #504]	; (8001c4c <HAL_RCC_OscConfig+0x628>)
 8001a54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a56:	4b7d      	ldr	r3, [pc, #500]	; (8001c4c <HAL_RCC_OscConfig+0x628>)
 8001a58:	2101      	movs	r1, #1
 8001a5a:	430a      	orrs	r2, r1
 8001a5c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a5e:	f7ff f80d 	bl	8000a7c <HAL_GetTick>
 8001a62:	0003      	movs	r3, r0
 8001a64:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001a66:	e008      	b.n	8001a7a <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001a68:	f7ff f808 	bl	8000a7c <HAL_GetTick>
 8001a6c:	0002      	movs	r2, r0
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e0e3      	b.n	8001c42 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001a7a:	4b74      	ldr	r3, [pc, #464]	; (8001c4c <HAL_RCC_OscConfig+0x628>)
 8001a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a7e:	2202      	movs	r2, #2
 8001a80:	4013      	ands	r3, r2
 8001a82:	d0f1      	beq.n	8001a68 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001a84:	4b71      	ldr	r3, [pc, #452]	; (8001c4c <HAL_RCC_OscConfig+0x628>)
 8001a86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a88:	22f8      	movs	r2, #248	; 0xf8
 8001a8a:	4393      	bics	r3, r2
 8001a8c:	0019      	movs	r1, r3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	699b      	ldr	r3, [r3, #24]
 8001a92:	00da      	lsls	r2, r3, #3
 8001a94:	4b6d      	ldr	r3, [pc, #436]	; (8001c4c <HAL_RCC_OscConfig+0x628>)
 8001a96:	430a      	orrs	r2, r1
 8001a98:	635a      	str	r2, [r3, #52]	; 0x34
 8001a9a:	e034      	b.n	8001b06 <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	695b      	ldr	r3, [r3, #20]
 8001aa0:	3305      	adds	r3, #5
 8001aa2:	d111      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001aa4:	4b69      	ldr	r3, [pc, #420]	; (8001c4c <HAL_RCC_OscConfig+0x628>)
 8001aa6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001aa8:	4b68      	ldr	r3, [pc, #416]	; (8001c4c <HAL_RCC_OscConfig+0x628>)
 8001aaa:	2104      	movs	r1, #4
 8001aac:	438a      	bics	r2, r1
 8001aae:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001ab0:	4b66      	ldr	r3, [pc, #408]	; (8001c4c <HAL_RCC_OscConfig+0x628>)
 8001ab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ab4:	22f8      	movs	r2, #248	; 0xf8
 8001ab6:	4393      	bics	r3, r2
 8001ab8:	0019      	movs	r1, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	699b      	ldr	r3, [r3, #24]
 8001abe:	00da      	lsls	r2, r3, #3
 8001ac0:	4b62      	ldr	r3, [pc, #392]	; (8001c4c <HAL_RCC_OscConfig+0x628>)
 8001ac2:	430a      	orrs	r2, r1
 8001ac4:	635a      	str	r2, [r3, #52]	; 0x34
 8001ac6:	e01e      	b.n	8001b06 <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001ac8:	4b60      	ldr	r3, [pc, #384]	; (8001c4c <HAL_RCC_OscConfig+0x628>)
 8001aca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001acc:	4b5f      	ldr	r3, [pc, #380]	; (8001c4c <HAL_RCC_OscConfig+0x628>)
 8001ace:	2104      	movs	r1, #4
 8001ad0:	430a      	orrs	r2, r1
 8001ad2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001ad4:	4b5d      	ldr	r3, [pc, #372]	; (8001c4c <HAL_RCC_OscConfig+0x628>)
 8001ad6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ad8:	4b5c      	ldr	r3, [pc, #368]	; (8001c4c <HAL_RCC_OscConfig+0x628>)
 8001ada:	2101      	movs	r1, #1
 8001adc:	438a      	bics	r2, r1
 8001ade:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ae0:	f7fe ffcc 	bl	8000a7c <HAL_GetTick>
 8001ae4:	0003      	movs	r3, r0
 8001ae6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001ae8:	e008      	b.n	8001afc <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001aea:	f7fe ffc7 	bl	8000a7c <HAL_GetTick>
 8001aee:	0002      	movs	r2, r0
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d901      	bls.n	8001afc <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	e0a2      	b.n	8001c42 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001afc:	4b53      	ldr	r3, [pc, #332]	; (8001c4c <HAL_RCC_OscConfig+0x628>)
 8001afe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b00:	2202      	movs	r2, #2
 8001b02:	4013      	ands	r3, r2
 8001b04:	d1f1      	bne.n	8001aea <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6a1b      	ldr	r3, [r3, #32]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d100      	bne.n	8001b10 <HAL_RCC_OscConfig+0x4ec>
 8001b0e:	e097      	b.n	8001c40 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b10:	4b4e      	ldr	r3, [pc, #312]	; (8001c4c <HAL_RCC_OscConfig+0x628>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	220c      	movs	r2, #12
 8001b16:	4013      	ands	r3, r2
 8001b18:	2b08      	cmp	r3, #8
 8001b1a:	d100      	bne.n	8001b1e <HAL_RCC_OscConfig+0x4fa>
 8001b1c:	e06b      	b.n	8001bf6 <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6a1b      	ldr	r3, [r3, #32]
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d14c      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b26:	4b49      	ldr	r3, [pc, #292]	; (8001c4c <HAL_RCC_OscConfig+0x628>)
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	4b48      	ldr	r3, [pc, #288]	; (8001c4c <HAL_RCC_OscConfig+0x628>)
 8001b2c:	494a      	ldr	r1, [pc, #296]	; (8001c58 <HAL_RCC_OscConfig+0x634>)
 8001b2e:	400a      	ands	r2, r1
 8001b30:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b32:	f7fe ffa3 	bl	8000a7c <HAL_GetTick>
 8001b36:	0003      	movs	r3, r0
 8001b38:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b3a:	e008      	b.n	8001b4e <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b3c:	f7fe ff9e 	bl	8000a7c <HAL_GetTick>
 8001b40:	0002      	movs	r2, r0
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e079      	b.n	8001c42 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b4e:	4b3f      	ldr	r3, [pc, #252]	; (8001c4c <HAL_RCC_OscConfig+0x628>)
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	2380      	movs	r3, #128	; 0x80
 8001b54:	049b      	lsls	r3, r3, #18
 8001b56:	4013      	ands	r3, r2
 8001b58:	d1f0      	bne.n	8001b3c <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b5a:	4b3c      	ldr	r3, [pc, #240]	; (8001c4c <HAL_RCC_OscConfig+0x628>)
 8001b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b5e:	220f      	movs	r2, #15
 8001b60:	4393      	bics	r3, r2
 8001b62:	0019      	movs	r1, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b68:	4b38      	ldr	r3, [pc, #224]	; (8001c4c <HAL_RCC_OscConfig+0x628>)
 8001b6a:	430a      	orrs	r2, r1
 8001b6c:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b6e:	4b37      	ldr	r3, [pc, #220]	; (8001c4c <HAL_RCC_OscConfig+0x628>)
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	4a3a      	ldr	r2, [pc, #232]	; (8001c5c <HAL_RCC_OscConfig+0x638>)
 8001b74:	4013      	ands	r3, r2
 8001b76:	0019      	movs	r1, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b80:	431a      	orrs	r2, r3
 8001b82:	4b32      	ldr	r3, [pc, #200]	; (8001c4c <HAL_RCC_OscConfig+0x628>)
 8001b84:	430a      	orrs	r2, r1
 8001b86:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b88:	4b30      	ldr	r3, [pc, #192]	; (8001c4c <HAL_RCC_OscConfig+0x628>)
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	4b2f      	ldr	r3, [pc, #188]	; (8001c4c <HAL_RCC_OscConfig+0x628>)
 8001b8e:	2180      	movs	r1, #128	; 0x80
 8001b90:	0449      	lsls	r1, r1, #17
 8001b92:	430a      	orrs	r2, r1
 8001b94:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b96:	f7fe ff71 	bl	8000a7c <HAL_GetTick>
 8001b9a:	0003      	movs	r3, r0
 8001b9c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b9e:	e008      	b.n	8001bb2 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ba0:	f7fe ff6c 	bl	8000a7c <HAL_GetTick>
 8001ba4:	0002      	movs	r2, r0
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e047      	b.n	8001c42 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bb2:	4b26      	ldr	r3, [pc, #152]	; (8001c4c <HAL_RCC_OscConfig+0x628>)
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	2380      	movs	r3, #128	; 0x80
 8001bb8:	049b      	lsls	r3, r3, #18
 8001bba:	4013      	ands	r3, r2
 8001bbc:	d0f0      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x57c>
 8001bbe:	e03f      	b.n	8001c40 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bc0:	4b22      	ldr	r3, [pc, #136]	; (8001c4c <HAL_RCC_OscConfig+0x628>)
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	4b21      	ldr	r3, [pc, #132]	; (8001c4c <HAL_RCC_OscConfig+0x628>)
 8001bc6:	4924      	ldr	r1, [pc, #144]	; (8001c58 <HAL_RCC_OscConfig+0x634>)
 8001bc8:	400a      	ands	r2, r1
 8001bca:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bcc:	f7fe ff56 	bl	8000a7c <HAL_GetTick>
 8001bd0:	0003      	movs	r3, r0
 8001bd2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bd4:	e008      	b.n	8001be8 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bd6:	f7fe ff51 	bl	8000a7c <HAL_GetTick>
 8001bda:	0002      	movs	r2, r0
 8001bdc:	69bb      	ldr	r3, [r7, #24]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d901      	bls.n	8001be8 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8001be4:	2303      	movs	r3, #3
 8001be6:	e02c      	b.n	8001c42 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001be8:	4b18      	ldr	r3, [pc, #96]	; (8001c4c <HAL_RCC_OscConfig+0x628>)
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	2380      	movs	r3, #128	; 0x80
 8001bee:	049b      	lsls	r3, r3, #18
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	d1f0      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x5b2>
 8001bf4:	e024      	b.n	8001c40 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6a1b      	ldr	r3, [r3, #32]
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d101      	bne.n	8001c02 <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e01f      	b.n	8001c42 <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001c02:	4b12      	ldr	r3, [pc, #72]	; (8001c4c <HAL_RCC_OscConfig+0x628>)
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001c08:	4b10      	ldr	r3, [pc, #64]	; (8001c4c <HAL_RCC_OscConfig+0x628>)
 8001c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c0c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c0e:	697a      	ldr	r2, [r7, #20]
 8001c10:	23c0      	movs	r3, #192	; 0xc0
 8001c12:	025b      	lsls	r3, r3, #9
 8001c14:	401a      	ands	r2, r3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d10e      	bne.n	8001c3c <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	220f      	movs	r2, #15
 8001c22:	401a      	ands	r2, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d107      	bne.n	8001c3c <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001c2c:	697a      	ldr	r2, [r7, #20]
 8001c2e:	23f0      	movs	r3, #240	; 0xf0
 8001c30:	039b      	lsls	r3, r3, #14
 8001c32:	401a      	ands	r2, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d001      	beq.n	8001c40 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e000      	b.n	8001c42 <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8001c40:	2300      	movs	r3, #0
}
 8001c42:	0018      	movs	r0, r3
 8001c44:	46bd      	mov	sp, r7
 8001c46:	b008      	add	sp, #32
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	46c0      	nop			; (mov r8, r8)
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	00001388 	.word	0x00001388
 8001c54:	efffffff 	.word	0xefffffff
 8001c58:	feffffff 	.word	0xfeffffff
 8001c5c:	ffc27fff 	.word	0xffc27fff

08001c60 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d101      	bne.n	8001c74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e0b3      	b.n	8001ddc <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c74:	4b5b      	ldr	r3, [pc, #364]	; (8001de4 <HAL_RCC_ClockConfig+0x184>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2201      	movs	r2, #1
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	683a      	ldr	r2, [r7, #0]
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d911      	bls.n	8001ca6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c82:	4b58      	ldr	r3, [pc, #352]	; (8001de4 <HAL_RCC_ClockConfig+0x184>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	2201      	movs	r2, #1
 8001c88:	4393      	bics	r3, r2
 8001c8a:	0019      	movs	r1, r3
 8001c8c:	4b55      	ldr	r3, [pc, #340]	; (8001de4 <HAL_RCC_ClockConfig+0x184>)
 8001c8e:	683a      	ldr	r2, [r7, #0]
 8001c90:	430a      	orrs	r2, r1
 8001c92:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c94:	4b53      	ldr	r3, [pc, #332]	; (8001de4 <HAL_RCC_ClockConfig+0x184>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2201      	movs	r2, #1
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	683a      	ldr	r2, [r7, #0]
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d001      	beq.n	8001ca6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e09a      	b.n	8001ddc <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2202      	movs	r2, #2
 8001cac:	4013      	ands	r3, r2
 8001cae:	d015      	beq.n	8001cdc <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2204      	movs	r2, #4
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	d006      	beq.n	8001cc8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001cba:	4b4b      	ldr	r3, [pc, #300]	; (8001de8 <HAL_RCC_ClockConfig+0x188>)
 8001cbc:	685a      	ldr	r2, [r3, #4]
 8001cbe:	4b4a      	ldr	r3, [pc, #296]	; (8001de8 <HAL_RCC_ClockConfig+0x188>)
 8001cc0:	21e0      	movs	r1, #224	; 0xe0
 8001cc2:	00c9      	lsls	r1, r1, #3
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cc8:	4b47      	ldr	r3, [pc, #284]	; (8001de8 <HAL_RCC_ClockConfig+0x188>)
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	22f0      	movs	r2, #240	; 0xf0
 8001cce:	4393      	bics	r3, r2
 8001cd0:	0019      	movs	r1, r3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	689a      	ldr	r2, [r3, #8]
 8001cd6:	4b44      	ldr	r3, [pc, #272]	; (8001de8 <HAL_RCC_ClockConfig+0x188>)
 8001cd8:	430a      	orrs	r2, r1
 8001cda:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	d040      	beq.n	8001d68 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d107      	bne.n	8001cfe <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cee:	4b3e      	ldr	r3, [pc, #248]	; (8001de8 <HAL_RCC_ClockConfig+0x188>)
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	2380      	movs	r3, #128	; 0x80
 8001cf4:	029b      	lsls	r3, r3, #10
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	d114      	bne.n	8001d24 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e06e      	b.n	8001ddc <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d107      	bne.n	8001d16 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d06:	4b38      	ldr	r3, [pc, #224]	; (8001de8 <HAL_RCC_ClockConfig+0x188>)
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	2380      	movs	r3, #128	; 0x80
 8001d0c:	049b      	lsls	r3, r3, #18
 8001d0e:	4013      	ands	r3, r2
 8001d10:	d108      	bne.n	8001d24 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e062      	b.n	8001ddc <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d16:	4b34      	ldr	r3, [pc, #208]	; (8001de8 <HAL_RCC_ClockConfig+0x188>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	2202      	movs	r2, #2
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	d101      	bne.n	8001d24 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e05b      	b.n	8001ddc <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d24:	4b30      	ldr	r3, [pc, #192]	; (8001de8 <HAL_RCC_ClockConfig+0x188>)
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	2203      	movs	r2, #3
 8001d2a:	4393      	bics	r3, r2
 8001d2c:	0019      	movs	r1, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685a      	ldr	r2, [r3, #4]
 8001d32:	4b2d      	ldr	r3, [pc, #180]	; (8001de8 <HAL_RCC_ClockConfig+0x188>)
 8001d34:	430a      	orrs	r2, r1
 8001d36:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d38:	f7fe fea0 	bl	8000a7c <HAL_GetTick>
 8001d3c:	0003      	movs	r3, r0
 8001d3e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d40:	e009      	b.n	8001d56 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d42:	f7fe fe9b 	bl	8000a7c <HAL_GetTick>
 8001d46:	0002      	movs	r2, r0
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	4a27      	ldr	r2, [pc, #156]	; (8001dec <HAL_RCC_ClockConfig+0x18c>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e042      	b.n	8001ddc <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d56:	4b24      	ldr	r3, [pc, #144]	; (8001de8 <HAL_RCC_ClockConfig+0x188>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	220c      	movs	r2, #12
 8001d5c:	401a      	ands	r2, r3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d1ec      	bne.n	8001d42 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d68:	4b1e      	ldr	r3, [pc, #120]	; (8001de4 <HAL_RCC_ClockConfig+0x184>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	4013      	ands	r3, r2
 8001d70:	683a      	ldr	r2, [r7, #0]
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d211      	bcs.n	8001d9a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d76:	4b1b      	ldr	r3, [pc, #108]	; (8001de4 <HAL_RCC_ClockConfig+0x184>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	4393      	bics	r3, r2
 8001d7e:	0019      	movs	r1, r3
 8001d80:	4b18      	ldr	r3, [pc, #96]	; (8001de4 <HAL_RCC_ClockConfig+0x184>)
 8001d82:	683a      	ldr	r2, [r7, #0]
 8001d84:	430a      	orrs	r2, r1
 8001d86:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d88:	4b16      	ldr	r3, [pc, #88]	; (8001de4 <HAL_RCC_ClockConfig+0x184>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	4013      	ands	r3, r2
 8001d90:	683a      	ldr	r2, [r7, #0]
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d001      	beq.n	8001d9a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e020      	b.n	8001ddc <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2204      	movs	r2, #4
 8001da0:	4013      	ands	r3, r2
 8001da2:	d009      	beq.n	8001db8 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001da4:	4b10      	ldr	r3, [pc, #64]	; (8001de8 <HAL_RCC_ClockConfig+0x188>)
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	4a11      	ldr	r2, [pc, #68]	; (8001df0 <HAL_RCC_ClockConfig+0x190>)
 8001daa:	4013      	ands	r3, r2
 8001dac:	0019      	movs	r1, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	68da      	ldr	r2, [r3, #12]
 8001db2:	4b0d      	ldr	r3, [pc, #52]	; (8001de8 <HAL_RCC_ClockConfig+0x188>)
 8001db4:	430a      	orrs	r2, r1
 8001db6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001db8:	f000 f820 	bl	8001dfc <HAL_RCC_GetSysClockFreq>
 8001dbc:	0001      	movs	r1, r0
 8001dbe:	4b0a      	ldr	r3, [pc, #40]	; (8001de8 <HAL_RCC_ClockConfig+0x188>)
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	091b      	lsrs	r3, r3, #4
 8001dc4:	220f      	movs	r2, #15
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	4a0a      	ldr	r2, [pc, #40]	; (8001df4 <HAL_RCC_ClockConfig+0x194>)
 8001dca:	5cd3      	ldrb	r3, [r2, r3]
 8001dcc:	000a      	movs	r2, r1
 8001dce:	40da      	lsrs	r2, r3
 8001dd0:	4b09      	ldr	r3, [pc, #36]	; (8001df8 <HAL_RCC_ClockConfig+0x198>)
 8001dd2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001dd4:	2003      	movs	r0, #3
 8001dd6:	f7fe fe0b 	bl	80009f0 <HAL_InitTick>
  
  return HAL_OK;
 8001dda:	2300      	movs	r3, #0
}
 8001ddc:	0018      	movs	r0, r3
 8001dde:	46bd      	mov	sp, r7
 8001de0:	b004      	add	sp, #16
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	40022000 	.word	0x40022000
 8001de8:	40021000 	.word	0x40021000
 8001dec:	00001388 	.word	0x00001388
 8001df0:	fffff8ff 	.word	0xfffff8ff
 8001df4:	08002ec8 	.word	0x08002ec8
 8001df8:	20000000 	.word	0x20000000

08001dfc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dfc:	b590      	push	{r4, r7, lr}
 8001dfe:	b08f      	sub	sp, #60	; 0x3c
 8001e00:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001e02:	2314      	movs	r3, #20
 8001e04:	18fb      	adds	r3, r7, r3
 8001e06:	4a2c      	ldr	r2, [pc, #176]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e08:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001e0a:	c313      	stmia	r3!, {r0, r1, r4}
 8001e0c:	6812      	ldr	r2, [r2, #0]
 8001e0e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001e10:	1d3b      	adds	r3, r7, #4
 8001e12:	4a2a      	ldr	r2, [pc, #168]	; (8001ebc <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e14:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001e16:	c313      	stmia	r3!, {r0, r1, r4}
 8001e18:	6812      	ldr	r2, [r2, #0]
 8001e1a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e20:	2300      	movs	r3, #0
 8001e22:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e24:	2300      	movs	r3, #0
 8001e26:	637b      	str	r3, [r7, #52]	; 0x34
 8001e28:	2300      	movs	r3, #0
 8001e2a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001e30:	4b23      	ldr	r3, [pc, #140]	; (8001ec0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e38:	220c      	movs	r2, #12
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	2b04      	cmp	r3, #4
 8001e3e:	d002      	beq.n	8001e46 <HAL_RCC_GetSysClockFreq+0x4a>
 8001e40:	2b08      	cmp	r3, #8
 8001e42:	d003      	beq.n	8001e4c <HAL_RCC_GetSysClockFreq+0x50>
 8001e44:	e02f      	b.n	8001ea6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e46:	4b1f      	ldr	r3, [pc, #124]	; (8001ec4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001e48:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001e4a:	e02f      	b.n	8001eac <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e4e:	0c9b      	lsrs	r3, r3, #18
 8001e50:	220f      	movs	r2, #15
 8001e52:	4013      	ands	r3, r2
 8001e54:	2214      	movs	r2, #20
 8001e56:	18ba      	adds	r2, r7, r2
 8001e58:	5cd3      	ldrb	r3, [r2, r3]
 8001e5a:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001e5c:	4b18      	ldr	r3, [pc, #96]	; (8001ec0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e60:	220f      	movs	r2, #15
 8001e62:	4013      	ands	r3, r2
 8001e64:	1d3a      	adds	r2, r7, #4
 8001e66:	5cd3      	ldrb	r3, [r2, r3]
 8001e68:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001e6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e6c:	23c0      	movs	r3, #192	; 0xc0
 8001e6e:	025b      	lsls	r3, r3, #9
 8001e70:	401a      	ands	r2, r3
 8001e72:	2380      	movs	r3, #128	; 0x80
 8001e74:	025b      	lsls	r3, r3, #9
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d109      	bne.n	8001e8e <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001e7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e7c:	4811      	ldr	r0, [pc, #68]	; (8001ec4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001e7e:	f7fe f943 	bl	8000108 <__udivsi3>
 8001e82:	0003      	movs	r3, r0
 8001e84:	001a      	movs	r2, r3
 8001e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e88:	4353      	muls	r3, r2
 8001e8a:	637b      	str	r3, [r7, #52]	; 0x34
 8001e8c:	e008      	b.n	8001ea0 <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001e8e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e90:	480c      	ldr	r0, [pc, #48]	; (8001ec4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001e92:	f7fe f939 	bl	8000108 <__udivsi3>
 8001e96:	0003      	movs	r3, r0
 8001e98:	001a      	movs	r2, r3
 8001e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9c:	4353      	muls	r3, r2
 8001e9e:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001ea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ea2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001ea4:	e002      	b.n	8001eac <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ea6:	4b07      	ldr	r3, [pc, #28]	; (8001ec4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001ea8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001eaa:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001eae:	0018      	movs	r0, r3
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	b00f      	add	sp, #60	; 0x3c
 8001eb4:	bd90      	pop	{r4, r7, pc}
 8001eb6:	46c0      	nop			; (mov r8, r8)
 8001eb8:	08002ea8 	.word	0x08002ea8
 8001ebc:	08002eb8 	.word	0x08002eb8
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	007a1200 	.word	0x007a1200

08001ec8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b086      	sub	sp, #24
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	2380      	movs	r3, #128	; 0x80
 8001ede:	025b      	lsls	r3, r3, #9
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	d100      	bne.n	8001ee6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001ee4:	e08e      	b.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001ee6:	2017      	movs	r0, #23
 8001ee8:	183b      	adds	r3, r7, r0
 8001eea:	2200      	movs	r2, #0
 8001eec:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eee:	4b5f      	ldr	r3, [pc, #380]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001ef0:	69da      	ldr	r2, [r3, #28]
 8001ef2:	2380      	movs	r3, #128	; 0x80
 8001ef4:	055b      	lsls	r3, r3, #21
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	d110      	bne.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001efa:	4b5c      	ldr	r3, [pc, #368]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001efc:	69da      	ldr	r2, [r3, #28]
 8001efe:	4b5b      	ldr	r3, [pc, #364]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001f00:	2180      	movs	r1, #128	; 0x80
 8001f02:	0549      	lsls	r1, r1, #21
 8001f04:	430a      	orrs	r2, r1
 8001f06:	61da      	str	r2, [r3, #28]
 8001f08:	4b58      	ldr	r3, [pc, #352]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001f0a:	69da      	ldr	r2, [r3, #28]
 8001f0c:	2380      	movs	r3, #128	; 0x80
 8001f0e:	055b      	lsls	r3, r3, #21
 8001f10:	4013      	ands	r3, r2
 8001f12:	60bb      	str	r3, [r7, #8]
 8001f14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f16:	183b      	adds	r3, r7, r0
 8001f18:	2201      	movs	r2, #1
 8001f1a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f1c:	4b54      	ldr	r3, [pc, #336]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	2380      	movs	r3, #128	; 0x80
 8001f22:	005b      	lsls	r3, r3, #1
 8001f24:	4013      	ands	r3, r2
 8001f26:	d11a      	bne.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f28:	4b51      	ldr	r3, [pc, #324]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	4b50      	ldr	r3, [pc, #320]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001f2e:	2180      	movs	r1, #128	; 0x80
 8001f30:	0049      	lsls	r1, r1, #1
 8001f32:	430a      	orrs	r2, r1
 8001f34:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f36:	f7fe fda1 	bl	8000a7c <HAL_GetTick>
 8001f3a:	0003      	movs	r3, r0
 8001f3c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f3e:	e008      	b.n	8001f52 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f40:	f7fe fd9c 	bl	8000a7c <HAL_GetTick>
 8001f44:	0002      	movs	r2, r0
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	2b64      	cmp	r3, #100	; 0x64
 8001f4c:	d901      	bls.n	8001f52 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e087      	b.n	8002062 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f52:	4b47      	ldr	r3, [pc, #284]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	2380      	movs	r3, #128	; 0x80
 8001f58:	005b      	lsls	r3, r3, #1
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	d0f0      	beq.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001f5e:	4b43      	ldr	r3, [pc, #268]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001f60:	6a1a      	ldr	r2, [r3, #32]
 8001f62:	23c0      	movs	r3, #192	; 0xc0
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	4013      	ands	r3, r2
 8001f68:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d034      	beq.n	8001fda <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	685a      	ldr	r2, [r3, #4]
 8001f74:	23c0      	movs	r3, #192	; 0xc0
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	4013      	ands	r3, r2
 8001f7a:	68fa      	ldr	r2, [r7, #12]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d02c      	beq.n	8001fda <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f80:	4b3a      	ldr	r3, [pc, #232]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001f82:	6a1b      	ldr	r3, [r3, #32]
 8001f84:	4a3b      	ldr	r2, [pc, #236]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f86:	4013      	ands	r3, r2
 8001f88:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f8a:	4b38      	ldr	r3, [pc, #224]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001f8c:	6a1a      	ldr	r2, [r3, #32]
 8001f8e:	4b37      	ldr	r3, [pc, #220]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001f90:	2180      	movs	r1, #128	; 0x80
 8001f92:	0249      	lsls	r1, r1, #9
 8001f94:	430a      	orrs	r2, r1
 8001f96:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f98:	4b34      	ldr	r3, [pc, #208]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001f9a:	6a1a      	ldr	r2, [r3, #32]
 8001f9c:	4b33      	ldr	r3, [pc, #204]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001f9e:	4936      	ldr	r1, [pc, #216]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001fa0:	400a      	ands	r2, r1
 8001fa2:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001fa4:	4b31      	ldr	r3, [pc, #196]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001fa6:	68fa      	ldr	r2, [r7, #12]
 8001fa8:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2201      	movs	r2, #1
 8001fae:	4013      	ands	r3, r2
 8001fb0:	d013      	beq.n	8001fda <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb2:	f7fe fd63 	bl	8000a7c <HAL_GetTick>
 8001fb6:	0003      	movs	r3, r0
 8001fb8:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fba:	e009      	b.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fbc:	f7fe fd5e 	bl	8000a7c <HAL_GetTick>
 8001fc0:	0002      	movs	r2, r0
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	4a2d      	ldr	r2, [pc, #180]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d901      	bls.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	e048      	b.n	8002062 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fd0:	4b26      	ldr	r3, [pc, #152]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001fd2:	6a1b      	ldr	r3, [r3, #32]
 8001fd4:	2202      	movs	r2, #2
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	d0f0      	beq.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001fda:	4b24      	ldr	r3, [pc, #144]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001fdc:	6a1b      	ldr	r3, [r3, #32]
 8001fde:	4a25      	ldr	r2, [pc, #148]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	0019      	movs	r1, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685a      	ldr	r2, [r3, #4]
 8001fe8:	4b20      	ldr	r3, [pc, #128]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001fea:	430a      	orrs	r2, r1
 8001fec:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001fee:	2317      	movs	r3, #23
 8001ff0:	18fb      	adds	r3, r7, r3
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d105      	bne.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ff8:	4b1c      	ldr	r3, [pc, #112]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001ffa:	69da      	ldr	r2, [r3, #28]
 8001ffc:	4b1b      	ldr	r3, [pc, #108]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001ffe:	4920      	ldr	r1, [pc, #128]	; (8002080 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002000:	400a      	ands	r2, r1
 8002002:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2201      	movs	r2, #1
 800200a:	4013      	ands	r3, r2
 800200c:	d009      	beq.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800200e:	4b17      	ldr	r3, [pc, #92]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002012:	2203      	movs	r2, #3
 8002014:	4393      	bics	r3, r2
 8002016:	0019      	movs	r1, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	689a      	ldr	r2, [r3, #8]
 800201c:	4b13      	ldr	r3, [pc, #76]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800201e:	430a      	orrs	r2, r1
 8002020:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	2220      	movs	r2, #32
 8002028:	4013      	ands	r3, r2
 800202a:	d009      	beq.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800202c:	4b0f      	ldr	r3, [pc, #60]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800202e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002030:	2210      	movs	r2, #16
 8002032:	4393      	bics	r3, r2
 8002034:	0019      	movs	r1, r3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	68da      	ldr	r2, [r3, #12]
 800203a:	4b0c      	ldr	r3, [pc, #48]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800203c:	430a      	orrs	r2, r1
 800203e:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	2380      	movs	r3, #128	; 0x80
 8002046:	029b      	lsls	r3, r3, #10
 8002048:	4013      	ands	r3, r2
 800204a:	d009      	beq.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800204c:	4b07      	ldr	r3, [pc, #28]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800204e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002050:	2280      	movs	r2, #128	; 0x80
 8002052:	4393      	bics	r3, r2
 8002054:	0019      	movs	r1, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	691a      	ldr	r2, [r3, #16]
 800205a:	4b04      	ldr	r3, [pc, #16]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800205c:	430a      	orrs	r2, r1
 800205e:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002060:	2300      	movs	r3, #0
}
 8002062:	0018      	movs	r0, r3
 8002064:	46bd      	mov	sp, r7
 8002066:	b006      	add	sp, #24
 8002068:	bd80      	pop	{r7, pc}
 800206a:	46c0      	nop			; (mov r8, r8)
 800206c:	40021000 	.word	0x40021000
 8002070:	40007000 	.word	0x40007000
 8002074:	fffffcff 	.word	0xfffffcff
 8002078:	fffeffff 	.word	0xfffeffff
 800207c:	00001388 	.word	0x00001388
 8002080:	efffffff 	.word	0xefffffff

08002084 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d101      	bne.n	8002096 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e042      	b.n	800211c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	223d      	movs	r2, #61	; 0x3d
 800209a:	5c9b      	ldrb	r3, [r3, r2]
 800209c:	b2db      	uxtb	r3, r3
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d107      	bne.n	80020b2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	223c      	movs	r2, #60	; 0x3c
 80020a6:	2100      	movs	r1, #0
 80020a8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	0018      	movs	r0, r3
 80020ae:	f7fe fbe5 	bl	800087c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	223d      	movs	r2, #61	; 0x3d
 80020b6:	2102      	movs	r1, #2
 80020b8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	3304      	adds	r3, #4
 80020c2:	0019      	movs	r1, r3
 80020c4:	0010      	movs	r0, r2
 80020c6:	f000 fad1 	bl	800266c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2246      	movs	r2, #70	; 0x46
 80020ce:	2101      	movs	r1, #1
 80020d0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	223e      	movs	r2, #62	; 0x3e
 80020d6:	2101      	movs	r1, #1
 80020d8:	5499      	strb	r1, [r3, r2]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	223f      	movs	r2, #63	; 0x3f
 80020de:	2101      	movs	r1, #1
 80020e0:	5499      	strb	r1, [r3, r2]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2240      	movs	r2, #64	; 0x40
 80020e6:	2101      	movs	r1, #1
 80020e8:	5499      	strb	r1, [r3, r2]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2241      	movs	r2, #65	; 0x41
 80020ee:	2101      	movs	r1, #1
 80020f0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2242      	movs	r2, #66	; 0x42
 80020f6:	2101      	movs	r1, #1
 80020f8:	5499      	strb	r1, [r3, r2]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2243      	movs	r2, #67	; 0x43
 80020fe:	2101      	movs	r1, #1
 8002100:	5499      	strb	r1, [r3, r2]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2244      	movs	r2, #68	; 0x44
 8002106:	2101      	movs	r1, #1
 8002108:	5499      	strb	r1, [r3, r2]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2245      	movs	r2, #69	; 0x45
 800210e:	2101      	movs	r1, #1
 8002110:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	223d      	movs	r2, #61	; 0x3d
 8002116:	2101      	movs	r1, #1
 8002118:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800211a:	2300      	movs	r3, #0
}
 800211c:	0018      	movs	r0, r3
 800211e:	46bd      	mov	sp, r7
 8002120:	b002      	add	sp, #8
 8002122:	bd80      	pop	{r7, pc}

08002124 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d101      	bne.n	8002136 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e042      	b.n	80021bc <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	223d      	movs	r2, #61	; 0x3d
 800213a:	5c9b      	ldrb	r3, [r3, r2]
 800213c:	b2db      	uxtb	r3, r3
 800213e:	2b00      	cmp	r3, #0
 8002140:	d107      	bne.n	8002152 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	223c      	movs	r2, #60	; 0x3c
 8002146:	2100      	movs	r1, #0
 8002148:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	0018      	movs	r0, r3
 800214e:	f000 f839 	bl	80021c4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	223d      	movs	r2, #61	; 0x3d
 8002156:	2102      	movs	r1, #2
 8002158:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	3304      	adds	r3, #4
 8002162:	0019      	movs	r1, r3
 8002164:	0010      	movs	r0, r2
 8002166:	f000 fa81 	bl	800266c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2246      	movs	r2, #70	; 0x46
 800216e:	2101      	movs	r1, #1
 8002170:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	223e      	movs	r2, #62	; 0x3e
 8002176:	2101      	movs	r1, #1
 8002178:	5499      	strb	r1, [r3, r2]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	223f      	movs	r2, #63	; 0x3f
 800217e:	2101      	movs	r1, #1
 8002180:	5499      	strb	r1, [r3, r2]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2240      	movs	r2, #64	; 0x40
 8002186:	2101      	movs	r1, #1
 8002188:	5499      	strb	r1, [r3, r2]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2241      	movs	r2, #65	; 0x41
 800218e:	2101      	movs	r1, #1
 8002190:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2242      	movs	r2, #66	; 0x42
 8002196:	2101      	movs	r1, #1
 8002198:	5499      	strb	r1, [r3, r2]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2243      	movs	r2, #67	; 0x43
 800219e:	2101      	movs	r1, #1
 80021a0:	5499      	strb	r1, [r3, r2]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2244      	movs	r2, #68	; 0x44
 80021a6:	2101      	movs	r1, #1
 80021a8:	5499      	strb	r1, [r3, r2]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2245      	movs	r2, #69	; 0x45
 80021ae:	2101      	movs	r1, #1
 80021b0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	223d      	movs	r2, #61	; 0x3d
 80021b6:	2101      	movs	r1, #1
 80021b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80021ba:	2300      	movs	r3, #0
}
 80021bc:	0018      	movs	r0, r3
 80021be:	46bd      	mov	sp, r7
 80021c0:	b002      	add	sp, #8
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80021cc:	46c0      	nop			; (mov r8, r8)
 80021ce:	46bd      	mov	sp, r7
 80021d0:	b002      	add	sp, #8
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d108      	bne.n	80021f6 <HAL_TIM_PWM_Start+0x22>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	223e      	movs	r2, #62	; 0x3e
 80021e8:	5c9b      	ldrb	r3, [r3, r2]
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	3b01      	subs	r3, #1
 80021ee:	1e5a      	subs	r2, r3, #1
 80021f0:	4193      	sbcs	r3, r2
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	e01f      	b.n	8002236 <HAL_TIM_PWM_Start+0x62>
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	2b04      	cmp	r3, #4
 80021fa:	d108      	bne.n	800220e <HAL_TIM_PWM_Start+0x3a>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	223f      	movs	r2, #63	; 0x3f
 8002200:	5c9b      	ldrb	r3, [r3, r2]
 8002202:	b2db      	uxtb	r3, r3
 8002204:	3b01      	subs	r3, #1
 8002206:	1e5a      	subs	r2, r3, #1
 8002208:	4193      	sbcs	r3, r2
 800220a:	b2db      	uxtb	r3, r3
 800220c:	e013      	b.n	8002236 <HAL_TIM_PWM_Start+0x62>
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	2b08      	cmp	r3, #8
 8002212:	d108      	bne.n	8002226 <HAL_TIM_PWM_Start+0x52>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2240      	movs	r2, #64	; 0x40
 8002218:	5c9b      	ldrb	r3, [r3, r2]
 800221a:	b2db      	uxtb	r3, r3
 800221c:	3b01      	subs	r3, #1
 800221e:	1e5a      	subs	r2, r3, #1
 8002220:	4193      	sbcs	r3, r2
 8002222:	b2db      	uxtb	r3, r3
 8002224:	e007      	b.n	8002236 <HAL_TIM_PWM_Start+0x62>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2241      	movs	r2, #65	; 0x41
 800222a:	5c9b      	ldrb	r3, [r3, r2]
 800222c:	b2db      	uxtb	r3, r3
 800222e:	3b01      	subs	r3, #1
 8002230:	1e5a      	subs	r2, r3, #1
 8002232:	4193      	sbcs	r3, r2
 8002234:	b2db      	uxtb	r3, r3
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e06e      	b.n	800231c <HAL_TIM_PWM_Start+0x148>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d104      	bne.n	800224e <HAL_TIM_PWM_Start+0x7a>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	223e      	movs	r2, #62	; 0x3e
 8002248:	2102      	movs	r1, #2
 800224a:	5499      	strb	r1, [r3, r2]
 800224c:	e013      	b.n	8002276 <HAL_TIM_PWM_Start+0xa2>
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	2b04      	cmp	r3, #4
 8002252:	d104      	bne.n	800225e <HAL_TIM_PWM_Start+0x8a>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	223f      	movs	r2, #63	; 0x3f
 8002258:	2102      	movs	r1, #2
 800225a:	5499      	strb	r1, [r3, r2]
 800225c:	e00b      	b.n	8002276 <HAL_TIM_PWM_Start+0xa2>
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	2b08      	cmp	r3, #8
 8002262:	d104      	bne.n	800226e <HAL_TIM_PWM_Start+0x9a>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2240      	movs	r2, #64	; 0x40
 8002268:	2102      	movs	r1, #2
 800226a:	5499      	strb	r1, [r3, r2]
 800226c:	e003      	b.n	8002276 <HAL_TIM_PWM_Start+0xa2>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2241      	movs	r2, #65	; 0x41
 8002272:	2102      	movs	r1, #2
 8002274:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	6839      	ldr	r1, [r7, #0]
 800227c:	2201      	movs	r2, #1
 800227e:	0018      	movs	r0, r3
 8002280:	f000 fd00 	bl	8002c84 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a26      	ldr	r2, [pc, #152]	; (8002324 <HAL_TIM_PWM_Start+0x150>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d00e      	beq.n	80022ac <HAL_TIM_PWM_Start+0xd8>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a25      	ldr	r2, [pc, #148]	; (8002328 <HAL_TIM_PWM_Start+0x154>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d009      	beq.n	80022ac <HAL_TIM_PWM_Start+0xd8>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a23      	ldr	r2, [pc, #140]	; (800232c <HAL_TIM_PWM_Start+0x158>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d004      	beq.n	80022ac <HAL_TIM_PWM_Start+0xd8>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a22      	ldr	r2, [pc, #136]	; (8002330 <HAL_TIM_PWM_Start+0x15c>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d101      	bne.n	80022b0 <HAL_TIM_PWM_Start+0xdc>
 80022ac:	2301      	movs	r3, #1
 80022ae:	e000      	b.n	80022b2 <HAL_TIM_PWM_Start+0xde>
 80022b0:	2300      	movs	r3, #0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d008      	beq.n	80022c8 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	2180      	movs	r1, #128	; 0x80
 80022c2:	0209      	lsls	r1, r1, #8
 80022c4:	430a      	orrs	r2, r1
 80022c6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a15      	ldr	r2, [pc, #84]	; (8002324 <HAL_TIM_PWM_Start+0x150>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d009      	beq.n	80022e6 <HAL_TIM_PWM_Start+0x112>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a17      	ldr	r2, [pc, #92]	; (8002334 <HAL_TIM_PWM_Start+0x160>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d004      	beq.n	80022e6 <HAL_TIM_PWM_Start+0x112>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a11      	ldr	r2, [pc, #68]	; (8002328 <HAL_TIM_PWM_Start+0x154>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d111      	bne.n	800230a <HAL_TIM_PWM_Start+0x136>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	2207      	movs	r2, #7
 80022ee:	4013      	ands	r3, r2
 80022f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2b06      	cmp	r3, #6
 80022f6:	d010      	beq.n	800231a <HAL_TIM_PWM_Start+0x146>
    {
      __HAL_TIM_ENABLE(htim);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2101      	movs	r1, #1
 8002304:	430a      	orrs	r2, r1
 8002306:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002308:	e007      	b.n	800231a <HAL_TIM_PWM_Start+0x146>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2101      	movs	r1, #1
 8002316:	430a      	orrs	r2, r1
 8002318:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800231a:	2300      	movs	r3, #0
}
 800231c:	0018      	movs	r0, r3
 800231e:	46bd      	mov	sp, r7
 8002320:	b004      	add	sp, #16
 8002322:	bd80      	pop	{r7, pc}
 8002324:	40012c00 	.word	0x40012c00
 8002328:	40014000 	.word	0x40014000
 800232c:	40014400 	.word	0x40014400
 8002330:	40014800 	.word	0x40014800
 8002334:	40000400 	.word	0x40000400

08002338 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b086      	sub	sp, #24
 800233c:	af00      	add	r7, sp, #0
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	60b9      	str	r1, [r7, #8]
 8002342:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002344:	2317      	movs	r3, #23
 8002346:	18fb      	adds	r3, r7, r3
 8002348:	2200      	movs	r2, #0
 800234a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	223c      	movs	r2, #60	; 0x3c
 8002350:	5c9b      	ldrb	r3, [r3, r2]
 8002352:	2b01      	cmp	r3, #1
 8002354:	d101      	bne.n	800235a <HAL_TIM_PWM_ConfigChannel+0x22>
 8002356:	2302      	movs	r3, #2
 8002358:	e0ad      	b.n	80024b6 <HAL_TIM_PWM_ConfigChannel+0x17e>
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	223c      	movs	r2, #60	; 0x3c
 800235e:	2101      	movs	r1, #1
 8002360:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2b0c      	cmp	r3, #12
 8002366:	d100      	bne.n	800236a <HAL_TIM_PWM_ConfigChannel+0x32>
 8002368:	e076      	b.n	8002458 <HAL_TIM_PWM_ConfigChannel+0x120>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2b0c      	cmp	r3, #12
 800236e:	d900      	bls.n	8002372 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8002370:	e095      	b.n	800249e <HAL_TIM_PWM_ConfigChannel+0x166>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2b08      	cmp	r3, #8
 8002376:	d04e      	beq.n	8002416 <HAL_TIM_PWM_ConfigChannel+0xde>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2b08      	cmp	r3, #8
 800237c:	d900      	bls.n	8002380 <HAL_TIM_PWM_ConfigChannel+0x48>
 800237e:	e08e      	b.n	800249e <HAL_TIM_PWM_ConfigChannel+0x166>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d003      	beq.n	800238e <HAL_TIM_PWM_ConfigChannel+0x56>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2b04      	cmp	r3, #4
 800238a:	d021      	beq.n	80023d0 <HAL_TIM_PWM_ConfigChannel+0x98>
 800238c:	e087      	b.n	800249e <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	68ba      	ldr	r2, [r7, #8]
 8002394:	0011      	movs	r1, r2
 8002396:	0018      	movs	r0, r3
 8002398:	f000 f9de 	bl	8002758 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	699a      	ldr	r2, [r3, #24]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	2108      	movs	r1, #8
 80023a8:	430a      	orrs	r2, r1
 80023aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	699a      	ldr	r2, [r3, #24]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	2104      	movs	r1, #4
 80023b8:	438a      	bics	r2, r1
 80023ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	6999      	ldr	r1, [r3, #24]
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	691a      	ldr	r2, [r3, #16]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	430a      	orrs	r2, r1
 80023cc:	619a      	str	r2, [r3, #24]
      break;
 80023ce:	e06b      	b.n	80024a8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	68ba      	ldr	r2, [r7, #8]
 80023d6:	0011      	movs	r1, r2
 80023d8:	0018      	movs	r0, r3
 80023da:	f000 fa45 	bl	8002868 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	699a      	ldr	r2, [r3, #24]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2180      	movs	r1, #128	; 0x80
 80023ea:	0109      	lsls	r1, r1, #4
 80023ec:	430a      	orrs	r2, r1
 80023ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	699a      	ldr	r2, [r3, #24]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4931      	ldr	r1, [pc, #196]	; (80024c0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80023fc:	400a      	ands	r2, r1
 80023fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	6999      	ldr	r1, [r3, #24]
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	691b      	ldr	r3, [r3, #16]
 800240a:	021a      	lsls	r2, r3, #8
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	430a      	orrs	r2, r1
 8002412:	619a      	str	r2, [r3, #24]
      break;
 8002414:	e048      	b.n	80024a8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	68ba      	ldr	r2, [r7, #8]
 800241c:	0011      	movs	r1, r2
 800241e:	0018      	movs	r0, r3
 8002420:	f000 faa6 	bl	8002970 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	69da      	ldr	r2, [r3, #28]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2108      	movs	r1, #8
 8002430:	430a      	orrs	r2, r1
 8002432:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	69da      	ldr	r2, [r3, #28]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	2104      	movs	r1, #4
 8002440:	438a      	bics	r2, r1
 8002442:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	69d9      	ldr	r1, [r3, #28]
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	691a      	ldr	r2, [r3, #16]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	430a      	orrs	r2, r1
 8002454:	61da      	str	r2, [r3, #28]
      break;
 8002456:	e027      	b.n	80024a8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	68ba      	ldr	r2, [r7, #8]
 800245e:	0011      	movs	r1, r2
 8002460:	0018      	movs	r0, r3
 8002462:	f000 fb0b 	bl	8002a7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	69da      	ldr	r2, [r3, #28]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2180      	movs	r1, #128	; 0x80
 8002472:	0109      	lsls	r1, r1, #4
 8002474:	430a      	orrs	r2, r1
 8002476:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	69da      	ldr	r2, [r3, #28]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	490f      	ldr	r1, [pc, #60]	; (80024c0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002484:	400a      	ands	r2, r1
 8002486:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	69d9      	ldr	r1, [r3, #28]
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	691b      	ldr	r3, [r3, #16]
 8002492:	021a      	lsls	r2, r3, #8
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	430a      	orrs	r2, r1
 800249a:	61da      	str	r2, [r3, #28]
      break;
 800249c:	e004      	b.n	80024a8 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 800249e:	2317      	movs	r3, #23
 80024a0:	18fb      	adds	r3, r7, r3
 80024a2:	2201      	movs	r2, #1
 80024a4:	701a      	strb	r2, [r3, #0]
      break;
 80024a6:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	223c      	movs	r2, #60	; 0x3c
 80024ac:	2100      	movs	r1, #0
 80024ae:	5499      	strb	r1, [r3, r2]

  return status;
 80024b0:	2317      	movs	r3, #23
 80024b2:	18fb      	adds	r3, r7, r3
 80024b4:	781b      	ldrb	r3, [r3, #0]
}
 80024b6:	0018      	movs	r0, r3
 80024b8:	46bd      	mov	sp, r7
 80024ba:	b006      	add	sp, #24
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	46c0      	nop			; (mov r8, r8)
 80024c0:	fffffbff 	.word	0xfffffbff

080024c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024ce:	230f      	movs	r3, #15
 80024d0:	18fb      	adds	r3, r7, r3
 80024d2:	2200      	movs	r2, #0
 80024d4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	223c      	movs	r2, #60	; 0x3c
 80024da:	5c9b      	ldrb	r3, [r3, r2]
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d101      	bne.n	80024e4 <HAL_TIM_ConfigClockSource+0x20>
 80024e0:	2302      	movs	r3, #2
 80024e2:	e0bc      	b.n	800265e <HAL_TIM_ConfigClockSource+0x19a>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	223c      	movs	r2, #60	; 0x3c
 80024e8:	2101      	movs	r1, #1
 80024ea:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	223d      	movs	r2, #61	; 0x3d
 80024f0:	2102      	movs	r1, #2
 80024f2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	2277      	movs	r2, #119	; 0x77
 8002500:	4393      	bics	r3, r2
 8002502:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	4a58      	ldr	r2, [pc, #352]	; (8002668 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002508:	4013      	ands	r3, r2
 800250a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	68ba      	ldr	r2, [r7, #8]
 8002512:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2280      	movs	r2, #128	; 0x80
 800251a:	0192      	lsls	r2, r2, #6
 800251c:	4293      	cmp	r3, r2
 800251e:	d040      	beq.n	80025a2 <HAL_TIM_ConfigClockSource+0xde>
 8002520:	2280      	movs	r2, #128	; 0x80
 8002522:	0192      	lsls	r2, r2, #6
 8002524:	4293      	cmp	r3, r2
 8002526:	d900      	bls.n	800252a <HAL_TIM_ConfigClockSource+0x66>
 8002528:	e088      	b.n	800263c <HAL_TIM_ConfigClockSource+0x178>
 800252a:	2280      	movs	r2, #128	; 0x80
 800252c:	0152      	lsls	r2, r2, #5
 800252e:	4293      	cmp	r3, r2
 8002530:	d100      	bne.n	8002534 <HAL_TIM_ConfigClockSource+0x70>
 8002532:	e088      	b.n	8002646 <HAL_TIM_ConfigClockSource+0x182>
 8002534:	2280      	movs	r2, #128	; 0x80
 8002536:	0152      	lsls	r2, r2, #5
 8002538:	4293      	cmp	r3, r2
 800253a:	d900      	bls.n	800253e <HAL_TIM_ConfigClockSource+0x7a>
 800253c:	e07e      	b.n	800263c <HAL_TIM_ConfigClockSource+0x178>
 800253e:	2b70      	cmp	r3, #112	; 0x70
 8002540:	d018      	beq.n	8002574 <HAL_TIM_ConfigClockSource+0xb0>
 8002542:	d900      	bls.n	8002546 <HAL_TIM_ConfigClockSource+0x82>
 8002544:	e07a      	b.n	800263c <HAL_TIM_ConfigClockSource+0x178>
 8002546:	2b60      	cmp	r3, #96	; 0x60
 8002548:	d04f      	beq.n	80025ea <HAL_TIM_ConfigClockSource+0x126>
 800254a:	d900      	bls.n	800254e <HAL_TIM_ConfigClockSource+0x8a>
 800254c:	e076      	b.n	800263c <HAL_TIM_ConfigClockSource+0x178>
 800254e:	2b50      	cmp	r3, #80	; 0x50
 8002550:	d03b      	beq.n	80025ca <HAL_TIM_ConfigClockSource+0x106>
 8002552:	d900      	bls.n	8002556 <HAL_TIM_ConfigClockSource+0x92>
 8002554:	e072      	b.n	800263c <HAL_TIM_ConfigClockSource+0x178>
 8002556:	2b40      	cmp	r3, #64	; 0x40
 8002558:	d057      	beq.n	800260a <HAL_TIM_ConfigClockSource+0x146>
 800255a:	d900      	bls.n	800255e <HAL_TIM_ConfigClockSource+0x9a>
 800255c:	e06e      	b.n	800263c <HAL_TIM_ConfigClockSource+0x178>
 800255e:	2b30      	cmp	r3, #48	; 0x30
 8002560:	d063      	beq.n	800262a <HAL_TIM_ConfigClockSource+0x166>
 8002562:	d86b      	bhi.n	800263c <HAL_TIM_ConfigClockSource+0x178>
 8002564:	2b20      	cmp	r3, #32
 8002566:	d060      	beq.n	800262a <HAL_TIM_ConfigClockSource+0x166>
 8002568:	d868      	bhi.n	800263c <HAL_TIM_ConfigClockSource+0x178>
 800256a:	2b00      	cmp	r3, #0
 800256c:	d05d      	beq.n	800262a <HAL_TIM_ConfigClockSource+0x166>
 800256e:	2b10      	cmp	r3, #16
 8002570:	d05b      	beq.n	800262a <HAL_TIM_ConfigClockSource+0x166>
 8002572:	e063      	b.n	800263c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6818      	ldr	r0, [r3, #0]
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	6899      	ldr	r1, [r3, #8]
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685a      	ldr	r2, [r3, #4]
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	f000 fb5e 	bl	8002c44 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	2277      	movs	r2, #119	; 0x77
 8002594:	4313      	orrs	r3, r2
 8002596:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	68ba      	ldr	r2, [r7, #8]
 800259e:	609a      	str	r2, [r3, #8]
      break;
 80025a0:	e052      	b.n	8002648 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6818      	ldr	r0, [r3, #0]
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	6899      	ldr	r1, [r3, #8]
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	685a      	ldr	r2, [r3, #4]
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	f000 fb47 	bl	8002c44 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	689a      	ldr	r2, [r3, #8]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2180      	movs	r1, #128	; 0x80
 80025c2:	01c9      	lsls	r1, r1, #7
 80025c4:	430a      	orrs	r2, r1
 80025c6:	609a      	str	r2, [r3, #8]
      break;
 80025c8:	e03e      	b.n	8002648 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6818      	ldr	r0, [r3, #0]
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	6859      	ldr	r1, [r3, #4]
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	001a      	movs	r2, r3
 80025d8:	f000 faba 	bl	8002b50 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2150      	movs	r1, #80	; 0x50
 80025e2:	0018      	movs	r0, r3
 80025e4:	f000 fb14 	bl	8002c10 <TIM_ITRx_SetConfig>
      break;
 80025e8:	e02e      	b.n	8002648 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6818      	ldr	r0, [r3, #0]
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	6859      	ldr	r1, [r3, #4]
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	001a      	movs	r2, r3
 80025f8:	f000 fad8 	bl	8002bac <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2160      	movs	r1, #96	; 0x60
 8002602:	0018      	movs	r0, r3
 8002604:	f000 fb04 	bl	8002c10 <TIM_ITRx_SetConfig>
      break;
 8002608:	e01e      	b.n	8002648 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6818      	ldr	r0, [r3, #0]
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	6859      	ldr	r1, [r3, #4]
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	001a      	movs	r2, r3
 8002618:	f000 fa9a 	bl	8002b50 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2140      	movs	r1, #64	; 0x40
 8002622:	0018      	movs	r0, r3
 8002624:	f000 faf4 	bl	8002c10 <TIM_ITRx_SetConfig>
      break;
 8002628:	e00e      	b.n	8002648 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	0019      	movs	r1, r3
 8002634:	0010      	movs	r0, r2
 8002636:	f000 faeb 	bl	8002c10 <TIM_ITRx_SetConfig>
      break;
 800263a:	e005      	b.n	8002648 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800263c:	230f      	movs	r3, #15
 800263e:	18fb      	adds	r3, r7, r3
 8002640:	2201      	movs	r2, #1
 8002642:	701a      	strb	r2, [r3, #0]
      break;
 8002644:	e000      	b.n	8002648 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002646:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	223d      	movs	r2, #61	; 0x3d
 800264c:	2101      	movs	r1, #1
 800264e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	223c      	movs	r2, #60	; 0x3c
 8002654:	2100      	movs	r1, #0
 8002656:	5499      	strb	r1, [r3, r2]

  return status;
 8002658:	230f      	movs	r3, #15
 800265a:	18fb      	adds	r3, r7, r3
 800265c:	781b      	ldrb	r3, [r3, #0]
}
 800265e:	0018      	movs	r0, r3
 8002660:	46bd      	mov	sp, r7
 8002662:	b004      	add	sp, #16
 8002664:	bd80      	pop	{r7, pc}
 8002666:	46c0      	nop			; (mov r8, r8)
 8002668:	ffff00ff 	.word	0xffff00ff

0800266c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	4a2f      	ldr	r2, [pc, #188]	; (800273c <TIM_Base_SetConfig+0xd0>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d003      	beq.n	800268c <TIM_Base_SetConfig+0x20>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	4a2e      	ldr	r2, [pc, #184]	; (8002740 <TIM_Base_SetConfig+0xd4>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d108      	bne.n	800269e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2270      	movs	r2, #112	; 0x70
 8002690:	4393      	bics	r3, r2
 8002692:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	68fa      	ldr	r2, [r7, #12]
 800269a:	4313      	orrs	r3, r2
 800269c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a26      	ldr	r2, [pc, #152]	; (800273c <TIM_Base_SetConfig+0xd0>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d013      	beq.n	80026ce <TIM_Base_SetConfig+0x62>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a25      	ldr	r2, [pc, #148]	; (8002740 <TIM_Base_SetConfig+0xd4>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d00f      	beq.n	80026ce <TIM_Base_SetConfig+0x62>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a24      	ldr	r2, [pc, #144]	; (8002744 <TIM_Base_SetConfig+0xd8>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d00b      	beq.n	80026ce <TIM_Base_SetConfig+0x62>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a23      	ldr	r2, [pc, #140]	; (8002748 <TIM_Base_SetConfig+0xdc>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d007      	beq.n	80026ce <TIM_Base_SetConfig+0x62>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4a22      	ldr	r2, [pc, #136]	; (800274c <TIM_Base_SetConfig+0xe0>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d003      	beq.n	80026ce <TIM_Base_SetConfig+0x62>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4a21      	ldr	r2, [pc, #132]	; (8002750 <TIM_Base_SetConfig+0xe4>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d108      	bne.n	80026e0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	4a20      	ldr	r2, [pc, #128]	; (8002754 <TIM_Base_SetConfig+0xe8>)
 80026d2:	4013      	ands	r3, r2
 80026d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	68fa      	ldr	r2, [r7, #12]
 80026dc:	4313      	orrs	r3, r2
 80026de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2280      	movs	r2, #128	; 0x80
 80026e4:	4393      	bics	r3, r2
 80026e6:	001a      	movs	r2, r3
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	695b      	ldr	r3, [r3, #20]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	68fa      	ldr	r2, [r7, #12]
 80026f4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	689a      	ldr	r2, [r3, #8]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a0c      	ldr	r2, [pc, #48]	; (800273c <TIM_Base_SetConfig+0xd0>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d00b      	beq.n	8002726 <TIM_Base_SetConfig+0xba>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a0d      	ldr	r2, [pc, #52]	; (8002748 <TIM_Base_SetConfig+0xdc>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d007      	beq.n	8002726 <TIM_Base_SetConfig+0xba>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a0c      	ldr	r2, [pc, #48]	; (800274c <TIM_Base_SetConfig+0xe0>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d003      	beq.n	8002726 <TIM_Base_SetConfig+0xba>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a0b      	ldr	r2, [pc, #44]	; (8002750 <TIM_Base_SetConfig+0xe4>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d103      	bne.n	800272e <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	691a      	ldr	r2, [r3, #16]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2201      	movs	r2, #1
 8002732:	615a      	str	r2, [r3, #20]
}
 8002734:	46c0      	nop			; (mov r8, r8)
 8002736:	46bd      	mov	sp, r7
 8002738:	b004      	add	sp, #16
 800273a:	bd80      	pop	{r7, pc}
 800273c:	40012c00 	.word	0x40012c00
 8002740:	40000400 	.word	0x40000400
 8002744:	40002000 	.word	0x40002000
 8002748:	40014000 	.word	0x40014000
 800274c:	40014400 	.word	0x40014400
 8002750:	40014800 	.word	0x40014800
 8002754:	fffffcff 	.word	0xfffffcff

08002758 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b086      	sub	sp, #24
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6a1b      	ldr	r3, [r3, #32]
 8002766:	2201      	movs	r2, #1
 8002768:	4393      	bics	r3, r2
 800276a:	001a      	movs	r2, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6a1b      	ldr	r3, [r3, #32]
 8002774:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	699b      	ldr	r3, [r3, #24]
 8002780:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2270      	movs	r2, #112	; 0x70
 8002786:	4393      	bics	r3, r2
 8002788:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2203      	movs	r2, #3
 800278e:	4393      	bics	r3, r2
 8002790:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	68fa      	ldr	r2, [r7, #12]
 8002798:	4313      	orrs	r3, r2
 800279a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	2202      	movs	r2, #2
 80027a0:	4393      	bics	r3, r2
 80027a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	697a      	ldr	r2, [r7, #20]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a27      	ldr	r2, [pc, #156]	; (8002850 <TIM_OC1_SetConfig+0xf8>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d00b      	beq.n	80027ce <TIM_OC1_SetConfig+0x76>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a26      	ldr	r2, [pc, #152]	; (8002854 <TIM_OC1_SetConfig+0xfc>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d007      	beq.n	80027ce <TIM_OC1_SetConfig+0x76>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a25      	ldr	r2, [pc, #148]	; (8002858 <TIM_OC1_SetConfig+0x100>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d003      	beq.n	80027ce <TIM_OC1_SetConfig+0x76>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a24      	ldr	r2, [pc, #144]	; (800285c <TIM_OC1_SetConfig+0x104>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d10c      	bne.n	80027e8 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	2208      	movs	r2, #8
 80027d2:	4393      	bics	r3, r2
 80027d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	697a      	ldr	r2, [r7, #20]
 80027dc:	4313      	orrs	r3, r2
 80027de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	2204      	movs	r2, #4
 80027e4:	4393      	bics	r3, r2
 80027e6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	4a19      	ldr	r2, [pc, #100]	; (8002850 <TIM_OC1_SetConfig+0xf8>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d00b      	beq.n	8002808 <TIM_OC1_SetConfig+0xb0>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	4a18      	ldr	r2, [pc, #96]	; (8002854 <TIM_OC1_SetConfig+0xfc>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d007      	beq.n	8002808 <TIM_OC1_SetConfig+0xb0>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	4a17      	ldr	r2, [pc, #92]	; (8002858 <TIM_OC1_SetConfig+0x100>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d003      	beq.n	8002808 <TIM_OC1_SetConfig+0xb0>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	4a16      	ldr	r2, [pc, #88]	; (800285c <TIM_OC1_SetConfig+0x104>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d111      	bne.n	800282c <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	4a15      	ldr	r2, [pc, #84]	; (8002860 <TIM_OC1_SetConfig+0x108>)
 800280c:	4013      	ands	r3, r2
 800280e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	4a14      	ldr	r2, [pc, #80]	; (8002864 <TIM_OC1_SetConfig+0x10c>)
 8002814:	4013      	ands	r3, r2
 8002816:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	695b      	ldr	r3, [r3, #20]
 800281c:	693a      	ldr	r2, [r7, #16]
 800281e:	4313      	orrs	r3, r2
 8002820:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	699b      	ldr	r3, [r3, #24]
 8002826:	693a      	ldr	r2, [r7, #16]
 8002828:	4313      	orrs	r3, r2
 800282a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	693a      	ldr	r2, [r7, #16]
 8002830:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	68fa      	ldr	r2, [r7, #12]
 8002836:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685a      	ldr	r2, [r3, #4]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	697a      	ldr	r2, [r7, #20]
 8002844:	621a      	str	r2, [r3, #32]
}
 8002846:	46c0      	nop			; (mov r8, r8)
 8002848:	46bd      	mov	sp, r7
 800284a:	b006      	add	sp, #24
 800284c:	bd80      	pop	{r7, pc}
 800284e:	46c0      	nop			; (mov r8, r8)
 8002850:	40012c00 	.word	0x40012c00
 8002854:	40014000 	.word	0x40014000
 8002858:	40014400 	.word	0x40014400
 800285c:	40014800 	.word	0x40014800
 8002860:	fffffeff 	.word	0xfffffeff
 8002864:	fffffdff 	.word	0xfffffdff

08002868 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b086      	sub	sp, #24
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6a1b      	ldr	r3, [r3, #32]
 8002876:	2210      	movs	r2, #16
 8002878:	4393      	bics	r3, r2
 800287a:	001a      	movs	r2, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6a1b      	ldr	r3, [r3, #32]
 8002884:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	699b      	ldr	r3, [r3, #24]
 8002890:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	4a2e      	ldr	r2, [pc, #184]	; (8002950 <TIM_OC2_SetConfig+0xe8>)
 8002896:	4013      	ands	r3, r2
 8002898:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	4a2d      	ldr	r2, [pc, #180]	; (8002954 <TIM_OC2_SetConfig+0xec>)
 800289e:	4013      	ands	r3, r2
 80028a0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	021b      	lsls	r3, r3, #8
 80028a8:	68fa      	ldr	r2, [r7, #12]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	2220      	movs	r2, #32
 80028b2:	4393      	bics	r3, r2
 80028b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	011b      	lsls	r3, r3, #4
 80028bc:	697a      	ldr	r2, [r7, #20]
 80028be:	4313      	orrs	r3, r2
 80028c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a24      	ldr	r2, [pc, #144]	; (8002958 <TIM_OC2_SetConfig+0xf0>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d10d      	bne.n	80028e6 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	2280      	movs	r2, #128	; 0x80
 80028ce:	4393      	bics	r3, r2
 80028d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	011b      	lsls	r3, r3, #4
 80028d8:	697a      	ldr	r2, [r7, #20]
 80028da:	4313      	orrs	r3, r2
 80028dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	2240      	movs	r2, #64	; 0x40
 80028e2:	4393      	bics	r3, r2
 80028e4:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a1b      	ldr	r2, [pc, #108]	; (8002958 <TIM_OC2_SetConfig+0xf0>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d00b      	beq.n	8002906 <TIM_OC2_SetConfig+0x9e>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a1a      	ldr	r2, [pc, #104]	; (800295c <TIM_OC2_SetConfig+0xf4>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d007      	beq.n	8002906 <TIM_OC2_SetConfig+0x9e>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a19      	ldr	r2, [pc, #100]	; (8002960 <TIM_OC2_SetConfig+0xf8>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d003      	beq.n	8002906 <TIM_OC2_SetConfig+0x9e>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a18      	ldr	r2, [pc, #96]	; (8002964 <TIM_OC2_SetConfig+0xfc>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d113      	bne.n	800292e <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	4a17      	ldr	r2, [pc, #92]	; (8002968 <TIM_OC2_SetConfig+0x100>)
 800290a:	4013      	ands	r3, r2
 800290c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	4a16      	ldr	r2, [pc, #88]	; (800296c <TIM_OC2_SetConfig+0x104>)
 8002912:	4013      	ands	r3, r2
 8002914:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	695b      	ldr	r3, [r3, #20]
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	693a      	ldr	r2, [r7, #16]
 800291e:	4313      	orrs	r3, r2
 8002920:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	699b      	ldr	r3, [r3, #24]
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	693a      	ldr	r2, [r7, #16]
 800292a:	4313      	orrs	r3, r2
 800292c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	693a      	ldr	r2, [r7, #16]
 8002932:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	68fa      	ldr	r2, [r7, #12]
 8002938:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	685a      	ldr	r2, [r3, #4]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	697a      	ldr	r2, [r7, #20]
 8002946:	621a      	str	r2, [r3, #32]
}
 8002948:	46c0      	nop			; (mov r8, r8)
 800294a:	46bd      	mov	sp, r7
 800294c:	b006      	add	sp, #24
 800294e:	bd80      	pop	{r7, pc}
 8002950:	ffff8fff 	.word	0xffff8fff
 8002954:	fffffcff 	.word	0xfffffcff
 8002958:	40012c00 	.word	0x40012c00
 800295c:	40014000 	.word	0x40014000
 8002960:	40014400 	.word	0x40014400
 8002964:	40014800 	.word	0x40014800
 8002968:	fffffbff 	.word	0xfffffbff
 800296c:	fffff7ff 	.word	0xfffff7ff

08002970 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b086      	sub	sp, #24
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a1b      	ldr	r3, [r3, #32]
 800297e:	4a35      	ldr	r2, [pc, #212]	; (8002a54 <TIM_OC3_SetConfig+0xe4>)
 8002980:	401a      	ands	r2, r3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6a1b      	ldr	r3, [r3, #32]
 800298a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	69db      	ldr	r3, [r3, #28]
 8002996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2270      	movs	r2, #112	; 0x70
 800299c:	4393      	bics	r3, r2
 800299e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2203      	movs	r2, #3
 80029a4:	4393      	bics	r3, r2
 80029a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	68fa      	ldr	r2, [r7, #12]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	4a28      	ldr	r2, [pc, #160]	; (8002a58 <TIM_OC3_SetConfig+0xe8>)
 80029b6:	4013      	ands	r3, r2
 80029b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	021b      	lsls	r3, r3, #8
 80029c0:	697a      	ldr	r2, [r7, #20]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a24      	ldr	r2, [pc, #144]	; (8002a5c <TIM_OC3_SetConfig+0xec>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d10d      	bne.n	80029ea <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	4a23      	ldr	r2, [pc, #140]	; (8002a60 <TIM_OC3_SetConfig+0xf0>)
 80029d2:	4013      	ands	r3, r2
 80029d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	021b      	lsls	r3, r3, #8
 80029dc:	697a      	ldr	r2, [r7, #20]
 80029de:	4313      	orrs	r3, r2
 80029e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	4a1f      	ldr	r2, [pc, #124]	; (8002a64 <TIM_OC3_SetConfig+0xf4>)
 80029e6:	4013      	ands	r3, r2
 80029e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a1b      	ldr	r2, [pc, #108]	; (8002a5c <TIM_OC3_SetConfig+0xec>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d00b      	beq.n	8002a0a <TIM_OC3_SetConfig+0x9a>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a1c      	ldr	r2, [pc, #112]	; (8002a68 <TIM_OC3_SetConfig+0xf8>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d007      	beq.n	8002a0a <TIM_OC3_SetConfig+0x9a>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a1b      	ldr	r2, [pc, #108]	; (8002a6c <TIM_OC3_SetConfig+0xfc>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d003      	beq.n	8002a0a <TIM_OC3_SetConfig+0x9a>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a1a      	ldr	r2, [pc, #104]	; (8002a70 <TIM_OC3_SetConfig+0x100>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d113      	bne.n	8002a32 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	4a19      	ldr	r2, [pc, #100]	; (8002a74 <TIM_OC3_SetConfig+0x104>)
 8002a0e:	4013      	ands	r3, r2
 8002a10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	4a18      	ldr	r2, [pc, #96]	; (8002a78 <TIM_OC3_SetConfig+0x108>)
 8002a16:	4013      	ands	r3, r2
 8002a18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	695b      	ldr	r3, [r3, #20]
 8002a1e:	011b      	lsls	r3, r3, #4
 8002a20:	693a      	ldr	r2, [r7, #16]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	699b      	ldr	r3, [r3, #24]
 8002a2a:	011b      	lsls	r3, r3, #4
 8002a2c:	693a      	ldr	r2, [r7, #16]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	693a      	ldr	r2, [r7, #16]
 8002a36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	68fa      	ldr	r2, [r7, #12]
 8002a3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	685a      	ldr	r2, [r3, #4]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	697a      	ldr	r2, [r7, #20]
 8002a4a:	621a      	str	r2, [r3, #32]
}
 8002a4c:	46c0      	nop			; (mov r8, r8)
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	b006      	add	sp, #24
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	fffffeff 	.word	0xfffffeff
 8002a58:	fffffdff 	.word	0xfffffdff
 8002a5c:	40012c00 	.word	0x40012c00
 8002a60:	fffff7ff 	.word	0xfffff7ff
 8002a64:	fffffbff 	.word	0xfffffbff
 8002a68:	40014000 	.word	0x40014000
 8002a6c:	40014400 	.word	0x40014400
 8002a70:	40014800 	.word	0x40014800
 8002a74:	ffffefff 	.word	0xffffefff
 8002a78:	ffffdfff 	.word	0xffffdfff

08002a7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b086      	sub	sp, #24
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a1b      	ldr	r3, [r3, #32]
 8002a8a:	4a28      	ldr	r2, [pc, #160]	; (8002b2c <TIM_OC4_SetConfig+0xb0>)
 8002a8c:	401a      	ands	r2, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a1b      	ldr	r3, [r3, #32]
 8002a96:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	69db      	ldr	r3, [r3, #28]
 8002aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	4a22      	ldr	r2, [pc, #136]	; (8002b30 <TIM_OC4_SetConfig+0xb4>)
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	4a21      	ldr	r2, [pc, #132]	; (8002b34 <TIM_OC4_SetConfig+0xb8>)
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	021b      	lsls	r3, r3, #8
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	4a1d      	ldr	r2, [pc, #116]	; (8002b38 <TIM_OC4_SetConfig+0xbc>)
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	031b      	lsls	r3, r3, #12
 8002ace:	693a      	ldr	r2, [r7, #16]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	4a19      	ldr	r2, [pc, #100]	; (8002b3c <TIM_OC4_SetConfig+0xc0>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d00b      	beq.n	8002af4 <TIM_OC4_SetConfig+0x78>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	4a18      	ldr	r2, [pc, #96]	; (8002b40 <TIM_OC4_SetConfig+0xc4>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d007      	beq.n	8002af4 <TIM_OC4_SetConfig+0x78>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4a17      	ldr	r2, [pc, #92]	; (8002b44 <TIM_OC4_SetConfig+0xc8>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d003      	beq.n	8002af4 <TIM_OC4_SetConfig+0x78>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	4a16      	ldr	r2, [pc, #88]	; (8002b48 <TIM_OC4_SetConfig+0xcc>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d109      	bne.n	8002b08 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	4a15      	ldr	r2, [pc, #84]	; (8002b4c <TIM_OC4_SetConfig+0xd0>)
 8002af8:	4013      	ands	r3, r2
 8002afa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	695b      	ldr	r3, [r3, #20]
 8002b00:	019b      	lsls	r3, r3, #6
 8002b02:	697a      	ldr	r2, [r7, #20]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	697a      	ldr	r2, [r7, #20]
 8002b0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	68fa      	ldr	r2, [r7, #12]
 8002b12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	685a      	ldr	r2, [r3, #4]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	693a      	ldr	r2, [r7, #16]
 8002b20:	621a      	str	r2, [r3, #32]
}
 8002b22:	46c0      	nop			; (mov r8, r8)
 8002b24:	46bd      	mov	sp, r7
 8002b26:	b006      	add	sp, #24
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	46c0      	nop			; (mov r8, r8)
 8002b2c:	ffffefff 	.word	0xffffefff
 8002b30:	ffff8fff 	.word	0xffff8fff
 8002b34:	fffffcff 	.word	0xfffffcff
 8002b38:	ffffdfff 	.word	0xffffdfff
 8002b3c:	40012c00 	.word	0x40012c00
 8002b40:	40014000 	.word	0x40014000
 8002b44:	40014400 	.word	0x40014400
 8002b48:	40014800 	.word	0x40014800
 8002b4c:	ffffbfff 	.word	0xffffbfff

08002b50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b086      	sub	sp, #24
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	60b9      	str	r1, [r7, #8]
 8002b5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6a1b      	ldr	r3, [r3, #32]
 8002b60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	6a1b      	ldr	r3, [r3, #32]
 8002b66:	2201      	movs	r2, #1
 8002b68:	4393      	bics	r3, r2
 8002b6a:	001a      	movs	r2, r3
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	699b      	ldr	r3, [r3, #24]
 8002b74:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	22f0      	movs	r2, #240	; 0xf0
 8002b7a:	4393      	bics	r3, r2
 8002b7c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	011b      	lsls	r3, r3, #4
 8002b82:	693a      	ldr	r2, [r7, #16]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	220a      	movs	r2, #10
 8002b8c:	4393      	bics	r3, r2
 8002b8e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b90:	697a      	ldr	r2, [r7, #20]
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	693a      	ldr	r2, [r7, #16]
 8002b9c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	697a      	ldr	r2, [r7, #20]
 8002ba2:	621a      	str	r2, [r3, #32]
}
 8002ba4:	46c0      	nop			; (mov r8, r8)
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	b006      	add	sp, #24
 8002baa:	bd80      	pop	{r7, pc}

08002bac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b086      	sub	sp, #24
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6a1b      	ldr	r3, [r3, #32]
 8002bbc:	2210      	movs	r2, #16
 8002bbe:	4393      	bics	r3, r2
 8002bc0:	001a      	movs	r2, r3
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	699b      	ldr	r3, [r3, #24]
 8002bca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6a1b      	ldr	r3, [r3, #32]
 8002bd0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	4a0d      	ldr	r2, [pc, #52]	; (8002c0c <TIM_TI2_ConfigInputStage+0x60>)
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	031b      	lsls	r3, r3, #12
 8002bde:	697a      	ldr	r2, [r7, #20]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	22a0      	movs	r2, #160	; 0xa0
 8002be8:	4393      	bics	r3, r2
 8002bea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	011b      	lsls	r3, r3, #4
 8002bf0:	693a      	ldr	r2, [r7, #16]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	697a      	ldr	r2, [r7, #20]
 8002bfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	693a      	ldr	r2, [r7, #16]
 8002c00:	621a      	str	r2, [r3, #32]
}
 8002c02:	46c0      	nop			; (mov r8, r8)
 8002c04:	46bd      	mov	sp, r7
 8002c06:	b006      	add	sp, #24
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	46c0      	nop			; (mov r8, r8)
 8002c0c:	ffff0fff 	.word	0xffff0fff

08002c10 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2270      	movs	r2, #112	; 0x70
 8002c24:	4393      	bics	r3, r2
 8002c26:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c28:	683a      	ldr	r2, [r7, #0]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	2207      	movs	r2, #7
 8002c30:	4313      	orrs	r3, r2
 8002c32:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	68fa      	ldr	r2, [r7, #12]
 8002c38:	609a      	str	r2, [r3, #8]
}
 8002c3a:	46c0      	nop			; (mov r8, r8)
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	b004      	add	sp, #16
 8002c40:	bd80      	pop	{r7, pc}
	...

08002c44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b086      	sub	sp, #24
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	60b9      	str	r1, [r7, #8]
 8002c4e:	607a      	str	r2, [r7, #4]
 8002c50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	4a09      	ldr	r2, [pc, #36]	; (8002c80 <TIM_ETR_SetConfig+0x3c>)
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	021a      	lsls	r2, r3, #8
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	431a      	orrs	r2, r3
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	697a      	ldr	r2, [r7, #20]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	697a      	ldr	r2, [r7, #20]
 8002c76:	609a      	str	r2, [r3, #8]
}
 8002c78:	46c0      	nop			; (mov r8, r8)
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	b006      	add	sp, #24
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	ffff00ff 	.word	0xffff00ff

08002c84 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b086      	sub	sp, #24
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	60f8      	str	r0, [r7, #12]
 8002c8c:	60b9      	str	r1, [r7, #8]
 8002c8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	221f      	movs	r2, #31
 8002c94:	4013      	ands	r3, r2
 8002c96:	2201      	movs	r2, #1
 8002c98:	409a      	lsls	r2, r3
 8002c9a:	0013      	movs	r3, r2
 8002c9c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6a1b      	ldr	r3, [r3, #32]
 8002ca2:	697a      	ldr	r2, [r7, #20]
 8002ca4:	43d2      	mvns	r2, r2
 8002ca6:	401a      	ands	r2, r3
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6a1a      	ldr	r2, [r3, #32]
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	211f      	movs	r1, #31
 8002cb4:	400b      	ands	r3, r1
 8002cb6:	6879      	ldr	r1, [r7, #4]
 8002cb8:	4099      	lsls	r1, r3
 8002cba:	000b      	movs	r3, r1
 8002cbc:	431a      	orrs	r2, r3
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	621a      	str	r2, [r3, #32]
}
 8002cc2:	46c0      	nop			; (mov r8, r8)
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	b006      	add	sp, #24
 8002cc8:	bd80      	pop	{r7, pc}
	...

08002ccc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	223c      	movs	r2, #60	; 0x3c
 8002cda:	5c9b      	ldrb	r3, [r3, r2]
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d101      	bne.n	8002ce4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ce0:	2302      	movs	r3, #2
 8002ce2:	e041      	b.n	8002d68 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	223c      	movs	r2, #60	; 0x3c
 8002ce8:	2101      	movs	r1, #1
 8002cea:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	223d      	movs	r2, #61	; 0x3d
 8002cf0:	2102      	movs	r1, #2
 8002cf2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2270      	movs	r2, #112	; 0x70
 8002d08:	4393      	bics	r3, r2
 8002d0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	68fa      	ldr	r2, [r7, #12]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	68fa      	ldr	r2, [r7, #12]
 8002d1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a13      	ldr	r2, [pc, #76]	; (8002d70 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d009      	beq.n	8002d3c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a11      	ldr	r2, [pc, #68]	; (8002d74 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d004      	beq.n	8002d3c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a10      	ldr	r2, [pc, #64]	; (8002d78 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d10c      	bne.n	8002d56 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	2280      	movs	r2, #128	; 0x80
 8002d40:	4393      	bics	r3, r2
 8002d42:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	68ba      	ldr	r2, [r7, #8]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	68ba      	ldr	r2, [r7, #8]
 8002d54:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	223d      	movs	r2, #61	; 0x3d
 8002d5a:	2101      	movs	r1, #1
 8002d5c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	223c      	movs	r2, #60	; 0x3c
 8002d62:	2100      	movs	r1, #0
 8002d64:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d66:	2300      	movs	r3, #0
}
 8002d68:	0018      	movs	r0, r3
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	b004      	add	sp, #16
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	40012c00 	.word	0x40012c00
 8002d74:	40000400 	.word	0x40000400
 8002d78:	40014000 	.word	0x40014000

08002d7c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002d86:	2300      	movs	r3, #0
 8002d88:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	223c      	movs	r2, #60	; 0x3c
 8002d8e:	5c9b      	ldrb	r3, [r3, r2]
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d101      	bne.n	8002d98 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002d94:	2302      	movs	r3, #2
 8002d96:	e03e      	b.n	8002e16 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	223c      	movs	r2, #60	; 0x3c
 8002d9c:	2101      	movs	r1, #1
 8002d9e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	22ff      	movs	r2, #255	; 0xff
 8002da4:	4393      	bics	r3, r2
 8002da6:	001a      	movs	r2, r3
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	4a1b      	ldr	r2, [pc, #108]	; (8002e20 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8002db4:	401a      	ands	r2, r3
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	4a18      	ldr	r2, [pc, #96]	; (8002e24 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8002dc2:	401a      	ands	r2, r3
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	4a16      	ldr	r2, [pc, #88]	; (8002e28 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8002dd0:	401a      	ands	r2, r3
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	4a13      	ldr	r2, [pc, #76]	; (8002e2c <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8002dde:	401a      	ands	r2, r3
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	691b      	ldr	r3, [r3, #16]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	4a11      	ldr	r2, [pc, #68]	; (8002e30 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8002dec:	401a      	ands	r2, r3
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	4a0e      	ldr	r2, [pc, #56]	; (8002e34 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8002dfa:	401a      	ands	r2, r3
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	69db      	ldr	r3, [r3, #28]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	68fa      	ldr	r2, [r7, #12]
 8002e0a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	223c      	movs	r2, #60	; 0x3c
 8002e10:	2100      	movs	r1, #0
 8002e12:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e14:	2300      	movs	r3, #0
}
 8002e16:	0018      	movs	r0, r3
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	b004      	add	sp, #16
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	46c0      	nop			; (mov r8, r8)
 8002e20:	fffffcff 	.word	0xfffffcff
 8002e24:	fffffbff 	.word	0xfffffbff
 8002e28:	fffff7ff 	.word	0xfffff7ff
 8002e2c:	ffffefff 	.word	0xffffefff
 8002e30:	ffffdfff 	.word	0xffffdfff
 8002e34:	ffffbfff 	.word	0xffffbfff

08002e38 <__libc_init_array>:
 8002e38:	b570      	push	{r4, r5, r6, lr}
 8002e3a:	2600      	movs	r6, #0
 8002e3c:	4d0c      	ldr	r5, [pc, #48]	; (8002e70 <__libc_init_array+0x38>)
 8002e3e:	4c0d      	ldr	r4, [pc, #52]	; (8002e74 <__libc_init_array+0x3c>)
 8002e40:	1b64      	subs	r4, r4, r5
 8002e42:	10a4      	asrs	r4, r4, #2
 8002e44:	42a6      	cmp	r6, r4
 8002e46:	d109      	bne.n	8002e5c <__libc_init_array+0x24>
 8002e48:	2600      	movs	r6, #0
 8002e4a:	f000 f821 	bl	8002e90 <_init>
 8002e4e:	4d0a      	ldr	r5, [pc, #40]	; (8002e78 <__libc_init_array+0x40>)
 8002e50:	4c0a      	ldr	r4, [pc, #40]	; (8002e7c <__libc_init_array+0x44>)
 8002e52:	1b64      	subs	r4, r4, r5
 8002e54:	10a4      	asrs	r4, r4, #2
 8002e56:	42a6      	cmp	r6, r4
 8002e58:	d105      	bne.n	8002e66 <__libc_init_array+0x2e>
 8002e5a:	bd70      	pop	{r4, r5, r6, pc}
 8002e5c:	00b3      	lsls	r3, r6, #2
 8002e5e:	58eb      	ldr	r3, [r5, r3]
 8002e60:	4798      	blx	r3
 8002e62:	3601      	adds	r6, #1
 8002e64:	e7ee      	b.n	8002e44 <__libc_init_array+0xc>
 8002e66:	00b3      	lsls	r3, r6, #2
 8002e68:	58eb      	ldr	r3, [r5, r3]
 8002e6a:	4798      	blx	r3
 8002e6c:	3601      	adds	r6, #1
 8002e6e:	e7f2      	b.n	8002e56 <__libc_init_array+0x1e>
 8002e70:	08002ed8 	.word	0x08002ed8
 8002e74:	08002ed8 	.word	0x08002ed8
 8002e78:	08002ed8 	.word	0x08002ed8
 8002e7c:	08002edc 	.word	0x08002edc

08002e80 <memset>:
 8002e80:	0003      	movs	r3, r0
 8002e82:	1882      	adds	r2, r0, r2
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d100      	bne.n	8002e8a <memset+0xa>
 8002e88:	4770      	bx	lr
 8002e8a:	7019      	strb	r1, [r3, #0]
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	e7f9      	b.n	8002e84 <memset+0x4>

08002e90 <_init>:
 8002e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e92:	46c0      	nop			; (mov r8, r8)
 8002e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e96:	bc08      	pop	{r3}
 8002e98:	469e      	mov	lr, r3
 8002e9a:	4770      	bx	lr

08002e9c <_fini>:
 8002e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e9e:	46c0      	nop			; (mov r8, r8)
 8002ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ea2:	bc08      	pop	{r3}
 8002ea4:	469e      	mov	lr, r3
 8002ea6:	4770      	bx	lr
