
Pro3E_RT_Mikrocotroller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003724  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080037e4  080037e4  000137e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003814  08003814  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003814  08003814  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003814  08003814  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003814  08003814  00013814  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003818  08003818  00013818  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800381c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  2000000c  08003828  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000100  08003828  00020100  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e65b  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fae  00000000  00000000  0002e68f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e60  00000000  00000000  00030640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d68  00000000  00000000  000314a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000113fd  00000000  00000000  00032208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fd36  00000000  00000000  00043605  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00069282  00000000  00000000  0005333b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000bc5bd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003434  00000000  00000000  000bc610  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080037cc 	.word	0x080037cc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080037cc 	.word	0x080037cc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f000 fc69 	bl	8000afc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022a:	f000 f831 	bl	8000290 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022e:	f000 f9bd 	bl	80005ac <MX_GPIO_Init>
  MX_ADC_Init();
 8000232:	f000 f88b 	bl	800034c <MX_ADC_Init>
  MX_TIM1_Init();
 8000236:	f000 f925 	bl	8000484 <MX_TIM1_Init>
  MX_I2C1_Init();
 800023a:	f000 f8e3 	bl	8000404 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  init_vcnl4040();
 800023e:	f000 fa35 	bl	80006ac <init_vcnl4040>
  uint16_t pwm_value = 0;
 8000242:	1dbb      	adds	r3, r7, #6
 8000244:	2200      	movs	r2, #0
 8000246:	801a      	strh	r2, [r3, #0]
  uint16_t step = 0;
 8000248:	1d3b      	adds	r3, r7, #4
 800024a:	2200      	movs	r2, #0
 800024c:	801a      	strh	r2, [r3, #0]


	  //HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(&hi2c1, TMP102_ADDR, buf, 1, HAL_MAX_DELAY);

	  //Testing duty cycle of PWM
	  HAL_Delay(100);
 800024e:	2064      	movs	r0, #100	; 0x64
 8000250:	f000 fcb8 	bl	8000bc4 <HAL_Delay>
	  if(pwm_value == 0) step = 100;
 8000254:	1dbb      	adds	r3, r7, #6
 8000256:	881b      	ldrh	r3, [r3, #0]
 8000258:	2b00      	cmp	r3, #0
 800025a:	d102      	bne.n	8000262 <main+0x42>
 800025c:	1d3b      	adds	r3, r7, #4
 800025e:	2264      	movs	r2, #100	; 0x64
 8000260:	801a      	strh	r2, [r3, #0]
	  if(pwm_value == 2000) step = -100;
 8000262:	1dbb      	adds	r3, r7, #6
 8000264:	881a      	ldrh	r2, [r3, #0]
 8000266:	23fa      	movs	r3, #250	; 0xfa
 8000268:	00db      	lsls	r3, r3, #3
 800026a:	429a      	cmp	r2, r3
 800026c:	d103      	bne.n	8000276 <main+0x56>
 800026e:	1d3b      	adds	r3, r7, #4
 8000270:	2264      	movs	r2, #100	; 0x64
 8000272:	4252      	negs	r2, r2
 8000274:	801a      	strh	r2, [r3, #0]
	  pwm_value += step;
 8000276:	1dbb      	adds	r3, r7, #6
 8000278:	1db9      	adds	r1, r7, #6
 800027a:	1d3a      	adds	r2, r7, #4
 800027c:	8809      	ldrh	r1, [r1, #0]
 800027e:	8812      	ldrh	r2, [r2, #0]
 8000280:	188a      	adds	r2, r1, r2
 8000282:	801a      	strh	r2, [r3, #0]
	  user_pwm_setvalue(pwm_value);
 8000284:	1dbb      	adds	r3, r7, #6
 8000286:	881b      	ldrh	r3, [r3, #0]
 8000288:	0018      	movs	r0, r3
 800028a:	f000 faad 	bl	80007e8 <user_pwm_setvalue>
	  HAL_Delay(100);
 800028e:	e7de      	b.n	800024e <main+0x2e>

08000290 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000290:	b590      	push	{r4, r7, lr}
 8000292:	b097      	sub	sp, #92	; 0x5c
 8000294:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000296:	2428      	movs	r4, #40	; 0x28
 8000298:	193b      	adds	r3, r7, r4
 800029a:	0018      	movs	r0, r3
 800029c:	2330      	movs	r3, #48	; 0x30
 800029e:	001a      	movs	r2, r3
 80002a0:	2100      	movs	r1, #0
 80002a2:	f003 fa8b 	bl	80037bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002a6:	2318      	movs	r3, #24
 80002a8:	18fb      	adds	r3, r7, r3
 80002aa:	0018      	movs	r0, r3
 80002ac:	2310      	movs	r3, #16
 80002ae:	001a      	movs	r2, r3
 80002b0:	2100      	movs	r1, #0
 80002b2:	f003 fa83 	bl	80037bc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002b6:	1d3b      	adds	r3, r7, #4
 80002b8:	0018      	movs	r0, r3
 80002ba:	2314      	movs	r3, #20
 80002bc:	001a      	movs	r2, r3
 80002be:	2100      	movs	r1, #0
 80002c0:	f003 fa7c 	bl	80037bc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 80002c4:	0021      	movs	r1, r4
 80002c6:	187b      	adds	r3, r7, r1
 80002c8:	2212      	movs	r2, #18
 80002ca:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002cc:	187b      	adds	r3, r7, r1
 80002ce:	2201      	movs	r2, #1
 80002d0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80002d2:	187b      	adds	r3, r7, r1
 80002d4:	2201      	movs	r2, #1
 80002d6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002d8:	187b      	adds	r3, r7, r1
 80002da:	2210      	movs	r2, #16
 80002dc:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80002de:	187b      	adds	r3, r7, r1
 80002e0:	2210      	movs	r2, #16
 80002e2:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002e4:	187b      	adds	r3, r7, r1
 80002e6:	2200      	movs	r2, #0
 80002e8:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ea:	187b      	adds	r3, r7, r1
 80002ec:	0018      	movs	r0, r3
 80002ee:	f001 fe3b 	bl	8001f68 <HAL_RCC_OscConfig>
 80002f2:	1e03      	subs	r3, r0, #0
 80002f4:	d001      	beq.n	80002fa <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80002f6:	f000 fa9d 	bl	8000834 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002fa:	2118      	movs	r1, #24
 80002fc:	187b      	adds	r3, r7, r1
 80002fe:	2207      	movs	r2, #7
 8000300:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000302:	187b      	adds	r3, r7, r1
 8000304:	2200      	movs	r2, #0
 8000306:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000308:	187b      	adds	r3, r7, r1
 800030a:	2200      	movs	r2, #0
 800030c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800030e:	187b      	adds	r3, r7, r1
 8000310:	2200      	movs	r2, #0
 8000312:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000314:	187b      	adds	r3, r7, r1
 8000316:	2100      	movs	r1, #0
 8000318:	0018      	movs	r0, r3
 800031a:	f002 f943 	bl	80025a4 <HAL_RCC_ClockConfig>
 800031e:	1e03      	subs	r3, r0, #0
 8000320:	d001      	beq.n	8000326 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000322:	f000 fa87 	bl	8000834 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000326:	1d3b      	adds	r3, r7, #4
 8000328:	2220      	movs	r2, #32
 800032a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800032c:	1d3b      	adds	r3, r7, #4
 800032e:	2200      	movs	r2, #0
 8000330:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000332:	1d3b      	adds	r3, r7, #4
 8000334:	0018      	movs	r0, r3
 8000336:	f002 fa69 	bl	800280c <HAL_RCCEx_PeriphCLKConfig>
 800033a:	1e03      	subs	r3, r0, #0
 800033c:	d001      	beq.n	8000342 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800033e:	f000 fa79 	bl	8000834 <Error_Handler>
  }
}
 8000342:	46c0      	nop			; (mov r8, r8)
 8000344:	46bd      	mov	sp, r7
 8000346:	b017      	add	sp, #92	; 0x5c
 8000348:	bd90      	pop	{r4, r7, pc}
	...

0800034c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b084      	sub	sp, #16
 8000350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000352:	1d3b      	adds	r3, r7, #4
 8000354:	0018      	movs	r0, r3
 8000356:	230c      	movs	r3, #12
 8000358:	001a      	movs	r2, r3
 800035a:	2100      	movs	r1, #0
 800035c:	f003 fa2e 	bl	80037bc <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000360:	4b26      	ldr	r3, [pc, #152]	; (80003fc <MX_ADC_Init+0xb0>)
 8000362:	4a27      	ldr	r2, [pc, #156]	; (8000400 <MX_ADC_Init+0xb4>)
 8000364:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000366:	4b25      	ldr	r3, [pc, #148]	; (80003fc <MX_ADC_Init+0xb0>)
 8000368:	2200      	movs	r2, #0
 800036a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800036c:	4b23      	ldr	r3, [pc, #140]	; (80003fc <MX_ADC_Init+0xb0>)
 800036e:	2200      	movs	r2, #0
 8000370:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000372:	4b22      	ldr	r3, [pc, #136]	; (80003fc <MX_ADC_Init+0xb0>)
 8000374:	2200      	movs	r2, #0
 8000376:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000378:	4b20      	ldr	r3, [pc, #128]	; (80003fc <MX_ADC_Init+0xb0>)
 800037a:	2201      	movs	r2, #1
 800037c:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800037e:	4b1f      	ldr	r3, [pc, #124]	; (80003fc <MX_ADC_Init+0xb0>)
 8000380:	2204      	movs	r2, #4
 8000382:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000384:	4b1d      	ldr	r3, [pc, #116]	; (80003fc <MX_ADC_Init+0xb0>)
 8000386:	2200      	movs	r2, #0
 8000388:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800038a:	4b1c      	ldr	r3, [pc, #112]	; (80003fc <MX_ADC_Init+0xb0>)
 800038c:	2200      	movs	r2, #0
 800038e:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000390:	4b1a      	ldr	r3, [pc, #104]	; (80003fc <MX_ADC_Init+0xb0>)
 8000392:	2200      	movs	r2, #0
 8000394:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000396:	4b19      	ldr	r3, [pc, #100]	; (80003fc <MX_ADC_Init+0xb0>)
 8000398:	2200      	movs	r2, #0
 800039a:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800039c:	4b17      	ldr	r3, [pc, #92]	; (80003fc <MX_ADC_Init+0xb0>)
 800039e:	22c2      	movs	r2, #194	; 0xc2
 80003a0:	32ff      	adds	r2, #255	; 0xff
 80003a2:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003a4:	4b15      	ldr	r3, [pc, #84]	; (80003fc <MX_ADC_Init+0xb0>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80003aa:	4b14      	ldr	r3, [pc, #80]	; (80003fc <MX_ADC_Init+0xb0>)
 80003ac:	2224      	movs	r2, #36	; 0x24
 80003ae:	2100      	movs	r1, #0
 80003b0:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80003b2:	4b12      	ldr	r3, [pc, #72]	; (80003fc <MX_ADC_Init+0xb0>)
 80003b4:	2201      	movs	r2, #1
 80003b6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80003b8:	4b10      	ldr	r3, [pc, #64]	; (80003fc <MX_ADC_Init+0xb0>)
 80003ba:	0018      	movs	r0, r3
 80003bc:	f000 fc26 	bl	8000c0c <HAL_ADC_Init>
 80003c0:	1e03      	subs	r3, r0, #0
 80003c2:	d001      	beq.n	80003c8 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80003c4:	f000 fa36 	bl	8000834 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80003c8:	1d3b      	adds	r3, r7, #4
 80003ca:	2200      	movs	r2, #0
 80003cc:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80003ce:	1d3b      	adds	r3, r7, #4
 80003d0:	2280      	movs	r2, #128	; 0x80
 80003d2:	0152      	lsls	r2, r2, #5
 80003d4:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80003d6:	1d3b      	adds	r3, r7, #4
 80003d8:	2280      	movs	r2, #128	; 0x80
 80003da:	0552      	lsls	r2, r2, #21
 80003dc:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80003de:	1d3a      	adds	r2, r7, #4
 80003e0:	4b06      	ldr	r3, [pc, #24]	; (80003fc <MX_ADC_Init+0xb0>)
 80003e2:	0011      	movs	r1, r2
 80003e4:	0018      	movs	r0, r3
 80003e6:	f000 fd51 	bl	8000e8c <HAL_ADC_ConfigChannel>
 80003ea:	1e03      	subs	r3, r0, #0
 80003ec:	d001      	beq.n	80003f2 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 80003ee:	f000 fa21 	bl	8000834 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80003f2:	46c0      	nop			; (mov r8, r8)
 80003f4:	46bd      	mov	sp, r7
 80003f6:	b004      	add	sp, #16
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	46c0      	nop			; (mov r8, r8)
 80003fc:	200000bc 	.word	0x200000bc
 8000400:	40012400 	.word	0x40012400

08000404 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000408:	4b1b      	ldr	r3, [pc, #108]	; (8000478 <MX_I2C1_Init+0x74>)
 800040a:	4a1c      	ldr	r2, [pc, #112]	; (800047c <MX_I2C1_Init+0x78>)
 800040c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 800040e:	4b1a      	ldr	r3, [pc, #104]	; (8000478 <MX_I2C1_Init+0x74>)
 8000410:	4a1b      	ldr	r2, [pc, #108]	; (8000480 <MX_I2C1_Init+0x7c>)
 8000412:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 120;
 8000414:	4b18      	ldr	r3, [pc, #96]	; (8000478 <MX_I2C1_Init+0x74>)
 8000416:	2278      	movs	r2, #120	; 0x78
 8000418:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800041a:	4b17      	ldr	r3, [pc, #92]	; (8000478 <MX_I2C1_Init+0x74>)
 800041c:	2201      	movs	r2, #1
 800041e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000420:	4b15      	ldr	r3, [pc, #84]	; (8000478 <MX_I2C1_Init+0x74>)
 8000422:	2200      	movs	r2, #0
 8000424:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000426:	4b14      	ldr	r3, [pc, #80]	; (8000478 <MX_I2C1_Init+0x74>)
 8000428:	2200      	movs	r2, #0
 800042a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800042c:	4b12      	ldr	r3, [pc, #72]	; (8000478 <MX_I2C1_Init+0x74>)
 800042e:	2200      	movs	r2, #0
 8000430:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000432:	4b11      	ldr	r3, [pc, #68]	; (8000478 <MX_I2C1_Init+0x74>)
 8000434:	2200      	movs	r2, #0
 8000436:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000438:	4b0f      	ldr	r3, [pc, #60]	; (8000478 <MX_I2C1_Init+0x74>)
 800043a:	2200      	movs	r2, #0
 800043c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800043e:	4b0e      	ldr	r3, [pc, #56]	; (8000478 <MX_I2C1_Init+0x74>)
 8000440:	0018      	movs	r0, r3
 8000442:	f001 f85b 	bl	80014fc <HAL_I2C_Init>
 8000446:	1e03      	subs	r3, r0, #0
 8000448:	d001      	beq.n	800044e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800044a:	f000 f9f3 	bl	8000834 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800044e:	4b0a      	ldr	r3, [pc, #40]	; (8000478 <MX_I2C1_Init+0x74>)
 8000450:	2100      	movs	r1, #0
 8000452:	0018      	movs	r0, r3
 8000454:	f001 fcf0 	bl	8001e38 <HAL_I2CEx_ConfigAnalogFilter>
 8000458:	1e03      	subs	r3, r0, #0
 800045a:	d001      	beq.n	8000460 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800045c:	f000 f9ea 	bl	8000834 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000460:	4b05      	ldr	r3, [pc, #20]	; (8000478 <MX_I2C1_Init+0x74>)
 8000462:	2100      	movs	r1, #0
 8000464:	0018      	movs	r0, r3
 8000466:	f001 fd33 	bl	8001ed0 <HAL_I2CEx_ConfigDigitalFilter>
 800046a:	1e03      	subs	r3, r0, #0
 800046c:	d001      	beq.n	8000472 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800046e:	f000 f9e1 	bl	8000834 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000472:	46c0      	nop			; (mov r8, r8)
 8000474:	46bd      	mov	sp, r7
 8000476:	bd80      	pop	{r7, pc}
 8000478:	20000028 	.word	0x20000028
 800047c:	40005400 	.word	0x40005400
 8000480:	0000020b 	.word	0x0000020b

08000484 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b092      	sub	sp, #72	; 0x48
 8000488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800048a:	2340      	movs	r3, #64	; 0x40
 800048c:	18fb      	adds	r3, r7, r3
 800048e:	0018      	movs	r0, r3
 8000490:	2308      	movs	r3, #8
 8000492:	001a      	movs	r2, r3
 8000494:	2100      	movs	r1, #0
 8000496:	f003 f991 	bl	80037bc <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800049a:	2324      	movs	r3, #36	; 0x24
 800049c:	18fb      	adds	r3, r7, r3
 800049e:	0018      	movs	r0, r3
 80004a0:	231c      	movs	r3, #28
 80004a2:	001a      	movs	r2, r3
 80004a4:	2100      	movs	r1, #0
 80004a6:	f003 f989 	bl	80037bc <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80004aa:	1d3b      	adds	r3, r7, #4
 80004ac:	0018      	movs	r0, r3
 80004ae:	2320      	movs	r3, #32
 80004b0:	001a      	movs	r2, r3
 80004b2:	2100      	movs	r1, #0
 80004b4:	f003 f982 	bl	80037bc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80004b8:	4b39      	ldr	r3, [pc, #228]	; (80005a0 <MX_TIM1_Init+0x11c>)
 80004ba:	4a3a      	ldr	r2, [pc, #232]	; (80005a4 <MX_TIM1_Init+0x120>)
 80004bc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80004be:	4b38      	ldr	r3, [pc, #224]	; (80005a0 <MX_TIM1_Init+0x11c>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004c4:	4b36      	ldr	r3, [pc, #216]	; (80005a0 <MX_TIM1_Init+0x11c>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80004ca:	4b35      	ldr	r3, [pc, #212]	; (80005a0 <MX_TIM1_Init+0x11c>)
 80004cc:	4a36      	ldr	r2, [pc, #216]	; (80005a8 <MX_TIM1_Init+0x124>)
 80004ce:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004d0:	4b33      	ldr	r3, [pc, #204]	; (80005a0 <MX_TIM1_Init+0x11c>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80004d6:	4b32      	ldr	r3, [pc, #200]	; (80005a0 <MX_TIM1_Init+0x11c>)
 80004d8:	2200      	movs	r2, #0
 80004da:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004dc:	4b30      	ldr	r3, [pc, #192]	; (80005a0 <MX_TIM1_Init+0x11c>)
 80004de:	2200      	movs	r2, #0
 80004e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80004e2:	4b2f      	ldr	r3, [pc, #188]	; (80005a0 <MX_TIM1_Init+0x11c>)
 80004e4:	0018      	movs	r0, r3
 80004e6:	f002 fa6f 	bl	80029c8 <HAL_TIM_PWM_Init>
 80004ea:	1e03      	subs	r3, r0, #0
 80004ec:	d001      	beq.n	80004f2 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80004ee:	f000 f9a1 	bl	8000834 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004f2:	2140      	movs	r1, #64	; 0x40
 80004f4:	187b      	adds	r3, r7, r1
 80004f6:	2200      	movs	r2, #0
 80004f8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004fa:	187b      	adds	r3, r7, r1
 80004fc:	2200      	movs	r2, #0
 80004fe:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000500:	187a      	adds	r2, r7, r1
 8000502:	4b27      	ldr	r3, [pc, #156]	; (80005a0 <MX_TIM1_Init+0x11c>)
 8000504:	0011      	movs	r1, r2
 8000506:	0018      	movs	r0, r3
 8000508:	f002 febc 	bl	8003284 <HAL_TIMEx_MasterConfigSynchronization>
 800050c:	1e03      	subs	r3, r0, #0
 800050e:	d001      	beq.n	8000514 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000510:	f000 f990 	bl	8000834 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000514:	2124      	movs	r1, #36	; 0x24
 8000516:	187b      	adds	r3, r7, r1
 8000518:	2260      	movs	r2, #96	; 0x60
 800051a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800051c:	187b      	adds	r3, r7, r1
 800051e:	2200      	movs	r2, #0
 8000520:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000522:	187b      	adds	r3, r7, r1
 8000524:	2200      	movs	r2, #0
 8000526:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000528:	187b      	adds	r3, r7, r1
 800052a:	2200      	movs	r2, #0
 800052c:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800052e:	187b      	adds	r3, r7, r1
 8000530:	2200      	movs	r2, #0
 8000532:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000534:	187b      	adds	r3, r7, r1
 8000536:	2200      	movs	r2, #0
 8000538:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800053a:	1879      	adds	r1, r7, r1
 800053c:	4b18      	ldr	r3, [pc, #96]	; (80005a0 <MX_TIM1_Init+0x11c>)
 800053e:	220c      	movs	r2, #12
 8000540:	0018      	movs	r0, r3
 8000542:	f002 fb43 	bl	8002bcc <HAL_TIM_PWM_ConfigChannel>
 8000546:	1e03      	subs	r3, r0, #0
 8000548:	d001      	beq.n	800054e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800054a:	f000 f973 	bl	8000834 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800054e:	1d3b      	adds	r3, r7, #4
 8000550:	2200      	movs	r2, #0
 8000552:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000554:	1d3b      	adds	r3, r7, #4
 8000556:	2200      	movs	r2, #0
 8000558:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800055a:	1d3b      	adds	r3, r7, #4
 800055c:	2200      	movs	r2, #0
 800055e:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000560:	1d3b      	adds	r3, r7, #4
 8000562:	2200      	movs	r2, #0
 8000564:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000566:	1d3b      	adds	r3, r7, #4
 8000568:	2200      	movs	r2, #0
 800056a:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800056c:	1d3b      	adds	r3, r7, #4
 800056e:	2280      	movs	r2, #128	; 0x80
 8000570:	0192      	lsls	r2, r2, #6
 8000572:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000574:	1d3b      	adds	r3, r7, #4
 8000576:	2200      	movs	r2, #0
 8000578:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800057a:	1d3a      	adds	r2, r7, #4
 800057c:	4b08      	ldr	r3, [pc, #32]	; (80005a0 <MX_TIM1_Init+0x11c>)
 800057e:	0011      	movs	r1, r2
 8000580:	0018      	movs	r0, r3
 8000582:	f002 fed7 	bl	8003334 <HAL_TIMEx_ConfigBreakDeadTime>
 8000586:	1e03      	subs	r3, r0, #0
 8000588:	d001      	beq.n	800058e <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 800058a:	f000 f953 	bl	8000834 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800058e:	4b04      	ldr	r3, [pc, #16]	; (80005a0 <MX_TIM1_Init+0x11c>)
 8000590:	0018      	movs	r0, r3
 8000592:	f000 fa2d 	bl	80009f0 <HAL_TIM_MspPostInit>

}
 8000596:	46c0      	nop			; (mov r8, r8)
 8000598:	46bd      	mov	sp, r7
 800059a:	b012      	add	sp, #72	; 0x48
 800059c:	bd80      	pop	{r7, pc}
 800059e:	46c0      	nop			; (mov r8, r8)
 80005a0:	20000074 	.word	0x20000074
 80005a4:	40012c00 	.word	0x40012c00
 80005a8:	0000ffff 	.word	0x0000ffff

080005ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005ac:	b590      	push	{r4, r7, lr}
 80005ae:	b089      	sub	sp, #36	; 0x24
 80005b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b2:	240c      	movs	r4, #12
 80005b4:	193b      	adds	r3, r7, r4
 80005b6:	0018      	movs	r0, r3
 80005b8:	2314      	movs	r3, #20
 80005ba:	001a      	movs	r2, r3
 80005bc:	2100      	movs	r1, #0
 80005be:	f003 f8fd 	bl	80037bc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005c2:	4b36      	ldr	r3, [pc, #216]	; (800069c <MX_GPIO_Init+0xf0>)
 80005c4:	695a      	ldr	r2, [r3, #20]
 80005c6:	4b35      	ldr	r3, [pc, #212]	; (800069c <MX_GPIO_Init+0xf0>)
 80005c8:	2180      	movs	r1, #128	; 0x80
 80005ca:	0309      	lsls	r1, r1, #12
 80005cc:	430a      	orrs	r2, r1
 80005ce:	615a      	str	r2, [r3, #20]
 80005d0:	4b32      	ldr	r3, [pc, #200]	; (800069c <MX_GPIO_Init+0xf0>)
 80005d2:	695a      	ldr	r2, [r3, #20]
 80005d4:	2380      	movs	r3, #128	; 0x80
 80005d6:	031b      	lsls	r3, r3, #12
 80005d8:	4013      	ands	r3, r2
 80005da:	60bb      	str	r3, [r7, #8]
 80005dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005de:	4b2f      	ldr	r3, [pc, #188]	; (800069c <MX_GPIO_Init+0xf0>)
 80005e0:	695a      	ldr	r2, [r3, #20]
 80005e2:	4b2e      	ldr	r3, [pc, #184]	; (800069c <MX_GPIO_Init+0xf0>)
 80005e4:	2180      	movs	r1, #128	; 0x80
 80005e6:	0289      	lsls	r1, r1, #10
 80005e8:	430a      	orrs	r2, r1
 80005ea:	615a      	str	r2, [r3, #20]
 80005ec:	4b2b      	ldr	r3, [pc, #172]	; (800069c <MX_GPIO_Init+0xf0>)
 80005ee:	695a      	ldr	r2, [r3, #20]
 80005f0:	2380      	movs	r3, #128	; 0x80
 80005f2:	029b      	lsls	r3, r3, #10
 80005f4:	4013      	ands	r3, r2
 80005f6:	607b      	str	r3, [r7, #4]
 80005f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005fa:	4b28      	ldr	r3, [pc, #160]	; (800069c <MX_GPIO_Init+0xf0>)
 80005fc:	695a      	ldr	r2, [r3, #20]
 80005fe:	4b27      	ldr	r3, [pc, #156]	; (800069c <MX_GPIO_Init+0xf0>)
 8000600:	2180      	movs	r1, #128	; 0x80
 8000602:	02c9      	lsls	r1, r1, #11
 8000604:	430a      	orrs	r2, r1
 8000606:	615a      	str	r2, [r3, #20]
 8000608:	4b24      	ldr	r3, [pc, #144]	; (800069c <MX_GPIO_Init+0xf0>)
 800060a:	695a      	ldr	r2, [r3, #20]
 800060c:	2380      	movs	r3, #128	; 0x80
 800060e:	02db      	lsls	r3, r3, #11
 8000610:	4013      	ands	r3, r2
 8000612:	603b      	str	r3, [r7, #0]
 8000614:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_11
 8000616:	4922      	ldr	r1, [pc, #136]	; (80006a0 <MX_GPIO_Init+0xf4>)
 8000618:	4b22      	ldr	r3, [pc, #136]	; (80006a4 <MX_GPIO_Init+0xf8>)
 800061a:	2200      	movs	r2, #0
 800061c:	0018      	movs	r0, r3
 800061e:	f000 ff4f 	bl	80014c0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000622:	193b      	adds	r3, r7, r4
 8000624:	221f      	movs	r2, #31
 8000626:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000628:	193b      	adds	r3, r7, r4
 800062a:	2200      	movs	r2, #0
 800062c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062e:	193b      	adds	r3, r7, r4
 8000630:	2200      	movs	r2, #0
 8000632:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000634:	193b      	adds	r3, r7, r4
 8000636:	4a1c      	ldr	r2, [pc, #112]	; (80006a8 <MX_GPIO_Init+0xfc>)
 8000638:	0019      	movs	r1, r3
 800063a:	0010      	movs	r0, r2
 800063c:	f000 fdd0 	bl	80011e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB11
                           PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_11
 8000640:	193b      	adds	r3, r7, r4
 8000642:	4a17      	ldr	r2, [pc, #92]	; (80006a0 <MX_GPIO_Init+0xf4>)
 8000644:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000646:	193b      	adds	r3, r7, r4
 8000648:	2201      	movs	r2, #1
 800064a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064c:	193b      	adds	r3, r7, r4
 800064e:	2200      	movs	r2, #0
 8000650:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000652:	193b      	adds	r3, r7, r4
 8000654:	2200      	movs	r2, #0
 8000656:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000658:	193b      	adds	r3, r7, r4
 800065a:	4a12      	ldr	r2, [pc, #72]	; (80006a4 <MX_GPIO_Init+0xf8>)
 800065c:	0019      	movs	r1, r3
 800065e:	0010      	movs	r0, r2
 8000660:	f000 fdbe 	bl	80011e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000664:	0021      	movs	r1, r4
 8000666:	187b      	adds	r3, r7, r1
 8000668:	22e0      	movs	r2, #224	; 0xe0
 800066a:	0212      	lsls	r2, r2, #8
 800066c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800066e:	187b      	adds	r3, r7, r1
 8000670:	2202      	movs	r2, #2
 8000672:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000674:	187b      	adds	r3, r7, r1
 8000676:	2200      	movs	r2, #0
 8000678:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800067a:	187b      	adds	r3, r7, r1
 800067c:	2203      	movs	r2, #3
 800067e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8000680:	187b      	adds	r3, r7, r1
 8000682:	2200      	movs	r2, #0
 8000684:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000686:	187b      	adds	r3, r7, r1
 8000688:	4a06      	ldr	r2, [pc, #24]	; (80006a4 <MX_GPIO_Init+0xf8>)
 800068a:	0019      	movs	r1, r3
 800068c:	0010      	movs	r0, r2
 800068e:	f000 fda7 	bl	80011e0 <HAL_GPIO_Init>

}
 8000692:	46c0      	nop			; (mov r8, r8)
 8000694:	46bd      	mov	sp, r7
 8000696:	b009      	add	sp, #36	; 0x24
 8000698:	bd90      	pop	{r4, r7, pc}
 800069a:	46c0      	nop			; (mov r8, r8)
 800069c:	40021000 	.word	0x40021000
 80006a0:	00001807 	.word	0x00001807
 80006a4:	48000400 	.word	0x48000400
 80006a8:	48000800 	.word	0x48000800

080006ac <init_vcnl4040>:

/* USER CODE BEGIN 4 */
void init_vcnl4040(void){
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
	//if (getID() != 0x0186) return (false); //Check default ID value
	setLEDCurrent(200); //Max IR LED current
 80006b0:	20c8      	movs	r0, #200	; 0xc8
 80006b2:	f002 ff32 	bl	800351a <setLEDCurrent>
	setIRDutyCycle(40); //Set to highest duty cycle
 80006b6:	2028      	movs	r0, #40	; 0x28
 80006b8:	f002 fe9a 	bl	80033f0 <setIRDutyCycle>
	setProxIntegrationTime(8); //Set to max integration
 80006bc:	2008      	movs	r0, #8
 80006be:	f002 fec6 	bl	800344e <setProxIntegrationTime>
	setProxResolution(16); //Set to 16-bit output
 80006c2:	2010      	movs	r0, #16
 80006c4:	f002 ff02 	bl	80034cc <setProxResolution>
	enableSmartPersistance(); //Turn on smart presistance
 80006c8:	f002 ff1c 	bl	8003504 <enableSmartPersistance>
	powerOnProximity(); //Turn on prox sensing
 80006cc:	f002 fef3 	bl	80034b6 <powerOnProximity>

	 //send_command_vcnl4040(VCNL4040_ADDR,VCNL4040_PS_CONF2,(0b00001011)<<8); //enable 16-bit PS
	 //Default -> more to add for specific funcions
}
 80006d0:	46c0      	nop			; (mov r8, r8)
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
	...

080006d8 <readCommand>:
	return(HAL_I2C_Master_Transmit(&hi2c1, address, buf ,4, HAL_MAX_DELAY));
}


uint16_t readCommand(uint8_t commandCode)
{
 80006d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006da:	b087      	sub	sp, #28
 80006dc:	af02      	add	r7, sp, #8
 80006de:	0002      	movs	r2, r0
 80006e0:	1dfb      	adds	r3, r7, #7
 80006e2:	701a      	strb	r2, [r3, #0]
	uint8_t data;
	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(&hi2c1, VCNL4040_ADDR, &commandCode, 1, HAL_MAX_DELAY);
 80006e4:	2360      	movs	r3, #96	; 0x60
 80006e6:	b299      	uxth	r1, r3
 80006e8:	250f      	movs	r5, #15
 80006ea:	197c      	adds	r4, r7, r5
 80006ec:	1dfa      	adds	r2, r7, #7
 80006ee:	4815      	ldr	r0, [pc, #84]	; (8000744 <readCommand+0x6c>)
 80006f0:	2301      	movs	r3, #1
 80006f2:	425b      	negs	r3, r3
 80006f4:	9300      	str	r3, [sp, #0]
 80006f6:	2301      	movs	r3, #1
 80006f8:	f000 ff96 	bl	8001628 <HAL_I2C_Master_Transmit>
 80006fc:	0003      	movs	r3, r0
 80006fe:	7023      	strb	r3, [r4, #0]

   if (ret != HAL_OK) //Send a restart command. Do not release bus.
 8000700:	197b      	adds	r3, r7, r5
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <readCommand+0x34>
    {
      return (0); //Sensor did not ACK
 8000708:	2300      	movs	r3, #0
 800070a:	e017      	b.n	800073c <readCommand+0x64>
    }
    ret = HAL_I2C_Master_Receive(&hi2c1, VCNL4040_ADDR, &data, 2, HAL_MAX_DELAY);
 800070c:	2360      	movs	r3, #96	; 0x60
 800070e:	b299      	uxth	r1, r3
 8000710:	250f      	movs	r5, #15
 8000712:	197c      	adds	r4, r7, r5
 8000714:	260e      	movs	r6, #14
 8000716:	19ba      	adds	r2, r7, r6
 8000718:	480a      	ldr	r0, [pc, #40]	; (8000744 <readCommand+0x6c>)
 800071a:	2301      	movs	r3, #1
 800071c:	425b      	negs	r3, r3
 800071e:	9300      	str	r3, [sp, #0]
 8000720:	2302      	movs	r3, #2
 8000722:	f001 f889 	bl	8001838 <HAL_I2C_Master_Receive>
 8000726:	0003      	movs	r3, r0
 8000728:	7023      	strb	r3, [r4, #0]
    if(ret == HAL_OK)
 800072a:	197b      	adds	r3, r7, r5
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d103      	bne.n	800073a <readCommand+0x62>
    {
    	return(data);
 8000732:	19bb      	adds	r3, r7, r6
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	b29b      	uxth	r3, r3
 8000738:	e000      	b.n	800073c <readCommand+0x64>
    }
     return (0); //Sensor did not respond
 800073a:	2300      	movs	r3, #0
}
 800073c:	0018      	movs	r0, r3
 800073e:	46bd      	mov	sp, r7
 8000740:	b005      	add	sp, #20
 8000742:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000744:	20000028 	.word	0x20000028

08000748 <writeCommand>:

bool writeCommand(uint8_t commandCode, uint16_t value)
{
 8000748:	b5b0      	push	{r4, r5, r7, lr}
 800074a:	b086      	sub	sp, #24
 800074c:	af02      	add	r7, sp, #8
 800074e:	0002      	movs	r2, r0
 8000750:	1dfb      	adds	r3, r7, #7
 8000752:	701a      	strb	r2, [r3, #0]
 8000754:	1d3b      	adds	r3, r7, #4
 8000756:	1c0a      	adds	r2, r1, #0
 8000758:	801a      	strh	r2, [r3, #0]
	uint8_t	LSB =  (value & 0xFF);
 800075a:	1d3b      	adds	r3, r7, #4
 800075c:	881b      	ldrh	r3, [r3, #0]
 800075e:	b2da      	uxtb	r2, r3
 8000760:	240e      	movs	r4, #14
 8000762:	193b      	adds	r3, r7, r4
 8000764:	701a      	strb	r2, [r3, #0]
	uint8_t MSB = (value >> 8);
 8000766:	1d3b      	adds	r3, r7, #4
 8000768:	881b      	ldrh	r3, [r3, #0]
 800076a:	0a1b      	lsrs	r3, r3, #8
 800076c:	b29b      	uxth	r3, r3
 800076e:	b2da      	uxtb	r2, r3
 8000770:	250d      	movs	r5, #13
 8000772:	197b      	adds	r3, r7, r5
 8000774:	701a      	strb	r2, [r3, #0]

   HAL_I2C_Master_Transmit(&hi2c1, VCNL4040_ADDR, &commandCode, 1, HAL_MAX_DELAY);
 8000776:	2360      	movs	r3, #96	; 0x60
 8000778:	b299      	uxth	r1, r3
 800077a:	1dfa      	adds	r2, r7, #7
 800077c:	4819      	ldr	r0, [pc, #100]	; (80007e4 <writeCommand+0x9c>)
 800077e:	2301      	movs	r3, #1
 8000780:	425b      	negs	r3, r3
 8000782:	9300      	str	r3, [sp, #0]
 8000784:	2301      	movs	r3, #1
 8000786:	f000 ff4f 	bl	8001628 <HAL_I2C_Master_Transmit>
   HAL_I2C_Master_Transmit(&hi2c1, VCNL4040_ADDR, &LSB, 1, HAL_MAX_DELAY);
 800078a:	2360      	movs	r3, #96	; 0x60
 800078c:	b299      	uxth	r1, r3
 800078e:	193a      	adds	r2, r7, r4
 8000790:	4814      	ldr	r0, [pc, #80]	; (80007e4 <writeCommand+0x9c>)
 8000792:	2301      	movs	r3, #1
 8000794:	425b      	negs	r3, r3
 8000796:	9300      	str	r3, [sp, #0]
 8000798:	2301      	movs	r3, #1
 800079a:	f000 ff45 	bl	8001628 <HAL_I2C_Master_Transmit>
   HAL_I2C_Master_Transmit(&hi2c1, VCNL4040_ADDR, &MSB, 1, HAL_MAX_DELAY);
 800079e:	2360      	movs	r3, #96	; 0x60
 80007a0:	b299      	uxth	r1, r3
 80007a2:	197a      	adds	r2, r7, r5
 80007a4:	480f      	ldr	r0, [pc, #60]	; (80007e4 <writeCommand+0x9c>)
 80007a6:	2301      	movs	r3, #1
 80007a8:	425b      	negs	r3, r3
 80007aa:	9300      	str	r3, [sp, #0]
 80007ac:	2301      	movs	r3, #1
 80007ae:	f000 ff3b 	bl	8001628 <HAL_I2C_Master_Transmit>
   HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(&hi2c1, VCNL4040_ADDR, &commandCode, 1, HAL_MAX_DELAY);
 80007b2:	2360      	movs	r3, #96	; 0x60
 80007b4:	b299      	uxth	r1, r3
 80007b6:	250f      	movs	r5, #15
 80007b8:	197c      	adds	r4, r7, r5
 80007ba:	1dfa      	adds	r2, r7, #7
 80007bc:	4809      	ldr	r0, [pc, #36]	; (80007e4 <writeCommand+0x9c>)
 80007be:	2301      	movs	r3, #1
 80007c0:	425b      	negs	r3, r3
 80007c2:	9300      	str	r3, [sp, #0]
 80007c4:	2301      	movs	r3, #1
 80007c6:	f000 ff2f 	bl	8001628 <HAL_I2C_Master_Transmit>
 80007ca:	0003      	movs	r3, r0
 80007cc:	7023      	strb	r3, [r4, #0]
   if(ret != HAL_OK){
 80007ce:	197b      	adds	r3, r7, r5
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <writeCommand+0x92>
	   return (false); //Sensor did not ACK
 80007d6:	2300      	movs	r3, #0
 80007d8:	e000      	b.n	80007dc <writeCommand+0x94>
   }
   return true;
 80007da:	2301      	movs	r3, #1
}
 80007dc:	0018      	movs	r0, r3
 80007de:	46bd      	mov	sp, r7
 80007e0:	b004      	add	sp, #16
 80007e2:	bdb0      	pop	{r4, r5, r7, pc}
 80007e4:	20000028 	.word	0x20000028

080007e8 <user_pwm_setvalue>:
	//HAL_I2C_Master_Transmit(&hi2c1, VCNL4040_ADDR, pData, 1, HAL_MAX_DELAY)
}


void user_pwm_setvalue(uint16_t value)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b08a      	sub	sp, #40	; 0x28
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	0002      	movs	r2, r0
 80007f0:	1dbb      	adds	r3, r7, #6
 80007f2:	801a      	strh	r2, [r3, #0]
    TIM_OC_InitTypeDef sConfigOC;

    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007f4:	210c      	movs	r1, #12
 80007f6:	187b      	adds	r3, r7, r1
 80007f8:	2260      	movs	r2, #96	; 0x60
 80007fa:	601a      	str	r2, [r3, #0]
    sConfigOC.Pulse = value;
 80007fc:	1dbb      	adds	r3, r7, #6
 80007fe:	881a      	ldrh	r2, [r3, #0]
 8000800:	187b      	adds	r3, r7, r1
 8000802:	605a      	str	r2, [r3, #4]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000804:	187b      	adds	r3, r7, r1
 8000806:	2200      	movs	r2, #0
 8000808:	609a      	str	r2, [r3, #8]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800080a:	187b      	adds	r3, r7, r1
 800080c:	2200      	movs	r2, #0
 800080e:	611a      	str	r2, [r3, #16]
    HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4);
 8000810:	1879      	adds	r1, r7, r1
 8000812:	4b07      	ldr	r3, [pc, #28]	; (8000830 <user_pwm_setvalue+0x48>)
 8000814:	220c      	movs	r2, #12
 8000816:	0018      	movs	r0, r3
 8000818:	f002 f9d8 	bl	8002bcc <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800081c:	4b04      	ldr	r3, [pc, #16]	; (8000830 <user_pwm_setvalue+0x48>)
 800081e:	210c      	movs	r1, #12
 8000820:	0018      	movs	r0, r3
 8000822:	f002 f921 	bl	8002a68 <HAL_TIM_PWM_Start>
}
 8000826:	46c0      	nop			; (mov r8, r8)
 8000828:	46bd      	mov	sp, r7
 800082a:	b00a      	add	sp, #40	; 0x28
 800082c:	bd80      	pop	{r7, pc}
 800082e:	46c0      	nop			; (mov r8, r8)
 8000830:	20000074 	.word	0x20000074

08000834 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000838:	b672      	cpsid	i
}
 800083a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800083c:	e7fe      	b.n	800083c <Error_Handler+0x8>
	...

08000840 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000846:	4b0f      	ldr	r3, [pc, #60]	; (8000884 <HAL_MspInit+0x44>)
 8000848:	699a      	ldr	r2, [r3, #24]
 800084a:	4b0e      	ldr	r3, [pc, #56]	; (8000884 <HAL_MspInit+0x44>)
 800084c:	2101      	movs	r1, #1
 800084e:	430a      	orrs	r2, r1
 8000850:	619a      	str	r2, [r3, #24]
 8000852:	4b0c      	ldr	r3, [pc, #48]	; (8000884 <HAL_MspInit+0x44>)
 8000854:	699b      	ldr	r3, [r3, #24]
 8000856:	2201      	movs	r2, #1
 8000858:	4013      	ands	r3, r2
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800085e:	4b09      	ldr	r3, [pc, #36]	; (8000884 <HAL_MspInit+0x44>)
 8000860:	69da      	ldr	r2, [r3, #28]
 8000862:	4b08      	ldr	r3, [pc, #32]	; (8000884 <HAL_MspInit+0x44>)
 8000864:	2180      	movs	r1, #128	; 0x80
 8000866:	0549      	lsls	r1, r1, #21
 8000868:	430a      	orrs	r2, r1
 800086a:	61da      	str	r2, [r3, #28]
 800086c:	4b05      	ldr	r3, [pc, #20]	; (8000884 <HAL_MspInit+0x44>)
 800086e:	69da      	ldr	r2, [r3, #28]
 8000870:	2380      	movs	r3, #128	; 0x80
 8000872:	055b      	lsls	r3, r3, #21
 8000874:	4013      	ands	r3, r2
 8000876:	603b      	str	r3, [r7, #0]
 8000878:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800087a:	46c0      	nop			; (mov r8, r8)
 800087c:	46bd      	mov	sp, r7
 800087e:	b002      	add	sp, #8
 8000880:	bd80      	pop	{r7, pc}
 8000882:	46c0      	nop			; (mov r8, r8)
 8000884:	40021000 	.word	0x40021000

08000888 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000888:	b590      	push	{r4, r7, lr}
 800088a:	b08b      	sub	sp, #44	; 0x2c
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000890:	2414      	movs	r4, #20
 8000892:	193b      	adds	r3, r7, r4
 8000894:	0018      	movs	r0, r3
 8000896:	2314      	movs	r3, #20
 8000898:	001a      	movs	r2, r3
 800089a:	2100      	movs	r1, #0
 800089c:	f002 ff8e 	bl	80037bc <memset>
  if(hadc->Instance==ADC1)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a19      	ldr	r2, [pc, #100]	; (800090c <HAL_ADC_MspInit+0x84>)
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d12b      	bne.n	8000902 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80008aa:	4b19      	ldr	r3, [pc, #100]	; (8000910 <HAL_ADC_MspInit+0x88>)
 80008ac:	699a      	ldr	r2, [r3, #24]
 80008ae:	4b18      	ldr	r3, [pc, #96]	; (8000910 <HAL_ADC_MspInit+0x88>)
 80008b0:	2180      	movs	r1, #128	; 0x80
 80008b2:	0089      	lsls	r1, r1, #2
 80008b4:	430a      	orrs	r2, r1
 80008b6:	619a      	str	r2, [r3, #24]
 80008b8:	4b15      	ldr	r3, [pc, #84]	; (8000910 <HAL_ADC_MspInit+0x88>)
 80008ba:	699a      	ldr	r2, [r3, #24]
 80008bc:	2380      	movs	r3, #128	; 0x80
 80008be:	009b      	lsls	r3, r3, #2
 80008c0:	4013      	ands	r3, r2
 80008c2:	613b      	str	r3, [r7, #16]
 80008c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c6:	4b12      	ldr	r3, [pc, #72]	; (8000910 <HAL_ADC_MspInit+0x88>)
 80008c8:	695a      	ldr	r2, [r3, #20]
 80008ca:	4b11      	ldr	r3, [pc, #68]	; (8000910 <HAL_ADC_MspInit+0x88>)
 80008cc:	2180      	movs	r1, #128	; 0x80
 80008ce:	0289      	lsls	r1, r1, #10
 80008d0:	430a      	orrs	r2, r1
 80008d2:	615a      	str	r2, [r3, #20]
 80008d4:	4b0e      	ldr	r3, [pc, #56]	; (8000910 <HAL_ADC_MspInit+0x88>)
 80008d6:	695a      	ldr	r2, [r3, #20]
 80008d8:	2380      	movs	r3, #128	; 0x80
 80008da:	029b      	lsls	r3, r3, #10
 80008dc:	4013      	ands	r3, r2
 80008de:	60fb      	str	r3, [r7, #12]
 80008e0:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008e2:	193b      	adds	r3, r7, r4
 80008e4:	2201      	movs	r2, #1
 80008e6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008e8:	193b      	adds	r3, r7, r4
 80008ea:	2203      	movs	r2, #3
 80008ec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	193b      	adds	r3, r7, r4
 80008f0:	2200      	movs	r2, #0
 80008f2:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f4:	193a      	adds	r2, r7, r4
 80008f6:	2390      	movs	r3, #144	; 0x90
 80008f8:	05db      	lsls	r3, r3, #23
 80008fa:	0011      	movs	r1, r2
 80008fc:	0018      	movs	r0, r3
 80008fe:	f000 fc6f 	bl	80011e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000902:	46c0      	nop			; (mov r8, r8)
 8000904:	46bd      	mov	sp, r7
 8000906:	b00b      	add	sp, #44	; 0x2c
 8000908:	bd90      	pop	{r4, r7, pc}
 800090a:	46c0      	nop			; (mov r8, r8)
 800090c:	40012400 	.word	0x40012400
 8000910:	40021000 	.word	0x40021000

08000914 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000914:	b590      	push	{r4, r7, lr}
 8000916:	b08b      	sub	sp, #44	; 0x2c
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091c:	2414      	movs	r4, #20
 800091e:	193b      	adds	r3, r7, r4
 8000920:	0018      	movs	r0, r3
 8000922:	2314      	movs	r3, #20
 8000924:	001a      	movs	r2, r3
 8000926:	2100      	movs	r1, #0
 8000928:	f002 ff48 	bl	80037bc <memset>
  if(hi2c->Instance==I2C1)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a1c      	ldr	r2, [pc, #112]	; (80009a4 <HAL_I2C_MspInit+0x90>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d132      	bne.n	800099c <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000936:	4b1c      	ldr	r3, [pc, #112]	; (80009a8 <HAL_I2C_MspInit+0x94>)
 8000938:	695a      	ldr	r2, [r3, #20]
 800093a:	4b1b      	ldr	r3, [pc, #108]	; (80009a8 <HAL_I2C_MspInit+0x94>)
 800093c:	2180      	movs	r1, #128	; 0x80
 800093e:	02c9      	lsls	r1, r1, #11
 8000940:	430a      	orrs	r2, r1
 8000942:	615a      	str	r2, [r3, #20]
 8000944:	4b18      	ldr	r3, [pc, #96]	; (80009a8 <HAL_I2C_MspInit+0x94>)
 8000946:	695a      	ldr	r2, [r3, #20]
 8000948:	2380      	movs	r3, #128	; 0x80
 800094a:	02db      	lsls	r3, r3, #11
 800094c:	4013      	ands	r3, r2
 800094e:	613b      	str	r3, [r7, #16]
 8000950:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000952:	193b      	adds	r3, r7, r4
 8000954:	22c0      	movs	r2, #192	; 0xc0
 8000956:	0092      	lsls	r2, r2, #2
 8000958:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800095a:	0021      	movs	r1, r4
 800095c:	187b      	adds	r3, r7, r1
 800095e:	2212      	movs	r2, #18
 8000960:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	187b      	adds	r3, r7, r1
 8000964:	2200      	movs	r2, #0
 8000966:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000968:	187b      	adds	r3, r7, r1
 800096a:	2203      	movs	r2, #3
 800096c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800096e:	187b      	adds	r3, r7, r1
 8000970:	2201      	movs	r2, #1
 8000972:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000974:	187b      	adds	r3, r7, r1
 8000976:	4a0d      	ldr	r2, [pc, #52]	; (80009ac <HAL_I2C_MspInit+0x98>)
 8000978:	0019      	movs	r1, r3
 800097a:	0010      	movs	r0, r2
 800097c:	f000 fc30 	bl	80011e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000980:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <HAL_I2C_MspInit+0x94>)
 8000982:	69da      	ldr	r2, [r3, #28]
 8000984:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <HAL_I2C_MspInit+0x94>)
 8000986:	2180      	movs	r1, #128	; 0x80
 8000988:	0389      	lsls	r1, r1, #14
 800098a:	430a      	orrs	r2, r1
 800098c:	61da      	str	r2, [r3, #28]
 800098e:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <HAL_I2C_MspInit+0x94>)
 8000990:	69da      	ldr	r2, [r3, #28]
 8000992:	2380      	movs	r3, #128	; 0x80
 8000994:	039b      	lsls	r3, r3, #14
 8000996:	4013      	ands	r3, r2
 8000998:	60fb      	str	r3, [r7, #12]
 800099a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800099c:	46c0      	nop			; (mov r8, r8)
 800099e:	46bd      	mov	sp, r7
 80009a0:	b00b      	add	sp, #44	; 0x2c
 80009a2:	bd90      	pop	{r4, r7, pc}
 80009a4:	40005400 	.word	0x40005400
 80009a8:	40021000 	.word	0x40021000
 80009ac:	48000400 	.word	0x48000400

080009b0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a0a      	ldr	r2, [pc, #40]	; (80009e8 <HAL_TIM_PWM_MspInit+0x38>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d10d      	bne.n	80009de <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80009c2:	4b0a      	ldr	r3, [pc, #40]	; (80009ec <HAL_TIM_PWM_MspInit+0x3c>)
 80009c4:	699a      	ldr	r2, [r3, #24]
 80009c6:	4b09      	ldr	r3, [pc, #36]	; (80009ec <HAL_TIM_PWM_MspInit+0x3c>)
 80009c8:	2180      	movs	r1, #128	; 0x80
 80009ca:	0109      	lsls	r1, r1, #4
 80009cc:	430a      	orrs	r2, r1
 80009ce:	619a      	str	r2, [r3, #24]
 80009d0:	4b06      	ldr	r3, [pc, #24]	; (80009ec <HAL_TIM_PWM_MspInit+0x3c>)
 80009d2:	699a      	ldr	r2, [r3, #24]
 80009d4:	2380      	movs	r3, #128	; 0x80
 80009d6:	011b      	lsls	r3, r3, #4
 80009d8:	4013      	ands	r3, r2
 80009da:	60fb      	str	r3, [r7, #12]
 80009dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80009de:	46c0      	nop			; (mov r8, r8)
 80009e0:	46bd      	mov	sp, r7
 80009e2:	b004      	add	sp, #16
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	46c0      	nop			; (mov r8, r8)
 80009e8:	40012c00 	.word	0x40012c00
 80009ec:	40021000 	.word	0x40021000

080009f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80009f0:	b590      	push	{r4, r7, lr}
 80009f2:	b089      	sub	sp, #36	; 0x24
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f8:	240c      	movs	r4, #12
 80009fa:	193b      	adds	r3, r7, r4
 80009fc:	0018      	movs	r0, r3
 80009fe:	2314      	movs	r3, #20
 8000a00:	001a      	movs	r2, r3
 8000a02:	2100      	movs	r1, #0
 8000a04:	f002 feda 	bl	80037bc <memset>
  if(htim->Instance==TIM1)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a16      	ldr	r2, [pc, #88]	; (8000a68 <HAL_TIM_MspPostInit+0x78>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d125      	bne.n	8000a5e <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a12:	4b16      	ldr	r3, [pc, #88]	; (8000a6c <HAL_TIM_MspPostInit+0x7c>)
 8000a14:	695a      	ldr	r2, [r3, #20]
 8000a16:	4b15      	ldr	r3, [pc, #84]	; (8000a6c <HAL_TIM_MspPostInit+0x7c>)
 8000a18:	2180      	movs	r1, #128	; 0x80
 8000a1a:	0289      	lsls	r1, r1, #10
 8000a1c:	430a      	orrs	r2, r1
 8000a1e:	615a      	str	r2, [r3, #20]
 8000a20:	4b12      	ldr	r3, [pc, #72]	; (8000a6c <HAL_TIM_MspPostInit+0x7c>)
 8000a22:	695a      	ldr	r2, [r3, #20]
 8000a24:	2380      	movs	r3, #128	; 0x80
 8000a26:	029b      	lsls	r3, r3, #10
 8000a28:	4013      	ands	r3, r2
 8000a2a:	60bb      	str	r3, [r7, #8]
 8000a2c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000a2e:	193b      	adds	r3, r7, r4
 8000a30:	2280      	movs	r2, #128	; 0x80
 8000a32:	0112      	lsls	r2, r2, #4
 8000a34:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a36:	0021      	movs	r1, r4
 8000a38:	187b      	adds	r3, r7, r1
 8000a3a:	2202      	movs	r2, #2
 8000a3c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	187b      	adds	r3, r7, r1
 8000a40:	2200      	movs	r2, #0
 8000a42:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a44:	187b      	adds	r3, r7, r1
 8000a46:	2200      	movs	r2, #0
 8000a48:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000a4a:	187b      	adds	r3, r7, r1
 8000a4c:	2202      	movs	r2, #2
 8000a4e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a50:	187a      	adds	r2, r7, r1
 8000a52:	2390      	movs	r3, #144	; 0x90
 8000a54:	05db      	lsls	r3, r3, #23
 8000a56:	0011      	movs	r1, r2
 8000a58:	0018      	movs	r0, r3
 8000a5a:	f000 fbc1 	bl	80011e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000a5e:	46c0      	nop			; (mov r8, r8)
 8000a60:	46bd      	mov	sp, r7
 8000a62:	b009      	add	sp, #36	; 0x24
 8000a64:	bd90      	pop	{r4, r7, pc}
 8000a66:	46c0      	nop			; (mov r8, r8)
 8000a68:	40012c00 	.word	0x40012c00
 8000a6c:	40021000 	.word	0x40021000

08000a70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a74:	e7fe      	b.n	8000a74 <NMI_Handler+0x4>

08000a76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a76:	b580      	push	{r7, lr}
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a7a:	e7fe      	b.n	8000a7a <HardFault_Handler+0x4>

08000a7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a80:	46c0      	nop			; (mov r8, r8)
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}

08000a86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a86:	b580      	push	{r7, lr}
 8000a88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a8a:	46c0      	nop			; (mov r8, r8)
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}

08000a90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a94:	f000 f87a 	bl	8000b8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a98:	46c0      	nop			; (mov r8, r8)
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}

08000a9e <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a9e:	b580      	push	{r7, lr}
 8000aa0:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000aa2:	46c0      	nop			; (mov r8, r8)
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000aa8:	480d      	ldr	r0, [pc, #52]	; (8000ae0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000aaa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000aac:	480d      	ldr	r0, [pc, #52]	; (8000ae4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000aae:	490e      	ldr	r1, [pc, #56]	; (8000ae8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ab0:	4a0e      	ldr	r2, [pc, #56]	; (8000aec <LoopForever+0xe>)
  movs r3, #0
 8000ab2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ab4:	e002      	b.n	8000abc <LoopCopyDataInit>

08000ab6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ab6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ab8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aba:	3304      	adds	r3, #4

08000abc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000abc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000abe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ac0:	d3f9      	bcc.n	8000ab6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ac2:	4a0b      	ldr	r2, [pc, #44]	; (8000af0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ac4:	4c0b      	ldr	r4, [pc, #44]	; (8000af4 <LoopForever+0x16>)
  movs r3, #0
 8000ac6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ac8:	e001      	b.n	8000ace <LoopFillZerobss>

08000aca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000acc:	3204      	adds	r2, #4

08000ace <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ace:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ad0:	d3fb      	bcc.n	8000aca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000ad2:	f7ff ffe4 	bl	8000a9e <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000ad6:	f002 fe4d 	bl	8003774 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ada:	f7ff fba1 	bl	8000220 <main>

08000ade <LoopForever>:

LoopForever:
    b LoopForever
 8000ade:	e7fe      	b.n	8000ade <LoopForever>
  ldr   r0, =_estack
 8000ae0:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000ae4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ae8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000aec:	0800381c 	.word	0x0800381c
  ldr r2, =_sbss
 8000af0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000af4:	20000100 	.word	0x20000100

08000af8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000af8:	e7fe      	b.n	8000af8 <ADC1_IRQHandler>
	...

08000afc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b00:	4b07      	ldr	r3, [pc, #28]	; (8000b20 <HAL_Init+0x24>)
 8000b02:	681a      	ldr	r2, [r3, #0]
 8000b04:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <HAL_Init+0x24>)
 8000b06:	2110      	movs	r1, #16
 8000b08:	430a      	orrs	r2, r1
 8000b0a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000b0c:	2003      	movs	r0, #3
 8000b0e:	f000 f809 	bl	8000b24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b12:	f7ff fe95 	bl	8000840 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b16:	2300      	movs	r3, #0
}
 8000b18:	0018      	movs	r0, r3
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	46c0      	nop			; (mov r8, r8)
 8000b20:	40022000 	.word	0x40022000

08000b24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b24:	b590      	push	{r4, r7, lr}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b2c:	4b14      	ldr	r3, [pc, #80]	; (8000b80 <HAL_InitTick+0x5c>)
 8000b2e:	681c      	ldr	r4, [r3, #0]
 8000b30:	4b14      	ldr	r3, [pc, #80]	; (8000b84 <HAL_InitTick+0x60>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	0019      	movs	r1, r3
 8000b36:	23fa      	movs	r3, #250	; 0xfa
 8000b38:	0098      	lsls	r0, r3, #2
 8000b3a:	f7ff fae5 	bl	8000108 <__udivsi3>
 8000b3e:	0003      	movs	r3, r0
 8000b40:	0019      	movs	r1, r3
 8000b42:	0020      	movs	r0, r4
 8000b44:	f7ff fae0 	bl	8000108 <__udivsi3>
 8000b48:	0003      	movs	r3, r0
 8000b4a:	0018      	movs	r0, r3
 8000b4c:	f000 fb3b 	bl	80011c6 <HAL_SYSTICK_Config>
 8000b50:	1e03      	subs	r3, r0, #0
 8000b52:	d001      	beq.n	8000b58 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000b54:	2301      	movs	r3, #1
 8000b56:	e00f      	b.n	8000b78 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	2b03      	cmp	r3, #3
 8000b5c:	d80b      	bhi.n	8000b76 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b5e:	6879      	ldr	r1, [r7, #4]
 8000b60:	2301      	movs	r3, #1
 8000b62:	425b      	negs	r3, r3
 8000b64:	2200      	movs	r2, #0
 8000b66:	0018      	movs	r0, r3
 8000b68:	f000 fb18 	bl	800119c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b6c:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <HAL_InitTick+0x64>)
 8000b6e:	687a      	ldr	r2, [r7, #4]
 8000b70:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000b72:	2300      	movs	r3, #0
 8000b74:	e000      	b.n	8000b78 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000b76:	2301      	movs	r3, #1
}
 8000b78:	0018      	movs	r0, r3
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	b003      	add	sp, #12
 8000b7e:	bd90      	pop	{r4, r7, pc}
 8000b80:	20000000 	.word	0x20000000
 8000b84:	20000008 	.word	0x20000008
 8000b88:	20000004 	.word	0x20000004

08000b8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b90:	4b05      	ldr	r3, [pc, #20]	; (8000ba8 <HAL_IncTick+0x1c>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	001a      	movs	r2, r3
 8000b96:	4b05      	ldr	r3, [pc, #20]	; (8000bac <HAL_IncTick+0x20>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	18d2      	adds	r2, r2, r3
 8000b9c:	4b03      	ldr	r3, [pc, #12]	; (8000bac <HAL_IncTick+0x20>)
 8000b9e:	601a      	str	r2, [r3, #0]
}
 8000ba0:	46c0      	nop			; (mov r8, r8)
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	46c0      	nop			; (mov r8, r8)
 8000ba8:	20000008 	.word	0x20000008
 8000bac:	200000fc 	.word	0x200000fc

08000bb0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  return uwTick;
 8000bb4:	4b02      	ldr	r3, [pc, #8]	; (8000bc0 <HAL_GetTick+0x10>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
}
 8000bb8:	0018      	movs	r0, r3
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	46c0      	nop			; (mov r8, r8)
 8000bc0:	200000fc 	.word	0x200000fc

08000bc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b084      	sub	sp, #16
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bcc:	f7ff fff0 	bl	8000bb0 <HAL_GetTick>
 8000bd0:	0003      	movs	r3, r0
 8000bd2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	3301      	adds	r3, #1
 8000bdc:	d005      	beq.n	8000bea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bde:	4b0a      	ldr	r3, [pc, #40]	; (8000c08 <HAL_Delay+0x44>)
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	001a      	movs	r2, r3
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	189b      	adds	r3, r3, r2
 8000be8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000bea:	46c0      	nop			; (mov r8, r8)
 8000bec:	f7ff ffe0 	bl	8000bb0 <HAL_GetTick>
 8000bf0:	0002      	movs	r2, r0
 8000bf2:	68bb      	ldr	r3, [r7, #8]
 8000bf4:	1ad3      	subs	r3, r2, r3
 8000bf6:	68fa      	ldr	r2, [r7, #12]
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	d8f7      	bhi.n	8000bec <HAL_Delay+0x28>
  {
  }
}
 8000bfc:	46c0      	nop			; (mov r8, r8)
 8000bfe:	46c0      	nop			; (mov r8, r8)
 8000c00:	46bd      	mov	sp, r7
 8000c02:	b004      	add	sp, #16
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	46c0      	nop			; (mov r8, r8)
 8000c08:	20000008 	.word	0x20000008

08000c0c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c14:	230f      	movs	r3, #15
 8000c16:	18fb      	adds	r3, r7, r3
 8000c18:	2200      	movs	r2, #0
 8000c1a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d101      	bne.n	8000c2a <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8000c26:	2301      	movs	r3, #1
 8000c28:	e125      	b.n	8000e76 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d10a      	bne.n	8000c48 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	2200      	movs	r2, #0
 8000c36:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2234      	movs	r2, #52	; 0x34
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	0018      	movs	r0, r3
 8000c44:	f7ff fe20 	bl	8000888 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c4c:	2210      	movs	r2, #16
 8000c4e:	4013      	ands	r3, r2
 8000c50:	d000      	beq.n	8000c54 <HAL_ADC_Init+0x48>
 8000c52:	e103      	b.n	8000e5c <HAL_ADC_Init+0x250>
 8000c54:	230f      	movs	r3, #15
 8000c56:	18fb      	adds	r3, r7, r3
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d000      	beq.n	8000c60 <HAL_ADC_Init+0x54>
 8000c5e:	e0fd      	b.n	8000e5c <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	689b      	ldr	r3, [r3, #8]
 8000c66:	2204      	movs	r2, #4
 8000c68:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000c6a:	d000      	beq.n	8000c6e <HAL_ADC_Init+0x62>
 8000c6c:	e0f6      	b.n	8000e5c <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c72:	4a83      	ldr	r2, [pc, #524]	; (8000e80 <HAL_ADC_Init+0x274>)
 8000c74:	4013      	ands	r3, r2
 8000c76:	2202      	movs	r2, #2
 8000c78:	431a      	orrs	r2, r3
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	689b      	ldr	r3, [r3, #8]
 8000c84:	2203      	movs	r2, #3
 8000c86:	4013      	ands	r3, r2
 8000c88:	2b01      	cmp	r3, #1
 8000c8a:	d112      	bne.n	8000cb2 <HAL_ADC_Init+0xa6>
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	2201      	movs	r2, #1
 8000c94:	4013      	ands	r3, r2
 8000c96:	2b01      	cmp	r3, #1
 8000c98:	d009      	beq.n	8000cae <HAL_ADC_Init+0xa2>
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	68da      	ldr	r2, [r3, #12]
 8000ca0:	2380      	movs	r3, #128	; 0x80
 8000ca2:	021b      	lsls	r3, r3, #8
 8000ca4:	401a      	ands	r2, r3
 8000ca6:	2380      	movs	r3, #128	; 0x80
 8000ca8:	021b      	lsls	r3, r3, #8
 8000caa:	429a      	cmp	r2, r3
 8000cac:	d101      	bne.n	8000cb2 <HAL_ADC_Init+0xa6>
 8000cae:	2301      	movs	r3, #1
 8000cb0:	e000      	b.n	8000cb4 <HAL_ADC_Init+0xa8>
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d116      	bne.n	8000ce6 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	68db      	ldr	r3, [r3, #12]
 8000cbe:	2218      	movs	r2, #24
 8000cc0:	4393      	bics	r3, r2
 8000cc2:	0019      	movs	r1, r3
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	689a      	ldr	r2, [r3, #8]
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	430a      	orrs	r2, r1
 8000cce:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	691b      	ldr	r3, [r3, #16]
 8000cd6:	009b      	lsls	r3, r3, #2
 8000cd8:	0899      	lsrs	r1, r3, #2
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	685a      	ldr	r2, [r3, #4]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	430a      	orrs	r2, r1
 8000ce4:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	68da      	ldr	r2, [r3, #12]
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4964      	ldr	r1, [pc, #400]	; (8000e84 <HAL_ADC_Init+0x278>)
 8000cf2:	400a      	ands	r2, r1
 8000cf4:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	7e1b      	ldrb	r3, [r3, #24]
 8000cfa:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	7e5b      	ldrb	r3, [r3, #25]
 8000d00:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000d02:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	7e9b      	ldrb	r3, [r3, #26]
 8000d08:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000d0a:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d10:	2b01      	cmp	r3, #1
 8000d12:	d002      	beq.n	8000d1a <HAL_ADC_Init+0x10e>
 8000d14:	2380      	movs	r3, #128	; 0x80
 8000d16:	015b      	lsls	r3, r3, #5
 8000d18:	e000      	b.n	8000d1c <HAL_ADC_Init+0x110>
 8000d1a:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000d1c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000d22:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	691b      	ldr	r3, [r3, #16]
 8000d28:	2b02      	cmp	r3, #2
 8000d2a:	d101      	bne.n	8000d30 <HAL_ADC_Init+0x124>
 8000d2c:	2304      	movs	r3, #4
 8000d2e:	e000      	b.n	8000d32 <HAL_ADC_Init+0x126>
 8000d30:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8000d32:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2124      	movs	r1, #36	; 0x24
 8000d38:	5c5b      	ldrb	r3, [r3, r1]
 8000d3a:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000d3c:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000d3e:	68ba      	ldr	r2, [r7, #8]
 8000d40:	4313      	orrs	r3, r2
 8000d42:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	7edb      	ldrb	r3, [r3, #27]
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	d115      	bne.n	8000d78 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	7e9b      	ldrb	r3, [r3, #26]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d105      	bne.n	8000d60 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	2280      	movs	r2, #128	; 0x80
 8000d58:	0252      	lsls	r2, r2, #9
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	60bb      	str	r3, [r7, #8]
 8000d5e:	e00b      	b.n	8000d78 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d64:	2220      	movs	r2, #32
 8000d66:	431a      	orrs	r2, r3
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d70:	2201      	movs	r2, #1
 8000d72:	431a      	orrs	r2, r3
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	69da      	ldr	r2, [r3, #28]
 8000d7c:	23c2      	movs	r3, #194	; 0xc2
 8000d7e:	33ff      	adds	r3, #255	; 0xff
 8000d80:	429a      	cmp	r2, r3
 8000d82:	d007      	beq.n	8000d94 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	68ba      	ldr	r2, [r7, #8]
 8000d90:	4313      	orrs	r3, r2
 8000d92:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	68d9      	ldr	r1, [r3, #12]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	68ba      	ldr	r2, [r7, #8]
 8000da0:	430a      	orrs	r2, r1
 8000da2:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000da8:	2380      	movs	r3, #128	; 0x80
 8000daa:	055b      	lsls	r3, r3, #21
 8000dac:	429a      	cmp	r2, r3
 8000dae:	d01b      	beq.n	8000de8 <HAL_ADC_Init+0x1dc>
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d017      	beq.n	8000de8 <HAL_ADC_Init+0x1dc>
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dbc:	2b02      	cmp	r3, #2
 8000dbe:	d013      	beq.n	8000de8 <HAL_ADC_Init+0x1dc>
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dc4:	2b03      	cmp	r3, #3
 8000dc6:	d00f      	beq.n	8000de8 <HAL_ADC_Init+0x1dc>
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dcc:	2b04      	cmp	r3, #4
 8000dce:	d00b      	beq.n	8000de8 <HAL_ADC_Init+0x1dc>
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dd4:	2b05      	cmp	r3, #5
 8000dd6:	d007      	beq.n	8000de8 <HAL_ADC_Init+0x1dc>
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ddc:	2b06      	cmp	r3, #6
 8000dde:	d003      	beq.n	8000de8 <HAL_ADC_Init+0x1dc>
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000de4:	2b07      	cmp	r3, #7
 8000de6:	d112      	bne.n	8000e0e <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	695a      	ldr	r2, [r3, #20]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	2107      	movs	r1, #7
 8000df4:	438a      	bics	r2, r1
 8000df6:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	6959      	ldr	r1, [r3, #20]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e02:	2207      	movs	r2, #7
 8000e04:	401a      	ands	r2, r3
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	430a      	orrs	r2, r1
 8000e0c:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	4a1c      	ldr	r2, [pc, #112]	; (8000e88 <HAL_ADC_Init+0x27c>)
 8000e16:	4013      	ands	r3, r2
 8000e18:	68ba      	ldr	r2, [r7, #8]
 8000e1a:	429a      	cmp	r2, r3
 8000e1c:	d10b      	bne.n	8000e36 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2200      	movs	r2, #0
 8000e22:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e28:	2203      	movs	r2, #3
 8000e2a:	4393      	bics	r3, r2
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	431a      	orrs	r2, r3
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000e34:	e01c      	b.n	8000e70 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e3a:	2212      	movs	r2, #18
 8000e3c:	4393      	bics	r3, r2
 8000e3e:	2210      	movs	r2, #16
 8000e40:	431a      	orrs	r2, r3
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	431a      	orrs	r2, r3
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8000e52:	230f      	movs	r3, #15
 8000e54:	18fb      	adds	r3, r7, r3
 8000e56:	2201      	movs	r2, #1
 8000e58:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000e5a:	e009      	b.n	8000e70 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e60:	2210      	movs	r2, #16
 8000e62:	431a      	orrs	r2, r3
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8000e68:	230f      	movs	r3, #15
 8000e6a:	18fb      	adds	r3, r7, r3
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000e70:	230f      	movs	r3, #15
 8000e72:	18fb      	adds	r3, r7, r3
 8000e74:	781b      	ldrb	r3, [r3, #0]
}
 8000e76:	0018      	movs	r0, r3
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	b004      	add	sp, #16
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	46c0      	nop			; (mov r8, r8)
 8000e80:	fffffefd 	.word	0xfffffefd
 8000e84:	fffe0219 	.word	0xfffe0219
 8000e88:	833fffe7 	.word	0x833fffe7

08000e8c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
 8000e94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e96:	230f      	movs	r3, #15
 8000e98:	18fb      	adds	r3, r7, r3
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ea6:	2380      	movs	r3, #128	; 0x80
 8000ea8:	055b      	lsls	r3, r3, #21
 8000eaa:	429a      	cmp	r2, r3
 8000eac:	d011      	beq.n	8000ed2 <HAL_ADC_ConfigChannel+0x46>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d00d      	beq.n	8000ed2 <HAL_ADC_ConfigChannel+0x46>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eba:	2b02      	cmp	r3, #2
 8000ebc:	d009      	beq.n	8000ed2 <HAL_ADC_ConfigChannel+0x46>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ec2:	2b03      	cmp	r3, #3
 8000ec4:	d005      	beq.n	8000ed2 <HAL_ADC_ConfigChannel+0x46>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eca:	2b04      	cmp	r3, #4
 8000ecc:	d001      	beq.n	8000ed2 <HAL_ADC_ConfigChannel+0x46>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2234      	movs	r2, #52	; 0x34
 8000ed6:	5c9b      	ldrb	r3, [r3, r2]
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d101      	bne.n	8000ee0 <HAL_ADC_ConfigChannel+0x54>
 8000edc:	2302      	movs	r3, #2
 8000ede:	e0bb      	b.n	8001058 <HAL_ADC_ConfigChannel+0x1cc>
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2234      	movs	r2, #52	; 0x34
 8000ee4:	2101      	movs	r1, #1
 8000ee6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	689b      	ldr	r3, [r3, #8]
 8000eee:	2204      	movs	r2, #4
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	d000      	beq.n	8000ef6 <HAL_ADC_ConfigChannel+0x6a>
 8000ef4:	e09f      	b.n	8001036 <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	4a59      	ldr	r2, [pc, #356]	; (8001060 <HAL_ADC_ConfigChannel+0x1d4>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d100      	bne.n	8000f02 <HAL_ADC_ConfigChannel+0x76>
 8000f00:	e077      	b.n	8000ff2 <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	409a      	lsls	r2, r3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	430a      	orrs	r2, r1
 8000f16:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f1c:	2380      	movs	r3, #128	; 0x80
 8000f1e:	055b      	lsls	r3, r3, #21
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d037      	beq.n	8000f94 <HAL_ADC_ConfigChannel+0x108>
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d033      	beq.n	8000f94 <HAL_ADC_ConfigChannel+0x108>
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f30:	2b02      	cmp	r3, #2
 8000f32:	d02f      	beq.n	8000f94 <HAL_ADC_ConfigChannel+0x108>
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f38:	2b03      	cmp	r3, #3
 8000f3a:	d02b      	beq.n	8000f94 <HAL_ADC_ConfigChannel+0x108>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f40:	2b04      	cmp	r3, #4
 8000f42:	d027      	beq.n	8000f94 <HAL_ADC_ConfigChannel+0x108>
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f48:	2b05      	cmp	r3, #5
 8000f4a:	d023      	beq.n	8000f94 <HAL_ADC_ConfigChannel+0x108>
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f50:	2b06      	cmp	r3, #6
 8000f52:	d01f      	beq.n	8000f94 <HAL_ADC_ConfigChannel+0x108>
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f58:	2b07      	cmp	r3, #7
 8000f5a:	d01b      	beq.n	8000f94 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	689a      	ldr	r2, [r3, #8]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	695b      	ldr	r3, [r3, #20]
 8000f66:	2107      	movs	r1, #7
 8000f68:	400b      	ands	r3, r1
 8000f6a:	429a      	cmp	r2, r3
 8000f6c:	d012      	beq.n	8000f94 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	695a      	ldr	r2, [r3, #20]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2107      	movs	r1, #7
 8000f7a:	438a      	bics	r2, r1
 8000f7c:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	6959      	ldr	r1, [r3, #20]
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	689b      	ldr	r3, [r3, #8]
 8000f88:	2207      	movs	r2, #7
 8000f8a:	401a      	ands	r2, r3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	430a      	orrs	r2, r1
 8000f92:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	2b10      	cmp	r3, #16
 8000f9a:	d003      	beq.n	8000fa4 <HAL_ADC_ConfigChannel+0x118>
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	2b11      	cmp	r3, #17
 8000fa2:	d152      	bne.n	800104a <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000fa4:	4b2f      	ldr	r3, [pc, #188]	; (8001064 <HAL_ADC_ConfigChannel+0x1d8>)
 8000fa6:	6819      	ldr	r1, [r3, #0]
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	2b10      	cmp	r3, #16
 8000fae:	d102      	bne.n	8000fb6 <HAL_ADC_ConfigChannel+0x12a>
 8000fb0:	2380      	movs	r3, #128	; 0x80
 8000fb2:	041b      	lsls	r3, r3, #16
 8000fb4:	e001      	b.n	8000fba <HAL_ADC_ConfigChannel+0x12e>
 8000fb6:	2380      	movs	r3, #128	; 0x80
 8000fb8:	03db      	lsls	r3, r3, #15
 8000fba:	4a2a      	ldr	r2, [pc, #168]	; (8001064 <HAL_ADC_ConfigChannel+0x1d8>)
 8000fbc:	430b      	orrs	r3, r1
 8000fbe:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	2b10      	cmp	r3, #16
 8000fc6:	d140      	bne.n	800104a <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000fc8:	4b27      	ldr	r3, [pc, #156]	; (8001068 <HAL_ADC_ConfigChannel+0x1dc>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4927      	ldr	r1, [pc, #156]	; (800106c <HAL_ADC_ConfigChannel+0x1e0>)
 8000fce:	0018      	movs	r0, r3
 8000fd0:	f7ff f89a 	bl	8000108 <__udivsi3>
 8000fd4:	0003      	movs	r3, r0
 8000fd6:	001a      	movs	r2, r3
 8000fd8:	0013      	movs	r3, r2
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	189b      	adds	r3, r3, r2
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000fe2:	e002      	b.n	8000fea <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	3b01      	subs	r3, #1
 8000fe8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d1f9      	bne.n	8000fe4 <HAL_ADC_ConfigChannel+0x158>
 8000ff0:	e02b      	b.n	800104a <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2101      	movs	r1, #1
 8000ffe:	4099      	lsls	r1, r3
 8001000:	000b      	movs	r3, r1
 8001002:	43d9      	mvns	r1, r3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	400a      	ands	r2, r1
 800100a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2b10      	cmp	r3, #16
 8001012:	d003      	beq.n	800101c <HAL_ADC_ConfigChannel+0x190>
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	2b11      	cmp	r3, #17
 800101a:	d116      	bne.n	800104a <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800101c:	4b11      	ldr	r3, [pc, #68]	; (8001064 <HAL_ADC_ConfigChannel+0x1d8>)
 800101e:	6819      	ldr	r1, [r3, #0]
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	2b10      	cmp	r3, #16
 8001026:	d101      	bne.n	800102c <HAL_ADC_ConfigChannel+0x1a0>
 8001028:	4a11      	ldr	r2, [pc, #68]	; (8001070 <HAL_ADC_ConfigChannel+0x1e4>)
 800102a:	e000      	b.n	800102e <HAL_ADC_ConfigChannel+0x1a2>
 800102c:	4a11      	ldr	r2, [pc, #68]	; (8001074 <HAL_ADC_ConfigChannel+0x1e8>)
 800102e:	4b0d      	ldr	r3, [pc, #52]	; (8001064 <HAL_ADC_ConfigChannel+0x1d8>)
 8001030:	400a      	ands	r2, r1
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	e009      	b.n	800104a <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800103a:	2220      	movs	r2, #32
 800103c:	431a      	orrs	r2, r3
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001042:	230f      	movs	r3, #15
 8001044:	18fb      	adds	r3, r7, r3
 8001046:	2201      	movs	r2, #1
 8001048:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2234      	movs	r2, #52	; 0x34
 800104e:	2100      	movs	r1, #0
 8001050:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001052:	230f      	movs	r3, #15
 8001054:	18fb      	adds	r3, r7, r3
 8001056:	781b      	ldrb	r3, [r3, #0]
}
 8001058:	0018      	movs	r0, r3
 800105a:	46bd      	mov	sp, r7
 800105c:	b004      	add	sp, #16
 800105e:	bd80      	pop	{r7, pc}
 8001060:	00001001 	.word	0x00001001
 8001064:	40012708 	.word	0x40012708
 8001068:	20000000 	.word	0x20000000
 800106c:	000f4240 	.word	0x000f4240
 8001070:	ff7fffff 	.word	0xff7fffff
 8001074:	ffbfffff 	.word	0xffbfffff

08001078 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001078:	b590      	push	{r4, r7, lr}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	0002      	movs	r2, r0
 8001080:	6039      	str	r1, [r7, #0]
 8001082:	1dfb      	adds	r3, r7, #7
 8001084:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001086:	1dfb      	adds	r3, r7, #7
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	2b7f      	cmp	r3, #127	; 0x7f
 800108c:	d828      	bhi.n	80010e0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800108e:	4a2f      	ldr	r2, [pc, #188]	; (800114c <__NVIC_SetPriority+0xd4>)
 8001090:	1dfb      	adds	r3, r7, #7
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	b25b      	sxtb	r3, r3
 8001096:	089b      	lsrs	r3, r3, #2
 8001098:	33c0      	adds	r3, #192	; 0xc0
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	589b      	ldr	r3, [r3, r2]
 800109e:	1dfa      	adds	r2, r7, #7
 80010a0:	7812      	ldrb	r2, [r2, #0]
 80010a2:	0011      	movs	r1, r2
 80010a4:	2203      	movs	r2, #3
 80010a6:	400a      	ands	r2, r1
 80010a8:	00d2      	lsls	r2, r2, #3
 80010aa:	21ff      	movs	r1, #255	; 0xff
 80010ac:	4091      	lsls	r1, r2
 80010ae:	000a      	movs	r2, r1
 80010b0:	43d2      	mvns	r2, r2
 80010b2:	401a      	ands	r2, r3
 80010b4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	019b      	lsls	r3, r3, #6
 80010ba:	22ff      	movs	r2, #255	; 0xff
 80010bc:	401a      	ands	r2, r3
 80010be:	1dfb      	adds	r3, r7, #7
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	0018      	movs	r0, r3
 80010c4:	2303      	movs	r3, #3
 80010c6:	4003      	ands	r3, r0
 80010c8:	00db      	lsls	r3, r3, #3
 80010ca:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010cc:	481f      	ldr	r0, [pc, #124]	; (800114c <__NVIC_SetPriority+0xd4>)
 80010ce:	1dfb      	adds	r3, r7, #7
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	b25b      	sxtb	r3, r3
 80010d4:	089b      	lsrs	r3, r3, #2
 80010d6:	430a      	orrs	r2, r1
 80010d8:	33c0      	adds	r3, #192	; 0xc0
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80010de:	e031      	b.n	8001144 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010e0:	4a1b      	ldr	r2, [pc, #108]	; (8001150 <__NVIC_SetPriority+0xd8>)
 80010e2:	1dfb      	adds	r3, r7, #7
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	0019      	movs	r1, r3
 80010e8:	230f      	movs	r3, #15
 80010ea:	400b      	ands	r3, r1
 80010ec:	3b08      	subs	r3, #8
 80010ee:	089b      	lsrs	r3, r3, #2
 80010f0:	3306      	adds	r3, #6
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	18d3      	adds	r3, r2, r3
 80010f6:	3304      	adds	r3, #4
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	1dfa      	adds	r2, r7, #7
 80010fc:	7812      	ldrb	r2, [r2, #0]
 80010fe:	0011      	movs	r1, r2
 8001100:	2203      	movs	r2, #3
 8001102:	400a      	ands	r2, r1
 8001104:	00d2      	lsls	r2, r2, #3
 8001106:	21ff      	movs	r1, #255	; 0xff
 8001108:	4091      	lsls	r1, r2
 800110a:	000a      	movs	r2, r1
 800110c:	43d2      	mvns	r2, r2
 800110e:	401a      	ands	r2, r3
 8001110:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	019b      	lsls	r3, r3, #6
 8001116:	22ff      	movs	r2, #255	; 0xff
 8001118:	401a      	ands	r2, r3
 800111a:	1dfb      	adds	r3, r7, #7
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	0018      	movs	r0, r3
 8001120:	2303      	movs	r3, #3
 8001122:	4003      	ands	r3, r0
 8001124:	00db      	lsls	r3, r3, #3
 8001126:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001128:	4809      	ldr	r0, [pc, #36]	; (8001150 <__NVIC_SetPriority+0xd8>)
 800112a:	1dfb      	adds	r3, r7, #7
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	001c      	movs	r4, r3
 8001130:	230f      	movs	r3, #15
 8001132:	4023      	ands	r3, r4
 8001134:	3b08      	subs	r3, #8
 8001136:	089b      	lsrs	r3, r3, #2
 8001138:	430a      	orrs	r2, r1
 800113a:	3306      	adds	r3, #6
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	18c3      	adds	r3, r0, r3
 8001140:	3304      	adds	r3, #4
 8001142:	601a      	str	r2, [r3, #0]
}
 8001144:	46c0      	nop			; (mov r8, r8)
 8001146:	46bd      	mov	sp, r7
 8001148:	b003      	add	sp, #12
 800114a:	bd90      	pop	{r4, r7, pc}
 800114c:	e000e100 	.word	0xe000e100
 8001150:	e000ed00 	.word	0xe000ed00

08001154 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	1e5a      	subs	r2, r3, #1
 8001160:	2380      	movs	r3, #128	; 0x80
 8001162:	045b      	lsls	r3, r3, #17
 8001164:	429a      	cmp	r2, r3
 8001166:	d301      	bcc.n	800116c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001168:	2301      	movs	r3, #1
 800116a:	e010      	b.n	800118e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800116c:	4b0a      	ldr	r3, [pc, #40]	; (8001198 <SysTick_Config+0x44>)
 800116e:	687a      	ldr	r2, [r7, #4]
 8001170:	3a01      	subs	r2, #1
 8001172:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001174:	2301      	movs	r3, #1
 8001176:	425b      	negs	r3, r3
 8001178:	2103      	movs	r1, #3
 800117a:	0018      	movs	r0, r3
 800117c:	f7ff ff7c 	bl	8001078 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001180:	4b05      	ldr	r3, [pc, #20]	; (8001198 <SysTick_Config+0x44>)
 8001182:	2200      	movs	r2, #0
 8001184:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001186:	4b04      	ldr	r3, [pc, #16]	; (8001198 <SysTick_Config+0x44>)
 8001188:	2207      	movs	r2, #7
 800118a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800118c:	2300      	movs	r3, #0
}
 800118e:	0018      	movs	r0, r3
 8001190:	46bd      	mov	sp, r7
 8001192:	b002      	add	sp, #8
 8001194:	bd80      	pop	{r7, pc}
 8001196:	46c0      	nop			; (mov r8, r8)
 8001198:	e000e010 	.word	0xe000e010

0800119c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60b9      	str	r1, [r7, #8]
 80011a4:	607a      	str	r2, [r7, #4]
 80011a6:	210f      	movs	r1, #15
 80011a8:	187b      	adds	r3, r7, r1
 80011aa:	1c02      	adds	r2, r0, #0
 80011ac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80011ae:	68ba      	ldr	r2, [r7, #8]
 80011b0:	187b      	adds	r3, r7, r1
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	b25b      	sxtb	r3, r3
 80011b6:	0011      	movs	r1, r2
 80011b8:	0018      	movs	r0, r3
 80011ba:	f7ff ff5d 	bl	8001078 <__NVIC_SetPriority>
}
 80011be:	46c0      	nop			; (mov r8, r8)
 80011c0:	46bd      	mov	sp, r7
 80011c2:	b004      	add	sp, #16
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b082      	sub	sp, #8
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	0018      	movs	r0, r3
 80011d2:	f7ff ffbf 	bl	8001154 <SysTick_Config>
 80011d6:	0003      	movs	r3, r0
}
 80011d8:	0018      	movs	r0, r3
 80011da:	46bd      	mov	sp, r7
 80011dc:	b002      	add	sp, #8
 80011de:	bd80      	pop	{r7, pc}

080011e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b086      	sub	sp, #24
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011ea:	2300      	movs	r3, #0
 80011ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011ee:	e14f      	b.n	8001490 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2101      	movs	r1, #1
 80011f6:	697a      	ldr	r2, [r7, #20]
 80011f8:	4091      	lsls	r1, r2
 80011fa:	000a      	movs	r2, r1
 80011fc:	4013      	ands	r3, r2
 80011fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d100      	bne.n	8001208 <HAL_GPIO_Init+0x28>
 8001206:	e140      	b.n	800148a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	2203      	movs	r2, #3
 800120e:	4013      	ands	r3, r2
 8001210:	2b01      	cmp	r3, #1
 8001212:	d005      	beq.n	8001220 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	2203      	movs	r2, #3
 800121a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800121c:	2b02      	cmp	r3, #2
 800121e:	d130      	bne.n	8001282 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	005b      	lsls	r3, r3, #1
 800122a:	2203      	movs	r2, #3
 800122c:	409a      	lsls	r2, r3
 800122e:	0013      	movs	r3, r2
 8001230:	43da      	mvns	r2, r3
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	4013      	ands	r3, r2
 8001236:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	68da      	ldr	r2, [r3, #12]
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	409a      	lsls	r2, r3
 8001242:	0013      	movs	r3, r2
 8001244:	693a      	ldr	r2, [r7, #16]
 8001246:	4313      	orrs	r3, r2
 8001248:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	693a      	ldr	r2, [r7, #16]
 800124e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001256:	2201      	movs	r2, #1
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	409a      	lsls	r2, r3
 800125c:	0013      	movs	r3, r2
 800125e:	43da      	mvns	r2, r3
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	4013      	ands	r3, r2
 8001264:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	091b      	lsrs	r3, r3, #4
 800126c:	2201      	movs	r2, #1
 800126e:	401a      	ands	r2, r3
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	409a      	lsls	r2, r3
 8001274:	0013      	movs	r3, r2
 8001276:	693a      	ldr	r2, [r7, #16]
 8001278:	4313      	orrs	r3, r2
 800127a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	693a      	ldr	r2, [r7, #16]
 8001280:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	2203      	movs	r2, #3
 8001288:	4013      	ands	r3, r2
 800128a:	2b03      	cmp	r3, #3
 800128c:	d017      	beq.n	80012be <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	68db      	ldr	r3, [r3, #12]
 8001292:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	2203      	movs	r2, #3
 800129a:	409a      	lsls	r2, r3
 800129c:	0013      	movs	r3, r2
 800129e:	43da      	mvns	r2, r3
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	4013      	ands	r3, r2
 80012a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	689a      	ldr	r2, [r3, #8]
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	005b      	lsls	r3, r3, #1
 80012ae:	409a      	lsls	r2, r3
 80012b0:	0013      	movs	r3, r2
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	693a      	ldr	r2, [r7, #16]
 80012bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	2203      	movs	r2, #3
 80012c4:	4013      	ands	r3, r2
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d123      	bne.n	8001312 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	08da      	lsrs	r2, r3, #3
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	3208      	adds	r2, #8
 80012d2:	0092      	lsls	r2, r2, #2
 80012d4:	58d3      	ldr	r3, [r2, r3]
 80012d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	2207      	movs	r2, #7
 80012dc:	4013      	ands	r3, r2
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	220f      	movs	r2, #15
 80012e2:	409a      	lsls	r2, r3
 80012e4:	0013      	movs	r3, r2
 80012e6:	43da      	mvns	r2, r3
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	4013      	ands	r3, r2
 80012ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	691a      	ldr	r2, [r3, #16]
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	2107      	movs	r1, #7
 80012f6:	400b      	ands	r3, r1
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	409a      	lsls	r2, r3
 80012fc:	0013      	movs	r3, r2
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	4313      	orrs	r3, r2
 8001302:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	08da      	lsrs	r2, r3, #3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	3208      	adds	r2, #8
 800130c:	0092      	lsls	r2, r2, #2
 800130e:	6939      	ldr	r1, [r7, #16]
 8001310:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	2203      	movs	r2, #3
 800131e:	409a      	lsls	r2, r3
 8001320:	0013      	movs	r3, r2
 8001322:	43da      	mvns	r2, r3
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	4013      	ands	r3, r2
 8001328:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	2203      	movs	r2, #3
 8001330:	401a      	ands	r2, r3
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	409a      	lsls	r2, r3
 8001338:	0013      	movs	r3, r2
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	4313      	orrs	r3, r2
 800133e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	693a      	ldr	r2, [r7, #16]
 8001344:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	685a      	ldr	r2, [r3, #4]
 800134a:	23c0      	movs	r3, #192	; 0xc0
 800134c:	029b      	lsls	r3, r3, #10
 800134e:	4013      	ands	r3, r2
 8001350:	d100      	bne.n	8001354 <HAL_GPIO_Init+0x174>
 8001352:	e09a      	b.n	800148a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001354:	4b54      	ldr	r3, [pc, #336]	; (80014a8 <HAL_GPIO_Init+0x2c8>)
 8001356:	699a      	ldr	r2, [r3, #24]
 8001358:	4b53      	ldr	r3, [pc, #332]	; (80014a8 <HAL_GPIO_Init+0x2c8>)
 800135a:	2101      	movs	r1, #1
 800135c:	430a      	orrs	r2, r1
 800135e:	619a      	str	r2, [r3, #24]
 8001360:	4b51      	ldr	r3, [pc, #324]	; (80014a8 <HAL_GPIO_Init+0x2c8>)
 8001362:	699b      	ldr	r3, [r3, #24]
 8001364:	2201      	movs	r2, #1
 8001366:	4013      	ands	r3, r2
 8001368:	60bb      	str	r3, [r7, #8]
 800136a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800136c:	4a4f      	ldr	r2, [pc, #316]	; (80014ac <HAL_GPIO_Init+0x2cc>)
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	089b      	lsrs	r3, r3, #2
 8001372:	3302      	adds	r3, #2
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	589b      	ldr	r3, [r3, r2]
 8001378:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	2203      	movs	r2, #3
 800137e:	4013      	ands	r3, r2
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	220f      	movs	r2, #15
 8001384:	409a      	lsls	r2, r3
 8001386:	0013      	movs	r3, r2
 8001388:	43da      	mvns	r2, r3
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	4013      	ands	r3, r2
 800138e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001390:	687a      	ldr	r2, [r7, #4]
 8001392:	2390      	movs	r3, #144	; 0x90
 8001394:	05db      	lsls	r3, r3, #23
 8001396:	429a      	cmp	r2, r3
 8001398:	d013      	beq.n	80013c2 <HAL_GPIO_Init+0x1e2>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a44      	ldr	r2, [pc, #272]	; (80014b0 <HAL_GPIO_Init+0x2d0>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d00d      	beq.n	80013be <HAL_GPIO_Init+0x1de>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a43      	ldr	r2, [pc, #268]	; (80014b4 <HAL_GPIO_Init+0x2d4>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d007      	beq.n	80013ba <HAL_GPIO_Init+0x1da>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a42      	ldr	r2, [pc, #264]	; (80014b8 <HAL_GPIO_Init+0x2d8>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d101      	bne.n	80013b6 <HAL_GPIO_Init+0x1d6>
 80013b2:	2303      	movs	r3, #3
 80013b4:	e006      	b.n	80013c4 <HAL_GPIO_Init+0x1e4>
 80013b6:	2305      	movs	r3, #5
 80013b8:	e004      	b.n	80013c4 <HAL_GPIO_Init+0x1e4>
 80013ba:	2302      	movs	r3, #2
 80013bc:	e002      	b.n	80013c4 <HAL_GPIO_Init+0x1e4>
 80013be:	2301      	movs	r3, #1
 80013c0:	e000      	b.n	80013c4 <HAL_GPIO_Init+0x1e4>
 80013c2:	2300      	movs	r3, #0
 80013c4:	697a      	ldr	r2, [r7, #20]
 80013c6:	2103      	movs	r1, #3
 80013c8:	400a      	ands	r2, r1
 80013ca:	0092      	lsls	r2, r2, #2
 80013cc:	4093      	lsls	r3, r2
 80013ce:	693a      	ldr	r2, [r7, #16]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80013d4:	4935      	ldr	r1, [pc, #212]	; (80014ac <HAL_GPIO_Init+0x2cc>)
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	089b      	lsrs	r3, r3, #2
 80013da:	3302      	adds	r3, #2
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013e2:	4b36      	ldr	r3, [pc, #216]	; (80014bc <HAL_GPIO_Init+0x2dc>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	43da      	mvns	r2, r3
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	4013      	ands	r3, r2
 80013f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685a      	ldr	r2, [r3, #4]
 80013f6:	2380      	movs	r3, #128	; 0x80
 80013f8:	025b      	lsls	r3, r3, #9
 80013fa:	4013      	ands	r3, r2
 80013fc:	d003      	beq.n	8001406 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	4313      	orrs	r3, r2
 8001404:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001406:	4b2d      	ldr	r3, [pc, #180]	; (80014bc <HAL_GPIO_Init+0x2dc>)
 8001408:	693a      	ldr	r2, [r7, #16]
 800140a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800140c:	4b2b      	ldr	r3, [pc, #172]	; (80014bc <HAL_GPIO_Init+0x2dc>)
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	43da      	mvns	r2, r3
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	4013      	ands	r3, r2
 800141a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685a      	ldr	r2, [r3, #4]
 8001420:	2380      	movs	r3, #128	; 0x80
 8001422:	029b      	lsls	r3, r3, #10
 8001424:	4013      	ands	r3, r2
 8001426:	d003      	beq.n	8001430 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001428:	693a      	ldr	r2, [r7, #16]
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	4313      	orrs	r3, r2
 800142e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001430:	4b22      	ldr	r3, [pc, #136]	; (80014bc <HAL_GPIO_Init+0x2dc>)
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001436:	4b21      	ldr	r3, [pc, #132]	; (80014bc <HAL_GPIO_Init+0x2dc>)
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	43da      	mvns	r2, r3
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	4013      	ands	r3, r2
 8001444:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685a      	ldr	r2, [r3, #4]
 800144a:	2380      	movs	r3, #128	; 0x80
 800144c:	035b      	lsls	r3, r3, #13
 800144e:	4013      	ands	r3, r2
 8001450:	d003      	beq.n	800145a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	4313      	orrs	r3, r2
 8001458:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800145a:	4b18      	ldr	r3, [pc, #96]	; (80014bc <HAL_GPIO_Init+0x2dc>)
 800145c:	693a      	ldr	r2, [r7, #16]
 800145e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001460:	4b16      	ldr	r3, [pc, #88]	; (80014bc <HAL_GPIO_Init+0x2dc>)
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	43da      	mvns	r2, r3
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	4013      	ands	r3, r2
 800146e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685a      	ldr	r2, [r3, #4]
 8001474:	2380      	movs	r3, #128	; 0x80
 8001476:	039b      	lsls	r3, r3, #14
 8001478:	4013      	ands	r3, r2
 800147a:	d003      	beq.n	8001484 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 800147c:	693a      	ldr	r2, [r7, #16]
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	4313      	orrs	r3, r2
 8001482:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001484:	4b0d      	ldr	r3, [pc, #52]	; (80014bc <HAL_GPIO_Init+0x2dc>)
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	3301      	adds	r3, #1
 800148e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	40da      	lsrs	r2, r3
 8001498:	1e13      	subs	r3, r2, #0
 800149a:	d000      	beq.n	800149e <HAL_GPIO_Init+0x2be>
 800149c:	e6a8      	b.n	80011f0 <HAL_GPIO_Init+0x10>
  } 
}
 800149e:	46c0      	nop			; (mov r8, r8)
 80014a0:	46c0      	nop			; (mov r8, r8)
 80014a2:	46bd      	mov	sp, r7
 80014a4:	b006      	add	sp, #24
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	40021000 	.word	0x40021000
 80014ac:	40010000 	.word	0x40010000
 80014b0:	48000400 	.word	0x48000400
 80014b4:	48000800 	.word	0x48000800
 80014b8:	48000c00 	.word	0x48000c00
 80014bc:	40010400 	.word	0x40010400

080014c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	0008      	movs	r0, r1
 80014ca:	0011      	movs	r1, r2
 80014cc:	1cbb      	adds	r3, r7, #2
 80014ce:	1c02      	adds	r2, r0, #0
 80014d0:	801a      	strh	r2, [r3, #0]
 80014d2:	1c7b      	adds	r3, r7, #1
 80014d4:	1c0a      	adds	r2, r1, #0
 80014d6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014d8:	1c7b      	adds	r3, r7, #1
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d004      	beq.n	80014ea <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014e0:	1cbb      	adds	r3, r7, #2
 80014e2:	881a      	ldrh	r2, [r3, #0]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80014e8:	e003      	b.n	80014f2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014ea:	1cbb      	adds	r3, r7, #2
 80014ec:	881a      	ldrh	r2, [r3, #0]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80014f2:	46c0      	nop			; (mov r8, r8)
 80014f4:	46bd      	mov	sp, r7
 80014f6:	b002      	add	sp, #8
 80014f8:	bd80      	pop	{r7, pc}
	...

080014fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d101      	bne.n	800150e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e082      	b.n	8001614 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2241      	movs	r2, #65	; 0x41
 8001512:	5c9b      	ldrb	r3, [r3, r2]
 8001514:	b2db      	uxtb	r3, r3
 8001516:	2b00      	cmp	r3, #0
 8001518:	d107      	bne.n	800152a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2240      	movs	r2, #64	; 0x40
 800151e:	2100      	movs	r1, #0
 8001520:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	0018      	movs	r0, r3
 8001526:	f7ff f9f5 	bl	8000914 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2241      	movs	r2, #65	; 0x41
 800152e:	2124      	movs	r1, #36	; 0x24
 8001530:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2101      	movs	r1, #1
 800153e:	438a      	bics	r2, r1
 8001540:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	685a      	ldr	r2, [r3, #4]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4934      	ldr	r1, [pc, #208]	; (800161c <HAL_I2C_Init+0x120>)
 800154c:	400a      	ands	r2, r1
 800154e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	689a      	ldr	r2, [r3, #8]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4931      	ldr	r1, [pc, #196]	; (8001620 <HAL_I2C_Init+0x124>)
 800155c:	400a      	ands	r2, r1
 800155e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	2b01      	cmp	r3, #1
 8001566:	d108      	bne.n	800157a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	689a      	ldr	r2, [r3, #8]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2180      	movs	r1, #128	; 0x80
 8001572:	0209      	lsls	r1, r1, #8
 8001574:	430a      	orrs	r2, r1
 8001576:	609a      	str	r2, [r3, #8]
 8001578:	e007      	b.n	800158a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	689a      	ldr	r2, [r3, #8]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	2184      	movs	r1, #132	; 0x84
 8001584:	0209      	lsls	r1, r1, #8
 8001586:	430a      	orrs	r2, r1
 8001588:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	68db      	ldr	r3, [r3, #12]
 800158e:	2b02      	cmp	r3, #2
 8001590:	d104      	bne.n	800159c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	2280      	movs	r2, #128	; 0x80
 8001598:	0112      	lsls	r2, r2, #4
 800159a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	685a      	ldr	r2, [r3, #4]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	491f      	ldr	r1, [pc, #124]	; (8001624 <HAL_I2C_Init+0x128>)
 80015a8:	430a      	orrs	r2, r1
 80015aa:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	68da      	ldr	r2, [r3, #12]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	491a      	ldr	r1, [pc, #104]	; (8001620 <HAL_I2C_Init+0x124>)
 80015b8:	400a      	ands	r2, r1
 80015ba:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	691a      	ldr	r2, [r3, #16]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	695b      	ldr	r3, [r3, #20]
 80015c4:	431a      	orrs	r2, r3
 80015c6:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	699b      	ldr	r3, [r3, #24]
 80015cc:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	430a      	orrs	r2, r1
 80015d4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	69d9      	ldr	r1, [r3, #28]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6a1a      	ldr	r2, [r3, #32]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	430a      	orrs	r2, r1
 80015e4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	2101      	movs	r1, #1
 80015f2:	430a      	orrs	r2, r1
 80015f4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2200      	movs	r2, #0
 80015fa:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2241      	movs	r2, #65	; 0x41
 8001600:	2120      	movs	r1, #32
 8001602:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2200      	movs	r2, #0
 8001608:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2242      	movs	r2, #66	; 0x42
 800160e:	2100      	movs	r1, #0
 8001610:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001612:	2300      	movs	r3, #0
}
 8001614:	0018      	movs	r0, r3
 8001616:	46bd      	mov	sp, r7
 8001618:	b002      	add	sp, #8
 800161a:	bd80      	pop	{r7, pc}
 800161c:	f0ffffff 	.word	0xf0ffffff
 8001620:	ffff7fff 	.word	0xffff7fff
 8001624:	02008000 	.word	0x02008000

08001628 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001628:	b590      	push	{r4, r7, lr}
 800162a:	b089      	sub	sp, #36	; 0x24
 800162c:	af02      	add	r7, sp, #8
 800162e:	60f8      	str	r0, [r7, #12]
 8001630:	0008      	movs	r0, r1
 8001632:	607a      	str	r2, [r7, #4]
 8001634:	0019      	movs	r1, r3
 8001636:	230a      	movs	r3, #10
 8001638:	18fb      	adds	r3, r7, r3
 800163a:	1c02      	adds	r2, r0, #0
 800163c:	801a      	strh	r2, [r3, #0]
 800163e:	2308      	movs	r3, #8
 8001640:	18fb      	adds	r3, r7, r3
 8001642:	1c0a      	adds	r2, r1, #0
 8001644:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	2241      	movs	r2, #65	; 0x41
 800164a:	5c9b      	ldrb	r3, [r3, r2]
 800164c:	b2db      	uxtb	r3, r3
 800164e:	2b20      	cmp	r3, #32
 8001650:	d000      	beq.n	8001654 <HAL_I2C_Master_Transmit+0x2c>
 8001652:	e0e7      	b.n	8001824 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	2240      	movs	r2, #64	; 0x40
 8001658:	5c9b      	ldrb	r3, [r3, r2]
 800165a:	2b01      	cmp	r3, #1
 800165c:	d101      	bne.n	8001662 <HAL_I2C_Master_Transmit+0x3a>
 800165e:	2302      	movs	r3, #2
 8001660:	e0e1      	b.n	8001826 <HAL_I2C_Master_Transmit+0x1fe>
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	2240      	movs	r2, #64	; 0x40
 8001666:	2101      	movs	r1, #1
 8001668:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800166a:	f7ff faa1 	bl	8000bb0 <HAL_GetTick>
 800166e:	0003      	movs	r3, r0
 8001670:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001672:	2380      	movs	r3, #128	; 0x80
 8001674:	0219      	lsls	r1, r3, #8
 8001676:	68f8      	ldr	r0, [r7, #12]
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	9300      	str	r3, [sp, #0]
 800167c:	2319      	movs	r3, #25
 800167e:	2201      	movs	r2, #1
 8001680:	f000 fa04 	bl	8001a8c <I2C_WaitOnFlagUntilTimeout>
 8001684:	1e03      	subs	r3, r0, #0
 8001686:	d001      	beq.n	800168c <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e0cc      	b.n	8001826 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	2241      	movs	r2, #65	; 0x41
 8001690:	2121      	movs	r1, #33	; 0x21
 8001692:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	2242      	movs	r2, #66	; 0x42
 8001698:	2110      	movs	r1, #16
 800169a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	2200      	movs	r2, #0
 80016a0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	687a      	ldr	r2, [r7, #4]
 80016a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	2208      	movs	r2, #8
 80016ac:	18ba      	adds	r2, r7, r2
 80016ae:	8812      	ldrh	r2, [r2, #0]
 80016b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	2200      	movs	r2, #0
 80016b6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016bc:	b29b      	uxth	r3, r3
 80016be:	2bff      	cmp	r3, #255	; 0xff
 80016c0:	d911      	bls.n	80016e6 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	22ff      	movs	r2, #255	; 0xff
 80016c6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016cc:	b2da      	uxtb	r2, r3
 80016ce:	2380      	movs	r3, #128	; 0x80
 80016d0:	045c      	lsls	r4, r3, #17
 80016d2:	230a      	movs	r3, #10
 80016d4:	18fb      	adds	r3, r7, r3
 80016d6:	8819      	ldrh	r1, [r3, #0]
 80016d8:	68f8      	ldr	r0, [r7, #12]
 80016da:	4b55      	ldr	r3, [pc, #340]	; (8001830 <HAL_I2C_Master_Transmit+0x208>)
 80016dc:	9300      	str	r3, [sp, #0]
 80016de:	0023      	movs	r3, r4
 80016e0:	f000 fb74 	bl	8001dcc <I2C_TransferConfig>
 80016e4:	e075      	b.n	80017d2 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016ea:	b29a      	uxth	r2, r3
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016f4:	b2da      	uxtb	r2, r3
 80016f6:	2380      	movs	r3, #128	; 0x80
 80016f8:	049c      	lsls	r4, r3, #18
 80016fa:	230a      	movs	r3, #10
 80016fc:	18fb      	adds	r3, r7, r3
 80016fe:	8819      	ldrh	r1, [r3, #0]
 8001700:	68f8      	ldr	r0, [r7, #12]
 8001702:	4b4b      	ldr	r3, [pc, #300]	; (8001830 <HAL_I2C_Master_Transmit+0x208>)
 8001704:	9300      	str	r3, [sp, #0]
 8001706:	0023      	movs	r3, r4
 8001708:	f000 fb60 	bl	8001dcc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800170c:	e061      	b.n	80017d2 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800170e:	697a      	ldr	r2, [r7, #20]
 8001710:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	0018      	movs	r0, r3
 8001716:	f000 f9f8 	bl	8001b0a <I2C_WaitOnTXISFlagUntilTimeout>
 800171a:	1e03      	subs	r3, r0, #0
 800171c:	d001      	beq.n	8001722 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e081      	b.n	8001826 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001726:	781a      	ldrb	r2, [r3, #0]
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001732:	1c5a      	adds	r2, r3, #1
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800173c:	b29b      	uxth	r3, r3
 800173e:	3b01      	subs	r3, #1
 8001740:	b29a      	uxth	r2, r3
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800174a:	3b01      	subs	r3, #1
 800174c:	b29a      	uxth	r2, r3
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001756:	b29b      	uxth	r3, r3
 8001758:	2b00      	cmp	r3, #0
 800175a:	d03a      	beq.n	80017d2 <HAL_I2C_Master_Transmit+0x1aa>
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001760:	2b00      	cmp	r3, #0
 8001762:	d136      	bne.n	80017d2 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001764:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001766:	68f8      	ldr	r0, [r7, #12]
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	9300      	str	r3, [sp, #0]
 800176c:	0013      	movs	r3, r2
 800176e:	2200      	movs	r2, #0
 8001770:	2180      	movs	r1, #128	; 0x80
 8001772:	f000 f98b 	bl	8001a8c <I2C_WaitOnFlagUntilTimeout>
 8001776:	1e03      	subs	r3, r0, #0
 8001778:	d001      	beq.n	800177e <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e053      	b.n	8001826 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001782:	b29b      	uxth	r3, r3
 8001784:	2bff      	cmp	r3, #255	; 0xff
 8001786:	d911      	bls.n	80017ac <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	22ff      	movs	r2, #255	; 0xff
 800178c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001792:	b2da      	uxtb	r2, r3
 8001794:	2380      	movs	r3, #128	; 0x80
 8001796:	045c      	lsls	r4, r3, #17
 8001798:	230a      	movs	r3, #10
 800179a:	18fb      	adds	r3, r7, r3
 800179c:	8819      	ldrh	r1, [r3, #0]
 800179e:	68f8      	ldr	r0, [r7, #12]
 80017a0:	2300      	movs	r3, #0
 80017a2:	9300      	str	r3, [sp, #0]
 80017a4:	0023      	movs	r3, r4
 80017a6:	f000 fb11 	bl	8001dcc <I2C_TransferConfig>
 80017aa:	e012      	b.n	80017d2 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017b0:	b29a      	uxth	r2, r3
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017ba:	b2da      	uxtb	r2, r3
 80017bc:	2380      	movs	r3, #128	; 0x80
 80017be:	049c      	lsls	r4, r3, #18
 80017c0:	230a      	movs	r3, #10
 80017c2:	18fb      	adds	r3, r7, r3
 80017c4:	8819      	ldrh	r1, [r3, #0]
 80017c6:	68f8      	ldr	r0, [r7, #12]
 80017c8:	2300      	movs	r3, #0
 80017ca:	9300      	str	r3, [sp, #0]
 80017cc:	0023      	movs	r3, r4
 80017ce:	f000 fafd 	bl	8001dcc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017d6:	b29b      	uxth	r3, r3
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d198      	bne.n	800170e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017dc:	697a      	ldr	r2, [r7, #20]
 80017de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	0018      	movs	r0, r3
 80017e4:	f000 f9d0 	bl	8001b88 <I2C_WaitOnSTOPFlagUntilTimeout>
 80017e8:	1e03      	subs	r3, r0, #0
 80017ea:	d001      	beq.n	80017f0 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e01a      	b.n	8001826 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2220      	movs	r2, #32
 80017f6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	685a      	ldr	r2, [r3, #4]
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	490c      	ldr	r1, [pc, #48]	; (8001834 <HAL_I2C_Master_Transmit+0x20c>)
 8001804:	400a      	ands	r2, r1
 8001806:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	2241      	movs	r2, #65	; 0x41
 800180c:	2120      	movs	r1, #32
 800180e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2242      	movs	r2, #66	; 0x42
 8001814:	2100      	movs	r1, #0
 8001816:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	2240      	movs	r2, #64	; 0x40
 800181c:	2100      	movs	r1, #0
 800181e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001820:	2300      	movs	r3, #0
 8001822:	e000      	b.n	8001826 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8001824:	2302      	movs	r3, #2
  }
}
 8001826:	0018      	movs	r0, r3
 8001828:	46bd      	mov	sp, r7
 800182a:	b007      	add	sp, #28
 800182c:	bd90      	pop	{r4, r7, pc}
 800182e:	46c0      	nop			; (mov r8, r8)
 8001830:	80002000 	.word	0x80002000
 8001834:	fe00e800 	.word	0xfe00e800

08001838 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001838:	b590      	push	{r4, r7, lr}
 800183a:	b089      	sub	sp, #36	; 0x24
 800183c:	af02      	add	r7, sp, #8
 800183e:	60f8      	str	r0, [r7, #12]
 8001840:	0008      	movs	r0, r1
 8001842:	607a      	str	r2, [r7, #4]
 8001844:	0019      	movs	r1, r3
 8001846:	230a      	movs	r3, #10
 8001848:	18fb      	adds	r3, r7, r3
 800184a:	1c02      	adds	r2, r0, #0
 800184c:	801a      	strh	r2, [r3, #0]
 800184e:	2308      	movs	r3, #8
 8001850:	18fb      	adds	r3, r7, r3
 8001852:	1c0a      	adds	r2, r1, #0
 8001854:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	2241      	movs	r2, #65	; 0x41
 800185a:	5c9b      	ldrb	r3, [r3, r2]
 800185c:	b2db      	uxtb	r3, r3
 800185e:	2b20      	cmp	r3, #32
 8001860:	d000      	beq.n	8001864 <HAL_I2C_Master_Receive+0x2c>
 8001862:	e0e8      	b.n	8001a36 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	2240      	movs	r2, #64	; 0x40
 8001868:	5c9b      	ldrb	r3, [r3, r2]
 800186a:	2b01      	cmp	r3, #1
 800186c:	d101      	bne.n	8001872 <HAL_I2C_Master_Receive+0x3a>
 800186e:	2302      	movs	r3, #2
 8001870:	e0e2      	b.n	8001a38 <HAL_I2C_Master_Receive+0x200>
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	2240      	movs	r2, #64	; 0x40
 8001876:	2101      	movs	r1, #1
 8001878:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800187a:	f7ff f999 	bl	8000bb0 <HAL_GetTick>
 800187e:	0003      	movs	r3, r0
 8001880:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001882:	2380      	movs	r3, #128	; 0x80
 8001884:	0219      	lsls	r1, r3, #8
 8001886:	68f8      	ldr	r0, [r7, #12]
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	9300      	str	r3, [sp, #0]
 800188c:	2319      	movs	r3, #25
 800188e:	2201      	movs	r2, #1
 8001890:	f000 f8fc 	bl	8001a8c <I2C_WaitOnFlagUntilTimeout>
 8001894:	1e03      	subs	r3, r0, #0
 8001896:	d001      	beq.n	800189c <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e0cd      	b.n	8001a38 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	2241      	movs	r2, #65	; 0x41
 80018a0:	2122      	movs	r1, #34	; 0x22
 80018a2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2242      	movs	r2, #66	; 0x42
 80018a8:	2110      	movs	r1, #16
 80018aa:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2200      	movs	r2, #0
 80018b0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	2208      	movs	r2, #8
 80018bc:	18ba      	adds	r2, r7, r2
 80018be:	8812      	ldrh	r2, [r2, #0]
 80018c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	2200      	movs	r2, #0
 80018c6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018cc:	b29b      	uxth	r3, r3
 80018ce:	2bff      	cmp	r3, #255	; 0xff
 80018d0:	d911      	bls.n	80018f6 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	22ff      	movs	r2, #255	; 0xff
 80018d6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018dc:	b2da      	uxtb	r2, r3
 80018de:	2380      	movs	r3, #128	; 0x80
 80018e0:	045c      	lsls	r4, r3, #17
 80018e2:	230a      	movs	r3, #10
 80018e4:	18fb      	adds	r3, r7, r3
 80018e6:	8819      	ldrh	r1, [r3, #0]
 80018e8:	68f8      	ldr	r0, [r7, #12]
 80018ea:	4b55      	ldr	r3, [pc, #340]	; (8001a40 <HAL_I2C_Master_Receive+0x208>)
 80018ec:	9300      	str	r3, [sp, #0]
 80018ee:	0023      	movs	r3, r4
 80018f0:	f000 fa6c 	bl	8001dcc <I2C_TransferConfig>
 80018f4:	e076      	b.n	80019e4 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018fa:	b29a      	uxth	r2, r3
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001904:	b2da      	uxtb	r2, r3
 8001906:	2380      	movs	r3, #128	; 0x80
 8001908:	049c      	lsls	r4, r3, #18
 800190a:	230a      	movs	r3, #10
 800190c:	18fb      	adds	r3, r7, r3
 800190e:	8819      	ldrh	r1, [r3, #0]
 8001910:	68f8      	ldr	r0, [r7, #12]
 8001912:	4b4b      	ldr	r3, [pc, #300]	; (8001a40 <HAL_I2C_Master_Receive+0x208>)
 8001914:	9300      	str	r3, [sp, #0]
 8001916:	0023      	movs	r3, r4
 8001918:	f000 fa58 	bl	8001dcc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800191c:	e062      	b.n	80019e4 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800191e:	697a      	ldr	r2, [r7, #20]
 8001920:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	0018      	movs	r0, r3
 8001926:	f000 f96b 	bl	8001c00 <I2C_WaitOnRXNEFlagUntilTimeout>
 800192a:	1e03      	subs	r3, r0, #0
 800192c:	d001      	beq.n	8001932 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e082      	b.n	8001a38 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800193c:	b2d2      	uxtb	r2, r2
 800193e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001944:	1c5a      	adds	r2, r3, #1
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800194e:	3b01      	subs	r3, #1
 8001950:	b29a      	uxth	r2, r3
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800195a:	b29b      	uxth	r3, r3
 800195c:	3b01      	subs	r3, #1
 800195e:	b29a      	uxth	r2, r3
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001968:	b29b      	uxth	r3, r3
 800196a:	2b00      	cmp	r3, #0
 800196c:	d03a      	beq.n	80019e4 <HAL_I2C_Master_Receive+0x1ac>
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001972:	2b00      	cmp	r3, #0
 8001974:	d136      	bne.n	80019e4 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001976:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001978:	68f8      	ldr	r0, [r7, #12]
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	9300      	str	r3, [sp, #0]
 800197e:	0013      	movs	r3, r2
 8001980:	2200      	movs	r2, #0
 8001982:	2180      	movs	r1, #128	; 0x80
 8001984:	f000 f882 	bl	8001a8c <I2C_WaitOnFlagUntilTimeout>
 8001988:	1e03      	subs	r3, r0, #0
 800198a:	d001      	beq.n	8001990 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e053      	b.n	8001a38 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001994:	b29b      	uxth	r3, r3
 8001996:	2bff      	cmp	r3, #255	; 0xff
 8001998:	d911      	bls.n	80019be <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	22ff      	movs	r2, #255	; 0xff
 800199e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019a4:	b2da      	uxtb	r2, r3
 80019a6:	2380      	movs	r3, #128	; 0x80
 80019a8:	045c      	lsls	r4, r3, #17
 80019aa:	230a      	movs	r3, #10
 80019ac:	18fb      	adds	r3, r7, r3
 80019ae:	8819      	ldrh	r1, [r3, #0]
 80019b0:	68f8      	ldr	r0, [r7, #12]
 80019b2:	2300      	movs	r3, #0
 80019b4:	9300      	str	r3, [sp, #0]
 80019b6:	0023      	movs	r3, r4
 80019b8:	f000 fa08 	bl	8001dcc <I2C_TransferConfig>
 80019bc:	e012      	b.n	80019e4 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019c2:	b29a      	uxth	r2, r3
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019cc:	b2da      	uxtb	r2, r3
 80019ce:	2380      	movs	r3, #128	; 0x80
 80019d0:	049c      	lsls	r4, r3, #18
 80019d2:	230a      	movs	r3, #10
 80019d4:	18fb      	adds	r3, r7, r3
 80019d6:	8819      	ldrh	r1, [r3, #0]
 80019d8:	68f8      	ldr	r0, [r7, #12]
 80019da:	2300      	movs	r3, #0
 80019dc:	9300      	str	r3, [sp, #0]
 80019de:	0023      	movs	r3, r4
 80019e0:	f000 f9f4 	bl	8001dcc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019e8:	b29b      	uxth	r3, r3
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d197      	bne.n	800191e <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019ee:	697a      	ldr	r2, [r7, #20]
 80019f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	0018      	movs	r0, r3
 80019f6:	f000 f8c7 	bl	8001b88 <I2C_WaitOnSTOPFlagUntilTimeout>
 80019fa:	1e03      	subs	r3, r0, #0
 80019fc:	d001      	beq.n	8001a02 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e01a      	b.n	8001a38 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	2220      	movs	r2, #32
 8001a08:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	685a      	ldr	r2, [r3, #4]
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	490b      	ldr	r1, [pc, #44]	; (8001a44 <HAL_I2C_Master_Receive+0x20c>)
 8001a16:	400a      	ands	r2, r1
 8001a18:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	2241      	movs	r2, #65	; 0x41
 8001a1e:	2120      	movs	r1, #32
 8001a20:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	2242      	movs	r2, #66	; 0x42
 8001a26:	2100      	movs	r1, #0
 8001a28:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2240      	movs	r2, #64	; 0x40
 8001a2e:	2100      	movs	r1, #0
 8001a30:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001a32:	2300      	movs	r3, #0
 8001a34:	e000      	b.n	8001a38 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8001a36:	2302      	movs	r3, #2
  }
}
 8001a38:	0018      	movs	r0, r3
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	b007      	add	sp, #28
 8001a3e:	bd90      	pop	{r4, r7, pc}
 8001a40:	80002400 	.word	0x80002400
 8001a44:	fe00e800 	.word	0xfe00e800

08001a48 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	699b      	ldr	r3, [r3, #24]
 8001a56:	2202      	movs	r2, #2
 8001a58:	4013      	ands	r3, r2
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d103      	bne.n	8001a66 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2200      	movs	r2, #0
 8001a64:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	699b      	ldr	r3, [r3, #24]
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	4013      	ands	r3, r2
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d007      	beq.n	8001a84 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	699a      	ldr	r2, [r3, #24]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2101      	movs	r1, #1
 8001a80:	430a      	orrs	r2, r1
 8001a82:	619a      	str	r2, [r3, #24]
  }
}
 8001a84:	46c0      	nop			; (mov r8, r8)
 8001a86:	46bd      	mov	sp, r7
 8001a88:	b002      	add	sp, #8
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	60b9      	str	r1, [r7, #8]
 8001a96:	603b      	str	r3, [r7, #0]
 8001a98:	1dfb      	adds	r3, r7, #7
 8001a9a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a9c:	e021      	b.n	8001ae2 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	d01e      	beq.n	8001ae2 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001aa4:	f7ff f884 	bl	8000bb0 <HAL_GetTick>
 8001aa8:	0002      	movs	r2, r0
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	683a      	ldr	r2, [r7, #0]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d302      	bcc.n	8001aba <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d113      	bne.n	8001ae2 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001abe:	2220      	movs	r2, #32
 8001ac0:	431a      	orrs	r2, r3
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	2241      	movs	r2, #65	; 0x41
 8001aca:	2120      	movs	r1, #32
 8001acc:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	2242      	movs	r2, #66	; 0x42
 8001ad2:	2100      	movs	r1, #0
 8001ad4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2240      	movs	r2, #64	; 0x40
 8001ada:	2100      	movs	r1, #0
 8001adc:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e00f      	b.n	8001b02 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	699b      	ldr	r3, [r3, #24]
 8001ae8:	68ba      	ldr	r2, [r7, #8]
 8001aea:	4013      	ands	r3, r2
 8001aec:	68ba      	ldr	r2, [r7, #8]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	425a      	negs	r2, r3
 8001af2:	4153      	adcs	r3, r2
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	001a      	movs	r2, r3
 8001af8:	1dfb      	adds	r3, r7, #7
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d0ce      	beq.n	8001a9e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	0018      	movs	r0, r3
 8001b04:	46bd      	mov	sp, r7
 8001b06:	b004      	add	sp, #16
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b084      	sub	sp, #16
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	60f8      	str	r0, [r7, #12]
 8001b12:	60b9      	str	r1, [r7, #8]
 8001b14:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001b16:	e02b      	b.n	8001b70 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	68b9      	ldr	r1, [r7, #8]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	0018      	movs	r0, r3
 8001b20:	f000 f8da 	bl	8001cd8 <I2C_IsAcknowledgeFailed>
 8001b24:	1e03      	subs	r3, r0, #0
 8001b26:	d001      	beq.n	8001b2c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e029      	b.n	8001b80 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	3301      	adds	r3, #1
 8001b30:	d01e      	beq.n	8001b70 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b32:	f7ff f83d 	bl	8000bb0 <HAL_GetTick>
 8001b36:	0002      	movs	r2, r0
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	68ba      	ldr	r2, [r7, #8]
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d302      	bcc.n	8001b48 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d113      	bne.n	8001b70 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4c:	2220      	movs	r2, #32
 8001b4e:	431a      	orrs	r2, r3
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2241      	movs	r2, #65	; 0x41
 8001b58:	2120      	movs	r1, #32
 8001b5a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	2242      	movs	r2, #66	; 0x42
 8001b60:	2100      	movs	r1, #0
 8001b62:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	2240      	movs	r2, #64	; 0x40
 8001b68:	2100      	movs	r1, #0
 8001b6a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e007      	b.n	8001b80 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	699b      	ldr	r3, [r3, #24]
 8001b76:	2202      	movs	r2, #2
 8001b78:	4013      	ands	r3, r2
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d1cc      	bne.n	8001b18 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001b7e:	2300      	movs	r3, #0
}
 8001b80:	0018      	movs	r0, r3
 8001b82:	46bd      	mov	sp, r7
 8001b84:	b004      	add	sp, #16
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	60f8      	str	r0, [r7, #12]
 8001b90:	60b9      	str	r1, [r7, #8]
 8001b92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b94:	e028      	b.n	8001be8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	68b9      	ldr	r1, [r7, #8]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	0018      	movs	r0, r3
 8001b9e:	f000 f89b 	bl	8001cd8 <I2C_IsAcknowledgeFailed>
 8001ba2:	1e03      	subs	r3, r0, #0
 8001ba4:	d001      	beq.n	8001baa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e026      	b.n	8001bf8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001baa:	f7ff f801 	bl	8000bb0 <HAL_GetTick>
 8001bae:	0002      	movs	r2, r0
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	68ba      	ldr	r2, [r7, #8]
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d302      	bcc.n	8001bc0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d113      	bne.n	8001be8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc4:	2220      	movs	r2, #32
 8001bc6:	431a      	orrs	r2, r3
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2241      	movs	r2, #65	; 0x41
 8001bd0:	2120      	movs	r1, #32
 8001bd2:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	2242      	movs	r2, #66	; 0x42
 8001bd8:	2100      	movs	r1, #0
 8001bda:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2240      	movs	r2, #64	; 0x40
 8001be0:	2100      	movs	r1, #0
 8001be2:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e007      	b.n	8001bf8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	699b      	ldr	r3, [r3, #24]
 8001bee:	2220      	movs	r2, #32
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	2b20      	cmp	r3, #32
 8001bf4:	d1cf      	bne.n	8001b96 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001bf6:	2300      	movs	r3, #0
}
 8001bf8:	0018      	movs	r0, r3
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	b004      	add	sp, #16
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	60f8      	str	r0, [r7, #12]
 8001c08:	60b9      	str	r1, [r7, #8]
 8001c0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001c0c:	e055      	b.n	8001cba <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	68b9      	ldr	r1, [r7, #8]
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	0018      	movs	r0, r3
 8001c16:	f000 f85f 	bl	8001cd8 <I2C_IsAcknowledgeFailed>
 8001c1a:	1e03      	subs	r3, r0, #0
 8001c1c:	d001      	beq.n	8001c22 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e053      	b.n	8001cca <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	699b      	ldr	r3, [r3, #24]
 8001c28:	2220      	movs	r2, #32
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	2b20      	cmp	r3, #32
 8001c2e:	d129      	bne.n	8001c84 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	699b      	ldr	r3, [r3, #24]
 8001c36:	2204      	movs	r2, #4
 8001c38:	4013      	ands	r3, r2
 8001c3a:	2b04      	cmp	r3, #4
 8001c3c:	d105      	bne.n	8001c4a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001c46:	2300      	movs	r3, #0
 8001c48:	e03f      	b.n	8001cca <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	2220      	movs	r2, #32
 8001c50:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	685a      	ldr	r2, [r3, #4]
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	491d      	ldr	r1, [pc, #116]	; (8001cd4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8001c5e:	400a      	ands	r2, r1
 8001c60:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2200      	movs	r2, #0
 8001c66:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2241      	movs	r2, #65	; 0x41
 8001c6c:	2120      	movs	r1, #32
 8001c6e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2242      	movs	r2, #66	; 0x42
 8001c74:	2100      	movs	r1, #0
 8001c76:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2240      	movs	r2, #64	; 0x40
 8001c7c:	2100      	movs	r1, #0
 8001c7e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e022      	b.n	8001cca <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c84:	f7fe ff94 	bl	8000bb0 <HAL_GetTick>
 8001c88:	0002      	movs	r2, r0
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	68ba      	ldr	r2, [r7, #8]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d302      	bcc.n	8001c9a <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d10f      	bne.n	8001cba <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9e:	2220      	movs	r2, #32
 8001ca0:	431a      	orrs	r2, r3
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2241      	movs	r2, #65	; 0x41
 8001caa:	2120      	movs	r1, #32
 8001cac:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2240      	movs	r2, #64	; 0x40
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e007      	b.n	8001cca <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	699b      	ldr	r3, [r3, #24]
 8001cc0:	2204      	movs	r2, #4
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	2b04      	cmp	r3, #4
 8001cc6:	d1a2      	bne.n	8001c0e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001cc8:	2300      	movs	r3, #0
}
 8001cca:	0018      	movs	r0, r3
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	b004      	add	sp, #16
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	46c0      	nop			; (mov r8, r8)
 8001cd4:	fe00e800 	.word	0xfe00e800

08001cd8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	60b9      	str	r1, [r7, #8]
 8001ce2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	699b      	ldr	r3, [r3, #24]
 8001cea:	2210      	movs	r2, #16
 8001cec:	4013      	ands	r3, r2
 8001cee:	2b10      	cmp	r3, #16
 8001cf0:	d164      	bne.n	8001dbc <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	685a      	ldr	r2, [r3, #4]
 8001cf8:	2380      	movs	r3, #128	; 0x80
 8001cfa:	049b      	lsls	r3, r3, #18
 8001cfc:	401a      	ands	r2, r3
 8001cfe:	2380      	movs	r3, #128	; 0x80
 8001d00:	049b      	lsls	r3, r3, #18
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d02b      	beq.n	8001d5e <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	685a      	ldr	r2, [r3, #4]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2180      	movs	r1, #128	; 0x80
 8001d12:	01c9      	lsls	r1, r1, #7
 8001d14:	430a      	orrs	r2, r1
 8001d16:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d18:	e021      	b.n	8001d5e <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	d01e      	beq.n	8001d5e <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d20:	f7fe ff46 	bl	8000bb0 <HAL_GetTick>
 8001d24:	0002      	movs	r2, r0
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	68ba      	ldr	r2, [r7, #8]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d302      	bcc.n	8001d36 <I2C_IsAcknowledgeFailed+0x5e>
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d113      	bne.n	8001d5e <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d3a:	2220      	movs	r2, #32
 8001d3c:	431a      	orrs	r2, r3
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2241      	movs	r2, #65	; 0x41
 8001d46:	2120      	movs	r1, #32
 8001d48:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2242      	movs	r2, #66	; 0x42
 8001d4e:	2100      	movs	r1, #0
 8001d50:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2240      	movs	r2, #64	; 0x40
 8001d56:	2100      	movs	r1, #0
 8001d58:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e02f      	b.n	8001dbe <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	699b      	ldr	r3, [r3, #24]
 8001d64:	2220      	movs	r2, #32
 8001d66:	4013      	ands	r3, r2
 8001d68:	2b20      	cmp	r3, #32
 8001d6a:	d1d6      	bne.n	8001d1a <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2210      	movs	r2, #16
 8001d72:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2220      	movs	r2, #32
 8001d7a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	0018      	movs	r0, r3
 8001d80:	f7ff fe62 	bl	8001a48 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	685a      	ldr	r2, [r3, #4]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	490e      	ldr	r1, [pc, #56]	; (8001dc8 <I2C_IsAcknowledgeFailed+0xf0>)
 8001d90:	400a      	ands	r2, r1
 8001d92:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d98:	2204      	movs	r2, #4
 8001d9a:	431a      	orrs	r2, r3
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2241      	movs	r2, #65	; 0x41
 8001da4:	2120      	movs	r1, #32
 8001da6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2242      	movs	r2, #66	; 0x42
 8001dac:	2100      	movs	r1, #0
 8001dae:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2240      	movs	r2, #64	; 0x40
 8001db4:	2100      	movs	r1, #0
 8001db6:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e000      	b.n	8001dbe <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8001dbc:	2300      	movs	r3, #0
}
 8001dbe:	0018      	movs	r0, r3
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	b004      	add	sp, #16
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	46c0      	nop			; (mov r8, r8)
 8001dc8:	fe00e800 	.word	0xfe00e800

08001dcc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001dcc:	b590      	push	{r4, r7, lr}
 8001dce:	b085      	sub	sp, #20
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	0008      	movs	r0, r1
 8001dd6:	0011      	movs	r1, r2
 8001dd8:	607b      	str	r3, [r7, #4]
 8001dda:	240a      	movs	r4, #10
 8001ddc:	193b      	adds	r3, r7, r4
 8001dde:	1c02      	adds	r2, r0, #0
 8001de0:	801a      	strh	r2, [r3, #0]
 8001de2:	2009      	movs	r0, #9
 8001de4:	183b      	adds	r3, r7, r0
 8001de6:	1c0a      	adds	r2, r1, #0
 8001de8:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	6a3a      	ldr	r2, [r7, #32]
 8001df2:	0d51      	lsrs	r1, r2, #21
 8001df4:	2280      	movs	r2, #128	; 0x80
 8001df6:	00d2      	lsls	r2, r2, #3
 8001df8:	400a      	ands	r2, r1
 8001dfa:	490e      	ldr	r1, [pc, #56]	; (8001e34 <I2C_TransferConfig+0x68>)
 8001dfc:	430a      	orrs	r2, r1
 8001dfe:	43d2      	mvns	r2, r2
 8001e00:	401a      	ands	r2, r3
 8001e02:	0011      	movs	r1, r2
 8001e04:	193b      	adds	r3, r7, r4
 8001e06:	881b      	ldrh	r3, [r3, #0]
 8001e08:	059b      	lsls	r3, r3, #22
 8001e0a:	0d9a      	lsrs	r2, r3, #22
 8001e0c:	183b      	adds	r3, r7, r0
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	0418      	lsls	r0, r3, #16
 8001e12:	23ff      	movs	r3, #255	; 0xff
 8001e14:	041b      	lsls	r3, r3, #16
 8001e16:	4003      	ands	r3, r0
 8001e18:	431a      	orrs	r2, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	431a      	orrs	r2, r3
 8001e1e:	6a3b      	ldr	r3, [r7, #32]
 8001e20:	431a      	orrs	r2, r3
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	430a      	orrs	r2, r1
 8001e28:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8001e2a:	46c0      	nop			; (mov r8, r8)
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	b005      	add	sp, #20
 8001e30:	bd90      	pop	{r4, r7, pc}
 8001e32:	46c0      	nop			; (mov r8, r8)
 8001e34:	03ff63ff 	.word	0x03ff63ff

08001e38 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2241      	movs	r2, #65	; 0x41
 8001e46:	5c9b      	ldrb	r3, [r3, r2]
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	2b20      	cmp	r3, #32
 8001e4c:	d138      	bne.n	8001ec0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2240      	movs	r2, #64	; 0x40
 8001e52:	5c9b      	ldrb	r3, [r3, r2]
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d101      	bne.n	8001e5c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001e58:	2302      	movs	r3, #2
 8001e5a:	e032      	b.n	8001ec2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2240      	movs	r2, #64	; 0x40
 8001e60:	2101      	movs	r1, #1
 8001e62:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2241      	movs	r2, #65	; 0x41
 8001e68:	2124      	movs	r1, #36	; 0x24
 8001e6a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	2101      	movs	r1, #1
 8001e78:	438a      	bics	r2, r1
 8001e7a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4911      	ldr	r1, [pc, #68]	; (8001ecc <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001e88:	400a      	ands	r2, r1
 8001e8a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	6819      	ldr	r1, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	683a      	ldr	r2, [r7, #0]
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	2101      	movs	r1, #1
 8001ea8:	430a      	orrs	r2, r1
 8001eaa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2241      	movs	r2, #65	; 0x41
 8001eb0:	2120      	movs	r1, #32
 8001eb2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2240      	movs	r2, #64	; 0x40
 8001eb8:	2100      	movs	r1, #0
 8001eba:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	e000      	b.n	8001ec2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001ec0:	2302      	movs	r3, #2
  }
}
 8001ec2:	0018      	movs	r0, r3
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	b002      	add	sp, #8
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	46c0      	nop			; (mov r8, r8)
 8001ecc:	ffffefff 	.word	0xffffefff

08001ed0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2241      	movs	r2, #65	; 0x41
 8001ede:	5c9b      	ldrb	r3, [r3, r2]
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	2b20      	cmp	r3, #32
 8001ee4:	d139      	bne.n	8001f5a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2240      	movs	r2, #64	; 0x40
 8001eea:	5c9b      	ldrb	r3, [r3, r2]
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d101      	bne.n	8001ef4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	e033      	b.n	8001f5c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2240      	movs	r2, #64	; 0x40
 8001ef8:	2101      	movs	r1, #1
 8001efa:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2241      	movs	r2, #65	; 0x41
 8001f00:	2124      	movs	r1, #36	; 0x24
 8001f02:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	2101      	movs	r1, #1
 8001f10:	438a      	bics	r2, r1
 8001f12:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	4a11      	ldr	r2, [pc, #68]	; (8001f64 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001f20:	4013      	ands	r3, r2
 8001f22:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	021b      	lsls	r3, r3, #8
 8001f28:	68fa      	ldr	r2, [r7, #12]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	68fa      	ldr	r2, [r7, #12]
 8001f34:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2101      	movs	r1, #1
 8001f42:	430a      	orrs	r2, r1
 8001f44:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2241      	movs	r2, #65	; 0x41
 8001f4a:	2120      	movs	r1, #32
 8001f4c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2240      	movs	r2, #64	; 0x40
 8001f52:	2100      	movs	r1, #0
 8001f54:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001f56:	2300      	movs	r3, #0
 8001f58:	e000      	b.n	8001f5c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001f5a:	2302      	movs	r3, #2
  }
}
 8001f5c:	0018      	movs	r0, r3
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	b004      	add	sp, #16
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	fffff0ff 	.word	0xfffff0ff

08001f68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b088      	sub	sp, #32
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d101      	bne.n	8001f7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e305      	b.n	8002586 <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	4013      	ands	r3, r2
 8001f82:	d100      	bne.n	8001f86 <HAL_RCC_OscConfig+0x1e>
 8001f84:	e08d      	b.n	80020a2 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001f86:	4bc5      	ldr	r3, [pc, #788]	; (800229c <HAL_RCC_OscConfig+0x334>)
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	220c      	movs	r2, #12
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	2b04      	cmp	r3, #4
 8001f90:	d00e      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f92:	4bc2      	ldr	r3, [pc, #776]	; (800229c <HAL_RCC_OscConfig+0x334>)
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	220c      	movs	r2, #12
 8001f98:	4013      	ands	r3, r2
 8001f9a:	2b08      	cmp	r3, #8
 8001f9c:	d116      	bne.n	8001fcc <HAL_RCC_OscConfig+0x64>
 8001f9e:	4bbf      	ldr	r3, [pc, #764]	; (800229c <HAL_RCC_OscConfig+0x334>)
 8001fa0:	685a      	ldr	r2, [r3, #4]
 8001fa2:	23c0      	movs	r3, #192	; 0xc0
 8001fa4:	025b      	lsls	r3, r3, #9
 8001fa6:	401a      	ands	r2, r3
 8001fa8:	2380      	movs	r3, #128	; 0x80
 8001faa:	025b      	lsls	r3, r3, #9
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d10d      	bne.n	8001fcc <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fb0:	4bba      	ldr	r3, [pc, #744]	; (800229c <HAL_RCC_OscConfig+0x334>)
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	2380      	movs	r3, #128	; 0x80
 8001fb6:	029b      	lsls	r3, r3, #10
 8001fb8:	4013      	ands	r3, r2
 8001fba:	d100      	bne.n	8001fbe <HAL_RCC_OscConfig+0x56>
 8001fbc:	e070      	b.n	80020a0 <HAL_RCC_OscConfig+0x138>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d000      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x60>
 8001fc6:	e06b      	b.n	80020a0 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e2dc      	b.n	8002586 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d107      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x7c>
 8001fd4:	4bb1      	ldr	r3, [pc, #708]	; (800229c <HAL_RCC_OscConfig+0x334>)
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	4bb0      	ldr	r3, [pc, #704]	; (800229c <HAL_RCC_OscConfig+0x334>)
 8001fda:	2180      	movs	r1, #128	; 0x80
 8001fdc:	0249      	lsls	r1, r1, #9
 8001fde:	430a      	orrs	r2, r1
 8001fe0:	601a      	str	r2, [r3, #0]
 8001fe2:	e02f      	b.n	8002044 <HAL_RCC_OscConfig+0xdc>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d10c      	bne.n	8002006 <HAL_RCC_OscConfig+0x9e>
 8001fec:	4bab      	ldr	r3, [pc, #684]	; (800229c <HAL_RCC_OscConfig+0x334>)
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	4baa      	ldr	r3, [pc, #680]	; (800229c <HAL_RCC_OscConfig+0x334>)
 8001ff2:	49ab      	ldr	r1, [pc, #684]	; (80022a0 <HAL_RCC_OscConfig+0x338>)
 8001ff4:	400a      	ands	r2, r1
 8001ff6:	601a      	str	r2, [r3, #0]
 8001ff8:	4ba8      	ldr	r3, [pc, #672]	; (800229c <HAL_RCC_OscConfig+0x334>)
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	4ba7      	ldr	r3, [pc, #668]	; (800229c <HAL_RCC_OscConfig+0x334>)
 8001ffe:	49a9      	ldr	r1, [pc, #676]	; (80022a4 <HAL_RCC_OscConfig+0x33c>)
 8002000:	400a      	ands	r2, r1
 8002002:	601a      	str	r2, [r3, #0]
 8002004:	e01e      	b.n	8002044 <HAL_RCC_OscConfig+0xdc>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	2b05      	cmp	r3, #5
 800200c:	d10e      	bne.n	800202c <HAL_RCC_OscConfig+0xc4>
 800200e:	4ba3      	ldr	r3, [pc, #652]	; (800229c <HAL_RCC_OscConfig+0x334>)
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	4ba2      	ldr	r3, [pc, #648]	; (800229c <HAL_RCC_OscConfig+0x334>)
 8002014:	2180      	movs	r1, #128	; 0x80
 8002016:	02c9      	lsls	r1, r1, #11
 8002018:	430a      	orrs	r2, r1
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	4b9f      	ldr	r3, [pc, #636]	; (800229c <HAL_RCC_OscConfig+0x334>)
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	4b9e      	ldr	r3, [pc, #632]	; (800229c <HAL_RCC_OscConfig+0x334>)
 8002022:	2180      	movs	r1, #128	; 0x80
 8002024:	0249      	lsls	r1, r1, #9
 8002026:	430a      	orrs	r2, r1
 8002028:	601a      	str	r2, [r3, #0]
 800202a:	e00b      	b.n	8002044 <HAL_RCC_OscConfig+0xdc>
 800202c:	4b9b      	ldr	r3, [pc, #620]	; (800229c <HAL_RCC_OscConfig+0x334>)
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	4b9a      	ldr	r3, [pc, #616]	; (800229c <HAL_RCC_OscConfig+0x334>)
 8002032:	499b      	ldr	r1, [pc, #620]	; (80022a0 <HAL_RCC_OscConfig+0x338>)
 8002034:	400a      	ands	r2, r1
 8002036:	601a      	str	r2, [r3, #0]
 8002038:	4b98      	ldr	r3, [pc, #608]	; (800229c <HAL_RCC_OscConfig+0x334>)
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	4b97      	ldr	r3, [pc, #604]	; (800229c <HAL_RCC_OscConfig+0x334>)
 800203e:	4999      	ldr	r1, [pc, #612]	; (80022a4 <HAL_RCC_OscConfig+0x33c>)
 8002040:	400a      	ands	r2, r1
 8002042:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d014      	beq.n	8002076 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800204c:	f7fe fdb0 	bl	8000bb0 <HAL_GetTick>
 8002050:	0003      	movs	r3, r0
 8002052:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002054:	e008      	b.n	8002068 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002056:	f7fe fdab 	bl	8000bb0 <HAL_GetTick>
 800205a:	0002      	movs	r2, r0
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	2b64      	cmp	r3, #100	; 0x64
 8002062:	d901      	bls.n	8002068 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	e28e      	b.n	8002586 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002068:	4b8c      	ldr	r3, [pc, #560]	; (800229c <HAL_RCC_OscConfig+0x334>)
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	2380      	movs	r3, #128	; 0x80
 800206e:	029b      	lsls	r3, r3, #10
 8002070:	4013      	ands	r3, r2
 8002072:	d0f0      	beq.n	8002056 <HAL_RCC_OscConfig+0xee>
 8002074:	e015      	b.n	80020a2 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002076:	f7fe fd9b 	bl	8000bb0 <HAL_GetTick>
 800207a:	0003      	movs	r3, r0
 800207c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800207e:	e008      	b.n	8002092 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002080:	f7fe fd96 	bl	8000bb0 <HAL_GetTick>
 8002084:	0002      	movs	r2, r0
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b64      	cmp	r3, #100	; 0x64
 800208c:	d901      	bls.n	8002092 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e279      	b.n	8002586 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002092:	4b82      	ldr	r3, [pc, #520]	; (800229c <HAL_RCC_OscConfig+0x334>)
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	2380      	movs	r3, #128	; 0x80
 8002098:	029b      	lsls	r3, r3, #10
 800209a:	4013      	ands	r3, r2
 800209c:	d1f0      	bne.n	8002080 <HAL_RCC_OscConfig+0x118>
 800209e:	e000      	b.n	80020a2 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020a0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2202      	movs	r2, #2
 80020a8:	4013      	ands	r3, r2
 80020aa:	d100      	bne.n	80020ae <HAL_RCC_OscConfig+0x146>
 80020ac:	e06c      	b.n	8002188 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80020ae:	4b7b      	ldr	r3, [pc, #492]	; (800229c <HAL_RCC_OscConfig+0x334>)
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	220c      	movs	r2, #12
 80020b4:	4013      	ands	r3, r2
 80020b6:	d00e      	beq.n	80020d6 <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80020b8:	4b78      	ldr	r3, [pc, #480]	; (800229c <HAL_RCC_OscConfig+0x334>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	220c      	movs	r2, #12
 80020be:	4013      	ands	r3, r2
 80020c0:	2b08      	cmp	r3, #8
 80020c2:	d11f      	bne.n	8002104 <HAL_RCC_OscConfig+0x19c>
 80020c4:	4b75      	ldr	r3, [pc, #468]	; (800229c <HAL_RCC_OscConfig+0x334>)
 80020c6:	685a      	ldr	r2, [r3, #4]
 80020c8:	23c0      	movs	r3, #192	; 0xc0
 80020ca:	025b      	lsls	r3, r3, #9
 80020cc:	401a      	ands	r2, r3
 80020ce:	2380      	movs	r3, #128	; 0x80
 80020d0:	021b      	lsls	r3, r3, #8
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d116      	bne.n	8002104 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020d6:	4b71      	ldr	r3, [pc, #452]	; (800229c <HAL_RCC_OscConfig+0x334>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2202      	movs	r2, #2
 80020dc:	4013      	ands	r3, r2
 80020de:	d005      	beq.n	80020ec <HAL_RCC_OscConfig+0x184>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d001      	beq.n	80020ec <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e24c      	b.n	8002586 <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020ec:	4b6b      	ldr	r3, [pc, #428]	; (800229c <HAL_RCC_OscConfig+0x334>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	22f8      	movs	r2, #248	; 0xf8
 80020f2:	4393      	bics	r3, r2
 80020f4:	0019      	movs	r1, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	691b      	ldr	r3, [r3, #16]
 80020fa:	00da      	lsls	r2, r3, #3
 80020fc:	4b67      	ldr	r3, [pc, #412]	; (800229c <HAL_RCC_OscConfig+0x334>)
 80020fe:	430a      	orrs	r2, r1
 8002100:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002102:	e041      	b.n	8002188 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d024      	beq.n	8002156 <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800210c:	4b63      	ldr	r3, [pc, #396]	; (800229c <HAL_RCC_OscConfig+0x334>)
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	4b62      	ldr	r3, [pc, #392]	; (800229c <HAL_RCC_OscConfig+0x334>)
 8002112:	2101      	movs	r1, #1
 8002114:	430a      	orrs	r2, r1
 8002116:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002118:	f7fe fd4a 	bl	8000bb0 <HAL_GetTick>
 800211c:	0003      	movs	r3, r0
 800211e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002120:	e008      	b.n	8002134 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002122:	f7fe fd45 	bl	8000bb0 <HAL_GetTick>
 8002126:	0002      	movs	r2, r0
 8002128:	69bb      	ldr	r3, [r7, #24]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	2b02      	cmp	r3, #2
 800212e:	d901      	bls.n	8002134 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002130:	2303      	movs	r3, #3
 8002132:	e228      	b.n	8002586 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002134:	4b59      	ldr	r3, [pc, #356]	; (800229c <HAL_RCC_OscConfig+0x334>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2202      	movs	r2, #2
 800213a:	4013      	ands	r3, r2
 800213c:	d0f1      	beq.n	8002122 <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800213e:	4b57      	ldr	r3, [pc, #348]	; (800229c <HAL_RCC_OscConfig+0x334>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	22f8      	movs	r2, #248	; 0xf8
 8002144:	4393      	bics	r3, r2
 8002146:	0019      	movs	r1, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	691b      	ldr	r3, [r3, #16]
 800214c:	00da      	lsls	r2, r3, #3
 800214e:	4b53      	ldr	r3, [pc, #332]	; (800229c <HAL_RCC_OscConfig+0x334>)
 8002150:	430a      	orrs	r2, r1
 8002152:	601a      	str	r2, [r3, #0]
 8002154:	e018      	b.n	8002188 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002156:	4b51      	ldr	r3, [pc, #324]	; (800229c <HAL_RCC_OscConfig+0x334>)
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	4b50      	ldr	r3, [pc, #320]	; (800229c <HAL_RCC_OscConfig+0x334>)
 800215c:	2101      	movs	r1, #1
 800215e:	438a      	bics	r2, r1
 8002160:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002162:	f7fe fd25 	bl	8000bb0 <HAL_GetTick>
 8002166:	0003      	movs	r3, r0
 8002168:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800216a:	e008      	b.n	800217e <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800216c:	f7fe fd20 	bl	8000bb0 <HAL_GetTick>
 8002170:	0002      	movs	r2, r0
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	2b02      	cmp	r3, #2
 8002178:	d901      	bls.n	800217e <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e203      	b.n	8002586 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800217e:	4b47      	ldr	r3, [pc, #284]	; (800229c <HAL_RCC_OscConfig+0x334>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	2202      	movs	r2, #2
 8002184:	4013      	ands	r3, r2
 8002186:	d1f1      	bne.n	800216c <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2208      	movs	r2, #8
 800218e:	4013      	ands	r3, r2
 8002190:	d036      	beq.n	8002200 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	69db      	ldr	r3, [r3, #28]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d019      	beq.n	80021ce <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800219a:	4b40      	ldr	r3, [pc, #256]	; (800229c <HAL_RCC_OscConfig+0x334>)
 800219c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800219e:	4b3f      	ldr	r3, [pc, #252]	; (800229c <HAL_RCC_OscConfig+0x334>)
 80021a0:	2101      	movs	r1, #1
 80021a2:	430a      	orrs	r2, r1
 80021a4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021a6:	f7fe fd03 	bl	8000bb0 <HAL_GetTick>
 80021aa:	0003      	movs	r3, r0
 80021ac:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ae:	e008      	b.n	80021c2 <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021b0:	f7fe fcfe 	bl	8000bb0 <HAL_GetTick>
 80021b4:	0002      	movs	r2, r0
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e1e1      	b.n	8002586 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021c2:	4b36      	ldr	r3, [pc, #216]	; (800229c <HAL_RCC_OscConfig+0x334>)
 80021c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c6:	2202      	movs	r2, #2
 80021c8:	4013      	ands	r3, r2
 80021ca:	d0f1      	beq.n	80021b0 <HAL_RCC_OscConfig+0x248>
 80021cc:	e018      	b.n	8002200 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021ce:	4b33      	ldr	r3, [pc, #204]	; (800229c <HAL_RCC_OscConfig+0x334>)
 80021d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021d2:	4b32      	ldr	r3, [pc, #200]	; (800229c <HAL_RCC_OscConfig+0x334>)
 80021d4:	2101      	movs	r1, #1
 80021d6:	438a      	bics	r2, r1
 80021d8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021da:	f7fe fce9 	bl	8000bb0 <HAL_GetTick>
 80021de:	0003      	movs	r3, r0
 80021e0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021e2:	e008      	b.n	80021f6 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021e4:	f7fe fce4 	bl	8000bb0 <HAL_GetTick>
 80021e8:	0002      	movs	r2, r0
 80021ea:	69bb      	ldr	r3, [r7, #24]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e1c7      	b.n	8002586 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021f6:	4b29      	ldr	r3, [pc, #164]	; (800229c <HAL_RCC_OscConfig+0x334>)
 80021f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fa:	2202      	movs	r2, #2
 80021fc:	4013      	ands	r3, r2
 80021fe:	d1f1      	bne.n	80021e4 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2204      	movs	r2, #4
 8002206:	4013      	ands	r3, r2
 8002208:	d100      	bne.n	800220c <HAL_RCC_OscConfig+0x2a4>
 800220a:	e0b5      	b.n	8002378 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 800220c:	201f      	movs	r0, #31
 800220e:	183b      	adds	r3, r7, r0
 8002210:	2200      	movs	r2, #0
 8002212:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002214:	4b21      	ldr	r3, [pc, #132]	; (800229c <HAL_RCC_OscConfig+0x334>)
 8002216:	69da      	ldr	r2, [r3, #28]
 8002218:	2380      	movs	r3, #128	; 0x80
 800221a:	055b      	lsls	r3, r3, #21
 800221c:	4013      	ands	r3, r2
 800221e:	d110      	bne.n	8002242 <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002220:	4b1e      	ldr	r3, [pc, #120]	; (800229c <HAL_RCC_OscConfig+0x334>)
 8002222:	69da      	ldr	r2, [r3, #28]
 8002224:	4b1d      	ldr	r3, [pc, #116]	; (800229c <HAL_RCC_OscConfig+0x334>)
 8002226:	2180      	movs	r1, #128	; 0x80
 8002228:	0549      	lsls	r1, r1, #21
 800222a:	430a      	orrs	r2, r1
 800222c:	61da      	str	r2, [r3, #28]
 800222e:	4b1b      	ldr	r3, [pc, #108]	; (800229c <HAL_RCC_OscConfig+0x334>)
 8002230:	69da      	ldr	r2, [r3, #28]
 8002232:	2380      	movs	r3, #128	; 0x80
 8002234:	055b      	lsls	r3, r3, #21
 8002236:	4013      	ands	r3, r2
 8002238:	60fb      	str	r3, [r7, #12]
 800223a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800223c:	183b      	adds	r3, r7, r0
 800223e:	2201      	movs	r2, #1
 8002240:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002242:	4b19      	ldr	r3, [pc, #100]	; (80022a8 <HAL_RCC_OscConfig+0x340>)
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	2380      	movs	r3, #128	; 0x80
 8002248:	005b      	lsls	r3, r3, #1
 800224a:	4013      	ands	r3, r2
 800224c:	d11a      	bne.n	8002284 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800224e:	4b16      	ldr	r3, [pc, #88]	; (80022a8 <HAL_RCC_OscConfig+0x340>)
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	4b15      	ldr	r3, [pc, #84]	; (80022a8 <HAL_RCC_OscConfig+0x340>)
 8002254:	2180      	movs	r1, #128	; 0x80
 8002256:	0049      	lsls	r1, r1, #1
 8002258:	430a      	orrs	r2, r1
 800225a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800225c:	f7fe fca8 	bl	8000bb0 <HAL_GetTick>
 8002260:	0003      	movs	r3, r0
 8002262:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002264:	e008      	b.n	8002278 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002266:	f7fe fca3 	bl	8000bb0 <HAL_GetTick>
 800226a:	0002      	movs	r2, r0
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	2b64      	cmp	r3, #100	; 0x64
 8002272:	d901      	bls.n	8002278 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e186      	b.n	8002586 <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002278:	4b0b      	ldr	r3, [pc, #44]	; (80022a8 <HAL_RCC_OscConfig+0x340>)
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	2380      	movs	r3, #128	; 0x80
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	4013      	ands	r3, r2
 8002282:	d0f0      	beq.n	8002266 <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	2b01      	cmp	r3, #1
 800228a:	d10f      	bne.n	80022ac <HAL_RCC_OscConfig+0x344>
 800228c:	4b03      	ldr	r3, [pc, #12]	; (800229c <HAL_RCC_OscConfig+0x334>)
 800228e:	6a1a      	ldr	r2, [r3, #32]
 8002290:	4b02      	ldr	r3, [pc, #8]	; (800229c <HAL_RCC_OscConfig+0x334>)
 8002292:	2101      	movs	r1, #1
 8002294:	430a      	orrs	r2, r1
 8002296:	621a      	str	r2, [r3, #32]
 8002298:	e036      	b.n	8002308 <HAL_RCC_OscConfig+0x3a0>
 800229a:	46c0      	nop			; (mov r8, r8)
 800229c:	40021000 	.word	0x40021000
 80022a0:	fffeffff 	.word	0xfffeffff
 80022a4:	fffbffff 	.word	0xfffbffff
 80022a8:	40007000 	.word	0x40007000
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d10c      	bne.n	80022ce <HAL_RCC_OscConfig+0x366>
 80022b4:	4bb6      	ldr	r3, [pc, #728]	; (8002590 <HAL_RCC_OscConfig+0x628>)
 80022b6:	6a1a      	ldr	r2, [r3, #32]
 80022b8:	4bb5      	ldr	r3, [pc, #724]	; (8002590 <HAL_RCC_OscConfig+0x628>)
 80022ba:	2101      	movs	r1, #1
 80022bc:	438a      	bics	r2, r1
 80022be:	621a      	str	r2, [r3, #32]
 80022c0:	4bb3      	ldr	r3, [pc, #716]	; (8002590 <HAL_RCC_OscConfig+0x628>)
 80022c2:	6a1a      	ldr	r2, [r3, #32]
 80022c4:	4bb2      	ldr	r3, [pc, #712]	; (8002590 <HAL_RCC_OscConfig+0x628>)
 80022c6:	2104      	movs	r1, #4
 80022c8:	438a      	bics	r2, r1
 80022ca:	621a      	str	r2, [r3, #32]
 80022cc:	e01c      	b.n	8002308 <HAL_RCC_OscConfig+0x3a0>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	2b05      	cmp	r3, #5
 80022d4:	d10c      	bne.n	80022f0 <HAL_RCC_OscConfig+0x388>
 80022d6:	4bae      	ldr	r3, [pc, #696]	; (8002590 <HAL_RCC_OscConfig+0x628>)
 80022d8:	6a1a      	ldr	r2, [r3, #32]
 80022da:	4bad      	ldr	r3, [pc, #692]	; (8002590 <HAL_RCC_OscConfig+0x628>)
 80022dc:	2104      	movs	r1, #4
 80022de:	430a      	orrs	r2, r1
 80022e0:	621a      	str	r2, [r3, #32]
 80022e2:	4bab      	ldr	r3, [pc, #684]	; (8002590 <HAL_RCC_OscConfig+0x628>)
 80022e4:	6a1a      	ldr	r2, [r3, #32]
 80022e6:	4baa      	ldr	r3, [pc, #680]	; (8002590 <HAL_RCC_OscConfig+0x628>)
 80022e8:	2101      	movs	r1, #1
 80022ea:	430a      	orrs	r2, r1
 80022ec:	621a      	str	r2, [r3, #32]
 80022ee:	e00b      	b.n	8002308 <HAL_RCC_OscConfig+0x3a0>
 80022f0:	4ba7      	ldr	r3, [pc, #668]	; (8002590 <HAL_RCC_OscConfig+0x628>)
 80022f2:	6a1a      	ldr	r2, [r3, #32]
 80022f4:	4ba6      	ldr	r3, [pc, #664]	; (8002590 <HAL_RCC_OscConfig+0x628>)
 80022f6:	2101      	movs	r1, #1
 80022f8:	438a      	bics	r2, r1
 80022fa:	621a      	str	r2, [r3, #32]
 80022fc:	4ba4      	ldr	r3, [pc, #656]	; (8002590 <HAL_RCC_OscConfig+0x628>)
 80022fe:	6a1a      	ldr	r2, [r3, #32]
 8002300:	4ba3      	ldr	r3, [pc, #652]	; (8002590 <HAL_RCC_OscConfig+0x628>)
 8002302:	2104      	movs	r1, #4
 8002304:	438a      	bics	r2, r1
 8002306:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d014      	beq.n	800233a <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002310:	f7fe fc4e 	bl	8000bb0 <HAL_GetTick>
 8002314:	0003      	movs	r3, r0
 8002316:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002318:	e009      	b.n	800232e <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800231a:	f7fe fc49 	bl	8000bb0 <HAL_GetTick>
 800231e:	0002      	movs	r2, r0
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	4a9b      	ldr	r2, [pc, #620]	; (8002594 <HAL_RCC_OscConfig+0x62c>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d901      	bls.n	800232e <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e12b      	b.n	8002586 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800232e:	4b98      	ldr	r3, [pc, #608]	; (8002590 <HAL_RCC_OscConfig+0x628>)
 8002330:	6a1b      	ldr	r3, [r3, #32]
 8002332:	2202      	movs	r2, #2
 8002334:	4013      	ands	r3, r2
 8002336:	d0f0      	beq.n	800231a <HAL_RCC_OscConfig+0x3b2>
 8002338:	e013      	b.n	8002362 <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800233a:	f7fe fc39 	bl	8000bb0 <HAL_GetTick>
 800233e:	0003      	movs	r3, r0
 8002340:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002342:	e009      	b.n	8002358 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002344:	f7fe fc34 	bl	8000bb0 <HAL_GetTick>
 8002348:	0002      	movs	r2, r0
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	4a91      	ldr	r2, [pc, #580]	; (8002594 <HAL_RCC_OscConfig+0x62c>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d901      	bls.n	8002358 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8002354:	2303      	movs	r3, #3
 8002356:	e116      	b.n	8002586 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002358:	4b8d      	ldr	r3, [pc, #564]	; (8002590 <HAL_RCC_OscConfig+0x628>)
 800235a:	6a1b      	ldr	r3, [r3, #32]
 800235c:	2202      	movs	r2, #2
 800235e:	4013      	ands	r3, r2
 8002360:	d1f0      	bne.n	8002344 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002362:	231f      	movs	r3, #31
 8002364:	18fb      	adds	r3, r7, r3
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	2b01      	cmp	r3, #1
 800236a:	d105      	bne.n	8002378 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800236c:	4b88      	ldr	r3, [pc, #544]	; (8002590 <HAL_RCC_OscConfig+0x628>)
 800236e:	69da      	ldr	r2, [r3, #28]
 8002370:	4b87      	ldr	r3, [pc, #540]	; (8002590 <HAL_RCC_OscConfig+0x628>)
 8002372:	4989      	ldr	r1, [pc, #548]	; (8002598 <HAL_RCC_OscConfig+0x630>)
 8002374:	400a      	ands	r2, r1
 8002376:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2210      	movs	r2, #16
 800237e:	4013      	ands	r3, r2
 8002380:	d063      	beq.n	800244a <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	695b      	ldr	r3, [r3, #20]
 8002386:	2b01      	cmp	r3, #1
 8002388:	d12a      	bne.n	80023e0 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800238a:	4b81      	ldr	r3, [pc, #516]	; (8002590 <HAL_RCC_OscConfig+0x628>)
 800238c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800238e:	4b80      	ldr	r3, [pc, #512]	; (8002590 <HAL_RCC_OscConfig+0x628>)
 8002390:	2104      	movs	r1, #4
 8002392:	430a      	orrs	r2, r1
 8002394:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002396:	4b7e      	ldr	r3, [pc, #504]	; (8002590 <HAL_RCC_OscConfig+0x628>)
 8002398:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800239a:	4b7d      	ldr	r3, [pc, #500]	; (8002590 <HAL_RCC_OscConfig+0x628>)
 800239c:	2101      	movs	r1, #1
 800239e:	430a      	orrs	r2, r1
 80023a0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023a2:	f7fe fc05 	bl	8000bb0 <HAL_GetTick>
 80023a6:	0003      	movs	r3, r0
 80023a8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80023aa:	e008      	b.n	80023be <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80023ac:	f7fe fc00 	bl	8000bb0 <HAL_GetTick>
 80023b0:	0002      	movs	r2, r0
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d901      	bls.n	80023be <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e0e3      	b.n	8002586 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80023be:	4b74      	ldr	r3, [pc, #464]	; (8002590 <HAL_RCC_OscConfig+0x628>)
 80023c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023c2:	2202      	movs	r2, #2
 80023c4:	4013      	ands	r3, r2
 80023c6:	d0f1      	beq.n	80023ac <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80023c8:	4b71      	ldr	r3, [pc, #452]	; (8002590 <HAL_RCC_OscConfig+0x628>)
 80023ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023cc:	22f8      	movs	r2, #248	; 0xf8
 80023ce:	4393      	bics	r3, r2
 80023d0:	0019      	movs	r1, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	699b      	ldr	r3, [r3, #24]
 80023d6:	00da      	lsls	r2, r3, #3
 80023d8:	4b6d      	ldr	r3, [pc, #436]	; (8002590 <HAL_RCC_OscConfig+0x628>)
 80023da:	430a      	orrs	r2, r1
 80023dc:	635a      	str	r2, [r3, #52]	; 0x34
 80023de:	e034      	b.n	800244a <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	695b      	ldr	r3, [r3, #20]
 80023e4:	3305      	adds	r3, #5
 80023e6:	d111      	bne.n	800240c <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80023e8:	4b69      	ldr	r3, [pc, #420]	; (8002590 <HAL_RCC_OscConfig+0x628>)
 80023ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023ec:	4b68      	ldr	r3, [pc, #416]	; (8002590 <HAL_RCC_OscConfig+0x628>)
 80023ee:	2104      	movs	r1, #4
 80023f0:	438a      	bics	r2, r1
 80023f2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80023f4:	4b66      	ldr	r3, [pc, #408]	; (8002590 <HAL_RCC_OscConfig+0x628>)
 80023f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023f8:	22f8      	movs	r2, #248	; 0xf8
 80023fa:	4393      	bics	r3, r2
 80023fc:	0019      	movs	r1, r3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	699b      	ldr	r3, [r3, #24]
 8002402:	00da      	lsls	r2, r3, #3
 8002404:	4b62      	ldr	r3, [pc, #392]	; (8002590 <HAL_RCC_OscConfig+0x628>)
 8002406:	430a      	orrs	r2, r1
 8002408:	635a      	str	r2, [r3, #52]	; 0x34
 800240a:	e01e      	b.n	800244a <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800240c:	4b60      	ldr	r3, [pc, #384]	; (8002590 <HAL_RCC_OscConfig+0x628>)
 800240e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002410:	4b5f      	ldr	r3, [pc, #380]	; (8002590 <HAL_RCC_OscConfig+0x628>)
 8002412:	2104      	movs	r1, #4
 8002414:	430a      	orrs	r2, r1
 8002416:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002418:	4b5d      	ldr	r3, [pc, #372]	; (8002590 <HAL_RCC_OscConfig+0x628>)
 800241a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800241c:	4b5c      	ldr	r3, [pc, #368]	; (8002590 <HAL_RCC_OscConfig+0x628>)
 800241e:	2101      	movs	r1, #1
 8002420:	438a      	bics	r2, r1
 8002422:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002424:	f7fe fbc4 	bl	8000bb0 <HAL_GetTick>
 8002428:	0003      	movs	r3, r0
 800242a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800242c:	e008      	b.n	8002440 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800242e:	f7fe fbbf 	bl	8000bb0 <HAL_GetTick>
 8002432:	0002      	movs	r2, r0
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	2b02      	cmp	r3, #2
 800243a:	d901      	bls.n	8002440 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e0a2      	b.n	8002586 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002440:	4b53      	ldr	r3, [pc, #332]	; (8002590 <HAL_RCC_OscConfig+0x628>)
 8002442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002444:	2202      	movs	r2, #2
 8002446:	4013      	ands	r3, r2
 8002448:	d1f1      	bne.n	800242e <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6a1b      	ldr	r3, [r3, #32]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d100      	bne.n	8002454 <HAL_RCC_OscConfig+0x4ec>
 8002452:	e097      	b.n	8002584 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002454:	4b4e      	ldr	r3, [pc, #312]	; (8002590 <HAL_RCC_OscConfig+0x628>)
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	220c      	movs	r2, #12
 800245a:	4013      	ands	r3, r2
 800245c:	2b08      	cmp	r3, #8
 800245e:	d100      	bne.n	8002462 <HAL_RCC_OscConfig+0x4fa>
 8002460:	e06b      	b.n	800253a <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6a1b      	ldr	r3, [r3, #32]
 8002466:	2b02      	cmp	r3, #2
 8002468:	d14c      	bne.n	8002504 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800246a:	4b49      	ldr	r3, [pc, #292]	; (8002590 <HAL_RCC_OscConfig+0x628>)
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	4b48      	ldr	r3, [pc, #288]	; (8002590 <HAL_RCC_OscConfig+0x628>)
 8002470:	494a      	ldr	r1, [pc, #296]	; (800259c <HAL_RCC_OscConfig+0x634>)
 8002472:	400a      	ands	r2, r1
 8002474:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002476:	f7fe fb9b 	bl	8000bb0 <HAL_GetTick>
 800247a:	0003      	movs	r3, r0
 800247c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800247e:	e008      	b.n	8002492 <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002480:	f7fe fb96 	bl	8000bb0 <HAL_GetTick>
 8002484:	0002      	movs	r2, r0
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	2b02      	cmp	r3, #2
 800248c:	d901      	bls.n	8002492 <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e079      	b.n	8002586 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002492:	4b3f      	ldr	r3, [pc, #252]	; (8002590 <HAL_RCC_OscConfig+0x628>)
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	2380      	movs	r3, #128	; 0x80
 8002498:	049b      	lsls	r3, r3, #18
 800249a:	4013      	ands	r3, r2
 800249c:	d1f0      	bne.n	8002480 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800249e:	4b3c      	ldr	r3, [pc, #240]	; (8002590 <HAL_RCC_OscConfig+0x628>)
 80024a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a2:	220f      	movs	r2, #15
 80024a4:	4393      	bics	r3, r2
 80024a6:	0019      	movs	r1, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024ac:	4b38      	ldr	r3, [pc, #224]	; (8002590 <HAL_RCC_OscConfig+0x628>)
 80024ae:	430a      	orrs	r2, r1
 80024b0:	62da      	str	r2, [r3, #44]	; 0x2c
 80024b2:	4b37      	ldr	r3, [pc, #220]	; (8002590 <HAL_RCC_OscConfig+0x628>)
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	4a3a      	ldr	r2, [pc, #232]	; (80025a0 <HAL_RCC_OscConfig+0x638>)
 80024b8:	4013      	ands	r3, r2
 80024ba:	0019      	movs	r1, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c4:	431a      	orrs	r2, r3
 80024c6:	4b32      	ldr	r3, [pc, #200]	; (8002590 <HAL_RCC_OscConfig+0x628>)
 80024c8:	430a      	orrs	r2, r1
 80024ca:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024cc:	4b30      	ldr	r3, [pc, #192]	; (8002590 <HAL_RCC_OscConfig+0x628>)
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	4b2f      	ldr	r3, [pc, #188]	; (8002590 <HAL_RCC_OscConfig+0x628>)
 80024d2:	2180      	movs	r1, #128	; 0x80
 80024d4:	0449      	lsls	r1, r1, #17
 80024d6:	430a      	orrs	r2, r1
 80024d8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024da:	f7fe fb69 	bl	8000bb0 <HAL_GetTick>
 80024de:	0003      	movs	r3, r0
 80024e0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024e2:	e008      	b.n	80024f6 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024e4:	f7fe fb64 	bl	8000bb0 <HAL_GetTick>
 80024e8:	0002      	movs	r2, r0
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e047      	b.n	8002586 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024f6:	4b26      	ldr	r3, [pc, #152]	; (8002590 <HAL_RCC_OscConfig+0x628>)
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	2380      	movs	r3, #128	; 0x80
 80024fc:	049b      	lsls	r3, r3, #18
 80024fe:	4013      	ands	r3, r2
 8002500:	d0f0      	beq.n	80024e4 <HAL_RCC_OscConfig+0x57c>
 8002502:	e03f      	b.n	8002584 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002504:	4b22      	ldr	r3, [pc, #136]	; (8002590 <HAL_RCC_OscConfig+0x628>)
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	4b21      	ldr	r3, [pc, #132]	; (8002590 <HAL_RCC_OscConfig+0x628>)
 800250a:	4924      	ldr	r1, [pc, #144]	; (800259c <HAL_RCC_OscConfig+0x634>)
 800250c:	400a      	ands	r2, r1
 800250e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002510:	f7fe fb4e 	bl	8000bb0 <HAL_GetTick>
 8002514:	0003      	movs	r3, r0
 8002516:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002518:	e008      	b.n	800252c <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800251a:	f7fe fb49 	bl	8000bb0 <HAL_GetTick>
 800251e:	0002      	movs	r2, r0
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	2b02      	cmp	r3, #2
 8002526:	d901      	bls.n	800252c <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8002528:	2303      	movs	r3, #3
 800252a:	e02c      	b.n	8002586 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800252c:	4b18      	ldr	r3, [pc, #96]	; (8002590 <HAL_RCC_OscConfig+0x628>)
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	2380      	movs	r3, #128	; 0x80
 8002532:	049b      	lsls	r3, r3, #18
 8002534:	4013      	ands	r3, r2
 8002536:	d1f0      	bne.n	800251a <HAL_RCC_OscConfig+0x5b2>
 8002538:	e024      	b.n	8002584 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6a1b      	ldr	r3, [r3, #32]
 800253e:	2b01      	cmp	r3, #1
 8002540:	d101      	bne.n	8002546 <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e01f      	b.n	8002586 <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002546:	4b12      	ldr	r3, [pc, #72]	; (8002590 <HAL_RCC_OscConfig+0x628>)
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800254c:	4b10      	ldr	r3, [pc, #64]	; (8002590 <HAL_RCC_OscConfig+0x628>)
 800254e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002550:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002552:	697a      	ldr	r2, [r7, #20]
 8002554:	23c0      	movs	r3, #192	; 0xc0
 8002556:	025b      	lsls	r3, r3, #9
 8002558:	401a      	ands	r2, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255e:	429a      	cmp	r2, r3
 8002560:	d10e      	bne.n	8002580 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	220f      	movs	r2, #15
 8002566:	401a      	ands	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800256c:	429a      	cmp	r2, r3
 800256e:	d107      	bne.n	8002580 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002570:	697a      	ldr	r2, [r7, #20]
 8002572:	23f0      	movs	r3, #240	; 0xf0
 8002574:	039b      	lsls	r3, r3, #14
 8002576:	401a      	ands	r2, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800257c:	429a      	cmp	r2, r3
 800257e:	d001      	beq.n	8002584 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e000      	b.n	8002586 <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8002584:	2300      	movs	r3, #0
}
 8002586:	0018      	movs	r0, r3
 8002588:	46bd      	mov	sp, r7
 800258a:	b008      	add	sp, #32
 800258c:	bd80      	pop	{r7, pc}
 800258e:	46c0      	nop			; (mov r8, r8)
 8002590:	40021000 	.word	0x40021000
 8002594:	00001388 	.word	0x00001388
 8002598:	efffffff 	.word	0xefffffff
 800259c:	feffffff 	.word	0xfeffffff
 80025a0:	ffc27fff 	.word	0xffc27fff

080025a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d101      	bne.n	80025b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e0b3      	b.n	8002720 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025b8:	4b5b      	ldr	r3, [pc, #364]	; (8002728 <HAL_RCC_ClockConfig+0x184>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2201      	movs	r2, #1
 80025be:	4013      	ands	r3, r2
 80025c0:	683a      	ldr	r2, [r7, #0]
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d911      	bls.n	80025ea <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025c6:	4b58      	ldr	r3, [pc, #352]	; (8002728 <HAL_RCC_ClockConfig+0x184>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	2201      	movs	r2, #1
 80025cc:	4393      	bics	r3, r2
 80025ce:	0019      	movs	r1, r3
 80025d0:	4b55      	ldr	r3, [pc, #340]	; (8002728 <HAL_RCC_ClockConfig+0x184>)
 80025d2:	683a      	ldr	r2, [r7, #0]
 80025d4:	430a      	orrs	r2, r1
 80025d6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025d8:	4b53      	ldr	r3, [pc, #332]	; (8002728 <HAL_RCC_ClockConfig+0x184>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2201      	movs	r2, #1
 80025de:	4013      	ands	r3, r2
 80025e0:	683a      	ldr	r2, [r7, #0]
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d001      	beq.n	80025ea <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e09a      	b.n	8002720 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2202      	movs	r2, #2
 80025f0:	4013      	ands	r3, r2
 80025f2:	d015      	beq.n	8002620 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2204      	movs	r2, #4
 80025fa:	4013      	ands	r3, r2
 80025fc:	d006      	beq.n	800260c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80025fe:	4b4b      	ldr	r3, [pc, #300]	; (800272c <HAL_RCC_ClockConfig+0x188>)
 8002600:	685a      	ldr	r2, [r3, #4]
 8002602:	4b4a      	ldr	r3, [pc, #296]	; (800272c <HAL_RCC_ClockConfig+0x188>)
 8002604:	21e0      	movs	r1, #224	; 0xe0
 8002606:	00c9      	lsls	r1, r1, #3
 8002608:	430a      	orrs	r2, r1
 800260a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800260c:	4b47      	ldr	r3, [pc, #284]	; (800272c <HAL_RCC_ClockConfig+0x188>)
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	22f0      	movs	r2, #240	; 0xf0
 8002612:	4393      	bics	r3, r2
 8002614:	0019      	movs	r1, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	689a      	ldr	r2, [r3, #8]
 800261a:	4b44      	ldr	r3, [pc, #272]	; (800272c <HAL_RCC_ClockConfig+0x188>)
 800261c:	430a      	orrs	r2, r1
 800261e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	2201      	movs	r2, #1
 8002626:	4013      	ands	r3, r2
 8002628:	d040      	beq.n	80026ac <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	2b01      	cmp	r3, #1
 8002630:	d107      	bne.n	8002642 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002632:	4b3e      	ldr	r3, [pc, #248]	; (800272c <HAL_RCC_ClockConfig+0x188>)
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	2380      	movs	r3, #128	; 0x80
 8002638:	029b      	lsls	r3, r3, #10
 800263a:	4013      	ands	r3, r2
 800263c:	d114      	bne.n	8002668 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e06e      	b.n	8002720 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	2b02      	cmp	r3, #2
 8002648:	d107      	bne.n	800265a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800264a:	4b38      	ldr	r3, [pc, #224]	; (800272c <HAL_RCC_ClockConfig+0x188>)
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	2380      	movs	r3, #128	; 0x80
 8002650:	049b      	lsls	r3, r3, #18
 8002652:	4013      	ands	r3, r2
 8002654:	d108      	bne.n	8002668 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e062      	b.n	8002720 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800265a:	4b34      	ldr	r3, [pc, #208]	; (800272c <HAL_RCC_ClockConfig+0x188>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	2202      	movs	r2, #2
 8002660:	4013      	ands	r3, r2
 8002662:	d101      	bne.n	8002668 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e05b      	b.n	8002720 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002668:	4b30      	ldr	r3, [pc, #192]	; (800272c <HAL_RCC_ClockConfig+0x188>)
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	2203      	movs	r2, #3
 800266e:	4393      	bics	r3, r2
 8002670:	0019      	movs	r1, r3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685a      	ldr	r2, [r3, #4]
 8002676:	4b2d      	ldr	r3, [pc, #180]	; (800272c <HAL_RCC_ClockConfig+0x188>)
 8002678:	430a      	orrs	r2, r1
 800267a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800267c:	f7fe fa98 	bl	8000bb0 <HAL_GetTick>
 8002680:	0003      	movs	r3, r0
 8002682:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002684:	e009      	b.n	800269a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002686:	f7fe fa93 	bl	8000bb0 <HAL_GetTick>
 800268a:	0002      	movs	r2, r0
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	4a27      	ldr	r2, [pc, #156]	; (8002730 <HAL_RCC_ClockConfig+0x18c>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d901      	bls.n	800269a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e042      	b.n	8002720 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800269a:	4b24      	ldr	r3, [pc, #144]	; (800272c <HAL_RCC_ClockConfig+0x188>)
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	220c      	movs	r2, #12
 80026a0:	401a      	ands	r2, r3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d1ec      	bne.n	8002686 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026ac:	4b1e      	ldr	r3, [pc, #120]	; (8002728 <HAL_RCC_ClockConfig+0x184>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	2201      	movs	r2, #1
 80026b2:	4013      	ands	r3, r2
 80026b4:	683a      	ldr	r2, [r7, #0]
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d211      	bcs.n	80026de <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ba:	4b1b      	ldr	r3, [pc, #108]	; (8002728 <HAL_RCC_ClockConfig+0x184>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2201      	movs	r2, #1
 80026c0:	4393      	bics	r3, r2
 80026c2:	0019      	movs	r1, r3
 80026c4:	4b18      	ldr	r3, [pc, #96]	; (8002728 <HAL_RCC_ClockConfig+0x184>)
 80026c6:	683a      	ldr	r2, [r7, #0]
 80026c8:	430a      	orrs	r2, r1
 80026ca:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026cc:	4b16      	ldr	r3, [pc, #88]	; (8002728 <HAL_RCC_ClockConfig+0x184>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2201      	movs	r2, #1
 80026d2:	4013      	ands	r3, r2
 80026d4:	683a      	ldr	r2, [r7, #0]
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d001      	beq.n	80026de <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e020      	b.n	8002720 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2204      	movs	r2, #4
 80026e4:	4013      	ands	r3, r2
 80026e6:	d009      	beq.n	80026fc <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80026e8:	4b10      	ldr	r3, [pc, #64]	; (800272c <HAL_RCC_ClockConfig+0x188>)
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	4a11      	ldr	r2, [pc, #68]	; (8002734 <HAL_RCC_ClockConfig+0x190>)
 80026ee:	4013      	ands	r3, r2
 80026f0:	0019      	movs	r1, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	68da      	ldr	r2, [r3, #12]
 80026f6:	4b0d      	ldr	r3, [pc, #52]	; (800272c <HAL_RCC_ClockConfig+0x188>)
 80026f8:	430a      	orrs	r2, r1
 80026fa:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80026fc:	f000 f820 	bl	8002740 <HAL_RCC_GetSysClockFreq>
 8002700:	0001      	movs	r1, r0
 8002702:	4b0a      	ldr	r3, [pc, #40]	; (800272c <HAL_RCC_ClockConfig+0x188>)
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	091b      	lsrs	r3, r3, #4
 8002708:	220f      	movs	r2, #15
 800270a:	4013      	ands	r3, r2
 800270c:	4a0a      	ldr	r2, [pc, #40]	; (8002738 <HAL_RCC_ClockConfig+0x194>)
 800270e:	5cd3      	ldrb	r3, [r2, r3]
 8002710:	000a      	movs	r2, r1
 8002712:	40da      	lsrs	r2, r3
 8002714:	4b09      	ldr	r3, [pc, #36]	; (800273c <HAL_RCC_ClockConfig+0x198>)
 8002716:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002718:	2003      	movs	r0, #3
 800271a:	f7fe fa03 	bl	8000b24 <HAL_InitTick>
  
  return HAL_OK;
 800271e:	2300      	movs	r3, #0
}
 8002720:	0018      	movs	r0, r3
 8002722:	46bd      	mov	sp, r7
 8002724:	b004      	add	sp, #16
 8002726:	bd80      	pop	{r7, pc}
 8002728:	40022000 	.word	0x40022000
 800272c:	40021000 	.word	0x40021000
 8002730:	00001388 	.word	0x00001388
 8002734:	fffff8ff 	.word	0xfffff8ff
 8002738:	08003804 	.word	0x08003804
 800273c:	20000000 	.word	0x20000000

08002740 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002740:	b590      	push	{r4, r7, lr}
 8002742:	b08f      	sub	sp, #60	; 0x3c
 8002744:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002746:	2314      	movs	r3, #20
 8002748:	18fb      	adds	r3, r7, r3
 800274a:	4a2c      	ldr	r2, [pc, #176]	; (80027fc <HAL_RCC_GetSysClockFreq+0xbc>)
 800274c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800274e:	c313      	stmia	r3!, {r0, r1, r4}
 8002750:	6812      	ldr	r2, [r2, #0]
 8002752:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002754:	1d3b      	adds	r3, r7, #4
 8002756:	4a2a      	ldr	r2, [pc, #168]	; (8002800 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002758:	ca13      	ldmia	r2!, {r0, r1, r4}
 800275a:	c313      	stmia	r3!, {r0, r1, r4}
 800275c:	6812      	ldr	r2, [r2, #0]
 800275e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002760:	2300      	movs	r3, #0
 8002762:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002764:	2300      	movs	r3, #0
 8002766:	62bb      	str	r3, [r7, #40]	; 0x28
 8002768:	2300      	movs	r3, #0
 800276a:	637b      	str	r3, [r7, #52]	; 0x34
 800276c:	2300      	movs	r3, #0
 800276e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002770:	2300      	movs	r3, #0
 8002772:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002774:	4b23      	ldr	r3, [pc, #140]	; (8002804 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800277a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800277c:	220c      	movs	r2, #12
 800277e:	4013      	ands	r3, r2
 8002780:	2b04      	cmp	r3, #4
 8002782:	d002      	beq.n	800278a <HAL_RCC_GetSysClockFreq+0x4a>
 8002784:	2b08      	cmp	r3, #8
 8002786:	d003      	beq.n	8002790 <HAL_RCC_GetSysClockFreq+0x50>
 8002788:	e02f      	b.n	80027ea <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800278a:	4b1f      	ldr	r3, [pc, #124]	; (8002808 <HAL_RCC_GetSysClockFreq+0xc8>)
 800278c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800278e:	e02f      	b.n	80027f0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002792:	0c9b      	lsrs	r3, r3, #18
 8002794:	220f      	movs	r2, #15
 8002796:	4013      	ands	r3, r2
 8002798:	2214      	movs	r2, #20
 800279a:	18ba      	adds	r2, r7, r2
 800279c:	5cd3      	ldrb	r3, [r2, r3]
 800279e:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80027a0:	4b18      	ldr	r3, [pc, #96]	; (8002804 <HAL_RCC_GetSysClockFreq+0xc4>)
 80027a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a4:	220f      	movs	r2, #15
 80027a6:	4013      	ands	r3, r2
 80027a8:	1d3a      	adds	r2, r7, #4
 80027aa:	5cd3      	ldrb	r3, [r2, r3]
 80027ac:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80027ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027b0:	23c0      	movs	r3, #192	; 0xc0
 80027b2:	025b      	lsls	r3, r3, #9
 80027b4:	401a      	ands	r2, r3
 80027b6:	2380      	movs	r3, #128	; 0x80
 80027b8:	025b      	lsls	r3, r3, #9
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d109      	bne.n	80027d2 <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80027be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80027c0:	4811      	ldr	r0, [pc, #68]	; (8002808 <HAL_RCC_GetSysClockFreq+0xc8>)
 80027c2:	f7fd fca1 	bl	8000108 <__udivsi3>
 80027c6:	0003      	movs	r3, r0
 80027c8:	001a      	movs	r2, r3
 80027ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027cc:	4353      	muls	r3, r2
 80027ce:	637b      	str	r3, [r7, #52]	; 0x34
 80027d0:	e008      	b.n	80027e4 <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80027d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80027d4:	480c      	ldr	r0, [pc, #48]	; (8002808 <HAL_RCC_GetSysClockFreq+0xc8>)
 80027d6:	f7fd fc97 	bl	8000108 <__udivsi3>
 80027da:	0003      	movs	r3, r0
 80027dc:	001a      	movs	r2, r3
 80027de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e0:	4353      	muls	r3, r2
 80027e2:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80027e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027e6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80027e8:	e002      	b.n	80027f0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027ea:	4b07      	ldr	r3, [pc, #28]	; (8002808 <HAL_RCC_GetSysClockFreq+0xc8>)
 80027ec:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80027ee:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80027f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80027f2:	0018      	movs	r0, r3
 80027f4:	46bd      	mov	sp, r7
 80027f6:	b00f      	add	sp, #60	; 0x3c
 80027f8:	bd90      	pop	{r4, r7, pc}
 80027fa:	46c0      	nop			; (mov r8, r8)
 80027fc:	080037e4 	.word	0x080037e4
 8002800:	080037f4 	.word	0x080037f4
 8002804:	40021000 	.word	0x40021000
 8002808:	007a1200 	.word	0x007a1200

0800280c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b086      	sub	sp, #24
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002814:	2300      	movs	r3, #0
 8002816:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002818:	2300      	movs	r3, #0
 800281a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	2380      	movs	r3, #128	; 0x80
 8002822:	025b      	lsls	r3, r3, #9
 8002824:	4013      	ands	r3, r2
 8002826:	d100      	bne.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002828:	e08e      	b.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800282a:	2017      	movs	r0, #23
 800282c:	183b      	adds	r3, r7, r0
 800282e:	2200      	movs	r2, #0
 8002830:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002832:	4b5f      	ldr	r3, [pc, #380]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002834:	69da      	ldr	r2, [r3, #28]
 8002836:	2380      	movs	r3, #128	; 0x80
 8002838:	055b      	lsls	r3, r3, #21
 800283a:	4013      	ands	r3, r2
 800283c:	d110      	bne.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800283e:	4b5c      	ldr	r3, [pc, #368]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002840:	69da      	ldr	r2, [r3, #28]
 8002842:	4b5b      	ldr	r3, [pc, #364]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002844:	2180      	movs	r1, #128	; 0x80
 8002846:	0549      	lsls	r1, r1, #21
 8002848:	430a      	orrs	r2, r1
 800284a:	61da      	str	r2, [r3, #28]
 800284c:	4b58      	ldr	r3, [pc, #352]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800284e:	69da      	ldr	r2, [r3, #28]
 8002850:	2380      	movs	r3, #128	; 0x80
 8002852:	055b      	lsls	r3, r3, #21
 8002854:	4013      	ands	r3, r2
 8002856:	60bb      	str	r3, [r7, #8]
 8002858:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800285a:	183b      	adds	r3, r7, r0
 800285c:	2201      	movs	r2, #1
 800285e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002860:	4b54      	ldr	r3, [pc, #336]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	2380      	movs	r3, #128	; 0x80
 8002866:	005b      	lsls	r3, r3, #1
 8002868:	4013      	ands	r3, r2
 800286a:	d11a      	bne.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800286c:	4b51      	ldr	r3, [pc, #324]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	4b50      	ldr	r3, [pc, #320]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002872:	2180      	movs	r1, #128	; 0x80
 8002874:	0049      	lsls	r1, r1, #1
 8002876:	430a      	orrs	r2, r1
 8002878:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800287a:	f7fe f999 	bl	8000bb0 <HAL_GetTick>
 800287e:	0003      	movs	r3, r0
 8002880:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002882:	e008      	b.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002884:	f7fe f994 	bl	8000bb0 <HAL_GetTick>
 8002888:	0002      	movs	r2, r0
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	2b64      	cmp	r3, #100	; 0x64
 8002890:	d901      	bls.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e087      	b.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002896:	4b47      	ldr	r3, [pc, #284]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	2380      	movs	r3, #128	; 0x80
 800289c:	005b      	lsls	r3, r3, #1
 800289e:	4013      	ands	r3, r2
 80028a0:	d0f0      	beq.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80028a2:	4b43      	ldr	r3, [pc, #268]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80028a4:	6a1a      	ldr	r2, [r3, #32]
 80028a6:	23c0      	movs	r3, #192	; 0xc0
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	4013      	ands	r3, r2
 80028ac:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d034      	beq.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x112>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	685a      	ldr	r2, [r3, #4]
 80028b8:	23c0      	movs	r3, #192	; 0xc0
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	4013      	ands	r3, r2
 80028be:	68fa      	ldr	r2, [r7, #12]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d02c      	beq.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80028c4:	4b3a      	ldr	r3, [pc, #232]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80028c6:	6a1b      	ldr	r3, [r3, #32]
 80028c8:	4a3b      	ldr	r2, [pc, #236]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028ca:	4013      	ands	r3, r2
 80028cc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80028ce:	4b38      	ldr	r3, [pc, #224]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80028d0:	6a1a      	ldr	r2, [r3, #32]
 80028d2:	4b37      	ldr	r3, [pc, #220]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80028d4:	2180      	movs	r1, #128	; 0x80
 80028d6:	0249      	lsls	r1, r1, #9
 80028d8:	430a      	orrs	r2, r1
 80028da:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80028dc:	4b34      	ldr	r3, [pc, #208]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80028de:	6a1a      	ldr	r2, [r3, #32]
 80028e0:	4b33      	ldr	r3, [pc, #204]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80028e2:	4936      	ldr	r1, [pc, #216]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80028e4:	400a      	ands	r2, r1
 80028e6:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80028e8:	4b31      	ldr	r3, [pc, #196]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80028ea:	68fa      	ldr	r2, [r7, #12]
 80028ec:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2201      	movs	r2, #1
 80028f2:	4013      	ands	r3, r2
 80028f4:	d013      	beq.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f6:	f7fe f95b 	bl	8000bb0 <HAL_GetTick>
 80028fa:	0003      	movs	r3, r0
 80028fc:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028fe:	e009      	b.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002900:	f7fe f956 	bl	8000bb0 <HAL_GetTick>
 8002904:	0002      	movs	r2, r0
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	4a2d      	ldr	r2, [pc, #180]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d901      	bls.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	e048      	b.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002914:	4b26      	ldr	r3, [pc, #152]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002916:	6a1b      	ldr	r3, [r3, #32]
 8002918:	2202      	movs	r2, #2
 800291a:	4013      	ands	r3, r2
 800291c:	d0f0      	beq.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800291e:	4b24      	ldr	r3, [pc, #144]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002920:	6a1b      	ldr	r3, [r3, #32]
 8002922:	4a25      	ldr	r2, [pc, #148]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002924:	4013      	ands	r3, r2
 8002926:	0019      	movs	r1, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	685a      	ldr	r2, [r3, #4]
 800292c:	4b20      	ldr	r3, [pc, #128]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800292e:	430a      	orrs	r2, r1
 8002930:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002932:	2317      	movs	r3, #23
 8002934:	18fb      	adds	r3, r7, r3
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	2b01      	cmp	r3, #1
 800293a:	d105      	bne.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800293c:	4b1c      	ldr	r3, [pc, #112]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800293e:	69da      	ldr	r2, [r3, #28]
 8002940:	4b1b      	ldr	r3, [pc, #108]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002942:	4920      	ldr	r1, [pc, #128]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002944:	400a      	ands	r2, r1
 8002946:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2201      	movs	r2, #1
 800294e:	4013      	ands	r3, r2
 8002950:	d009      	beq.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002952:	4b17      	ldr	r3, [pc, #92]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002956:	2203      	movs	r2, #3
 8002958:	4393      	bics	r3, r2
 800295a:	0019      	movs	r1, r3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689a      	ldr	r2, [r3, #8]
 8002960:	4b13      	ldr	r3, [pc, #76]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002962:	430a      	orrs	r2, r1
 8002964:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2220      	movs	r2, #32
 800296c:	4013      	ands	r3, r2
 800296e:	d009      	beq.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002970:	4b0f      	ldr	r3, [pc, #60]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002974:	2210      	movs	r2, #16
 8002976:	4393      	bics	r3, r2
 8002978:	0019      	movs	r1, r3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	68da      	ldr	r2, [r3, #12]
 800297e:	4b0c      	ldr	r3, [pc, #48]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002980:	430a      	orrs	r2, r1
 8002982:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	2380      	movs	r3, #128	; 0x80
 800298a:	029b      	lsls	r3, r3, #10
 800298c:	4013      	ands	r3, r2
 800298e:	d009      	beq.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002990:	4b07      	ldr	r3, [pc, #28]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002994:	2280      	movs	r2, #128	; 0x80
 8002996:	4393      	bics	r3, r2
 8002998:	0019      	movs	r1, r3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	691a      	ldr	r2, [r3, #16]
 800299e:	4b04      	ldr	r3, [pc, #16]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80029a0:	430a      	orrs	r2, r1
 80029a2:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	0018      	movs	r0, r3
 80029a8:	46bd      	mov	sp, r7
 80029aa:	b006      	add	sp, #24
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	46c0      	nop			; (mov r8, r8)
 80029b0:	40021000 	.word	0x40021000
 80029b4:	40007000 	.word	0x40007000
 80029b8:	fffffcff 	.word	0xfffffcff
 80029bc:	fffeffff 	.word	0xfffeffff
 80029c0:	00001388 	.word	0x00001388
 80029c4:	efffffff 	.word	0xefffffff

080029c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d101      	bne.n	80029da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e042      	b.n	8002a60 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	223d      	movs	r2, #61	; 0x3d
 80029de:	5c9b      	ldrb	r3, [r3, r2]
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d107      	bne.n	80029f6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	223c      	movs	r2, #60	; 0x3c
 80029ea:	2100      	movs	r1, #0
 80029ec:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	0018      	movs	r0, r3
 80029f2:	f7fd ffdd 	bl	80009b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	223d      	movs	r2, #61	; 0x3d
 80029fa:	2102      	movs	r1, #2
 80029fc:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	3304      	adds	r3, #4
 8002a06:	0019      	movs	r1, r3
 8002a08:	0010      	movs	r0, r2
 8002a0a:	f000 f9a5 	bl	8002d58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2246      	movs	r2, #70	; 0x46
 8002a12:	2101      	movs	r1, #1
 8002a14:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	223e      	movs	r2, #62	; 0x3e
 8002a1a:	2101      	movs	r1, #1
 8002a1c:	5499      	strb	r1, [r3, r2]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	223f      	movs	r2, #63	; 0x3f
 8002a22:	2101      	movs	r1, #1
 8002a24:	5499      	strb	r1, [r3, r2]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2240      	movs	r2, #64	; 0x40
 8002a2a:	2101      	movs	r1, #1
 8002a2c:	5499      	strb	r1, [r3, r2]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2241      	movs	r2, #65	; 0x41
 8002a32:	2101      	movs	r1, #1
 8002a34:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2242      	movs	r2, #66	; 0x42
 8002a3a:	2101      	movs	r1, #1
 8002a3c:	5499      	strb	r1, [r3, r2]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2243      	movs	r2, #67	; 0x43
 8002a42:	2101      	movs	r1, #1
 8002a44:	5499      	strb	r1, [r3, r2]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2244      	movs	r2, #68	; 0x44
 8002a4a:	2101      	movs	r1, #1
 8002a4c:	5499      	strb	r1, [r3, r2]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2245      	movs	r2, #69	; 0x45
 8002a52:	2101      	movs	r1, #1
 8002a54:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	223d      	movs	r2, #61	; 0x3d
 8002a5a:	2101      	movs	r1, #1
 8002a5c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a5e:	2300      	movs	r3, #0
}
 8002a60:	0018      	movs	r0, r3
 8002a62:	46bd      	mov	sp, r7
 8002a64:	b002      	add	sp, #8
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d108      	bne.n	8002a8a <HAL_TIM_PWM_Start+0x22>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	223e      	movs	r2, #62	; 0x3e
 8002a7c:	5c9b      	ldrb	r3, [r3, r2]
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	3b01      	subs	r3, #1
 8002a82:	1e5a      	subs	r2, r3, #1
 8002a84:	4193      	sbcs	r3, r2
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	e01f      	b.n	8002aca <HAL_TIM_PWM_Start+0x62>
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	2b04      	cmp	r3, #4
 8002a8e:	d108      	bne.n	8002aa2 <HAL_TIM_PWM_Start+0x3a>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	223f      	movs	r2, #63	; 0x3f
 8002a94:	5c9b      	ldrb	r3, [r3, r2]
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	3b01      	subs	r3, #1
 8002a9a:	1e5a      	subs	r2, r3, #1
 8002a9c:	4193      	sbcs	r3, r2
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	e013      	b.n	8002aca <HAL_TIM_PWM_Start+0x62>
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	2b08      	cmp	r3, #8
 8002aa6:	d108      	bne.n	8002aba <HAL_TIM_PWM_Start+0x52>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2240      	movs	r2, #64	; 0x40
 8002aac:	5c9b      	ldrb	r3, [r3, r2]
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	3b01      	subs	r3, #1
 8002ab2:	1e5a      	subs	r2, r3, #1
 8002ab4:	4193      	sbcs	r3, r2
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	e007      	b.n	8002aca <HAL_TIM_PWM_Start+0x62>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2241      	movs	r2, #65	; 0x41
 8002abe:	5c9b      	ldrb	r3, [r3, r2]
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	3b01      	subs	r3, #1
 8002ac4:	1e5a      	subs	r2, r3, #1
 8002ac6:	4193      	sbcs	r3, r2
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d001      	beq.n	8002ad2 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e06e      	b.n	8002bb0 <HAL_TIM_PWM_Start+0x148>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d104      	bne.n	8002ae2 <HAL_TIM_PWM_Start+0x7a>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	223e      	movs	r2, #62	; 0x3e
 8002adc:	2102      	movs	r1, #2
 8002ade:	5499      	strb	r1, [r3, r2]
 8002ae0:	e013      	b.n	8002b0a <HAL_TIM_PWM_Start+0xa2>
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	2b04      	cmp	r3, #4
 8002ae6:	d104      	bne.n	8002af2 <HAL_TIM_PWM_Start+0x8a>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	223f      	movs	r2, #63	; 0x3f
 8002aec:	2102      	movs	r1, #2
 8002aee:	5499      	strb	r1, [r3, r2]
 8002af0:	e00b      	b.n	8002b0a <HAL_TIM_PWM_Start+0xa2>
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	2b08      	cmp	r3, #8
 8002af6:	d104      	bne.n	8002b02 <HAL_TIM_PWM_Start+0x9a>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2240      	movs	r2, #64	; 0x40
 8002afc:	2102      	movs	r1, #2
 8002afe:	5499      	strb	r1, [r3, r2]
 8002b00:	e003      	b.n	8002b0a <HAL_TIM_PWM_Start+0xa2>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2241      	movs	r2, #65	; 0x41
 8002b06:	2102      	movs	r1, #2
 8002b08:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	6839      	ldr	r1, [r7, #0]
 8002b10:	2201      	movs	r2, #1
 8002b12:	0018      	movs	r0, r3
 8002b14:	f000 fb92 	bl	800323c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a26      	ldr	r2, [pc, #152]	; (8002bb8 <HAL_TIM_PWM_Start+0x150>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d00e      	beq.n	8002b40 <HAL_TIM_PWM_Start+0xd8>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a25      	ldr	r2, [pc, #148]	; (8002bbc <HAL_TIM_PWM_Start+0x154>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d009      	beq.n	8002b40 <HAL_TIM_PWM_Start+0xd8>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a23      	ldr	r2, [pc, #140]	; (8002bc0 <HAL_TIM_PWM_Start+0x158>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d004      	beq.n	8002b40 <HAL_TIM_PWM_Start+0xd8>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a22      	ldr	r2, [pc, #136]	; (8002bc4 <HAL_TIM_PWM_Start+0x15c>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d101      	bne.n	8002b44 <HAL_TIM_PWM_Start+0xdc>
 8002b40:	2301      	movs	r3, #1
 8002b42:	e000      	b.n	8002b46 <HAL_TIM_PWM_Start+0xde>
 8002b44:	2300      	movs	r3, #0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d008      	beq.n	8002b5c <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2180      	movs	r1, #128	; 0x80
 8002b56:	0209      	lsls	r1, r1, #8
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a15      	ldr	r2, [pc, #84]	; (8002bb8 <HAL_TIM_PWM_Start+0x150>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d009      	beq.n	8002b7a <HAL_TIM_PWM_Start+0x112>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a17      	ldr	r2, [pc, #92]	; (8002bc8 <HAL_TIM_PWM_Start+0x160>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d004      	beq.n	8002b7a <HAL_TIM_PWM_Start+0x112>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a11      	ldr	r2, [pc, #68]	; (8002bbc <HAL_TIM_PWM_Start+0x154>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d111      	bne.n	8002b9e <HAL_TIM_PWM_Start+0x136>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	2207      	movs	r2, #7
 8002b82:	4013      	ands	r3, r2
 8002b84:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2b06      	cmp	r3, #6
 8002b8a:	d010      	beq.n	8002bae <HAL_TIM_PWM_Start+0x146>
    {
      __HAL_TIM_ENABLE(htim);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	2101      	movs	r1, #1
 8002b98:	430a      	orrs	r2, r1
 8002b9a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b9c:	e007      	b.n	8002bae <HAL_TIM_PWM_Start+0x146>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2101      	movs	r1, #1
 8002baa:	430a      	orrs	r2, r1
 8002bac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002bae:	2300      	movs	r3, #0
}
 8002bb0:	0018      	movs	r0, r3
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	b004      	add	sp, #16
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	40012c00 	.word	0x40012c00
 8002bbc:	40014000 	.word	0x40014000
 8002bc0:	40014400 	.word	0x40014400
 8002bc4:	40014800 	.word	0x40014800
 8002bc8:	40000400 	.word	0x40000400

08002bcc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b086      	sub	sp, #24
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bd8:	2317      	movs	r3, #23
 8002bda:	18fb      	adds	r3, r7, r3
 8002bdc:	2200      	movs	r2, #0
 8002bde:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	223c      	movs	r2, #60	; 0x3c
 8002be4:	5c9b      	ldrb	r3, [r3, r2]
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d101      	bne.n	8002bee <HAL_TIM_PWM_ConfigChannel+0x22>
 8002bea:	2302      	movs	r3, #2
 8002bec:	e0ad      	b.n	8002d4a <HAL_TIM_PWM_ConfigChannel+0x17e>
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	223c      	movs	r2, #60	; 0x3c
 8002bf2:	2101      	movs	r1, #1
 8002bf4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2b0c      	cmp	r3, #12
 8002bfa:	d100      	bne.n	8002bfe <HAL_TIM_PWM_ConfigChannel+0x32>
 8002bfc:	e076      	b.n	8002cec <HAL_TIM_PWM_ConfigChannel+0x120>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2b0c      	cmp	r3, #12
 8002c02:	d900      	bls.n	8002c06 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8002c04:	e095      	b.n	8002d32 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2b08      	cmp	r3, #8
 8002c0a:	d04e      	beq.n	8002caa <HAL_TIM_PWM_ConfigChannel+0xde>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2b08      	cmp	r3, #8
 8002c10:	d900      	bls.n	8002c14 <HAL_TIM_PWM_ConfigChannel+0x48>
 8002c12:	e08e      	b.n	8002d32 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d003      	beq.n	8002c22 <HAL_TIM_PWM_ConfigChannel+0x56>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2b04      	cmp	r3, #4
 8002c1e:	d021      	beq.n	8002c64 <HAL_TIM_PWM_ConfigChannel+0x98>
 8002c20:	e087      	b.n	8002d32 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	68ba      	ldr	r2, [r7, #8]
 8002c28:	0011      	movs	r1, r2
 8002c2a:	0018      	movs	r0, r3
 8002c2c:	f000 f90a 	bl	8002e44 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	699a      	ldr	r2, [r3, #24]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	2108      	movs	r1, #8
 8002c3c:	430a      	orrs	r2, r1
 8002c3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	699a      	ldr	r2, [r3, #24]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2104      	movs	r1, #4
 8002c4c:	438a      	bics	r2, r1
 8002c4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	6999      	ldr	r1, [r3, #24]
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	691a      	ldr	r2, [r3, #16]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	430a      	orrs	r2, r1
 8002c60:	619a      	str	r2, [r3, #24]
      break;
 8002c62:	e06b      	b.n	8002d3c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	68ba      	ldr	r2, [r7, #8]
 8002c6a:	0011      	movs	r1, r2
 8002c6c:	0018      	movs	r0, r3
 8002c6e:	f000 f971 	bl	8002f54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	699a      	ldr	r2, [r3, #24]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	2180      	movs	r1, #128	; 0x80
 8002c7e:	0109      	lsls	r1, r1, #4
 8002c80:	430a      	orrs	r2, r1
 8002c82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	699a      	ldr	r2, [r3, #24]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4931      	ldr	r1, [pc, #196]	; (8002d54 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002c90:	400a      	ands	r2, r1
 8002c92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	6999      	ldr	r1, [r3, #24]
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	691b      	ldr	r3, [r3, #16]
 8002c9e:	021a      	lsls	r2, r3, #8
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	430a      	orrs	r2, r1
 8002ca6:	619a      	str	r2, [r3, #24]
      break;
 8002ca8:	e048      	b.n	8002d3c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	68ba      	ldr	r2, [r7, #8]
 8002cb0:	0011      	movs	r1, r2
 8002cb2:	0018      	movs	r0, r3
 8002cb4:	f000 f9d2 	bl	800305c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	69da      	ldr	r2, [r3, #28]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2108      	movs	r1, #8
 8002cc4:	430a      	orrs	r2, r1
 8002cc6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	69da      	ldr	r2, [r3, #28]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2104      	movs	r1, #4
 8002cd4:	438a      	bics	r2, r1
 8002cd6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	69d9      	ldr	r1, [r3, #28]
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	691a      	ldr	r2, [r3, #16]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	61da      	str	r2, [r3, #28]
      break;
 8002cea:	e027      	b.n	8002d3c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	68ba      	ldr	r2, [r7, #8]
 8002cf2:	0011      	movs	r1, r2
 8002cf4:	0018      	movs	r0, r3
 8002cf6:	f000 fa37 	bl	8003168 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	69da      	ldr	r2, [r3, #28]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2180      	movs	r1, #128	; 0x80
 8002d06:	0109      	lsls	r1, r1, #4
 8002d08:	430a      	orrs	r2, r1
 8002d0a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	69da      	ldr	r2, [r3, #28]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	490f      	ldr	r1, [pc, #60]	; (8002d54 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002d18:	400a      	ands	r2, r1
 8002d1a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	69d9      	ldr	r1, [r3, #28]
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	021a      	lsls	r2, r3, #8
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	430a      	orrs	r2, r1
 8002d2e:	61da      	str	r2, [r3, #28]
      break;
 8002d30:	e004      	b.n	8002d3c <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8002d32:	2317      	movs	r3, #23
 8002d34:	18fb      	adds	r3, r7, r3
 8002d36:	2201      	movs	r2, #1
 8002d38:	701a      	strb	r2, [r3, #0]
      break;
 8002d3a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	223c      	movs	r2, #60	; 0x3c
 8002d40:	2100      	movs	r1, #0
 8002d42:	5499      	strb	r1, [r3, r2]

  return status;
 8002d44:	2317      	movs	r3, #23
 8002d46:	18fb      	adds	r3, r7, r3
 8002d48:	781b      	ldrb	r3, [r3, #0]
}
 8002d4a:	0018      	movs	r0, r3
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	b006      	add	sp, #24
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	46c0      	nop			; (mov r8, r8)
 8002d54:	fffffbff 	.word	0xfffffbff

08002d58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	4a2f      	ldr	r2, [pc, #188]	; (8002e28 <TIM_Base_SetConfig+0xd0>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d003      	beq.n	8002d78 <TIM_Base_SetConfig+0x20>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	4a2e      	ldr	r2, [pc, #184]	; (8002e2c <TIM_Base_SetConfig+0xd4>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d108      	bne.n	8002d8a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2270      	movs	r2, #112	; 0x70
 8002d7c:	4393      	bics	r3, r2
 8002d7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	68fa      	ldr	r2, [r7, #12]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a26      	ldr	r2, [pc, #152]	; (8002e28 <TIM_Base_SetConfig+0xd0>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d013      	beq.n	8002dba <TIM_Base_SetConfig+0x62>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a25      	ldr	r2, [pc, #148]	; (8002e2c <TIM_Base_SetConfig+0xd4>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d00f      	beq.n	8002dba <TIM_Base_SetConfig+0x62>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a24      	ldr	r2, [pc, #144]	; (8002e30 <TIM_Base_SetConfig+0xd8>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d00b      	beq.n	8002dba <TIM_Base_SetConfig+0x62>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a23      	ldr	r2, [pc, #140]	; (8002e34 <TIM_Base_SetConfig+0xdc>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d007      	beq.n	8002dba <TIM_Base_SetConfig+0x62>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a22      	ldr	r2, [pc, #136]	; (8002e38 <TIM_Base_SetConfig+0xe0>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d003      	beq.n	8002dba <TIM_Base_SetConfig+0x62>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4a21      	ldr	r2, [pc, #132]	; (8002e3c <TIM_Base_SetConfig+0xe4>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d108      	bne.n	8002dcc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	4a20      	ldr	r2, [pc, #128]	; (8002e40 <TIM_Base_SetConfig+0xe8>)
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	68fa      	ldr	r2, [r7, #12]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2280      	movs	r2, #128	; 0x80
 8002dd0:	4393      	bics	r3, r2
 8002dd2:	001a      	movs	r2, r3
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	695b      	ldr	r3, [r3, #20]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	68fa      	ldr	r2, [r7, #12]
 8002de0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	689a      	ldr	r2, [r3, #8]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4a0c      	ldr	r2, [pc, #48]	; (8002e28 <TIM_Base_SetConfig+0xd0>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d00b      	beq.n	8002e12 <TIM_Base_SetConfig+0xba>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4a0d      	ldr	r2, [pc, #52]	; (8002e34 <TIM_Base_SetConfig+0xdc>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d007      	beq.n	8002e12 <TIM_Base_SetConfig+0xba>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a0c      	ldr	r2, [pc, #48]	; (8002e38 <TIM_Base_SetConfig+0xe0>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d003      	beq.n	8002e12 <TIM_Base_SetConfig+0xba>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a0b      	ldr	r2, [pc, #44]	; (8002e3c <TIM_Base_SetConfig+0xe4>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d103      	bne.n	8002e1a <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	691a      	ldr	r2, [r3, #16]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	615a      	str	r2, [r3, #20]
}
 8002e20:	46c0      	nop			; (mov r8, r8)
 8002e22:	46bd      	mov	sp, r7
 8002e24:	b004      	add	sp, #16
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	40012c00 	.word	0x40012c00
 8002e2c:	40000400 	.word	0x40000400
 8002e30:	40002000 	.word	0x40002000
 8002e34:	40014000 	.word	0x40014000
 8002e38:	40014400 	.word	0x40014400
 8002e3c:	40014800 	.word	0x40014800
 8002e40:	fffffcff 	.word	0xfffffcff

08002e44 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b086      	sub	sp, #24
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a1b      	ldr	r3, [r3, #32]
 8002e52:	2201      	movs	r2, #1
 8002e54:	4393      	bics	r3, r2
 8002e56:	001a      	movs	r2, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a1b      	ldr	r3, [r3, #32]
 8002e60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	699b      	ldr	r3, [r3, #24]
 8002e6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2270      	movs	r2, #112	; 0x70
 8002e72:	4393      	bics	r3, r2
 8002e74:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2203      	movs	r2, #3
 8002e7a:	4393      	bics	r3, r2
 8002e7c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	68fa      	ldr	r2, [r7, #12]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	2202      	movs	r2, #2
 8002e8c:	4393      	bics	r3, r2
 8002e8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	697a      	ldr	r2, [r7, #20]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4a27      	ldr	r2, [pc, #156]	; (8002f3c <TIM_OC1_SetConfig+0xf8>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d00b      	beq.n	8002eba <TIM_OC1_SetConfig+0x76>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4a26      	ldr	r2, [pc, #152]	; (8002f40 <TIM_OC1_SetConfig+0xfc>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d007      	beq.n	8002eba <TIM_OC1_SetConfig+0x76>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4a25      	ldr	r2, [pc, #148]	; (8002f44 <TIM_OC1_SetConfig+0x100>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d003      	beq.n	8002eba <TIM_OC1_SetConfig+0x76>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a24      	ldr	r2, [pc, #144]	; (8002f48 <TIM_OC1_SetConfig+0x104>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d10c      	bne.n	8002ed4 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	2208      	movs	r2, #8
 8002ebe:	4393      	bics	r3, r2
 8002ec0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	697a      	ldr	r2, [r7, #20]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	2204      	movs	r2, #4
 8002ed0:	4393      	bics	r3, r2
 8002ed2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	4a19      	ldr	r2, [pc, #100]	; (8002f3c <TIM_OC1_SetConfig+0xf8>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d00b      	beq.n	8002ef4 <TIM_OC1_SetConfig+0xb0>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	4a18      	ldr	r2, [pc, #96]	; (8002f40 <TIM_OC1_SetConfig+0xfc>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d007      	beq.n	8002ef4 <TIM_OC1_SetConfig+0xb0>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	4a17      	ldr	r2, [pc, #92]	; (8002f44 <TIM_OC1_SetConfig+0x100>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d003      	beq.n	8002ef4 <TIM_OC1_SetConfig+0xb0>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	4a16      	ldr	r2, [pc, #88]	; (8002f48 <TIM_OC1_SetConfig+0x104>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d111      	bne.n	8002f18 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	4a15      	ldr	r2, [pc, #84]	; (8002f4c <TIM_OC1_SetConfig+0x108>)
 8002ef8:	4013      	ands	r3, r2
 8002efa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	4a14      	ldr	r2, [pc, #80]	; (8002f50 <TIM_OC1_SetConfig+0x10c>)
 8002f00:	4013      	ands	r3, r2
 8002f02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	695b      	ldr	r3, [r3, #20]
 8002f08:	693a      	ldr	r2, [r7, #16]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	699b      	ldr	r3, [r3, #24]
 8002f12:	693a      	ldr	r2, [r7, #16]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	693a      	ldr	r2, [r7, #16]
 8002f1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	68fa      	ldr	r2, [r7, #12]
 8002f22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	685a      	ldr	r2, [r3, #4]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	697a      	ldr	r2, [r7, #20]
 8002f30:	621a      	str	r2, [r3, #32]
}
 8002f32:	46c0      	nop			; (mov r8, r8)
 8002f34:	46bd      	mov	sp, r7
 8002f36:	b006      	add	sp, #24
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	46c0      	nop			; (mov r8, r8)
 8002f3c:	40012c00 	.word	0x40012c00
 8002f40:	40014000 	.word	0x40014000
 8002f44:	40014400 	.word	0x40014400
 8002f48:	40014800 	.word	0x40014800
 8002f4c:	fffffeff 	.word	0xfffffeff
 8002f50:	fffffdff 	.word	0xfffffdff

08002f54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b086      	sub	sp, #24
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a1b      	ldr	r3, [r3, #32]
 8002f62:	2210      	movs	r2, #16
 8002f64:	4393      	bics	r3, r2
 8002f66:	001a      	movs	r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a1b      	ldr	r3, [r3, #32]
 8002f70:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	699b      	ldr	r3, [r3, #24]
 8002f7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	4a2e      	ldr	r2, [pc, #184]	; (800303c <TIM_OC2_SetConfig+0xe8>)
 8002f82:	4013      	ands	r3, r2
 8002f84:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	4a2d      	ldr	r2, [pc, #180]	; (8003040 <TIM_OC2_SetConfig+0xec>)
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	021b      	lsls	r3, r3, #8
 8002f94:	68fa      	ldr	r2, [r7, #12]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	2220      	movs	r2, #32
 8002f9e:	4393      	bics	r3, r2
 8002fa0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	011b      	lsls	r3, r3, #4
 8002fa8:	697a      	ldr	r2, [r7, #20]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a24      	ldr	r2, [pc, #144]	; (8003044 <TIM_OC2_SetConfig+0xf0>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d10d      	bne.n	8002fd2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	2280      	movs	r2, #128	; 0x80
 8002fba:	4393      	bics	r3, r2
 8002fbc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	011b      	lsls	r3, r3, #4
 8002fc4:	697a      	ldr	r2, [r7, #20]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	2240      	movs	r2, #64	; 0x40
 8002fce:	4393      	bics	r3, r2
 8002fd0:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a1b      	ldr	r2, [pc, #108]	; (8003044 <TIM_OC2_SetConfig+0xf0>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d00b      	beq.n	8002ff2 <TIM_OC2_SetConfig+0x9e>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4a1a      	ldr	r2, [pc, #104]	; (8003048 <TIM_OC2_SetConfig+0xf4>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d007      	beq.n	8002ff2 <TIM_OC2_SetConfig+0x9e>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4a19      	ldr	r2, [pc, #100]	; (800304c <TIM_OC2_SetConfig+0xf8>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d003      	beq.n	8002ff2 <TIM_OC2_SetConfig+0x9e>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4a18      	ldr	r2, [pc, #96]	; (8003050 <TIM_OC2_SetConfig+0xfc>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d113      	bne.n	800301a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	4a17      	ldr	r2, [pc, #92]	; (8003054 <TIM_OC2_SetConfig+0x100>)
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	4a16      	ldr	r2, [pc, #88]	; (8003058 <TIM_OC2_SetConfig+0x104>)
 8002ffe:	4013      	ands	r3, r2
 8003000:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	695b      	ldr	r3, [r3, #20]
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	693a      	ldr	r2, [r7, #16]
 800300a:	4313      	orrs	r3, r2
 800300c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	699b      	ldr	r3, [r3, #24]
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	693a      	ldr	r2, [r7, #16]
 8003016:	4313      	orrs	r3, r2
 8003018:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	693a      	ldr	r2, [r7, #16]
 800301e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	68fa      	ldr	r2, [r7, #12]
 8003024:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	685a      	ldr	r2, [r3, #4]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	697a      	ldr	r2, [r7, #20]
 8003032:	621a      	str	r2, [r3, #32]
}
 8003034:	46c0      	nop			; (mov r8, r8)
 8003036:	46bd      	mov	sp, r7
 8003038:	b006      	add	sp, #24
 800303a:	bd80      	pop	{r7, pc}
 800303c:	ffff8fff 	.word	0xffff8fff
 8003040:	fffffcff 	.word	0xfffffcff
 8003044:	40012c00 	.word	0x40012c00
 8003048:	40014000 	.word	0x40014000
 800304c:	40014400 	.word	0x40014400
 8003050:	40014800 	.word	0x40014800
 8003054:	fffffbff 	.word	0xfffffbff
 8003058:	fffff7ff 	.word	0xfffff7ff

0800305c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b086      	sub	sp, #24
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a1b      	ldr	r3, [r3, #32]
 800306a:	4a35      	ldr	r2, [pc, #212]	; (8003140 <TIM_OC3_SetConfig+0xe4>)
 800306c:	401a      	ands	r2, r3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6a1b      	ldr	r3, [r3, #32]
 8003076:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	69db      	ldr	r3, [r3, #28]
 8003082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2270      	movs	r2, #112	; 0x70
 8003088:	4393      	bics	r3, r2
 800308a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2203      	movs	r2, #3
 8003090:	4393      	bics	r3, r2
 8003092:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	68fa      	ldr	r2, [r7, #12]
 800309a:	4313      	orrs	r3, r2
 800309c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	4a28      	ldr	r2, [pc, #160]	; (8003144 <TIM_OC3_SetConfig+0xe8>)
 80030a2:	4013      	ands	r3, r2
 80030a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	021b      	lsls	r3, r3, #8
 80030ac:	697a      	ldr	r2, [r7, #20]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a24      	ldr	r2, [pc, #144]	; (8003148 <TIM_OC3_SetConfig+0xec>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d10d      	bne.n	80030d6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	4a23      	ldr	r2, [pc, #140]	; (800314c <TIM_OC3_SetConfig+0xf0>)
 80030be:	4013      	ands	r3, r2
 80030c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	021b      	lsls	r3, r3, #8
 80030c8:	697a      	ldr	r2, [r7, #20]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	4a1f      	ldr	r2, [pc, #124]	; (8003150 <TIM_OC3_SetConfig+0xf4>)
 80030d2:	4013      	ands	r3, r2
 80030d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a1b      	ldr	r2, [pc, #108]	; (8003148 <TIM_OC3_SetConfig+0xec>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d00b      	beq.n	80030f6 <TIM_OC3_SetConfig+0x9a>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a1c      	ldr	r2, [pc, #112]	; (8003154 <TIM_OC3_SetConfig+0xf8>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d007      	beq.n	80030f6 <TIM_OC3_SetConfig+0x9a>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a1b      	ldr	r2, [pc, #108]	; (8003158 <TIM_OC3_SetConfig+0xfc>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d003      	beq.n	80030f6 <TIM_OC3_SetConfig+0x9a>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a1a      	ldr	r2, [pc, #104]	; (800315c <TIM_OC3_SetConfig+0x100>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d113      	bne.n	800311e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	4a19      	ldr	r2, [pc, #100]	; (8003160 <TIM_OC3_SetConfig+0x104>)
 80030fa:	4013      	ands	r3, r2
 80030fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	4a18      	ldr	r2, [pc, #96]	; (8003164 <TIM_OC3_SetConfig+0x108>)
 8003102:	4013      	ands	r3, r2
 8003104:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	695b      	ldr	r3, [r3, #20]
 800310a:	011b      	lsls	r3, r3, #4
 800310c:	693a      	ldr	r2, [r7, #16]
 800310e:	4313      	orrs	r3, r2
 8003110:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	699b      	ldr	r3, [r3, #24]
 8003116:	011b      	lsls	r3, r3, #4
 8003118:	693a      	ldr	r2, [r7, #16]
 800311a:	4313      	orrs	r3, r2
 800311c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	693a      	ldr	r2, [r7, #16]
 8003122:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	68fa      	ldr	r2, [r7, #12]
 8003128:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	685a      	ldr	r2, [r3, #4]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	697a      	ldr	r2, [r7, #20]
 8003136:	621a      	str	r2, [r3, #32]
}
 8003138:	46c0      	nop			; (mov r8, r8)
 800313a:	46bd      	mov	sp, r7
 800313c:	b006      	add	sp, #24
 800313e:	bd80      	pop	{r7, pc}
 8003140:	fffffeff 	.word	0xfffffeff
 8003144:	fffffdff 	.word	0xfffffdff
 8003148:	40012c00 	.word	0x40012c00
 800314c:	fffff7ff 	.word	0xfffff7ff
 8003150:	fffffbff 	.word	0xfffffbff
 8003154:	40014000 	.word	0x40014000
 8003158:	40014400 	.word	0x40014400
 800315c:	40014800 	.word	0x40014800
 8003160:	ffffefff 	.word	0xffffefff
 8003164:	ffffdfff 	.word	0xffffdfff

08003168 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b086      	sub	sp, #24
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a1b      	ldr	r3, [r3, #32]
 8003176:	4a28      	ldr	r2, [pc, #160]	; (8003218 <TIM_OC4_SetConfig+0xb0>)
 8003178:	401a      	ands	r2, r3
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a1b      	ldr	r3, [r3, #32]
 8003182:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	69db      	ldr	r3, [r3, #28]
 800318e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	4a22      	ldr	r2, [pc, #136]	; (800321c <TIM_OC4_SetConfig+0xb4>)
 8003194:	4013      	ands	r3, r2
 8003196:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	4a21      	ldr	r2, [pc, #132]	; (8003220 <TIM_OC4_SetConfig+0xb8>)
 800319c:	4013      	ands	r3, r2
 800319e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	021b      	lsls	r3, r3, #8
 80031a6:	68fa      	ldr	r2, [r7, #12]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	4a1d      	ldr	r2, [pc, #116]	; (8003224 <TIM_OC4_SetConfig+0xbc>)
 80031b0:	4013      	ands	r3, r2
 80031b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	031b      	lsls	r3, r3, #12
 80031ba:	693a      	ldr	r2, [r7, #16]
 80031bc:	4313      	orrs	r3, r2
 80031be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	4a19      	ldr	r2, [pc, #100]	; (8003228 <TIM_OC4_SetConfig+0xc0>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d00b      	beq.n	80031e0 <TIM_OC4_SetConfig+0x78>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	4a18      	ldr	r2, [pc, #96]	; (800322c <TIM_OC4_SetConfig+0xc4>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d007      	beq.n	80031e0 <TIM_OC4_SetConfig+0x78>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	4a17      	ldr	r2, [pc, #92]	; (8003230 <TIM_OC4_SetConfig+0xc8>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d003      	beq.n	80031e0 <TIM_OC4_SetConfig+0x78>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	4a16      	ldr	r2, [pc, #88]	; (8003234 <TIM_OC4_SetConfig+0xcc>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d109      	bne.n	80031f4 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	4a15      	ldr	r2, [pc, #84]	; (8003238 <TIM_OC4_SetConfig+0xd0>)
 80031e4:	4013      	ands	r3, r2
 80031e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	695b      	ldr	r3, [r3, #20]
 80031ec:	019b      	lsls	r3, r3, #6
 80031ee:	697a      	ldr	r2, [r7, #20]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	697a      	ldr	r2, [r7, #20]
 80031f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	68fa      	ldr	r2, [r7, #12]
 80031fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	685a      	ldr	r2, [r3, #4]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	693a      	ldr	r2, [r7, #16]
 800320c:	621a      	str	r2, [r3, #32]
}
 800320e:	46c0      	nop			; (mov r8, r8)
 8003210:	46bd      	mov	sp, r7
 8003212:	b006      	add	sp, #24
 8003214:	bd80      	pop	{r7, pc}
 8003216:	46c0      	nop			; (mov r8, r8)
 8003218:	ffffefff 	.word	0xffffefff
 800321c:	ffff8fff 	.word	0xffff8fff
 8003220:	fffffcff 	.word	0xfffffcff
 8003224:	ffffdfff 	.word	0xffffdfff
 8003228:	40012c00 	.word	0x40012c00
 800322c:	40014000 	.word	0x40014000
 8003230:	40014400 	.word	0x40014400
 8003234:	40014800 	.word	0x40014800
 8003238:	ffffbfff 	.word	0xffffbfff

0800323c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b086      	sub	sp, #24
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	221f      	movs	r2, #31
 800324c:	4013      	ands	r3, r2
 800324e:	2201      	movs	r2, #1
 8003250:	409a      	lsls	r2, r3
 8003252:	0013      	movs	r3, r2
 8003254:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6a1b      	ldr	r3, [r3, #32]
 800325a:	697a      	ldr	r2, [r7, #20]
 800325c:	43d2      	mvns	r2, r2
 800325e:	401a      	ands	r2, r3
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6a1a      	ldr	r2, [r3, #32]
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	211f      	movs	r1, #31
 800326c:	400b      	ands	r3, r1
 800326e:	6879      	ldr	r1, [r7, #4]
 8003270:	4099      	lsls	r1, r3
 8003272:	000b      	movs	r3, r1
 8003274:	431a      	orrs	r2, r3
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	621a      	str	r2, [r3, #32]
}
 800327a:	46c0      	nop			; (mov r8, r8)
 800327c:	46bd      	mov	sp, r7
 800327e:	b006      	add	sp, #24
 8003280:	bd80      	pop	{r7, pc}
	...

08003284 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b084      	sub	sp, #16
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	223c      	movs	r2, #60	; 0x3c
 8003292:	5c9b      	ldrb	r3, [r3, r2]
 8003294:	2b01      	cmp	r3, #1
 8003296:	d101      	bne.n	800329c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003298:	2302      	movs	r3, #2
 800329a:	e041      	b.n	8003320 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	223c      	movs	r2, #60	; 0x3c
 80032a0:	2101      	movs	r1, #1
 80032a2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	223d      	movs	r2, #61	; 0x3d
 80032a8:	2102      	movs	r1, #2
 80032aa:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2270      	movs	r2, #112	; 0x70
 80032c0:	4393      	bics	r3, r2
 80032c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	68fa      	ldr	r2, [r7, #12]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	68fa      	ldr	r2, [r7, #12]
 80032d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a13      	ldr	r2, [pc, #76]	; (8003328 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d009      	beq.n	80032f4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a11      	ldr	r2, [pc, #68]	; (800332c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d004      	beq.n	80032f4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a10      	ldr	r2, [pc, #64]	; (8003330 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d10c      	bne.n	800330e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	2280      	movs	r2, #128	; 0x80
 80032f8:	4393      	bics	r3, r2
 80032fa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	68ba      	ldr	r2, [r7, #8]
 8003302:	4313      	orrs	r3, r2
 8003304:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	68ba      	ldr	r2, [r7, #8]
 800330c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	223d      	movs	r2, #61	; 0x3d
 8003312:	2101      	movs	r1, #1
 8003314:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	223c      	movs	r2, #60	; 0x3c
 800331a:	2100      	movs	r1, #0
 800331c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800331e:	2300      	movs	r3, #0
}
 8003320:	0018      	movs	r0, r3
 8003322:	46bd      	mov	sp, r7
 8003324:	b004      	add	sp, #16
 8003326:	bd80      	pop	{r7, pc}
 8003328:	40012c00 	.word	0x40012c00
 800332c:	40000400 	.word	0x40000400
 8003330:	40014000 	.word	0x40014000

08003334 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800333e:	2300      	movs	r3, #0
 8003340:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	223c      	movs	r2, #60	; 0x3c
 8003346:	5c9b      	ldrb	r3, [r3, r2]
 8003348:	2b01      	cmp	r3, #1
 800334a:	d101      	bne.n	8003350 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800334c:	2302      	movs	r3, #2
 800334e:	e03e      	b.n	80033ce <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	223c      	movs	r2, #60	; 0x3c
 8003354:	2101      	movs	r1, #1
 8003356:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	22ff      	movs	r2, #255	; 0xff
 800335c:	4393      	bics	r3, r2
 800335e:	001a      	movs	r2, r3
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	4313      	orrs	r3, r2
 8003366:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	4a1b      	ldr	r2, [pc, #108]	; (80033d8 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 800336c:	401a      	ands	r2, r3
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	4313      	orrs	r3, r2
 8003374:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	4a18      	ldr	r2, [pc, #96]	; (80033dc <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 800337a:	401a      	ands	r2, r3
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	4313      	orrs	r3, r2
 8003382:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	4a16      	ldr	r2, [pc, #88]	; (80033e0 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8003388:	401a      	ands	r2, r3
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4313      	orrs	r3, r2
 8003390:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	4a13      	ldr	r2, [pc, #76]	; (80033e4 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8003396:	401a      	ands	r2, r3
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	691b      	ldr	r3, [r3, #16]
 800339c:	4313      	orrs	r3, r2
 800339e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	4a11      	ldr	r2, [pc, #68]	; (80033e8 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 80033a4:	401a      	ands	r2, r3
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	695b      	ldr	r3, [r3, #20]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	4a0e      	ldr	r2, [pc, #56]	; (80033ec <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 80033b2:	401a      	ands	r2, r3
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	69db      	ldr	r3, [r3, #28]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	68fa      	ldr	r2, [r7, #12]
 80033c2:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	223c      	movs	r2, #60	; 0x3c
 80033c8:	2100      	movs	r1, #0
 80033ca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80033cc:	2300      	movs	r3, #0
}
 80033ce:	0018      	movs	r0, r3
 80033d0:	46bd      	mov	sp, r7
 80033d2:	b004      	add	sp, #16
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	46c0      	nop			; (mov r8, r8)
 80033d8:	fffffcff 	.word	0xfffffcff
 80033dc:	fffffbff 	.word	0xfffffbff
 80033e0:	fffff7ff 	.word	0xfffff7ff
 80033e4:	ffffefff 	.word	0xffffefff
 80033e8:	ffffdfff 	.word	0xffffdfff
 80033ec:	ffffbfff 	.word	0xffffbfff

080033f0 <setIRDutyCycle>:
//Set the duty cycle of the IR LED. The higher the duty
//ratio, the faster the response time achieved with higher power
//consumption. For example, PS_Duty = 1/320, peak IRED current = 100 mA,
//averaged current consumption is 100 mA/320 = 0.3125 mA.
void setIRDutyCycle(uint16_t dutyValue)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	0002      	movs	r2, r0
 80033f8:	1dbb      	adds	r3, r7, #6
 80033fa:	801a      	strh	r2, [r3, #0]
  if(dutyValue > 320 - 1) dutyValue = VCNL4040_PS_DUTY_320;
 80033fc:	1dbb      	adds	r3, r7, #6
 80033fe:	881a      	ldrh	r2, [r3, #0]
 8003400:	23a0      	movs	r3, #160	; 0xa0
 8003402:	005b      	lsls	r3, r3, #1
 8003404:	429a      	cmp	r2, r3
 8003406:	d303      	bcc.n	8003410 <setIRDutyCycle+0x20>
 8003408:	22c0      	movs	r2, #192	; 0xc0
 800340a:	1dbb      	adds	r3, r7, #6
 800340c:	801a      	strh	r2, [r3, #0]
 800340e:	e012      	b.n	8003436 <setIRDutyCycle+0x46>
  else if(dutyValue > 160 - 1) dutyValue = VCNL4040_PS_DUTY_160;
 8003410:	1dbb      	adds	r3, r7, #6
 8003412:	881b      	ldrh	r3, [r3, #0]
 8003414:	2b9f      	cmp	r3, #159	; 0x9f
 8003416:	d903      	bls.n	8003420 <setIRDutyCycle+0x30>
 8003418:	2280      	movs	r2, #128	; 0x80
 800341a:	1dbb      	adds	r3, r7, #6
 800341c:	801a      	strh	r2, [r3, #0]
 800341e:	e00a      	b.n	8003436 <setIRDutyCycle+0x46>
  else if(dutyValue > 80 - 1) dutyValue = VCNL4040_PS_DUTY_80;
 8003420:	1dbb      	adds	r3, r7, #6
 8003422:	881b      	ldrh	r3, [r3, #0]
 8003424:	2b4f      	cmp	r3, #79	; 0x4f
 8003426:	d903      	bls.n	8003430 <setIRDutyCycle+0x40>
 8003428:	2240      	movs	r2, #64	; 0x40
 800342a:	1dbb      	adds	r3, r7, #6
 800342c:	801a      	strh	r2, [r3, #0]
 800342e:	e002      	b.n	8003436 <setIRDutyCycle+0x46>
  else dutyValue = VCNL4040_PS_DUTY_40;
 8003430:	2200      	movs	r2, #0
 8003432:	1dbb      	adds	r3, r7, #6
 8003434:	801a      	strh	r2, [r3, #0]

  bitMask(VCNL4040_PS_CONF1, LOWER, VCNL4040_PS_DUTY_MASK, dutyValue);
 8003436:	223f      	movs	r2, #63	; 0x3f
 8003438:	1dbb      	adds	r3, r7, #6
 800343a:	881b      	ldrh	r3, [r3, #0]
 800343c:	b2db      	uxtb	r3, r3
 800343e:	2101      	movs	r1, #1
 8003440:	2003      	movs	r0, #3
 8003442:	f000 f943 	bl	80036cc <bitMask>
}
 8003446:	46c0      	nop			; (mov r8, r8)
 8003448:	46bd      	mov	sp, r7
 800344a:	b002      	add	sp, #8
 800344c:	bd80      	pop	{r7, pc}

0800344e <setProxIntegrationTime>:
  bitMask(VCNL4040_ALS_CONF, LOWER, VCNL4040_ALS_IT_MASK, timeValue);
}

//Sets the integration time for the proximity sensor
void setProxIntegrationTime(uint8_t timeValue)
{
 800344e:	b580      	push	{r7, lr}
 8003450:	b082      	sub	sp, #8
 8003452:	af00      	add	r7, sp, #0
 8003454:	0002      	movs	r2, r0
 8003456:	1dfb      	adds	r3, r7, #7
 8003458:	701a      	strb	r2, [r3, #0]
  if(timeValue > 8 - 1) timeValue = VCNL4040_PS_IT_8T;
 800345a:	1dfb      	adds	r3, r7, #7
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	2b07      	cmp	r3, #7
 8003460:	d903      	bls.n	800346a <setProxIntegrationTime+0x1c>
 8003462:	1dfb      	adds	r3, r7, #7
 8003464:	220e      	movs	r2, #14
 8003466:	701a      	strb	r2, [r3, #0]
 8003468:	e01a      	b.n	80034a0 <setProxIntegrationTime+0x52>
  else if(timeValue > 4 - 1) timeValue = VCNL4040_PS_IT_4T;
 800346a:	1dfb      	adds	r3, r7, #7
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	2b03      	cmp	r3, #3
 8003470:	d903      	bls.n	800347a <setProxIntegrationTime+0x2c>
 8003472:	1dfb      	adds	r3, r7, #7
 8003474:	220c      	movs	r2, #12
 8003476:	701a      	strb	r2, [r3, #0]
 8003478:	e012      	b.n	80034a0 <setProxIntegrationTime+0x52>
  else if(timeValue > 3 - 1) timeValue = VCNL4040_PS_IT_3T;
 800347a:	1dfb      	adds	r3, r7, #7
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	2b02      	cmp	r3, #2
 8003480:	d903      	bls.n	800348a <setProxIntegrationTime+0x3c>
 8003482:	1dfb      	adds	r3, r7, #7
 8003484:	2208      	movs	r2, #8
 8003486:	701a      	strb	r2, [r3, #0]
 8003488:	e00a      	b.n	80034a0 <setProxIntegrationTime+0x52>
  else if(timeValue > 2 - 1) timeValue = VCNL4040_PS_IT_2T;
 800348a:	1dfb      	adds	r3, r7, #7
 800348c:	781b      	ldrb	r3, [r3, #0]
 800348e:	2b01      	cmp	r3, #1
 8003490:	d903      	bls.n	800349a <setProxIntegrationTime+0x4c>
 8003492:	1dfb      	adds	r3, r7, #7
 8003494:	2204      	movs	r2, #4
 8003496:	701a      	strb	r2, [r3, #0]
 8003498:	e002      	b.n	80034a0 <setProxIntegrationTime+0x52>
  else timeValue = VCNL4040_PS_IT_1T;
 800349a:	1dfb      	adds	r3, r7, #7
 800349c:	2200      	movs	r2, #0
 800349e:	701a      	strb	r2, [r3, #0]

  bitMask(VCNL4040_PS_CONF1, LOWER, VCNL4040_PS_IT_MASK, timeValue);
 80034a0:	22f1      	movs	r2, #241	; 0xf1
 80034a2:	1dfb      	adds	r3, r7, #7
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	2101      	movs	r1, #1
 80034a8:	2003      	movs	r0, #3
 80034aa:	f000 f90f 	bl	80036cc <bitMask>
}
 80034ae:	46c0      	nop			; (mov r8, r8)
 80034b0:	46bd      	mov	sp, r7
 80034b2:	b002      	add	sp, #8
 80034b4:	bd80      	pop	{r7, pc}

080034b6 <powerOnProximity>:

//Power on the prox sensing portion of the device
void powerOnProximity(void)
{
 80034b6:	b580      	push	{r7, lr}
 80034b8:	af00      	add	r7, sp, #0
  bitMask(VCNL4040_PS_CONF1, LOWER, VCNL4040_PS_SD_MASK, VCNL4040_PS_SD_POWER_ON);
 80034ba:	22fe      	movs	r2, #254	; 0xfe
 80034bc:	2300      	movs	r3, #0
 80034be:	2101      	movs	r1, #1
 80034c0:	2003      	movs	r0, #3
 80034c2:	f000 f903 	bl	80036cc <bitMask>
}
 80034c6:	46c0      	nop			; (mov r8, r8)
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}

080034cc <setProxResolution>:
  bitMask(VCNL4040_PS_CONF1, LOWER, VCNL4040_PS_SD_MASK, VCNL4040_PS_SD_POWER_OFF);
}

//Sets the proximity resolution
void setProxResolution(uint8_t resolutionValue)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b082      	sub	sp, #8
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	0002      	movs	r2, r0
 80034d4:	1dfb      	adds	r3, r7, #7
 80034d6:	701a      	strb	r2, [r3, #0]
	if(resolutionValue > 16 - 1) resolutionValue = VCNL4040_PS_HD_16_BIT;
 80034d8:	1dfb      	adds	r3, r7, #7
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	2b0f      	cmp	r3, #15
 80034de:	d903      	bls.n	80034e8 <setProxResolution+0x1c>
 80034e0:	1dfb      	adds	r3, r7, #7
 80034e2:	2208      	movs	r2, #8
 80034e4:	701a      	strb	r2, [r3, #0]
 80034e6:	e002      	b.n	80034ee <setProxResolution+0x22>
	else resolutionValue = VCNL4040_PS_HD_12_BIT;
 80034e8:	1dfb      	adds	r3, r7, #7
 80034ea:	2200      	movs	r2, #0
 80034ec:	701a      	strb	r2, [r3, #0]

  bitMask(VCNL4040_PS_CONF2, UPPER, VCNL4040_PS_HD_MASK, resolutionValue);
 80034ee:	22f7      	movs	r2, #247	; 0xf7
 80034f0:	1dfb      	adds	r3, r7, #7
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	2100      	movs	r1, #0
 80034f6:	2003      	movs	r0, #3
 80034f8:	f000 f8e8 	bl	80036cc <bitMask>
}
 80034fc:	46c0      	nop			; (mov r8, r8)
 80034fe:	46bd      	mov	sp, r7
 8003500:	b002      	add	sp, #8
 8003502:	bd80      	pop	{r7, pc}

08003504 <enableSmartPersistance>:
//Enable smart persistance
//To accelerate the PS response time, smart
//persistence prevents the misjudgment of proximity sensing
//but also keeps a fast response time.
void enableSmartPersistance(void)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	af00      	add	r7, sp, #0
  bitMask(VCNL4040_PS_CONF3, LOWER, VCNL4040_PS_SMART_PERS_MASK, VCNL4040_PS_SMART_PERS_ENABLE);
 8003508:	22ef      	movs	r2, #239	; 0xef
 800350a:	2302      	movs	r3, #2
 800350c:	2101      	movs	r1, #1
 800350e:	2004      	movs	r0, #4
 8003510:	f000 f8dc 	bl	80036cc <bitMask>
}
 8003514:	46c0      	nop			; (mov r8, r8)
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}

0800351a <setLEDCurrent>:
  bitMask(VCNL4040_PS_MS, UPPER, VCNL4040_PS_MS_MASK, VCNL4040_PS_MS_DISABLE);
}

//Set the IR LED sink current to one of 8 settings
void setLEDCurrent(uint8_t currentValue)
{
 800351a:	b580      	push	{r7, lr}
 800351c:	b082      	sub	sp, #8
 800351e:	af00      	add	r7, sp, #0
 8003520:	0002      	movs	r2, r0
 8003522:	1dfb      	adds	r3, r7, #7
 8003524:	701a      	strb	r2, [r3, #0]
	if(currentValue > 200 - 1) currentValue = VCNL4040_LED_200MA;
 8003526:	1dfb      	adds	r3, r7, #7
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	2bc7      	cmp	r3, #199	; 0xc7
 800352c:	d903      	bls.n	8003536 <setLEDCurrent+0x1c>
 800352e:	1dfb      	adds	r3, r7, #7
 8003530:	2207      	movs	r2, #7
 8003532:	701a      	strb	r2, [r3, #0]
 8003534:	e032      	b.n	800359c <setLEDCurrent+0x82>
	else if(currentValue > 180 - 1) currentValue = VCNL4040_LED_180MA;
 8003536:	1dfb      	adds	r3, r7, #7
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	2bb3      	cmp	r3, #179	; 0xb3
 800353c:	d903      	bls.n	8003546 <setLEDCurrent+0x2c>
 800353e:	1dfb      	adds	r3, r7, #7
 8003540:	2206      	movs	r2, #6
 8003542:	701a      	strb	r2, [r3, #0]
 8003544:	e02a      	b.n	800359c <setLEDCurrent+0x82>
	else if(currentValue > 160 - 1) currentValue = VCNL4040_LED_160MA;
 8003546:	1dfb      	adds	r3, r7, #7
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	2b9f      	cmp	r3, #159	; 0x9f
 800354c:	d903      	bls.n	8003556 <setLEDCurrent+0x3c>
 800354e:	1dfb      	adds	r3, r7, #7
 8003550:	2205      	movs	r2, #5
 8003552:	701a      	strb	r2, [r3, #0]
 8003554:	e022      	b.n	800359c <setLEDCurrent+0x82>
	else if(currentValue > 140 - 1) currentValue = VCNL4040_LED_140MA;
 8003556:	1dfb      	adds	r3, r7, #7
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	2b8b      	cmp	r3, #139	; 0x8b
 800355c:	d903      	bls.n	8003566 <setLEDCurrent+0x4c>
 800355e:	1dfb      	adds	r3, r7, #7
 8003560:	2204      	movs	r2, #4
 8003562:	701a      	strb	r2, [r3, #0]
 8003564:	e01a      	b.n	800359c <setLEDCurrent+0x82>
	else if(currentValue > 120 - 1) currentValue = VCNL4040_LED_120MA;
 8003566:	1dfb      	adds	r3, r7, #7
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	2b77      	cmp	r3, #119	; 0x77
 800356c:	d903      	bls.n	8003576 <setLEDCurrent+0x5c>
 800356e:	1dfb      	adds	r3, r7, #7
 8003570:	2203      	movs	r2, #3
 8003572:	701a      	strb	r2, [r3, #0]
 8003574:	e012      	b.n	800359c <setLEDCurrent+0x82>
	else if(currentValue > 100 - 1) currentValue = VCNL4040_LED_100MA;
 8003576:	1dfb      	adds	r3, r7, #7
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	2b63      	cmp	r3, #99	; 0x63
 800357c:	d903      	bls.n	8003586 <setLEDCurrent+0x6c>
 800357e:	1dfb      	adds	r3, r7, #7
 8003580:	2202      	movs	r2, #2
 8003582:	701a      	strb	r2, [r3, #0]
 8003584:	e00a      	b.n	800359c <setLEDCurrent+0x82>
	else if(currentValue > 75 - 1) currentValue = VCNL4040_LED_75MA;
 8003586:	1dfb      	adds	r3, r7, #7
 8003588:	781b      	ldrb	r3, [r3, #0]
 800358a:	2b4a      	cmp	r3, #74	; 0x4a
 800358c:	d903      	bls.n	8003596 <setLEDCurrent+0x7c>
 800358e:	1dfb      	adds	r3, r7, #7
 8003590:	2201      	movs	r2, #1
 8003592:	701a      	strb	r2, [r3, #0]
 8003594:	e002      	b.n	800359c <setLEDCurrent+0x82>
	else currentValue = VCNL4040_LED_50MA;
 8003596:	1dfb      	adds	r3, r7, #7
 8003598:	2200      	movs	r2, #0
 800359a:	701a      	strb	r2, [r3, #0]

	bitMask(VCNL4040_PS_MS, UPPER, VCNL4040_LED_I_MASK, currentValue);
 800359c:	22f8      	movs	r2, #248	; 0xf8
 800359e:	1dfb      	adds	r3, r7, #7
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	2100      	movs	r1, #0
 80035a4:	2004      	movs	r0, #4
 80035a6:	f000 f891 	bl	80036cc <bitMask>
}
 80035aa:	46c0      	nop			; (mov r8, r8)
 80035ac:	46bd      	mov	sp, r7
 80035ae:	b002      	add	sp, #8
 80035b0:	bd80      	pop	{r7, pc}

080035b2 <writeCommandLower>:
}
*/

//Given a command code (address) write to the lower byte without affecting the upper byte
bool writeCommandLower(uint8_t commandCode, uint8_t newValue)
{
 80035b2:	b5b0      	push	{r4, r5, r7, lr}
 80035b4:	b084      	sub	sp, #16
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	0002      	movs	r2, r0
 80035ba:	1dfb      	adds	r3, r7, #7
 80035bc:	701a      	strb	r2, [r3, #0]
 80035be:	1dbb      	adds	r3, r7, #6
 80035c0:	1c0a      	adds	r2, r1, #0
 80035c2:	701a      	strb	r2, [r3, #0]
  uint16_t commandValue = readCommand(commandCode);
 80035c4:	250e      	movs	r5, #14
 80035c6:	197c      	adds	r4, r7, r5
 80035c8:	1dfb      	adds	r3, r7, #7
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	0018      	movs	r0, r3
 80035ce:	f7fd f883 	bl	80006d8 <readCommand>
 80035d2:	0003      	movs	r3, r0
 80035d4:	8023      	strh	r3, [r4, #0]
  commandValue &= 0xFF00; //Remove lower 8 bits
 80035d6:	0028      	movs	r0, r5
 80035d8:	183b      	adds	r3, r7, r0
 80035da:	183a      	adds	r2, r7, r0
 80035dc:	8812      	ldrh	r2, [r2, #0]
 80035de:	21ff      	movs	r1, #255	; 0xff
 80035e0:	438a      	bics	r2, r1
 80035e2:	801a      	strh	r2, [r3, #0]
  commandValue |= (uint16_t)newValue; //Mask in
 80035e4:	1dbb      	adds	r3, r7, #6
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	b299      	uxth	r1, r3
 80035ea:	183b      	adds	r3, r7, r0
 80035ec:	183a      	adds	r2, r7, r0
 80035ee:	8812      	ldrh	r2, [r2, #0]
 80035f0:	430a      	orrs	r2, r1
 80035f2:	801a      	strh	r2, [r3, #0]
  return (writeCommand(commandCode, commandValue));
 80035f4:	183b      	adds	r3, r7, r0
 80035f6:	881a      	ldrh	r2, [r3, #0]
 80035f8:	1dfb      	adds	r3, r7, #7
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	0011      	movs	r1, r2
 80035fe:	0018      	movs	r0, r3
 8003600:	f7fd f8a2 	bl	8000748 <writeCommand>
 8003604:	0003      	movs	r3, r0
}
 8003606:	0018      	movs	r0, r3
 8003608:	46bd      	mov	sp, r7
 800360a:	b004      	add	sp, #16
 800360c:	bdb0      	pop	{r4, r5, r7, pc}

0800360e <writeCommandUpper>:

//Given a command code (address) write to the upper byte without affecting the lower byte
bool writeCommandUpper(uint8_t commandCode, uint8_t newValue)
{
 800360e:	b5b0      	push	{r4, r5, r7, lr}
 8003610:	b084      	sub	sp, #16
 8003612:	af00      	add	r7, sp, #0
 8003614:	0002      	movs	r2, r0
 8003616:	1dfb      	adds	r3, r7, #7
 8003618:	701a      	strb	r2, [r3, #0]
 800361a:	1dbb      	adds	r3, r7, #6
 800361c:	1c0a      	adds	r2, r1, #0
 800361e:	701a      	strb	r2, [r3, #0]
  uint16_t commandValue = readCommand(commandCode);
 8003620:	250e      	movs	r5, #14
 8003622:	197c      	adds	r4, r7, r5
 8003624:	1dfb      	adds	r3, r7, #7
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	0018      	movs	r0, r3
 800362a:	f7fd f855 	bl	80006d8 <readCommand>
 800362e:	0003      	movs	r3, r0
 8003630:	8023      	strh	r3, [r4, #0]
  commandValue &= 0x00FF; //Remove upper 8 bits
 8003632:	0028      	movs	r0, r5
 8003634:	183b      	adds	r3, r7, r0
 8003636:	183a      	adds	r2, r7, r0
 8003638:	8812      	ldrh	r2, [r2, #0]
 800363a:	21ff      	movs	r1, #255	; 0xff
 800363c:	400a      	ands	r2, r1
 800363e:	801a      	strh	r2, [r3, #0]
  commandValue |= (uint16_t)newValue << 8; //Mask in
 8003640:	1dbb      	adds	r3, r7, #6
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	021b      	lsls	r3, r3, #8
 8003646:	b21a      	sxth	r2, r3
 8003648:	183b      	adds	r3, r7, r0
 800364a:	2100      	movs	r1, #0
 800364c:	5e5b      	ldrsh	r3, [r3, r1]
 800364e:	4313      	orrs	r3, r2
 8003650:	b21a      	sxth	r2, r3
 8003652:	183b      	adds	r3, r7, r0
 8003654:	801a      	strh	r2, [r3, #0]
  return (writeCommand(commandCode, commandValue));
 8003656:	183b      	adds	r3, r7, r0
 8003658:	881a      	ldrh	r2, [r3, #0]
 800365a:	1dfb      	adds	r3, r7, #7
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	0011      	movs	r1, r2
 8003660:	0018      	movs	r0, r3
 8003662:	f7fd f871 	bl	8000748 <writeCommand>
 8003666:	0003      	movs	r3, r0
}
 8003668:	0018      	movs	r0, r3
 800366a:	46bd      	mov	sp, r7
 800366c:	b004      	add	sp, #16
 800366e:	bdb0      	pop	{r4, r5, r7, pc}

08003670 <readCommandLower>:

//Given a command code (address) read the lower byte
uint8_t readCommandLower(uint8_t commandCode)
{
 8003670:	b5b0      	push	{r4, r5, r7, lr}
 8003672:	b084      	sub	sp, #16
 8003674:	af00      	add	r7, sp, #0
 8003676:	0002      	movs	r2, r0
 8003678:	1dfb      	adds	r3, r7, #7
 800367a:	701a      	strb	r2, [r3, #0]
  uint16_t commandValue = readCommand(commandCode);
 800367c:	250e      	movs	r5, #14
 800367e:	197c      	adds	r4, r7, r5
 8003680:	1dfb      	adds	r3, r7, #7
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	0018      	movs	r0, r3
 8003686:	f7fd f827 	bl	80006d8 <readCommand>
 800368a:	0003      	movs	r3, r0
 800368c:	8023      	strh	r3, [r4, #0]
  return (commandValue & 0xFF);
 800368e:	197b      	adds	r3, r7, r5
 8003690:	881b      	ldrh	r3, [r3, #0]
 8003692:	b2db      	uxtb	r3, r3
}
 8003694:	0018      	movs	r0, r3
 8003696:	46bd      	mov	sp, r7
 8003698:	b004      	add	sp, #16
 800369a:	bdb0      	pop	{r4, r5, r7, pc}

0800369c <readCommandUpper>:

//Given a command code (address) read the upper byte
uint8_t readCommandUpper(uint8_t commandCode)
{
 800369c:	b5b0      	push	{r4, r5, r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	0002      	movs	r2, r0
 80036a4:	1dfb      	adds	r3, r7, #7
 80036a6:	701a      	strb	r2, [r3, #0]
  uint16_t commandValue = readCommand(commandCode);
 80036a8:	250e      	movs	r5, #14
 80036aa:	197c      	adds	r4, r7, r5
 80036ac:	1dfb      	adds	r3, r7, #7
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	0018      	movs	r0, r3
 80036b2:	f7fd f811 	bl	80006d8 <readCommand>
 80036b6:	0003      	movs	r3, r0
 80036b8:	8023      	strh	r3, [r4, #0]
  return (commandValue >> 8);
 80036ba:	197b      	adds	r3, r7, r5
 80036bc:	881b      	ldrh	r3, [r3, #0]
 80036be:	0a1b      	lsrs	r3, r3, #8
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	b2db      	uxtb	r3, r3
}
 80036c4:	0018      	movs	r0, r3
 80036c6:	46bd      	mov	sp, r7
 80036c8:	b004      	add	sp, #16
 80036ca:	bdb0      	pop	{r4, r5, r7, pc}

080036cc <bitMask>:
//commandHeight is used to select between the upper or lower byte of command register
//Example:
//Write dutyValue into PS_CONF1, lower byte, using the Duty_Mask
//bitMask(VCNL4040_PS_CONF1, LOWER, VCNL4040_PS_DUTY_MASK, dutyValue);
void bitMask(uint8_t commandAddress, bool commandHeight, uint8_t mask, uint8_t thing)
{
 80036cc:	b5b0      	push	{r4, r5, r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	0005      	movs	r5, r0
 80036d4:	000c      	movs	r4, r1
 80036d6:	0010      	movs	r0, r2
 80036d8:	0019      	movs	r1, r3
 80036da:	1dfb      	adds	r3, r7, #7
 80036dc:	1c2a      	adds	r2, r5, #0
 80036de:	701a      	strb	r2, [r3, #0]
 80036e0:	1dbb      	adds	r3, r7, #6
 80036e2:	1c22      	adds	r2, r4, #0
 80036e4:	701a      	strb	r2, [r3, #0]
 80036e6:	1d7b      	adds	r3, r7, #5
 80036e8:	1c02      	adds	r2, r0, #0
 80036ea:	701a      	strb	r2, [r3, #0]
 80036ec:	1d3b      	adds	r3, r7, #4
 80036ee:	1c0a      	adds	r2, r1, #0
 80036f0:	701a      	strb	r2, [r3, #0]
  // Grab current register context
  uint8_t registerContents;
  if (commandHeight == LOWER) registerContents = readCommandLower(commandAddress);
 80036f2:	1dbb      	adds	r3, r7, #6
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d009      	beq.n	800370e <bitMask+0x42>
 80036fa:	230f      	movs	r3, #15
 80036fc:	18fc      	adds	r4, r7, r3
 80036fe:	1dfb      	adds	r3, r7, #7
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	0018      	movs	r0, r3
 8003704:	f7ff ffb4 	bl	8003670 <readCommandLower>
 8003708:	0003      	movs	r3, r0
 800370a:	7023      	strb	r3, [r4, #0]
 800370c:	e008      	b.n	8003720 <bitMask+0x54>
  else registerContents = readCommandUpper(commandAddress);
 800370e:	230f      	movs	r3, #15
 8003710:	18fc      	adds	r4, r7, r3
 8003712:	1dfb      	adds	r3, r7, #7
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	0018      	movs	r0, r3
 8003718:	f7ff ffc0 	bl	800369c <readCommandUpper>
 800371c:	0003      	movs	r3, r0
 800371e:	7023      	strb	r3, [r4, #0]

  // Zero-out the portions of the register we're interested in
  registerContents &= mask;
 8003720:	200f      	movs	r0, #15
 8003722:	183b      	adds	r3, r7, r0
 8003724:	183a      	adds	r2, r7, r0
 8003726:	1d79      	adds	r1, r7, #5
 8003728:	7812      	ldrb	r2, [r2, #0]
 800372a:	7809      	ldrb	r1, [r1, #0]
 800372c:	400a      	ands	r2, r1
 800372e:	701a      	strb	r2, [r3, #0]

  // Mask in new thing
  registerContents |= thing;
 8003730:	183b      	adds	r3, r7, r0
 8003732:	1839      	adds	r1, r7, r0
 8003734:	1d3a      	adds	r2, r7, #4
 8003736:	7809      	ldrb	r1, [r1, #0]
 8003738:	7812      	ldrb	r2, [r2, #0]
 800373a:	430a      	orrs	r2, r1
 800373c:	701a      	strb	r2, [r3, #0]

  // Change contents
  if (commandHeight == LOWER) writeCommandLower(commandAddress, registerContents);
 800373e:	1dbb      	adds	r3, r7, #6
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d008      	beq.n	8003758 <bitMask+0x8c>
 8003746:	183b      	adds	r3, r7, r0
 8003748:	781a      	ldrb	r2, [r3, #0]
 800374a:	1dfb      	adds	r3, r7, #7
 800374c:	781b      	ldrb	r3, [r3, #0]
 800374e:	0011      	movs	r1, r2
 8003750:	0018      	movs	r0, r3
 8003752:	f7ff ff2e 	bl	80035b2 <writeCommandLower>
  else writeCommandUpper(commandAddress, registerContents);
}
 8003756:	e008      	b.n	800376a <bitMask+0x9e>
  else writeCommandUpper(commandAddress, registerContents);
 8003758:	230f      	movs	r3, #15
 800375a:	18fb      	adds	r3, r7, r3
 800375c:	781a      	ldrb	r2, [r3, #0]
 800375e:	1dfb      	adds	r3, r7, #7
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	0011      	movs	r1, r2
 8003764:	0018      	movs	r0, r3
 8003766:	f7ff ff52 	bl	800360e <writeCommandUpper>
}
 800376a:	46c0      	nop			; (mov r8, r8)
 800376c:	46bd      	mov	sp, r7
 800376e:	b004      	add	sp, #16
 8003770:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003774 <__libc_init_array>:
 8003774:	b570      	push	{r4, r5, r6, lr}
 8003776:	2600      	movs	r6, #0
 8003778:	4d0c      	ldr	r5, [pc, #48]	; (80037ac <__libc_init_array+0x38>)
 800377a:	4c0d      	ldr	r4, [pc, #52]	; (80037b0 <__libc_init_array+0x3c>)
 800377c:	1b64      	subs	r4, r4, r5
 800377e:	10a4      	asrs	r4, r4, #2
 8003780:	42a6      	cmp	r6, r4
 8003782:	d109      	bne.n	8003798 <__libc_init_array+0x24>
 8003784:	2600      	movs	r6, #0
 8003786:	f000 f821 	bl	80037cc <_init>
 800378a:	4d0a      	ldr	r5, [pc, #40]	; (80037b4 <__libc_init_array+0x40>)
 800378c:	4c0a      	ldr	r4, [pc, #40]	; (80037b8 <__libc_init_array+0x44>)
 800378e:	1b64      	subs	r4, r4, r5
 8003790:	10a4      	asrs	r4, r4, #2
 8003792:	42a6      	cmp	r6, r4
 8003794:	d105      	bne.n	80037a2 <__libc_init_array+0x2e>
 8003796:	bd70      	pop	{r4, r5, r6, pc}
 8003798:	00b3      	lsls	r3, r6, #2
 800379a:	58eb      	ldr	r3, [r5, r3]
 800379c:	4798      	blx	r3
 800379e:	3601      	adds	r6, #1
 80037a0:	e7ee      	b.n	8003780 <__libc_init_array+0xc>
 80037a2:	00b3      	lsls	r3, r6, #2
 80037a4:	58eb      	ldr	r3, [r5, r3]
 80037a6:	4798      	blx	r3
 80037a8:	3601      	adds	r6, #1
 80037aa:	e7f2      	b.n	8003792 <__libc_init_array+0x1e>
 80037ac:	08003814 	.word	0x08003814
 80037b0:	08003814 	.word	0x08003814
 80037b4:	08003814 	.word	0x08003814
 80037b8:	08003818 	.word	0x08003818

080037bc <memset>:
 80037bc:	0003      	movs	r3, r0
 80037be:	1882      	adds	r2, r0, r2
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d100      	bne.n	80037c6 <memset+0xa>
 80037c4:	4770      	bx	lr
 80037c6:	7019      	strb	r1, [r3, #0]
 80037c8:	3301      	adds	r3, #1
 80037ca:	e7f9      	b.n	80037c0 <memset+0x4>

080037cc <_init>:
 80037cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ce:	46c0      	nop			; (mov r8, r8)
 80037d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037d2:	bc08      	pop	{r3}
 80037d4:	469e      	mov	lr, r3
 80037d6:	4770      	bx	lr

080037d8 <_fini>:
 80037d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037da:	46c0      	nop			; (mov r8, r8)
 80037dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037de:	bc08      	pop	{r3}
 80037e0:	469e      	mov	lr, r3
 80037e2:	4770      	bx	lr
