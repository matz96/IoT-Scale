
Pro3E_RT_Mikrocotroller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002288  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002348  08002348  00012348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002378  08002378  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002378  08002378  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002378  08002378  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002378  08002378  00012378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800237c  0800237c  0001237c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002380  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  2000000c  0800238c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000b4  0800238c  000200b4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008cb7  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000160b  00000000  00000000  00028ceb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009b8  00000000  00000000  0002a2f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000900  00000000  00000000  0002acb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fd43  00000000  00000000  0002b5b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ab32  00000000  00000000  0003b2f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000633c9  00000000  00000000  00045e25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000a91ee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022d8  00000000  00000000  000a9244  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002330 	.word	0x08002330

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002330 	.word	0x08002330

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 faec 	bl	8000800 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f807 	bl	800023a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f93c 	bl	80004a8 <MX_GPIO_Init>
  MX_ADC_Init();
 8000230:	f000 f84a 	bl	80002c8 <MX_ADC_Init>
  MX_TIM1_Init();
 8000234:	f000 f8a4 	bl	8000380 <MX_TIM1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000238:	e7fe      	b.n	8000238 <main+0x18>

0800023a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800023a:	b590      	push	{r4, r7, lr}
 800023c:	b091      	sub	sp, #68	; 0x44
 800023e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000240:	2410      	movs	r4, #16
 8000242:	193b      	adds	r3, r7, r4
 8000244:	0018      	movs	r0, r3
 8000246:	2330      	movs	r3, #48	; 0x30
 8000248:	001a      	movs	r2, r3
 800024a:	2100      	movs	r1, #0
 800024c:	f002 f868 	bl	8002320 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000250:	003b      	movs	r3, r7
 8000252:	0018      	movs	r0, r3
 8000254:	2310      	movs	r3, #16
 8000256:	001a      	movs	r2, r3
 8000258:	2100      	movs	r1, #0
 800025a:	f002 f861 	bl	8002320 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 800025e:	0021      	movs	r1, r4
 8000260:	187b      	adds	r3, r7, r1
 8000262:	2212      	movs	r2, #18
 8000264:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000266:	187b      	adds	r3, r7, r1
 8000268:	2201      	movs	r2, #1
 800026a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 800026c:	187b      	adds	r3, r7, r1
 800026e:	2201      	movs	r2, #1
 8000270:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000272:	187b      	adds	r3, r7, r1
 8000274:	2210      	movs	r2, #16
 8000276:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000278:	187b      	adds	r3, r7, r1
 800027a:	2210      	movs	r2, #16
 800027c:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800027e:	187b      	adds	r3, r7, r1
 8000280:	2200      	movs	r2, #0
 8000282:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000284:	187b      	adds	r3, r7, r1
 8000286:	0018      	movs	r0, r3
 8000288:	f000 ff96 	bl	80011b8 <HAL_RCC_OscConfig>
 800028c:	1e03      	subs	r3, r0, #0
 800028e:	d001      	beq.n	8000294 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8000290:	f000 f9a0 	bl	80005d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000294:	003b      	movs	r3, r7
 8000296:	2207      	movs	r2, #7
 8000298:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800029a:	003b      	movs	r3, r7
 800029c:	2200      	movs	r2, #0
 800029e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a0:	003b      	movs	r3, r7
 80002a2:	2200      	movs	r2, #0
 80002a4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002a6:	003b      	movs	r3, r7
 80002a8:	2200      	movs	r2, #0
 80002aa:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002ac:	003b      	movs	r3, r7
 80002ae:	2100      	movs	r1, #0
 80002b0:	0018      	movs	r0, r3
 80002b2:	f001 fa9f 	bl	80017f4 <HAL_RCC_ClockConfig>
 80002b6:	1e03      	subs	r3, r0, #0
 80002b8:	d001      	beq.n	80002be <SystemClock_Config+0x84>
  {
    Error_Handler();
 80002ba:	f000 f98b 	bl	80005d4 <Error_Handler>
  }
}
 80002be:	46c0      	nop			; (mov r8, r8)
 80002c0:	46bd      	mov	sp, r7
 80002c2:	b011      	add	sp, #68	; 0x44
 80002c4:	bd90      	pop	{r4, r7, pc}
	...

080002c8 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b084      	sub	sp, #16
 80002cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002ce:	1d3b      	adds	r3, r7, #4
 80002d0:	0018      	movs	r0, r3
 80002d2:	230c      	movs	r3, #12
 80002d4:	001a      	movs	r2, r3
 80002d6:	2100      	movs	r1, #0
 80002d8:	f002 f822 	bl	8002320 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80002dc:	4b26      	ldr	r3, [pc, #152]	; (8000378 <MX_ADC_Init+0xb0>)
 80002de:	4a27      	ldr	r2, [pc, #156]	; (800037c <MX_ADC_Init+0xb4>)
 80002e0:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80002e2:	4b25      	ldr	r3, [pc, #148]	; (8000378 <MX_ADC_Init+0xb0>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80002e8:	4b23      	ldr	r3, [pc, #140]	; (8000378 <MX_ADC_Init+0xb0>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002ee:	4b22      	ldr	r3, [pc, #136]	; (8000378 <MX_ADC_Init+0xb0>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80002f4:	4b20      	ldr	r3, [pc, #128]	; (8000378 <MX_ADC_Init+0xb0>)
 80002f6:	2201      	movs	r2, #1
 80002f8:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80002fa:	4b1f      	ldr	r3, [pc, #124]	; (8000378 <MX_ADC_Init+0xb0>)
 80002fc:	2204      	movs	r2, #4
 80002fe:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000300:	4b1d      	ldr	r3, [pc, #116]	; (8000378 <MX_ADC_Init+0xb0>)
 8000302:	2200      	movs	r2, #0
 8000304:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000306:	4b1c      	ldr	r3, [pc, #112]	; (8000378 <MX_ADC_Init+0xb0>)
 8000308:	2200      	movs	r2, #0
 800030a:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 800030c:	4b1a      	ldr	r3, [pc, #104]	; (8000378 <MX_ADC_Init+0xb0>)
 800030e:	2200      	movs	r2, #0
 8000310:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000312:	4b19      	ldr	r3, [pc, #100]	; (8000378 <MX_ADC_Init+0xb0>)
 8000314:	2200      	movs	r2, #0
 8000316:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000318:	4b17      	ldr	r3, [pc, #92]	; (8000378 <MX_ADC_Init+0xb0>)
 800031a:	22c2      	movs	r2, #194	; 0xc2
 800031c:	32ff      	adds	r2, #255	; 0xff
 800031e:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000320:	4b15      	ldr	r3, [pc, #84]	; (8000378 <MX_ADC_Init+0xb0>)
 8000322:	2200      	movs	r2, #0
 8000324:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000326:	4b14      	ldr	r3, [pc, #80]	; (8000378 <MX_ADC_Init+0xb0>)
 8000328:	2224      	movs	r2, #36	; 0x24
 800032a:	2100      	movs	r1, #0
 800032c:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800032e:	4b12      	ldr	r3, [pc, #72]	; (8000378 <MX_ADC_Init+0xb0>)
 8000330:	2201      	movs	r2, #1
 8000332:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000334:	4b10      	ldr	r3, [pc, #64]	; (8000378 <MX_ADC_Init+0xb0>)
 8000336:	0018      	movs	r0, r3
 8000338:	f000 fac6 	bl	80008c8 <HAL_ADC_Init>
 800033c:	1e03      	subs	r3, r0, #0
 800033e:	d001      	beq.n	8000344 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000340:	f000 f948 	bl	80005d4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000344:	1d3b      	adds	r3, r7, #4
 8000346:	2200      	movs	r2, #0
 8000348:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800034a:	1d3b      	adds	r3, r7, #4
 800034c:	2280      	movs	r2, #128	; 0x80
 800034e:	0152      	lsls	r2, r2, #5
 8000350:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000352:	1d3b      	adds	r3, r7, #4
 8000354:	2280      	movs	r2, #128	; 0x80
 8000356:	0552      	lsls	r2, r2, #21
 8000358:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800035a:	1d3a      	adds	r2, r7, #4
 800035c:	4b06      	ldr	r3, [pc, #24]	; (8000378 <MX_ADC_Init+0xb0>)
 800035e:	0011      	movs	r1, r2
 8000360:	0018      	movs	r0, r3
 8000362:	f000 fbf1 	bl	8000b48 <HAL_ADC_ConfigChannel>
 8000366:	1e03      	subs	r3, r0, #0
 8000368:	d001      	beq.n	800036e <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 800036a:	f000 f933 	bl	80005d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800036e:	46c0      	nop			; (mov r8, r8)
 8000370:	46bd      	mov	sp, r7
 8000372:	b004      	add	sp, #16
 8000374:	bd80      	pop	{r7, pc}
 8000376:	46c0      	nop			; (mov r8, r8)
 8000378:	20000070 	.word	0x20000070
 800037c:	40012400 	.word	0x40012400

08000380 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b092      	sub	sp, #72	; 0x48
 8000384:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000386:	2340      	movs	r3, #64	; 0x40
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	0018      	movs	r0, r3
 800038c:	2308      	movs	r3, #8
 800038e:	001a      	movs	r2, r3
 8000390:	2100      	movs	r1, #0
 8000392:	f001 ffc5 	bl	8002320 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000396:	2324      	movs	r3, #36	; 0x24
 8000398:	18fb      	adds	r3, r7, r3
 800039a:	0018      	movs	r0, r3
 800039c:	231c      	movs	r3, #28
 800039e:	001a      	movs	r2, r3
 80003a0:	2100      	movs	r1, #0
 80003a2:	f001 ffbd 	bl	8002320 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80003a6:	1d3b      	adds	r3, r7, #4
 80003a8:	0018      	movs	r0, r3
 80003aa:	2320      	movs	r3, #32
 80003ac:	001a      	movs	r2, r3
 80003ae:	2100      	movs	r1, #0
 80003b0:	f001 ffb6 	bl	8002320 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80003b4:	4b39      	ldr	r3, [pc, #228]	; (800049c <MX_TIM1_Init+0x11c>)
 80003b6:	4a3a      	ldr	r2, [pc, #232]	; (80004a0 <MX_TIM1_Init+0x120>)
 80003b8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80003ba:	4b38      	ldr	r3, [pc, #224]	; (800049c <MX_TIM1_Init+0x11c>)
 80003bc:	2200      	movs	r2, #0
 80003be:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003c0:	4b36      	ldr	r3, [pc, #216]	; (800049c <MX_TIM1_Init+0x11c>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80003c6:	4b35      	ldr	r3, [pc, #212]	; (800049c <MX_TIM1_Init+0x11c>)
 80003c8:	4a36      	ldr	r2, [pc, #216]	; (80004a4 <MX_TIM1_Init+0x124>)
 80003ca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003cc:	4b33      	ldr	r3, [pc, #204]	; (800049c <MX_TIM1_Init+0x11c>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80003d2:	4b32      	ldr	r3, [pc, #200]	; (800049c <MX_TIM1_Init+0x11c>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003d8:	4b30      	ldr	r3, [pc, #192]	; (800049c <MX_TIM1_Init+0x11c>)
 80003da:	2200      	movs	r2, #0
 80003dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80003de:	4b2f      	ldr	r3, [pc, #188]	; (800049c <MX_TIM1_Init+0x11c>)
 80003e0:	0018      	movs	r0, r3
 80003e2:	f001 fb3b 	bl	8001a5c <HAL_TIM_PWM_Init>
 80003e6:	1e03      	subs	r3, r0, #0
 80003e8:	d001      	beq.n	80003ee <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80003ea:	f000 f8f3 	bl	80005d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003ee:	2140      	movs	r1, #64	; 0x40
 80003f0:	187b      	adds	r3, r7, r1
 80003f2:	2200      	movs	r2, #0
 80003f4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003f6:	187b      	adds	r3, r7, r1
 80003f8:	2200      	movs	r2, #0
 80003fa:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80003fc:	187a      	adds	r2, r7, r1
 80003fe:	4b27      	ldr	r3, [pc, #156]	; (800049c <MX_TIM1_Init+0x11c>)
 8000400:	0011      	movs	r1, r2
 8000402:	0018      	movs	r0, r3
 8000404:	f001 feb2 	bl	800216c <HAL_TIMEx_MasterConfigSynchronization>
 8000408:	1e03      	subs	r3, r0, #0
 800040a:	d001      	beq.n	8000410 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800040c:	f000 f8e2 	bl	80005d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000410:	2124      	movs	r1, #36	; 0x24
 8000412:	187b      	adds	r3, r7, r1
 8000414:	2260      	movs	r2, #96	; 0x60
 8000416:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000418:	187b      	adds	r3, r7, r1
 800041a:	2200      	movs	r2, #0
 800041c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800041e:	187b      	adds	r3, r7, r1
 8000420:	2200      	movs	r2, #0
 8000422:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000424:	187b      	adds	r3, r7, r1
 8000426:	2200      	movs	r2, #0
 8000428:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800042a:	187b      	adds	r3, r7, r1
 800042c:	2200      	movs	r2, #0
 800042e:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000430:	187b      	adds	r3, r7, r1
 8000432:	2200      	movs	r2, #0
 8000434:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000436:	1879      	adds	r1, r7, r1
 8000438:	4b18      	ldr	r3, [pc, #96]	; (800049c <MX_TIM1_Init+0x11c>)
 800043a:	220c      	movs	r2, #12
 800043c:	0018      	movs	r0, r3
 800043e:	f001 fb5d 	bl	8001afc <HAL_TIM_PWM_ConfigChannel>
 8000442:	1e03      	subs	r3, r0, #0
 8000444:	d001      	beq.n	800044a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000446:	f000 f8c5 	bl	80005d4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800044a:	1d3b      	adds	r3, r7, #4
 800044c:	2200      	movs	r2, #0
 800044e:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000450:	1d3b      	adds	r3, r7, #4
 8000452:	2200      	movs	r2, #0
 8000454:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000456:	1d3b      	adds	r3, r7, #4
 8000458:	2200      	movs	r2, #0
 800045a:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800045c:	1d3b      	adds	r3, r7, #4
 800045e:	2200      	movs	r2, #0
 8000460:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000462:	1d3b      	adds	r3, r7, #4
 8000464:	2200      	movs	r2, #0
 8000466:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000468:	1d3b      	adds	r3, r7, #4
 800046a:	2280      	movs	r2, #128	; 0x80
 800046c:	0192      	lsls	r2, r2, #6
 800046e:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000470:	1d3b      	adds	r3, r7, #4
 8000472:	2200      	movs	r2, #0
 8000474:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000476:	1d3a      	adds	r2, r7, #4
 8000478:	4b08      	ldr	r3, [pc, #32]	; (800049c <MX_TIM1_Init+0x11c>)
 800047a:	0011      	movs	r1, r2
 800047c:	0018      	movs	r0, r3
 800047e:	f001 fecd 	bl	800221c <HAL_TIMEx_ConfigBreakDeadTime>
 8000482:	1e03      	subs	r3, r0, #0
 8000484:	d001      	beq.n	800048a <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 8000486:	f000 f8a5 	bl	80005d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800048a:	4b04      	ldr	r3, [pc, #16]	; (800049c <MX_TIM1_Init+0x11c>)
 800048c:	0018      	movs	r0, r3
 800048e:	f000 f931 	bl	80006f4 <HAL_TIM_MspPostInit>

}
 8000492:	46c0      	nop			; (mov r8, r8)
 8000494:	46bd      	mov	sp, r7
 8000496:	b012      	add	sp, #72	; 0x48
 8000498:	bd80      	pop	{r7, pc}
 800049a:	46c0      	nop			; (mov r8, r8)
 800049c:	20000028 	.word	0x20000028
 80004a0:	40012c00 	.word	0x40012c00
 80004a4:	0000ffff 	.word	0x0000ffff

080004a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004a8:	b590      	push	{r4, r7, lr}
 80004aa:	b089      	sub	sp, #36	; 0x24
 80004ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ae:	240c      	movs	r4, #12
 80004b0:	193b      	adds	r3, r7, r4
 80004b2:	0018      	movs	r0, r3
 80004b4:	2314      	movs	r3, #20
 80004b6:	001a      	movs	r2, r3
 80004b8:	2100      	movs	r1, #0
 80004ba:	f001 ff31 	bl	8002320 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004be:	4b42      	ldr	r3, [pc, #264]	; (80005c8 <MX_GPIO_Init+0x120>)
 80004c0:	695a      	ldr	r2, [r3, #20]
 80004c2:	4b41      	ldr	r3, [pc, #260]	; (80005c8 <MX_GPIO_Init+0x120>)
 80004c4:	2180      	movs	r1, #128	; 0x80
 80004c6:	0309      	lsls	r1, r1, #12
 80004c8:	430a      	orrs	r2, r1
 80004ca:	615a      	str	r2, [r3, #20]
 80004cc:	4b3e      	ldr	r3, [pc, #248]	; (80005c8 <MX_GPIO_Init+0x120>)
 80004ce:	695a      	ldr	r2, [r3, #20]
 80004d0:	2380      	movs	r3, #128	; 0x80
 80004d2:	031b      	lsls	r3, r3, #12
 80004d4:	4013      	ands	r3, r2
 80004d6:	60bb      	str	r3, [r7, #8]
 80004d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004da:	4b3b      	ldr	r3, [pc, #236]	; (80005c8 <MX_GPIO_Init+0x120>)
 80004dc:	695a      	ldr	r2, [r3, #20]
 80004de:	4b3a      	ldr	r3, [pc, #232]	; (80005c8 <MX_GPIO_Init+0x120>)
 80004e0:	2180      	movs	r1, #128	; 0x80
 80004e2:	0289      	lsls	r1, r1, #10
 80004e4:	430a      	orrs	r2, r1
 80004e6:	615a      	str	r2, [r3, #20]
 80004e8:	4b37      	ldr	r3, [pc, #220]	; (80005c8 <MX_GPIO_Init+0x120>)
 80004ea:	695a      	ldr	r2, [r3, #20]
 80004ec:	2380      	movs	r3, #128	; 0x80
 80004ee:	029b      	lsls	r3, r3, #10
 80004f0:	4013      	ands	r3, r2
 80004f2:	607b      	str	r3, [r7, #4]
 80004f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004f6:	4b34      	ldr	r3, [pc, #208]	; (80005c8 <MX_GPIO_Init+0x120>)
 80004f8:	695a      	ldr	r2, [r3, #20]
 80004fa:	4b33      	ldr	r3, [pc, #204]	; (80005c8 <MX_GPIO_Init+0x120>)
 80004fc:	2180      	movs	r1, #128	; 0x80
 80004fe:	02c9      	lsls	r1, r1, #11
 8000500:	430a      	orrs	r2, r1
 8000502:	615a      	str	r2, [r3, #20]
 8000504:	4b30      	ldr	r3, [pc, #192]	; (80005c8 <MX_GPIO_Init+0x120>)
 8000506:	695a      	ldr	r2, [r3, #20]
 8000508:	2380      	movs	r3, #128	; 0x80
 800050a:	02db      	lsls	r3, r3, #11
 800050c:	4013      	ands	r3, r2
 800050e:	603b      	str	r3, [r7, #0]
 8000510:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000512:	4b2e      	ldr	r3, [pc, #184]	; (80005cc <MX_GPIO_Init+0x124>)
 8000514:	2200      	movs	r2, #0
 8000516:	21c4      	movs	r1, #196	; 0xc4
 8000518:	0018      	movs	r0, r3
 800051a:	f000 fe2f 	bl	800117c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800051e:	193b      	adds	r3, r7, r4
 8000520:	2203      	movs	r2, #3
 8000522:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000524:	193b      	adds	r3, r7, r4
 8000526:	2200      	movs	r2, #0
 8000528:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052a:	193b      	adds	r3, r7, r4
 800052c:	2200      	movs	r2, #0
 800052e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000530:	193b      	adds	r3, r7, r4
 8000532:	4a26      	ldr	r2, [pc, #152]	; (80005cc <MX_GPIO_Init+0x124>)
 8000534:	0019      	movs	r1, r3
 8000536:	0010      	movs	r0, r2
 8000538:	f000 fcb0 	bl	8000e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC2 PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6|GPIO_PIN_7;
 800053c:	193b      	adds	r3, r7, r4
 800053e:	22c4      	movs	r2, #196	; 0xc4
 8000540:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000542:	193b      	adds	r3, r7, r4
 8000544:	2201      	movs	r2, #1
 8000546:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000548:	193b      	adds	r3, r7, r4
 800054a:	2200      	movs	r2, #0
 800054c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800054e:	193b      	adds	r3, r7, r4
 8000550:	2200      	movs	r2, #0
 8000552:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000554:	193b      	adds	r3, r7, r4
 8000556:	4a1d      	ldr	r2, [pc, #116]	; (80005cc <MX_GPIO_Init+0x124>)
 8000558:	0019      	movs	r1, r3
 800055a:	0010      	movs	r0, r2
 800055c:	f000 fc9e 	bl	8000e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000560:	0021      	movs	r1, r4
 8000562:	187b      	adds	r3, r7, r1
 8000564:	22e0      	movs	r2, #224	; 0xe0
 8000566:	0212      	lsls	r2, r2, #8
 8000568:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800056a:	000c      	movs	r4, r1
 800056c:	193b      	adds	r3, r7, r4
 800056e:	2202      	movs	r2, #2
 8000570:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000572:	193b      	adds	r3, r7, r4
 8000574:	2200      	movs	r2, #0
 8000576:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000578:	193b      	adds	r3, r7, r4
 800057a:	2203      	movs	r2, #3
 800057c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 800057e:	193b      	adds	r3, r7, r4
 8000580:	2200      	movs	r2, #0
 8000582:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000584:	193b      	adds	r3, r7, r4
 8000586:	4a12      	ldr	r2, [pc, #72]	; (80005d0 <MX_GPIO_Init+0x128>)
 8000588:	0019      	movs	r1, r3
 800058a:	0010      	movs	r0, r2
 800058c:	f000 fc86 	bl	8000e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000590:	0021      	movs	r1, r4
 8000592:	187b      	adds	r3, r7, r1
 8000594:	22c0      	movs	r2, #192	; 0xc0
 8000596:	0092      	lsls	r2, r2, #2
 8000598:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800059a:	187b      	adds	r3, r7, r1
 800059c:	2212      	movs	r2, #18
 800059e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a0:	187b      	adds	r3, r7, r1
 80005a2:	2200      	movs	r2, #0
 80005a4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005a6:	187b      	adds	r3, r7, r1
 80005a8:	2203      	movs	r2, #3
 80005aa:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80005ac:	187b      	adds	r3, r7, r1
 80005ae:	2201      	movs	r2, #1
 80005b0:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005b2:	187b      	adds	r3, r7, r1
 80005b4:	4a06      	ldr	r2, [pc, #24]	; (80005d0 <MX_GPIO_Init+0x128>)
 80005b6:	0019      	movs	r1, r3
 80005b8:	0010      	movs	r0, r2
 80005ba:	f000 fc6f 	bl	8000e9c <HAL_GPIO_Init>

}
 80005be:	46c0      	nop			; (mov r8, r8)
 80005c0:	46bd      	mov	sp, r7
 80005c2:	b009      	add	sp, #36	; 0x24
 80005c4:	bd90      	pop	{r4, r7, pc}
 80005c6:	46c0      	nop			; (mov r8, r8)
 80005c8:	40021000 	.word	0x40021000
 80005cc:	48000800 	.word	0x48000800
 80005d0:	48000400 	.word	0x48000400

080005d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005d8:	b672      	cpsid	i
}
 80005da:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005dc:	e7fe      	b.n	80005dc <Error_Handler+0x8>
	...

080005e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005e6:	4b0f      	ldr	r3, [pc, #60]	; (8000624 <HAL_MspInit+0x44>)
 80005e8:	699a      	ldr	r2, [r3, #24]
 80005ea:	4b0e      	ldr	r3, [pc, #56]	; (8000624 <HAL_MspInit+0x44>)
 80005ec:	2101      	movs	r1, #1
 80005ee:	430a      	orrs	r2, r1
 80005f0:	619a      	str	r2, [r3, #24]
 80005f2:	4b0c      	ldr	r3, [pc, #48]	; (8000624 <HAL_MspInit+0x44>)
 80005f4:	699b      	ldr	r3, [r3, #24]
 80005f6:	2201      	movs	r2, #1
 80005f8:	4013      	ands	r3, r2
 80005fa:	607b      	str	r3, [r7, #4]
 80005fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005fe:	4b09      	ldr	r3, [pc, #36]	; (8000624 <HAL_MspInit+0x44>)
 8000600:	69da      	ldr	r2, [r3, #28]
 8000602:	4b08      	ldr	r3, [pc, #32]	; (8000624 <HAL_MspInit+0x44>)
 8000604:	2180      	movs	r1, #128	; 0x80
 8000606:	0549      	lsls	r1, r1, #21
 8000608:	430a      	orrs	r2, r1
 800060a:	61da      	str	r2, [r3, #28]
 800060c:	4b05      	ldr	r3, [pc, #20]	; (8000624 <HAL_MspInit+0x44>)
 800060e:	69da      	ldr	r2, [r3, #28]
 8000610:	2380      	movs	r3, #128	; 0x80
 8000612:	055b      	lsls	r3, r3, #21
 8000614:	4013      	ands	r3, r2
 8000616:	603b      	str	r3, [r7, #0]
 8000618:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	46bd      	mov	sp, r7
 800061e:	b002      	add	sp, #8
 8000620:	bd80      	pop	{r7, pc}
 8000622:	46c0      	nop			; (mov r8, r8)
 8000624:	40021000 	.word	0x40021000

08000628 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000628:	b590      	push	{r4, r7, lr}
 800062a:	b08b      	sub	sp, #44	; 0x2c
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000630:	2414      	movs	r4, #20
 8000632:	193b      	adds	r3, r7, r4
 8000634:	0018      	movs	r0, r3
 8000636:	2314      	movs	r3, #20
 8000638:	001a      	movs	r2, r3
 800063a:	2100      	movs	r1, #0
 800063c:	f001 fe70 	bl	8002320 <memset>
  if(hadc->Instance==ADC1)
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a19      	ldr	r2, [pc, #100]	; (80006ac <HAL_ADC_MspInit+0x84>)
 8000646:	4293      	cmp	r3, r2
 8000648:	d12b      	bne.n	80006a2 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800064a:	4b19      	ldr	r3, [pc, #100]	; (80006b0 <HAL_ADC_MspInit+0x88>)
 800064c:	699a      	ldr	r2, [r3, #24]
 800064e:	4b18      	ldr	r3, [pc, #96]	; (80006b0 <HAL_ADC_MspInit+0x88>)
 8000650:	2180      	movs	r1, #128	; 0x80
 8000652:	0089      	lsls	r1, r1, #2
 8000654:	430a      	orrs	r2, r1
 8000656:	619a      	str	r2, [r3, #24]
 8000658:	4b15      	ldr	r3, [pc, #84]	; (80006b0 <HAL_ADC_MspInit+0x88>)
 800065a:	699a      	ldr	r2, [r3, #24]
 800065c:	2380      	movs	r3, #128	; 0x80
 800065e:	009b      	lsls	r3, r3, #2
 8000660:	4013      	ands	r3, r2
 8000662:	613b      	str	r3, [r7, #16]
 8000664:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000666:	4b12      	ldr	r3, [pc, #72]	; (80006b0 <HAL_ADC_MspInit+0x88>)
 8000668:	695a      	ldr	r2, [r3, #20]
 800066a:	4b11      	ldr	r3, [pc, #68]	; (80006b0 <HAL_ADC_MspInit+0x88>)
 800066c:	2180      	movs	r1, #128	; 0x80
 800066e:	0289      	lsls	r1, r1, #10
 8000670:	430a      	orrs	r2, r1
 8000672:	615a      	str	r2, [r3, #20]
 8000674:	4b0e      	ldr	r3, [pc, #56]	; (80006b0 <HAL_ADC_MspInit+0x88>)
 8000676:	695a      	ldr	r2, [r3, #20]
 8000678:	2380      	movs	r3, #128	; 0x80
 800067a:	029b      	lsls	r3, r3, #10
 800067c:	4013      	ands	r3, r2
 800067e:	60fb      	str	r3, [r7, #12]
 8000680:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000682:	193b      	adds	r3, r7, r4
 8000684:	2201      	movs	r2, #1
 8000686:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000688:	193b      	adds	r3, r7, r4
 800068a:	2203      	movs	r2, #3
 800068c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068e:	193b      	adds	r3, r7, r4
 8000690:	2200      	movs	r2, #0
 8000692:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000694:	193a      	adds	r2, r7, r4
 8000696:	2390      	movs	r3, #144	; 0x90
 8000698:	05db      	lsls	r3, r3, #23
 800069a:	0011      	movs	r1, r2
 800069c:	0018      	movs	r0, r3
 800069e:	f000 fbfd 	bl	8000e9c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80006a2:	46c0      	nop			; (mov r8, r8)
 80006a4:	46bd      	mov	sp, r7
 80006a6:	b00b      	add	sp, #44	; 0x2c
 80006a8:	bd90      	pop	{r4, r7, pc}
 80006aa:	46c0      	nop			; (mov r8, r8)
 80006ac:	40012400 	.word	0x40012400
 80006b0:	40021000 	.word	0x40021000

080006b4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b084      	sub	sp, #16
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a0a      	ldr	r2, [pc, #40]	; (80006ec <HAL_TIM_PWM_MspInit+0x38>)
 80006c2:	4293      	cmp	r3, r2
 80006c4:	d10d      	bne.n	80006e2 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80006c6:	4b0a      	ldr	r3, [pc, #40]	; (80006f0 <HAL_TIM_PWM_MspInit+0x3c>)
 80006c8:	699a      	ldr	r2, [r3, #24]
 80006ca:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <HAL_TIM_PWM_MspInit+0x3c>)
 80006cc:	2180      	movs	r1, #128	; 0x80
 80006ce:	0109      	lsls	r1, r1, #4
 80006d0:	430a      	orrs	r2, r1
 80006d2:	619a      	str	r2, [r3, #24]
 80006d4:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <HAL_TIM_PWM_MspInit+0x3c>)
 80006d6:	699a      	ldr	r2, [r3, #24]
 80006d8:	2380      	movs	r3, #128	; 0x80
 80006da:	011b      	lsls	r3, r3, #4
 80006dc:	4013      	ands	r3, r2
 80006de:	60fb      	str	r3, [r7, #12]
 80006e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80006e2:	46c0      	nop			; (mov r8, r8)
 80006e4:	46bd      	mov	sp, r7
 80006e6:	b004      	add	sp, #16
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	46c0      	nop			; (mov r8, r8)
 80006ec:	40012c00 	.word	0x40012c00
 80006f0:	40021000 	.word	0x40021000

080006f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80006f4:	b590      	push	{r4, r7, lr}
 80006f6:	b089      	sub	sp, #36	; 0x24
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fc:	240c      	movs	r4, #12
 80006fe:	193b      	adds	r3, r7, r4
 8000700:	0018      	movs	r0, r3
 8000702:	2314      	movs	r3, #20
 8000704:	001a      	movs	r2, r3
 8000706:	2100      	movs	r1, #0
 8000708:	f001 fe0a 	bl	8002320 <memset>
  if(htim->Instance==TIM1)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a16      	ldr	r2, [pc, #88]	; (800076c <HAL_TIM_MspPostInit+0x78>)
 8000712:	4293      	cmp	r3, r2
 8000714:	d125      	bne.n	8000762 <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000716:	4b16      	ldr	r3, [pc, #88]	; (8000770 <HAL_TIM_MspPostInit+0x7c>)
 8000718:	695a      	ldr	r2, [r3, #20]
 800071a:	4b15      	ldr	r3, [pc, #84]	; (8000770 <HAL_TIM_MspPostInit+0x7c>)
 800071c:	2180      	movs	r1, #128	; 0x80
 800071e:	0289      	lsls	r1, r1, #10
 8000720:	430a      	orrs	r2, r1
 8000722:	615a      	str	r2, [r3, #20]
 8000724:	4b12      	ldr	r3, [pc, #72]	; (8000770 <HAL_TIM_MspPostInit+0x7c>)
 8000726:	695a      	ldr	r2, [r3, #20]
 8000728:	2380      	movs	r3, #128	; 0x80
 800072a:	029b      	lsls	r3, r3, #10
 800072c:	4013      	ands	r3, r2
 800072e:	60bb      	str	r3, [r7, #8]
 8000730:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000732:	193b      	adds	r3, r7, r4
 8000734:	2280      	movs	r2, #128	; 0x80
 8000736:	0112      	lsls	r2, r2, #4
 8000738:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800073a:	0021      	movs	r1, r4
 800073c:	187b      	adds	r3, r7, r1
 800073e:	2202      	movs	r2, #2
 8000740:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	187b      	adds	r3, r7, r1
 8000744:	2200      	movs	r2, #0
 8000746:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000748:	187b      	adds	r3, r7, r1
 800074a:	2200      	movs	r2, #0
 800074c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800074e:	187b      	adds	r3, r7, r1
 8000750:	2202      	movs	r2, #2
 8000752:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000754:	187a      	adds	r2, r7, r1
 8000756:	2390      	movs	r3, #144	; 0x90
 8000758:	05db      	lsls	r3, r3, #23
 800075a:	0011      	movs	r1, r2
 800075c:	0018      	movs	r0, r3
 800075e:	f000 fb9d 	bl	8000e9c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000762:	46c0      	nop			; (mov r8, r8)
 8000764:	46bd      	mov	sp, r7
 8000766:	b009      	add	sp, #36	; 0x24
 8000768:	bd90      	pop	{r4, r7, pc}
 800076a:	46c0      	nop			; (mov r8, r8)
 800076c:	40012c00 	.word	0x40012c00
 8000770:	40021000 	.word	0x40021000

08000774 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000778:	e7fe      	b.n	8000778 <NMI_Handler+0x4>

0800077a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800077a:	b580      	push	{r7, lr}
 800077c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800077e:	e7fe      	b.n	800077e <HardFault_Handler+0x4>

08000780 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000784:	46c0      	nop			; (mov r8, r8)
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}

0800078a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800078a:	b580      	push	{r7, lr}
 800078c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800078e:	46c0      	nop			; (mov r8, r8)
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}

08000794 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000798:	f000 f87a 	bl	8000890 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800079c:	46c0      	nop			; (mov r8, r8)
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}

080007a2 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007a2:	b580      	push	{r7, lr}
 80007a4:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80007a6:	46c0      	nop			; (mov r8, r8)
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}

080007ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007ac:	480d      	ldr	r0, [pc, #52]	; (80007e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007ae:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007b0:	480d      	ldr	r0, [pc, #52]	; (80007e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80007b2:	490e      	ldr	r1, [pc, #56]	; (80007ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80007b4:	4a0e      	ldr	r2, [pc, #56]	; (80007f0 <LoopForever+0xe>)
  movs r3, #0
 80007b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007b8:	e002      	b.n	80007c0 <LoopCopyDataInit>

080007ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007be:	3304      	adds	r3, #4

080007c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007c4:	d3f9      	bcc.n	80007ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007c6:	4a0b      	ldr	r2, [pc, #44]	; (80007f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007c8:	4c0b      	ldr	r4, [pc, #44]	; (80007f8 <LoopForever+0x16>)
  movs r3, #0
 80007ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007cc:	e001      	b.n	80007d2 <LoopFillZerobss>

080007ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007d0:	3204      	adds	r2, #4

080007d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007d4:	d3fb      	bcc.n	80007ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80007d6:	f7ff ffe4 	bl	80007a2 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80007da:	f001 fd7d 	bl	80022d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007de:	f7ff fd1f 	bl	8000220 <main>

080007e2 <LoopForever>:

LoopForever:
    b LoopForever
 80007e2:	e7fe      	b.n	80007e2 <LoopForever>
  ldr   r0, =_estack
 80007e4:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80007e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007ec:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80007f0:	08002380 	.word	0x08002380
  ldr r2, =_sbss
 80007f4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80007f8:	200000b4 	.word	0x200000b4

080007fc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007fc:	e7fe      	b.n	80007fc <ADC1_IRQHandler>
	...

08000800 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000804:	4b07      	ldr	r3, [pc, #28]	; (8000824 <HAL_Init+0x24>)
 8000806:	681a      	ldr	r2, [r3, #0]
 8000808:	4b06      	ldr	r3, [pc, #24]	; (8000824 <HAL_Init+0x24>)
 800080a:	2110      	movs	r1, #16
 800080c:	430a      	orrs	r2, r1
 800080e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000810:	2003      	movs	r0, #3
 8000812:	f000 f809 	bl	8000828 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000816:	f7ff fee3 	bl	80005e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800081a:	2300      	movs	r3, #0
}
 800081c:	0018      	movs	r0, r3
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	46c0      	nop			; (mov r8, r8)
 8000824:	40022000 	.word	0x40022000

08000828 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000828:	b590      	push	{r4, r7, lr}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000830:	4b14      	ldr	r3, [pc, #80]	; (8000884 <HAL_InitTick+0x5c>)
 8000832:	681c      	ldr	r4, [r3, #0]
 8000834:	4b14      	ldr	r3, [pc, #80]	; (8000888 <HAL_InitTick+0x60>)
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	0019      	movs	r1, r3
 800083a:	23fa      	movs	r3, #250	; 0xfa
 800083c:	0098      	lsls	r0, r3, #2
 800083e:	f7ff fc63 	bl	8000108 <__udivsi3>
 8000842:	0003      	movs	r3, r0
 8000844:	0019      	movs	r1, r3
 8000846:	0020      	movs	r0, r4
 8000848:	f7ff fc5e 	bl	8000108 <__udivsi3>
 800084c:	0003      	movs	r3, r0
 800084e:	0018      	movs	r0, r3
 8000850:	f000 fb17 	bl	8000e82 <HAL_SYSTICK_Config>
 8000854:	1e03      	subs	r3, r0, #0
 8000856:	d001      	beq.n	800085c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000858:	2301      	movs	r3, #1
 800085a:	e00f      	b.n	800087c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	2b03      	cmp	r3, #3
 8000860:	d80b      	bhi.n	800087a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000862:	6879      	ldr	r1, [r7, #4]
 8000864:	2301      	movs	r3, #1
 8000866:	425b      	negs	r3, r3
 8000868:	2200      	movs	r2, #0
 800086a:	0018      	movs	r0, r3
 800086c:	f000 faf4 	bl	8000e58 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000870:	4b06      	ldr	r3, [pc, #24]	; (800088c <HAL_InitTick+0x64>)
 8000872:	687a      	ldr	r2, [r7, #4]
 8000874:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000876:	2300      	movs	r3, #0
 8000878:	e000      	b.n	800087c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800087a:	2301      	movs	r3, #1
}
 800087c:	0018      	movs	r0, r3
 800087e:	46bd      	mov	sp, r7
 8000880:	b003      	add	sp, #12
 8000882:	bd90      	pop	{r4, r7, pc}
 8000884:	20000000 	.word	0x20000000
 8000888:	20000008 	.word	0x20000008
 800088c:	20000004 	.word	0x20000004

08000890 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000894:	4b05      	ldr	r3, [pc, #20]	; (80008ac <HAL_IncTick+0x1c>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	001a      	movs	r2, r3
 800089a:	4b05      	ldr	r3, [pc, #20]	; (80008b0 <HAL_IncTick+0x20>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	18d2      	adds	r2, r2, r3
 80008a0:	4b03      	ldr	r3, [pc, #12]	; (80008b0 <HAL_IncTick+0x20>)
 80008a2:	601a      	str	r2, [r3, #0]
}
 80008a4:	46c0      	nop			; (mov r8, r8)
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	46c0      	nop			; (mov r8, r8)
 80008ac:	20000008 	.word	0x20000008
 80008b0:	200000b0 	.word	0x200000b0

080008b4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  return uwTick;
 80008b8:	4b02      	ldr	r3, [pc, #8]	; (80008c4 <HAL_GetTick+0x10>)
 80008ba:	681b      	ldr	r3, [r3, #0]
}
 80008bc:	0018      	movs	r0, r3
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	46c0      	nop			; (mov r8, r8)
 80008c4:	200000b0 	.word	0x200000b0

080008c8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b084      	sub	sp, #16
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80008d0:	230f      	movs	r3, #15
 80008d2:	18fb      	adds	r3, r7, r3
 80008d4:	2200      	movs	r2, #0
 80008d6:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80008d8:	2300      	movs	r3, #0
 80008da:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d101      	bne.n	80008e6 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80008e2:	2301      	movs	r3, #1
 80008e4:	e125      	b.n	8000b32 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d10a      	bne.n	8000904 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	2200      	movs	r2, #0
 80008f2:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	2234      	movs	r2, #52	; 0x34
 80008f8:	2100      	movs	r1, #0
 80008fa:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	0018      	movs	r0, r3
 8000900:	f7ff fe92 	bl	8000628 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000908:	2210      	movs	r2, #16
 800090a:	4013      	ands	r3, r2
 800090c:	d000      	beq.n	8000910 <HAL_ADC_Init+0x48>
 800090e:	e103      	b.n	8000b18 <HAL_ADC_Init+0x250>
 8000910:	230f      	movs	r3, #15
 8000912:	18fb      	adds	r3, r7, r3
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	2b00      	cmp	r3, #0
 8000918:	d000      	beq.n	800091c <HAL_ADC_Init+0x54>
 800091a:	e0fd      	b.n	8000b18 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	689b      	ldr	r3, [r3, #8]
 8000922:	2204      	movs	r2, #4
 8000924:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000926:	d000      	beq.n	800092a <HAL_ADC_Init+0x62>
 8000928:	e0f6      	b.n	8000b18 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800092e:	4a83      	ldr	r2, [pc, #524]	; (8000b3c <HAL_ADC_Init+0x274>)
 8000930:	4013      	ands	r3, r2
 8000932:	2202      	movs	r2, #2
 8000934:	431a      	orrs	r2, r3
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	689b      	ldr	r3, [r3, #8]
 8000940:	2203      	movs	r2, #3
 8000942:	4013      	ands	r3, r2
 8000944:	2b01      	cmp	r3, #1
 8000946:	d112      	bne.n	800096e <HAL_ADC_Init+0xa6>
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	2201      	movs	r2, #1
 8000950:	4013      	ands	r3, r2
 8000952:	2b01      	cmp	r3, #1
 8000954:	d009      	beq.n	800096a <HAL_ADC_Init+0xa2>
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	68da      	ldr	r2, [r3, #12]
 800095c:	2380      	movs	r3, #128	; 0x80
 800095e:	021b      	lsls	r3, r3, #8
 8000960:	401a      	ands	r2, r3
 8000962:	2380      	movs	r3, #128	; 0x80
 8000964:	021b      	lsls	r3, r3, #8
 8000966:	429a      	cmp	r2, r3
 8000968:	d101      	bne.n	800096e <HAL_ADC_Init+0xa6>
 800096a:	2301      	movs	r3, #1
 800096c:	e000      	b.n	8000970 <HAL_ADC_Init+0xa8>
 800096e:	2300      	movs	r3, #0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d116      	bne.n	80009a2 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	68db      	ldr	r3, [r3, #12]
 800097a:	2218      	movs	r2, #24
 800097c:	4393      	bics	r3, r2
 800097e:	0019      	movs	r1, r3
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	689a      	ldr	r2, [r3, #8]
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	430a      	orrs	r2, r1
 800098a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	691b      	ldr	r3, [r3, #16]
 8000992:	009b      	lsls	r3, r3, #2
 8000994:	0899      	lsrs	r1, r3, #2
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	685a      	ldr	r2, [r3, #4]
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	430a      	orrs	r2, r1
 80009a0:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	68da      	ldr	r2, [r3, #12]
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4964      	ldr	r1, [pc, #400]	; (8000b40 <HAL_ADC_Init+0x278>)
 80009ae:	400a      	ands	r2, r1
 80009b0:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	7e1b      	ldrb	r3, [r3, #24]
 80009b6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	7e5b      	ldrb	r3, [r3, #25]
 80009bc:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80009be:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	7e9b      	ldrb	r3, [r3, #26]
 80009c4:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80009c6:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009cc:	2b01      	cmp	r3, #1
 80009ce:	d002      	beq.n	80009d6 <HAL_ADC_Init+0x10e>
 80009d0:	2380      	movs	r3, #128	; 0x80
 80009d2:	015b      	lsls	r3, r3, #5
 80009d4:	e000      	b.n	80009d8 <HAL_ADC_Init+0x110>
 80009d6:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80009d8:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80009de:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	691b      	ldr	r3, [r3, #16]
 80009e4:	2b02      	cmp	r3, #2
 80009e6:	d101      	bne.n	80009ec <HAL_ADC_Init+0x124>
 80009e8:	2304      	movs	r3, #4
 80009ea:	e000      	b.n	80009ee <HAL_ADC_Init+0x126>
 80009ec:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80009ee:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	2124      	movs	r1, #36	; 0x24
 80009f4:	5c5b      	ldrb	r3, [r3, r1]
 80009f6:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80009f8:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80009fa:	68ba      	ldr	r2, [r7, #8]
 80009fc:	4313      	orrs	r3, r2
 80009fe:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	7edb      	ldrb	r3, [r3, #27]
 8000a04:	2b01      	cmp	r3, #1
 8000a06:	d115      	bne.n	8000a34 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	7e9b      	ldrb	r3, [r3, #26]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d105      	bne.n	8000a1c <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000a10:	68bb      	ldr	r3, [r7, #8]
 8000a12:	2280      	movs	r2, #128	; 0x80
 8000a14:	0252      	lsls	r2, r2, #9
 8000a16:	4313      	orrs	r3, r2
 8000a18:	60bb      	str	r3, [r7, #8]
 8000a1a:	e00b      	b.n	8000a34 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a20:	2220      	movs	r2, #32
 8000a22:	431a      	orrs	r2, r3
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	431a      	orrs	r2, r3
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	69da      	ldr	r2, [r3, #28]
 8000a38:	23c2      	movs	r3, #194	; 0xc2
 8000a3a:	33ff      	adds	r3, #255	; 0xff
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	d007      	beq.n	8000a50 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000a48:	4313      	orrs	r3, r2
 8000a4a:	68ba      	ldr	r2, [r7, #8]
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	68d9      	ldr	r1, [r3, #12]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	68ba      	ldr	r2, [r7, #8]
 8000a5c:	430a      	orrs	r2, r1
 8000a5e:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a64:	2380      	movs	r3, #128	; 0x80
 8000a66:	055b      	lsls	r3, r3, #21
 8000a68:	429a      	cmp	r2, r3
 8000a6a:	d01b      	beq.n	8000aa4 <HAL_ADC_Init+0x1dc>
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a70:	2b01      	cmp	r3, #1
 8000a72:	d017      	beq.n	8000aa4 <HAL_ADC_Init+0x1dc>
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a78:	2b02      	cmp	r3, #2
 8000a7a:	d013      	beq.n	8000aa4 <HAL_ADC_Init+0x1dc>
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a80:	2b03      	cmp	r3, #3
 8000a82:	d00f      	beq.n	8000aa4 <HAL_ADC_Init+0x1dc>
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a88:	2b04      	cmp	r3, #4
 8000a8a:	d00b      	beq.n	8000aa4 <HAL_ADC_Init+0x1dc>
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a90:	2b05      	cmp	r3, #5
 8000a92:	d007      	beq.n	8000aa4 <HAL_ADC_Init+0x1dc>
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a98:	2b06      	cmp	r3, #6
 8000a9a:	d003      	beq.n	8000aa4 <HAL_ADC_Init+0x1dc>
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aa0:	2b07      	cmp	r3, #7
 8000aa2:	d112      	bne.n	8000aca <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	695a      	ldr	r2, [r3, #20]
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	2107      	movs	r1, #7
 8000ab0:	438a      	bics	r2, r1
 8000ab2:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	6959      	ldr	r1, [r3, #20]
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000abe:	2207      	movs	r2, #7
 8000ac0:	401a      	ands	r2, r3
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	430a      	orrs	r2, r1
 8000ac8:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	68db      	ldr	r3, [r3, #12]
 8000ad0:	4a1c      	ldr	r2, [pc, #112]	; (8000b44 <HAL_ADC_Init+0x27c>)
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	68ba      	ldr	r2, [r7, #8]
 8000ad6:	429a      	cmp	r2, r3
 8000ad8:	d10b      	bne.n	8000af2 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	2200      	movs	r2, #0
 8000ade:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ae4:	2203      	movs	r2, #3
 8000ae6:	4393      	bics	r3, r2
 8000ae8:	2201      	movs	r2, #1
 8000aea:	431a      	orrs	r2, r3
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000af0:	e01c      	b.n	8000b2c <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000af6:	2212      	movs	r2, #18
 8000af8:	4393      	bics	r3, r2
 8000afa:	2210      	movs	r2, #16
 8000afc:	431a      	orrs	r2, r3
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b06:	2201      	movs	r2, #1
 8000b08:	431a      	orrs	r2, r3
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8000b0e:	230f      	movs	r3, #15
 8000b10:	18fb      	adds	r3, r7, r3
 8000b12:	2201      	movs	r2, #1
 8000b14:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000b16:	e009      	b.n	8000b2c <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b1c:	2210      	movs	r2, #16
 8000b1e:	431a      	orrs	r2, r3
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8000b24:	230f      	movs	r3, #15
 8000b26:	18fb      	adds	r3, r7, r3
 8000b28:	2201      	movs	r2, #1
 8000b2a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000b2c:	230f      	movs	r3, #15
 8000b2e:	18fb      	adds	r3, r7, r3
 8000b30:	781b      	ldrb	r3, [r3, #0]
}
 8000b32:	0018      	movs	r0, r3
 8000b34:	46bd      	mov	sp, r7
 8000b36:	b004      	add	sp, #16
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	46c0      	nop			; (mov r8, r8)
 8000b3c:	fffffefd 	.word	0xfffffefd
 8000b40:	fffe0219 	.word	0xfffe0219
 8000b44:	833fffe7 	.word	0x833fffe7

08000b48 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
 8000b50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b52:	230f      	movs	r3, #15
 8000b54:	18fb      	adds	r3, r7, r3
 8000b56:	2200      	movs	r2, #0
 8000b58:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b62:	2380      	movs	r3, #128	; 0x80
 8000b64:	055b      	lsls	r3, r3, #21
 8000b66:	429a      	cmp	r2, r3
 8000b68:	d011      	beq.n	8000b8e <HAL_ADC_ConfigChannel+0x46>
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b6e:	2b01      	cmp	r3, #1
 8000b70:	d00d      	beq.n	8000b8e <HAL_ADC_ConfigChannel+0x46>
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b76:	2b02      	cmp	r3, #2
 8000b78:	d009      	beq.n	8000b8e <HAL_ADC_ConfigChannel+0x46>
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b7e:	2b03      	cmp	r3, #3
 8000b80:	d005      	beq.n	8000b8e <HAL_ADC_ConfigChannel+0x46>
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b86:	2b04      	cmp	r3, #4
 8000b88:	d001      	beq.n	8000b8e <HAL_ADC_ConfigChannel+0x46>
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	2234      	movs	r2, #52	; 0x34
 8000b92:	5c9b      	ldrb	r3, [r3, r2]
 8000b94:	2b01      	cmp	r3, #1
 8000b96:	d101      	bne.n	8000b9c <HAL_ADC_ConfigChannel+0x54>
 8000b98:	2302      	movs	r3, #2
 8000b9a:	e0bb      	b.n	8000d14 <HAL_ADC_ConfigChannel+0x1cc>
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	2234      	movs	r2, #52	; 0x34
 8000ba0:	2101      	movs	r1, #1
 8000ba2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	689b      	ldr	r3, [r3, #8]
 8000baa:	2204      	movs	r2, #4
 8000bac:	4013      	ands	r3, r2
 8000bae:	d000      	beq.n	8000bb2 <HAL_ADC_ConfigChannel+0x6a>
 8000bb0:	e09f      	b.n	8000cf2 <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	685b      	ldr	r3, [r3, #4]
 8000bb6:	4a59      	ldr	r2, [pc, #356]	; (8000d1c <HAL_ADC_ConfigChannel+0x1d4>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d100      	bne.n	8000bbe <HAL_ADC_ConfigChannel+0x76>
 8000bbc:	e077      	b.n	8000cae <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	2201      	movs	r2, #1
 8000bca:	409a      	lsls	r2, r3
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	430a      	orrs	r2, r1
 8000bd2:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000bd8:	2380      	movs	r3, #128	; 0x80
 8000bda:	055b      	lsls	r3, r3, #21
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	d037      	beq.n	8000c50 <HAL_ADC_ConfigChannel+0x108>
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000be4:	2b01      	cmp	r3, #1
 8000be6:	d033      	beq.n	8000c50 <HAL_ADC_ConfigChannel+0x108>
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bec:	2b02      	cmp	r3, #2
 8000bee:	d02f      	beq.n	8000c50 <HAL_ADC_ConfigChannel+0x108>
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bf4:	2b03      	cmp	r3, #3
 8000bf6:	d02b      	beq.n	8000c50 <HAL_ADC_ConfigChannel+0x108>
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bfc:	2b04      	cmp	r3, #4
 8000bfe:	d027      	beq.n	8000c50 <HAL_ADC_ConfigChannel+0x108>
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c04:	2b05      	cmp	r3, #5
 8000c06:	d023      	beq.n	8000c50 <HAL_ADC_ConfigChannel+0x108>
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c0c:	2b06      	cmp	r3, #6
 8000c0e:	d01f      	beq.n	8000c50 <HAL_ADC_ConfigChannel+0x108>
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c14:	2b07      	cmp	r3, #7
 8000c16:	d01b      	beq.n	8000c50 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	689a      	ldr	r2, [r3, #8]
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	695b      	ldr	r3, [r3, #20]
 8000c22:	2107      	movs	r1, #7
 8000c24:	400b      	ands	r3, r1
 8000c26:	429a      	cmp	r2, r3
 8000c28:	d012      	beq.n	8000c50 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	695a      	ldr	r2, [r3, #20]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	2107      	movs	r1, #7
 8000c36:	438a      	bics	r2, r1
 8000c38:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	6959      	ldr	r1, [r3, #20]
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	689b      	ldr	r3, [r3, #8]
 8000c44:	2207      	movs	r2, #7
 8000c46:	401a      	ands	r2, r3
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	430a      	orrs	r2, r1
 8000c4e:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	2b10      	cmp	r3, #16
 8000c56:	d003      	beq.n	8000c60 <HAL_ADC_ConfigChannel+0x118>
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	2b11      	cmp	r3, #17
 8000c5e:	d152      	bne.n	8000d06 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000c60:	4b2f      	ldr	r3, [pc, #188]	; (8000d20 <HAL_ADC_ConfigChannel+0x1d8>)
 8000c62:	6819      	ldr	r1, [r3, #0]
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	2b10      	cmp	r3, #16
 8000c6a:	d102      	bne.n	8000c72 <HAL_ADC_ConfigChannel+0x12a>
 8000c6c:	2380      	movs	r3, #128	; 0x80
 8000c6e:	041b      	lsls	r3, r3, #16
 8000c70:	e001      	b.n	8000c76 <HAL_ADC_ConfigChannel+0x12e>
 8000c72:	2380      	movs	r3, #128	; 0x80
 8000c74:	03db      	lsls	r3, r3, #15
 8000c76:	4a2a      	ldr	r2, [pc, #168]	; (8000d20 <HAL_ADC_ConfigChannel+0x1d8>)
 8000c78:	430b      	orrs	r3, r1
 8000c7a:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	2b10      	cmp	r3, #16
 8000c82:	d140      	bne.n	8000d06 <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000c84:	4b27      	ldr	r3, [pc, #156]	; (8000d24 <HAL_ADC_ConfigChannel+0x1dc>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4927      	ldr	r1, [pc, #156]	; (8000d28 <HAL_ADC_ConfigChannel+0x1e0>)
 8000c8a:	0018      	movs	r0, r3
 8000c8c:	f7ff fa3c 	bl	8000108 <__udivsi3>
 8000c90:	0003      	movs	r3, r0
 8000c92:	001a      	movs	r2, r3
 8000c94:	0013      	movs	r3, r2
 8000c96:	009b      	lsls	r3, r3, #2
 8000c98:	189b      	adds	r3, r3, r2
 8000c9a:	005b      	lsls	r3, r3, #1
 8000c9c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000c9e:	e002      	b.n	8000ca6 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	3b01      	subs	r3, #1
 8000ca4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000ca6:	68bb      	ldr	r3, [r7, #8]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d1f9      	bne.n	8000ca0 <HAL_ADC_ConfigChannel+0x158>
 8000cac:	e02b      	b.n	8000d06 <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	2101      	movs	r1, #1
 8000cba:	4099      	lsls	r1, r3
 8000cbc:	000b      	movs	r3, r1
 8000cbe:	43d9      	mvns	r1, r3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	400a      	ands	r2, r1
 8000cc6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	2b10      	cmp	r3, #16
 8000cce:	d003      	beq.n	8000cd8 <HAL_ADC_ConfigChannel+0x190>
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	2b11      	cmp	r3, #17
 8000cd6:	d116      	bne.n	8000d06 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000cd8:	4b11      	ldr	r3, [pc, #68]	; (8000d20 <HAL_ADC_ConfigChannel+0x1d8>)
 8000cda:	6819      	ldr	r1, [r3, #0]
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	2b10      	cmp	r3, #16
 8000ce2:	d101      	bne.n	8000ce8 <HAL_ADC_ConfigChannel+0x1a0>
 8000ce4:	4a11      	ldr	r2, [pc, #68]	; (8000d2c <HAL_ADC_ConfigChannel+0x1e4>)
 8000ce6:	e000      	b.n	8000cea <HAL_ADC_ConfigChannel+0x1a2>
 8000ce8:	4a11      	ldr	r2, [pc, #68]	; (8000d30 <HAL_ADC_ConfigChannel+0x1e8>)
 8000cea:	4b0d      	ldr	r3, [pc, #52]	; (8000d20 <HAL_ADC_ConfigChannel+0x1d8>)
 8000cec:	400a      	ands	r2, r1
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	e009      	b.n	8000d06 <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cf6:	2220      	movs	r2, #32
 8000cf8:	431a      	orrs	r2, r3
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8000cfe:	230f      	movs	r3, #15
 8000d00:	18fb      	adds	r3, r7, r3
 8000d02:	2201      	movs	r2, #1
 8000d04:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	2234      	movs	r2, #52	; 0x34
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8000d0e:	230f      	movs	r3, #15
 8000d10:	18fb      	adds	r3, r7, r3
 8000d12:	781b      	ldrb	r3, [r3, #0]
}
 8000d14:	0018      	movs	r0, r3
 8000d16:	46bd      	mov	sp, r7
 8000d18:	b004      	add	sp, #16
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	00001001 	.word	0x00001001
 8000d20:	40012708 	.word	0x40012708
 8000d24:	20000000 	.word	0x20000000
 8000d28:	000f4240 	.word	0x000f4240
 8000d2c:	ff7fffff 	.word	0xff7fffff
 8000d30:	ffbfffff 	.word	0xffbfffff

08000d34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d34:	b590      	push	{r4, r7, lr}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	0002      	movs	r2, r0
 8000d3c:	6039      	str	r1, [r7, #0]
 8000d3e:	1dfb      	adds	r3, r7, #7
 8000d40:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d42:	1dfb      	adds	r3, r7, #7
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	2b7f      	cmp	r3, #127	; 0x7f
 8000d48:	d828      	bhi.n	8000d9c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d4a:	4a2f      	ldr	r2, [pc, #188]	; (8000e08 <__NVIC_SetPriority+0xd4>)
 8000d4c:	1dfb      	adds	r3, r7, #7
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	b25b      	sxtb	r3, r3
 8000d52:	089b      	lsrs	r3, r3, #2
 8000d54:	33c0      	adds	r3, #192	; 0xc0
 8000d56:	009b      	lsls	r3, r3, #2
 8000d58:	589b      	ldr	r3, [r3, r2]
 8000d5a:	1dfa      	adds	r2, r7, #7
 8000d5c:	7812      	ldrb	r2, [r2, #0]
 8000d5e:	0011      	movs	r1, r2
 8000d60:	2203      	movs	r2, #3
 8000d62:	400a      	ands	r2, r1
 8000d64:	00d2      	lsls	r2, r2, #3
 8000d66:	21ff      	movs	r1, #255	; 0xff
 8000d68:	4091      	lsls	r1, r2
 8000d6a:	000a      	movs	r2, r1
 8000d6c:	43d2      	mvns	r2, r2
 8000d6e:	401a      	ands	r2, r3
 8000d70:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	019b      	lsls	r3, r3, #6
 8000d76:	22ff      	movs	r2, #255	; 0xff
 8000d78:	401a      	ands	r2, r3
 8000d7a:	1dfb      	adds	r3, r7, #7
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	0018      	movs	r0, r3
 8000d80:	2303      	movs	r3, #3
 8000d82:	4003      	ands	r3, r0
 8000d84:	00db      	lsls	r3, r3, #3
 8000d86:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d88:	481f      	ldr	r0, [pc, #124]	; (8000e08 <__NVIC_SetPriority+0xd4>)
 8000d8a:	1dfb      	adds	r3, r7, #7
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	b25b      	sxtb	r3, r3
 8000d90:	089b      	lsrs	r3, r3, #2
 8000d92:	430a      	orrs	r2, r1
 8000d94:	33c0      	adds	r3, #192	; 0xc0
 8000d96:	009b      	lsls	r3, r3, #2
 8000d98:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000d9a:	e031      	b.n	8000e00 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d9c:	4a1b      	ldr	r2, [pc, #108]	; (8000e0c <__NVIC_SetPriority+0xd8>)
 8000d9e:	1dfb      	adds	r3, r7, #7
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	0019      	movs	r1, r3
 8000da4:	230f      	movs	r3, #15
 8000da6:	400b      	ands	r3, r1
 8000da8:	3b08      	subs	r3, #8
 8000daa:	089b      	lsrs	r3, r3, #2
 8000dac:	3306      	adds	r3, #6
 8000dae:	009b      	lsls	r3, r3, #2
 8000db0:	18d3      	adds	r3, r2, r3
 8000db2:	3304      	adds	r3, #4
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	1dfa      	adds	r2, r7, #7
 8000db8:	7812      	ldrb	r2, [r2, #0]
 8000dba:	0011      	movs	r1, r2
 8000dbc:	2203      	movs	r2, #3
 8000dbe:	400a      	ands	r2, r1
 8000dc0:	00d2      	lsls	r2, r2, #3
 8000dc2:	21ff      	movs	r1, #255	; 0xff
 8000dc4:	4091      	lsls	r1, r2
 8000dc6:	000a      	movs	r2, r1
 8000dc8:	43d2      	mvns	r2, r2
 8000dca:	401a      	ands	r2, r3
 8000dcc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	019b      	lsls	r3, r3, #6
 8000dd2:	22ff      	movs	r2, #255	; 0xff
 8000dd4:	401a      	ands	r2, r3
 8000dd6:	1dfb      	adds	r3, r7, #7
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	0018      	movs	r0, r3
 8000ddc:	2303      	movs	r3, #3
 8000dde:	4003      	ands	r3, r0
 8000de0:	00db      	lsls	r3, r3, #3
 8000de2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000de4:	4809      	ldr	r0, [pc, #36]	; (8000e0c <__NVIC_SetPriority+0xd8>)
 8000de6:	1dfb      	adds	r3, r7, #7
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	001c      	movs	r4, r3
 8000dec:	230f      	movs	r3, #15
 8000dee:	4023      	ands	r3, r4
 8000df0:	3b08      	subs	r3, #8
 8000df2:	089b      	lsrs	r3, r3, #2
 8000df4:	430a      	orrs	r2, r1
 8000df6:	3306      	adds	r3, #6
 8000df8:	009b      	lsls	r3, r3, #2
 8000dfa:	18c3      	adds	r3, r0, r3
 8000dfc:	3304      	adds	r3, #4
 8000dfe:	601a      	str	r2, [r3, #0]
}
 8000e00:	46c0      	nop			; (mov r8, r8)
 8000e02:	46bd      	mov	sp, r7
 8000e04:	b003      	add	sp, #12
 8000e06:	bd90      	pop	{r4, r7, pc}
 8000e08:	e000e100 	.word	0xe000e100
 8000e0c:	e000ed00 	.word	0xe000ed00

08000e10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	1e5a      	subs	r2, r3, #1
 8000e1c:	2380      	movs	r3, #128	; 0x80
 8000e1e:	045b      	lsls	r3, r3, #17
 8000e20:	429a      	cmp	r2, r3
 8000e22:	d301      	bcc.n	8000e28 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e24:	2301      	movs	r3, #1
 8000e26:	e010      	b.n	8000e4a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e28:	4b0a      	ldr	r3, [pc, #40]	; (8000e54 <SysTick_Config+0x44>)
 8000e2a:	687a      	ldr	r2, [r7, #4]
 8000e2c:	3a01      	subs	r2, #1
 8000e2e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e30:	2301      	movs	r3, #1
 8000e32:	425b      	negs	r3, r3
 8000e34:	2103      	movs	r1, #3
 8000e36:	0018      	movs	r0, r3
 8000e38:	f7ff ff7c 	bl	8000d34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e3c:	4b05      	ldr	r3, [pc, #20]	; (8000e54 <SysTick_Config+0x44>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e42:	4b04      	ldr	r3, [pc, #16]	; (8000e54 <SysTick_Config+0x44>)
 8000e44:	2207      	movs	r2, #7
 8000e46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e48:	2300      	movs	r3, #0
}
 8000e4a:	0018      	movs	r0, r3
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	b002      	add	sp, #8
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	46c0      	nop			; (mov r8, r8)
 8000e54:	e000e010 	.word	0xe000e010

08000e58 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	60b9      	str	r1, [r7, #8]
 8000e60:	607a      	str	r2, [r7, #4]
 8000e62:	210f      	movs	r1, #15
 8000e64:	187b      	adds	r3, r7, r1
 8000e66:	1c02      	adds	r2, r0, #0
 8000e68:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000e6a:	68ba      	ldr	r2, [r7, #8]
 8000e6c:	187b      	adds	r3, r7, r1
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	b25b      	sxtb	r3, r3
 8000e72:	0011      	movs	r1, r2
 8000e74:	0018      	movs	r0, r3
 8000e76:	f7ff ff5d 	bl	8000d34 <__NVIC_SetPriority>
}
 8000e7a:	46c0      	nop			; (mov r8, r8)
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	b004      	add	sp, #16
 8000e80:	bd80      	pop	{r7, pc}

08000e82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	b082      	sub	sp, #8
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	0018      	movs	r0, r3
 8000e8e:	f7ff ffbf 	bl	8000e10 <SysTick_Config>
 8000e92:	0003      	movs	r3, r0
}
 8000e94:	0018      	movs	r0, r3
 8000e96:	46bd      	mov	sp, r7
 8000e98:	b002      	add	sp, #8
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b086      	sub	sp, #24
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eaa:	e14f      	b.n	800114c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	2101      	movs	r1, #1
 8000eb2:	697a      	ldr	r2, [r7, #20]
 8000eb4:	4091      	lsls	r1, r2
 8000eb6:	000a      	movs	r2, r1
 8000eb8:	4013      	ands	r3, r2
 8000eba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d100      	bne.n	8000ec4 <HAL_GPIO_Init+0x28>
 8000ec2:	e140      	b.n	8001146 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	2203      	movs	r2, #3
 8000eca:	4013      	ands	r3, r2
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	d005      	beq.n	8000edc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	2203      	movs	r2, #3
 8000ed6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ed8:	2b02      	cmp	r3, #2
 8000eda:	d130      	bne.n	8000f3e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	689b      	ldr	r3, [r3, #8]
 8000ee0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	2203      	movs	r2, #3
 8000ee8:	409a      	lsls	r2, r3
 8000eea:	0013      	movs	r3, r2
 8000eec:	43da      	mvns	r2, r3
 8000eee:	693b      	ldr	r3, [r7, #16]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	68da      	ldr	r2, [r3, #12]
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	409a      	lsls	r2, r3
 8000efe:	0013      	movs	r3, r2
 8000f00:	693a      	ldr	r2, [r7, #16]
 8000f02:	4313      	orrs	r3, r2
 8000f04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	693a      	ldr	r2, [r7, #16]
 8000f0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f12:	2201      	movs	r2, #1
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	409a      	lsls	r2, r3
 8000f18:	0013      	movs	r3, r2
 8000f1a:	43da      	mvns	r2, r3
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	4013      	ands	r3, r2
 8000f20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	091b      	lsrs	r3, r3, #4
 8000f28:	2201      	movs	r2, #1
 8000f2a:	401a      	ands	r2, r3
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	409a      	lsls	r2, r3
 8000f30:	0013      	movs	r3, r2
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	2203      	movs	r2, #3
 8000f44:	4013      	ands	r3, r2
 8000f46:	2b03      	cmp	r3, #3
 8000f48:	d017      	beq.n	8000f7a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	68db      	ldr	r3, [r3, #12]
 8000f4e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	2203      	movs	r2, #3
 8000f56:	409a      	lsls	r2, r3
 8000f58:	0013      	movs	r3, r2
 8000f5a:	43da      	mvns	r2, r3
 8000f5c:	693b      	ldr	r3, [r7, #16]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	689a      	ldr	r2, [r3, #8]
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	409a      	lsls	r2, r3
 8000f6c:	0013      	movs	r3, r2
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	2203      	movs	r2, #3
 8000f80:	4013      	ands	r3, r2
 8000f82:	2b02      	cmp	r3, #2
 8000f84:	d123      	bne.n	8000fce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	08da      	lsrs	r2, r3, #3
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	3208      	adds	r2, #8
 8000f8e:	0092      	lsls	r2, r2, #2
 8000f90:	58d3      	ldr	r3, [r2, r3]
 8000f92:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	2207      	movs	r2, #7
 8000f98:	4013      	ands	r3, r2
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	220f      	movs	r2, #15
 8000f9e:	409a      	lsls	r2, r3
 8000fa0:	0013      	movs	r3, r2
 8000fa2:	43da      	mvns	r2, r3
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	691a      	ldr	r2, [r3, #16]
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	2107      	movs	r1, #7
 8000fb2:	400b      	ands	r3, r1
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	409a      	lsls	r2, r3
 8000fb8:	0013      	movs	r3, r2
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	08da      	lsrs	r2, r3, #3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	3208      	adds	r2, #8
 8000fc8:	0092      	lsls	r2, r2, #2
 8000fca:	6939      	ldr	r1, [r7, #16]
 8000fcc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	2203      	movs	r2, #3
 8000fda:	409a      	lsls	r2, r3
 8000fdc:	0013      	movs	r3, r2
 8000fde:	43da      	mvns	r2, r3
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	2203      	movs	r2, #3
 8000fec:	401a      	ands	r2, r3
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	409a      	lsls	r2, r3
 8000ff4:	0013      	movs	r3, r2
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685a      	ldr	r2, [r3, #4]
 8001006:	23c0      	movs	r3, #192	; 0xc0
 8001008:	029b      	lsls	r3, r3, #10
 800100a:	4013      	ands	r3, r2
 800100c:	d100      	bne.n	8001010 <HAL_GPIO_Init+0x174>
 800100e:	e09a      	b.n	8001146 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001010:	4b54      	ldr	r3, [pc, #336]	; (8001164 <HAL_GPIO_Init+0x2c8>)
 8001012:	699a      	ldr	r2, [r3, #24]
 8001014:	4b53      	ldr	r3, [pc, #332]	; (8001164 <HAL_GPIO_Init+0x2c8>)
 8001016:	2101      	movs	r1, #1
 8001018:	430a      	orrs	r2, r1
 800101a:	619a      	str	r2, [r3, #24]
 800101c:	4b51      	ldr	r3, [pc, #324]	; (8001164 <HAL_GPIO_Init+0x2c8>)
 800101e:	699b      	ldr	r3, [r3, #24]
 8001020:	2201      	movs	r2, #1
 8001022:	4013      	ands	r3, r2
 8001024:	60bb      	str	r3, [r7, #8]
 8001026:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001028:	4a4f      	ldr	r2, [pc, #316]	; (8001168 <HAL_GPIO_Init+0x2cc>)
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	089b      	lsrs	r3, r3, #2
 800102e:	3302      	adds	r3, #2
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	589b      	ldr	r3, [r3, r2]
 8001034:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	2203      	movs	r2, #3
 800103a:	4013      	ands	r3, r2
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	220f      	movs	r2, #15
 8001040:	409a      	lsls	r2, r3
 8001042:	0013      	movs	r3, r2
 8001044:	43da      	mvns	r2, r3
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	4013      	ands	r3, r2
 800104a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800104c:	687a      	ldr	r2, [r7, #4]
 800104e:	2390      	movs	r3, #144	; 0x90
 8001050:	05db      	lsls	r3, r3, #23
 8001052:	429a      	cmp	r2, r3
 8001054:	d013      	beq.n	800107e <HAL_GPIO_Init+0x1e2>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4a44      	ldr	r2, [pc, #272]	; (800116c <HAL_GPIO_Init+0x2d0>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d00d      	beq.n	800107a <HAL_GPIO_Init+0x1de>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a43      	ldr	r2, [pc, #268]	; (8001170 <HAL_GPIO_Init+0x2d4>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d007      	beq.n	8001076 <HAL_GPIO_Init+0x1da>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a42      	ldr	r2, [pc, #264]	; (8001174 <HAL_GPIO_Init+0x2d8>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d101      	bne.n	8001072 <HAL_GPIO_Init+0x1d6>
 800106e:	2303      	movs	r3, #3
 8001070:	e006      	b.n	8001080 <HAL_GPIO_Init+0x1e4>
 8001072:	2305      	movs	r3, #5
 8001074:	e004      	b.n	8001080 <HAL_GPIO_Init+0x1e4>
 8001076:	2302      	movs	r3, #2
 8001078:	e002      	b.n	8001080 <HAL_GPIO_Init+0x1e4>
 800107a:	2301      	movs	r3, #1
 800107c:	e000      	b.n	8001080 <HAL_GPIO_Init+0x1e4>
 800107e:	2300      	movs	r3, #0
 8001080:	697a      	ldr	r2, [r7, #20]
 8001082:	2103      	movs	r1, #3
 8001084:	400a      	ands	r2, r1
 8001086:	0092      	lsls	r2, r2, #2
 8001088:	4093      	lsls	r3, r2
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	4313      	orrs	r3, r2
 800108e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001090:	4935      	ldr	r1, [pc, #212]	; (8001168 <HAL_GPIO_Init+0x2cc>)
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	089b      	lsrs	r3, r3, #2
 8001096:	3302      	adds	r3, #2
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800109e:	4b36      	ldr	r3, [pc, #216]	; (8001178 <HAL_GPIO_Init+0x2dc>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	43da      	mvns	r2, r3
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	4013      	ands	r3, r2
 80010ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685a      	ldr	r2, [r3, #4]
 80010b2:	2380      	movs	r3, #128	; 0x80
 80010b4:	025b      	lsls	r3, r3, #9
 80010b6:	4013      	ands	r3, r2
 80010b8:	d003      	beq.n	80010c2 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	4313      	orrs	r3, r2
 80010c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80010c2:	4b2d      	ldr	r3, [pc, #180]	; (8001178 <HAL_GPIO_Init+0x2dc>)
 80010c4:	693a      	ldr	r2, [r7, #16]
 80010c6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80010c8:	4b2b      	ldr	r3, [pc, #172]	; (8001178 <HAL_GPIO_Init+0x2dc>)
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	43da      	mvns	r2, r3
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	4013      	ands	r3, r2
 80010d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685a      	ldr	r2, [r3, #4]
 80010dc:	2380      	movs	r3, #128	; 0x80
 80010de:	029b      	lsls	r3, r3, #10
 80010e0:	4013      	ands	r3, r2
 80010e2:	d003      	beq.n	80010ec <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80010e4:	693a      	ldr	r2, [r7, #16]
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80010ec:	4b22      	ldr	r3, [pc, #136]	; (8001178 <HAL_GPIO_Init+0x2dc>)
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010f2:	4b21      	ldr	r3, [pc, #132]	; (8001178 <HAL_GPIO_Init+0x2dc>)
 80010f4:	689b      	ldr	r3, [r3, #8]
 80010f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	43da      	mvns	r2, r3
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	4013      	ands	r3, r2
 8001100:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685a      	ldr	r2, [r3, #4]
 8001106:	2380      	movs	r3, #128	; 0x80
 8001108:	035b      	lsls	r3, r3, #13
 800110a:	4013      	ands	r3, r2
 800110c:	d003      	beq.n	8001116 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	4313      	orrs	r3, r2
 8001114:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001116:	4b18      	ldr	r3, [pc, #96]	; (8001178 <HAL_GPIO_Init+0x2dc>)
 8001118:	693a      	ldr	r2, [r7, #16]
 800111a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800111c:	4b16      	ldr	r3, [pc, #88]	; (8001178 <HAL_GPIO_Init+0x2dc>)
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	43da      	mvns	r2, r3
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	4013      	ands	r3, r2
 800112a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685a      	ldr	r2, [r3, #4]
 8001130:	2380      	movs	r3, #128	; 0x80
 8001132:	039b      	lsls	r3, r3, #14
 8001134:	4013      	ands	r3, r2
 8001136:	d003      	beq.n	8001140 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001138:	693a      	ldr	r2, [r7, #16]
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	4313      	orrs	r3, r2
 800113e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001140:	4b0d      	ldr	r3, [pc, #52]	; (8001178 <HAL_GPIO_Init+0x2dc>)
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	3301      	adds	r3, #1
 800114a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	40da      	lsrs	r2, r3
 8001154:	1e13      	subs	r3, r2, #0
 8001156:	d000      	beq.n	800115a <HAL_GPIO_Init+0x2be>
 8001158:	e6a8      	b.n	8000eac <HAL_GPIO_Init+0x10>
  } 
}
 800115a:	46c0      	nop			; (mov r8, r8)
 800115c:	46c0      	nop			; (mov r8, r8)
 800115e:	46bd      	mov	sp, r7
 8001160:	b006      	add	sp, #24
 8001162:	bd80      	pop	{r7, pc}
 8001164:	40021000 	.word	0x40021000
 8001168:	40010000 	.word	0x40010000
 800116c:	48000400 	.word	0x48000400
 8001170:	48000800 	.word	0x48000800
 8001174:	48000c00 	.word	0x48000c00
 8001178:	40010400 	.word	0x40010400

0800117c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	0008      	movs	r0, r1
 8001186:	0011      	movs	r1, r2
 8001188:	1cbb      	adds	r3, r7, #2
 800118a:	1c02      	adds	r2, r0, #0
 800118c:	801a      	strh	r2, [r3, #0]
 800118e:	1c7b      	adds	r3, r7, #1
 8001190:	1c0a      	adds	r2, r1, #0
 8001192:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001194:	1c7b      	adds	r3, r7, #1
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d004      	beq.n	80011a6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800119c:	1cbb      	adds	r3, r7, #2
 800119e:	881a      	ldrh	r2, [r3, #0]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011a4:	e003      	b.n	80011ae <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011a6:	1cbb      	adds	r3, r7, #2
 80011a8:	881a      	ldrh	r2, [r3, #0]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011ae:	46c0      	nop			; (mov r8, r8)
 80011b0:	46bd      	mov	sp, r7
 80011b2:	b002      	add	sp, #8
 80011b4:	bd80      	pop	{r7, pc}
	...

080011b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b088      	sub	sp, #32
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d101      	bne.n	80011ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e305      	b.n	80017d6 <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	2201      	movs	r2, #1
 80011d0:	4013      	ands	r3, r2
 80011d2:	d100      	bne.n	80011d6 <HAL_RCC_OscConfig+0x1e>
 80011d4:	e08d      	b.n	80012f2 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80011d6:	4bc5      	ldr	r3, [pc, #788]	; (80014ec <HAL_RCC_OscConfig+0x334>)
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	220c      	movs	r2, #12
 80011dc:	4013      	ands	r3, r2
 80011de:	2b04      	cmp	r3, #4
 80011e0:	d00e      	beq.n	8001200 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011e2:	4bc2      	ldr	r3, [pc, #776]	; (80014ec <HAL_RCC_OscConfig+0x334>)
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	220c      	movs	r2, #12
 80011e8:	4013      	ands	r3, r2
 80011ea:	2b08      	cmp	r3, #8
 80011ec:	d116      	bne.n	800121c <HAL_RCC_OscConfig+0x64>
 80011ee:	4bbf      	ldr	r3, [pc, #764]	; (80014ec <HAL_RCC_OscConfig+0x334>)
 80011f0:	685a      	ldr	r2, [r3, #4]
 80011f2:	23c0      	movs	r3, #192	; 0xc0
 80011f4:	025b      	lsls	r3, r3, #9
 80011f6:	401a      	ands	r2, r3
 80011f8:	2380      	movs	r3, #128	; 0x80
 80011fa:	025b      	lsls	r3, r3, #9
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d10d      	bne.n	800121c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001200:	4bba      	ldr	r3, [pc, #744]	; (80014ec <HAL_RCC_OscConfig+0x334>)
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	2380      	movs	r3, #128	; 0x80
 8001206:	029b      	lsls	r3, r3, #10
 8001208:	4013      	ands	r3, r2
 800120a:	d100      	bne.n	800120e <HAL_RCC_OscConfig+0x56>
 800120c:	e070      	b.n	80012f0 <HAL_RCC_OscConfig+0x138>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d000      	beq.n	8001218 <HAL_RCC_OscConfig+0x60>
 8001216:	e06b      	b.n	80012f0 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001218:	2301      	movs	r3, #1
 800121a:	e2dc      	b.n	80017d6 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	2b01      	cmp	r3, #1
 8001222:	d107      	bne.n	8001234 <HAL_RCC_OscConfig+0x7c>
 8001224:	4bb1      	ldr	r3, [pc, #708]	; (80014ec <HAL_RCC_OscConfig+0x334>)
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	4bb0      	ldr	r3, [pc, #704]	; (80014ec <HAL_RCC_OscConfig+0x334>)
 800122a:	2180      	movs	r1, #128	; 0x80
 800122c:	0249      	lsls	r1, r1, #9
 800122e:	430a      	orrs	r2, r1
 8001230:	601a      	str	r2, [r3, #0]
 8001232:	e02f      	b.n	8001294 <HAL_RCC_OscConfig+0xdc>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d10c      	bne.n	8001256 <HAL_RCC_OscConfig+0x9e>
 800123c:	4bab      	ldr	r3, [pc, #684]	; (80014ec <HAL_RCC_OscConfig+0x334>)
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	4baa      	ldr	r3, [pc, #680]	; (80014ec <HAL_RCC_OscConfig+0x334>)
 8001242:	49ab      	ldr	r1, [pc, #684]	; (80014f0 <HAL_RCC_OscConfig+0x338>)
 8001244:	400a      	ands	r2, r1
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	4ba8      	ldr	r3, [pc, #672]	; (80014ec <HAL_RCC_OscConfig+0x334>)
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	4ba7      	ldr	r3, [pc, #668]	; (80014ec <HAL_RCC_OscConfig+0x334>)
 800124e:	49a9      	ldr	r1, [pc, #676]	; (80014f4 <HAL_RCC_OscConfig+0x33c>)
 8001250:	400a      	ands	r2, r1
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	e01e      	b.n	8001294 <HAL_RCC_OscConfig+0xdc>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	2b05      	cmp	r3, #5
 800125c:	d10e      	bne.n	800127c <HAL_RCC_OscConfig+0xc4>
 800125e:	4ba3      	ldr	r3, [pc, #652]	; (80014ec <HAL_RCC_OscConfig+0x334>)
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	4ba2      	ldr	r3, [pc, #648]	; (80014ec <HAL_RCC_OscConfig+0x334>)
 8001264:	2180      	movs	r1, #128	; 0x80
 8001266:	02c9      	lsls	r1, r1, #11
 8001268:	430a      	orrs	r2, r1
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	4b9f      	ldr	r3, [pc, #636]	; (80014ec <HAL_RCC_OscConfig+0x334>)
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	4b9e      	ldr	r3, [pc, #632]	; (80014ec <HAL_RCC_OscConfig+0x334>)
 8001272:	2180      	movs	r1, #128	; 0x80
 8001274:	0249      	lsls	r1, r1, #9
 8001276:	430a      	orrs	r2, r1
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	e00b      	b.n	8001294 <HAL_RCC_OscConfig+0xdc>
 800127c:	4b9b      	ldr	r3, [pc, #620]	; (80014ec <HAL_RCC_OscConfig+0x334>)
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	4b9a      	ldr	r3, [pc, #616]	; (80014ec <HAL_RCC_OscConfig+0x334>)
 8001282:	499b      	ldr	r1, [pc, #620]	; (80014f0 <HAL_RCC_OscConfig+0x338>)
 8001284:	400a      	ands	r2, r1
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	4b98      	ldr	r3, [pc, #608]	; (80014ec <HAL_RCC_OscConfig+0x334>)
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	4b97      	ldr	r3, [pc, #604]	; (80014ec <HAL_RCC_OscConfig+0x334>)
 800128e:	4999      	ldr	r1, [pc, #612]	; (80014f4 <HAL_RCC_OscConfig+0x33c>)
 8001290:	400a      	ands	r2, r1
 8001292:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d014      	beq.n	80012c6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800129c:	f7ff fb0a 	bl	80008b4 <HAL_GetTick>
 80012a0:	0003      	movs	r3, r0
 80012a2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012a4:	e008      	b.n	80012b8 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012a6:	f7ff fb05 	bl	80008b4 <HAL_GetTick>
 80012aa:	0002      	movs	r2, r0
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	1ad3      	subs	r3, r2, r3
 80012b0:	2b64      	cmp	r3, #100	; 0x64
 80012b2:	d901      	bls.n	80012b8 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80012b4:	2303      	movs	r3, #3
 80012b6:	e28e      	b.n	80017d6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012b8:	4b8c      	ldr	r3, [pc, #560]	; (80014ec <HAL_RCC_OscConfig+0x334>)
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	2380      	movs	r3, #128	; 0x80
 80012be:	029b      	lsls	r3, r3, #10
 80012c0:	4013      	ands	r3, r2
 80012c2:	d0f0      	beq.n	80012a6 <HAL_RCC_OscConfig+0xee>
 80012c4:	e015      	b.n	80012f2 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c6:	f7ff faf5 	bl	80008b4 <HAL_GetTick>
 80012ca:	0003      	movs	r3, r0
 80012cc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ce:	e008      	b.n	80012e2 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012d0:	f7ff faf0 	bl	80008b4 <HAL_GetTick>
 80012d4:	0002      	movs	r2, r0
 80012d6:	69bb      	ldr	r3, [r7, #24]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	2b64      	cmp	r3, #100	; 0x64
 80012dc:	d901      	bls.n	80012e2 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80012de:	2303      	movs	r3, #3
 80012e0:	e279      	b.n	80017d6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012e2:	4b82      	ldr	r3, [pc, #520]	; (80014ec <HAL_RCC_OscConfig+0x334>)
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	2380      	movs	r3, #128	; 0x80
 80012e8:	029b      	lsls	r3, r3, #10
 80012ea:	4013      	ands	r3, r2
 80012ec:	d1f0      	bne.n	80012d0 <HAL_RCC_OscConfig+0x118>
 80012ee:	e000      	b.n	80012f2 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012f0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	2202      	movs	r2, #2
 80012f8:	4013      	ands	r3, r2
 80012fa:	d100      	bne.n	80012fe <HAL_RCC_OscConfig+0x146>
 80012fc:	e06c      	b.n	80013d8 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80012fe:	4b7b      	ldr	r3, [pc, #492]	; (80014ec <HAL_RCC_OscConfig+0x334>)
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	220c      	movs	r2, #12
 8001304:	4013      	ands	r3, r2
 8001306:	d00e      	beq.n	8001326 <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001308:	4b78      	ldr	r3, [pc, #480]	; (80014ec <HAL_RCC_OscConfig+0x334>)
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	220c      	movs	r2, #12
 800130e:	4013      	ands	r3, r2
 8001310:	2b08      	cmp	r3, #8
 8001312:	d11f      	bne.n	8001354 <HAL_RCC_OscConfig+0x19c>
 8001314:	4b75      	ldr	r3, [pc, #468]	; (80014ec <HAL_RCC_OscConfig+0x334>)
 8001316:	685a      	ldr	r2, [r3, #4]
 8001318:	23c0      	movs	r3, #192	; 0xc0
 800131a:	025b      	lsls	r3, r3, #9
 800131c:	401a      	ands	r2, r3
 800131e:	2380      	movs	r3, #128	; 0x80
 8001320:	021b      	lsls	r3, r3, #8
 8001322:	429a      	cmp	r2, r3
 8001324:	d116      	bne.n	8001354 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001326:	4b71      	ldr	r3, [pc, #452]	; (80014ec <HAL_RCC_OscConfig+0x334>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	2202      	movs	r2, #2
 800132c:	4013      	ands	r3, r2
 800132e:	d005      	beq.n	800133c <HAL_RCC_OscConfig+0x184>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	2b01      	cmp	r3, #1
 8001336:	d001      	beq.n	800133c <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8001338:	2301      	movs	r3, #1
 800133a:	e24c      	b.n	80017d6 <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800133c:	4b6b      	ldr	r3, [pc, #428]	; (80014ec <HAL_RCC_OscConfig+0x334>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	22f8      	movs	r2, #248	; 0xf8
 8001342:	4393      	bics	r3, r2
 8001344:	0019      	movs	r1, r3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	691b      	ldr	r3, [r3, #16]
 800134a:	00da      	lsls	r2, r3, #3
 800134c:	4b67      	ldr	r3, [pc, #412]	; (80014ec <HAL_RCC_OscConfig+0x334>)
 800134e:	430a      	orrs	r2, r1
 8001350:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001352:	e041      	b.n	80013d8 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d024      	beq.n	80013a6 <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800135c:	4b63      	ldr	r3, [pc, #396]	; (80014ec <HAL_RCC_OscConfig+0x334>)
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	4b62      	ldr	r3, [pc, #392]	; (80014ec <HAL_RCC_OscConfig+0x334>)
 8001362:	2101      	movs	r1, #1
 8001364:	430a      	orrs	r2, r1
 8001366:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001368:	f7ff faa4 	bl	80008b4 <HAL_GetTick>
 800136c:	0003      	movs	r3, r0
 800136e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001370:	e008      	b.n	8001384 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001372:	f7ff fa9f 	bl	80008b4 <HAL_GetTick>
 8001376:	0002      	movs	r2, r0
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	2b02      	cmp	r3, #2
 800137e:	d901      	bls.n	8001384 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001380:	2303      	movs	r3, #3
 8001382:	e228      	b.n	80017d6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001384:	4b59      	ldr	r3, [pc, #356]	; (80014ec <HAL_RCC_OscConfig+0x334>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2202      	movs	r2, #2
 800138a:	4013      	ands	r3, r2
 800138c:	d0f1      	beq.n	8001372 <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800138e:	4b57      	ldr	r3, [pc, #348]	; (80014ec <HAL_RCC_OscConfig+0x334>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	22f8      	movs	r2, #248	; 0xf8
 8001394:	4393      	bics	r3, r2
 8001396:	0019      	movs	r1, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	691b      	ldr	r3, [r3, #16]
 800139c:	00da      	lsls	r2, r3, #3
 800139e:	4b53      	ldr	r3, [pc, #332]	; (80014ec <HAL_RCC_OscConfig+0x334>)
 80013a0:	430a      	orrs	r2, r1
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	e018      	b.n	80013d8 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013a6:	4b51      	ldr	r3, [pc, #324]	; (80014ec <HAL_RCC_OscConfig+0x334>)
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	4b50      	ldr	r3, [pc, #320]	; (80014ec <HAL_RCC_OscConfig+0x334>)
 80013ac:	2101      	movs	r1, #1
 80013ae:	438a      	bics	r2, r1
 80013b0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b2:	f7ff fa7f 	bl	80008b4 <HAL_GetTick>
 80013b6:	0003      	movs	r3, r0
 80013b8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013ba:	e008      	b.n	80013ce <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013bc:	f7ff fa7a 	bl	80008b4 <HAL_GetTick>
 80013c0:	0002      	movs	r2, r0
 80013c2:	69bb      	ldr	r3, [r7, #24]
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	2b02      	cmp	r3, #2
 80013c8:	d901      	bls.n	80013ce <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 80013ca:	2303      	movs	r3, #3
 80013cc:	e203      	b.n	80017d6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013ce:	4b47      	ldr	r3, [pc, #284]	; (80014ec <HAL_RCC_OscConfig+0x334>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2202      	movs	r2, #2
 80013d4:	4013      	ands	r3, r2
 80013d6:	d1f1      	bne.n	80013bc <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2208      	movs	r2, #8
 80013de:	4013      	ands	r3, r2
 80013e0:	d036      	beq.n	8001450 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	69db      	ldr	r3, [r3, #28]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d019      	beq.n	800141e <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013ea:	4b40      	ldr	r3, [pc, #256]	; (80014ec <HAL_RCC_OscConfig+0x334>)
 80013ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013ee:	4b3f      	ldr	r3, [pc, #252]	; (80014ec <HAL_RCC_OscConfig+0x334>)
 80013f0:	2101      	movs	r1, #1
 80013f2:	430a      	orrs	r2, r1
 80013f4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013f6:	f7ff fa5d 	bl	80008b4 <HAL_GetTick>
 80013fa:	0003      	movs	r3, r0
 80013fc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013fe:	e008      	b.n	8001412 <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001400:	f7ff fa58 	bl	80008b4 <HAL_GetTick>
 8001404:	0002      	movs	r2, r0
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	2b02      	cmp	r3, #2
 800140c:	d901      	bls.n	8001412 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 800140e:	2303      	movs	r3, #3
 8001410:	e1e1      	b.n	80017d6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001412:	4b36      	ldr	r3, [pc, #216]	; (80014ec <HAL_RCC_OscConfig+0x334>)
 8001414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001416:	2202      	movs	r2, #2
 8001418:	4013      	ands	r3, r2
 800141a:	d0f1      	beq.n	8001400 <HAL_RCC_OscConfig+0x248>
 800141c:	e018      	b.n	8001450 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800141e:	4b33      	ldr	r3, [pc, #204]	; (80014ec <HAL_RCC_OscConfig+0x334>)
 8001420:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001422:	4b32      	ldr	r3, [pc, #200]	; (80014ec <HAL_RCC_OscConfig+0x334>)
 8001424:	2101      	movs	r1, #1
 8001426:	438a      	bics	r2, r1
 8001428:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800142a:	f7ff fa43 	bl	80008b4 <HAL_GetTick>
 800142e:	0003      	movs	r3, r0
 8001430:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001432:	e008      	b.n	8001446 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001434:	f7ff fa3e 	bl	80008b4 <HAL_GetTick>
 8001438:	0002      	movs	r2, r0
 800143a:	69bb      	ldr	r3, [r7, #24]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	2b02      	cmp	r3, #2
 8001440:	d901      	bls.n	8001446 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e1c7      	b.n	80017d6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001446:	4b29      	ldr	r3, [pc, #164]	; (80014ec <HAL_RCC_OscConfig+0x334>)
 8001448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800144a:	2202      	movs	r2, #2
 800144c:	4013      	ands	r3, r2
 800144e:	d1f1      	bne.n	8001434 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2204      	movs	r2, #4
 8001456:	4013      	ands	r3, r2
 8001458:	d100      	bne.n	800145c <HAL_RCC_OscConfig+0x2a4>
 800145a:	e0b5      	b.n	80015c8 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 800145c:	201f      	movs	r0, #31
 800145e:	183b      	adds	r3, r7, r0
 8001460:	2200      	movs	r2, #0
 8001462:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001464:	4b21      	ldr	r3, [pc, #132]	; (80014ec <HAL_RCC_OscConfig+0x334>)
 8001466:	69da      	ldr	r2, [r3, #28]
 8001468:	2380      	movs	r3, #128	; 0x80
 800146a:	055b      	lsls	r3, r3, #21
 800146c:	4013      	ands	r3, r2
 800146e:	d110      	bne.n	8001492 <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001470:	4b1e      	ldr	r3, [pc, #120]	; (80014ec <HAL_RCC_OscConfig+0x334>)
 8001472:	69da      	ldr	r2, [r3, #28]
 8001474:	4b1d      	ldr	r3, [pc, #116]	; (80014ec <HAL_RCC_OscConfig+0x334>)
 8001476:	2180      	movs	r1, #128	; 0x80
 8001478:	0549      	lsls	r1, r1, #21
 800147a:	430a      	orrs	r2, r1
 800147c:	61da      	str	r2, [r3, #28]
 800147e:	4b1b      	ldr	r3, [pc, #108]	; (80014ec <HAL_RCC_OscConfig+0x334>)
 8001480:	69da      	ldr	r2, [r3, #28]
 8001482:	2380      	movs	r3, #128	; 0x80
 8001484:	055b      	lsls	r3, r3, #21
 8001486:	4013      	ands	r3, r2
 8001488:	60fb      	str	r3, [r7, #12]
 800148a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800148c:	183b      	adds	r3, r7, r0
 800148e:	2201      	movs	r2, #1
 8001490:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001492:	4b19      	ldr	r3, [pc, #100]	; (80014f8 <HAL_RCC_OscConfig+0x340>)
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	2380      	movs	r3, #128	; 0x80
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	4013      	ands	r3, r2
 800149c:	d11a      	bne.n	80014d4 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800149e:	4b16      	ldr	r3, [pc, #88]	; (80014f8 <HAL_RCC_OscConfig+0x340>)
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	4b15      	ldr	r3, [pc, #84]	; (80014f8 <HAL_RCC_OscConfig+0x340>)
 80014a4:	2180      	movs	r1, #128	; 0x80
 80014a6:	0049      	lsls	r1, r1, #1
 80014a8:	430a      	orrs	r2, r1
 80014aa:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014ac:	f7ff fa02 	bl	80008b4 <HAL_GetTick>
 80014b0:	0003      	movs	r3, r0
 80014b2:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014b4:	e008      	b.n	80014c8 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014b6:	f7ff f9fd 	bl	80008b4 <HAL_GetTick>
 80014ba:	0002      	movs	r2, r0
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	2b64      	cmp	r3, #100	; 0x64
 80014c2:	d901      	bls.n	80014c8 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 80014c4:	2303      	movs	r3, #3
 80014c6:	e186      	b.n	80017d6 <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014c8:	4b0b      	ldr	r3, [pc, #44]	; (80014f8 <HAL_RCC_OscConfig+0x340>)
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	2380      	movs	r3, #128	; 0x80
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	4013      	ands	r3, r2
 80014d2:	d0f0      	beq.n	80014b6 <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d10f      	bne.n	80014fc <HAL_RCC_OscConfig+0x344>
 80014dc:	4b03      	ldr	r3, [pc, #12]	; (80014ec <HAL_RCC_OscConfig+0x334>)
 80014de:	6a1a      	ldr	r2, [r3, #32]
 80014e0:	4b02      	ldr	r3, [pc, #8]	; (80014ec <HAL_RCC_OscConfig+0x334>)
 80014e2:	2101      	movs	r1, #1
 80014e4:	430a      	orrs	r2, r1
 80014e6:	621a      	str	r2, [r3, #32]
 80014e8:	e036      	b.n	8001558 <HAL_RCC_OscConfig+0x3a0>
 80014ea:	46c0      	nop			; (mov r8, r8)
 80014ec:	40021000 	.word	0x40021000
 80014f0:	fffeffff 	.word	0xfffeffff
 80014f4:	fffbffff 	.word	0xfffbffff
 80014f8:	40007000 	.word	0x40007000
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d10c      	bne.n	800151e <HAL_RCC_OscConfig+0x366>
 8001504:	4bb6      	ldr	r3, [pc, #728]	; (80017e0 <HAL_RCC_OscConfig+0x628>)
 8001506:	6a1a      	ldr	r2, [r3, #32]
 8001508:	4bb5      	ldr	r3, [pc, #724]	; (80017e0 <HAL_RCC_OscConfig+0x628>)
 800150a:	2101      	movs	r1, #1
 800150c:	438a      	bics	r2, r1
 800150e:	621a      	str	r2, [r3, #32]
 8001510:	4bb3      	ldr	r3, [pc, #716]	; (80017e0 <HAL_RCC_OscConfig+0x628>)
 8001512:	6a1a      	ldr	r2, [r3, #32]
 8001514:	4bb2      	ldr	r3, [pc, #712]	; (80017e0 <HAL_RCC_OscConfig+0x628>)
 8001516:	2104      	movs	r1, #4
 8001518:	438a      	bics	r2, r1
 800151a:	621a      	str	r2, [r3, #32]
 800151c:	e01c      	b.n	8001558 <HAL_RCC_OscConfig+0x3a0>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	2b05      	cmp	r3, #5
 8001524:	d10c      	bne.n	8001540 <HAL_RCC_OscConfig+0x388>
 8001526:	4bae      	ldr	r3, [pc, #696]	; (80017e0 <HAL_RCC_OscConfig+0x628>)
 8001528:	6a1a      	ldr	r2, [r3, #32]
 800152a:	4bad      	ldr	r3, [pc, #692]	; (80017e0 <HAL_RCC_OscConfig+0x628>)
 800152c:	2104      	movs	r1, #4
 800152e:	430a      	orrs	r2, r1
 8001530:	621a      	str	r2, [r3, #32]
 8001532:	4bab      	ldr	r3, [pc, #684]	; (80017e0 <HAL_RCC_OscConfig+0x628>)
 8001534:	6a1a      	ldr	r2, [r3, #32]
 8001536:	4baa      	ldr	r3, [pc, #680]	; (80017e0 <HAL_RCC_OscConfig+0x628>)
 8001538:	2101      	movs	r1, #1
 800153a:	430a      	orrs	r2, r1
 800153c:	621a      	str	r2, [r3, #32]
 800153e:	e00b      	b.n	8001558 <HAL_RCC_OscConfig+0x3a0>
 8001540:	4ba7      	ldr	r3, [pc, #668]	; (80017e0 <HAL_RCC_OscConfig+0x628>)
 8001542:	6a1a      	ldr	r2, [r3, #32]
 8001544:	4ba6      	ldr	r3, [pc, #664]	; (80017e0 <HAL_RCC_OscConfig+0x628>)
 8001546:	2101      	movs	r1, #1
 8001548:	438a      	bics	r2, r1
 800154a:	621a      	str	r2, [r3, #32]
 800154c:	4ba4      	ldr	r3, [pc, #656]	; (80017e0 <HAL_RCC_OscConfig+0x628>)
 800154e:	6a1a      	ldr	r2, [r3, #32]
 8001550:	4ba3      	ldr	r3, [pc, #652]	; (80017e0 <HAL_RCC_OscConfig+0x628>)
 8001552:	2104      	movs	r1, #4
 8001554:	438a      	bics	r2, r1
 8001556:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d014      	beq.n	800158a <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001560:	f7ff f9a8 	bl	80008b4 <HAL_GetTick>
 8001564:	0003      	movs	r3, r0
 8001566:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001568:	e009      	b.n	800157e <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800156a:	f7ff f9a3 	bl	80008b4 <HAL_GetTick>
 800156e:	0002      	movs	r2, r0
 8001570:	69bb      	ldr	r3, [r7, #24]
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	4a9b      	ldr	r2, [pc, #620]	; (80017e4 <HAL_RCC_OscConfig+0x62c>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d901      	bls.n	800157e <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e12b      	b.n	80017d6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800157e:	4b98      	ldr	r3, [pc, #608]	; (80017e0 <HAL_RCC_OscConfig+0x628>)
 8001580:	6a1b      	ldr	r3, [r3, #32]
 8001582:	2202      	movs	r2, #2
 8001584:	4013      	ands	r3, r2
 8001586:	d0f0      	beq.n	800156a <HAL_RCC_OscConfig+0x3b2>
 8001588:	e013      	b.n	80015b2 <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800158a:	f7ff f993 	bl	80008b4 <HAL_GetTick>
 800158e:	0003      	movs	r3, r0
 8001590:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001592:	e009      	b.n	80015a8 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001594:	f7ff f98e 	bl	80008b4 <HAL_GetTick>
 8001598:	0002      	movs	r2, r0
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	4a91      	ldr	r2, [pc, #580]	; (80017e4 <HAL_RCC_OscConfig+0x62c>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d901      	bls.n	80015a8 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 80015a4:	2303      	movs	r3, #3
 80015a6:	e116      	b.n	80017d6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015a8:	4b8d      	ldr	r3, [pc, #564]	; (80017e0 <HAL_RCC_OscConfig+0x628>)
 80015aa:	6a1b      	ldr	r3, [r3, #32]
 80015ac:	2202      	movs	r2, #2
 80015ae:	4013      	ands	r3, r2
 80015b0:	d1f0      	bne.n	8001594 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80015b2:	231f      	movs	r3, #31
 80015b4:	18fb      	adds	r3, r7, r3
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d105      	bne.n	80015c8 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015bc:	4b88      	ldr	r3, [pc, #544]	; (80017e0 <HAL_RCC_OscConfig+0x628>)
 80015be:	69da      	ldr	r2, [r3, #28]
 80015c0:	4b87      	ldr	r3, [pc, #540]	; (80017e0 <HAL_RCC_OscConfig+0x628>)
 80015c2:	4989      	ldr	r1, [pc, #548]	; (80017e8 <HAL_RCC_OscConfig+0x630>)
 80015c4:	400a      	ands	r2, r1
 80015c6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2210      	movs	r2, #16
 80015ce:	4013      	ands	r3, r2
 80015d0:	d063      	beq.n	800169a <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	695b      	ldr	r3, [r3, #20]
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d12a      	bne.n	8001630 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80015da:	4b81      	ldr	r3, [pc, #516]	; (80017e0 <HAL_RCC_OscConfig+0x628>)
 80015dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015de:	4b80      	ldr	r3, [pc, #512]	; (80017e0 <HAL_RCC_OscConfig+0x628>)
 80015e0:	2104      	movs	r1, #4
 80015e2:	430a      	orrs	r2, r1
 80015e4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80015e6:	4b7e      	ldr	r3, [pc, #504]	; (80017e0 <HAL_RCC_OscConfig+0x628>)
 80015e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015ea:	4b7d      	ldr	r3, [pc, #500]	; (80017e0 <HAL_RCC_OscConfig+0x628>)
 80015ec:	2101      	movs	r1, #1
 80015ee:	430a      	orrs	r2, r1
 80015f0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015f2:	f7ff f95f 	bl	80008b4 <HAL_GetTick>
 80015f6:	0003      	movs	r3, r0
 80015f8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80015fa:	e008      	b.n	800160e <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80015fc:	f7ff f95a 	bl	80008b4 <HAL_GetTick>
 8001600:	0002      	movs	r2, r0
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	2b02      	cmp	r3, #2
 8001608:	d901      	bls.n	800160e <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e0e3      	b.n	80017d6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800160e:	4b74      	ldr	r3, [pc, #464]	; (80017e0 <HAL_RCC_OscConfig+0x628>)
 8001610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001612:	2202      	movs	r2, #2
 8001614:	4013      	ands	r3, r2
 8001616:	d0f1      	beq.n	80015fc <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001618:	4b71      	ldr	r3, [pc, #452]	; (80017e0 <HAL_RCC_OscConfig+0x628>)
 800161a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800161c:	22f8      	movs	r2, #248	; 0xf8
 800161e:	4393      	bics	r3, r2
 8001620:	0019      	movs	r1, r3
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	699b      	ldr	r3, [r3, #24]
 8001626:	00da      	lsls	r2, r3, #3
 8001628:	4b6d      	ldr	r3, [pc, #436]	; (80017e0 <HAL_RCC_OscConfig+0x628>)
 800162a:	430a      	orrs	r2, r1
 800162c:	635a      	str	r2, [r3, #52]	; 0x34
 800162e:	e034      	b.n	800169a <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	695b      	ldr	r3, [r3, #20]
 8001634:	3305      	adds	r3, #5
 8001636:	d111      	bne.n	800165c <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001638:	4b69      	ldr	r3, [pc, #420]	; (80017e0 <HAL_RCC_OscConfig+0x628>)
 800163a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800163c:	4b68      	ldr	r3, [pc, #416]	; (80017e0 <HAL_RCC_OscConfig+0x628>)
 800163e:	2104      	movs	r1, #4
 8001640:	438a      	bics	r2, r1
 8001642:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001644:	4b66      	ldr	r3, [pc, #408]	; (80017e0 <HAL_RCC_OscConfig+0x628>)
 8001646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001648:	22f8      	movs	r2, #248	; 0xf8
 800164a:	4393      	bics	r3, r2
 800164c:	0019      	movs	r1, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	699b      	ldr	r3, [r3, #24]
 8001652:	00da      	lsls	r2, r3, #3
 8001654:	4b62      	ldr	r3, [pc, #392]	; (80017e0 <HAL_RCC_OscConfig+0x628>)
 8001656:	430a      	orrs	r2, r1
 8001658:	635a      	str	r2, [r3, #52]	; 0x34
 800165a:	e01e      	b.n	800169a <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800165c:	4b60      	ldr	r3, [pc, #384]	; (80017e0 <HAL_RCC_OscConfig+0x628>)
 800165e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001660:	4b5f      	ldr	r3, [pc, #380]	; (80017e0 <HAL_RCC_OscConfig+0x628>)
 8001662:	2104      	movs	r1, #4
 8001664:	430a      	orrs	r2, r1
 8001666:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001668:	4b5d      	ldr	r3, [pc, #372]	; (80017e0 <HAL_RCC_OscConfig+0x628>)
 800166a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800166c:	4b5c      	ldr	r3, [pc, #368]	; (80017e0 <HAL_RCC_OscConfig+0x628>)
 800166e:	2101      	movs	r1, #1
 8001670:	438a      	bics	r2, r1
 8001672:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001674:	f7ff f91e 	bl	80008b4 <HAL_GetTick>
 8001678:	0003      	movs	r3, r0
 800167a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800167c:	e008      	b.n	8001690 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800167e:	f7ff f919 	bl	80008b4 <HAL_GetTick>
 8001682:	0002      	movs	r2, r0
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	2b02      	cmp	r3, #2
 800168a:	d901      	bls.n	8001690 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 800168c:	2303      	movs	r3, #3
 800168e:	e0a2      	b.n	80017d6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001690:	4b53      	ldr	r3, [pc, #332]	; (80017e0 <HAL_RCC_OscConfig+0x628>)
 8001692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001694:	2202      	movs	r2, #2
 8001696:	4013      	ands	r3, r2
 8001698:	d1f1      	bne.n	800167e <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6a1b      	ldr	r3, [r3, #32]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d100      	bne.n	80016a4 <HAL_RCC_OscConfig+0x4ec>
 80016a2:	e097      	b.n	80017d4 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016a4:	4b4e      	ldr	r3, [pc, #312]	; (80017e0 <HAL_RCC_OscConfig+0x628>)
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	220c      	movs	r2, #12
 80016aa:	4013      	ands	r3, r2
 80016ac:	2b08      	cmp	r3, #8
 80016ae:	d100      	bne.n	80016b2 <HAL_RCC_OscConfig+0x4fa>
 80016b0:	e06b      	b.n	800178a <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6a1b      	ldr	r3, [r3, #32]
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d14c      	bne.n	8001754 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016ba:	4b49      	ldr	r3, [pc, #292]	; (80017e0 <HAL_RCC_OscConfig+0x628>)
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	4b48      	ldr	r3, [pc, #288]	; (80017e0 <HAL_RCC_OscConfig+0x628>)
 80016c0:	494a      	ldr	r1, [pc, #296]	; (80017ec <HAL_RCC_OscConfig+0x634>)
 80016c2:	400a      	ands	r2, r1
 80016c4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c6:	f7ff f8f5 	bl	80008b4 <HAL_GetTick>
 80016ca:	0003      	movs	r3, r0
 80016cc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016ce:	e008      	b.n	80016e2 <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016d0:	f7ff f8f0 	bl	80008b4 <HAL_GetTick>
 80016d4:	0002      	movs	r2, r0
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	2b02      	cmp	r3, #2
 80016dc:	d901      	bls.n	80016e2 <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 80016de:	2303      	movs	r3, #3
 80016e0:	e079      	b.n	80017d6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016e2:	4b3f      	ldr	r3, [pc, #252]	; (80017e0 <HAL_RCC_OscConfig+0x628>)
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	2380      	movs	r3, #128	; 0x80
 80016e8:	049b      	lsls	r3, r3, #18
 80016ea:	4013      	ands	r3, r2
 80016ec:	d1f0      	bne.n	80016d0 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016ee:	4b3c      	ldr	r3, [pc, #240]	; (80017e0 <HAL_RCC_OscConfig+0x628>)
 80016f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f2:	220f      	movs	r2, #15
 80016f4:	4393      	bics	r3, r2
 80016f6:	0019      	movs	r1, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016fc:	4b38      	ldr	r3, [pc, #224]	; (80017e0 <HAL_RCC_OscConfig+0x628>)
 80016fe:	430a      	orrs	r2, r1
 8001700:	62da      	str	r2, [r3, #44]	; 0x2c
 8001702:	4b37      	ldr	r3, [pc, #220]	; (80017e0 <HAL_RCC_OscConfig+0x628>)
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	4a3a      	ldr	r2, [pc, #232]	; (80017f0 <HAL_RCC_OscConfig+0x638>)
 8001708:	4013      	ands	r3, r2
 800170a:	0019      	movs	r1, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001714:	431a      	orrs	r2, r3
 8001716:	4b32      	ldr	r3, [pc, #200]	; (80017e0 <HAL_RCC_OscConfig+0x628>)
 8001718:	430a      	orrs	r2, r1
 800171a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800171c:	4b30      	ldr	r3, [pc, #192]	; (80017e0 <HAL_RCC_OscConfig+0x628>)
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	4b2f      	ldr	r3, [pc, #188]	; (80017e0 <HAL_RCC_OscConfig+0x628>)
 8001722:	2180      	movs	r1, #128	; 0x80
 8001724:	0449      	lsls	r1, r1, #17
 8001726:	430a      	orrs	r2, r1
 8001728:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800172a:	f7ff f8c3 	bl	80008b4 <HAL_GetTick>
 800172e:	0003      	movs	r3, r0
 8001730:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001732:	e008      	b.n	8001746 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001734:	f7ff f8be 	bl	80008b4 <HAL_GetTick>
 8001738:	0002      	movs	r2, r0
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	2b02      	cmp	r3, #2
 8001740:	d901      	bls.n	8001746 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e047      	b.n	80017d6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001746:	4b26      	ldr	r3, [pc, #152]	; (80017e0 <HAL_RCC_OscConfig+0x628>)
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	2380      	movs	r3, #128	; 0x80
 800174c:	049b      	lsls	r3, r3, #18
 800174e:	4013      	ands	r3, r2
 8001750:	d0f0      	beq.n	8001734 <HAL_RCC_OscConfig+0x57c>
 8001752:	e03f      	b.n	80017d4 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001754:	4b22      	ldr	r3, [pc, #136]	; (80017e0 <HAL_RCC_OscConfig+0x628>)
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	4b21      	ldr	r3, [pc, #132]	; (80017e0 <HAL_RCC_OscConfig+0x628>)
 800175a:	4924      	ldr	r1, [pc, #144]	; (80017ec <HAL_RCC_OscConfig+0x634>)
 800175c:	400a      	ands	r2, r1
 800175e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001760:	f7ff f8a8 	bl	80008b4 <HAL_GetTick>
 8001764:	0003      	movs	r3, r0
 8001766:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001768:	e008      	b.n	800177c <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800176a:	f7ff f8a3 	bl	80008b4 <HAL_GetTick>
 800176e:	0002      	movs	r2, r0
 8001770:	69bb      	ldr	r3, [r7, #24]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	2b02      	cmp	r3, #2
 8001776:	d901      	bls.n	800177c <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8001778:	2303      	movs	r3, #3
 800177a:	e02c      	b.n	80017d6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800177c:	4b18      	ldr	r3, [pc, #96]	; (80017e0 <HAL_RCC_OscConfig+0x628>)
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	2380      	movs	r3, #128	; 0x80
 8001782:	049b      	lsls	r3, r3, #18
 8001784:	4013      	ands	r3, r2
 8001786:	d1f0      	bne.n	800176a <HAL_RCC_OscConfig+0x5b2>
 8001788:	e024      	b.n	80017d4 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6a1b      	ldr	r3, [r3, #32]
 800178e:	2b01      	cmp	r3, #1
 8001790:	d101      	bne.n	8001796 <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e01f      	b.n	80017d6 <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001796:	4b12      	ldr	r3, [pc, #72]	; (80017e0 <HAL_RCC_OscConfig+0x628>)
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800179c:	4b10      	ldr	r3, [pc, #64]	; (80017e0 <HAL_RCC_OscConfig+0x628>)
 800179e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a0:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017a2:	697a      	ldr	r2, [r7, #20]
 80017a4:	23c0      	movs	r3, #192	; 0xc0
 80017a6:	025b      	lsls	r3, r3, #9
 80017a8:	401a      	ands	r2, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d10e      	bne.n	80017d0 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	220f      	movs	r2, #15
 80017b6:	401a      	ands	r2, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017bc:	429a      	cmp	r2, r3
 80017be:	d107      	bne.n	80017d0 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80017c0:	697a      	ldr	r2, [r7, #20]
 80017c2:	23f0      	movs	r3, #240	; 0xf0
 80017c4:	039b      	lsls	r3, r3, #14
 80017c6:	401a      	ands	r2, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d001      	beq.n	80017d4 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e000      	b.n	80017d6 <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 80017d4:	2300      	movs	r3, #0
}
 80017d6:	0018      	movs	r0, r3
 80017d8:	46bd      	mov	sp, r7
 80017da:	b008      	add	sp, #32
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	46c0      	nop			; (mov r8, r8)
 80017e0:	40021000 	.word	0x40021000
 80017e4:	00001388 	.word	0x00001388
 80017e8:	efffffff 	.word	0xefffffff
 80017ec:	feffffff 	.word	0xfeffffff
 80017f0:	ffc27fff 	.word	0xffc27fff

080017f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d101      	bne.n	8001808 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	e0b3      	b.n	8001970 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001808:	4b5b      	ldr	r3, [pc, #364]	; (8001978 <HAL_RCC_ClockConfig+0x184>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2201      	movs	r2, #1
 800180e:	4013      	ands	r3, r2
 8001810:	683a      	ldr	r2, [r7, #0]
 8001812:	429a      	cmp	r2, r3
 8001814:	d911      	bls.n	800183a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001816:	4b58      	ldr	r3, [pc, #352]	; (8001978 <HAL_RCC_ClockConfig+0x184>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	2201      	movs	r2, #1
 800181c:	4393      	bics	r3, r2
 800181e:	0019      	movs	r1, r3
 8001820:	4b55      	ldr	r3, [pc, #340]	; (8001978 <HAL_RCC_ClockConfig+0x184>)
 8001822:	683a      	ldr	r2, [r7, #0]
 8001824:	430a      	orrs	r2, r1
 8001826:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001828:	4b53      	ldr	r3, [pc, #332]	; (8001978 <HAL_RCC_ClockConfig+0x184>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2201      	movs	r2, #1
 800182e:	4013      	ands	r3, r2
 8001830:	683a      	ldr	r2, [r7, #0]
 8001832:	429a      	cmp	r2, r3
 8001834:	d001      	beq.n	800183a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e09a      	b.n	8001970 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	2202      	movs	r2, #2
 8001840:	4013      	ands	r3, r2
 8001842:	d015      	beq.n	8001870 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2204      	movs	r2, #4
 800184a:	4013      	ands	r3, r2
 800184c:	d006      	beq.n	800185c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800184e:	4b4b      	ldr	r3, [pc, #300]	; (800197c <HAL_RCC_ClockConfig+0x188>)
 8001850:	685a      	ldr	r2, [r3, #4]
 8001852:	4b4a      	ldr	r3, [pc, #296]	; (800197c <HAL_RCC_ClockConfig+0x188>)
 8001854:	21e0      	movs	r1, #224	; 0xe0
 8001856:	00c9      	lsls	r1, r1, #3
 8001858:	430a      	orrs	r2, r1
 800185a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800185c:	4b47      	ldr	r3, [pc, #284]	; (800197c <HAL_RCC_ClockConfig+0x188>)
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	22f0      	movs	r2, #240	; 0xf0
 8001862:	4393      	bics	r3, r2
 8001864:	0019      	movs	r1, r3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	689a      	ldr	r2, [r3, #8]
 800186a:	4b44      	ldr	r3, [pc, #272]	; (800197c <HAL_RCC_ClockConfig+0x188>)
 800186c:	430a      	orrs	r2, r1
 800186e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2201      	movs	r2, #1
 8001876:	4013      	ands	r3, r2
 8001878:	d040      	beq.n	80018fc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	2b01      	cmp	r3, #1
 8001880:	d107      	bne.n	8001892 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001882:	4b3e      	ldr	r3, [pc, #248]	; (800197c <HAL_RCC_ClockConfig+0x188>)
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	2380      	movs	r3, #128	; 0x80
 8001888:	029b      	lsls	r3, r3, #10
 800188a:	4013      	ands	r3, r2
 800188c:	d114      	bne.n	80018b8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e06e      	b.n	8001970 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	2b02      	cmp	r3, #2
 8001898:	d107      	bne.n	80018aa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800189a:	4b38      	ldr	r3, [pc, #224]	; (800197c <HAL_RCC_ClockConfig+0x188>)
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	2380      	movs	r3, #128	; 0x80
 80018a0:	049b      	lsls	r3, r3, #18
 80018a2:	4013      	ands	r3, r2
 80018a4:	d108      	bne.n	80018b8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e062      	b.n	8001970 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018aa:	4b34      	ldr	r3, [pc, #208]	; (800197c <HAL_RCC_ClockConfig+0x188>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	2202      	movs	r2, #2
 80018b0:	4013      	ands	r3, r2
 80018b2:	d101      	bne.n	80018b8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e05b      	b.n	8001970 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018b8:	4b30      	ldr	r3, [pc, #192]	; (800197c <HAL_RCC_ClockConfig+0x188>)
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	2203      	movs	r2, #3
 80018be:	4393      	bics	r3, r2
 80018c0:	0019      	movs	r1, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685a      	ldr	r2, [r3, #4]
 80018c6:	4b2d      	ldr	r3, [pc, #180]	; (800197c <HAL_RCC_ClockConfig+0x188>)
 80018c8:	430a      	orrs	r2, r1
 80018ca:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018cc:	f7fe fff2 	bl	80008b4 <HAL_GetTick>
 80018d0:	0003      	movs	r3, r0
 80018d2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018d4:	e009      	b.n	80018ea <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018d6:	f7fe ffed 	bl	80008b4 <HAL_GetTick>
 80018da:	0002      	movs	r2, r0
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	4a27      	ldr	r2, [pc, #156]	; (8001980 <HAL_RCC_ClockConfig+0x18c>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d901      	bls.n	80018ea <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e042      	b.n	8001970 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ea:	4b24      	ldr	r3, [pc, #144]	; (800197c <HAL_RCC_ClockConfig+0x188>)
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	220c      	movs	r2, #12
 80018f0:	401a      	ands	r2, r3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d1ec      	bne.n	80018d6 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018fc:	4b1e      	ldr	r3, [pc, #120]	; (8001978 <HAL_RCC_ClockConfig+0x184>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	2201      	movs	r2, #1
 8001902:	4013      	ands	r3, r2
 8001904:	683a      	ldr	r2, [r7, #0]
 8001906:	429a      	cmp	r2, r3
 8001908:	d211      	bcs.n	800192e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800190a:	4b1b      	ldr	r3, [pc, #108]	; (8001978 <HAL_RCC_ClockConfig+0x184>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	2201      	movs	r2, #1
 8001910:	4393      	bics	r3, r2
 8001912:	0019      	movs	r1, r3
 8001914:	4b18      	ldr	r3, [pc, #96]	; (8001978 <HAL_RCC_ClockConfig+0x184>)
 8001916:	683a      	ldr	r2, [r7, #0]
 8001918:	430a      	orrs	r2, r1
 800191a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800191c:	4b16      	ldr	r3, [pc, #88]	; (8001978 <HAL_RCC_ClockConfig+0x184>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2201      	movs	r2, #1
 8001922:	4013      	ands	r3, r2
 8001924:	683a      	ldr	r2, [r7, #0]
 8001926:	429a      	cmp	r2, r3
 8001928:	d001      	beq.n	800192e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e020      	b.n	8001970 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2204      	movs	r2, #4
 8001934:	4013      	ands	r3, r2
 8001936:	d009      	beq.n	800194c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001938:	4b10      	ldr	r3, [pc, #64]	; (800197c <HAL_RCC_ClockConfig+0x188>)
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	4a11      	ldr	r2, [pc, #68]	; (8001984 <HAL_RCC_ClockConfig+0x190>)
 800193e:	4013      	ands	r3, r2
 8001940:	0019      	movs	r1, r3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	68da      	ldr	r2, [r3, #12]
 8001946:	4b0d      	ldr	r3, [pc, #52]	; (800197c <HAL_RCC_ClockConfig+0x188>)
 8001948:	430a      	orrs	r2, r1
 800194a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800194c:	f000 f820 	bl	8001990 <HAL_RCC_GetSysClockFreq>
 8001950:	0001      	movs	r1, r0
 8001952:	4b0a      	ldr	r3, [pc, #40]	; (800197c <HAL_RCC_ClockConfig+0x188>)
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	091b      	lsrs	r3, r3, #4
 8001958:	220f      	movs	r2, #15
 800195a:	4013      	ands	r3, r2
 800195c:	4a0a      	ldr	r2, [pc, #40]	; (8001988 <HAL_RCC_ClockConfig+0x194>)
 800195e:	5cd3      	ldrb	r3, [r2, r3]
 8001960:	000a      	movs	r2, r1
 8001962:	40da      	lsrs	r2, r3
 8001964:	4b09      	ldr	r3, [pc, #36]	; (800198c <HAL_RCC_ClockConfig+0x198>)
 8001966:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001968:	2003      	movs	r0, #3
 800196a:	f7fe ff5d 	bl	8000828 <HAL_InitTick>
  
  return HAL_OK;
 800196e:	2300      	movs	r3, #0
}
 8001970:	0018      	movs	r0, r3
 8001972:	46bd      	mov	sp, r7
 8001974:	b004      	add	sp, #16
 8001976:	bd80      	pop	{r7, pc}
 8001978:	40022000 	.word	0x40022000
 800197c:	40021000 	.word	0x40021000
 8001980:	00001388 	.word	0x00001388
 8001984:	fffff8ff 	.word	0xfffff8ff
 8001988:	08002368 	.word	0x08002368
 800198c:	20000000 	.word	0x20000000

08001990 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001990:	b590      	push	{r4, r7, lr}
 8001992:	b08f      	sub	sp, #60	; 0x3c
 8001994:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001996:	2314      	movs	r3, #20
 8001998:	18fb      	adds	r3, r7, r3
 800199a:	4a2c      	ldr	r2, [pc, #176]	; (8001a4c <HAL_RCC_GetSysClockFreq+0xbc>)
 800199c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800199e:	c313      	stmia	r3!, {r0, r1, r4}
 80019a0:	6812      	ldr	r2, [r2, #0]
 80019a2:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80019a4:	1d3b      	adds	r3, r7, #4
 80019a6:	4a2a      	ldr	r2, [pc, #168]	; (8001a50 <HAL_RCC_GetSysClockFreq+0xc0>)
 80019a8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80019aa:	c313      	stmia	r3!, {r0, r1, r4}
 80019ac:	6812      	ldr	r2, [r2, #0]
 80019ae:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80019b0:	2300      	movs	r3, #0
 80019b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019b4:	2300      	movs	r3, #0
 80019b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80019b8:	2300      	movs	r3, #0
 80019ba:	637b      	str	r3, [r7, #52]	; 0x34
 80019bc:	2300      	movs	r3, #0
 80019be:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80019c0:	2300      	movs	r3, #0
 80019c2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80019c4:	4b23      	ldr	r3, [pc, #140]	; (8001a54 <HAL_RCC_GetSysClockFreq+0xc4>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80019ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019cc:	220c      	movs	r2, #12
 80019ce:	4013      	ands	r3, r2
 80019d0:	2b04      	cmp	r3, #4
 80019d2:	d002      	beq.n	80019da <HAL_RCC_GetSysClockFreq+0x4a>
 80019d4:	2b08      	cmp	r3, #8
 80019d6:	d003      	beq.n	80019e0 <HAL_RCC_GetSysClockFreq+0x50>
 80019d8:	e02f      	b.n	8001a3a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80019da:	4b1f      	ldr	r3, [pc, #124]	; (8001a58 <HAL_RCC_GetSysClockFreq+0xc8>)
 80019dc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80019de:	e02f      	b.n	8001a40 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80019e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019e2:	0c9b      	lsrs	r3, r3, #18
 80019e4:	220f      	movs	r2, #15
 80019e6:	4013      	ands	r3, r2
 80019e8:	2214      	movs	r2, #20
 80019ea:	18ba      	adds	r2, r7, r2
 80019ec:	5cd3      	ldrb	r3, [r2, r3]
 80019ee:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80019f0:	4b18      	ldr	r3, [pc, #96]	; (8001a54 <HAL_RCC_GetSysClockFreq+0xc4>)
 80019f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f4:	220f      	movs	r2, #15
 80019f6:	4013      	ands	r3, r2
 80019f8:	1d3a      	adds	r2, r7, #4
 80019fa:	5cd3      	ldrb	r3, [r2, r3]
 80019fc:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80019fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a00:	23c0      	movs	r3, #192	; 0xc0
 8001a02:	025b      	lsls	r3, r3, #9
 8001a04:	401a      	ands	r2, r3
 8001a06:	2380      	movs	r3, #128	; 0x80
 8001a08:	025b      	lsls	r3, r3, #9
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d109      	bne.n	8001a22 <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001a0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a10:	4811      	ldr	r0, [pc, #68]	; (8001a58 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001a12:	f7fe fb79 	bl	8000108 <__udivsi3>
 8001a16:	0003      	movs	r3, r0
 8001a18:	001a      	movs	r2, r3
 8001a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1c:	4353      	muls	r3, r2
 8001a1e:	637b      	str	r3, [r7, #52]	; 0x34
 8001a20:	e008      	b.n	8001a34 <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001a22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a24:	480c      	ldr	r0, [pc, #48]	; (8001a58 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001a26:	f7fe fb6f 	bl	8000108 <__udivsi3>
 8001a2a:	0003      	movs	r3, r0
 8001a2c:	001a      	movs	r2, r3
 8001a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a30:	4353      	muls	r3, r2
 8001a32:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001a34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a36:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001a38:	e002      	b.n	8001a40 <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a3a:	4b07      	ldr	r3, [pc, #28]	; (8001a58 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001a3c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001a3e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001a42:	0018      	movs	r0, r3
 8001a44:	46bd      	mov	sp, r7
 8001a46:	b00f      	add	sp, #60	; 0x3c
 8001a48:	bd90      	pop	{r4, r7, pc}
 8001a4a:	46c0      	nop			; (mov r8, r8)
 8001a4c:	08002348 	.word	0x08002348
 8001a50:	08002358 	.word	0x08002358
 8001a54:	40021000 	.word	0x40021000
 8001a58:	007a1200 	.word	0x007a1200

08001a5c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d101      	bne.n	8001a6e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e042      	b.n	8001af4 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	223d      	movs	r2, #61	; 0x3d
 8001a72:	5c9b      	ldrb	r3, [r3, r2]
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d107      	bne.n	8001a8a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	223c      	movs	r2, #60	; 0x3c
 8001a7e:	2100      	movs	r1, #0
 8001a80:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	0018      	movs	r0, r3
 8001a86:	f7fe fe15 	bl	80006b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	223d      	movs	r2, #61	; 0x3d
 8001a8e:	2102      	movs	r1, #2
 8001a90:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	3304      	adds	r3, #4
 8001a9a:	0019      	movs	r1, r3
 8001a9c:	0010      	movs	r0, r2
 8001a9e:	f000 f8f3 	bl	8001c88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2246      	movs	r2, #70	; 0x46
 8001aa6:	2101      	movs	r1, #1
 8001aa8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	223e      	movs	r2, #62	; 0x3e
 8001aae:	2101      	movs	r1, #1
 8001ab0:	5499      	strb	r1, [r3, r2]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	223f      	movs	r2, #63	; 0x3f
 8001ab6:	2101      	movs	r1, #1
 8001ab8:	5499      	strb	r1, [r3, r2]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2240      	movs	r2, #64	; 0x40
 8001abe:	2101      	movs	r1, #1
 8001ac0:	5499      	strb	r1, [r3, r2]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2241      	movs	r2, #65	; 0x41
 8001ac6:	2101      	movs	r1, #1
 8001ac8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2242      	movs	r2, #66	; 0x42
 8001ace:	2101      	movs	r1, #1
 8001ad0:	5499      	strb	r1, [r3, r2]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2243      	movs	r2, #67	; 0x43
 8001ad6:	2101      	movs	r1, #1
 8001ad8:	5499      	strb	r1, [r3, r2]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2244      	movs	r2, #68	; 0x44
 8001ade:	2101      	movs	r1, #1
 8001ae0:	5499      	strb	r1, [r3, r2]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2245      	movs	r2, #69	; 0x45
 8001ae6:	2101      	movs	r1, #1
 8001ae8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	223d      	movs	r2, #61	; 0x3d
 8001aee:	2101      	movs	r1, #1
 8001af0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001af2:	2300      	movs	r3, #0
}
 8001af4:	0018      	movs	r0, r3
 8001af6:	46bd      	mov	sp, r7
 8001af8:	b002      	add	sp, #8
 8001afa:	bd80      	pop	{r7, pc}

08001afc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b086      	sub	sp, #24
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	60b9      	str	r1, [r7, #8]
 8001b06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b08:	2317      	movs	r3, #23
 8001b0a:	18fb      	adds	r3, r7, r3
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	223c      	movs	r2, #60	; 0x3c
 8001b14:	5c9b      	ldrb	r3, [r3, r2]
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d101      	bne.n	8001b1e <HAL_TIM_PWM_ConfigChannel+0x22>
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	e0ad      	b.n	8001c7a <HAL_TIM_PWM_ConfigChannel+0x17e>
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	223c      	movs	r2, #60	; 0x3c
 8001b22:	2101      	movs	r1, #1
 8001b24:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2b0c      	cmp	r3, #12
 8001b2a:	d100      	bne.n	8001b2e <HAL_TIM_PWM_ConfigChannel+0x32>
 8001b2c:	e076      	b.n	8001c1c <HAL_TIM_PWM_ConfigChannel+0x120>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2b0c      	cmp	r3, #12
 8001b32:	d900      	bls.n	8001b36 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8001b34:	e095      	b.n	8001c62 <HAL_TIM_PWM_ConfigChannel+0x166>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2b08      	cmp	r3, #8
 8001b3a:	d04e      	beq.n	8001bda <HAL_TIM_PWM_ConfigChannel+0xde>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2b08      	cmp	r3, #8
 8001b40:	d900      	bls.n	8001b44 <HAL_TIM_PWM_ConfigChannel+0x48>
 8001b42:	e08e      	b.n	8001c62 <HAL_TIM_PWM_ConfigChannel+0x166>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d003      	beq.n	8001b52 <HAL_TIM_PWM_ConfigChannel+0x56>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2b04      	cmp	r3, #4
 8001b4e:	d021      	beq.n	8001b94 <HAL_TIM_PWM_ConfigChannel+0x98>
 8001b50:	e087      	b.n	8001c62 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	68ba      	ldr	r2, [r7, #8]
 8001b58:	0011      	movs	r1, r2
 8001b5a:	0018      	movs	r0, r3
 8001b5c:	f000 f90a 	bl	8001d74 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	699a      	ldr	r2, [r3, #24]
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	2108      	movs	r1, #8
 8001b6c:	430a      	orrs	r2, r1
 8001b6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	699a      	ldr	r2, [r3, #24]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	2104      	movs	r1, #4
 8001b7c:	438a      	bics	r2, r1
 8001b7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	6999      	ldr	r1, [r3, #24]
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	691a      	ldr	r2, [r3, #16]
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	430a      	orrs	r2, r1
 8001b90:	619a      	str	r2, [r3, #24]
      break;
 8001b92:	e06b      	b.n	8001c6c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	68ba      	ldr	r2, [r7, #8]
 8001b9a:	0011      	movs	r1, r2
 8001b9c:	0018      	movs	r0, r3
 8001b9e:	f000 f971 	bl	8001e84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	699a      	ldr	r2, [r3, #24]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2180      	movs	r1, #128	; 0x80
 8001bae:	0109      	lsls	r1, r1, #4
 8001bb0:	430a      	orrs	r2, r1
 8001bb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	699a      	ldr	r2, [r3, #24]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4931      	ldr	r1, [pc, #196]	; (8001c84 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8001bc0:	400a      	ands	r2, r1
 8001bc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	6999      	ldr	r1, [r3, #24]
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	691b      	ldr	r3, [r3, #16]
 8001bce:	021a      	lsls	r2, r3, #8
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	430a      	orrs	r2, r1
 8001bd6:	619a      	str	r2, [r3, #24]
      break;
 8001bd8:	e048      	b.n	8001c6c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	68ba      	ldr	r2, [r7, #8]
 8001be0:	0011      	movs	r1, r2
 8001be2:	0018      	movs	r0, r3
 8001be4:	f000 f9d2 	bl	8001f8c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	69da      	ldr	r2, [r3, #28]
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	2108      	movs	r1, #8
 8001bf4:	430a      	orrs	r2, r1
 8001bf6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	69da      	ldr	r2, [r3, #28]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	2104      	movs	r1, #4
 8001c04:	438a      	bics	r2, r1
 8001c06:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	69d9      	ldr	r1, [r3, #28]
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	691a      	ldr	r2, [r3, #16]
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	430a      	orrs	r2, r1
 8001c18:	61da      	str	r2, [r3, #28]
      break;
 8001c1a:	e027      	b.n	8001c6c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	68ba      	ldr	r2, [r7, #8]
 8001c22:	0011      	movs	r1, r2
 8001c24:	0018      	movs	r0, r3
 8001c26:	f000 fa37 	bl	8002098 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	69da      	ldr	r2, [r3, #28]
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2180      	movs	r1, #128	; 0x80
 8001c36:	0109      	lsls	r1, r1, #4
 8001c38:	430a      	orrs	r2, r1
 8001c3a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	69da      	ldr	r2, [r3, #28]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	490f      	ldr	r1, [pc, #60]	; (8001c84 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8001c48:	400a      	ands	r2, r1
 8001c4a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	69d9      	ldr	r1, [r3, #28]
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	691b      	ldr	r3, [r3, #16]
 8001c56:	021a      	lsls	r2, r3, #8
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	430a      	orrs	r2, r1
 8001c5e:	61da      	str	r2, [r3, #28]
      break;
 8001c60:	e004      	b.n	8001c6c <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8001c62:	2317      	movs	r3, #23
 8001c64:	18fb      	adds	r3, r7, r3
 8001c66:	2201      	movs	r2, #1
 8001c68:	701a      	strb	r2, [r3, #0]
      break;
 8001c6a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	223c      	movs	r2, #60	; 0x3c
 8001c70:	2100      	movs	r1, #0
 8001c72:	5499      	strb	r1, [r3, r2]

  return status;
 8001c74:	2317      	movs	r3, #23
 8001c76:	18fb      	adds	r3, r7, r3
 8001c78:	781b      	ldrb	r3, [r3, #0]
}
 8001c7a:	0018      	movs	r0, r3
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	b006      	add	sp, #24
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	46c0      	nop			; (mov r8, r8)
 8001c84:	fffffbff 	.word	0xfffffbff

08001c88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	4a2f      	ldr	r2, [pc, #188]	; (8001d58 <TIM_Base_SetConfig+0xd0>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d003      	beq.n	8001ca8 <TIM_Base_SetConfig+0x20>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	4a2e      	ldr	r2, [pc, #184]	; (8001d5c <TIM_Base_SetConfig+0xd4>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d108      	bne.n	8001cba <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2270      	movs	r2, #112	; 0x70
 8001cac:	4393      	bics	r3, r2
 8001cae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	68fa      	ldr	r2, [r7, #12]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a26      	ldr	r2, [pc, #152]	; (8001d58 <TIM_Base_SetConfig+0xd0>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d013      	beq.n	8001cea <TIM_Base_SetConfig+0x62>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a25      	ldr	r2, [pc, #148]	; (8001d5c <TIM_Base_SetConfig+0xd4>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d00f      	beq.n	8001cea <TIM_Base_SetConfig+0x62>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4a24      	ldr	r2, [pc, #144]	; (8001d60 <TIM_Base_SetConfig+0xd8>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d00b      	beq.n	8001cea <TIM_Base_SetConfig+0x62>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4a23      	ldr	r2, [pc, #140]	; (8001d64 <TIM_Base_SetConfig+0xdc>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d007      	beq.n	8001cea <TIM_Base_SetConfig+0x62>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a22      	ldr	r2, [pc, #136]	; (8001d68 <TIM_Base_SetConfig+0xe0>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d003      	beq.n	8001cea <TIM_Base_SetConfig+0x62>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a21      	ldr	r2, [pc, #132]	; (8001d6c <TIM_Base_SetConfig+0xe4>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d108      	bne.n	8001cfc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	4a20      	ldr	r2, [pc, #128]	; (8001d70 <TIM_Base_SetConfig+0xe8>)
 8001cee:	4013      	ands	r3, r2
 8001cf0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	68db      	ldr	r3, [r3, #12]
 8001cf6:	68fa      	ldr	r2, [r7, #12]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2280      	movs	r2, #128	; 0x80
 8001d00:	4393      	bics	r3, r2
 8001d02:	001a      	movs	r2, r3
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	695b      	ldr	r3, [r3, #20]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	68fa      	ldr	r2, [r7, #12]
 8001d10:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	689a      	ldr	r2, [r3, #8]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a0c      	ldr	r2, [pc, #48]	; (8001d58 <TIM_Base_SetConfig+0xd0>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d00b      	beq.n	8001d42 <TIM_Base_SetConfig+0xba>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a0d      	ldr	r2, [pc, #52]	; (8001d64 <TIM_Base_SetConfig+0xdc>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d007      	beq.n	8001d42 <TIM_Base_SetConfig+0xba>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a0c      	ldr	r2, [pc, #48]	; (8001d68 <TIM_Base_SetConfig+0xe0>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d003      	beq.n	8001d42 <TIM_Base_SetConfig+0xba>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a0b      	ldr	r2, [pc, #44]	; (8001d6c <TIM_Base_SetConfig+0xe4>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d103      	bne.n	8001d4a <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	691a      	ldr	r2, [r3, #16]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	615a      	str	r2, [r3, #20]
}
 8001d50:	46c0      	nop			; (mov r8, r8)
 8001d52:	46bd      	mov	sp, r7
 8001d54:	b004      	add	sp, #16
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	40012c00 	.word	0x40012c00
 8001d5c:	40000400 	.word	0x40000400
 8001d60:	40002000 	.word	0x40002000
 8001d64:	40014000 	.word	0x40014000
 8001d68:	40014400 	.word	0x40014400
 8001d6c:	40014800 	.word	0x40014800
 8001d70:	fffffcff 	.word	0xfffffcff

08001d74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6a1b      	ldr	r3, [r3, #32]
 8001d82:	2201      	movs	r2, #1
 8001d84:	4393      	bics	r3, r2
 8001d86:	001a      	movs	r2, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6a1b      	ldr	r3, [r3, #32]
 8001d90:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	699b      	ldr	r3, [r3, #24]
 8001d9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2270      	movs	r2, #112	; 0x70
 8001da2:	4393      	bics	r3, r2
 8001da4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	2203      	movs	r2, #3
 8001daa:	4393      	bics	r3, r2
 8001dac:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	68fa      	ldr	r2, [r7, #12]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	2202      	movs	r2, #2
 8001dbc:	4393      	bics	r3, r2
 8001dbe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	697a      	ldr	r2, [r7, #20]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a27      	ldr	r2, [pc, #156]	; (8001e6c <TIM_OC1_SetConfig+0xf8>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d00b      	beq.n	8001dea <TIM_OC1_SetConfig+0x76>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a26      	ldr	r2, [pc, #152]	; (8001e70 <TIM_OC1_SetConfig+0xfc>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d007      	beq.n	8001dea <TIM_OC1_SetConfig+0x76>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a25      	ldr	r2, [pc, #148]	; (8001e74 <TIM_OC1_SetConfig+0x100>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d003      	beq.n	8001dea <TIM_OC1_SetConfig+0x76>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a24      	ldr	r2, [pc, #144]	; (8001e78 <TIM_OC1_SetConfig+0x104>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d10c      	bne.n	8001e04 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	2208      	movs	r2, #8
 8001dee:	4393      	bics	r3, r2
 8001df0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	697a      	ldr	r2, [r7, #20]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	2204      	movs	r2, #4
 8001e00:	4393      	bics	r3, r2
 8001e02:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	4a19      	ldr	r2, [pc, #100]	; (8001e6c <TIM_OC1_SetConfig+0xf8>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d00b      	beq.n	8001e24 <TIM_OC1_SetConfig+0xb0>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	4a18      	ldr	r2, [pc, #96]	; (8001e70 <TIM_OC1_SetConfig+0xfc>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d007      	beq.n	8001e24 <TIM_OC1_SetConfig+0xb0>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	4a17      	ldr	r2, [pc, #92]	; (8001e74 <TIM_OC1_SetConfig+0x100>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d003      	beq.n	8001e24 <TIM_OC1_SetConfig+0xb0>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	4a16      	ldr	r2, [pc, #88]	; (8001e78 <TIM_OC1_SetConfig+0x104>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d111      	bne.n	8001e48 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	4a15      	ldr	r2, [pc, #84]	; (8001e7c <TIM_OC1_SetConfig+0x108>)
 8001e28:	4013      	ands	r3, r2
 8001e2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	4a14      	ldr	r2, [pc, #80]	; (8001e80 <TIM_OC1_SetConfig+0x10c>)
 8001e30:	4013      	ands	r3, r2
 8001e32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	695b      	ldr	r3, [r3, #20]
 8001e38:	693a      	ldr	r2, [r7, #16]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	699b      	ldr	r3, [r3, #24]
 8001e42:	693a      	ldr	r2, [r7, #16]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	693a      	ldr	r2, [r7, #16]
 8001e4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	68fa      	ldr	r2, [r7, #12]
 8001e52:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685a      	ldr	r2, [r3, #4]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	697a      	ldr	r2, [r7, #20]
 8001e60:	621a      	str	r2, [r3, #32]
}
 8001e62:	46c0      	nop			; (mov r8, r8)
 8001e64:	46bd      	mov	sp, r7
 8001e66:	b006      	add	sp, #24
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	46c0      	nop			; (mov r8, r8)
 8001e6c:	40012c00 	.word	0x40012c00
 8001e70:	40014000 	.word	0x40014000
 8001e74:	40014400 	.word	0x40014400
 8001e78:	40014800 	.word	0x40014800
 8001e7c:	fffffeff 	.word	0xfffffeff
 8001e80:	fffffdff 	.word	0xfffffdff

08001e84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b086      	sub	sp, #24
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6a1b      	ldr	r3, [r3, #32]
 8001e92:	2210      	movs	r2, #16
 8001e94:	4393      	bics	r3, r2
 8001e96:	001a      	movs	r2, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6a1b      	ldr	r3, [r3, #32]
 8001ea0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	699b      	ldr	r3, [r3, #24]
 8001eac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	4a2e      	ldr	r2, [pc, #184]	; (8001f6c <TIM_OC2_SetConfig+0xe8>)
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	4a2d      	ldr	r2, [pc, #180]	; (8001f70 <TIM_OC2_SetConfig+0xec>)
 8001eba:	4013      	ands	r3, r2
 8001ebc:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	021b      	lsls	r3, r3, #8
 8001ec4:	68fa      	ldr	r2, [r7, #12]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	2220      	movs	r2, #32
 8001ece:	4393      	bics	r3, r2
 8001ed0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	011b      	lsls	r3, r3, #4
 8001ed8:	697a      	ldr	r2, [r7, #20]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a24      	ldr	r2, [pc, #144]	; (8001f74 <TIM_OC2_SetConfig+0xf0>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d10d      	bne.n	8001f02 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	2280      	movs	r2, #128	; 0x80
 8001eea:	4393      	bics	r3, r2
 8001eec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	68db      	ldr	r3, [r3, #12]
 8001ef2:	011b      	lsls	r3, r3, #4
 8001ef4:	697a      	ldr	r2, [r7, #20]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	2240      	movs	r2, #64	; 0x40
 8001efe:	4393      	bics	r3, r2
 8001f00:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a1b      	ldr	r2, [pc, #108]	; (8001f74 <TIM_OC2_SetConfig+0xf0>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d00b      	beq.n	8001f22 <TIM_OC2_SetConfig+0x9e>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a1a      	ldr	r2, [pc, #104]	; (8001f78 <TIM_OC2_SetConfig+0xf4>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d007      	beq.n	8001f22 <TIM_OC2_SetConfig+0x9e>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a19      	ldr	r2, [pc, #100]	; (8001f7c <TIM_OC2_SetConfig+0xf8>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d003      	beq.n	8001f22 <TIM_OC2_SetConfig+0x9e>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a18      	ldr	r2, [pc, #96]	; (8001f80 <TIM_OC2_SetConfig+0xfc>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d113      	bne.n	8001f4a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	4a17      	ldr	r2, [pc, #92]	; (8001f84 <TIM_OC2_SetConfig+0x100>)
 8001f26:	4013      	ands	r3, r2
 8001f28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	4a16      	ldr	r2, [pc, #88]	; (8001f88 <TIM_OC2_SetConfig+0x104>)
 8001f2e:	4013      	ands	r3, r2
 8001f30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	695b      	ldr	r3, [r3, #20]
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	693a      	ldr	r2, [r7, #16]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	699b      	ldr	r3, [r3, #24]
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	693a      	ldr	r2, [r7, #16]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	693a      	ldr	r2, [r7, #16]
 8001f4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	68fa      	ldr	r2, [r7, #12]
 8001f54:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	685a      	ldr	r2, [r3, #4]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	697a      	ldr	r2, [r7, #20]
 8001f62:	621a      	str	r2, [r3, #32]
}
 8001f64:	46c0      	nop			; (mov r8, r8)
 8001f66:	46bd      	mov	sp, r7
 8001f68:	b006      	add	sp, #24
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	ffff8fff 	.word	0xffff8fff
 8001f70:	fffffcff 	.word	0xfffffcff
 8001f74:	40012c00 	.word	0x40012c00
 8001f78:	40014000 	.word	0x40014000
 8001f7c:	40014400 	.word	0x40014400
 8001f80:	40014800 	.word	0x40014800
 8001f84:	fffffbff 	.word	0xfffffbff
 8001f88:	fffff7ff 	.word	0xfffff7ff

08001f8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b086      	sub	sp, #24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6a1b      	ldr	r3, [r3, #32]
 8001f9a:	4a35      	ldr	r2, [pc, #212]	; (8002070 <TIM_OC3_SetConfig+0xe4>)
 8001f9c:	401a      	ands	r2, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a1b      	ldr	r3, [r3, #32]
 8001fa6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	69db      	ldr	r3, [r3, #28]
 8001fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2270      	movs	r2, #112	; 0x70
 8001fb8:	4393      	bics	r3, r2
 8001fba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2203      	movs	r2, #3
 8001fc0:	4393      	bics	r3, r2
 8001fc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	68fa      	ldr	r2, [r7, #12]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	4a28      	ldr	r2, [pc, #160]	; (8002074 <TIM_OC3_SetConfig+0xe8>)
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	021b      	lsls	r3, r3, #8
 8001fdc:	697a      	ldr	r2, [r7, #20]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a24      	ldr	r2, [pc, #144]	; (8002078 <TIM_OC3_SetConfig+0xec>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d10d      	bne.n	8002006 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	4a23      	ldr	r2, [pc, #140]	; (800207c <TIM_OC3_SetConfig+0xf0>)
 8001fee:	4013      	ands	r3, r2
 8001ff0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	021b      	lsls	r3, r3, #8
 8001ff8:	697a      	ldr	r2, [r7, #20]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	4a1f      	ldr	r2, [pc, #124]	; (8002080 <TIM_OC3_SetConfig+0xf4>)
 8002002:	4013      	ands	r3, r2
 8002004:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a1b      	ldr	r2, [pc, #108]	; (8002078 <TIM_OC3_SetConfig+0xec>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d00b      	beq.n	8002026 <TIM_OC3_SetConfig+0x9a>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a1c      	ldr	r2, [pc, #112]	; (8002084 <TIM_OC3_SetConfig+0xf8>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d007      	beq.n	8002026 <TIM_OC3_SetConfig+0x9a>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a1b      	ldr	r2, [pc, #108]	; (8002088 <TIM_OC3_SetConfig+0xfc>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d003      	beq.n	8002026 <TIM_OC3_SetConfig+0x9a>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a1a      	ldr	r2, [pc, #104]	; (800208c <TIM_OC3_SetConfig+0x100>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d113      	bne.n	800204e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	4a19      	ldr	r2, [pc, #100]	; (8002090 <TIM_OC3_SetConfig+0x104>)
 800202a:	4013      	ands	r3, r2
 800202c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	4a18      	ldr	r2, [pc, #96]	; (8002094 <TIM_OC3_SetConfig+0x108>)
 8002032:	4013      	ands	r3, r2
 8002034:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	695b      	ldr	r3, [r3, #20]
 800203a:	011b      	lsls	r3, r3, #4
 800203c:	693a      	ldr	r2, [r7, #16]
 800203e:	4313      	orrs	r3, r2
 8002040:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	699b      	ldr	r3, [r3, #24]
 8002046:	011b      	lsls	r3, r3, #4
 8002048:	693a      	ldr	r2, [r7, #16]
 800204a:	4313      	orrs	r3, r2
 800204c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	693a      	ldr	r2, [r7, #16]
 8002052:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	68fa      	ldr	r2, [r7, #12]
 8002058:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	685a      	ldr	r2, [r3, #4]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	697a      	ldr	r2, [r7, #20]
 8002066:	621a      	str	r2, [r3, #32]
}
 8002068:	46c0      	nop			; (mov r8, r8)
 800206a:	46bd      	mov	sp, r7
 800206c:	b006      	add	sp, #24
 800206e:	bd80      	pop	{r7, pc}
 8002070:	fffffeff 	.word	0xfffffeff
 8002074:	fffffdff 	.word	0xfffffdff
 8002078:	40012c00 	.word	0x40012c00
 800207c:	fffff7ff 	.word	0xfffff7ff
 8002080:	fffffbff 	.word	0xfffffbff
 8002084:	40014000 	.word	0x40014000
 8002088:	40014400 	.word	0x40014400
 800208c:	40014800 	.word	0x40014800
 8002090:	ffffefff 	.word	0xffffefff
 8002094:	ffffdfff 	.word	0xffffdfff

08002098 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b086      	sub	sp, #24
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6a1b      	ldr	r3, [r3, #32]
 80020a6:	4a28      	ldr	r2, [pc, #160]	; (8002148 <TIM_OC4_SetConfig+0xb0>)
 80020a8:	401a      	ands	r2, r3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6a1b      	ldr	r3, [r3, #32]
 80020b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	69db      	ldr	r3, [r3, #28]
 80020be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	4a22      	ldr	r2, [pc, #136]	; (800214c <TIM_OC4_SetConfig+0xb4>)
 80020c4:	4013      	ands	r3, r2
 80020c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	4a21      	ldr	r2, [pc, #132]	; (8002150 <TIM_OC4_SetConfig+0xb8>)
 80020cc:	4013      	ands	r3, r2
 80020ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	021b      	lsls	r3, r3, #8
 80020d6:	68fa      	ldr	r2, [r7, #12]
 80020d8:	4313      	orrs	r3, r2
 80020da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	4a1d      	ldr	r2, [pc, #116]	; (8002154 <TIM_OC4_SetConfig+0xbc>)
 80020e0:	4013      	ands	r3, r2
 80020e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	031b      	lsls	r3, r3, #12
 80020ea:	693a      	ldr	r2, [r7, #16]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	4a19      	ldr	r2, [pc, #100]	; (8002158 <TIM_OC4_SetConfig+0xc0>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d00b      	beq.n	8002110 <TIM_OC4_SetConfig+0x78>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	4a18      	ldr	r2, [pc, #96]	; (800215c <TIM_OC4_SetConfig+0xc4>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d007      	beq.n	8002110 <TIM_OC4_SetConfig+0x78>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	4a17      	ldr	r2, [pc, #92]	; (8002160 <TIM_OC4_SetConfig+0xc8>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d003      	beq.n	8002110 <TIM_OC4_SetConfig+0x78>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	4a16      	ldr	r2, [pc, #88]	; (8002164 <TIM_OC4_SetConfig+0xcc>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d109      	bne.n	8002124 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	4a15      	ldr	r2, [pc, #84]	; (8002168 <TIM_OC4_SetConfig+0xd0>)
 8002114:	4013      	ands	r3, r2
 8002116:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	695b      	ldr	r3, [r3, #20]
 800211c:	019b      	lsls	r3, r3, #6
 800211e:	697a      	ldr	r2, [r7, #20]
 8002120:	4313      	orrs	r3, r2
 8002122:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	697a      	ldr	r2, [r7, #20]
 8002128:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	68fa      	ldr	r2, [r7, #12]
 800212e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685a      	ldr	r2, [r3, #4]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	693a      	ldr	r2, [r7, #16]
 800213c:	621a      	str	r2, [r3, #32]
}
 800213e:	46c0      	nop			; (mov r8, r8)
 8002140:	46bd      	mov	sp, r7
 8002142:	b006      	add	sp, #24
 8002144:	bd80      	pop	{r7, pc}
 8002146:	46c0      	nop			; (mov r8, r8)
 8002148:	ffffefff 	.word	0xffffefff
 800214c:	ffff8fff 	.word	0xffff8fff
 8002150:	fffffcff 	.word	0xfffffcff
 8002154:	ffffdfff 	.word	0xffffdfff
 8002158:	40012c00 	.word	0x40012c00
 800215c:	40014000 	.word	0x40014000
 8002160:	40014400 	.word	0x40014400
 8002164:	40014800 	.word	0x40014800
 8002168:	ffffbfff 	.word	0xffffbfff

0800216c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	223c      	movs	r2, #60	; 0x3c
 800217a:	5c9b      	ldrb	r3, [r3, r2]
 800217c:	2b01      	cmp	r3, #1
 800217e:	d101      	bne.n	8002184 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002180:	2302      	movs	r3, #2
 8002182:	e041      	b.n	8002208 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	223c      	movs	r2, #60	; 0x3c
 8002188:	2101      	movs	r1, #1
 800218a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	223d      	movs	r2, #61	; 0x3d
 8002190:	2102      	movs	r1, #2
 8002192:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2270      	movs	r2, #112	; 0x70
 80021a8:	4393      	bics	r3, r2
 80021aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	68fa      	ldr	r2, [r7, #12]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	68fa      	ldr	r2, [r7, #12]
 80021bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a13      	ldr	r2, [pc, #76]	; (8002210 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d009      	beq.n	80021dc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a11      	ldr	r2, [pc, #68]	; (8002214 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d004      	beq.n	80021dc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a10      	ldr	r2, [pc, #64]	; (8002218 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d10c      	bne.n	80021f6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	2280      	movs	r2, #128	; 0x80
 80021e0:	4393      	bics	r3, r2
 80021e2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	68ba      	ldr	r2, [r7, #8]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	68ba      	ldr	r2, [r7, #8]
 80021f4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	223d      	movs	r2, #61	; 0x3d
 80021fa:	2101      	movs	r1, #1
 80021fc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	223c      	movs	r2, #60	; 0x3c
 8002202:	2100      	movs	r1, #0
 8002204:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002206:	2300      	movs	r3, #0
}
 8002208:	0018      	movs	r0, r3
 800220a:	46bd      	mov	sp, r7
 800220c:	b004      	add	sp, #16
 800220e:	bd80      	pop	{r7, pc}
 8002210:	40012c00 	.word	0x40012c00
 8002214:	40000400 	.word	0x40000400
 8002218:	40014000 	.word	0x40014000

0800221c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002226:	2300      	movs	r3, #0
 8002228:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	223c      	movs	r2, #60	; 0x3c
 800222e:	5c9b      	ldrb	r3, [r3, r2]
 8002230:	2b01      	cmp	r3, #1
 8002232:	d101      	bne.n	8002238 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002234:	2302      	movs	r3, #2
 8002236:	e03e      	b.n	80022b6 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	223c      	movs	r2, #60	; 0x3c
 800223c:	2101      	movs	r1, #1
 800223e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	22ff      	movs	r2, #255	; 0xff
 8002244:	4393      	bics	r3, r2
 8002246:	001a      	movs	r2, r3
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	4313      	orrs	r3, r2
 800224e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	4a1b      	ldr	r2, [pc, #108]	; (80022c0 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8002254:	401a      	ands	r2, r3
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	4313      	orrs	r3, r2
 800225c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	4a18      	ldr	r2, [pc, #96]	; (80022c4 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8002262:	401a      	ands	r2, r3
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	4313      	orrs	r3, r2
 800226a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	4a16      	ldr	r2, [pc, #88]	; (80022c8 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8002270:	401a      	ands	r2, r3
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4313      	orrs	r3, r2
 8002278:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	4a13      	ldr	r2, [pc, #76]	; (80022cc <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 800227e:	401a      	ands	r2, r3
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	691b      	ldr	r3, [r3, #16]
 8002284:	4313      	orrs	r3, r2
 8002286:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	4a11      	ldr	r2, [pc, #68]	; (80022d0 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 800228c:	401a      	ands	r2, r3
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	695b      	ldr	r3, [r3, #20]
 8002292:	4313      	orrs	r3, r2
 8002294:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	4a0e      	ldr	r2, [pc, #56]	; (80022d4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 800229a:	401a      	ands	r2, r3
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	69db      	ldr	r3, [r3, #28]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	68fa      	ldr	r2, [r7, #12]
 80022aa:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	223c      	movs	r2, #60	; 0x3c
 80022b0:	2100      	movs	r1, #0
 80022b2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	0018      	movs	r0, r3
 80022b8:	46bd      	mov	sp, r7
 80022ba:	b004      	add	sp, #16
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	46c0      	nop			; (mov r8, r8)
 80022c0:	fffffcff 	.word	0xfffffcff
 80022c4:	fffffbff 	.word	0xfffffbff
 80022c8:	fffff7ff 	.word	0xfffff7ff
 80022cc:	ffffefff 	.word	0xffffefff
 80022d0:	ffffdfff 	.word	0xffffdfff
 80022d4:	ffffbfff 	.word	0xffffbfff

080022d8 <__libc_init_array>:
 80022d8:	b570      	push	{r4, r5, r6, lr}
 80022da:	2600      	movs	r6, #0
 80022dc:	4d0c      	ldr	r5, [pc, #48]	; (8002310 <__libc_init_array+0x38>)
 80022de:	4c0d      	ldr	r4, [pc, #52]	; (8002314 <__libc_init_array+0x3c>)
 80022e0:	1b64      	subs	r4, r4, r5
 80022e2:	10a4      	asrs	r4, r4, #2
 80022e4:	42a6      	cmp	r6, r4
 80022e6:	d109      	bne.n	80022fc <__libc_init_array+0x24>
 80022e8:	2600      	movs	r6, #0
 80022ea:	f000 f821 	bl	8002330 <_init>
 80022ee:	4d0a      	ldr	r5, [pc, #40]	; (8002318 <__libc_init_array+0x40>)
 80022f0:	4c0a      	ldr	r4, [pc, #40]	; (800231c <__libc_init_array+0x44>)
 80022f2:	1b64      	subs	r4, r4, r5
 80022f4:	10a4      	asrs	r4, r4, #2
 80022f6:	42a6      	cmp	r6, r4
 80022f8:	d105      	bne.n	8002306 <__libc_init_array+0x2e>
 80022fa:	bd70      	pop	{r4, r5, r6, pc}
 80022fc:	00b3      	lsls	r3, r6, #2
 80022fe:	58eb      	ldr	r3, [r5, r3]
 8002300:	4798      	blx	r3
 8002302:	3601      	adds	r6, #1
 8002304:	e7ee      	b.n	80022e4 <__libc_init_array+0xc>
 8002306:	00b3      	lsls	r3, r6, #2
 8002308:	58eb      	ldr	r3, [r5, r3]
 800230a:	4798      	blx	r3
 800230c:	3601      	adds	r6, #1
 800230e:	e7f2      	b.n	80022f6 <__libc_init_array+0x1e>
 8002310:	08002378 	.word	0x08002378
 8002314:	08002378 	.word	0x08002378
 8002318:	08002378 	.word	0x08002378
 800231c:	0800237c 	.word	0x0800237c

08002320 <memset>:
 8002320:	0003      	movs	r3, r0
 8002322:	1882      	adds	r2, r0, r2
 8002324:	4293      	cmp	r3, r2
 8002326:	d100      	bne.n	800232a <memset+0xa>
 8002328:	4770      	bx	lr
 800232a:	7019      	strb	r1, [r3, #0]
 800232c:	3301      	adds	r3, #1
 800232e:	e7f9      	b.n	8002324 <memset+0x4>

08002330 <_init>:
 8002330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002332:	46c0      	nop			; (mov r8, r8)
 8002334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002336:	bc08      	pop	{r3}
 8002338:	469e      	mov	lr, r3
 800233a:	4770      	bx	lr

0800233c <_fini>:
 800233c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800233e:	46c0      	nop			; (mov r8, r8)
 8002340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002342:	bc08      	pop	{r3}
 8002344:	469e      	mov	lr, r3
 8002346:	4770      	bx	lr
