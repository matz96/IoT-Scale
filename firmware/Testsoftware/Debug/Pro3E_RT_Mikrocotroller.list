
Pro3E_RT_Mikrocotroller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000378c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  0800384c  0800384c  0001384c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800387c  0800387c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800387c  0800387c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800387c  0800387c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800387c  0800387c  0001387c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003880  08003880  00013880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003884  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000968  2000000c  08003890  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000974  08003890  00020974  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ed88  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020ab  00000000  00000000  0002edbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd8  00000000  00000000  00030e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ce0  00000000  00000000  00031c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001166e  00000000  00000000  00032920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010237  00000000  00000000  00043f8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006a116  00000000  00000000  000541c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000be2db  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003254  00000000  00000000  000be330  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003834 	.word	0x08003834

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003834 	.word	0x08003834

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b08c      	sub	sp, #48	; 0x30
 8000224:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f000 fc4b 	bl	8000ac0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022a:	f000 f849 	bl	80002c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022e:	f000 fa3d 	bl	80006ac <MX_GPIO_Init>
  MX_ADC_Init();
 8000232:	f000 f8ad 	bl	8000390 <MX_ADC_Init>
  MX_TIM1_Init();
 8000236:	f000 f987 	bl	8000548 <MX_TIM1_Init>
  MX_I2C1_Init();
 800023a:	f000 f905 	bl	8000448 <MX_I2C1_Init>
  MX_I2C2_Init();
 800023e:	f000 f943 	bl	80004c8 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  //init_vcnl4040();
  uint16_t pwm_value = 0;
 8000242:	232a      	movs	r3, #42	; 0x2a
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	2200      	movs	r2, #0
 8000248:	801a      	strh	r2, [r3, #0]
  uint16_t step = 0;
 800024a:	2328      	movs	r3, #40	; 0x28
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	2200      	movs	r2, #0
 8000250:	801a      	strh	r2, [r3, #0]
  uint16_t prox = 0;
 8000252:	2326      	movs	r3, #38	; 0x26
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	2200      	movs	r2, #0
 8000258:	801a      	strh	r2, [r3, #0]
  int32_t CH1_DC = 0;
 800025a:	2300      	movs	r3, #0
 800025c:	62fb      	str	r3, [r7, #44]	; 0x2c
  char text[20];
  HAL_StatusTypeDef ret;
  uint8_t buf[12];

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800025e:	4b16      	ldr	r3, [pc, #88]	; (80002b8 <main+0x98>)
 8000260:	210c      	movs	r1, #12
 8000262:	0018      	movs	r0, r3
 8000264:	f002 fb50 	bl	8002908 <HAL_TIM_PWM_Start>

  ssd1306_Init();
 8000268:	f003 f9ba 	bl	80035e0 <ssd1306_Init>
  ssd1306_SetDisplayOn(1);
 800026c:	2001      	movs	r0, #1
 800026e:	f003 fa8f 	bl	8003790 <ssd1306_SetDisplayOn>
  ssd1306_Fill(White);
 8000272:	2001      	movs	r0, #1
 8000274:	f003 fa22 	bl	80036bc <ssd1306_Fill>
  CH1_DC = 10;
 8000278:	230a      	movs	r3, #10
 800027a:	62fb      	str	r3, [r7, #44]	; 0x2c
	  //pwm_value += step;
	  //user_pwm_setvalue(pwm_value);


	  //Prescale of PWM: 1000 -> ~8kHz
	  while (CH1_DC < 2000)
 800027c:	e008      	b.n	8000290 <main+0x70>
		{
			TIM1->CCR4 = CH1_DC;
 800027e:	4b0f      	ldr	r3, [pc, #60]	; (80002bc <main+0x9c>)
 8000280:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000282:	641a      	str	r2, [r3, #64]	; 0x40
			CH1_DC += 10;
 8000284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000286:	330a      	adds	r3, #10
 8000288:	62fb      	str	r3, [r7, #44]	; 0x2c
			HAL_Delay(100);
 800028a:	2064      	movs	r0, #100	; 0x64
 800028c:	f000 fc7c 	bl	8000b88 <HAL_Delay>
	  while (CH1_DC < 2000)
 8000290:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000292:	23fa      	movs	r3, #250	; 0xfa
 8000294:	00db      	lsls	r3, r3, #3
 8000296:	429a      	cmp	r2, r3
 8000298:	dbf1      	blt.n	800027e <main+0x5e>
		}
		while(CH1_DC > 0)
 800029a:	e008      	b.n	80002ae <main+0x8e>
		{
			TIM1->CCR4 = CH1_DC;
 800029c:	4b07      	ldr	r3, [pc, #28]	; (80002bc <main+0x9c>)
 800029e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80002a0:	641a      	str	r2, [r3, #64]	; 0x40
			CH1_DC -= 10;
 80002a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80002a4:	3b0a      	subs	r3, #10
 80002a6:	62fb      	str	r3, [r7, #44]	; 0x2c
			HAL_Delay(100);
 80002a8:	2064      	movs	r0, #100	; 0x64
 80002aa:	f000 fc6d 	bl	8000b88 <HAL_Delay>
		while(CH1_DC > 0)
 80002ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	dcf3      	bgt.n	800029c <main+0x7c>
	  while (CH1_DC < 2000)
 80002b4:	e7ec      	b.n	8000290 <main+0x70>
 80002b6:	46c0      	nop			; (mov r8, r8)
 80002b8:	200008e8 	.word	0x200008e8
 80002bc:	40012c00 	.word	0x40012c00

080002c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002c0:	b590      	push	{r4, r7, lr}
 80002c2:	b097      	sub	sp, #92	; 0x5c
 80002c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002c6:	2428      	movs	r4, #40	; 0x28
 80002c8:	193b      	adds	r3, r7, r4
 80002ca:	0018      	movs	r0, r3
 80002cc:	2330      	movs	r3, #48	; 0x30
 80002ce:	001a      	movs	r2, r3
 80002d0:	2100      	movs	r1, #0
 80002d2:	f003 faa7 	bl	8003824 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d6:	2318      	movs	r3, #24
 80002d8:	18fb      	adds	r3, r7, r3
 80002da:	0018      	movs	r0, r3
 80002dc:	2310      	movs	r3, #16
 80002de:	001a      	movs	r2, r3
 80002e0:	2100      	movs	r1, #0
 80002e2:	f003 fa9f 	bl	8003824 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002e6:	1d3b      	adds	r3, r7, #4
 80002e8:	0018      	movs	r0, r3
 80002ea:	2314      	movs	r3, #20
 80002ec:	001a      	movs	r2, r3
 80002ee:	2100      	movs	r1, #0
 80002f0:	f003 fa98 	bl	8003824 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 80002f4:	0021      	movs	r1, r4
 80002f6:	187b      	adds	r3, r7, r1
 80002f8:	2212      	movs	r2, #18
 80002fa:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002fc:	187b      	adds	r3, r7, r1
 80002fe:	2201      	movs	r2, #1
 8000300:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000302:	187b      	adds	r3, r7, r1
 8000304:	2201      	movs	r2, #1
 8000306:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000308:	187b      	adds	r3, r7, r1
 800030a:	2210      	movs	r2, #16
 800030c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 800030e:	187b      	adds	r3, r7, r1
 8000310:	2210      	movs	r2, #16
 8000312:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000314:	187b      	adds	r3, r7, r1
 8000316:	2202      	movs	r2, #2
 8000318:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800031a:	187b      	adds	r3, r7, r1
 800031c:	2280      	movs	r2, #128	; 0x80
 800031e:	0212      	lsls	r2, r2, #8
 8000320:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000322:	187b      	adds	r3, r7, r1
 8000324:	2280      	movs	r2, #128	; 0x80
 8000326:	0352      	lsls	r2, r2, #13
 8000328:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800032a:	187b      	adds	r3, r7, r1
 800032c:	2200      	movs	r2, #0
 800032e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000330:	187b      	adds	r3, r7, r1
 8000332:	0018      	movs	r0, r3
 8000334:	f001 fd10 	bl	8001d58 <HAL_RCC_OscConfig>
 8000338:	1e03      	subs	r3, r0, #0
 800033a:	d001      	beq.n	8000340 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800033c:	f000 fa20 	bl	8000780 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000340:	2118      	movs	r1, #24
 8000342:	187b      	adds	r3, r7, r1
 8000344:	2207      	movs	r2, #7
 8000346:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000348:	187b      	adds	r3, r7, r1
 800034a:	2202      	movs	r2, #2
 800034c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800034e:	187b      	adds	r3, r7, r1
 8000350:	2200      	movs	r2, #0
 8000352:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000354:	187b      	adds	r3, r7, r1
 8000356:	2200      	movs	r2, #0
 8000358:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800035a:	187b      	adds	r3, r7, r1
 800035c:	2101      	movs	r1, #1
 800035e:	0018      	movs	r0, r3
 8000360:	f002 f818 	bl	8002394 <HAL_RCC_ClockConfig>
 8000364:	1e03      	subs	r3, r0, #0
 8000366:	d001      	beq.n	800036c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000368:	f000 fa0a 	bl	8000780 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800036c:	1d3b      	adds	r3, r7, #4
 800036e:	2220      	movs	r2, #32
 8000370:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000372:	1d3b      	adds	r3, r7, #4
 8000374:	2200      	movs	r2, #0
 8000376:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000378:	1d3b      	adds	r3, r7, #4
 800037a:	0018      	movs	r0, r3
 800037c:	f002 f93e 	bl	80025fc <HAL_RCCEx_PeriphCLKConfig>
 8000380:	1e03      	subs	r3, r0, #0
 8000382:	d001      	beq.n	8000388 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000384:	f000 f9fc 	bl	8000780 <Error_Handler>
  }
}
 8000388:	46c0      	nop			; (mov r8, r8)
 800038a:	46bd      	mov	sp, r7
 800038c:	b017      	add	sp, #92	; 0x5c
 800038e:	bd90      	pop	{r4, r7, pc}

08000390 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b084      	sub	sp, #16
 8000394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000396:	1d3b      	adds	r3, r7, #4
 8000398:	0018      	movs	r0, r3
 800039a:	230c      	movs	r3, #12
 800039c:	001a      	movs	r2, r3
 800039e:	2100      	movs	r1, #0
 80003a0:	f003 fa40 	bl	8003824 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80003a4:	4b26      	ldr	r3, [pc, #152]	; (8000440 <MX_ADC_Init+0xb0>)
 80003a6:	4a27      	ldr	r2, [pc, #156]	; (8000444 <MX_ADC_Init+0xb4>)
 80003a8:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80003aa:	4b25      	ldr	r3, [pc, #148]	; (8000440 <MX_ADC_Init+0xb0>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80003b0:	4b23      	ldr	r3, [pc, #140]	; (8000440 <MX_ADC_Init+0xb0>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003b6:	4b22      	ldr	r3, [pc, #136]	; (8000440 <MX_ADC_Init+0xb0>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80003bc:	4b20      	ldr	r3, [pc, #128]	; (8000440 <MX_ADC_Init+0xb0>)
 80003be:	2201      	movs	r2, #1
 80003c0:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003c2:	4b1f      	ldr	r3, [pc, #124]	; (8000440 <MX_ADC_Init+0xb0>)
 80003c4:	2204      	movs	r2, #4
 80003c6:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80003c8:	4b1d      	ldr	r3, [pc, #116]	; (8000440 <MX_ADC_Init+0xb0>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80003ce:	4b1c      	ldr	r3, [pc, #112]	; (8000440 <MX_ADC_Init+0xb0>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80003d4:	4b1a      	ldr	r3, [pc, #104]	; (8000440 <MX_ADC_Init+0xb0>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80003da:	4b19      	ldr	r3, [pc, #100]	; (8000440 <MX_ADC_Init+0xb0>)
 80003dc:	2200      	movs	r2, #0
 80003de:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003e0:	4b17      	ldr	r3, [pc, #92]	; (8000440 <MX_ADC_Init+0xb0>)
 80003e2:	22c2      	movs	r2, #194	; 0xc2
 80003e4:	32ff      	adds	r2, #255	; 0xff
 80003e6:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003e8:	4b15      	ldr	r3, [pc, #84]	; (8000440 <MX_ADC_Init+0xb0>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80003ee:	4b14      	ldr	r3, [pc, #80]	; (8000440 <MX_ADC_Init+0xb0>)
 80003f0:	2224      	movs	r2, #36	; 0x24
 80003f2:	2100      	movs	r1, #0
 80003f4:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80003f6:	4b12      	ldr	r3, [pc, #72]	; (8000440 <MX_ADC_Init+0xb0>)
 80003f8:	2201      	movs	r2, #1
 80003fa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80003fc:	4b10      	ldr	r3, [pc, #64]	; (8000440 <MX_ADC_Init+0xb0>)
 80003fe:	0018      	movs	r0, r3
 8000400:	f000 fbe6 	bl	8000bd0 <HAL_ADC_Init>
 8000404:	1e03      	subs	r3, r0, #0
 8000406:	d001      	beq.n	800040c <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000408:	f000 f9ba 	bl	8000780 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800040c:	1d3b      	adds	r3, r7, #4
 800040e:	2200      	movs	r2, #0
 8000410:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000412:	1d3b      	adds	r3, r7, #4
 8000414:	2280      	movs	r2, #128	; 0x80
 8000416:	0152      	lsls	r2, r2, #5
 8000418:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800041a:	1d3b      	adds	r3, r7, #4
 800041c:	2280      	movs	r2, #128	; 0x80
 800041e:	0552      	lsls	r2, r2, #21
 8000420:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000422:	1d3a      	adds	r2, r7, #4
 8000424:	4b06      	ldr	r3, [pc, #24]	; (8000440 <MX_ADC_Init+0xb0>)
 8000426:	0011      	movs	r1, r2
 8000428:	0018      	movs	r0, r3
 800042a:	f000 fd11 	bl	8000e50 <HAL_ADC_ConfigChannel>
 800042e:	1e03      	subs	r3, r0, #0
 8000430:	d001      	beq.n	8000436 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8000432:	f000 f9a5 	bl	8000780 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	46bd      	mov	sp, r7
 800043a:	b004      	add	sp, #16
 800043c:	bd80      	pop	{r7, pc}
 800043e:	46c0      	nop			; (mov r8, r8)
 8000440:	20000930 	.word	0x20000930
 8000444:	40012400 	.word	0x40012400

08000448 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800044c:	4b1b      	ldr	r3, [pc, #108]	; (80004bc <MX_I2C1_Init+0x74>)
 800044e:	4a1c      	ldr	r2, [pc, #112]	; (80004c0 <MX_I2C1_Init+0x78>)
 8000450:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000452:	4b1a      	ldr	r3, [pc, #104]	; (80004bc <MX_I2C1_Init+0x74>)
 8000454:	4a1b      	ldr	r2, [pc, #108]	; (80004c4 <MX_I2C1_Init+0x7c>)
 8000456:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 192;
 8000458:	4b18      	ldr	r3, [pc, #96]	; (80004bc <MX_I2C1_Init+0x74>)
 800045a:	22c0      	movs	r2, #192	; 0xc0
 800045c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800045e:	4b17      	ldr	r3, [pc, #92]	; (80004bc <MX_I2C1_Init+0x74>)
 8000460:	2201      	movs	r2, #1
 8000462:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000464:	4b15      	ldr	r3, [pc, #84]	; (80004bc <MX_I2C1_Init+0x74>)
 8000466:	2200      	movs	r2, #0
 8000468:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800046a:	4b14      	ldr	r3, [pc, #80]	; (80004bc <MX_I2C1_Init+0x74>)
 800046c:	2200      	movs	r2, #0
 800046e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000470:	4b12      	ldr	r3, [pc, #72]	; (80004bc <MX_I2C1_Init+0x74>)
 8000472:	2200      	movs	r2, #0
 8000474:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000476:	4b11      	ldr	r3, [pc, #68]	; (80004bc <MX_I2C1_Init+0x74>)
 8000478:	2200      	movs	r2, #0
 800047a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800047c:	4b0f      	ldr	r3, [pc, #60]	; (80004bc <MX_I2C1_Init+0x74>)
 800047e:	2200      	movs	r2, #0
 8000480:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000482:	4b0e      	ldr	r3, [pc, #56]	; (80004bc <MX_I2C1_Init+0x74>)
 8000484:	0018      	movs	r0, r3
 8000486:	f001 f81b 	bl	80014c0 <HAL_I2C_Init>
 800048a:	1e03      	subs	r3, r0, #0
 800048c:	d001      	beq.n	8000492 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800048e:	f000 f977 	bl	8000780 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000492:	4b0a      	ldr	r3, [pc, #40]	; (80004bc <MX_I2C1_Init+0x74>)
 8000494:	2100      	movs	r1, #0
 8000496:	0018      	movs	r0, r3
 8000498:	f001 fbc6 	bl	8001c28 <HAL_I2CEx_ConfigAnalogFilter>
 800049c:	1e03      	subs	r3, r0, #0
 800049e:	d001      	beq.n	80004a4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80004a0:	f000 f96e 	bl	8000780 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80004a4:	4b05      	ldr	r3, [pc, #20]	; (80004bc <MX_I2C1_Init+0x74>)
 80004a6:	2100      	movs	r1, #0
 80004a8:	0018      	movs	r0, r3
 80004aa:	f001 fc09 	bl	8001cc0 <HAL_I2CEx_ConfigDigitalFilter>
 80004ae:	1e03      	subs	r3, r0, #0
 80004b0:	d001      	beq.n	80004b6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80004b2:	f000 f965 	bl	8000780 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80004b6:	46c0      	nop			; (mov r8, r8)
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bd80      	pop	{r7, pc}
 80004bc:	20000850 	.word	0x20000850
 80004c0:	40005400 	.word	0x40005400
 80004c4:	2000090e 	.word	0x2000090e

080004c8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80004cc:	4b1b      	ldr	r3, [pc, #108]	; (800053c <MX_I2C2_Init+0x74>)
 80004ce:	4a1c      	ldr	r2, [pc, #112]	; (8000540 <MX_I2C2_Init+0x78>)
 80004d0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x2010091A;
 80004d2:	4b1a      	ldr	r3, [pc, #104]	; (800053c <MX_I2C2_Init+0x74>)
 80004d4:	4a1b      	ldr	r2, [pc, #108]	; (8000544 <MX_I2C2_Init+0x7c>)
 80004d6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80004d8:	4b18      	ldr	r3, [pc, #96]	; (800053c <MX_I2C2_Init+0x74>)
 80004da:	2200      	movs	r2, #0
 80004dc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004de:	4b17      	ldr	r3, [pc, #92]	; (800053c <MX_I2C2_Init+0x74>)
 80004e0:	2201      	movs	r2, #1
 80004e2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004e4:	4b15      	ldr	r3, [pc, #84]	; (800053c <MX_I2C2_Init+0x74>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80004ea:	4b14      	ldr	r3, [pc, #80]	; (800053c <MX_I2C2_Init+0x74>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80004f0:	4b12      	ldr	r3, [pc, #72]	; (800053c <MX_I2C2_Init+0x74>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004f6:	4b11      	ldr	r3, [pc, #68]	; (800053c <MX_I2C2_Init+0x74>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004fc:	4b0f      	ldr	r3, [pc, #60]	; (800053c <MX_I2C2_Init+0x74>)
 80004fe:	2200      	movs	r2, #0
 8000500:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000502:	4b0e      	ldr	r3, [pc, #56]	; (800053c <MX_I2C2_Init+0x74>)
 8000504:	0018      	movs	r0, r3
 8000506:	f000 ffdb 	bl	80014c0 <HAL_I2C_Init>
 800050a:	1e03      	subs	r3, r0, #0
 800050c:	d001      	beq.n	8000512 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800050e:	f000 f937 	bl	8000780 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000512:	4b0a      	ldr	r3, [pc, #40]	; (800053c <MX_I2C2_Init+0x74>)
 8000514:	2100      	movs	r1, #0
 8000516:	0018      	movs	r0, r3
 8000518:	f001 fb86 	bl	8001c28 <HAL_I2CEx_ConfigAnalogFilter>
 800051c:	1e03      	subs	r3, r0, #0
 800051e:	d001      	beq.n	8000524 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000520:	f000 f92e 	bl	8000780 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000524:	4b05      	ldr	r3, [pc, #20]	; (800053c <MX_I2C2_Init+0x74>)
 8000526:	2100      	movs	r1, #0
 8000528:	0018      	movs	r0, r3
 800052a:	f001 fbc9 	bl	8001cc0 <HAL_I2CEx_ConfigDigitalFilter>
 800052e:	1e03      	subs	r3, r0, #0
 8000530:	d001      	beq.n	8000536 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000532:	f000 f925 	bl	8000780 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000536:	46c0      	nop			; (mov r8, r8)
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}
 800053c:	2000089c 	.word	0x2000089c
 8000540:	40005800 	.word	0x40005800
 8000544:	2010091a 	.word	0x2010091a

08000548 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b096      	sub	sp, #88	; 0x58
 800054c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800054e:	2348      	movs	r3, #72	; 0x48
 8000550:	18fb      	adds	r3, r7, r3
 8000552:	0018      	movs	r0, r3
 8000554:	2310      	movs	r3, #16
 8000556:	001a      	movs	r2, r3
 8000558:	2100      	movs	r1, #0
 800055a:	f003 f963 	bl	8003824 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800055e:	2340      	movs	r3, #64	; 0x40
 8000560:	18fb      	adds	r3, r7, r3
 8000562:	0018      	movs	r0, r3
 8000564:	2308      	movs	r3, #8
 8000566:	001a      	movs	r2, r3
 8000568:	2100      	movs	r1, #0
 800056a:	f003 f95b 	bl	8003824 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800056e:	2324      	movs	r3, #36	; 0x24
 8000570:	18fb      	adds	r3, r7, r3
 8000572:	0018      	movs	r0, r3
 8000574:	231c      	movs	r3, #28
 8000576:	001a      	movs	r2, r3
 8000578:	2100      	movs	r1, #0
 800057a:	f003 f953 	bl	8003824 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800057e:	1d3b      	adds	r3, r7, #4
 8000580:	0018      	movs	r0, r3
 8000582:	2320      	movs	r3, #32
 8000584:	001a      	movs	r2, r3
 8000586:	2100      	movs	r1, #0
 8000588:	f003 f94c 	bl	8003824 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800058c:	4b45      	ldr	r3, [pc, #276]	; (80006a4 <MX_TIM1_Init+0x15c>)
 800058e:	4a46      	ldr	r2, [pc, #280]	; (80006a8 <MX_TIM1_Init+0x160>)
 8000590:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000592:	4b44      	ldr	r3, [pc, #272]	; (80006a4 <MX_TIM1_Init+0x15c>)
 8000594:	2200      	movs	r2, #0
 8000596:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000598:	4b42      	ldr	r3, [pc, #264]	; (80006a4 <MX_TIM1_Init+0x15c>)
 800059a:	2200      	movs	r2, #0
 800059c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000;
 800059e:	4b41      	ldr	r3, [pc, #260]	; (80006a4 <MX_TIM1_Init+0x15c>)
 80005a0:	22fa      	movs	r2, #250	; 0xfa
 80005a2:	00d2      	lsls	r2, r2, #3
 80005a4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005a6:	4b3f      	ldr	r3, [pc, #252]	; (80006a4 <MX_TIM1_Init+0x15c>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80005ac:	4b3d      	ldr	r3, [pc, #244]	; (80006a4 <MX_TIM1_Init+0x15c>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80005b2:	4b3c      	ldr	r3, [pc, #240]	; (80006a4 <MX_TIM1_Init+0x15c>)
 80005b4:	2280      	movs	r2, #128	; 0x80
 80005b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80005b8:	4b3a      	ldr	r3, [pc, #232]	; (80006a4 <MX_TIM1_Init+0x15c>)
 80005ba:	0018      	movs	r0, r3
 80005bc:	f002 f8fc 	bl	80027b8 <HAL_TIM_Base_Init>
 80005c0:	1e03      	subs	r3, r0, #0
 80005c2:	d001      	beq.n	80005c8 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 80005c4:	f000 f8dc 	bl	8000780 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005c8:	2148      	movs	r1, #72	; 0x48
 80005ca:	187b      	adds	r3, r7, r1
 80005cc:	2280      	movs	r2, #128	; 0x80
 80005ce:	0152      	lsls	r2, r2, #5
 80005d0:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80005d2:	187a      	adds	r2, r7, r1
 80005d4:	4b33      	ldr	r3, [pc, #204]	; (80006a4 <MX_TIM1_Init+0x15c>)
 80005d6:	0011      	movs	r1, r2
 80005d8:	0018      	movs	r0, r3
 80005da:	f002 fb0d 	bl	8002bf8 <HAL_TIM_ConfigClockSource>
 80005de:	1e03      	subs	r3, r0, #0
 80005e0:	d001      	beq.n	80005e6 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80005e2:	f000 f8cd 	bl	8000780 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80005e6:	4b2f      	ldr	r3, [pc, #188]	; (80006a4 <MX_TIM1_Init+0x15c>)
 80005e8:	0018      	movs	r0, r3
 80005ea:	f002 f935 	bl	8002858 <HAL_TIM_PWM_Init>
 80005ee:	1e03      	subs	r3, r0, #0
 80005f0:	d001      	beq.n	80005f6 <MX_TIM1_Init+0xae>
  {
    Error_Handler();
 80005f2:	f000 f8c5 	bl	8000780 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005f6:	2140      	movs	r1, #64	; 0x40
 80005f8:	187b      	adds	r3, r7, r1
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005fe:	187b      	adds	r3, r7, r1
 8000600:	2200      	movs	r2, #0
 8000602:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000604:	187a      	adds	r2, r7, r1
 8000606:	4b27      	ldr	r3, [pc, #156]	; (80006a4 <MX_TIM1_Init+0x15c>)
 8000608:	0011      	movs	r1, r2
 800060a:	0018      	movs	r0, r3
 800060c:	f002 fef8 	bl	8003400 <HAL_TIMEx_MasterConfigSynchronization>
 8000610:	1e03      	subs	r3, r0, #0
 8000612:	d001      	beq.n	8000618 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8000614:	f000 f8b4 	bl	8000780 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000618:	2124      	movs	r1, #36	; 0x24
 800061a:	187b      	adds	r3, r7, r1
 800061c:	2260      	movs	r2, #96	; 0x60
 800061e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000620:	187b      	adds	r3, r7, r1
 8000622:	2200      	movs	r2, #0
 8000624:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000626:	187b      	adds	r3, r7, r1
 8000628:	2200      	movs	r2, #0
 800062a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800062c:	187b      	adds	r3, r7, r1
 800062e:	2200      	movs	r2, #0
 8000630:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000632:	187b      	adds	r3, r7, r1
 8000634:	2200      	movs	r2, #0
 8000636:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000638:	187b      	adds	r3, r7, r1
 800063a:	2200      	movs	r2, #0
 800063c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800063e:	1879      	adds	r1, r7, r1
 8000640:	4b18      	ldr	r3, [pc, #96]	; (80006a4 <MX_TIM1_Init+0x15c>)
 8000642:	220c      	movs	r2, #12
 8000644:	0018      	movs	r0, r3
 8000646:	f002 fa11 	bl	8002a6c <HAL_TIM_PWM_ConfigChannel>
 800064a:	1e03      	subs	r3, r0, #0
 800064c:	d001      	beq.n	8000652 <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 800064e:	f000 f897 	bl	8000780 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000652:	1d3b      	adds	r3, r7, #4
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000658:	1d3b      	adds	r3, r7, #4
 800065a:	2200      	movs	r2, #0
 800065c:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800065e:	1d3b      	adds	r3, r7, #4
 8000660:	2200      	movs	r2, #0
 8000662:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000664:	1d3b      	adds	r3, r7, #4
 8000666:	2200      	movs	r2, #0
 8000668:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800066a:	1d3b      	adds	r3, r7, #4
 800066c:	2200      	movs	r2, #0
 800066e:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000670:	1d3b      	adds	r3, r7, #4
 8000672:	2280      	movs	r2, #128	; 0x80
 8000674:	0192      	lsls	r2, r2, #6
 8000676:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000678:	1d3b      	adds	r3, r7, #4
 800067a:	2200      	movs	r2, #0
 800067c:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800067e:	1d3a      	adds	r2, r7, #4
 8000680:	4b08      	ldr	r3, [pc, #32]	; (80006a4 <MX_TIM1_Init+0x15c>)
 8000682:	0011      	movs	r1, r2
 8000684:	0018      	movs	r0, r3
 8000686:	f002 ff13 	bl	80034b0 <HAL_TIMEx_ConfigBreakDeadTime>
 800068a:	1e03      	subs	r3, r0, #0
 800068c:	d001      	beq.n	8000692 <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 800068e:	f000 f877 	bl	8000780 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000692:	4b04      	ldr	r3, [pc, #16]	; (80006a4 <MX_TIM1_Init+0x15c>)
 8000694:	0018      	movs	r0, r3
 8000696:	f000 f98d 	bl	80009b4 <HAL_TIM_MspPostInit>

}
 800069a:	46c0      	nop			; (mov r8, r8)
 800069c:	46bd      	mov	sp, r7
 800069e:	b016      	add	sp, #88	; 0x58
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	46c0      	nop			; (mov r8, r8)
 80006a4:	200008e8 	.word	0x200008e8
 80006a8:	40012c00 	.word	0x40012c00

080006ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006ac:	b590      	push	{r4, r7, lr}
 80006ae:	b089      	sub	sp, #36	; 0x24
 80006b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b2:	240c      	movs	r4, #12
 80006b4:	193b      	adds	r3, r7, r4
 80006b6:	0018      	movs	r0, r3
 80006b8:	2314      	movs	r3, #20
 80006ba:	001a      	movs	r2, r3
 80006bc:	2100      	movs	r1, #0
 80006be:	f003 f8b1 	bl	8003824 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006c2:	4b2b      	ldr	r3, [pc, #172]	; (8000770 <MX_GPIO_Init+0xc4>)
 80006c4:	695a      	ldr	r2, [r3, #20]
 80006c6:	4b2a      	ldr	r3, [pc, #168]	; (8000770 <MX_GPIO_Init+0xc4>)
 80006c8:	2180      	movs	r1, #128	; 0x80
 80006ca:	0309      	lsls	r1, r1, #12
 80006cc:	430a      	orrs	r2, r1
 80006ce:	615a      	str	r2, [r3, #20]
 80006d0:	4b27      	ldr	r3, [pc, #156]	; (8000770 <MX_GPIO_Init+0xc4>)
 80006d2:	695a      	ldr	r2, [r3, #20]
 80006d4:	2380      	movs	r3, #128	; 0x80
 80006d6:	031b      	lsls	r3, r3, #12
 80006d8:	4013      	ands	r3, r2
 80006da:	60bb      	str	r3, [r7, #8]
 80006dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006de:	4b24      	ldr	r3, [pc, #144]	; (8000770 <MX_GPIO_Init+0xc4>)
 80006e0:	695a      	ldr	r2, [r3, #20]
 80006e2:	4b23      	ldr	r3, [pc, #140]	; (8000770 <MX_GPIO_Init+0xc4>)
 80006e4:	2180      	movs	r1, #128	; 0x80
 80006e6:	0289      	lsls	r1, r1, #10
 80006e8:	430a      	orrs	r2, r1
 80006ea:	615a      	str	r2, [r3, #20]
 80006ec:	4b20      	ldr	r3, [pc, #128]	; (8000770 <MX_GPIO_Init+0xc4>)
 80006ee:	695a      	ldr	r2, [r3, #20]
 80006f0:	2380      	movs	r3, #128	; 0x80
 80006f2:	029b      	lsls	r3, r3, #10
 80006f4:	4013      	ands	r3, r2
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006fa:	4b1d      	ldr	r3, [pc, #116]	; (8000770 <MX_GPIO_Init+0xc4>)
 80006fc:	695a      	ldr	r2, [r3, #20]
 80006fe:	4b1c      	ldr	r3, [pc, #112]	; (8000770 <MX_GPIO_Init+0xc4>)
 8000700:	2180      	movs	r1, #128	; 0x80
 8000702:	02c9      	lsls	r1, r1, #11
 8000704:	430a      	orrs	r2, r1
 8000706:	615a      	str	r2, [r3, #20]
 8000708:	4b19      	ldr	r3, [pc, #100]	; (8000770 <MX_GPIO_Init+0xc4>)
 800070a:	695a      	ldr	r2, [r3, #20]
 800070c:	2380      	movs	r3, #128	; 0x80
 800070e:	02db      	lsls	r3, r3, #11
 8000710:	4013      	ands	r3, r2
 8000712:	603b      	str	r3, [r7, #0]
 8000714:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_11, GPIO_PIN_RESET);
 8000716:	4917      	ldr	r1, [pc, #92]	; (8000774 <MX_GPIO_Init+0xc8>)
 8000718:	4b17      	ldr	r3, [pc, #92]	; (8000778 <MX_GPIO_Init+0xcc>)
 800071a:	2200      	movs	r2, #0
 800071c:	0018      	movs	r0, r3
 800071e:	f000 feb1 	bl	8001484 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000722:	193b      	adds	r3, r7, r4
 8000724:	221f      	movs	r2, #31
 8000726:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000728:	193b      	adds	r3, r7, r4
 800072a:	2200      	movs	r2, #0
 800072c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072e:	193b      	adds	r3, r7, r4
 8000730:	2200      	movs	r2, #0
 8000732:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000734:	193b      	adds	r3, r7, r4
 8000736:	4a11      	ldr	r2, [pc, #68]	; (800077c <MX_GPIO_Init+0xd0>)
 8000738:	0019      	movs	r1, r3
 800073a:	0010      	movs	r0, r2
 800073c:	f000 fd32 	bl	80011a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_11;
 8000740:	0021      	movs	r1, r4
 8000742:	187b      	adds	r3, r7, r1
 8000744:	4a0b      	ldr	r2, [pc, #44]	; (8000774 <MX_GPIO_Init+0xc8>)
 8000746:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000748:	187b      	adds	r3, r7, r1
 800074a:	2201      	movs	r2, #1
 800074c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074e:	187b      	adds	r3, r7, r1
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000754:	187b      	adds	r3, r7, r1
 8000756:	2200      	movs	r2, #0
 8000758:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800075a:	187b      	adds	r3, r7, r1
 800075c:	4a06      	ldr	r2, [pc, #24]	; (8000778 <MX_GPIO_Init+0xcc>)
 800075e:	0019      	movs	r1, r3
 8000760:	0010      	movs	r0, r2
 8000762:	f000 fd1f 	bl	80011a4 <HAL_GPIO_Init>

}
 8000766:	46c0      	nop			; (mov r8, r8)
 8000768:	46bd      	mov	sp, r7
 800076a:	b009      	add	sp, #36	; 0x24
 800076c:	bd90      	pop	{r4, r7, pc}
 800076e:	46c0      	nop			; (mov r8, r8)
 8000770:	40021000 	.word	0x40021000
 8000774:	00000807 	.word	0x00000807
 8000778:	48000400 	.word	0x48000400
 800077c:	48000800 	.word	0x48000800

08000780 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000784:	b672      	cpsid	i
}
 8000786:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000788:	e7fe      	b.n	8000788 <Error_Handler+0x8>
	...

0800078c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000792:	4b0f      	ldr	r3, [pc, #60]	; (80007d0 <HAL_MspInit+0x44>)
 8000794:	699a      	ldr	r2, [r3, #24]
 8000796:	4b0e      	ldr	r3, [pc, #56]	; (80007d0 <HAL_MspInit+0x44>)
 8000798:	2101      	movs	r1, #1
 800079a:	430a      	orrs	r2, r1
 800079c:	619a      	str	r2, [r3, #24]
 800079e:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <HAL_MspInit+0x44>)
 80007a0:	699b      	ldr	r3, [r3, #24]
 80007a2:	2201      	movs	r2, #1
 80007a4:	4013      	ands	r3, r2
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007aa:	4b09      	ldr	r3, [pc, #36]	; (80007d0 <HAL_MspInit+0x44>)
 80007ac:	69da      	ldr	r2, [r3, #28]
 80007ae:	4b08      	ldr	r3, [pc, #32]	; (80007d0 <HAL_MspInit+0x44>)
 80007b0:	2180      	movs	r1, #128	; 0x80
 80007b2:	0549      	lsls	r1, r1, #21
 80007b4:	430a      	orrs	r2, r1
 80007b6:	61da      	str	r2, [r3, #28]
 80007b8:	4b05      	ldr	r3, [pc, #20]	; (80007d0 <HAL_MspInit+0x44>)
 80007ba:	69da      	ldr	r2, [r3, #28]
 80007bc:	2380      	movs	r3, #128	; 0x80
 80007be:	055b      	lsls	r3, r3, #21
 80007c0:	4013      	ands	r3, r2
 80007c2:	603b      	str	r3, [r7, #0]
 80007c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007c6:	46c0      	nop			; (mov r8, r8)
 80007c8:	46bd      	mov	sp, r7
 80007ca:	b002      	add	sp, #8
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	46c0      	nop			; (mov r8, r8)
 80007d0:	40021000 	.word	0x40021000

080007d4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80007d4:	b590      	push	{r4, r7, lr}
 80007d6:	b08b      	sub	sp, #44	; 0x2c
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007dc:	2414      	movs	r4, #20
 80007de:	193b      	adds	r3, r7, r4
 80007e0:	0018      	movs	r0, r3
 80007e2:	2314      	movs	r3, #20
 80007e4:	001a      	movs	r2, r3
 80007e6:	2100      	movs	r1, #0
 80007e8:	f003 f81c 	bl	8003824 <memset>
  if(hadc->Instance==ADC1)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a19      	ldr	r2, [pc, #100]	; (8000858 <HAL_ADC_MspInit+0x84>)
 80007f2:	4293      	cmp	r3, r2
 80007f4:	d12b      	bne.n	800084e <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80007f6:	4b19      	ldr	r3, [pc, #100]	; (800085c <HAL_ADC_MspInit+0x88>)
 80007f8:	699a      	ldr	r2, [r3, #24]
 80007fa:	4b18      	ldr	r3, [pc, #96]	; (800085c <HAL_ADC_MspInit+0x88>)
 80007fc:	2180      	movs	r1, #128	; 0x80
 80007fe:	0089      	lsls	r1, r1, #2
 8000800:	430a      	orrs	r2, r1
 8000802:	619a      	str	r2, [r3, #24]
 8000804:	4b15      	ldr	r3, [pc, #84]	; (800085c <HAL_ADC_MspInit+0x88>)
 8000806:	699a      	ldr	r2, [r3, #24]
 8000808:	2380      	movs	r3, #128	; 0x80
 800080a:	009b      	lsls	r3, r3, #2
 800080c:	4013      	ands	r3, r2
 800080e:	613b      	str	r3, [r7, #16]
 8000810:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000812:	4b12      	ldr	r3, [pc, #72]	; (800085c <HAL_ADC_MspInit+0x88>)
 8000814:	695a      	ldr	r2, [r3, #20]
 8000816:	4b11      	ldr	r3, [pc, #68]	; (800085c <HAL_ADC_MspInit+0x88>)
 8000818:	2180      	movs	r1, #128	; 0x80
 800081a:	0289      	lsls	r1, r1, #10
 800081c:	430a      	orrs	r2, r1
 800081e:	615a      	str	r2, [r3, #20]
 8000820:	4b0e      	ldr	r3, [pc, #56]	; (800085c <HAL_ADC_MspInit+0x88>)
 8000822:	695a      	ldr	r2, [r3, #20]
 8000824:	2380      	movs	r3, #128	; 0x80
 8000826:	029b      	lsls	r3, r3, #10
 8000828:	4013      	ands	r3, r2
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800082e:	193b      	adds	r3, r7, r4
 8000830:	2201      	movs	r2, #1
 8000832:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000834:	193b      	adds	r3, r7, r4
 8000836:	2203      	movs	r2, #3
 8000838:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083a:	193b      	adds	r3, r7, r4
 800083c:	2200      	movs	r2, #0
 800083e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000840:	193a      	adds	r2, r7, r4
 8000842:	2390      	movs	r3, #144	; 0x90
 8000844:	05db      	lsls	r3, r3, #23
 8000846:	0011      	movs	r1, r2
 8000848:	0018      	movs	r0, r3
 800084a:	f000 fcab 	bl	80011a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800084e:	46c0      	nop			; (mov r8, r8)
 8000850:	46bd      	mov	sp, r7
 8000852:	b00b      	add	sp, #44	; 0x2c
 8000854:	bd90      	pop	{r4, r7, pc}
 8000856:	46c0      	nop			; (mov r8, r8)
 8000858:	40012400 	.word	0x40012400
 800085c:	40021000 	.word	0x40021000

08000860 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000860:	b590      	push	{r4, r7, lr}
 8000862:	b08d      	sub	sp, #52	; 0x34
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000868:	241c      	movs	r4, #28
 800086a:	193b      	adds	r3, r7, r4
 800086c:	0018      	movs	r0, r3
 800086e:	2314      	movs	r3, #20
 8000870:	001a      	movs	r2, r3
 8000872:	2100      	movs	r1, #0
 8000874:	f002 ffd6 	bl	8003824 <memset>
  if(hi2c->Instance==I2C1)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a39      	ldr	r2, [pc, #228]	; (8000964 <HAL_I2C_MspInit+0x104>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d133      	bne.n	80008ea <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000882:	4b39      	ldr	r3, [pc, #228]	; (8000968 <HAL_I2C_MspInit+0x108>)
 8000884:	695a      	ldr	r2, [r3, #20]
 8000886:	4b38      	ldr	r3, [pc, #224]	; (8000968 <HAL_I2C_MspInit+0x108>)
 8000888:	2180      	movs	r1, #128	; 0x80
 800088a:	02c9      	lsls	r1, r1, #11
 800088c:	430a      	orrs	r2, r1
 800088e:	615a      	str	r2, [r3, #20]
 8000890:	4b35      	ldr	r3, [pc, #212]	; (8000968 <HAL_I2C_MspInit+0x108>)
 8000892:	695a      	ldr	r2, [r3, #20]
 8000894:	2380      	movs	r3, #128	; 0x80
 8000896:	02db      	lsls	r3, r3, #11
 8000898:	4013      	ands	r3, r2
 800089a:	61bb      	str	r3, [r7, #24]
 800089c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800089e:	193b      	adds	r3, r7, r4
 80008a0:	22c0      	movs	r2, #192	; 0xc0
 80008a2:	0092      	lsls	r2, r2, #2
 80008a4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008a6:	0021      	movs	r1, r4
 80008a8:	187b      	adds	r3, r7, r1
 80008aa:	2212      	movs	r2, #18
 80008ac:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008ae:	187b      	adds	r3, r7, r1
 80008b0:	2201      	movs	r2, #1
 80008b2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008b4:	187b      	adds	r3, r7, r1
 80008b6:	2203      	movs	r2, #3
 80008b8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80008ba:	187b      	adds	r3, r7, r1
 80008bc:	2201      	movs	r2, #1
 80008be:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c0:	187b      	adds	r3, r7, r1
 80008c2:	4a2a      	ldr	r2, [pc, #168]	; (800096c <HAL_I2C_MspInit+0x10c>)
 80008c4:	0019      	movs	r1, r3
 80008c6:	0010      	movs	r0, r2
 80008c8:	f000 fc6c 	bl	80011a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008cc:	4b26      	ldr	r3, [pc, #152]	; (8000968 <HAL_I2C_MspInit+0x108>)
 80008ce:	69da      	ldr	r2, [r3, #28]
 80008d0:	4b25      	ldr	r3, [pc, #148]	; (8000968 <HAL_I2C_MspInit+0x108>)
 80008d2:	2180      	movs	r1, #128	; 0x80
 80008d4:	0389      	lsls	r1, r1, #14
 80008d6:	430a      	orrs	r2, r1
 80008d8:	61da      	str	r2, [r3, #28]
 80008da:	4b23      	ldr	r3, [pc, #140]	; (8000968 <HAL_I2C_MspInit+0x108>)
 80008dc:	69da      	ldr	r2, [r3, #28]
 80008de:	2380      	movs	r3, #128	; 0x80
 80008e0:	039b      	lsls	r3, r3, #14
 80008e2:	4013      	ands	r3, r2
 80008e4:	617b      	str	r3, [r7, #20]
 80008e6:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80008e8:	e037      	b.n	800095a <HAL_I2C_MspInit+0xfa>
  else if(hi2c->Instance==I2C2)
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	4a20      	ldr	r2, [pc, #128]	; (8000970 <HAL_I2C_MspInit+0x110>)
 80008f0:	4293      	cmp	r3, r2
 80008f2:	d132      	bne.n	800095a <HAL_I2C_MspInit+0xfa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f4:	4b1c      	ldr	r3, [pc, #112]	; (8000968 <HAL_I2C_MspInit+0x108>)
 80008f6:	695a      	ldr	r2, [r3, #20]
 80008f8:	4b1b      	ldr	r3, [pc, #108]	; (8000968 <HAL_I2C_MspInit+0x108>)
 80008fa:	2180      	movs	r1, #128	; 0x80
 80008fc:	02c9      	lsls	r1, r1, #11
 80008fe:	430a      	orrs	r2, r1
 8000900:	615a      	str	r2, [r3, #20]
 8000902:	4b19      	ldr	r3, [pc, #100]	; (8000968 <HAL_I2C_MspInit+0x108>)
 8000904:	695a      	ldr	r2, [r3, #20]
 8000906:	2380      	movs	r3, #128	; 0x80
 8000908:	02db      	lsls	r3, r3, #11
 800090a:	4013      	ands	r3, r2
 800090c:	613b      	str	r3, [r7, #16]
 800090e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000910:	211c      	movs	r1, #28
 8000912:	187b      	adds	r3, r7, r1
 8000914:	22c0      	movs	r2, #192	; 0xc0
 8000916:	01d2      	lsls	r2, r2, #7
 8000918:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800091a:	187b      	adds	r3, r7, r1
 800091c:	2212      	movs	r2, #18
 800091e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000920:	187b      	adds	r3, r7, r1
 8000922:	2201      	movs	r2, #1
 8000924:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000926:	187b      	adds	r3, r7, r1
 8000928:	2203      	movs	r2, #3
 800092a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_I2C2;
 800092c:	187b      	adds	r3, r7, r1
 800092e:	2205      	movs	r2, #5
 8000930:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000932:	187b      	adds	r3, r7, r1
 8000934:	4a0d      	ldr	r2, [pc, #52]	; (800096c <HAL_I2C_MspInit+0x10c>)
 8000936:	0019      	movs	r1, r3
 8000938:	0010      	movs	r0, r2
 800093a:	f000 fc33 	bl	80011a4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800093e:	4b0a      	ldr	r3, [pc, #40]	; (8000968 <HAL_I2C_MspInit+0x108>)
 8000940:	69da      	ldr	r2, [r3, #28]
 8000942:	4b09      	ldr	r3, [pc, #36]	; (8000968 <HAL_I2C_MspInit+0x108>)
 8000944:	2180      	movs	r1, #128	; 0x80
 8000946:	03c9      	lsls	r1, r1, #15
 8000948:	430a      	orrs	r2, r1
 800094a:	61da      	str	r2, [r3, #28]
 800094c:	4b06      	ldr	r3, [pc, #24]	; (8000968 <HAL_I2C_MspInit+0x108>)
 800094e:	69da      	ldr	r2, [r3, #28]
 8000950:	2380      	movs	r3, #128	; 0x80
 8000952:	03db      	lsls	r3, r3, #15
 8000954:	4013      	ands	r3, r2
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	68fb      	ldr	r3, [r7, #12]
}
 800095a:	46c0      	nop			; (mov r8, r8)
 800095c:	46bd      	mov	sp, r7
 800095e:	b00d      	add	sp, #52	; 0x34
 8000960:	bd90      	pop	{r4, r7, pc}
 8000962:	46c0      	nop			; (mov r8, r8)
 8000964:	40005400 	.word	0x40005400
 8000968:	40021000 	.word	0x40021000
 800096c:	48000400 	.word	0x48000400
 8000970:	40005800 	.word	0x40005800

08000974 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b084      	sub	sp, #16
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a0a      	ldr	r2, [pc, #40]	; (80009ac <HAL_TIM_Base_MspInit+0x38>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d10d      	bne.n	80009a2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000986:	4b0a      	ldr	r3, [pc, #40]	; (80009b0 <HAL_TIM_Base_MspInit+0x3c>)
 8000988:	699a      	ldr	r2, [r3, #24]
 800098a:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <HAL_TIM_Base_MspInit+0x3c>)
 800098c:	2180      	movs	r1, #128	; 0x80
 800098e:	0109      	lsls	r1, r1, #4
 8000990:	430a      	orrs	r2, r1
 8000992:	619a      	str	r2, [r3, #24]
 8000994:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <HAL_TIM_Base_MspInit+0x3c>)
 8000996:	699a      	ldr	r2, [r3, #24]
 8000998:	2380      	movs	r3, #128	; 0x80
 800099a:	011b      	lsls	r3, r3, #4
 800099c:	4013      	ands	r3, r2
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80009a2:	46c0      	nop			; (mov r8, r8)
 80009a4:	46bd      	mov	sp, r7
 80009a6:	b004      	add	sp, #16
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	46c0      	nop			; (mov r8, r8)
 80009ac:	40012c00 	.word	0x40012c00
 80009b0:	40021000 	.word	0x40021000

080009b4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80009b4:	b590      	push	{r4, r7, lr}
 80009b6:	b089      	sub	sp, #36	; 0x24
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009bc:	240c      	movs	r4, #12
 80009be:	193b      	adds	r3, r7, r4
 80009c0:	0018      	movs	r0, r3
 80009c2:	2314      	movs	r3, #20
 80009c4:	001a      	movs	r2, r3
 80009c6:	2100      	movs	r1, #0
 80009c8:	f002 ff2c 	bl	8003824 <memset>
  if(htim->Instance==TIM1)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a16      	ldr	r2, [pc, #88]	; (8000a2c <HAL_TIM_MspPostInit+0x78>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d125      	bne.n	8000a22 <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d6:	4b16      	ldr	r3, [pc, #88]	; (8000a30 <HAL_TIM_MspPostInit+0x7c>)
 80009d8:	695a      	ldr	r2, [r3, #20]
 80009da:	4b15      	ldr	r3, [pc, #84]	; (8000a30 <HAL_TIM_MspPostInit+0x7c>)
 80009dc:	2180      	movs	r1, #128	; 0x80
 80009de:	0289      	lsls	r1, r1, #10
 80009e0:	430a      	orrs	r2, r1
 80009e2:	615a      	str	r2, [r3, #20]
 80009e4:	4b12      	ldr	r3, [pc, #72]	; (8000a30 <HAL_TIM_MspPostInit+0x7c>)
 80009e6:	695a      	ldr	r2, [r3, #20]
 80009e8:	2380      	movs	r3, #128	; 0x80
 80009ea:	029b      	lsls	r3, r3, #10
 80009ec:	4013      	ands	r3, r2
 80009ee:	60bb      	str	r3, [r7, #8]
 80009f0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80009f2:	193b      	adds	r3, r7, r4
 80009f4:	2280      	movs	r2, #128	; 0x80
 80009f6:	0112      	lsls	r2, r2, #4
 80009f8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fa:	0021      	movs	r1, r4
 80009fc:	187b      	adds	r3, r7, r1
 80009fe:	2202      	movs	r2, #2
 8000a00:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	187b      	adds	r3, r7, r1
 8000a04:	2200      	movs	r2, #0
 8000a06:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a08:	187b      	adds	r3, r7, r1
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000a0e:	187b      	adds	r3, r7, r1
 8000a10:	2202      	movs	r2, #2
 8000a12:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a14:	187a      	adds	r2, r7, r1
 8000a16:	2390      	movs	r3, #144	; 0x90
 8000a18:	05db      	lsls	r3, r3, #23
 8000a1a:	0011      	movs	r1, r2
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	f000 fbc1 	bl	80011a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000a22:	46c0      	nop			; (mov r8, r8)
 8000a24:	46bd      	mov	sp, r7
 8000a26:	b009      	add	sp, #36	; 0x24
 8000a28:	bd90      	pop	{r4, r7, pc}
 8000a2a:	46c0      	nop			; (mov r8, r8)
 8000a2c:	40012c00 	.word	0x40012c00
 8000a30:	40021000 	.word	0x40021000

08000a34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a38:	e7fe      	b.n	8000a38 <NMI_Handler+0x4>

08000a3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a3a:	b580      	push	{r7, lr}
 8000a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a3e:	e7fe      	b.n	8000a3e <HardFault_Handler+0x4>

08000a40 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a44:	46c0      	nop			; (mov r8, r8)
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a4a:	b580      	push	{r7, lr}
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a4e:	46c0      	nop			; (mov r8, r8)
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}

08000a54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a58:	f000 f87a 	bl	8000b50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a5c:	46c0      	nop			; (mov r8, r8)
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}

08000a62 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a62:	b580      	push	{r7, lr}
 8000a64:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000a66:	46c0      	nop			; (mov r8, r8)
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}

08000a6c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a6c:	480d      	ldr	r0, [pc, #52]	; (8000aa4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a6e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a70:	480d      	ldr	r0, [pc, #52]	; (8000aa8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a72:	490e      	ldr	r1, [pc, #56]	; (8000aac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a74:	4a0e      	ldr	r2, [pc, #56]	; (8000ab0 <LoopForever+0xe>)
  movs r3, #0
 8000a76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a78:	e002      	b.n	8000a80 <LoopCopyDataInit>

08000a7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a7e:	3304      	adds	r3, #4

08000a80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a84:	d3f9      	bcc.n	8000a7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a86:	4a0b      	ldr	r2, [pc, #44]	; (8000ab4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a88:	4c0b      	ldr	r4, [pc, #44]	; (8000ab8 <LoopForever+0x16>)
  movs r3, #0
 8000a8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a8c:	e001      	b.n	8000a92 <LoopFillZerobss>

08000a8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a90:	3204      	adds	r2, #4

08000a92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a94:	d3fb      	bcc.n	8000a8e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000a96:	f7ff ffe4 	bl	8000a62 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000a9a:	f002 fe9f 	bl	80037dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a9e:	f7ff fbbf 	bl	8000220 <main>

08000aa2 <LoopForever>:

LoopForever:
    b LoopForever
 8000aa2:	e7fe      	b.n	8000aa2 <LoopForever>
  ldr   r0, =_estack
 8000aa4:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000aa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aac:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ab0:	08003884 	.word	0x08003884
  ldr r2, =_sbss
 8000ab4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ab8:	20000974 	.word	0x20000974

08000abc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000abc:	e7fe      	b.n	8000abc <ADC1_IRQHandler>
	...

08000ac0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ac4:	4b07      	ldr	r3, [pc, #28]	; (8000ae4 <HAL_Init+0x24>)
 8000ac6:	681a      	ldr	r2, [r3, #0]
 8000ac8:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <HAL_Init+0x24>)
 8000aca:	2110      	movs	r1, #16
 8000acc:	430a      	orrs	r2, r1
 8000ace:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000ad0:	2003      	movs	r0, #3
 8000ad2:	f000 f809 	bl	8000ae8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ad6:	f7ff fe59 	bl	800078c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ada:	2300      	movs	r3, #0
}
 8000adc:	0018      	movs	r0, r3
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	46c0      	nop			; (mov r8, r8)
 8000ae4:	40022000 	.word	0x40022000

08000ae8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae8:	b590      	push	{r4, r7, lr}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000af0:	4b14      	ldr	r3, [pc, #80]	; (8000b44 <HAL_InitTick+0x5c>)
 8000af2:	681c      	ldr	r4, [r3, #0]
 8000af4:	4b14      	ldr	r3, [pc, #80]	; (8000b48 <HAL_InitTick+0x60>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	0019      	movs	r1, r3
 8000afa:	23fa      	movs	r3, #250	; 0xfa
 8000afc:	0098      	lsls	r0, r3, #2
 8000afe:	f7ff fb03 	bl	8000108 <__udivsi3>
 8000b02:	0003      	movs	r3, r0
 8000b04:	0019      	movs	r1, r3
 8000b06:	0020      	movs	r0, r4
 8000b08:	f7ff fafe 	bl	8000108 <__udivsi3>
 8000b0c:	0003      	movs	r3, r0
 8000b0e:	0018      	movs	r0, r3
 8000b10:	f000 fb3b 	bl	800118a <HAL_SYSTICK_Config>
 8000b14:	1e03      	subs	r3, r0, #0
 8000b16:	d001      	beq.n	8000b1c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	e00f      	b.n	8000b3c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	2b03      	cmp	r3, #3
 8000b20:	d80b      	bhi.n	8000b3a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b22:	6879      	ldr	r1, [r7, #4]
 8000b24:	2301      	movs	r3, #1
 8000b26:	425b      	negs	r3, r3
 8000b28:	2200      	movs	r2, #0
 8000b2a:	0018      	movs	r0, r3
 8000b2c:	f000 fb18 	bl	8001160 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b30:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <HAL_InitTick+0x64>)
 8000b32:	687a      	ldr	r2, [r7, #4]
 8000b34:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000b36:	2300      	movs	r3, #0
 8000b38:	e000      	b.n	8000b3c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000b3a:	2301      	movs	r3, #1
}
 8000b3c:	0018      	movs	r0, r3
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	b003      	add	sp, #12
 8000b42:	bd90      	pop	{r4, r7, pc}
 8000b44:	20000000 	.word	0x20000000
 8000b48:	20000008 	.word	0x20000008
 8000b4c:	20000004 	.word	0x20000004

08000b50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b54:	4b05      	ldr	r3, [pc, #20]	; (8000b6c <HAL_IncTick+0x1c>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	001a      	movs	r2, r3
 8000b5a:	4b05      	ldr	r3, [pc, #20]	; (8000b70 <HAL_IncTick+0x20>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	18d2      	adds	r2, r2, r3
 8000b60:	4b03      	ldr	r3, [pc, #12]	; (8000b70 <HAL_IncTick+0x20>)
 8000b62:	601a      	str	r2, [r3, #0]
}
 8000b64:	46c0      	nop			; (mov r8, r8)
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	46c0      	nop			; (mov r8, r8)
 8000b6c:	20000008 	.word	0x20000008
 8000b70:	20000970 	.word	0x20000970

08000b74 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  return uwTick;
 8000b78:	4b02      	ldr	r3, [pc, #8]	; (8000b84 <HAL_GetTick+0x10>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
}
 8000b7c:	0018      	movs	r0, r3
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	46c0      	nop			; (mov r8, r8)
 8000b84:	20000970 	.word	0x20000970

08000b88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b90:	f7ff fff0 	bl	8000b74 <HAL_GetTick>
 8000b94:	0003      	movs	r3, r0
 8000b96:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	d005      	beq.n	8000bae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ba2:	4b0a      	ldr	r3, [pc, #40]	; (8000bcc <HAL_Delay+0x44>)
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	001a      	movs	r2, r3
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	189b      	adds	r3, r3, r2
 8000bac:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000bae:	46c0      	nop			; (mov r8, r8)
 8000bb0:	f7ff ffe0 	bl	8000b74 <HAL_GetTick>
 8000bb4:	0002      	movs	r2, r0
 8000bb6:	68bb      	ldr	r3, [r7, #8]
 8000bb8:	1ad3      	subs	r3, r2, r3
 8000bba:	68fa      	ldr	r2, [r7, #12]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	d8f7      	bhi.n	8000bb0 <HAL_Delay+0x28>
  {
  }
}
 8000bc0:	46c0      	nop			; (mov r8, r8)
 8000bc2:	46c0      	nop			; (mov r8, r8)
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	b004      	add	sp, #16
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	46c0      	nop			; (mov r8, r8)
 8000bcc:	20000008 	.word	0x20000008

08000bd0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000bd8:	230f      	movs	r3, #15
 8000bda:	18fb      	adds	r3, r7, r3
 8000bdc:	2200      	movs	r2, #0
 8000bde:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8000be0:	2300      	movs	r3, #0
 8000be2:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d101      	bne.n	8000bee <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8000bea:	2301      	movs	r3, #1
 8000bec:	e125      	b.n	8000e3a <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d10a      	bne.n	8000c0c <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2234      	movs	r2, #52	; 0x34
 8000c00:	2100      	movs	r1, #0
 8000c02:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	0018      	movs	r0, r3
 8000c08:	f7ff fde4 	bl	80007d4 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c10:	2210      	movs	r2, #16
 8000c12:	4013      	ands	r3, r2
 8000c14:	d000      	beq.n	8000c18 <HAL_ADC_Init+0x48>
 8000c16:	e103      	b.n	8000e20 <HAL_ADC_Init+0x250>
 8000c18:	230f      	movs	r3, #15
 8000c1a:	18fb      	adds	r3, r7, r3
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d000      	beq.n	8000c24 <HAL_ADC_Init+0x54>
 8000c22:	e0fd      	b.n	8000e20 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	689b      	ldr	r3, [r3, #8]
 8000c2a:	2204      	movs	r2, #4
 8000c2c:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000c2e:	d000      	beq.n	8000c32 <HAL_ADC_Init+0x62>
 8000c30:	e0f6      	b.n	8000e20 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c36:	4a83      	ldr	r2, [pc, #524]	; (8000e44 <HAL_ADC_Init+0x274>)
 8000c38:	4013      	ands	r3, r2
 8000c3a:	2202      	movs	r2, #2
 8000c3c:	431a      	orrs	r2, r3
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	689b      	ldr	r3, [r3, #8]
 8000c48:	2203      	movs	r2, #3
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	2b01      	cmp	r3, #1
 8000c4e:	d112      	bne.n	8000c76 <HAL_ADC_Init+0xa6>
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	2201      	movs	r2, #1
 8000c58:	4013      	ands	r3, r2
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d009      	beq.n	8000c72 <HAL_ADC_Init+0xa2>
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	68da      	ldr	r2, [r3, #12]
 8000c64:	2380      	movs	r3, #128	; 0x80
 8000c66:	021b      	lsls	r3, r3, #8
 8000c68:	401a      	ands	r2, r3
 8000c6a:	2380      	movs	r3, #128	; 0x80
 8000c6c:	021b      	lsls	r3, r3, #8
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	d101      	bne.n	8000c76 <HAL_ADC_Init+0xa6>
 8000c72:	2301      	movs	r3, #1
 8000c74:	e000      	b.n	8000c78 <HAL_ADC_Init+0xa8>
 8000c76:	2300      	movs	r3, #0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d116      	bne.n	8000caa <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	68db      	ldr	r3, [r3, #12]
 8000c82:	2218      	movs	r2, #24
 8000c84:	4393      	bics	r3, r2
 8000c86:	0019      	movs	r1, r3
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	689a      	ldr	r2, [r3, #8]
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	430a      	orrs	r2, r1
 8000c92:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	691b      	ldr	r3, [r3, #16]
 8000c9a:	009b      	lsls	r3, r3, #2
 8000c9c:	0899      	lsrs	r1, r3, #2
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	685a      	ldr	r2, [r3, #4]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	430a      	orrs	r2, r1
 8000ca8:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	68da      	ldr	r2, [r3, #12]
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4964      	ldr	r1, [pc, #400]	; (8000e48 <HAL_ADC_Init+0x278>)
 8000cb6:	400a      	ands	r2, r1
 8000cb8:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	7e1b      	ldrb	r3, [r3, #24]
 8000cbe:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	7e5b      	ldrb	r3, [r3, #25]
 8000cc4:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000cc6:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	7e9b      	ldrb	r3, [r3, #26]
 8000ccc:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000cce:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cd4:	2b01      	cmp	r3, #1
 8000cd6:	d002      	beq.n	8000cde <HAL_ADC_Init+0x10e>
 8000cd8:	2380      	movs	r3, #128	; 0x80
 8000cda:	015b      	lsls	r3, r3, #5
 8000cdc:	e000      	b.n	8000ce0 <HAL_ADC_Init+0x110>
 8000cde:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000ce0:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000ce6:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	691b      	ldr	r3, [r3, #16]
 8000cec:	2b02      	cmp	r3, #2
 8000cee:	d101      	bne.n	8000cf4 <HAL_ADC_Init+0x124>
 8000cf0:	2304      	movs	r3, #4
 8000cf2:	e000      	b.n	8000cf6 <HAL_ADC_Init+0x126>
 8000cf4:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8000cf6:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2124      	movs	r1, #36	; 0x24
 8000cfc:	5c5b      	ldrb	r3, [r3, r1]
 8000cfe:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000d00:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000d02:	68ba      	ldr	r2, [r7, #8]
 8000d04:	4313      	orrs	r3, r2
 8000d06:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	7edb      	ldrb	r3, [r3, #27]
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d115      	bne.n	8000d3c <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	7e9b      	ldrb	r3, [r3, #26]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d105      	bne.n	8000d24 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	2280      	movs	r2, #128	; 0x80
 8000d1c:	0252      	lsls	r2, r2, #9
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	60bb      	str	r3, [r7, #8]
 8000d22:	e00b      	b.n	8000d3c <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d28:	2220      	movs	r2, #32
 8000d2a:	431a      	orrs	r2, r3
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d34:	2201      	movs	r2, #1
 8000d36:	431a      	orrs	r2, r3
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	69da      	ldr	r2, [r3, #28]
 8000d40:	23c2      	movs	r3, #194	; 0xc2
 8000d42:	33ff      	adds	r3, #255	; 0xff
 8000d44:	429a      	cmp	r2, r3
 8000d46:	d007      	beq.n	8000d58 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000d50:	4313      	orrs	r3, r2
 8000d52:	68ba      	ldr	r2, [r7, #8]
 8000d54:	4313      	orrs	r3, r2
 8000d56:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	68d9      	ldr	r1, [r3, #12]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	68ba      	ldr	r2, [r7, #8]
 8000d64:	430a      	orrs	r2, r1
 8000d66:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d6c:	2380      	movs	r3, #128	; 0x80
 8000d6e:	055b      	lsls	r3, r3, #21
 8000d70:	429a      	cmp	r2, r3
 8000d72:	d01b      	beq.n	8000dac <HAL_ADC_Init+0x1dc>
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d017      	beq.n	8000dac <HAL_ADC_Init+0x1dc>
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d80:	2b02      	cmp	r3, #2
 8000d82:	d013      	beq.n	8000dac <HAL_ADC_Init+0x1dc>
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d88:	2b03      	cmp	r3, #3
 8000d8a:	d00f      	beq.n	8000dac <HAL_ADC_Init+0x1dc>
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d90:	2b04      	cmp	r3, #4
 8000d92:	d00b      	beq.n	8000dac <HAL_ADC_Init+0x1dc>
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d98:	2b05      	cmp	r3, #5
 8000d9a:	d007      	beq.n	8000dac <HAL_ADC_Init+0x1dc>
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000da0:	2b06      	cmp	r3, #6
 8000da2:	d003      	beq.n	8000dac <HAL_ADC_Init+0x1dc>
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000da8:	2b07      	cmp	r3, #7
 8000daa:	d112      	bne.n	8000dd2 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	695a      	ldr	r2, [r3, #20]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	2107      	movs	r1, #7
 8000db8:	438a      	bics	r2, r1
 8000dba:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	6959      	ldr	r1, [r3, #20]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dc6:	2207      	movs	r2, #7
 8000dc8:	401a      	ands	r2, r3
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	430a      	orrs	r2, r1
 8000dd0:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	68db      	ldr	r3, [r3, #12]
 8000dd8:	4a1c      	ldr	r2, [pc, #112]	; (8000e4c <HAL_ADC_Init+0x27c>)
 8000dda:	4013      	ands	r3, r2
 8000ddc:	68ba      	ldr	r2, [r7, #8]
 8000dde:	429a      	cmp	r2, r3
 8000de0:	d10b      	bne.n	8000dfa <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2200      	movs	r2, #0
 8000de6:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000dec:	2203      	movs	r2, #3
 8000dee:	4393      	bics	r3, r2
 8000df0:	2201      	movs	r2, #1
 8000df2:	431a      	orrs	r2, r3
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000df8:	e01c      	b.n	8000e34 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000dfe:	2212      	movs	r2, #18
 8000e00:	4393      	bics	r3, r2
 8000e02:	2210      	movs	r2, #16
 8000e04:	431a      	orrs	r2, r3
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e0e:	2201      	movs	r2, #1
 8000e10:	431a      	orrs	r2, r3
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8000e16:	230f      	movs	r3, #15
 8000e18:	18fb      	adds	r3, r7, r3
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000e1e:	e009      	b.n	8000e34 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e24:	2210      	movs	r2, #16
 8000e26:	431a      	orrs	r2, r3
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8000e2c:	230f      	movs	r3, #15
 8000e2e:	18fb      	adds	r3, r7, r3
 8000e30:	2201      	movs	r2, #1
 8000e32:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000e34:	230f      	movs	r3, #15
 8000e36:	18fb      	adds	r3, r7, r3
 8000e38:	781b      	ldrb	r3, [r3, #0]
}
 8000e3a:	0018      	movs	r0, r3
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	b004      	add	sp, #16
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	46c0      	nop			; (mov r8, r8)
 8000e44:	fffffefd 	.word	0xfffffefd
 8000e48:	fffe0219 	.word	0xfffe0219
 8000e4c:	833fffe7 	.word	0x833fffe7

08000e50 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e5a:	230f      	movs	r3, #15
 8000e5c:	18fb      	adds	r3, r7, r3
 8000e5e:	2200      	movs	r2, #0
 8000e60:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8000e62:	2300      	movs	r3, #0
 8000e64:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e6a:	2380      	movs	r3, #128	; 0x80
 8000e6c:	055b      	lsls	r3, r3, #21
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d011      	beq.n	8000e96 <HAL_ADC_ConfigChannel+0x46>
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d00d      	beq.n	8000e96 <HAL_ADC_ConfigChannel+0x46>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e7e:	2b02      	cmp	r3, #2
 8000e80:	d009      	beq.n	8000e96 <HAL_ADC_ConfigChannel+0x46>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e86:	2b03      	cmp	r3, #3
 8000e88:	d005      	beq.n	8000e96 <HAL_ADC_ConfigChannel+0x46>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e8e:	2b04      	cmp	r3, #4
 8000e90:	d001      	beq.n	8000e96 <HAL_ADC_ConfigChannel+0x46>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2234      	movs	r2, #52	; 0x34
 8000e9a:	5c9b      	ldrb	r3, [r3, r2]
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d101      	bne.n	8000ea4 <HAL_ADC_ConfigChannel+0x54>
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	e0bb      	b.n	800101c <HAL_ADC_ConfigChannel+0x1cc>
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2234      	movs	r2, #52	; 0x34
 8000ea8:	2101      	movs	r1, #1
 8000eaa:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	689b      	ldr	r3, [r3, #8]
 8000eb2:	2204      	movs	r2, #4
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	d000      	beq.n	8000eba <HAL_ADC_ConfigChannel+0x6a>
 8000eb8:	e09f      	b.n	8000ffa <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	4a59      	ldr	r2, [pc, #356]	; (8001024 <HAL_ADC_ConfigChannel+0x1d4>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d100      	bne.n	8000ec6 <HAL_ADC_ConfigChannel+0x76>
 8000ec4:	e077      	b.n	8000fb6 <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	409a      	lsls	r2, r3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	430a      	orrs	r2, r1
 8000eda:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ee0:	2380      	movs	r3, #128	; 0x80
 8000ee2:	055b      	lsls	r3, r3, #21
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	d037      	beq.n	8000f58 <HAL_ADC_ConfigChannel+0x108>
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d033      	beq.n	8000f58 <HAL_ADC_ConfigChannel+0x108>
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ef4:	2b02      	cmp	r3, #2
 8000ef6:	d02f      	beq.n	8000f58 <HAL_ADC_ConfigChannel+0x108>
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000efc:	2b03      	cmp	r3, #3
 8000efe:	d02b      	beq.n	8000f58 <HAL_ADC_ConfigChannel+0x108>
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f04:	2b04      	cmp	r3, #4
 8000f06:	d027      	beq.n	8000f58 <HAL_ADC_ConfigChannel+0x108>
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f0c:	2b05      	cmp	r3, #5
 8000f0e:	d023      	beq.n	8000f58 <HAL_ADC_ConfigChannel+0x108>
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f14:	2b06      	cmp	r3, #6
 8000f16:	d01f      	beq.n	8000f58 <HAL_ADC_ConfigChannel+0x108>
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f1c:	2b07      	cmp	r3, #7
 8000f1e:	d01b      	beq.n	8000f58 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	689a      	ldr	r2, [r3, #8]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	695b      	ldr	r3, [r3, #20]
 8000f2a:	2107      	movs	r1, #7
 8000f2c:	400b      	ands	r3, r1
 8000f2e:	429a      	cmp	r2, r3
 8000f30:	d012      	beq.n	8000f58 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	695a      	ldr	r2, [r3, #20]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	2107      	movs	r1, #7
 8000f3e:	438a      	bics	r2, r1
 8000f40:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	6959      	ldr	r1, [r3, #20]
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	689b      	ldr	r3, [r3, #8]
 8000f4c:	2207      	movs	r2, #7
 8000f4e:	401a      	ands	r2, r3
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	430a      	orrs	r2, r1
 8000f56:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2b10      	cmp	r3, #16
 8000f5e:	d003      	beq.n	8000f68 <HAL_ADC_ConfigChannel+0x118>
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	2b11      	cmp	r3, #17
 8000f66:	d152      	bne.n	800100e <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000f68:	4b2f      	ldr	r3, [pc, #188]	; (8001028 <HAL_ADC_ConfigChannel+0x1d8>)
 8000f6a:	6819      	ldr	r1, [r3, #0]
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2b10      	cmp	r3, #16
 8000f72:	d102      	bne.n	8000f7a <HAL_ADC_ConfigChannel+0x12a>
 8000f74:	2380      	movs	r3, #128	; 0x80
 8000f76:	041b      	lsls	r3, r3, #16
 8000f78:	e001      	b.n	8000f7e <HAL_ADC_ConfigChannel+0x12e>
 8000f7a:	2380      	movs	r3, #128	; 0x80
 8000f7c:	03db      	lsls	r3, r3, #15
 8000f7e:	4a2a      	ldr	r2, [pc, #168]	; (8001028 <HAL_ADC_ConfigChannel+0x1d8>)
 8000f80:	430b      	orrs	r3, r1
 8000f82:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	2b10      	cmp	r3, #16
 8000f8a:	d140      	bne.n	800100e <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000f8c:	4b27      	ldr	r3, [pc, #156]	; (800102c <HAL_ADC_ConfigChannel+0x1dc>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4927      	ldr	r1, [pc, #156]	; (8001030 <HAL_ADC_ConfigChannel+0x1e0>)
 8000f92:	0018      	movs	r0, r3
 8000f94:	f7ff f8b8 	bl	8000108 <__udivsi3>
 8000f98:	0003      	movs	r3, r0
 8000f9a:	001a      	movs	r2, r3
 8000f9c:	0013      	movs	r3, r2
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	189b      	adds	r3, r3, r2
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000fa6:	e002      	b.n	8000fae <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	3b01      	subs	r3, #1
 8000fac:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d1f9      	bne.n	8000fa8 <HAL_ADC_ConfigChannel+0x158>
 8000fb4:	e02b      	b.n	800100e <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2101      	movs	r1, #1
 8000fc2:	4099      	lsls	r1, r3
 8000fc4:	000b      	movs	r3, r1
 8000fc6:	43d9      	mvns	r1, r3
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	400a      	ands	r2, r1
 8000fce:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2b10      	cmp	r3, #16
 8000fd6:	d003      	beq.n	8000fe0 <HAL_ADC_ConfigChannel+0x190>
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	2b11      	cmp	r3, #17
 8000fde:	d116      	bne.n	800100e <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000fe0:	4b11      	ldr	r3, [pc, #68]	; (8001028 <HAL_ADC_ConfigChannel+0x1d8>)
 8000fe2:	6819      	ldr	r1, [r3, #0]
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	2b10      	cmp	r3, #16
 8000fea:	d101      	bne.n	8000ff0 <HAL_ADC_ConfigChannel+0x1a0>
 8000fec:	4a11      	ldr	r2, [pc, #68]	; (8001034 <HAL_ADC_ConfigChannel+0x1e4>)
 8000fee:	e000      	b.n	8000ff2 <HAL_ADC_ConfigChannel+0x1a2>
 8000ff0:	4a11      	ldr	r2, [pc, #68]	; (8001038 <HAL_ADC_ConfigChannel+0x1e8>)
 8000ff2:	4b0d      	ldr	r3, [pc, #52]	; (8001028 <HAL_ADC_ConfigChannel+0x1d8>)
 8000ff4:	400a      	ands	r2, r1
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	e009      	b.n	800100e <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ffe:	2220      	movs	r2, #32
 8001000:	431a      	orrs	r2, r3
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001006:	230f      	movs	r3, #15
 8001008:	18fb      	adds	r3, r7, r3
 800100a:	2201      	movs	r2, #1
 800100c:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2234      	movs	r2, #52	; 0x34
 8001012:	2100      	movs	r1, #0
 8001014:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001016:	230f      	movs	r3, #15
 8001018:	18fb      	adds	r3, r7, r3
 800101a:	781b      	ldrb	r3, [r3, #0]
}
 800101c:	0018      	movs	r0, r3
 800101e:	46bd      	mov	sp, r7
 8001020:	b004      	add	sp, #16
 8001022:	bd80      	pop	{r7, pc}
 8001024:	00001001 	.word	0x00001001
 8001028:	40012708 	.word	0x40012708
 800102c:	20000000 	.word	0x20000000
 8001030:	000f4240 	.word	0x000f4240
 8001034:	ff7fffff 	.word	0xff7fffff
 8001038:	ffbfffff 	.word	0xffbfffff

0800103c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800103c:	b590      	push	{r4, r7, lr}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	0002      	movs	r2, r0
 8001044:	6039      	str	r1, [r7, #0]
 8001046:	1dfb      	adds	r3, r7, #7
 8001048:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800104a:	1dfb      	adds	r3, r7, #7
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	2b7f      	cmp	r3, #127	; 0x7f
 8001050:	d828      	bhi.n	80010a4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001052:	4a2f      	ldr	r2, [pc, #188]	; (8001110 <__NVIC_SetPriority+0xd4>)
 8001054:	1dfb      	adds	r3, r7, #7
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	b25b      	sxtb	r3, r3
 800105a:	089b      	lsrs	r3, r3, #2
 800105c:	33c0      	adds	r3, #192	; 0xc0
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	589b      	ldr	r3, [r3, r2]
 8001062:	1dfa      	adds	r2, r7, #7
 8001064:	7812      	ldrb	r2, [r2, #0]
 8001066:	0011      	movs	r1, r2
 8001068:	2203      	movs	r2, #3
 800106a:	400a      	ands	r2, r1
 800106c:	00d2      	lsls	r2, r2, #3
 800106e:	21ff      	movs	r1, #255	; 0xff
 8001070:	4091      	lsls	r1, r2
 8001072:	000a      	movs	r2, r1
 8001074:	43d2      	mvns	r2, r2
 8001076:	401a      	ands	r2, r3
 8001078:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	019b      	lsls	r3, r3, #6
 800107e:	22ff      	movs	r2, #255	; 0xff
 8001080:	401a      	ands	r2, r3
 8001082:	1dfb      	adds	r3, r7, #7
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	0018      	movs	r0, r3
 8001088:	2303      	movs	r3, #3
 800108a:	4003      	ands	r3, r0
 800108c:	00db      	lsls	r3, r3, #3
 800108e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001090:	481f      	ldr	r0, [pc, #124]	; (8001110 <__NVIC_SetPriority+0xd4>)
 8001092:	1dfb      	adds	r3, r7, #7
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	b25b      	sxtb	r3, r3
 8001098:	089b      	lsrs	r3, r3, #2
 800109a:	430a      	orrs	r2, r1
 800109c:	33c0      	adds	r3, #192	; 0xc0
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80010a2:	e031      	b.n	8001108 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010a4:	4a1b      	ldr	r2, [pc, #108]	; (8001114 <__NVIC_SetPriority+0xd8>)
 80010a6:	1dfb      	adds	r3, r7, #7
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	0019      	movs	r1, r3
 80010ac:	230f      	movs	r3, #15
 80010ae:	400b      	ands	r3, r1
 80010b0:	3b08      	subs	r3, #8
 80010b2:	089b      	lsrs	r3, r3, #2
 80010b4:	3306      	adds	r3, #6
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	18d3      	adds	r3, r2, r3
 80010ba:	3304      	adds	r3, #4
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	1dfa      	adds	r2, r7, #7
 80010c0:	7812      	ldrb	r2, [r2, #0]
 80010c2:	0011      	movs	r1, r2
 80010c4:	2203      	movs	r2, #3
 80010c6:	400a      	ands	r2, r1
 80010c8:	00d2      	lsls	r2, r2, #3
 80010ca:	21ff      	movs	r1, #255	; 0xff
 80010cc:	4091      	lsls	r1, r2
 80010ce:	000a      	movs	r2, r1
 80010d0:	43d2      	mvns	r2, r2
 80010d2:	401a      	ands	r2, r3
 80010d4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	019b      	lsls	r3, r3, #6
 80010da:	22ff      	movs	r2, #255	; 0xff
 80010dc:	401a      	ands	r2, r3
 80010de:	1dfb      	adds	r3, r7, #7
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	0018      	movs	r0, r3
 80010e4:	2303      	movs	r3, #3
 80010e6:	4003      	ands	r3, r0
 80010e8:	00db      	lsls	r3, r3, #3
 80010ea:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010ec:	4809      	ldr	r0, [pc, #36]	; (8001114 <__NVIC_SetPriority+0xd8>)
 80010ee:	1dfb      	adds	r3, r7, #7
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	001c      	movs	r4, r3
 80010f4:	230f      	movs	r3, #15
 80010f6:	4023      	ands	r3, r4
 80010f8:	3b08      	subs	r3, #8
 80010fa:	089b      	lsrs	r3, r3, #2
 80010fc:	430a      	orrs	r2, r1
 80010fe:	3306      	adds	r3, #6
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	18c3      	adds	r3, r0, r3
 8001104:	3304      	adds	r3, #4
 8001106:	601a      	str	r2, [r3, #0]
}
 8001108:	46c0      	nop			; (mov r8, r8)
 800110a:	46bd      	mov	sp, r7
 800110c:	b003      	add	sp, #12
 800110e:	bd90      	pop	{r4, r7, pc}
 8001110:	e000e100 	.word	0xe000e100
 8001114:	e000ed00 	.word	0xe000ed00

08001118 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	1e5a      	subs	r2, r3, #1
 8001124:	2380      	movs	r3, #128	; 0x80
 8001126:	045b      	lsls	r3, r3, #17
 8001128:	429a      	cmp	r2, r3
 800112a:	d301      	bcc.n	8001130 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800112c:	2301      	movs	r3, #1
 800112e:	e010      	b.n	8001152 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001130:	4b0a      	ldr	r3, [pc, #40]	; (800115c <SysTick_Config+0x44>)
 8001132:	687a      	ldr	r2, [r7, #4]
 8001134:	3a01      	subs	r2, #1
 8001136:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001138:	2301      	movs	r3, #1
 800113a:	425b      	negs	r3, r3
 800113c:	2103      	movs	r1, #3
 800113e:	0018      	movs	r0, r3
 8001140:	f7ff ff7c 	bl	800103c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001144:	4b05      	ldr	r3, [pc, #20]	; (800115c <SysTick_Config+0x44>)
 8001146:	2200      	movs	r2, #0
 8001148:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800114a:	4b04      	ldr	r3, [pc, #16]	; (800115c <SysTick_Config+0x44>)
 800114c:	2207      	movs	r2, #7
 800114e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001150:	2300      	movs	r3, #0
}
 8001152:	0018      	movs	r0, r3
 8001154:	46bd      	mov	sp, r7
 8001156:	b002      	add	sp, #8
 8001158:	bd80      	pop	{r7, pc}
 800115a:	46c0      	nop			; (mov r8, r8)
 800115c:	e000e010 	.word	0xe000e010

08001160 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	60b9      	str	r1, [r7, #8]
 8001168:	607a      	str	r2, [r7, #4]
 800116a:	210f      	movs	r1, #15
 800116c:	187b      	adds	r3, r7, r1
 800116e:	1c02      	adds	r2, r0, #0
 8001170:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001172:	68ba      	ldr	r2, [r7, #8]
 8001174:	187b      	adds	r3, r7, r1
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	b25b      	sxtb	r3, r3
 800117a:	0011      	movs	r1, r2
 800117c:	0018      	movs	r0, r3
 800117e:	f7ff ff5d 	bl	800103c <__NVIC_SetPriority>
}
 8001182:	46c0      	nop			; (mov r8, r8)
 8001184:	46bd      	mov	sp, r7
 8001186:	b004      	add	sp, #16
 8001188:	bd80      	pop	{r7, pc}

0800118a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800118a:	b580      	push	{r7, lr}
 800118c:	b082      	sub	sp, #8
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	0018      	movs	r0, r3
 8001196:	f7ff ffbf 	bl	8001118 <SysTick_Config>
 800119a:	0003      	movs	r3, r0
}
 800119c:	0018      	movs	r0, r3
 800119e:	46bd      	mov	sp, r7
 80011a0:	b002      	add	sp, #8
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b086      	sub	sp, #24
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011ae:	2300      	movs	r3, #0
 80011b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011b2:	e14f      	b.n	8001454 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2101      	movs	r1, #1
 80011ba:	697a      	ldr	r2, [r7, #20]
 80011bc:	4091      	lsls	r1, r2
 80011be:	000a      	movs	r2, r1
 80011c0:	4013      	ands	r3, r2
 80011c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d100      	bne.n	80011cc <HAL_GPIO_Init+0x28>
 80011ca:	e140      	b.n	800144e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	2203      	movs	r2, #3
 80011d2:	4013      	ands	r3, r2
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d005      	beq.n	80011e4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	2203      	movs	r2, #3
 80011de:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80011e0:	2b02      	cmp	r3, #2
 80011e2:	d130      	bne.n	8001246 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	2203      	movs	r2, #3
 80011f0:	409a      	lsls	r2, r3
 80011f2:	0013      	movs	r3, r2
 80011f4:	43da      	mvns	r2, r3
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	4013      	ands	r3, r2
 80011fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	68da      	ldr	r2, [r3, #12]
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	409a      	lsls	r2, r3
 8001206:	0013      	movs	r3, r2
 8001208:	693a      	ldr	r2, [r7, #16]
 800120a:	4313      	orrs	r3, r2
 800120c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	693a      	ldr	r2, [r7, #16]
 8001212:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800121a:	2201      	movs	r2, #1
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	409a      	lsls	r2, r3
 8001220:	0013      	movs	r3, r2
 8001222:	43da      	mvns	r2, r3
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	4013      	ands	r3, r2
 8001228:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	091b      	lsrs	r3, r3, #4
 8001230:	2201      	movs	r2, #1
 8001232:	401a      	ands	r2, r3
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	409a      	lsls	r2, r3
 8001238:	0013      	movs	r3, r2
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	4313      	orrs	r3, r2
 800123e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	2203      	movs	r2, #3
 800124c:	4013      	ands	r3, r2
 800124e:	2b03      	cmp	r3, #3
 8001250:	d017      	beq.n	8001282 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	68db      	ldr	r3, [r3, #12]
 8001256:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	2203      	movs	r2, #3
 800125e:	409a      	lsls	r2, r3
 8001260:	0013      	movs	r3, r2
 8001262:	43da      	mvns	r2, r3
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	4013      	ands	r3, r2
 8001268:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	689a      	ldr	r2, [r3, #8]
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	409a      	lsls	r2, r3
 8001274:	0013      	movs	r3, r2
 8001276:	693a      	ldr	r2, [r7, #16]
 8001278:	4313      	orrs	r3, r2
 800127a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	693a      	ldr	r2, [r7, #16]
 8001280:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	2203      	movs	r2, #3
 8001288:	4013      	ands	r3, r2
 800128a:	2b02      	cmp	r3, #2
 800128c:	d123      	bne.n	80012d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	08da      	lsrs	r2, r3, #3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	3208      	adds	r2, #8
 8001296:	0092      	lsls	r2, r2, #2
 8001298:	58d3      	ldr	r3, [r2, r3]
 800129a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	2207      	movs	r2, #7
 80012a0:	4013      	ands	r3, r2
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	220f      	movs	r2, #15
 80012a6:	409a      	lsls	r2, r3
 80012a8:	0013      	movs	r3, r2
 80012aa:	43da      	mvns	r2, r3
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	4013      	ands	r3, r2
 80012b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	691a      	ldr	r2, [r3, #16]
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	2107      	movs	r1, #7
 80012ba:	400b      	ands	r3, r1
 80012bc:	009b      	lsls	r3, r3, #2
 80012be:	409a      	lsls	r2, r3
 80012c0:	0013      	movs	r3, r2
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	08da      	lsrs	r2, r3, #3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	3208      	adds	r2, #8
 80012d0:	0092      	lsls	r2, r2, #2
 80012d2:	6939      	ldr	r1, [r7, #16]
 80012d4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	2203      	movs	r2, #3
 80012e2:	409a      	lsls	r2, r3
 80012e4:	0013      	movs	r3, r2
 80012e6:	43da      	mvns	r2, r3
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	4013      	ands	r3, r2
 80012ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	2203      	movs	r2, #3
 80012f4:	401a      	ands	r2, r3
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	409a      	lsls	r2, r3
 80012fc:	0013      	movs	r3, r2
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	4313      	orrs	r3, r2
 8001302:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685a      	ldr	r2, [r3, #4]
 800130e:	23c0      	movs	r3, #192	; 0xc0
 8001310:	029b      	lsls	r3, r3, #10
 8001312:	4013      	ands	r3, r2
 8001314:	d100      	bne.n	8001318 <HAL_GPIO_Init+0x174>
 8001316:	e09a      	b.n	800144e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001318:	4b54      	ldr	r3, [pc, #336]	; (800146c <HAL_GPIO_Init+0x2c8>)
 800131a:	699a      	ldr	r2, [r3, #24]
 800131c:	4b53      	ldr	r3, [pc, #332]	; (800146c <HAL_GPIO_Init+0x2c8>)
 800131e:	2101      	movs	r1, #1
 8001320:	430a      	orrs	r2, r1
 8001322:	619a      	str	r2, [r3, #24]
 8001324:	4b51      	ldr	r3, [pc, #324]	; (800146c <HAL_GPIO_Init+0x2c8>)
 8001326:	699b      	ldr	r3, [r3, #24]
 8001328:	2201      	movs	r2, #1
 800132a:	4013      	ands	r3, r2
 800132c:	60bb      	str	r3, [r7, #8]
 800132e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001330:	4a4f      	ldr	r2, [pc, #316]	; (8001470 <HAL_GPIO_Init+0x2cc>)
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	089b      	lsrs	r3, r3, #2
 8001336:	3302      	adds	r3, #2
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	589b      	ldr	r3, [r3, r2]
 800133c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	2203      	movs	r2, #3
 8001342:	4013      	ands	r3, r2
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	220f      	movs	r2, #15
 8001348:	409a      	lsls	r2, r3
 800134a:	0013      	movs	r3, r2
 800134c:	43da      	mvns	r2, r3
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	4013      	ands	r3, r2
 8001352:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001354:	687a      	ldr	r2, [r7, #4]
 8001356:	2390      	movs	r3, #144	; 0x90
 8001358:	05db      	lsls	r3, r3, #23
 800135a:	429a      	cmp	r2, r3
 800135c:	d013      	beq.n	8001386 <HAL_GPIO_Init+0x1e2>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a44      	ldr	r2, [pc, #272]	; (8001474 <HAL_GPIO_Init+0x2d0>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d00d      	beq.n	8001382 <HAL_GPIO_Init+0x1de>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a43      	ldr	r2, [pc, #268]	; (8001478 <HAL_GPIO_Init+0x2d4>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d007      	beq.n	800137e <HAL_GPIO_Init+0x1da>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4a42      	ldr	r2, [pc, #264]	; (800147c <HAL_GPIO_Init+0x2d8>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d101      	bne.n	800137a <HAL_GPIO_Init+0x1d6>
 8001376:	2303      	movs	r3, #3
 8001378:	e006      	b.n	8001388 <HAL_GPIO_Init+0x1e4>
 800137a:	2305      	movs	r3, #5
 800137c:	e004      	b.n	8001388 <HAL_GPIO_Init+0x1e4>
 800137e:	2302      	movs	r3, #2
 8001380:	e002      	b.n	8001388 <HAL_GPIO_Init+0x1e4>
 8001382:	2301      	movs	r3, #1
 8001384:	e000      	b.n	8001388 <HAL_GPIO_Init+0x1e4>
 8001386:	2300      	movs	r3, #0
 8001388:	697a      	ldr	r2, [r7, #20]
 800138a:	2103      	movs	r1, #3
 800138c:	400a      	ands	r2, r1
 800138e:	0092      	lsls	r2, r2, #2
 8001390:	4093      	lsls	r3, r2
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	4313      	orrs	r3, r2
 8001396:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001398:	4935      	ldr	r1, [pc, #212]	; (8001470 <HAL_GPIO_Init+0x2cc>)
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	089b      	lsrs	r3, r3, #2
 800139e:	3302      	adds	r3, #2
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013a6:	4b36      	ldr	r3, [pc, #216]	; (8001480 <HAL_GPIO_Init+0x2dc>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	43da      	mvns	r2, r3
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	4013      	ands	r3, r2
 80013b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685a      	ldr	r2, [r3, #4]
 80013ba:	2380      	movs	r3, #128	; 0x80
 80013bc:	025b      	lsls	r3, r3, #9
 80013be:	4013      	ands	r3, r2
 80013c0:	d003      	beq.n	80013ca <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80013ca:	4b2d      	ldr	r3, [pc, #180]	; (8001480 <HAL_GPIO_Init+0x2dc>)
 80013cc:	693a      	ldr	r2, [r7, #16]
 80013ce:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80013d0:	4b2b      	ldr	r3, [pc, #172]	; (8001480 <HAL_GPIO_Init+0x2dc>)
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	43da      	mvns	r2, r3
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	4013      	ands	r3, r2
 80013de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685a      	ldr	r2, [r3, #4]
 80013e4:	2380      	movs	r3, #128	; 0x80
 80013e6:	029b      	lsls	r3, r3, #10
 80013e8:	4013      	ands	r3, r2
 80013ea:	d003      	beq.n	80013f4 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80013ec:	693a      	ldr	r2, [r7, #16]
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80013f4:	4b22      	ldr	r3, [pc, #136]	; (8001480 <HAL_GPIO_Init+0x2dc>)
 80013f6:	693a      	ldr	r2, [r7, #16]
 80013f8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013fa:	4b21      	ldr	r3, [pc, #132]	; (8001480 <HAL_GPIO_Init+0x2dc>)
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	43da      	mvns	r2, r3
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	4013      	ands	r3, r2
 8001408:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685a      	ldr	r2, [r3, #4]
 800140e:	2380      	movs	r3, #128	; 0x80
 8001410:	035b      	lsls	r3, r3, #13
 8001412:	4013      	ands	r3, r2
 8001414:	d003      	beq.n	800141e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	4313      	orrs	r3, r2
 800141c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800141e:	4b18      	ldr	r3, [pc, #96]	; (8001480 <HAL_GPIO_Init+0x2dc>)
 8001420:	693a      	ldr	r2, [r7, #16]
 8001422:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001424:	4b16      	ldr	r3, [pc, #88]	; (8001480 <HAL_GPIO_Init+0x2dc>)
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	43da      	mvns	r2, r3
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	4013      	ands	r3, r2
 8001432:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685a      	ldr	r2, [r3, #4]
 8001438:	2380      	movs	r3, #128	; 0x80
 800143a:	039b      	lsls	r3, r3, #14
 800143c:	4013      	ands	r3, r2
 800143e:	d003      	beq.n	8001448 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001440:	693a      	ldr	r2, [r7, #16]
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	4313      	orrs	r3, r2
 8001446:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001448:	4b0d      	ldr	r3, [pc, #52]	; (8001480 <HAL_GPIO_Init+0x2dc>)
 800144a:	693a      	ldr	r2, [r7, #16]
 800144c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	3301      	adds	r3, #1
 8001452:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	40da      	lsrs	r2, r3
 800145c:	1e13      	subs	r3, r2, #0
 800145e:	d000      	beq.n	8001462 <HAL_GPIO_Init+0x2be>
 8001460:	e6a8      	b.n	80011b4 <HAL_GPIO_Init+0x10>
  } 
}
 8001462:	46c0      	nop			; (mov r8, r8)
 8001464:	46c0      	nop			; (mov r8, r8)
 8001466:	46bd      	mov	sp, r7
 8001468:	b006      	add	sp, #24
 800146a:	bd80      	pop	{r7, pc}
 800146c:	40021000 	.word	0x40021000
 8001470:	40010000 	.word	0x40010000
 8001474:	48000400 	.word	0x48000400
 8001478:	48000800 	.word	0x48000800
 800147c:	48000c00 	.word	0x48000c00
 8001480:	40010400 	.word	0x40010400

08001484 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	0008      	movs	r0, r1
 800148e:	0011      	movs	r1, r2
 8001490:	1cbb      	adds	r3, r7, #2
 8001492:	1c02      	adds	r2, r0, #0
 8001494:	801a      	strh	r2, [r3, #0]
 8001496:	1c7b      	adds	r3, r7, #1
 8001498:	1c0a      	adds	r2, r1, #0
 800149a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800149c:	1c7b      	adds	r3, r7, #1
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d004      	beq.n	80014ae <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014a4:	1cbb      	adds	r3, r7, #2
 80014a6:	881a      	ldrh	r2, [r3, #0]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80014ac:	e003      	b.n	80014b6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014ae:	1cbb      	adds	r3, r7, #2
 80014b0:	881a      	ldrh	r2, [r3, #0]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80014b6:	46c0      	nop			; (mov r8, r8)
 80014b8:	46bd      	mov	sp, r7
 80014ba:	b002      	add	sp, #8
 80014bc:	bd80      	pop	{r7, pc}
	...

080014c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d101      	bne.n	80014d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e082      	b.n	80015d8 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2241      	movs	r2, #65	; 0x41
 80014d6:	5c9b      	ldrb	r3, [r3, r2]
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d107      	bne.n	80014ee <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2240      	movs	r2, #64	; 0x40
 80014e2:	2100      	movs	r1, #0
 80014e4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	0018      	movs	r0, r3
 80014ea:	f7ff f9b9 	bl	8000860 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2241      	movs	r2, #65	; 0x41
 80014f2:	2124      	movs	r1, #36	; 0x24
 80014f4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2101      	movs	r1, #1
 8001502:	438a      	bics	r2, r1
 8001504:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	685a      	ldr	r2, [r3, #4]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4934      	ldr	r1, [pc, #208]	; (80015e0 <HAL_I2C_Init+0x120>)
 8001510:	400a      	ands	r2, r1
 8001512:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	689a      	ldr	r2, [r3, #8]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4931      	ldr	r1, [pc, #196]	; (80015e4 <HAL_I2C_Init+0x124>)
 8001520:	400a      	ands	r2, r1
 8001522:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	2b01      	cmp	r3, #1
 800152a:	d108      	bne.n	800153e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	689a      	ldr	r2, [r3, #8]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2180      	movs	r1, #128	; 0x80
 8001536:	0209      	lsls	r1, r1, #8
 8001538:	430a      	orrs	r2, r1
 800153a:	609a      	str	r2, [r3, #8]
 800153c:	e007      	b.n	800154e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	689a      	ldr	r2, [r3, #8]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	2184      	movs	r1, #132	; 0x84
 8001548:	0209      	lsls	r1, r1, #8
 800154a:	430a      	orrs	r2, r1
 800154c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	68db      	ldr	r3, [r3, #12]
 8001552:	2b02      	cmp	r3, #2
 8001554:	d104      	bne.n	8001560 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2280      	movs	r2, #128	; 0x80
 800155c:	0112      	lsls	r2, r2, #4
 800155e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	685a      	ldr	r2, [r3, #4]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	491f      	ldr	r1, [pc, #124]	; (80015e8 <HAL_I2C_Init+0x128>)
 800156c:	430a      	orrs	r2, r1
 800156e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	68da      	ldr	r2, [r3, #12]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	491a      	ldr	r1, [pc, #104]	; (80015e4 <HAL_I2C_Init+0x124>)
 800157c:	400a      	ands	r2, r1
 800157e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	691a      	ldr	r2, [r3, #16]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	695b      	ldr	r3, [r3, #20]
 8001588:	431a      	orrs	r2, r3
 800158a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	699b      	ldr	r3, [r3, #24]
 8001590:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	430a      	orrs	r2, r1
 8001598:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	69d9      	ldr	r1, [r3, #28]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6a1a      	ldr	r2, [r3, #32]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	430a      	orrs	r2, r1
 80015a8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2101      	movs	r1, #1
 80015b6:	430a      	orrs	r2, r1
 80015b8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2200      	movs	r2, #0
 80015be:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2241      	movs	r2, #65	; 0x41
 80015c4:	2120      	movs	r1, #32
 80015c6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2200      	movs	r2, #0
 80015cc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2242      	movs	r2, #66	; 0x42
 80015d2:	2100      	movs	r1, #0
 80015d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80015d6:	2300      	movs	r3, #0
}
 80015d8:	0018      	movs	r0, r3
 80015da:	46bd      	mov	sp, r7
 80015dc:	b002      	add	sp, #8
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	f0ffffff 	.word	0xf0ffffff
 80015e4:	ffff7fff 	.word	0xffff7fff
 80015e8:	02008000 	.word	0x02008000

080015ec <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80015ec:	b590      	push	{r4, r7, lr}
 80015ee:	b089      	sub	sp, #36	; 0x24
 80015f0:	af02      	add	r7, sp, #8
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	000c      	movs	r4, r1
 80015f6:	0010      	movs	r0, r2
 80015f8:	0019      	movs	r1, r3
 80015fa:	230a      	movs	r3, #10
 80015fc:	18fb      	adds	r3, r7, r3
 80015fe:	1c22      	adds	r2, r4, #0
 8001600:	801a      	strh	r2, [r3, #0]
 8001602:	2308      	movs	r3, #8
 8001604:	18fb      	adds	r3, r7, r3
 8001606:	1c02      	adds	r2, r0, #0
 8001608:	801a      	strh	r2, [r3, #0]
 800160a:	1dbb      	adds	r3, r7, #6
 800160c:	1c0a      	adds	r2, r1, #0
 800160e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	2241      	movs	r2, #65	; 0x41
 8001614:	5c9b      	ldrb	r3, [r3, r2]
 8001616:	b2db      	uxtb	r3, r3
 8001618:	2b20      	cmp	r3, #32
 800161a:	d000      	beq.n	800161e <HAL_I2C_Mem_Write+0x32>
 800161c:	e10c      	b.n	8001838 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 800161e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001620:	2b00      	cmp	r3, #0
 8001622:	d004      	beq.n	800162e <HAL_I2C_Mem_Write+0x42>
 8001624:	232c      	movs	r3, #44	; 0x2c
 8001626:	18fb      	adds	r3, r7, r3
 8001628:	881b      	ldrh	r3, [r3, #0]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d105      	bne.n	800163a <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	2280      	movs	r2, #128	; 0x80
 8001632:	0092      	lsls	r2, r2, #2
 8001634:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e0ff      	b.n	800183a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	2240      	movs	r2, #64	; 0x40
 800163e:	5c9b      	ldrb	r3, [r3, r2]
 8001640:	2b01      	cmp	r3, #1
 8001642:	d101      	bne.n	8001648 <HAL_I2C_Mem_Write+0x5c>
 8001644:	2302      	movs	r3, #2
 8001646:	e0f8      	b.n	800183a <HAL_I2C_Mem_Write+0x24e>
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	2240      	movs	r2, #64	; 0x40
 800164c:	2101      	movs	r1, #1
 800164e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001650:	f7ff fa90 	bl	8000b74 <HAL_GetTick>
 8001654:	0003      	movs	r3, r0
 8001656:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001658:	2380      	movs	r3, #128	; 0x80
 800165a:	0219      	lsls	r1, r3, #8
 800165c:	68f8      	ldr	r0, [r7, #12]
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	9300      	str	r3, [sp, #0]
 8001662:	2319      	movs	r3, #25
 8001664:	2201      	movs	r2, #1
 8001666:	f000 f975 	bl	8001954 <I2C_WaitOnFlagUntilTimeout>
 800166a:	1e03      	subs	r3, r0, #0
 800166c:	d001      	beq.n	8001672 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e0e3      	b.n	800183a <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	2241      	movs	r2, #65	; 0x41
 8001676:	2121      	movs	r1, #33	; 0x21
 8001678:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	2242      	movs	r2, #66	; 0x42
 800167e:	2140      	movs	r1, #64	; 0x40
 8001680:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	2200      	movs	r2, #0
 8001686:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800168c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	222c      	movs	r2, #44	; 0x2c
 8001692:	18ba      	adds	r2, r7, r2
 8001694:	8812      	ldrh	r2, [r2, #0]
 8001696:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	2200      	movs	r2, #0
 800169c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800169e:	1dbb      	adds	r3, r7, #6
 80016a0:	881c      	ldrh	r4, [r3, #0]
 80016a2:	2308      	movs	r3, #8
 80016a4:	18fb      	adds	r3, r7, r3
 80016a6:	881a      	ldrh	r2, [r3, #0]
 80016a8:	230a      	movs	r3, #10
 80016aa:	18fb      	adds	r3, r7, r3
 80016ac:	8819      	ldrh	r1, [r3, #0]
 80016ae:	68f8      	ldr	r0, [r7, #12]
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	9301      	str	r3, [sp, #4]
 80016b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016b6:	9300      	str	r3, [sp, #0]
 80016b8:	0023      	movs	r3, r4
 80016ba:	f000 f8c5 	bl	8001848 <I2C_RequestMemoryWrite>
 80016be:	1e03      	subs	r3, r0, #0
 80016c0:	d005      	beq.n	80016ce <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	2240      	movs	r2, #64	; 0x40
 80016c6:	2100      	movs	r1, #0
 80016c8:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e0b5      	b.n	800183a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	2bff      	cmp	r3, #255	; 0xff
 80016d6:	d911      	bls.n	80016fc <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	22ff      	movs	r2, #255	; 0xff
 80016dc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016e2:	b2da      	uxtb	r2, r3
 80016e4:	2380      	movs	r3, #128	; 0x80
 80016e6:	045c      	lsls	r4, r3, #17
 80016e8:	230a      	movs	r3, #10
 80016ea:	18fb      	adds	r3, r7, r3
 80016ec:	8819      	ldrh	r1, [r3, #0]
 80016ee:	68f8      	ldr	r0, [r7, #12]
 80016f0:	2300      	movs	r3, #0
 80016f2:	9300      	str	r3, [sp, #0]
 80016f4:	0023      	movs	r3, r4
 80016f6:	f000 fa61 	bl	8001bbc <I2C_TransferConfig>
 80016fa:	e012      	b.n	8001722 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001700:	b29a      	uxth	r2, r3
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800170a:	b2da      	uxtb	r2, r3
 800170c:	2380      	movs	r3, #128	; 0x80
 800170e:	049c      	lsls	r4, r3, #18
 8001710:	230a      	movs	r3, #10
 8001712:	18fb      	adds	r3, r7, r3
 8001714:	8819      	ldrh	r1, [r3, #0]
 8001716:	68f8      	ldr	r0, [r7, #12]
 8001718:	2300      	movs	r3, #0
 800171a:	9300      	str	r3, [sp, #0]
 800171c:	0023      	movs	r3, r4
 800171e:	f000 fa4d 	bl	8001bbc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001722:	697a      	ldr	r2, [r7, #20]
 8001724:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	0018      	movs	r0, r3
 800172a:	f000 f952 	bl	80019d2 <I2C_WaitOnTXISFlagUntilTimeout>
 800172e:	1e03      	subs	r3, r0, #0
 8001730:	d001      	beq.n	8001736 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e081      	b.n	800183a <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173a:	781a      	ldrb	r2, [r3, #0]
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001746:	1c5a      	adds	r2, r3, #1
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001750:	b29b      	uxth	r3, r3
 8001752:	3b01      	subs	r3, #1
 8001754:	b29a      	uxth	r2, r3
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800175e:	3b01      	subs	r3, #1
 8001760:	b29a      	uxth	r2, r3
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800176a:	b29b      	uxth	r3, r3
 800176c:	2b00      	cmp	r3, #0
 800176e:	d03a      	beq.n	80017e6 <HAL_I2C_Mem_Write+0x1fa>
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001774:	2b00      	cmp	r3, #0
 8001776:	d136      	bne.n	80017e6 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001778:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800177a:	68f8      	ldr	r0, [r7, #12]
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	9300      	str	r3, [sp, #0]
 8001780:	0013      	movs	r3, r2
 8001782:	2200      	movs	r2, #0
 8001784:	2180      	movs	r1, #128	; 0x80
 8001786:	f000 f8e5 	bl	8001954 <I2C_WaitOnFlagUntilTimeout>
 800178a:	1e03      	subs	r3, r0, #0
 800178c:	d001      	beq.n	8001792 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e053      	b.n	800183a <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001796:	b29b      	uxth	r3, r3
 8001798:	2bff      	cmp	r3, #255	; 0xff
 800179a:	d911      	bls.n	80017c0 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	22ff      	movs	r2, #255	; 0xff
 80017a0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017a6:	b2da      	uxtb	r2, r3
 80017a8:	2380      	movs	r3, #128	; 0x80
 80017aa:	045c      	lsls	r4, r3, #17
 80017ac:	230a      	movs	r3, #10
 80017ae:	18fb      	adds	r3, r7, r3
 80017b0:	8819      	ldrh	r1, [r3, #0]
 80017b2:	68f8      	ldr	r0, [r7, #12]
 80017b4:	2300      	movs	r3, #0
 80017b6:	9300      	str	r3, [sp, #0]
 80017b8:	0023      	movs	r3, r4
 80017ba:	f000 f9ff 	bl	8001bbc <I2C_TransferConfig>
 80017be:	e012      	b.n	80017e6 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017c4:	b29a      	uxth	r2, r3
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017ce:	b2da      	uxtb	r2, r3
 80017d0:	2380      	movs	r3, #128	; 0x80
 80017d2:	049c      	lsls	r4, r3, #18
 80017d4:	230a      	movs	r3, #10
 80017d6:	18fb      	adds	r3, r7, r3
 80017d8:	8819      	ldrh	r1, [r3, #0]
 80017da:	68f8      	ldr	r0, [r7, #12]
 80017dc:	2300      	movs	r3, #0
 80017de:	9300      	str	r3, [sp, #0]
 80017e0:	0023      	movs	r3, r4
 80017e2:	f000 f9eb 	bl	8001bbc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017ea:	b29b      	uxth	r3, r3
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d198      	bne.n	8001722 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017f0:	697a      	ldr	r2, [r7, #20]
 80017f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	0018      	movs	r0, r3
 80017f8:	f000 f92a 	bl	8001a50 <I2C_WaitOnSTOPFlagUntilTimeout>
 80017fc:	1e03      	subs	r3, r0, #0
 80017fe:	d001      	beq.n	8001804 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	e01a      	b.n	800183a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2220      	movs	r2, #32
 800180a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	685a      	ldr	r2, [r3, #4]
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	490b      	ldr	r1, [pc, #44]	; (8001844 <HAL_I2C_Mem_Write+0x258>)
 8001818:	400a      	ands	r2, r1
 800181a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	2241      	movs	r2, #65	; 0x41
 8001820:	2120      	movs	r1, #32
 8001822:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	2242      	movs	r2, #66	; 0x42
 8001828:	2100      	movs	r1, #0
 800182a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	2240      	movs	r2, #64	; 0x40
 8001830:	2100      	movs	r1, #0
 8001832:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001834:	2300      	movs	r3, #0
 8001836:	e000      	b.n	800183a <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8001838:	2302      	movs	r3, #2
  }
}
 800183a:	0018      	movs	r0, r3
 800183c:	46bd      	mov	sp, r7
 800183e:	b007      	add	sp, #28
 8001840:	bd90      	pop	{r4, r7, pc}
 8001842:	46c0      	nop			; (mov r8, r8)
 8001844:	fe00e800 	.word	0xfe00e800

08001848 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001848:	b5b0      	push	{r4, r5, r7, lr}
 800184a:	b086      	sub	sp, #24
 800184c:	af02      	add	r7, sp, #8
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	000c      	movs	r4, r1
 8001852:	0010      	movs	r0, r2
 8001854:	0019      	movs	r1, r3
 8001856:	250a      	movs	r5, #10
 8001858:	197b      	adds	r3, r7, r5
 800185a:	1c22      	adds	r2, r4, #0
 800185c:	801a      	strh	r2, [r3, #0]
 800185e:	2308      	movs	r3, #8
 8001860:	18fb      	adds	r3, r7, r3
 8001862:	1c02      	adds	r2, r0, #0
 8001864:	801a      	strh	r2, [r3, #0]
 8001866:	1dbb      	adds	r3, r7, #6
 8001868:	1c0a      	adds	r2, r1, #0
 800186a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800186c:	1dbb      	adds	r3, r7, #6
 800186e:	881b      	ldrh	r3, [r3, #0]
 8001870:	b2da      	uxtb	r2, r3
 8001872:	2380      	movs	r3, #128	; 0x80
 8001874:	045c      	lsls	r4, r3, #17
 8001876:	197b      	adds	r3, r7, r5
 8001878:	8819      	ldrh	r1, [r3, #0]
 800187a:	68f8      	ldr	r0, [r7, #12]
 800187c:	4b23      	ldr	r3, [pc, #140]	; (800190c <I2C_RequestMemoryWrite+0xc4>)
 800187e:	9300      	str	r3, [sp, #0]
 8001880:	0023      	movs	r3, r4
 8001882:	f000 f99b 	bl	8001bbc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001886:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001888:	6a39      	ldr	r1, [r7, #32]
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	0018      	movs	r0, r3
 800188e:	f000 f8a0 	bl	80019d2 <I2C_WaitOnTXISFlagUntilTimeout>
 8001892:	1e03      	subs	r3, r0, #0
 8001894:	d001      	beq.n	800189a <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e033      	b.n	8001902 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800189a:	1dbb      	adds	r3, r7, #6
 800189c:	881b      	ldrh	r3, [r3, #0]
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d107      	bne.n	80018b2 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80018a2:	2308      	movs	r3, #8
 80018a4:	18fb      	adds	r3, r7, r3
 80018a6:	881b      	ldrh	r3, [r3, #0]
 80018a8:	b2da      	uxtb	r2, r3
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	629a      	str	r2, [r3, #40]	; 0x28
 80018b0:	e019      	b.n	80018e6 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80018b2:	2308      	movs	r3, #8
 80018b4:	18fb      	adds	r3, r7, r3
 80018b6:	881b      	ldrh	r3, [r3, #0]
 80018b8:	0a1b      	lsrs	r3, r3, #8
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	b2da      	uxtb	r2, r3
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80018c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018c6:	6a39      	ldr	r1, [r7, #32]
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	0018      	movs	r0, r3
 80018cc:	f000 f881 	bl	80019d2 <I2C_WaitOnTXISFlagUntilTimeout>
 80018d0:	1e03      	subs	r3, r0, #0
 80018d2:	d001      	beq.n	80018d8 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e014      	b.n	8001902 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80018d8:	2308      	movs	r3, #8
 80018da:	18fb      	adds	r3, r7, r3
 80018dc:	881b      	ldrh	r3, [r3, #0]
 80018de:	b2da      	uxtb	r2, r3
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80018e6:	6a3a      	ldr	r2, [r7, #32]
 80018e8:	68f8      	ldr	r0, [r7, #12]
 80018ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ec:	9300      	str	r3, [sp, #0]
 80018ee:	0013      	movs	r3, r2
 80018f0:	2200      	movs	r2, #0
 80018f2:	2180      	movs	r1, #128	; 0x80
 80018f4:	f000 f82e 	bl	8001954 <I2C_WaitOnFlagUntilTimeout>
 80018f8:	1e03      	subs	r3, r0, #0
 80018fa:	d001      	beq.n	8001900 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e000      	b.n	8001902 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8001900:	2300      	movs	r3, #0
}
 8001902:	0018      	movs	r0, r3
 8001904:	46bd      	mov	sp, r7
 8001906:	b004      	add	sp, #16
 8001908:	bdb0      	pop	{r4, r5, r7, pc}
 800190a:	46c0      	nop			; (mov r8, r8)
 800190c:	80002000 	.word	0x80002000

08001910 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	699b      	ldr	r3, [r3, #24]
 800191e:	2202      	movs	r2, #2
 8001920:	4013      	ands	r3, r2
 8001922:	2b02      	cmp	r3, #2
 8001924:	d103      	bne.n	800192e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2200      	movs	r2, #0
 800192c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	699b      	ldr	r3, [r3, #24]
 8001934:	2201      	movs	r2, #1
 8001936:	4013      	ands	r3, r2
 8001938:	2b01      	cmp	r3, #1
 800193a:	d007      	beq.n	800194c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	699a      	ldr	r2, [r3, #24]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	2101      	movs	r1, #1
 8001948:	430a      	orrs	r2, r1
 800194a:	619a      	str	r2, [r3, #24]
  }
}
 800194c:	46c0      	nop			; (mov r8, r8)
 800194e:	46bd      	mov	sp, r7
 8001950:	b002      	add	sp, #8
 8001952:	bd80      	pop	{r7, pc}

08001954 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	60b9      	str	r1, [r7, #8]
 800195e:	603b      	str	r3, [r7, #0]
 8001960:	1dfb      	adds	r3, r7, #7
 8001962:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001964:	e021      	b.n	80019aa <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	3301      	adds	r3, #1
 800196a:	d01e      	beq.n	80019aa <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800196c:	f7ff f902 	bl	8000b74 <HAL_GetTick>
 8001970:	0002      	movs	r2, r0
 8001972:	69bb      	ldr	r3, [r7, #24]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	683a      	ldr	r2, [r7, #0]
 8001978:	429a      	cmp	r2, r3
 800197a:	d302      	bcc.n	8001982 <I2C_WaitOnFlagUntilTimeout+0x2e>
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d113      	bne.n	80019aa <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001986:	2220      	movs	r2, #32
 8001988:	431a      	orrs	r2, r3
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	2241      	movs	r2, #65	; 0x41
 8001992:	2120      	movs	r1, #32
 8001994:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	2242      	movs	r2, #66	; 0x42
 800199a:	2100      	movs	r1, #0
 800199c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	2240      	movs	r2, #64	; 0x40
 80019a2:	2100      	movs	r1, #0
 80019a4:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e00f      	b.n	80019ca <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	699b      	ldr	r3, [r3, #24]
 80019b0:	68ba      	ldr	r2, [r7, #8]
 80019b2:	4013      	ands	r3, r2
 80019b4:	68ba      	ldr	r2, [r7, #8]
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	425a      	negs	r2, r3
 80019ba:	4153      	adcs	r3, r2
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	001a      	movs	r2, r3
 80019c0:	1dfb      	adds	r3, r7, #7
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d0ce      	beq.n	8001966 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	0018      	movs	r0, r3
 80019cc:	46bd      	mov	sp, r7
 80019ce:	b004      	add	sp, #16
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b084      	sub	sp, #16
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	60f8      	str	r0, [r7, #12]
 80019da:	60b9      	str	r1, [r7, #8]
 80019dc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80019de:	e02b      	b.n	8001a38 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	68b9      	ldr	r1, [r7, #8]
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	0018      	movs	r0, r3
 80019e8:	f000 f86e 	bl	8001ac8 <I2C_IsAcknowledgeFailed>
 80019ec:	1e03      	subs	r3, r0, #0
 80019ee:	d001      	beq.n	80019f4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e029      	b.n	8001a48 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	3301      	adds	r3, #1
 80019f8:	d01e      	beq.n	8001a38 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019fa:	f7ff f8bb 	bl	8000b74 <HAL_GetTick>
 80019fe:	0002      	movs	r2, r0
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	68ba      	ldr	r2, [r7, #8]
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d302      	bcc.n	8001a10 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d113      	bne.n	8001a38 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a14:	2220      	movs	r2, #32
 8001a16:	431a      	orrs	r2, r3
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	2241      	movs	r2, #65	; 0x41
 8001a20:	2120      	movs	r1, #32
 8001a22:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2242      	movs	r2, #66	; 0x42
 8001a28:	2100      	movs	r1, #0
 8001a2a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	2240      	movs	r2, #64	; 0x40
 8001a30:	2100      	movs	r1, #0
 8001a32:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e007      	b.n	8001a48 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	699b      	ldr	r3, [r3, #24]
 8001a3e:	2202      	movs	r2, #2
 8001a40:	4013      	ands	r3, r2
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d1cc      	bne.n	80019e0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001a46:	2300      	movs	r3, #0
}
 8001a48:	0018      	movs	r0, r3
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	b004      	add	sp, #16
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	60b9      	str	r1, [r7, #8]
 8001a5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a5c:	e028      	b.n	8001ab0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	68b9      	ldr	r1, [r7, #8]
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	0018      	movs	r0, r3
 8001a66:	f000 f82f 	bl	8001ac8 <I2C_IsAcknowledgeFailed>
 8001a6a:	1e03      	subs	r3, r0, #0
 8001a6c:	d001      	beq.n	8001a72 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e026      	b.n	8001ac0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a72:	f7ff f87f 	bl	8000b74 <HAL_GetTick>
 8001a76:	0002      	movs	r2, r0
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	68ba      	ldr	r2, [r7, #8]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d302      	bcc.n	8001a88 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d113      	bne.n	8001ab0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a8c:	2220      	movs	r2, #32
 8001a8e:	431a      	orrs	r2, r3
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2241      	movs	r2, #65	; 0x41
 8001a98:	2120      	movs	r1, #32
 8001a9a:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	2242      	movs	r2, #66	; 0x42
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	2240      	movs	r2, #64	; 0x40
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e007      	b.n	8001ac0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	699b      	ldr	r3, [r3, #24]
 8001ab6:	2220      	movs	r2, #32
 8001ab8:	4013      	ands	r3, r2
 8001aba:	2b20      	cmp	r3, #32
 8001abc:	d1cf      	bne.n	8001a5e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001abe:	2300      	movs	r3, #0
}
 8001ac0:	0018      	movs	r0, r3
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	b004      	add	sp, #16
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	60b9      	str	r1, [r7, #8]
 8001ad2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	699b      	ldr	r3, [r3, #24]
 8001ada:	2210      	movs	r2, #16
 8001adc:	4013      	ands	r3, r2
 8001ade:	2b10      	cmp	r3, #16
 8001ae0:	d164      	bne.n	8001bac <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	685a      	ldr	r2, [r3, #4]
 8001ae8:	2380      	movs	r3, #128	; 0x80
 8001aea:	049b      	lsls	r3, r3, #18
 8001aec:	401a      	ands	r2, r3
 8001aee:	2380      	movs	r3, #128	; 0x80
 8001af0:	049b      	lsls	r3, r3, #18
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d02b      	beq.n	8001b4e <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	685a      	ldr	r2, [r3, #4]
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2180      	movs	r1, #128	; 0x80
 8001b02:	01c9      	lsls	r1, r1, #7
 8001b04:	430a      	orrs	r2, r1
 8001b06:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b08:	e021      	b.n	8001b4e <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	d01e      	beq.n	8001b4e <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b10:	f7ff f830 	bl	8000b74 <HAL_GetTick>
 8001b14:	0002      	movs	r2, r0
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	68ba      	ldr	r2, [r7, #8]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d302      	bcc.n	8001b26 <I2C_IsAcknowledgeFailed+0x5e>
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d113      	bne.n	8001b4e <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2a:	2220      	movs	r2, #32
 8001b2c:	431a      	orrs	r2, r3
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2241      	movs	r2, #65	; 0x41
 8001b36:	2120      	movs	r1, #32
 8001b38:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	2242      	movs	r2, #66	; 0x42
 8001b3e:	2100      	movs	r1, #0
 8001b40:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	2240      	movs	r2, #64	; 0x40
 8001b46:	2100      	movs	r1, #0
 8001b48:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e02f      	b.n	8001bae <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	699b      	ldr	r3, [r3, #24]
 8001b54:	2220      	movs	r2, #32
 8001b56:	4013      	ands	r3, r2
 8001b58:	2b20      	cmp	r3, #32
 8001b5a:	d1d6      	bne.n	8001b0a <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2210      	movs	r2, #16
 8001b62:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2220      	movs	r2, #32
 8001b6a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	0018      	movs	r0, r3
 8001b70:	f7ff fece 	bl	8001910 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	685a      	ldr	r2, [r3, #4]
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	490e      	ldr	r1, [pc, #56]	; (8001bb8 <I2C_IsAcknowledgeFailed+0xf0>)
 8001b80:	400a      	ands	r2, r1
 8001b82:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b88:	2204      	movs	r2, #4
 8001b8a:	431a      	orrs	r2, r3
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	2241      	movs	r2, #65	; 0x41
 8001b94:	2120      	movs	r1, #32
 8001b96:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2242      	movs	r2, #66	; 0x42
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2240      	movs	r2, #64	; 0x40
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e000      	b.n	8001bae <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	0018      	movs	r0, r3
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	b004      	add	sp, #16
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	46c0      	nop			; (mov r8, r8)
 8001bb8:	fe00e800 	.word	0xfe00e800

08001bbc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001bbc:	b590      	push	{r4, r7, lr}
 8001bbe:	b085      	sub	sp, #20
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	0008      	movs	r0, r1
 8001bc6:	0011      	movs	r1, r2
 8001bc8:	607b      	str	r3, [r7, #4]
 8001bca:	240a      	movs	r4, #10
 8001bcc:	193b      	adds	r3, r7, r4
 8001bce:	1c02      	adds	r2, r0, #0
 8001bd0:	801a      	strh	r2, [r3, #0]
 8001bd2:	2009      	movs	r0, #9
 8001bd4:	183b      	adds	r3, r7, r0
 8001bd6:	1c0a      	adds	r2, r1, #0
 8001bd8:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	6a3a      	ldr	r2, [r7, #32]
 8001be2:	0d51      	lsrs	r1, r2, #21
 8001be4:	2280      	movs	r2, #128	; 0x80
 8001be6:	00d2      	lsls	r2, r2, #3
 8001be8:	400a      	ands	r2, r1
 8001bea:	490e      	ldr	r1, [pc, #56]	; (8001c24 <I2C_TransferConfig+0x68>)
 8001bec:	430a      	orrs	r2, r1
 8001bee:	43d2      	mvns	r2, r2
 8001bf0:	401a      	ands	r2, r3
 8001bf2:	0011      	movs	r1, r2
 8001bf4:	193b      	adds	r3, r7, r4
 8001bf6:	881b      	ldrh	r3, [r3, #0]
 8001bf8:	059b      	lsls	r3, r3, #22
 8001bfa:	0d9a      	lsrs	r2, r3, #22
 8001bfc:	183b      	adds	r3, r7, r0
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	0418      	lsls	r0, r3, #16
 8001c02:	23ff      	movs	r3, #255	; 0xff
 8001c04:	041b      	lsls	r3, r3, #16
 8001c06:	4003      	ands	r3, r0
 8001c08:	431a      	orrs	r2, r3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	431a      	orrs	r2, r3
 8001c0e:	6a3b      	ldr	r3, [r7, #32]
 8001c10:	431a      	orrs	r2, r3
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	430a      	orrs	r2, r1
 8001c18:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8001c1a:	46c0      	nop			; (mov r8, r8)
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	b005      	add	sp, #20
 8001c20:	bd90      	pop	{r4, r7, pc}
 8001c22:	46c0      	nop			; (mov r8, r8)
 8001c24:	03ff63ff 	.word	0x03ff63ff

08001c28 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2241      	movs	r2, #65	; 0x41
 8001c36:	5c9b      	ldrb	r3, [r3, r2]
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	2b20      	cmp	r3, #32
 8001c3c:	d138      	bne.n	8001cb0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2240      	movs	r2, #64	; 0x40
 8001c42:	5c9b      	ldrb	r3, [r3, r2]
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d101      	bne.n	8001c4c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001c48:	2302      	movs	r3, #2
 8001c4a:	e032      	b.n	8001cb2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2240      	movs	r2, #64	; 0x40
 8001c50:	2101      	movs	r1, #1
 8001c52:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2241      	movs	r2, #65	; 0x41
 8001c58:	2124      	movs	r1, #36	; 0x24
 8001c5a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2101      	movs	r1, #1
 8001c68:	438a      	bics	r2, r1
 8001c6a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4911      	ldr	r1, [pc, #68]	; (8001cbc <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001c78:	400a      	ands	r2, r1
 8001c7a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	6819      	ldr	r1, [r3, #0]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	683a      	ldr	r2, [r7, #0]
 8001c88:	430a      	orrs	r2, r1
 8001c8a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2101      	movs	r1, #1
 8001c98:	430a      	orrs	r2, r1
 8001c9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2241      	movs	r2, #65	; 0x41
 8001ca0:	2120      	movs	r1, #32
 8001ca2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2240      	movs	r2, #64	; 0x40
 8001ca8:	2100      	movs	r1, #0
 8001caa:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001cac:	2300      	movs	r3, #0
 8001cae:	e000      	b.n	8001cb2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001cb0:	2302      	movs	r3, #2
  }
}
 8001cb2:	0018      	movs	r0, r3
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	b002      	add	sp, #8
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	46c0      	nop			; (mov r8, r8)
 8001cbc:	ffffefff 	.word	0xffffefff

08001cc0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2241      	movs	r2, #65	; 0x41
 8001cce:	5c9b      	ldrb	r3, [r3, r2]
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	2b20      	cmp	r3, #32
 8001cd4:	d139      	bne.n	8001d4a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2240      	movs	r2, #64	; 0x40
 8001cda:	5c9b      	ldrb	r3, [r3, r2]
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d101      	bne.n	8001ce4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	e033      	b.n	8001d4c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2240      	movs	r2, #64	; 0x40
 8001ce8:	2101      	movs	r1, #1
 8001cea:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2241      	movs	r2, #65	; 0x41
 8001cf0:	2124      	movs	r1, #36	; 0x24
 8001cf2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	2101      	movs	r1, #1
 8001d00:	438a      	bics	r2, r1
 8001d02:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	4a11      	ldr	r2, [pc, #68]	; (8001d54 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001d10:	4013      	ands	r3, r2
 8001d12:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	021b      	lsls	r3, r3, #8
 8001d18:	68fa      	ldr	r2, [r7, #12]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	68fa      	ldr	r2, [r7, #12]
 8001d24:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2101      	movs	r1, #1
 8001d32:	430a      	orrs	r2, r1
 8001d34:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2241      	movs	r2, #65	; 0x41
 8001d3a:	2120      	movs	r1, #32
 8001d3c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2240      	movs	r2, #64	; 0x40
 8001d42:	2100      	movs	r1, #0
 8001d44:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001d46:	2300      	movs	r3, #0
 8001d48:	e000      	b.n	8001d4c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001d4a:	2302      	movs	r3, #2
  }
}
 8001d4c:	0018      	movs	r0, r3
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	b004      	add	sp, #16
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	fffff0ff 	.word	0xfffff0ff

08001d58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b088      	sub	sp, #32
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d101      	bne.n	8001d6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e305      	b.n	8002376 <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	4013      	ands	r3, r2
 8001d72:	d100      	bne.n	8001d76 <HAL_RCC_OscConfig+0x1e>
 8001d74:	e08d      	b.n	8001e92 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001d76:	4bc5      	ldr	r3, [pc, #788]	; (800208c <HAL_RCC_OscConfig+0x334>)
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	220c      	movs	r2, #12
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	2b04      	cmp	r3, #4
 8001d80:	d00e      	beq.n	8001da0 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d82:	4bc2      	ldr	r3, [pc, #776]	; (800208c <HAL_RCC_OscConfig+0x334>)
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	220c      	movs	r2, #12
 8001d88:	4013      	ands	r3, r2
 8001d8a:	2b08      	cmp	r3, #8
 8001d8c:	d116      	bne.n	8001dbc <HAL_RCC_OscConfig+0x64>
 8001d8e:	4bbf      	ldr	r3, [pc, #764]	; (800208c <HAL_RCC_OscConfig+0x334>)
 8001d90:	685a      	ldr	r2, [r3, #4]
 8001d92:	23c0      	movs	r3, #192	; 0xc0
 8001d94:	025b      	lsls	r3, r3, #9
 8001d96:	401a      	ands	r2, r3
 8001d98:	2380      	movs	r3, #128	; 0x80
 8001d9a:	025b      	lsls	r3, r3, #9
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d10d      	bne.n	8001dbc <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001da0:	4bba      	ldr	r3, [pc, #744]	; (800208c <HAL_RCC_OscConfig+0x334>)
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	2380      	movs	r3, #128	; 0x80
 8001da6:	029b      	lsls	r3, r3, #10
 8001da8:	4013      	ands	r3, r2
 8001daa:	d100      	bne.n	8001dae <HAL_RCC_OscConfig+0x56>
 8001dac:	e070      	b.n	8001e90 <HAL_RCC_OscConfig+0x138>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d000      	beq.n	8001db8 <HAL_RCC_OscConfig+0x60>
 8001db6:	e06b      	b.n	8001e90 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e2dc      	b.n	8002376 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d107      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x7c>
 8001dc4:	4bb1      	ldr	r3, [pc, #708]	; (800208c <HAL_RCC_OscConfig+0x334>)
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	4bb0      	ldr	r3, [pc, #704]	; (800208c <HAL_RCC_OscConfig+0x334>)
 8001dca:	2180      	movs	r1, #128	; 0x80
 8001dcc:	0249      	lsls	r1, r1, #9
 8001dce:	430a      	orrs	r2, r1
 8001dd0:	601a      	str	r2, [r3, #0]
 8001dd2:	e02f      	b.n	8001e34 <HAL_RCC_OscConfig+0xdc>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d10c      	bne.n	8001df6 <HAL_RCC_OscConfig+0x9e>
 8001ddc:	4bab      	ldr	r3, [pc, #684]	; (800208c <HAL_RCC_OscConfig+0x334>)
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	4baa      	ldr	r3, [pc, #680]	; (800208c <HAL_RCC_OscConfig+0x334>)
 8001de2:	49ab      	ldr	r1, [pc, #684]	; (8002090 <HAL_RCC_OscConfig+0x338>)
 8001de4:	400a      	ands	r2, r1
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	4ba8      	ldr	r3, [pc, #672]	; (800208c <HAL_RCC_OscConfig+0x334>)
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	4ba7      	ldr	r3, [pc, #668]	; (800208c <HAL_RCC_OscConfig+0x334>)
 8001dee:	49a9      	ldr	r1, [pc, #676]	; (8002094 <HAL_RCC_OscConfig+0x33c>)
 8001df0:	400a      	ands	r2, r1
 8001df2:	601a      	str	r2, [r3, #0]
 8001df4:	e01e      	b.n	8001e34 <HAL_RCC_OscConfig+0xdc>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	2b05      	cmp	r3, #5
 8001dfc:	d10e      	bne.n	8001e1c <HAL_RCC_OscConfig+0xc4>
 8001dfe:	4ba3      	ldr	r3, [pc, #652]	; (800208c <HAL_RCC_OscConfig+0x334>)
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	4ba2      	ldr	r3, [pc, #648]	; (800208c <HAL_RCC_OscConfig+0x334>)
 8001e04:	2180      	movs	r1, #128	; 0x80
 8001e06:	02c9      	lsls	r1, r1, #11
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	601a      	str	r2, [r3, #0]
 8001e0c:	4b9f      	ldr	r3, [pc, #636]	; (800208c <HAL_RCC_OscConfig+0x334>)
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	4b9e      	ldr	r3, [pc, #632]	; (800208c <HAL_RCC_OscConfig+0x334>)
 8001e12:	2180      	movs	r1, #128	; 0x80
 8001e14:	0249      	lsls	r1, r1, #9
 8001e16:	430a      	orrs	r2, r1
 8001e18:	601a      	str	r2, [r3, #0]
 8001e1a:	e00b      	b.n	8001e34 <HAL_RCC_OscConfig+0xdc>
 8001e1c:	4b9b      	ldr	r3, [pc, #620]	; (800208c <HAL_RCC_OscConfig+0x334>)
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	4b9a      	ldr	r3, [pc, #616]	; (800208c <HAL_RCC_OscConfig+0x334>)
 8001e22:	499b      	ldr	r1, [pc, #620]	; (8002090 <HAL_RCC_OscConfig+0x338>)
 8001e24:	400a      	ands	r2, r1
 8001e26:	601a      	str	r2, [r3, #0]
 8001e28:	4b98      	ldr	r3, [pc, #608]	; (800208c <HAL_RCC_OscConfig+0x334>)
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	4b97      	ldr	r3, [pc, #604]	; (800208c <HAL_RCC_OscConfig+0x334>)
 8001e2e:	4999      	ldr	r1, [pc, #612]	; (8002094 <HAL_RCC_OscConfig+0x33c>)
 8001e30:	400a      	ands	r2, r1
 8001e32:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d014      	beq.n	8001e66 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e3c:	f7fe fe9a 	bl	8000b74 <HAL_GetTick>
 8001e40:	0003      	movs	r3, r0
 8001e42:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e44:	e008      	b.n	8001e58 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e46:	f7fe fe95 	bl	8000b74 <HAL_GetTick>
 8001e4a:	0002      	movs	r2, r0
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	2b64      	cmp	r3, #100	; 0x64
 8001e52:	d901      	bls.n	8001e58 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001e54:	2303      	movs	r3, #3
 8001e56:	e28e      	b.n	8002376 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e58:	4b8c      	ldr	r3, [pc, #560]	; (800208c <HAL_RCC_OscConfig+0x334>)
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	2380      	movs	r3, #128	; 0x80
 8001e5e:	029b      	lsls	r3, r3, #10
 8001e60:	4013      	ands	r3, r2
 8001e62:	d0f0      	beq.n	8001e46 <HAL_RCC_OscConfig+0xee>
 8001e64:	e015      	b.n	8001e92 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e66:	f7fe fe85 	bl	8000b74 <HAL_GetTick>
 8001e6a:	0003      	movs	r3, r0
 8001e6c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e6e:	e008      	b.n	8001e82 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e70:	f7fe fe80 	bl	8000b74 <HAL_GetTick>
 8001e74:	0002      	movs	r2, r0
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	2b64      	cmp	r3, #100	; 0x64
 8001e7c:	d901      	bls.n	8001e82 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e279      	b.n	8002376 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e82:	4b82      	ldr	r3, [pc, #520]	; (800208c <HAL_RCC_OscConfig+0x334>)
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	2380      	movs	r3, #128	; 0x80
 8001e88:	029b      	lsls	r3, r3, #10
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	d1f0      	bne.n	8001e70 <HAL_RCC_OscConfig+0x118>
 8001e8e:	e000      	b.n	8001e92 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e90:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	2202      	movs	r2, #2
 8001e98:	4013      	ands	r3, r2
 8001e9a:	d100      	bne.n	8001e9e <HAL_RCC_OscConfig+0x146>
 8001e9c:	e06c      	b.n	8001f78 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001e9e:	4b7b      	ldr	r3, [pc, #492]	; (800208c <HAL_RCC_OscConfig+0x334>)
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	220c      	movs	r2, #12
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	d00e      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001ea8:	4b78      	ldr	r3, [pc, #480]	; (800208c <HAL_RCC_OscConfig+0x334>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	220c      	movs	r2, #12
 8001eae:	4013      	ands	r3, r2
 8001eb0:	2b08      	cmp	r3, #8
 8001eb2:	d11f      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x19c>
 8001eb4:	4b75      	ldr	r3, [pc, #468]	; (800208c <HAL_RCC_OscConfig+0x334>)
 8001eb6:	685a      	ldr	r2, [r3, #4]
 8001eb8:	23c0      	movs	r3, #192	; 0xc0
 8001eba:	025b      	lsls	r3, r3, #9
 8001ebc:	401a      	ands	r2, r3
 8001ebe:	2380      	movs	r3, #128	; 0x80
 8001ec0:	021b      	lsls	r3, r3, #8
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d116      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ec6:	4b71      	ldr	r3, [pc, #452]	; (800208c <HAL_RCC_OscConfig+0x334>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	2202      	movs	r2, #2
 8001ecc:	4013      	ands	r3, r2
 8001ece:	d005      	beq.n	8001edc <HAL_RCC_OscConfig+0x184>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d001      	beq.n	8001edc <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e24c      	b.n	8002376 <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001edc:	4b6b      	ldr	r3, [pc, #428]	; (800208c <HAL_RCC_OscConfig+0x334>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	22f8      	movs	r2, #248	; 0xf8
 8001ee2:	4393      	bics	r3, r2
 8001ee4:	0019      	movs	r1, r3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	691b      	ldr	r3, [r3, #16]
 8001eea:	00da      	lsls	r2, r3, #3
 8001eec:	4b67      	ldr	r3, [pc, #412]	; (800208c <HAL_RCC_OscConfig+0x334>)
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ef2:	e041      	b.n	8001f78 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d024      	beq.n	8001f46 <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001efc:	4b63      	ldr	r3, [pc, #396]	; (800208c <HAL_RCC_OscConfig+0x334>)
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	4b62      	ldr	r3, [pc, #392]	; (800208c <HAL_RCC_OscConfig+0x334>)
 8001f02:	2101      	movs	r1, #1
 8001f04:	430a      	orrs	r2, r1
 8001f06:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f08:	f7fe fe34 	bl	8000b74 <HAL_GetTick>
 8001f0c:	0003      	movs	r3, r0
 8001f0e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f10:	e008      	b.n	8001f24 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f12:	f7fe fe2f 	bl	8000b74 <HAL_GetTick>
 8001f16:	0002      	movs	r2, r0
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d901      	bls.n	8001f24 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001f20:	2303      	movs	r3, #3
 8001f22:	e228      	b.n	8002376 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f24:	4b59      	ldr	r3, [pc, #356]	; (800208c <HAL_RCC_OscConfig+0x334>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2202      	movs	r2, #2
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	d0f1      	beq.n	8001f12 <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f2e:	4b57      	ldr	r3, [pc, #348]	; (800208c <HAL_RCC_OscConfig+0x334>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	22f8      	movs	r2, #248	; 0xf8
 8001f34:	4393      	bics	r3, r2
 8001f36:	0019      	movs	r1, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	691b      	ldr	r3, [r3, #16]
 8001f3c:	00da      	lsls	r2, r3, #3
 8001f3e:	4b53      	ldr	r3, [pc, #332]	; (800208c <HAL_RCC_OscConfig+0x334>)
 8001f40:	430a      	orrs	r2, r1
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	e018      	b.n	8001f78 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f46:	4b51      	ldr	r3, [pc, #324]	; (800208c <HAL_RCC_OscConfig+0x334>)
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	4b50      	ldr	r3, [pc, #320]	; (800208c <HAL_RCC_OscConfig+0x334>)
 8001f4c:	2101      	movs	r1, #1
 8001f4e:	438a      	bics	r2, r1
 8001f50:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f52:	f7fe fe0f 	bl	8000b74 <HAL_GetTick>
 8001f56:	0003      	movs	r3, r0
 8001f58:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f5a:	e008      	b.n	8001f6e <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f5c:	f7fe fe0a 	bl	8000b74 <HAL_GetTick>
 8001f60:	0002      	movs	r2, r0
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e203      	b.n	8002376 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f6e:	4b47      	ldr	r3, [pc, #284]	; (800208c <HAL_RCC_OscConfig+0x334>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	2202      	movs	r2, #2
 8001f74:	4013      	ands	r3, r2
 8001f76:	d1f1      	bne.n	8001f5c <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2208      	movs	r2, #8
 8001f7e:	4013      	ands	r3, r2
 8001f80:	d036      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	69db      	ldr	r3, [r3, #28]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d019      	beq.n	8001fbe <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f8a:	4b40      	ldr	r3, [pc, #256]	; (800208c <HAL_RCC_OscConfig+0x334>)
 8001f8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f8e:	4b3f      	ldr	r3, [pc, #252]	; (800208c <HAL_RCC_OscConfig+0x334>)
 8001f90:	2101      	movs	r1, #1
 8001f92:	430a      	orrs	r2, r1
 8001f94:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f96:	f7fe fded 	bl	8000b74 <HAL_GetTick>
 8001f9a:	0003      	movs	r3, r0
 8001f9c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f9e:	e008      	b.n	8001fb2 <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fa0:	f7fe fde8 	bl	8000b74 <HAL_GetTick>
 8001fa4:	0002      	movs	r2, r0
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e1e1      	b.n	8002376 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fb2:	4b36      	ldr	r3, [pc, #216]	; (800208c <HAL_RCC_OscConfig+0x334>)
 8001fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb6:	2202      	movs	r2, #2
 8001fb8:	4013      	ands	r3, r2
 8001fba:	d0f1      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x248>
 8001fbc:	e018      	b.n	8001ff0 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fbe:	4b33      	ldr	r3, [pc, #204]	; (800208c <HAL_RCC_OscConfig+0x334>)
 8001fc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fc2:	4b32      	ldr	r3, [pc, #200]	; (800208c <HAL_RCC_OscConfig+0x334>)
 8001fc4:	2101      	movs	r1, #1
 8001fc6:	438a      	bics	r2, r1
 8001fc8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fca:	f7fe fdd3 	bl	8000b74 <HAL_GetTick>
 8001fce:	0003      	movs	r3, r0
 8001fd0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fd2:	e008      	b.n	8001fe6 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fd4:	f7fe fdce 	bl	8000b74 <HAL_GetTick>
 8001fd8:	0002      	movs	r2, r0
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d901      	bls.n	8001fe6 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e1c7      	b.n	8002376 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fe6:	4b29      	ldr	r3, [pc, #164]	; (800208c <HAL_RCC_OscConfig+0x334>)
 8001fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fea:	2202      	movs	r2, #2
 8001fec:	4013      	ands	r3, r2
 8001fee:	d1f1      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2204      	movs	r2, #4
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	d100      	bne.n	8001ffc <HAL_RCC_OscConfig+0x2a4>
 8001ffa:	e0b5      	b.n	8002168 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ffc:	201f      	movs	r0, #31
 8001ffe:	183b      	adds	r3, r7, r0
 8002000:	2200      	movs	r2, #0
 8002002:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002004:	4b21      	ldr	r3, [pc, #132]	; (800208c <HAL_RCC_OscConfig+0x334>)
 8002006:	69da      	ldr	r2, [r3, #28]
 8002008:	2380      	movs	r3, #128	; 0x80
 800200a:	055b      	lsls	r3, r3, #21
 800200c:	4013      	ands	r3, r2
 800200e:	d110      	bne.n	8002032 <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002010:	4b1e      	ldr	r3, [pc, #120]	; (800208c <HAL_RCC_OscConfig+0x334>)
 8002012:	69da      	ldr	r2, [r3, #28]
 8002014:	4b1d      	ldr	r3, [pc, #116]	; (800208c <HAL_RCC_OscConfig+0x334>)
 8002016:	2180      	movs	r1, #128	; 0x80
 8002018:	0549      	lsls	r1, r1, #21
 800201a:	430a      	orrs	r2, r1
 800201c:	61da      	str	r2, [r3, #28]
 800201e:	4b1b      	ldr	r3, [pc, #108]	; (800208c <HAL_RCC_OscConfig+0x334>)
 8002020:	69da      	ldr	r2, [r3, #28]
 8002022:	2380      	movs	r3, #128	; 0x80
 8002024:	055b      	lsls	r3, r3, #21
 8002026:	4013      	ands	r3, r2
 8002028:	60fb      	str	r3, [r7, #12]
 800202a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800202c:	183b      	adds	r3, r7, r0
 800202e:	2201      	movs	r2, #1
 8002030:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002032:	4b19      	ldr	r3, [pc, #100]	; (8002098 <HAL_RCC_OscConfig+0x340>)
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	2380      	movs	r3, #128	; 0x80
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	4013      	ands	r3, r2
 800203c:	d11a      	bne.n	8002074 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800203e:	4b16      	ldr	r3, [pc, #88]	; (8002098 <HAL_RCC_OscConfig+0x340>)
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	4b15      	ldr	r3, [pc, #84]	; (8002098 <HAL_RCC_OscConfig+0x340>)
 8002044:	2180      	movs	r1, #128	; 0x80
 8002046:	0049      	lsls	r1, r1, #1
 8002048:	430a      	orrs	r2, r1
 800204a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800204c:	f7fe fd92 	bl	8000b74 <HAL_GetTick>
 8002050:	0003      	movs	r3, r0
 8002052:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002054:	e008      	b.n	8002068 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002056:	f7fe fd8d 	bl	8000b74 <HAL_GetTick>
 800205a:	0002      	movs	r2, r0
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	2b64      	cmp	r3, #100	; 0x64
 8002062:	d901      	bls.n	8002068 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	e186      	b.n	8002376 <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002068:	4b0b      	ldr	r3, [pc, #44]	; (8002098 <HAL_RCC_OscConfig+0x340>)
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	2380      	movs	r3, #128	; 0x80
 800206e:	005b      	lsls	r3, r3, #1
 8002070:	4013      	ands	r3, r2
 8002072:	d0f0      	beq.n	8002056 <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	2b01      	cmp	r3, #1
 800207a:	d10f      	bne.n	800209c <HAL_RCC_OscConfig+0x344>
 800207c:	4b03      	ldr	r3, [pc, #12]	; (800208c <HAL_RCC_OscConfig+0x334>)
 800207e:	6a1a      	ldr	r2, [r3, #32]
 8002080:	4b02      	ldr	r3, [pc, #8]	; (800208c <HAL_RCC_OscConfig+0x334>)
 8002082:	2101      	movs	r1, #1
 8002084:	430a      	orrs	r2, r1
 8002086:	621a      	str	r2, [r3, #32]
 8002088:	e036      	b.n	80020f8 <HAL_RCC_OscConfig+0x3a0>
 800208a:	46c0      	nop			; (mov r8, r8)
 800208c:	40021000 	.word	0x40021000
 8002090:	fffeffff 	.word	0xfffeffff
 8002094:	fffbffff 	.word	0xfffbffff
 8002098:	40007000 	.word	0x40007000
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d10c      	bne.n	80020be <HAL_RCC_OscConfig+0x366>
 80020a4:	4bb6      	ldr	r3, [pc, #728]	; (8002380 <HAL_RCC_OscConfig+0x628>)
 80020a6:	6a1a      	ldr	r2, [r3, #32]
 80020a8:	4bb5      	ldr	r3, [pc, #724]	; (8002380 <HAL_RCC_OscConfig+0x628>)
 80020aa:	2101      	movs	r1, #1
 80020ac:	438a      	bics	r2, r1
 80020ae:	621a      	str	r2, [r3, #32]
 80020b0:	4bb3      	ldr	r3, [pc, #716]	; (8002380 <HAL_RCC_OscConfig+0x628>)
 80020b2:	6a1a      	ldr	r2, [r3, #32]
 80020b4:	4bb2      	ldr	r3, [pc, #712]	; (8002380 <HAL_RCC_OscConfig+0x628>)
 80020b6:	2104      	movs	r1, #4
 80020b8:	438a      	bics	r2, r1
 80020ba:	621a      	str	r2, [r3, #32]
 80020bc:	e01c      	b.n	80020f8 <HAL_RCC_OscConfig+0x3a0>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	2b05      	cmp	r3, #5
 80020c4:	d10c      	bne.n	80020e0 <HAL_RCC_OscConfig+0x388>
 80020c6:	4bae      	ldr	r3, [pc, #696]	; (8002380 <HAL_RCC_OscConfig+0x628>)
 80020c8:	6a1a      	ldr	r2, [r3, #32]
 80020ca:	4bad      	ldr	r3, [pc, #692]	; (8002380 <HAL_RCC_OscConfig+0x628>)
 80020cc:	2104      	movs	r1, #4
 80020ce:	430a      	orrs	r2, r1
 80020d0:	621a      	str	r2, [r3, #32]
 80020d2:	4bab      	ldr	r3, [pc, #684]	; (8002380 <HAL_RCC_OscConfig+0x628>)
 80020d4:	6a1a      	ldr	r2, [r3, #32]
 80020d6:	4baa      	ldr	r3, [pc, #680]	; (8002380 <HAL_RCC_OscConfig+0x628>)
 80020d8:	2101      	movs	r1, #1
 80020da:	430a      	orrs	r2, r1
 80020dc:	621a      	str	r2, [r3, #32]
 80020de:	e00b      	b.n	80020f8 <HAL_RCC_OscConfig+0x3a0>
 80020e0:	4ba7      	ldr	r3, [pc, #668]	; (8002380 <HAL_RCC_OscConfig+0x628>)
 80020e2:	6a1a      	ldr	r2, [r3, #32]
 80020e4:	4ba6      	ldr	r3, [pc, #664]	; (8002380 <HAL_RCC_OscConfig+0x628>)
 80020e6:	2101      	movs	r1, #1
 80020e8:	438a      	bics	r2, r1
 80020ea:	621a      	str	r2, [r3, #32]
 80020ec:	4ba4      	ldr	r3, [pc, #656]	; (8002380 <HAL_RCC_OscConfig+0x628>)
 80020ee:	6a1a      	ldr	r2, [r3, #32]
 80020f0:	4ba3      	ldr	r3, [pc, #652]	; (8002380 <HAL_RCC_OscConfig+0x628>)
 80020f2:	2104      	movs	r1, #4
 80020f4:	438a      	bics	r2, r1
 80020f6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d014      	beq.n	800212a <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002100:	f7fe fd38 	bl	8000b74 <HAL_GetTick>
 8002104:	0003      	movs	r3, r0
 8002106:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002108:	e009      	b.n	800211e <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800210a:	f7fe fd33 	bl	8000b74 <HAL_GetTick>
 800210e:	0002      	movs	r2, r0
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	4a9b      	ldr	r2, [pc, #620]	; (8002384 <HAL_RCC_OscConfig+0x62c>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d901      	bls.n	800211e <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e12b      	b.n	8002376 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800211e:	4b98      	ldr	r3, [pc, #608]	; (8002380 <HAL_RCC_OscConfig+0x628>)
 8002120:	6a1b      	ldr	r3, [r3, #32]
 8002122:	2202      	movs	r2, #2
 8002124:	4013      	ands	r3, r2
 8002126:	d0f0      	beq.n	800210a <HAL_RCC_OscConfig+0x3b2>
 8002128:	e013      	b.n	8002152 <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800212a:	f7fe fd23 	bl	8000b74 <HAL_GetTick>
 800212e:	0003      	movs	r3, r0
 8002130:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002132:	e009      	b.n	8002148 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002134:	f7fe fd1e 	bl	8000b74 <HAL_GetTick>
 8002138:	0002      	movs	r2, r0
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	4a91      	ldr	r2, [pc, #580]	; (8002384 <HAL_RCC_OscConfig+0x62c>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d901      	bls.n	8002148 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e116      	b.n	8002376 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002148:	4b8d      	ldr	r3, [pc, #564]	; (8002380 <HAL_RCC_OscConfig+0x628>)
 800214a:	6a1b      	ldr	r3, [r3, #32]
 800214c:	2202      	movs	r2, #2
 800214e:	4013      	ands	r3, r2
 8002150:	d1f0      	bne.n	8002134 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002152:	231f      	movs	r3, #31
 8002154:	18fb      	adds	r3, r7, r3
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	2b01      	cmp	r3, #1
 800215a:	d105      	bne.n	8002168 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800215c:	4b88      	ldr	r3, [pc, #544]	; (8002380 <HAL_RCC_OscConfig+0x628>)
 800215e:	69da      	ldr	r2, [r3, #28]
 8002160:	4b87      	ldr	r3, [pc, #540]	; (8002380 <HAL_RCC_OscConfig+0x628>)
 8002162:	4989      	ldr	r1, [pc, #548]	; (8002388 <HAL_RCC_OscConfig+0x630>)
 8002164:	400a      	ands	r2, r1
 8002166:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2210      	movs	r2, #16
 800216e:	4013      	ands	r3, r2
 8002170:	d063      	beq.n	800223a <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	695b      	ldr	r3, [r3, #20]
 8002176:	2b01      	cmp	r3, #1
 8002178:	d12a      	bne.n	80021d0 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800217a:	4b81      	ldr	r3, [pc, #516]	; (8002380 <HAL_RCC_OscConfig+0x628>)
 800217c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800217e:	4b80      	ldr	r3, [pc, #512]	; (8002380 <HAL_RCC_OscConfig+0x628>)
 8002180:	2104      	movs	r1, #4
 8002182:	430a      	orrs	r2, r1
 8002184:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002186:	4b7e      	ldr	r3, [pc, #504]	; (8002380 <HAL_RCC_OscConfig+0x628>)
 8002188:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800218a:	4b7d      	ldr	r3, [pc, #500]	; (8002380 <HAL_RCC_OscConfig+0x628>)
 800218c:	2101      	movs	r1, #1
 800218e:	430a      	orrs	r2, r1
 8002190:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002192:	f7fe fcef 	bl	8000b74 <HAL_GetTick>
 8002196:	0003      	movs	r3, r0
 8002198:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800219a:	e008      	b.n	80021ae <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800219c:	f7fe fcea 	bl	8000b74 <HAL_GetTick>
 80021a0:	0002      	movs	r2, r0
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e0e3      	b.n	8002376 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80021ae:	4b74      	ldr	r3, [pc, #464]	; (8002380 <HAL_RCC_OscConfig+0x628>)
 80021b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021b2:	2202      	movs	r2, #2
 80021b4:	4013      	ands	r3, r2
 80021b6:	d0f1      	beq.n	800219c <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80021b8:	4b71      	ldr	r3, [pc, #452]	; (8002380 <HAL_RCC_OscConfig+0x628>)
 80021ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021bc:	22f8      	movs	r2, #248	; 0xf8
 80021be:	4393      	bics	r3, r2
 80021c0:	0019      	movs	r1, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	699b      	ldr	r3, [r3, #24]
 80021c6:	00da      	lsls	r2, r3, #3
 80021c8:	4b6d      	ldr	r3, [pc, #436]	; (8002380 <HAL_RCC_OscConfig+0x628>)
 80021ca:	430a      	orrs	r2, r1
 80021cc:	635a      	str	r2, [r3, #52]	; 0x34
 80021ce:	e034      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	695b      	ldr	r3, [r3, #20]
 80021d4:	3305      	adds	r3, #5
 80021d6:	d111      	bne.n	80021fc <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80021d8:	4b69      	ldr	r3, [pc, #420]	; (8002380 <HAL_RCC_OscConfig+0x628>)
 80021da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021dc:	4b68      	ldr	r3, [pc, #416]	; (8002380 <HAL_RCC_OscConfig+0x628>)
 80021de:	2104      	movs	r1, #4
 80021e0:	438a      	bics	r2, r1
 80021e2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80021e4:	4b66      	ldr	r3, [pc, #408]	; (8002380 <HAL_RCC_OscConfig+0x628>)
 80021e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021e8:	22f8      	movs	r2, #248	; 0xf8
 80021ea:	4393      	bics	r3, r2
 80021ec:	0019      	movs	r1, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	699b      	ldr	r3, [r3, #24]
 80021f2:	00da      	lsls	r2, r3, #3
 80021f4:	4b62      	ldr	r3, [pc, #392]	; (8002380 <HAL_RCC_OscConfig+0x628>)
 80021f6:	430a      	orrs	r2, r1
 80021f8:	635a      	str	r2, [r3, #52]	; 0x34
 80021fa:	e01e      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80021fc:	4b60      	ldr	r3, [pc, #384]	; (8002380 <HAL_RCC_OscConfig+0x628>)
 80021fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002200:	4b5f      	ldr	r3, [pc, #380]	; (8002380 <HAL_RCC_OscConfig+0x628>)
 8002202:	2104      	movs	r1, #4
 8002204:	430a      	orrs	r2, r1
 8002206:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002208:	4b5d      	ldr	r3, [pc, #372]	; (8002380 <HAL_RCC_OscConfig+0x628>)
 800220a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800220c:	4b5c      	ldr	r3, [pc, #368]	; (8002380 <HAL_RCC_OscConfig+0x628>)
 800220e:	2101      	movs	r1, #1
 8002210:	438a      	bics	r2, r1
 8002212:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002214:	f7fe fcae 	bl	8000b74 <HAL_GetTick>
 8002218:	0003      	movs	r3, r0
 800221a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800221c:	e008      	b.n	8002230 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800221e:	f7fe fca9 	bl	8000b74 <HAL_GetTick>
 8002222:	0002      	movs	r2, r0
 8002224:	69bb      	ldr	r3, [r7, #24]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	2b02      	cmp	r3, #2
 800222a:	d901      	bls.n	8002230 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e0a2      	b.n	8002376 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002230:	4b53      	ldr	r3, [pc, #332]	; (8002380 <HAL_RCC_OscConfig+0x628>)
 8002232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002234:	2202      	movs	r2, #2
 8002236:	4013      	ands	r3, r2
 8002238:	d1f1      	bne.n	800221e <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a1b      	ldr	r3, [r3, #32]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d100      	bne.n	8002244 <HAL_RCC_OscConfig+0x4ec>
 8002242:	e097      	b.n	8002374 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002244:	4b4e      	ldr	r3, [pc, #312]	; (8002380 <HAL_RCC_OscConfig+0x628>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	220c      	movs	r2, #12
 800224a:	4013      	ands	r3, r2
 800224c:	2b08      	cmp	r3, #8
 800224e:	d100      	bne.n	8002252 <HAL_RCC_OscConfig+0x4fa>
 8002250:	e06b      	b.n	800232a <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6a1b      	ldr	r3, [r3, #32]
 8002256:	2b02      	cmp	r3, #2
 8002258:	d14c      	bne.n	80022f4 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800225a:	4b49      	ldr	r3, [pc, #292]	; (8002380 <HAL_RCC_OscConfig+0x628>)
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	4b48      	ldr	r3, [pc, #288]	; (8002380 <HAL_RCC_OscConfig+0x628>)
 8002260:	494a      	ldr	r1, [pc, #296]	; (800238c <HAL_RCC_OscConfig+0x634>)
 8002262:	400a      	ands	r2, r1
 8002264:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002266:	f7fe fc85 	bl	8000b74 <HAL_GetTick>
 800226a:	0003      	movs	r3, r0
 800226c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800226e:	e008      	b.n	8002282 <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002270:	f7fe fc80 	bl	8000b74 <HAL_GetTick>
 8002274:	0002      	movs	r2, r0
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	2b02      	cmp	r3, #2
 800227c:	d901      	bls.n	8002282 <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e079      	b.n	8002376 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002282:	4b3f      	ldr	r3, [pc, #252]	; (8002380 <HAL_RCC_OscConfig+0x628>)
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	2380      	movs	r3, #128	; 0x80
 8002288:	049b      	lsls	r3, r3, #18
 800228a:	4013      	ands	r3, r2
 800228c:	d1f0      	bne.n	8002270 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800228e:	4b3c      	ldr	r3, [pc, #240]	; (8002380 <HAL_RCC_OscConfig+0x628>)
 8002290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002292:	220f      	movs	r2, #15
 8002294:	4393      	bics	r3, r2
 8002296:	0019      	movs	r1, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800229c:	4b38      	ldr	r3, [pc, #224]	; (8002380 <HAL_RCC_OscConfig+0x628>)
 800229e:	430a      	orrs	r2, r1
 80022a0:	62da      	str	r2, [r3, #44]	; 0x2c
 80022a2:	4b37      	ldr	r3, [pc, #220]	; (8002380 <HAL_RCC_OscConfig+0x628>)
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	4a3a      	ldr	r2, [pc, #232]	; (8002390 <HAL_RCC_OscConfig+0x638>)
 80022a8:	4013      	ands	r3, r2
 80022aa:	0019      	movs	r1, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b4:	431a      	orrs	r2, r3
 80022b6:	4b32      	ldr	r3, [pc, #200]	; (8002380 <HAL_RCC_OscConfig+0x628>)
 80022b8:	430a      	orrs	r2, r1
 80022ba:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022bc:	4b30      	ldr	r3, [pc, #192]	; (8002380 <HAL_RCC_OscConfig+0x628>)
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	4b2f      	ldr	r3, [pc, #188]	; (8002380 <HAL_RCC_OscConfig+0x628>)
 80022c2:	2180      	movs	r1, #128	; 0x80
 80022c4:	0449      	lsls	r1, r1, #17
 80022c6:	430a      	orrs	r2, r1
 80022c8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ca:	f7fe fc53 	bl	8000b74 <HAL_GetTick>
 80022ce:	0003      	movs	r3, r0
 80022d0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022d2:	e008      	b.n	80022e6 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022d4:	f7fe fc4e 	bl	8000b74 <HAL_GetTick>
 80022d8:	0002      	movs	r2, r0
 80022da:	69bb      	ldr	r3, [r7, #24]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e047      	b.n	8002376 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022e6:	4b26      	ldr	r3, [pc, #152]	; (8002380 <HAL_RCC_OscConfig+0x628>)
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	2380      	movs	r3, #128	; 0x80
 80022ec:	049b      	lsls	r3, r3, #18
 80022ee:	4013      	ands	r3, r2
 80022f0:	d0f0      	beq.n	80022d4 <HAL_RCC_OscConfig+0x57c>
 80022f2:	e03f      	b.n	8002374 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022f4:	4b22      	ldr	r3, [pc, #136]	; (8002380 <HAL_RCC_OscConfig+0x628>)
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	4b21      	ldr	r3, [pc, #132]	; (8002380 <HAL_RCC_OscConfig+0x628>)
 80022fa:	4924      	ldr	r1, [pc, #144]	; (800238c <HAL_RCC_OscConfig+0x634>)
 80022fc:	400a      	ands	r2, r1
 80022fe:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002300:	f7fe fc38 	bl	8000b74 <HAL_GetTick>
 8002304:	0003      	movs	r3, r0
 8002306:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002308:	e008      	b.n	800231c <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800230a:	f7fe fc33 	bl	8000b74 <HAL_GetTick>
 800230e:	0002      	movs	r2, r0
 8002310:	69bb      	ldr	r3, [r7, #24]
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	2b02      	cmp	r3, #2
 8002316:	d901      	bls.n	800231c <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	e02c      	b.n	8002376 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800231c:	4b18      	ldr	r3, [pc, #96]	; (8002380 <HAL_RCC_OscConfig+0x628>)
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	2380      	movs	r3, #128	; 0x80
 8002322:	049b      	lsls	r3, r3, #18
 8002324:	4013      	ands	r3, r2
 8002326:	d1f0      	bne.n	800230a <HAL_RCC_OscConfig+0x5b2>
 8002328:	e024      	b.n	8002374 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6a1b      	ldr	r3, [r3, #32]
 800232e:	2b01      	cmp	r3, #1
 8002330:	d101      	bne.n	8002336 <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e01f      	b.n	8002376 <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002336:	4b12      	ldr	r3, [pc, #72]	; (8002380 <HAL_RCC_OscConfig+0x628>)
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800233c:	4b10      	ldr	r3, [pc, #64]	; (8002380 <HAL_RCC_OscConfig+0x628>)
 800233e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002340:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002342:	697a      	ldr	r2, [r7, #20]
 8002344:	23c0      	movs	r3, #192	; 0xc0
 8002346:	025b      	lsls	r3, r3, #9
 8002348:	401a      	ands	r2, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234e:	429a      	cmp	r2, r3
 8002350:	d10e      	bne.n	8002370 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	220f      	movs	r2, #15
 8002356:	401a      	ands	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800235c:	429a      	cmp	r2, r3
 800235e:	d107      	bne.n	8002370 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002360:	697a      	ldr	r2, [r7, #20]
 8002362:	23f0      	movs	r3, #240	; 0xf0
 8002364:	039b      	lsls	r3, r3, #14
 8002366:	401a      	ands	r2, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800236c:	429a      	cmp	r2, r3
 800236e:	d001      	beq.n	8002374 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e000      	b.n	8002376 <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8002374:	2300      	movs	r3, #0
}
 8002376:	0018      	movs	r0, r3
 8002378:	46bd      	mov	sp, r7
 800237a:	b008      	add	sp, #32
 800237c:	bd80      	pop	{r7, pc}
 800237e:	46c0      	nop			; (mov r8, r8)
 8002380:	40021000 	.word	0x40021000
 8002384:	00001388 	.word	0x00001388
 8002388:	efffffff 	.word	0xefffffff
 800238c:	feffffff 	.word	0xfeffffff
 8002390:	ffc27fff 	.word	0xffc27fff

08002394 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d101      	bne.n	80023a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e0b3      	b.n	8002510 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023a8:	4b5b      	ldr	r3, [pc, #364]	; (8002518 <HAL_RCC_ClockConfig+0x184>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2201      	movs	r2, #1
 80023ae:	4013      	ands	r3, r2
 80023b0:	683a      	ldr	r2, [r7, #0]
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d911      	bls.n	80023da <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023b6:	4b58      	ldr	r3, [pc, #352]	; (8002518 <HAL_RCC_ClockConfig+0x184>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	2201      	movs	r2, #1
 80023bc:	4393      	bics	r3, r2
 80023be:	0019      	movs	r1, r3
 80023c0:	4b55      	ldr	r3, [pc, #340]	; (8002518 <HAL_RCC_ClockConfig+0x184>)
 80023c2:	683a      	ldr	r2, [r7, #0]
 80023c4:	430a      	orrs	r2, r1
 80023c6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023c8:	4b53      	ldr	r3, [pc, #332]	; (8002518 <HAL_RCC_ClockConfig+0x184>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2201      	movs	r2, #1
 80023ce:	4013      	ands	r3, r2
 80023d0:	683a      	ldr	r2, [r7, #0]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d001      	beq.n	80023da <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e09a      	b.n	8002510 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2202      	movs	r2, #2
 80023e0:	4013      	ands	r3, r2
 80023e2:	d015      	beq.n	8002410 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2204      	movs	r2, #4
 80023ea:	4013      	ands	r3, r2
 80023ec:	d006      	beq.n	80023fc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80023ee:	4b4b      	ldr	r3, [pc, #300]	; (800251c <HAL_RCC_ClockConfig+0x188>)
 80023f0:	685a      	ldr	r2, [r3, #4]
 80023f2:	4b4a      	ldr	r3, [pc, #296]	; (800251c <HAL_RCC_ClockConfig+0x188>)
 80023f4:	21e0      	movs	r1, #224	; 0xe0
 80023f6:	00c9      	lsls	r1, r1, #3
 80023f8:	430a      	orrs	r2, r1
 80023fa:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023fc:	4b47      	ldr	r3, [pc, #284]	; (800251c <HAL_RCC_ClockConfig+0x188>)
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	22f0      	movs	r2, #240	; 0xf0
 8002402:	4393      	bics	r3, r2
 8002404:	0019      	movs	r1, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	689a      	ldr	r2, [r3, #8]
 800240a:	4b44      	ldr	r3, [pc, #272]	; (800251c <HAL_RCC_ClockConfig+0x188>)
 800240c:	430a      	orrs	r2, r1
 800240e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2201      	movs	r2, #1
 8002416:	4013      	ands	r3, r2
 8002418:	d040      	beq.n	800249c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	2b01      	cmp	r3, #1
 8002420:	d107      	bne.n	8002432 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002422:	4b3e      	ldr	r3, [pc, #248]	; (800251c <HAL_RCC_ClockConfig+0x188>)
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	2380      	movs	r3, #128	; 0x80
 8002428:	029b      	lsls	r3, r3, #10
 800242a:	4013      	ands	r3, r2
 800242c:	d114      	bne.n	8002458 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e06e      	b.n	8002510 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	2b02      	cmp	r3, #2
 8002438:	d107      	bne.n	800244a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800243a:	4b38      	ldr	r3, [pc, #224]	; (800251c <HAL_RCC_ClockConfig+0x188>)
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	2380      	movs	r3, #128	; 0x80
 8002440:	049b      	lsls	r3, r3, #18
 8002442:	4013      	ands	r3, r2
 8002444:	d108      	bne.n	8002458 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e062      	b.n	8002510 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800244a:	4b34      	ldr	r3, [pc, #208]	; (800251c <HAL_RCC_ClockConfig+0x188>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2202      	movs	r2, #2
 8002450:	4013      	ands	r3, r2
 8002452:	d101      	bne.n	8002458 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e05b      	b.n	8002510 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002458:	4b30      	ldr	r3, [pc, #192]	; (800251c <HAL_RCC_ClockConfig+0x188>)
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	2203      	movs	r2, #3
 800245e:	4393      	bics	r3, r2
 8002460:	0019      	movs	r1, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685a      	ldr	r2, [r3, #4]
 8002466:	4b2d      	ldr	r3, [pc, #180]	; (800251c <HAL_RCC_ClockConfig+0x188>)
 8002468:	430a      	orrs	r2, r1
 800246a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800246c:	f7fe fb82 	bl	8000b74 <HAL_GetTick>
 8002470:	0003      	movs	r3, r0
 8002472:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002474:	e009      	b.n	800248a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002476:	f7fe fb7d 	bl	8000b74 <HAL_GetTick>
 800247a:	0002      	movs	r2, r0
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	4a27      	ldr	r2, [pc, #156]	; (8002520 <HAL_RCC_ClockConfig+0x18c>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d901      	bls.n	800248a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e042      	b.n	8002510 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800248a:	4b24      	ldr	r3, [pc, #144]	; (800251c <HAL_RCC_ClockConfig+0x188>)
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	220c      	movs	r2, #12
 8002490:	401a      	ands	r2, r3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	429a      	cmp	r2, r3
 800249a:	d1ec      	bne.n	8002476 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800249c:	4b1e      	ldr	r3, [pc, #120]	; (8002518 <HAL_RCC_ClockConfig+0x184>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2201      	movs	r2, #1
 80024a2:	4013      	ands	r3, r2
 80024a4:	683a      	ldr	r2, [r7, #0]
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d211      	bcs.n	80024ce <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024aa:	4b1b      	ldr	r3, [pc, #108]	; (8002518 <HAL_RCC_ClockConfig+0x184>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	2201      	movs	r2, #1
 80024b0:	4393      	bics	r3, r2
 80024b2:	0019      	movs	r1, r3
 80024b4:	4b18      	ldr	r3, [pc, #96]	; (8002518 <HAL_RCC_ClockConfig+0x184>)
 80024b6:	683a      	ldr	r2, [r7, #0]
 80024b8:	430a      	orrs	r2, r1
 80024ba:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024bc:	4b16      	ldr	r3, [pc, #88]	; (8002518 <HAL_RCC_ClockConfig+0x184>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2201      	movs	r2, #1
 80024c2:	4013      	ands	r3, r2
 80024c4:	683a      	ldr	r2, [r7, #0]
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d001      	beq.n	80024ce <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e020      	b.n	8002510 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	2204      	movs	r2, #4
 80024d4:	4013      	ands	r3, r2
 80024d6:	d009      	beq.n	80024ec <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80024d8:	4b10      	ldr	r3, [pc, #64]	; (800251c <HAL_RCC_ClockConfig+0x188>)
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	4a11      	ldr	r2, [pc, #68]	; (8002524 <HAL_RCC_ClockConfig+0x190>)
 80024de:	4013      	ands	r3, r2
 80024e0:	0019      	movs	r1, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	68da      	ldr	r2, [r3, #12]
 80024e6:	4b0d      	ldr	r3, [pc, #52]	; (800251c <HAL_RCC_ClockConfig+0x188>)
 80024e8:	430a      	orrs	r2, r1
 80024ea:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80024ec:	f000 f820 	bl	8002530 <HAL_RCC_GetSysClockFreq>
 80024f0:	0001      	movs	r1, r0
 80024f2:	4b0a      	ldr	r3, [pc, #40]	; (800251c <HAL_RCC_ClockConfig+0x188>)
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	091b      	lsrs	r3, r3, #4
 80024f8:	220f      	movs	r2, #15
 80024fa:	4013      	ands	r3, r2
 80024fc:	4a0a      	ldr	r2, [pc, #40]	; (8002528 <HAL_RCC_ClockConfig+0x194>)
 80024fe:	5cd3      	ldrb	r3, [r2, r3]
 8002500:	000a      	movs	r2, r1
 8002502:	40da      	lsrs	r2, r3
 8002504:	4b09      	ldr	r3, [pc, #36]	; (800252c <HAL_RCC_ClockConfig+0x198>)
 8002506:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002508:	2003      	movs	r0, #3
 800250a:	f7fe faed 	bl	8000ae8 <HAL_InitTick>
  
  return HAL_OK;
 800250e:	2300      	movs	r3, #0
}
 8002510:	0018      	movs	r0, r3
 8002512:	46bd      	mov	sp, r7
 8002514:	b004      	add	sp, #16
 8002516:	bd80      	pop	{r7, pc}
 8002518:	40022000 	.word	0x40022000
 800251c:	40021000 	.word	0x40021000
 8002520:	00001388 	.word	0x00001388
 8002524:	fffff8ff 	.word	0xfffff8ff
 8002528:	0800386c 	.word	0x0800386c
 800252c:	20000000 	.word	0x20000000

08002530 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002530:	b590      	push	{r4, r7, lr}
 8002532:	b08f      	sub	sp, #60	; 0x3c
 8002534:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002536:	2314      	movs	r3, #20
 8002538:	18fb      	adds	r3, r7, r3
 800253a:	4a2c      	ldr	r2, [pc, #176]	; (80025ec <HAL_RCC_GetSysClockFreq+0xbc>)
 800253c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800253e:	c313      	stmia	r3!, {r0, r1, r4}
 8002540:	6812      	ldr	r2, [r2, #0]
 8002542:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002544:	1d3b      	adds	r3, r7, #4
 8002546:	4a2a      	ldr	r2, [pc, #168]	; (80025f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002548:	ca13      	ldmia	r2!, {r0, r1, r4}
 800254a:	c313      	stmia	r3!, {r0, r1, r4}
 800254c:	6812      	ldr	r2, [r2, #0]
 800254e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002550:	2300      	movs	r3, #0
 8002552:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002554:	2300      	movs	r3, #0
 8002556:	62bb      	str	r3, [r7, #40]	; 0x28
 8002558:	2300      	movs	r3, #0
 800255a:	637b      	str	r3, [r7, #52]	; 0x34
 800255c:	2300      	movs	r3, #0
 800255e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002560:	2300      	movs	r3, #0
 8002562:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002564:	4b23      	ldr	r3, [pc, #140]	; (80025f4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800256a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800256c:	220c      	movs	r2, #12
 800256e:	4013      	ands	r3, r2
 8002570:	2b04      	cmp	r3, #4
 8002572:	d002      	beq.n	800257a <HAL_RCC_GetSysClockFreq+0x4a>
 8002574:	2b08      	cmp	r3, #8
 8002576:	d003      	beq.n	8002580 <HAL_RCC_GetSysClockFreq+0x50>
 8002578:	e02f      	b.n	80025da <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800257a:	4b1f      	ldr	r3, [pc, #124]	; (80025f8 <HAL_RCC_GetSysClockFreq+0xc8>)
 800257c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800257e:	e02f      	b.n	80025e0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002582:	0c9b      	lsrs	r3, r3, #18
 8002584:	220f      	movs	r2, #15
 8002586:	4013      	ands	r3, r2
 8002588:	2214      	movs	r2, #20
 800258a:	18ba      	adds	r2, r7, r2
 800258c:	5cd3      	ldrb	r3, [r2, r3]
 800258e:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002590:	4b18      	ldr	r3, [pc, #96]	; (80025f4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002594:	220f      	movs	r2, #15
 8002596:	4013      	ands	r3, r2
 8002598:	1d3a      	adds	r2, r7, #4
 800259a:	5cd3      	ldrb	r3, [r2, r3]
 800259c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800259e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025a0:	23c0      	movs	r3, #192	; 0xc0
 80025a2:	025b      	lsls	r3, r3, #9
 80025a4:	401a      	ands	r2, r3
 80025a6:	2380      	movs	r3, #128	; 0x80
 80025a8:	025b      	lsls	r3, r3, #9
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d109      	bne.n	80025c2 <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80025ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025b0:	4811      	ldr	r0, [pc, #68]	; (80025f8 <HAL_RCC_GetSysClockFreq+0xc8>)
 80025b2:	f7fd fda9 	bl	8000108 <__udivsi3>
 80025b6:	0003      	movs	r3, r0
 80025b8:	001a      	movs	r2, r3
 80025ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025bc:	4353      	muls	r3, r2
 80025be:	637b      	str	r3, [r7, #52]	; 0x34
 80025c0:	e008      	b.n	80025d4 <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80025c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025c4:	480c      	ldr	r0, [pc, #48]	; (80025f8 <HAL_RCC_GetSysClockFreq+0xc8>)
 80025c6:	f7fd fd9f 	bl	8000108 <__udivsi3>
 80025ca:	0003      	movs	r3, r0
 80025cc:	001a      	movs	r2, r3
 80025ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d0:	4353      	muls	r3, r2
 80025d2:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80025d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025d6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80025d8:	e002      	b.n	80025e0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025da:	4b07      	ldr	r3, [pc, #28]	; (80025f8 <HAL_RCC_GetSysClockFreq+0xc8>)
 80025dc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80025de:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80025e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80025e2:	0018      	movs	r0, r3
 80025e4:	46bd      	mov	sp, r7
 80025e6:	b00f      	add	sp, #60	; 0x3c
 80025e8:	bd90      	pop	{r4, r7, pc}
 80025ea:	46c0      	nop			; (mov r8, r8)
 80025ec:	0800384c 	.word	0x0800384c
 80025f0:	0800385c 	.word	0x0800385c
 80025f4:	40021000 	.word	0x40021000
 80025f8:	007a1200 	.word	0x007a1200

080025fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b086      	sub	sp, #24
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002604:	2300      	movs	r3, #0
 8002606:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002608:	2300      	movs	r3, #0
 800260a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	2380      	movs	r3, #128	; 0x80
 8002612:	025b      	lsls	r3, r3, #9
 8002614:	4013      	ands	r3, r2
 8002616:	d100      	bne.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002618:	e08e      	b.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800261a:	2017      	movs	r0, #23
 800261c:	183b      	adds	r3, r7, r0
 800261e:	2200      	movs	r2, #0
 8002620:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002622:	4b5f      	ldr	r3, [pc, #380]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002624:	69da      	ldr	r2, [r3, #28]
 8002626:	2380      	movs	r3, #128	; 0x80
 8002628:	055b      	lsls	r3, r3, #21
 800262a:	4013      	ands	r3, r2
 800262c:	d110      	bne.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800262e:	4b5c      	ldr	r3, [pc, #368]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002630:	69da      	ldr	r2, [r3, #28]
 8002632:	4b5b      	ldr	r3, [pc, #364]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002634:	2180      	movs	r1, #128	; 0x80
 8002636:	0549      	lsls	r1, r1, #21
 8002638:	430a      	orrs	r2, r1
 800263a:	61da      	str	r2, [r3, #28]
 800263c:	4b58      	ldr	r3, [pc, #352]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800263e:	69da      	ldr	r2, [r3, #28]
 8002640:	2380      	movs	r3, #128	; 0x80
 8002642:	055b      	lsls	r3, r3, #21
 8002644:	4013      	ands	r3, r2
 8002646:	60bb      	str	r3, [r7, #8]
 8002648:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800264a:	183b      	adds	r3, r7, r0
 800264c:	2201      	movs	r2, #1
 800264e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002650:	4b54      	ldr	r3, [pc, #336]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	2380      	movs	r3, #128	; 0x80
 8002656:	005b      	lsls	r3, r3, #1
 8002658:	4013      	ands	r3, r2
 800265a:	d11a      	bne.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800265c:	4b51      	ldr	r3, [pc, #324]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	4b50      	ldr	r3, [pc, #320]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002662:	2180      	movs	r1, #128	; 0x80
 8002664:	0049      	lsls	r1, r1, #1
 8002666:	430a      	orrs	r2, r1
 8002668:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800266a:	f7fe fa83 	bl	8000b74 <HAL_GetTick>
 800266e:	0003      	movs	r3, r0
 8002670:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002672:	e008      	b.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002674:	f7fe fa7e 	bl	8000b74 <HAL_GetTick>
 8002678:	0002      	movs	r2, r0
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b64      	cmp	r3, #100	; 0x64
 8002680:	d901      	bls.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e087      	b.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002686:	4b47      	ldr	r3, [pc, #284]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	2380      	movs	r3, #128	; 0x80
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	4013      	ands	r3, r2
 8002690:	d0f0      	beq.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002692:	4b43      	ldr	r3, [pc, #268]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002694:	6a1a      	ldr	r2, [r3, #32]
 8002696:	23c0      	movs	r3, #192	; 0xc0
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	4013      	ands	r3, r2
 800269c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d034      	beq.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x112>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685a      	ldr	r2, [r3, #4]
 80026a8:	23c0      	movs	r3, #192	; 0xc0
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	4013      	ands	r3, r2
 80026ae:	68fa      	ldr	r2, [r7, #12]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d02c      	beq.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80026b4:	4b3a      	ldr	r3, [pc, #232]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80026b6:	6a1b      	ldr	r3, [r3, #32]
 80026b8:	4a3b      	ldr	r2, [pc, #236]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026ba:	4013      	ands	r3, r2
 80026bc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80026be:	4b38      	ldr	r3, [pc, #224]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80026c0:	6a1a      	ldr	r2, [r3, #32]
 80026c2:	4b37      	ldr	r3, [pc, #220]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80026c4:	2180      	movs	r1, #128	; 0x80
 80026c6:	0249      	lsls	r1, r1, #9
 80026c8:	430a      	orrs	r2, r1
 80026ca:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80026cc:	4b34      	ldr	r3, [pc, #208]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80026ce:	6a1a      	ldr	r2, [r3, #32]
 80026d0:	4b33      	ldr	r3, [pc, #204]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80026d2:	4936      	ldr	r1, [pc, #216]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80026d4:	400a      	ands	r2, r1
 80026d6:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80026d8:	4b31      	ldr	r3, [pc, #196]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80026da:	68fa      	ldr	r2, [r7, #12]
 80026dc:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2201      	movs	r2, #1
 80026e2:	4013      	ands	r3, r2
 80026e4:	d013      	beq.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e6:	f7fe fa45 	bl	8000b74 <HAL_GetTick>
 80026ea:	0003      	movs	r3, r0
 80026ec:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026ee:	e009      	b.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026f0:	f7fe fa40 	bl	8000b74 <HAL_GetTick>
 80026f4:	0002      	movs	r2, r0
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	4a2d      	ldr	r2, [pc, #180]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d901      	bls.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	e048      	b.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002704:	4b26      	ldr	r3, [pc, #152]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002706:	6a1b      	ldr	r3, [r3, #32]
 8002708:	2202      	movs	r2, #2
 800270a:	4013      	ands	r3, r2
 800270c:	d0f0      	beq.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800270e:	4b24      	ldr	r3, [pc, #144]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002710:	6a1b      	ldr	r3, [r3, #32]
 8002712:	4a25      	ldr	r2, [pc, #148]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002714:	4013      	ands	r3, r2
 8002716:	0019      	movs	r1, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685a      	ldr	r2, [r3, #4]
 800271c:	4b20      	ldr	r3, [pc, #128]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800271e:	430a      	orrs	r2, r1
 8002720:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002722:	2317      	movs	r3, #23
 8002724:	18fb      	adds	r3, r7, r3
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	2b01      	cmp	r3, #1
 800272a:	d105      	bne.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800272c:	4b1c      	ldr	r3, [pc, #112]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800272e:	69da      	ldr	r2, [r3, #28]
 8002730:	4b1b      	ldr	r3, [pc, #108]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002732:	4920      	ldr	r1, [pc, #128]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002734:	400a      	ands	r2, r1
 8002736:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2201      	movs	r2, #1
 800273e:	4013      	ands	r3, r2
 8002740:	d009      	beq.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002742:	4b17      	ldr	r3, [pc, #92]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002746:	2203      	movs	r2, #3
 8002748:	4393      	bics	r3, r2
 800274a:	0019      	movs	r1, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	689a      	ldr	r2, [r3, #8]
 8002750:	4b13      	ldr	r3, [pc, #76]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002752:	430a      	orrs	r2, r1
 8002754:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2220      	movs	r2, #32
 800275c:	4013      	ands	r3, r2
 800275e:	d009      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002760:	4b0f      	ldr	r3, [pc, #60]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002764:	2210      	movs	r2, #16
 8002766:	4393      	bics	r3, r2
 8002768:	0019      	movs	r1, r3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	68da      	ldr	r2, [r3, #12]
 800276e:	4b0c      	ldr	r3, [pc, #48]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002770:	430a      	orrs	r2, r1
 8002772:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	2380      	movs	r3, #128	; 0x80
 800277a:	029b      	lsls	r3, r3, #10
 800277c:	4013      	ands	r3, r2
 800277e:	d009      	beq.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002780:	4b07      	ldr	r3, [pc, #28]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002784:	2280      	movs	r2, #128	; 0x80
 8002786:	4393      	bics	r3, r2
 8002788:	0019      	movs	r1, r3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	691a      	ldr	r2, [r3, #16]
 800278e:	4b04      	ldr	r3, [pc, #16]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002790:	430a      	orrs	r2, r1
 8002792:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002794:	2300      	movs	r3, #0
}
 8002796:	0018      	movs	r0, r3
 8002798:	46bd      	mov	sp, r7
 800279a:	b006      	add	sp, #24
 800279c:	bd80      	pop	{r7, pc}
 800279e:	46c0      	nop			; (mov r8, r8)
 80027a0:	40021000 	.word	0x40021000
 80027a4:	40007000 	.word	0x40007000
 80027a8:	fffffcff 	.word	0xfffffcff
 80027ac:	fffeffff 	.word	0xfffeffff
 80027b0:	00001388 	.word	0x00001388
 80027b4:	efffffff 	.word	0xefffffff

080027b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d101      	bne.n	80027ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e042      	b.n	8002850 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	223d      	movs	r2, #61	; 0x3d
 80027ce:	5c9b      	ldrb	r3, [r3, r2]
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d107      	bne.n	80027e6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	223c      	movs	r2, #60	; 0x3c
 80027da:	2100      	movs	r1, #0
 80027dc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	0018      	movs	r0, r3
 80027e2:	f7fe f8c7 	bl	8000974 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	223d      	movs	r2, #61	; 0x3d
 80027ea:	2102      	movs	r1, #2
 80027ec:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	3304      	adds	r3, #4
 80027f6:	0019      	movs	r1, r3
 80027f8:	0010      	movs	r0, r2
 80027fa:	f000 fad1 	bl	8002da0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2246      	movs	r2, #70	; 0x46
 8002802:	2101      	movs	r1, #1
 8002804:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	223e      	movs	r2, #62	; 0x3e
 800280a:	2101      	movs	r1, #1
 800280c:	5499      	strb	r1, [r3, r2]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	223f      	movs	r2, #63	; 0x3f
 8002812:	2101      	movs	r1, #1
 8002814:	5499      	strb	r1, [r3, r2]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2240      	movs	r2, #64	; 0x40
 800281a:	2101      	movs	r1, #1
 800281c:	5499      	strb	r1, [r3, r2]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2241      	movs	r2, #65	; 0x41
 8002822:	2101      	movs	r1, #1
 8002824:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2242      	movs	r2, #66	; 0x42
 800282a:	2101      	movs	r1, #1
 800282c:	5499      	strb	r1, [r3, r2]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2243      	movs	r2, #67	; 0x43
 8002832:	2101      	movs	r1, #1
 8002834:	5499      	strb	r1, [r3, r2]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2244      	movs	r2, #68	; 0x44
 800283a:	2101      	movs	r1, #1
 800283c:	5499      	strb	r1, [r3, r2]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2245      	movs	r2, #69	; 0x45
 8002842:	2101      	movs	r1, #1
 8002844:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	223d      	movs	r2, #61	; 0x3d
 800284a:	2101      	movs	r1, #1
 800284c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800284e:	2300      	movs	r3, #0
}
 8002850:	0018      	movs	r0, r3
 8002852:	46bd      	mov	sp, r7
 8002854:	b002      	add	sp, #8
 8002856:	bd80      	pop	{r7, pc}

08002858 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d101      	bne.n	800286a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e042      	b.n	80028f0 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	223d      	movs	r2, #61	; 0x3d
 800286e:	5c9b      	ldrb	r3, [r3, r2]
 8002870:	b2db      	uxtb	r3, r3
 8002872:	2b00      	cmp	r3, #0
 8002874:	d107      	bne.n	8002886 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	223c      	movs	r2, #60	; 0x3c
 800287a:	2100      	movs	r1, #0
 800287c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	0018      	movs	r0, r3
 8002882:	f000 f839 	bl	80028f8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	223d      	movs	r2, #61	; 0x3d
 800288a:	2102      	movs	r1, #2
 800288c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	3304      	adds	r3, #4
 8002896:	0019      	movs	r1, r3
 8002898:	0010      	movs	r0, r2
 800289a:	f000 fa81 	bl	8002da0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2246      	movs	r2, #70	; 0x46
 80028a2:	2101      	movs	r1, #1
 80028a4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	223e      	movs	r2, #62	; 0x3e
 80028aa:	2101      	movs	r1, #1
 80028ac:	5499      	strb	r1, [r3, r2]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	223f      	movs	r2, #63	; 0x3f
 80028b2:	2101      	movs	r1, #1
 80028b4:	5499      	strb	r1, [r3, r2]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2240      	movs	r2, #64	; 0x40
 80028ba:	2101      	movs	r1, #1
 80028bc:	5499      	strb	r1, [r3, r2]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2241      	movs	r2, #65	; 0x41
 80028c2:	2101      	movs	r1, #1
 80028c4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2242      	movs	r2, #66	; 0x42
 80028ca:	2101      	movs	r1, #1
 80028cc:	5499      	strb	r1, [r3, r2]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2243      	movs	r2, #67	; 0x43
 80028d2:	2101      	movs	r1, #1
 80028d4:	5499      	strb	r1, [r3, r2]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2244      	movs	r2, #68	; 0x44
 80028da:	2101      	movs	r1, #1
 80028dc:	5499      	strb	r1, [r3, r2]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2245      	movs	r2, #69	; 0x45
 80028e2:	2101      	movs	r1, #1
 80028e4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	223d      	movs	r2, #61	; 0x3d
 80028ea:	2101      	movs	r1, #1
 80028ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80028ee:	2300      	movs	r3, #0
}
 80028f0:	0018      	movs	r0, r3
 80028f2:	46bd      	mov	sp, r7
 80028f4:	b002      	add	sp, #8
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002900:	46c0      	nop			; (mov r8, r8)
 8002902:	46bd      	mov	sp, r7
 8002904:	b002      	add	sp, #8
 8002906:	bd80      	pop	{r7, pc}

08002908 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d108      	bne.n	800292a <HAL_TIM_PWM_Start+0x22>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	223e      	movs	r2, #62	; 0x3e
 800291c:	5c9b      	ldrb	r3, [r3, r2]
 800291e:	b2db      	uxtb	r3, r3
 8002920:	3b01      	subs	r3, #1
 8002922:	1e5a      	subs	r2, r3, #1
 8002924:	4193      	sbcs	r3, r2
 8002926:	b2db      	uxtb	r3, r3
 8002928:	e01f      	b.n	800296a <HAL_TIM_PWM_Start+0x62>
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	2b04      	cmp	r3, #4
 800292e:	d108      	bne.n	8002942 <HAL_TIM_PWM_Start+0x3a>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	223f      	movs	r2, #63	; 0x3f
 8002934:	5c9b      	ldrb	r3, [r3, r2]
 8002936:	b2db      	uxtb	r3, r3
 8002938:	3b01      	subs	r3, #1
 800293a:	1e5a      	subs	r2, r3, #1
 800293c:	4193      	sbcs	r3, r2
 800293e:	b2db      	uxtb	r3, r3
 8002940:	e013      	b.n	800296a <HAL_TIM_PWM_Start+0x62>
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	2b08      	cmp	r3, #8
 8002946:	d108      	bne.n	800295a <HAL_TIM_PWM_Start+0x52>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2240      	movs	r2, #64	; 0x40
 800294c:	5c9b      	ldrb	r3, [r3, r2]
 800294e:	b2db      	uxtb	r3, r3
 8002950:	3b01      	subs	r3, #1
 8002952:	1e5a      	subs	r2, r3, #1
 8002954:	4193      	sbcs	r3, r2
 8002956:	b2db      	uxtb	r3, r3
 8002958:	e007      	b.n	800296a <HAL_TIM_PWM_Start+0x62>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2241      	movs	r2, #65	; 0x41
 800295e:	5c9b      	ldrb	r3, [r3, r2]
 8002960:	b2db      	uxtb	r3, r3
 8002962:	3b01      	subs	r3, #1
 8002964:	1e5a      	subs	r2, r3, #1
 8002966:	4193      	sbcs	r3, r2
 8002968:	b2db      	uxtb	r3, r3
 800296a:	2b00      	cmp	r3, #0
 800296c:	d001      	beq.n	8002972 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e06e      	b.n	8002a50 <HAL_TIM_PWM_Start+0x148>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d104      	bne.n	8002982 <HAL_TIM_PWM_Start+0x7a>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	223e      	movs	r2, #62	; 0x3e
 800297c:	2102      	movs	r1, #2
 800297e:	5499      	strb	r1, [r3, r2]
 8002980:	e013      	b.n	80029aa <HAL_TIM_PWM_Start+0xa2>
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	2b04      	cmp	r3, #4
 8002986:	d104      	bne.n	8002992 <HAL_TIM_PWM_Start+0x8a>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	223f      	movs	r2, #63	; 0x3f
 800298c:	2102      	movs	r1, #2
 800298e:	5499      	strb	r1, [r3, r2]
 8002990:	e00b      	b.n	80029aa <HAL_TIM_PWM_Start+0xa2>
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	2b08      	cmp	r3, #8
 8002996:	d104      	bne.n	80029a2 <HAL_TIM_PWM_Start+0x9a>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2240      	movs	r2, #64	; 0x40
 800299c:	2102      	movs	r1, #2
 800299e:	5499      	strb	r1, [r3, r2]
 80029a0:	e003      	b.n	80029aa <HAL_TIM_PWM_Start+0xa2>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2241      	movs	r2, #65	; 0x41
 80029a6:	2102      	movs	r1, #2
 80029a8:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	6839      	ldr	r1, [r7, #0]
 80029b0:	2201      	movs	r2, #1
 80029b2:	0018      	movs	r0, r3
 80029b4:	f000 fd00 	bl	80033b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a26      	ldr	r2, [pc, #152]	; (8002a58 <HAL_TIM_PWM_Start+0x150>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d00e      	beq.n	80029e0 <HAL_TIM_PWM_Start+0xd8>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a25      	ldr	r2, [pc, #148]	; (8002a5c <HAL_TIM_PWM_Start+0x154>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d009      	beq.n	80029e0 <HAL_TIM_PWM_Start+0xd8>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a23      	ldr	r2, [pc, #140]	; (8002a60 <HAL_TIM_PWM_Start+0x158>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d004      	beq.n	80029e0 <HAL_TIM_PWM_Start+0xd8>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a22      	ldr	r2, [pc, #136]	; (8002a64 <HAL_TIM_PWM_Start+0x15c>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d101      	bne.n	80029e4 <HAL_TIM_PWM_Start+0xdc>
 80029e0:	2301      	movs	r3, #1
 80029e2:	e000      	b.n	80029e6 <HAL_TIM_PWM_Start+0xde>
 80029e4:	2300      	movs	r3, #0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d008      	beq.n	80029fc <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2180      	movs	r1, #128	; 0x80
 80029f6:	0209      	lsls	r1, r1, #8
 80029f8:	430a      	orrs	r2, r1
 80029fa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a15      	ldr	r2, [pc, #84]	; (8002a58 <HAL_TIM_PWM_Start+0x150>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d009      	beq.n	8002a1a <HAL_TIM_PWM_Start+0x112>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a17      	ldr	r2, [pc, #92]	; (8002a68 <HAL_TIM_PWM_Start+0x160>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d004      	beq.n	8002a1a <HAL_TIM_PWM_Start+0x112>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a11      	ldr	r2, [pc, #68]	; (8002a5c <HAL_TIM_PWM_Start+0x154>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d111      	bne.n	8002a3e <HAL_TIM_PWM_Start+0x136>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	2207      	movs	r2, #7
 8002a22:	4013      	ands	r3, r2
 8002a24:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2b06      	cmp	r3, #6
 8002a2a:	d010      	beq.n	8002a4e <HAL_TIM_PWM_Start+0x146>
    {
      __HAL_TIM_ENABLE(htim);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	2101      	movs	r1, #1
 8002a38:	430a      	orrs	r2, r1
 8002a3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a3c:	e007      	b.n	8002a4e <HAL_TIM_PWM_Start+0x146>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	2101      	movs	r1, #1
 8002a4a:	430a      	orrs	r2, r1
 8002a4c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a4e:	2300      	movs	r3, #0
}
 8002a50:	0018      	movs	r0, r3
 8002a52:	46bd      	mov	sp, r7
 8002a54:	b004      	add	sp, #16
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	40012c00 	.word	0x40012c00
 8002a5c:	40014000 	.word	0x40014000
 8002a60:	40014400 	.word	0x40014400
 8002a64:	40014800 	.word	0x40014800
 8002a68:	40000400 	.word	0x40000400

08002a6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b086      	sub	sp, #24
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a78:	2317      	movs	r3, #23
 8002a7a:	18fb      	adds	r3, r7, r3
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	223c      	movs	r2, #60	; 0x3c
 8002a84:	5c9b      	ldrb	r3, [r3, r2]
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d101      	bne.n	8002a8e <HAL_TIM_PWM_ConfigChannel+0x22>
 8002a8a:	2302      	movs	r3, #2
 8002a8c:	e0ad      	b.n	8002bea <HAL_TIM_PWM_ConfigChannel+0x17e>
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	223c      	movs	r2, #60	; 0x3c
 8002a92:	2101      	movs	r1, #1
 8002a94:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2b0c      	cmp	r3, #12
 8002a9a:	d100      	bne.n	8002a9e <HAL_TIM_PWM_ConfigChannel+0x32>
 8002a9c:	e076      	b.n	8002b8c <HAL_TIM_PWM_ConfigChannel+0x120>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2b0c      	cmp	r3, #12
 8002aa2:	d900      	bls.n	8002aa6 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8002aa4:	e095      	b.n	8002bd2 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2b08      	cmp	r3, #8
 8002aaa:	d04e      	beq.n	8002b4a <HAL_TIM_PWM_ConfigChannel+0xde>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2b08      	cmp	r3, #8
 8002ab0:	d900      	bls.n	8002ab4 <HAL_TIM_PWM_ConfigChannel+0x48>
 8002ab2:	e08e      	b.n	8002bd2 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d003      	beq.n	8002ac2 <HAL_TIM_PWM_ConfigChannel+0x56>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2b04      	cmp	r3, #4
 8002abe:	d021      	beq.n	8002b04 <HAL_TIM_PWM_ConfigChannel+0x98>
 8002ac0:	e087      	b.n	8002bd2 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	68ba      	ldr	r2, [r7, #8]
 8002ac8:	0011      	movs	r1, r2
 8002aca:	0018      	movs	r0, r3
 8002acc:	f000 f9de 	bl	8002e8c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	699a      	ldr	r2, [r3, #24]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2108      	movs	r1, #8
 8002adc:	430a      	orrs	r2, r1
 8002ade:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	699a      	ldr	r2, [r3, #24]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	2104      	movs	r1, #4
 8002aec:	438a      	bics	r2, r1
 8002aee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	6999      	ldr	r1, [r3, #24]
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	691a      	ldr	r2, [r3, #16]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	430a      	orrs	r2, r1
 8002b00:	619a      	str	r2, [r3, #24]
      break;
 8002b02:	e06b      	b.n	8002bdc <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	68ba      	ldr	r2, [r7, #8]
 8002b0a:	0011      	movs	r1, r2
 8002b0c:	0018      	movs	r0, r3
 8002b0e:	f000 fa45 	bl	8002f9c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	699a      	ldr	r2, [r3, #24]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2180      	movs	r1, #128	; 0x80
 8002b1e:	0109      	lsls	r1, r1, #4
 8002b20:	430a      	orrs	r2, r1
 8002b22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	699a      	ldr	r2, [r3, #24]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4931      	ldr	r1, [pc, #196]	; (8002bf4 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002b30:	400a      	ands	r2, r1
 8002b32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	6999      	ldr	r1, [r3, #24]
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	021a      	lsls	r2, r3, #8
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	430a      	orrs	r2, r1
 8002b46:	619a      	str	r2, [r3, #24]
      break;
 8002b48:	e048      	b.n	8002bdc <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	68ba      	ldr	r2, [r7, #8]
 8002b50:	0011      	movs	r1, r2
 8002b52:	0018      	movs	r0, r3
 8002b54:	f000 faa6 	bl	80030a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	69da      	ldr	r2, [r3, #28]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2108      	movs	r1, #8
 8002b64:	430a      	orrs	r2, r1
 8002b66:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	69da      	ldr	r2, [r3, #28]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	2104      	movs	r1, #4
 8002b74:	438a      	bics	r2, r1
 8002b76:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	69d9      	ldr	r1, [r3, #28]
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	691a      	ldr	r2, [r3, #16]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	430a      	orrs	r2, r1
 8002b88:	61da      	str	r2, [r3, #28]
      break;
 8002b8a:	e027      	b.n	8002bdc <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	68ba      	ldr	r2, [r7, #8]
 8002b92:	0011      	movs	r1, r2
 8002b94:	0018      	movs	r0, r3
 8002b96:	f000 fb0b 	bl	80031b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	69da      	ldr	r2, [r3, #28]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2180      	movs	r1, #128	; 0x80
 8002ba6:	0109      	lsls	r1, r1, #4
 8002ba8:	430a      	orrs	r2, r1
 8002baa:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	69da      	ldr	r2, [r3, #28]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	490f      	ldr	r1, [pc, #60]	; (8002bf4 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002bb8:	400a      	ands	r2, r1
 8002bba:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	69d9      	ldr	r1, [r3, #28]
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	691b      	ldr	r3, [r3, #16]
 8002bc6:	021a      	lsls	r2, r3, #8
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	430a      	orrs	r2, r1
 8002bce:	61da      	str	r2, [r3, #28]
      break;
 8002bd0:	e004      	b.n	8002bdc <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8002bd2:	2317      	movs	r3, #23
 8002bd4:	18fb      	adds	r3, r7, r3
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	701a      	strb	r2, [r3, #0]
      break;
 8002bda:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	223c      	movs	r2, #60	; 0x3c
 8002be0:	2100      	movs	r1, #0
 8002be2:	5499      	strb	r1, [r3, r2]

  return status;
 8002be4:	2317      	movs	r3, #23
 8002be6:	18fb      	adds	r3, r7, r3
 8002be8:	781b      	ldrb	r3, [r3, #0]
}
 8002bea:	0018      	movs	r0, r3
 8002bec:	46bd      	mov	sp, r7
 8002bee:	b006      	add	sp, #24
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	46c0      	nop			; (mov r8, r8)
 8002bf4:	fffffbff 	.word	0xfffffbff

08002bf8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c02:	230f      	movs	r3, #15
 8002c04:	18fb      	adds	r3, r7, r3
 8002c06:	2200      	movs	r2, #0
 8002c08:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	223c      	movs	r2, #60	; 0x3c
 8002c0e:	5c9b      	ldrb	r3, [r3, r2]
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d101      	bne.n	8002c18 <HAL_TIM_ConfigClockSource+0x20>
 8002c14:	2302      	movs	r3, #2
 8002c16:	e0bc      	b.n	8002d92 <HAL_TIM_ConfigClockSource+0x19a>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	223c      	movs	r2, #60	; 0x3c
 8002c1c:	2101      	movs	r1, #1
 8002c1e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	223d      	movs	r2, #61	; 0x3d
 8002c24:	2102      	movs	r1, #2
 8002c26:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	2277      	movs	r2, #119	; 0x77
 8002c34:	4393      	bics	r3, r2
 8002c36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	4a58      	ldr	r2, [pc, #352]	; (8002d9c <HAL_TIM_ConfigClockSource+0x1a4>)
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	68ba      	ldr	r2, [r7, #8]
 8002c46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2280      	movs	r2, #128	; 0x80
 8002c4e:	0192      	lsls	r2, r2, #6
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d040      	beq.n	8002cd6 <HAL_TIM_ConfigClockSource+0xde>
 8002c54:	2280      	movs	r2, #128	; 0x80
 8002c56:	0192      	lsls	r2, r2, #6
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d900      	bls.n	8002c5e <HAL_TIM_ConfigClockSource+0x66>
 8002c5c:	e088      	b.n	8002d70 <HAL_TIM_ConfigClockSource+0x178>
 8002c5e:	2280      	movs	r2, #128	; 0x80
 8002c60:	0152      	lsls	r2, r2, #5
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d100      	bne.n	8002c68 <HAL_TIM_ConfigClockSource+0x70>
 8002c66:	e088      	b.n	8002d7a <HAL_TIM_ConfigClockSource+0x182>
 8002c68:	2280      	movs	r2, #128	; 0x80
 8002c6a:	0152      	lsls	r2, r2, #5
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d900      	bls.n	8002c72 <HAL_TIM_ConfigClockSource+0x7a>
 8002c70:	e07e      	b.n	8002d70 <HAL_TIM_ConfigClockSource+0x178>
 8002c72:	2b70      	cmp	r3, #112	; 0x70
 8002c74:	d018      	beq.n	8002ca8 <HAL_TIM_ConfigClockSource+0xb0>
 8002c76:	d900      	bls.n	8002c7a <HAL_TIM_ConfigClockSource+0x82>
 8002c78:	e07a      	b.n	8002d70 <HAL_TIM_ConfigClockSource+0x178>
 8002c7a:	2b60      	cmp	r3, #96	; 0x60
 8002c7c:	d04f      	beq.n	8002d1e <HAL_TIM_ConfigClockSource+0x126>
 8002c7e:	d900      	bls.n	8002c82 <HAL_TIM_ConfigClockSource+0x8a>
 8002c80:	e076      	b.n	8002d70 <HAL_TIM_ConfigClockSource+0x178>
 8002c82:	2b50      	cmp	r3, #80	; 0x50
 8002c84:	d03b      	beq.n	8002cfe <HAL_TIM_ConfigClockSource+0x106>
 8002c86:	d900      	bls.n	8002c8a <HAL_TIM_ConfigClockSource+0x92>
 8002c88:	e072      	b.n	8002d70 <HAL_TIM_ConfigClockSource+0x178>
 8002c8a:	2b40      	cmp	r3, #64	; 0x40
 8002c8c:	d057      	beq.n	8002d3e <HAL_TIM_ConfigClockSource+0x146>
 8002c8e:	d900      	bls.n	8002c92 <HAL_TIM_ConfigClockSource+0x9a>
 8002c90:	e06e      	b.n	8002d70 <HAL_TIM_ConfigClockSource+0x178>
 8002c92:	2b30      	cmp	r3, #48	; 0x30
 8002c94:	d063      	beq.n	8002d5e <HAL_TIM_ConfigClockSource+0x166>
 8002c96:	d86b      	bhi.n	8002d70 <HAL_TIM_ConfigClockSource+0x178>
 8002c98:	2b20      	cmp	r3, #32
 8002c9a:	d060      	beq.n	8002d5e <HAL_TIM_ConfigClockSource+0x166>
 8002c9c:	d868      	bhi.n	8002d70 <HAL_TIM_ConfigClockSource+0x178>
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d05d      	beq.n	8002d5e <HAL_TIM_ConfigClockSource+0x166>
 8002ca2:	2b10      	cmp	r3, #16
 8002ca4:	d05b      	beq.n	8002d5e <HAL_TIM_ConfigClockSource+0x166>
 8002ca6:	e063      	b.n	8002d70 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6818      	ldr	r0, [r3, #0]
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	6899      	ldr	r1, [r3, #8]
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	685a      	ldr	r2, [r3, #4]
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	f000 fb5e 	bl	8003378 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	2277      	movs	r2, #119	; 0x77
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	68ba      	ldr	r2, [r7, #8]
 8002cd2:	609a      	str	r2, [r3, #8]
      break;
 8002cd4:	e052      	b.n	8002d7c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6818      	ldr	r0, [r3, #0]
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	6899      	ldr	r1, [r3, #8]
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	685a      	ldr	r2, [r3, #4]
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	f000 fb47 	bl	8003378 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	689a      	ldr	r2, [r3, #8]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2180      	movs	r1, #128	; 0x80
 8002cf6:	01c9      	lsls	r1, r1, #7
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	609a      	str	r2, [r3, #8]
      break;
 8002cfc:	e03e      	b.n	8002d7c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6818      	ldr	r0, [r3, #0]
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	6859      	ldr	r1, [r3, #4]
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	001a      	movs	r2, r3
 8002d0c:	f000 faba 	bl	8003284 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2150      	movs	r1, #80	; 0x50
 8002d16:	0018      	movs	r0, r3
 8002d18:	f000 fb14 	bl	8003344 <TIM_ITRx_SetConfig>
      break;
 8002d1c:	e02e      	b.n	8002d7c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6818      	ldr	r0, [r3, #0]
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	6859      	ldr	r1, [r3, #4]
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	001a      	movs	r2, r3
 8002d2c:	f000 fad8 	bl	80032e0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2160      	movs	r1, #96	; 0x60
 8002d36:	0018      	movs	r0, r3
 8002d38:	f000 fb04 	bl	8003344 <TIM_ITRx_SetConfig>
      break;
 8002d3c:	e01e      	b.n	8002d7c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6818      	ldr	r0, [r3, #0]
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	6859      	ldr	r1, [r3, #4]
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	001a      	movs	r2, r3
 8002d4c:	f000 fa9a 	bl	8003284 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2140      	movs	r1, #64	; 0x40
 8002d56:	0018      	movs	r0, r3
 8002d58:	f000 faf4 	bl	8003344 <TIM_ITRx_SetConfig>
      break;
 8002d5c:	e00e      	b.n	8002d7c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	0019      	movs	r1, r3
 8002d68:	0010      	movs	r0, r2
 8002d6a:	f000 faeb 	bl	8003344 <TIM_ITRx_SetConfig>
      break;
 8002d6e:	e005      	b.n	8002d7c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002d70:	230f      	movs	r3, #15
 8002d72:	18fb      	adds	r3, r7, r3
 8002d74:	2201      	movs	r2, #1
 8002d76:	701a      	strb	r2, [r3, #0]
      break;
 8002d78:	e000      	b.n	8002d7c <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002d7a:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	223d      	movs	r2, #61	; 0x3d
 8002d80:	2101      	movs	r1, #1
 8002d82:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	223c      	movs	r2, #60	; 0x3c
 8002d88:	2100      	movs	r1, #0
 8002d8a:	5499      	strb	r1, [r3, r2]

  return status;
 8002d8c:	230f      	movs	r3, #15
 8002d8e:	18fb      	adds	r3, r7, r3
 8002d90:	781b      	ldrb	r3, [r3, #0]
}
 8002d92:	0018      	movs	r0, r3
 8002d94:	46bd      	mov	sp, r7
 8002d96:	b004      	add	sp, #16
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	46c0      	nop			; (mov r8, r8)
 8002d9c:	ffff00ff 	.word	0xffff00ff

08002da0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	4a2f      	ldr	r2, [pc, #188]	; (8002e70 <TIM_Base_SetConfig+0xd0>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d003      	beq.n	8002dc0 <TIM_Base_SetConfig+0x20>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	4a2e      	ldr	r2, [pc, #184]	; (8002e74 <TIM_Base_SetConfig+0xd4>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d108      	bne.n	8002dd2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2270      	movs	r2, #112	; 0x70
 8002dc4:	4393      	bics	r3, r2
 8002dc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	68fa      	ldr	r2, [r7, #12]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4a26      	ldr	r2, [pc, #152]	; (8002e70 <TIM_Base_SetConfig+0xd0>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d013      	beq.n	8002e02 <TIM_Base_SetConfig+0x62>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4a25      	ldr	r2, [pc, #148]	; (8002e74 <TIM_Base_SetConfig+0xd4>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d00f      	beq.n	8002e02 <TIM_Base_SetConfig+0x62>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4a24      	ldr	r2, [pc, #144]	; (8002e78 <TIM_Base_SetConfig+0xd8>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d00b      	beq.n	8002e02 <TIM_Base_SetConfig+0x62>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a23      	ldr	r2, [pc, #140]	; (8002e7c <TIM_Base_SetConfig+0xdc>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d007      	beq.n	8002e02 <TIM_Base_SetConfig+0x62>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4a22      	ldr	r2, [pc, #136]	; (8002e80 <TIM_Base_SetConfig+0xe0>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d003      	beq.n	8002e02 <TIM_Base_SetConfig+0x62>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4a21      	ldr	r2, [pc, #132]	; (8002e84 <TIM_Base_SetConfig+0xe4>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d108      	bne.n	8002e14 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	4a20      	ldr	r2, [pc, #128]	; (8002e88 <TIM_Base_SetConfig+0xe8>)
 8002e06:	4013      	ands	r3, r2
 8002e08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	68fa      	ldr	r2, [r7, #12]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2280      	movs	r2, #128	; 0x80
 8002e18:	4393      	bics	r3, r2
 8002e1a:	001a      	movs	r2, r3
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	695b      	ldr	r3, [r3, #20]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	68fa      	ldr	r2, [r7, #12]
 8002e28:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	689a      	ldr	r2, [r3, #8]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a0c      	ldr	r2, [pc, #48]	; (8002e70 <TIM_Base_SetConfig+0xd0>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d00b      	beq.n	8002e5a <TIM_Base_SetConfig+0xba>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a0d      	ldr	r2, [pc, #52]	; (8002e7c <TIM_Base_SetConfig+0xdc>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d007      	beq.n	8002e5a <TIM_Base_SetConfig+0xba>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a0c      	ldr	r2, [pc, #48]	; (8002e80 <TIM_Base_SetConfig+0xe0>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d003      	beq.n	8002e5a <TIM_Base_SetConfig+0xba>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a0b      	ldr	r2, [pc, #44]	; (8002e84 <TIM_Base_SetConfig+0xe4>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d103      	bne.n	8002e62 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	691a      	ldr	r2, [r3, #16]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2201      	movs	r2, #1
 8002e66:	615a      	str	r2, [r3, #20]
}
 8002e68:	46c0      	nop			; (mov r8, r8)
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	b004      	add	sp, #16
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	40012c00 	.word	0x40012c00
 8002e74:	40000400 	.word	0x40000400
 8002e78:	40002000 	.word	0x40002000
 8002e7c:	40014000 	.word	0x40014000
 8002e80:	40014400 	.word	0x40014400
 8002e84:	40014800 	.word	0x40014800
 8002e88:	fffffcff 	.word	0xfffffcff

08002e8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b086      	sub	sp, #24
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a1b      	ldr	r3, [r3, #32]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	4393      	bics	r3, r2
 8002e9e:	001a      	movs	r2, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6a1b      	ldr	r3, [r3, #32]
 8002ea8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	699b      	ldr	r3, [r3, #24]
 8002eb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2270      	movs	r2, #112	; 0x70
 8002eba:	4393      	bics	r3, r2
 8002ebc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2203      	movs	r2, #3
 8002ec2:	4393      	bics	r3, r2
 8002ec4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	68fa      	ldr	r2, [r7, #12]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	2202      	movs	r2, #2
 8002ed4:	4393      	bics	r3, r2
 8002ed6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	697a      	ldr	r2, [r7, #20]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a27      	ldr	r2, [pc, #156]	; (8002f84 <TIM_OC1_SetConfig+0xf8>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d00b      	beq.n	8002f02 <TIM_OC1_SetConfig+0x76>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a26      	ldr	r2, [pc, #152]	; (8002f88 <TIM_OC1_SetConfig+0xfc>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d007      	beq.n	8002f02 <TIM_OC1_SetConfig+0x76>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a25      	ldr	r2, [pc, #148]	; (8002f8c <TIM_OC1_SetConfig+0x100>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d003      	beq.n	8002f02 <TIM_OC1_SetConfig+0x76>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a24      	ldr	r2, [pc, #144]	; (8002f90 <TIM_OC1_SetConfig+0x104>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d10c      	bne.n	8002f1c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	2208      	movs	r2, #8
 8002f06:	4393      	bics	r3, r2
 8002f08:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	697a      	ldr	r2, [r7, #20]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	2204      	movs	r2, #4
 8002f18:	4393      	bics	r3, r2
 8002f1a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4a19      	ldr	r2, [pc, #100]	; (8002f84 <TIM_OC1_SetConfig+0xf8>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d00b      	beq.n	8002f3c <TIM_OC1_SetConfig+0xb0>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4a18      	ldr	r2, [pc, #96]	; (8002f88 <TIM_OC1_SetConfig+0xfc>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d007      	beq.n	8002f3c <TIM_OC1_SetConfig+0xb0>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	4a17      	ldr	r2, [pc, #92]	; (8002f8c <TIM_OC1_SetConfig+0x100>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d003      	beq.n	8002f3c <TIM_OC1_SetConfig+0xb0>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	4a16      	ldr	r2, [pc, #88]	; (8002f90 <TIM_OC1_SetConfig+0x104>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d111      	bne.n	8002f60 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	4a15      	ldr	r2, [pc, #84]	; (8002f94 <TIM_OC1_SetConfig+0x108>)
 8002f40:	4013      	ands	r3, r2
 8002f42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	4a14      	ldr	r2, [pc, #80]	; (8002f98 <TIM_OC1_SetConfig+0x10c>)
 8002f48:	4013      	ands	r3, r2
 8002f4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	695b      	ldr	r3, [r3, #20]
 8002f50:	693a      	ldr	r2, [r7, #16]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	699b      	ldr	r3, [r3, #24]
 8002f5a:	693a      	ldr	r2, [r7, #16]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	693a      	ldr	r2, [r7, #16]
 8002f64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	68fa      	ldr	r2, [r7, #12]
 8002f6a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	685a      	ldr	r2, [r3, #4]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	697a      	ldr	r2, [r7, #20]
 8002f78:	621a      	str	r2, [r3, #32]
}
 8002f7a:	46c0      	nop			; (mov r8, r8)
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	b006      	add	sp, #24
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	46c0      	nop			; (mov r8, r8)
 8002f84:	40012c00 	.word	0x40012c00
 8002f88:	40014000 	.word	0x40014000
 8002f8c:	40014400 	.word	0x40014400
 8002f90:	40014800 	.word	0x40014800
 8002f94:	fffffeff 	.word	0xfffffeff
 8002f98:	fffffdff 	.word	0xfffffdff

08002f9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b086      	sub	sp, #24
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a1b      	ldr	r3, [r3, #32]
 8002faa:	2210      	movs	r2, #16
 8002fac:	4393      	bics	r3, r2
 8002fae:	001a      	movs	r2, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6a1b      	ldr	r3, [r3, #32]
 8002fb8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	699b      	ldr	r3, [r3, #24]
 8002fc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	4a2e      	ldr	r2, [pc, #184]	; (8003084 <TIM_OC2_SetConfig+0xe8>)
 8002fca:	4013      	ands	r3, r2
 8002fcc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	4a2d      	ldr	r2, [pc, #180]	; (8003088 <TIM_OC2_SetConfig+0xec>)
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	021b      	lsls	r3, r3, #8
 8002fdc:	68fa      	ldr	r2, [r7, #12]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	2220      	movs	r2, #32
 8002fe6:	4393      	bics	r3, r2
 8002fe8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	011b      	lsls	r3, r3, #4
 8002ff0:	697a      	ldr	r2, [r7, #20]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a24      	ldr	r2, [pc, #144]	; (800308c <TIM_OC2_SetConfig+0xf0>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d10d      	bne.n	800301a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	2280      	movs	r2, #128	; 0x80
 8003002:	4393      	bics	r3, r2
 8003004:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	68db      	ldr	r3, [r3, #12]
 800300a:	011b      	lsls	r3, r3, #4
 800300c:	697a      	ldr	r2, [r7, #20]
 800300e:	4313      	orrs	r3, r2
 8003010:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	2240      	movs	r2, #64	; 0x40
 8003016:	4393      	bics	r3, r2
 8003018:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a1b      	ldr	r2, [pc, #108]	; (800308c <TIM_OC2_SetConfig+0xf0>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d00b      	beq.n	800303a <TIM_OC2_SetConfig+0x9e>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4a1a      	ldr	r2, [pc, #104]	; (8003090 <TIM_OC2_SetConfig+0xf4>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d007      	beq.n	800303a <TIM_OC2_SetConfig+0x9e>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a19      	ldr	r2, [pc, #100]	; (8003094 <TIM_OC2_SetConfig+0xf8>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d003      	beq.n	800303a <TIM_OC2_SetConfig+0x9e>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4a18      	ldr	r2, [pc, #96]	; (8003098 <TIM_OC2_SetConfig+0xfc>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d113      	bne.n	8003062 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	4a17      	ldr	r2, [pc, #92]	; (800309c <TIM_OC2_SetConfig+0x100>)
 800303e:	4013      	ands	r3, r2
 8003040:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	4a16      	ldr	r2, [pc, #88]	; (80030a0 <TIM_OC2_SetConfig+0x104>)
 8003046:	4013      	ands	r3, r2
 8003048:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	695b      	ldr	r3, [r3, #20]
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	693a      	ldr	r2, [r7, #16]
 8003052:	4313      	orrs	r3, r2
 8003054:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	699b      	ldr	r3, [r3, #24]
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	693a      	ldr	r2, [r7, #16]
 800305e:	4313      	orrs	r3, r2
 8003060:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	693a      	ldr	r2, [r7, #16]
 8003066:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	68fa      	ldr	r2, [r7, #12]
 800306c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	685a      	ldr	r2, [r3, #4]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	697a      	ldr	r2, [r7, #20]
 800307a:	621a      	str	r2, [r3, #32]
}
 800307c:	46c0      	nop			; (mov r8, r8)
 800307e:	46bd      	mov	sp, r7
 8003080:	b006      	add	sp, #24
 8003082:	bd80      	pop	{r7, pc}
 8003084:	ffff8fff 	.word	0xffff8fff
 8003088:	fffffcff 	.word	0xfffffcff
 800308c:	40012c00 	.word	0x40012c00
 8003090:	40014000 	.word	0x40014000
 8003094:	40014400 	.word	0x40014400
 8003098:	40014800 	.word	0x40014800
 800309c:	fffffbff 	.word	0xfffffbff
 80030a0:	fffff7ff 	.word	0xfffff7ff

080030a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b086      	sub	sp, #24
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a1b      	ldr	r3, [r3, #32]
 80030b2:	4a35      	ldr	r2, [pc, #212]	; (8003188 <TIM_OC3_SetConfig+0xe4>)
 80030b4:	401a      	ands	r2, r3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a1b      	ldr	r3, [r3, #32]
 80030be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	69db      	ldr	r3, [r3, #28]
 80030ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2270      	movs	r2, #112	; 0x70
 80030d0:	4393      	bics	r3, r2
 80030d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2203      	movs	r2, #3
 80030d8:	4393      	bics	r3, r2
 80030da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	68fa      	ldr	r2, [r7, #12]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	4a28      	ldr	r2, [pc, #160]	; (800318c <TIM_OC3_SetConfig+0xe8>)
 80030ea:	4013      	ands	r3, r2
 80030ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	021b      	lsls	r3, r3, #8
 80030f4:	697a      	ldr	r2, [r7, #20]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a24      	ldr	r2, [pc, #144]	; (8003190 <TIM_OC3_SetConfig+0xec>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d10d      	bne.n	800311e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	4a23      	ldr	r2, [pc, #140]	; (8003194 <TIM_OC3_SetConfig+0xf0>)
 8003106:	4013      	ands	r3, r2
 8003108:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	021b      	lsls	r3, r3, #8
 8003110:	697a      	ldr	r2, [r7, #20]
 8003112:	4313      	orrs	r3, r2
 8003114:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	4a1f      	ldr	r2, [pc, #124]	; (8003198 <TIM_OC3_SetConfig+0xf4>)
 800311a:	4013      	ands	r3, r2
 800311c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a1b      	ldr	r2, [pc, #108]	; (8003190 <TIM_OC3_SetConfig+0xec>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d00b      	beq.n	800313e <TIM_OC3_SetConfig+0x9a>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a1c      	ldr	r2, [pc, #112]	; (800319c <TIM_OC3_SetConfig+0xf8>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d007      	beq.n	800313e <TIM_OC3_SetConfig+0x9a>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a1b      	ldr	r2, [pc, #108]	; (80031a0 <TIM_OC3_SetConfig+0xfc>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d003      	beq.n	800313e <TIM_OC3_SetConfig+0x9a>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a1a      	ldr	r2, [pc, #104]	; (80031a4 <TIM_OC3_SetConfig+0x100>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d113      	bne.n	8003166 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	4a19      	ldr	r2, [pc, #100]	; (80031a8 <TIM_OC3_SetConfig+0x104>)
 8003142:	4013      	ands	r3, r2
 8003144:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	4a18      	ldr	r2, [pc, #96]	; (80031ac <TIM_OC3_SetConfig+0x108>)
 800314a:	4013      	ands	r3, r2
 800314c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	695b      	ldr	r3, [r3, #20]
 8003152:	011b      	lsls	r3, r3, #4
 8003154:	693a      	ldr	r2, [r7, #16]
 8003156:	4313      	orrs	r3, r2
 8003158:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	699b      	ldr	r3, [r3, #24]
 800315e:	011b      	lsls	r3, r3, #4
 8003160:	693a      	ldr	r2, [r7, #16]
 8003162:	4313      	orrs	r3, r2
 8003164:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	693a      	ldr	r2, [r7, #16]
 800316a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	68fa      	ldr	r2, [r7, #12]
 8003170:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	685a      	ldr	r2, [r3, #4]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	697a      	ldr	r2, [r7, #20]
 800317e:	621a      	str	r2, [r3, #32]
}
 8003180:	46c0      	nop			; (mov r8, r8)
 8003182:	46bd      	mov	sp, r7
 8003184:	b006      	add	sp, #24
 8003186:	bd80      	pop	{r7, pc}
 8003188:	fffffeff 	.word	0xfffffeff
 800318c:	fffffdff 	.word	0xfffffdff
 8003190:	40012c00 	.word	0x40012c00
 8003194:	fffff7ff 	.word	0xfffff7ff
 8003198:	fffffbff 	.word	0xfffffbff
 800319c:	40014000 	.word	0x40014000
 80031a0:	40014400 	.word	0x40014400
 80031a4:	40014800 	.word	0x40014800
 80031a8:	ffffefff 	.word	0xffffefff
 80031ac:	ffffdfff 	.word	0xffffdfff

080031b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b086      	sub	sp, #24
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a1b      	ldr	r3, [r3, #32]
 80031be:	4a28      	ldr	r2, [pc, #160]	; (8003260 <TIM_OC4_SetConfig+0xb0>)
 80031c0:	401a      	ands	r2, r3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a1b      	ldr	r3, [r3, #32]
 80031ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	69db      	ldr	r3, [r3, #28]
 80031d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	4a22      	ldr	r2, [pc, #136]	; (8003264 <TIM_OC4_SetConfig+0xb4>)
 80031dc:	4013      	ands	r3, r2
 80031de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	4a21      	ldr	r2, [pc, #132]	; (8003268 <TIM_OC4_SetConfig+0xb8>)
 80031e4:	4013      	ands	r3, r2
 80031e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	021b      	lsls	r3, r3, #8
 80031ee:	68fa      	ldr	r2, [r7, #12]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	4a1d      	ldr	r2, [pc, #116]	; (800326c <TIM_OC4_SetConfig+0xbc>)
 80031f8:	4013      	ands	r3, r2
 80031fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	031b      	lsls	r3, r3, #12
 8003202:	693a      	ldr	r2, [r7, #16]
 8003204:	4313      	orrs	r3, r2
 8003206:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	4a19      	ldr	r2, [pc, #100]	; (8003270 <TIM_OC4_SetConfig+0xc0>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d00b      	beq.n	8003228 <TIM_OC4_SetConfig+0x78>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	4a18      	ldr	r2, [pc, #96]	; (8003274 <TIM_OC4_SetConfig+0xc4>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d007      	beq.n	8003228 <TIM_OC4_SetConfig+0x78>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	4a17      	ldr	r2, [pc, #92]	; (8003278 <TIM_OC4_SetConfig+0xc8>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d003      	beq.n	8003228 <TIM_OC4_SetConfig+0x78>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	4a16      	ldr	r2, [pc, #88]	; (800327c <TIM_OC4_SetConfig+0xcc>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d109      	bne.n	800323c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	4a15      	ldr	r2, [pc, #84]	; (8003280 <TIM_OC4_SetConfig+0xd0>)
 800322c:	4013      	ands	r3, r2
 800322e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	695b      	ldr	r3, [r3, #20]
 8003234:	019b      	lsls	r3, r3, #6
 8003236:	697a      	ldr	r2, [r7, #20]
 8003238:	4313      	orrs	r3, r2
 800323a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	697a      	ldr	r2, [r7, #20]
 8003240:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	68fa      	ldr	r2, [r7, #12]
 8003246:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	685a      	ldr	r2, [r3, #4]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	693a      	ldr	r2, [r7, #16]
 8003254:	621a      	str	r2, [r3, #32]
}
 8003256:	46c0      	nop			; (mov r8, r8)
 8003258:	46bd      	mov	sp, r7
 800325a:	b006      	add	sp, #24
 800325c:	bd80      	pop	{r7, pc}
 800325e:	46c0      	nop			; (mov r8, r8)
 8003260:	ffffefff 	.word	0xffffefff
 8003264:	ffff8fff 	.word	0xffff8fff
 8003268:	fffffcff 	.word	0xfffffcff
 800326c:	ffffdfff 	.word	0xffffdfff
 8003270:	40012c00 	.word	0x40012c00
 8003274:	40014000 	.word	0x40014000
 8003278:	40014400 	.word	0x40014400
 800327c:	40014800 	.word	0x40014800
 8003280:	ffffbfff 	.word	0xffffbfff

08003284 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b086      	sub	sp, #24
 8003288:	af00      	add	r7, sp, #0
 800328a:	60f8      	str	r0, [r7, #12]
 800328c:	60b9      	str	r1, [r7, #8]
 800328e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6a1b      	ldr	r3, [r3, #32]
 8003294:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6a1b      	ldr	r3, [r3, #32]
 800329a:	2201      	movs	r2, #1
 800329c:	4393      	bics	r3, r2
 800329e:	001a      	movs	r2, r3
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	699b      	ldr	r3, [r3, #24]
 80032a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	22f0      	movs	r2, #240	; 0xf0
 80032ae:	4393      	bics	r3, r2
 80032b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	011b      	lsls	r3, r3, #4
 80032b6:	693a      	ldr	r2, [r7, #16]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	220a      	movs	r2, #10
 80032c0:	4393      	bics	r3, r2
 80032c2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80032c4:	697a      	ldr	r2, [r7, #20]
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	693a      	ldr	r2, [r7, #16]
 80032d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	697a      	ldr	r2, [r7, #20]
 80032d6:	621a      	str	r2, [r3, #32]
}
 80032d8:	46c0      	nop			; (mov r8, r8)
 80032da:	46bd      	mov	sp, r7
 80032dc:	b006      	add	sp, #24
 80032de:	bd80      	pop	{r7, pc}

080032e0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b086      	sub	sp, #24
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	60f8      	str	r0, [r7, #12]
 80032e8:	60b9      	str	r1, [r7, #8]
 80032ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6a1b      	ldr	r3, [r3, #32]
 80032f0:	2210      	movs	r2, #16
 80032f2:	4393      	bics	r3, r2
 80032f4:	001a      	movs	r2, r3
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	699b      	ldr	r3, [r3, #24]
 80032fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6a1b      	ldr	r3, [r3, #32]
 8003304:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	4a0d      	ldr	r2, [pc, #52]	; (8003340 <TIM_TI2_ConfigInputStage+0x60>)
 800330a:	4013      	ands	r3, r2
 800330c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	031b      	lsls	r3, r3, #12
 8003312:	697a      	ldr	r2, [r7, #20]
 8003314:	4313      	orrs	r3, r2
 8003316:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	22a0      	movs	r2, #160	; 0xa0
 800331c:	4393      	bics	r3, r2
 800331e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	011b      	lsls	r3, r3, #4
 8003324:	693a      	ldr	r2, [r7, #16]
 8003326:	4313      	orrs	r3, r2
 8003328:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	697a      	ldr	r2, [r7, #20]
 800332e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	693a      	ldr	r2, [r7, #16]
 8003334:	621a      	str	r2, [r3, #32]
}
 8003336:	46c0      	nop			; (mov r8, r8)
 8003338:	46bd      	mov	sp, r7
 800333a:	b006      	add	sp, #24
 800333c:	bd80      	pop	{r7, pc}
 800333e:	46c0      	nop			; (mov r8, r8)
 8003340:	ffff0fff 	.word	0xffff0fff

08003344 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2270      	movs	r2, #112	; 0x70
 8003358:	4393      	bics	r3, r2
 800335a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800335c:	683a      	ldr	r2, [r7, #0]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	4313      	orrs	r3, r2
 8003362:	2207      	movs	r2, #7
 8003364:	4313      	orrs	r3, r2
 8003366:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	68fa      	ldr	r2, [r7, #12]
 800336c:	609a      	str	r2, [r3, #8]
}
 800336e:	46c0      	nop			; (mov r8, r8)
 8003370:	46bd      	mov	sp, r7
 8003372:	b004      	add	sp, #16
 8003374:	bd80      	pop	{r7, pc}
	...

08003378 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b086      	sub	sp, #24
 800337c:	af00      	add	r7, sp, #0
 800337e:	60f8      	str	r0, [r7, #12]
 8003380:	60b9      	str	r1, [r7, #8]
 8003382:	607a      	str	r2, [r7, #4]
 8003384:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	4a09      	ldr	r2, [pc, #36]	; (80033b4 <TIM_ETR_SetConfig+0x3c>)
 8003390:	4013      	ands	r3, r2
 8003392:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	021a      	lsls	r2, r3, #8
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	431a      	orrs	r2, r3
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	4313      	orrs	r3, r2
 80033a0:	697a      	ldr	r2, [r7, #20]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	697a      	ldr	r2, [r7, #20]
 80033aa:	609a      	str	r2, [r3, #8]
}
 80033ac:	46c0      	nop			; (mov r8, r8)
 80033ae:	46bd      	mov	sp, r7
 80033b0:	b006      	add	sp, #24
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	ffff00ff 	.word	0xffff00ff

080033b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b086      	sub	sp, #24
 80033bc:	af00      	add	r7, sp, #0
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	60b9      	str	r1, [r7, #8]
 80033c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	221f      	movs	r2, #31
 80033c8:	4013      	ands	r3, r2
 80033ca:	2201      	movs	r2, #1
 80033cc:	409a      	lsls	r2, r3
 80033ce:	0013      	movs	r3, r2
 80033d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	6a1b      	ldr	r3, [r3, #32]
 80033d6:	697a      	ldr	r2, [r7, #20]
 80033d8:	43d2      	mvns	r2, r2
 80033da:	401a      	ands	r2, r3
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6a1a      	ldr	r2, [r3, #32]
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	211f      	movs	r1, #31
 80033e8:	400b      	ands	r3, r1
 80033ea:	6879      	ldr	r1, [r7, #4]
 80033ec:	4099      	lsls	r1, r3
 80033ee:	000b      	movs	r3, r1
 80033f0:	431a      	orrs	r2, r3
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	621a      	str	r2, [r3, #32]
}
 80033f6:	46c0      	nop			; (mov r8, r8)
 80033f8:	46bd      	mov	sp, r7
 80033fa:	b006      	add	sp, #24
 80033fc:	bd80      	pop	{r7, pc}
	...

08003400 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	223c      	movs	r2, #60	; 0x3c
 800340e:	5c9b      	ldrb	r3, [r3, r2]
 8003410:	2b01      	cmp	r3, #1
 8003412:	d101      	bne.n	8003418 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003414:	2302      	movs	r3, #2
 8003416:	e041      	b.n	800349c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	223c      	movs	r2, #60	; 0x3c
 800341c:	2101      	movs	r1, #1
 800341e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	223d      	movs	r2, #61	; 0x3d
 8003424:	2102      	movs	r1, #2
 8003426:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2270      	movs	r2, #112	; 0x70
 800343c:	4393      	bics	r3, r2
 800343e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	68fa      	ldr	r2, [r7, #12]
 8003446:	4313      	orrs	r3, r2
 8003448:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	68fa      	ldr	r2, [r7, #12]
 8003450:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a13      	ldr	r2, [pc, #76]	; (80034a4 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d009      	beq.n	8003470 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a11      	ldr	r2, [pc, #68]	; (80034a8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d004      	beq.n	8003470 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a10      	ldr	r2, [pc, #64]	; (80034ac <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d10c      	bne.n	800348a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	2280      	movs	r2, #128	; 0x80
 8003474:	4393      	bics	r3, r2
 8003476:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	68ba      	ldr	r2, [r7, #8]
 800347e:	4313      	orrs	r3, r2
 8003480:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	68ba      	ldr	r2, [r7, #8]
 8003488:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	223d      	movs	r2, #61	; 0x3d
 800348e:	2101      	movs	r1, #1
 8003490:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	223c      	movs	r2, #60	; 0x3c
 8003496:	2100      	movs	r1, #0
 8003498:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800349a:	2300      	movs	r3, #0
}
 800349c:	0018      	movs	r0, r3
 800349e:	46bd      	mov	sp, r7
 80034a0:	b004      	add	sp, #16
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	40012c00 	.word	0x40012c00
 80034a8:	40000400 	.word	0x40000400
 80034ac:	40014000 	.word	0x40014000

080034b0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80034ba:	2300      	movs	r3, #0
 80034bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	223c      	movs	r2, #60	; 0x3c
 80034c2:	5c9b      	ldrb	r3, [r3, r2]
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d101      	bne.n	80034cc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80034c8:	2302      	movs	r3, #2
 80034ca:	e03e      	b.n	800354a <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	223c      	movs	r2, #60	; 0x3c
 80034d0:	2101      	movs	r1, #1
 80034d2:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	22ff      	movs	r2, #255	; 0xff
 80034d8:	4393      	bics	r3, r2
 80034da:	001a      	movs	r2, r3
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	4a1b      	ldr	r2, [pc, #108]	; (8003554 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 80034e8:	401a      	ands	r2, r3
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	4a18      	ldr	r2, [pc, #96]	; (8003558 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 80034f6:	401a      	ands	r2, r3
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	4a16      	ldr	r2, [pc, #88]	; (800355c <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8003504:	401a      	ands	r2, r3
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4313      	orrs	r3, r2
 800350c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	4a13      	ldr	r2, [pc, #76]	; (8003560 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8003512:	401a      	ands	r2, r3
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	691b      	ldr	r3, [r3, #16]
 8003518:	4313      	orrs	r3, r2
 800351a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	4a11      	ldr	r2, [pc, #68]	; (8003564 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8003520:	401a      	ands	r2, r3
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	695b      	ldr	r3, [r3, #20]
 8003526:	4313      	orrs	r3, r2
 8003528:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	4a0e      	ldr	r2, [pc, #56]	; (8003568 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 800352e:	401a      	ands	r2, r3
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	69db      	ldr	r3, [r3, #28]
 8003534:	4313      	orrs	r3, r2
 8003536:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	68fa      	ldr	r2, [r7, #12]
 800353e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	223c      	movs	r2, #60	; 0x3c
 8003544:	2100      	movs	r1, #0
 8003546:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003548:	2300      	movs	r3, #0
}
 800354a:	0018      	movs	r0, r3
 800354c:	46bd      	mov	sp, r7
 800354e:	b004      	add	sp, #16
 8003550:	bd80      	pop	{r7, pc}
 8003552:	46c0      	nop			; (mov r8, r8)
 8003554:	fffffcff 	.word	0xfffffcff
 8003558:	fffffbff 	.word	0xfffffbff
 800355c:	fffff7ff 	.word	0xfffff7ff
 8003560:	ffffefff 	.word	0xffffefff
 8003564:	ffffdfff 	.word	0xffffdfff
 8003568:	ffffbfff 	.word	0xffffbfff

0800356c <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 800356c:	b580      	push	{r7, lr}
 800356e:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8003570:	46c0      	nop			; (mov r8, r8)
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
	...

08003578 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8003578:	b580      	push	{r7, lr}
 800357a:	b086      	sub	sp, #24
 800357c:	af04      	add	r7, sp, #16
 800357e:	0002      	movs	r2, r0
 8003580:	1dfb      	adds	r3, r7, #7
 8003582:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8003584:	4808      	ldr	r0, [pc, #32]	; (80035a8 <ssd1306_WriteCommand+0x30>)
 8003586:	2301      	movs	r3, #1
 8003588:	425b      	negs	r3, r3
 800358a:	9302      	str	r3, [sp, #8]
 800358c:	2301      	movs	r3, #1
 800358e:	9301      	str	r3, [sp, #4]
 8003590:	1dfb      	adds	r3, r7, #7
 8003592:	9300      	str	r3, [sp, #0]
 8003594:	2301      	movs	r3, #1
 8003596:	2200      	movs	r2, #0
 8003598:	2178      	movs	r1, #120	; 0x78
 800359a:	f7fe f827 	bl	80015ec <HAL_I2C_Mem_Write>
}
 800359e:	46c0      	nop			; (mov r8, r8)
 80035a0:	46bd      	mov	sp, r7
 80035a2:	b002      	add	sp, #8
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	46c0      	nop			; (mov r8, r8)
 80035a8:	20000850 	.word	0x20000850

080035ac <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b086      	sub	sp, #24
 80035b0:	af04      	add	r7, sp, #16
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	4808      	ldr	r0, [pc, #32]	; (80035dc <ssd1306_WriteData+0x30>)
 80035bc:	2201      	movs	r2, #1
 80035be:	4252      	negs	r2, r2
 80035c0:	9202      	str	r2, [sp, #8]
 80035c2:	9301      	str	r3, [sp, #4]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	9300      	str	r3, [sp, #0]
 80035c8:	2301      	movs	r3, #1
 80035ca:	2240      	movs	r2, #64	; 0x40
 80035cc:	2178      	movs	r1, #120	; 0x78
 80035ce:	f7fe f80d 	bl	80015ec <HAL_I2C_Mem_Write>
}
 80035d2:	46c0      	nop			; (mov r8, r8)
 80035d4:	46bd      	mov	sp, r7
 80035d6:	b002      	add	sp, #8
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	46c0      	nop			; (mov r8, r8)
 80035dc:	20000850 	.word	0x20000850

080035e0 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 80035e0:	b580      	push	{r7, lr}
 80035e2:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80035e4:	f7ff ffc2 	bl	800356c <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80035e8:	2064      	movs	r0, #100	; 0x64
 80035ea:	f7fd facd 	bl	8000b88 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80035ee:	2000      	movs	r0, #0
 80035f0:	f000 f8ce 	bl	8003790 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80035f4:	2020      	movs	r0, #32
 80035f6:	f7ff ffbf 	bl	8003578 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80035fa:	2000      	movs	r0, #0
 80035fc:	f7ff ffbc 	bl	8003578 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8003600:	20b0      	movs	r0, #176	; 0xb0
 8003602:	f7ff ffb9 	bl	8003578 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8003606:	20c8      	movs	r0, #200	; 0xc8
 8003608:	f7ff ffb6 	bl	8003578 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 800360c:	2000      	movs	r0, #0
 800360e:	f7ff ffb3 	bl	8003578 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8003612:	2010      	movs	r0, #16
 8003614:	f7ff ffb0 	bl	8003578 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDC);
 8003618:	20dc      	movs	r0, #220	; 0xdc
 800361a:	f7ff ffad 	bl	8003578 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //--set start line address - CHECK
 800361e:	2000      	movs	r0, #0
 8003620:	f7ff ffaa 	bl	8003578 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8003624:	20ff      	movs	r0, #255	; 0xff
 8003626:	f000 f89b 	bl	8003760 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 800362a:	20a1      	movs	r0, #161	; 0xa1
 800362c:	f7ff ffa4 	bl	8003578 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8003630:	20a6      	movs	r0, #166	; 0xa6
 8003632:	f7ff ffa1 	bl	8003578 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8003636:	20a8      	movs	r0, #168	; 0xa8
 8003638:	f7ff ff9e 	bl	8003578 <ssd1306_WriteCommand>
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
#elif (SSD1306_HEIGHT == 128)
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
    ssd1306_WriteCommand(0x3F);
 800363c:	203f      	movs	r0, #63	; 0x3f
 800363e:	f7ff ff9b 	bl	8003578 <ssd1306_WriteCommand>
//#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8003642:	20a4      	movs	r0, #164	; 0xa4
 8003644:	f7ff ff98 	bl	8003578 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8003648:	20d3      	movs	r0, #211	; 0xd3
 800364a:	f7ff ff95 	bl	8003578 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //-not offset
 800364e:	2022      	movs	r0, #34	; 0x22
 8003650:	f7ff ff92 	bl	8003578 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8003654:	20d5      	movs	r0, #213	; 0xd5
 8003656:	f7ff ff8f 	bl	8003578 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 800365a:	20f0      	movs	r0, #240	; 0xf0
 800365c:	f7ff ff8c 	bl	8003578 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8003660:	20d9      	movs	r0, #217	; 0xd9
 8003662:	f7ff ff89 	bl	8003578 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8003666:	2022      	movs	r0, #34	; 0x22
 8003668:	f7ff ff86 	bl	8003578 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800366c:	20da      	movs	r0, #218	; 0xda
 800366e:	f7ff ff83 	bl	8003578 <ssd1306_WriteCommand>
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
#elif (SSD1306_HEIGHT == 128)
    ssd1306_WriteCommand(0x12);
#else
    ssd1306_WriteCommand(0x12);
 8003672:	2012      	movs	r0, #18
 8003674:	f7ff ff80 	bl	8003578 <ssd1306_WriteCommand>
//#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8003678:	20db      	movs	r0, #219	; 0xdb
 800367a:	f7ff ff7d 	bl	8003578 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800367e:	2020      	movs	r0, #32
 8003680:	f7ff ff7a 	bl	8003578 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8003684:	208d      	movs	r0, #141	; 0x8d
 8003686:	f7ff ff77 	bl	8003578 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 800368a:	2014      	movs	r0, #20
 800368c:	f7ff ff74 	bl	8003578 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8003690:	2001      	movs	r0, #1
 8003692:	f000 f87d 	bl	8003790 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8003696:	2000      	movs	r0, #0
 8003698:	f000 f810 	bl	80036bc <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800369c:	f000 f832 	bl	8003704 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80036a0:	4b05      	ldr	r3, [pc, #20]	; (80036b8 <ssd1306_Init+0xd8>)
 80036a2:	2200      	movs	r2, #0
 80036a4:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80036a6:	4b04      	ldr	r3, [pc, #16]	; (80036b8 <ssd1306_Init+0xd8>)
 80036a8:	2200      	movs	r2, #0
 80036aa:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80036ac:	4b02      	ldr	r3, [pc, #8]	; (80036b8 <ssd1306_Init+0xd8>)
 80036ae:	2201      	movs	r2, #1
 80036b0:	711a      	strb	r2, [r3, #4]
}
 80036b2:	46c0      	nop			; (mov r8, r8)
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	20000848 	.word	0x20000848

080036bc <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	0002      	movs	r2, r0
 80036c4:	1dfb      	adds	r3, r7, #7
 80036c6:	701a      	strb	r2, [r3, #0]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80036c8:	2300      	movs	r3, #0
 80036ca:	60fb      	str	r3, [r7, #12]
 80036cc:	e00e      	b.n	80036ec <ssd1306_Fill+0x30>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80036ce:	1dfb      	adds	r3, r7, #7
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d101      	bne.n	80036da <ssd1306_Fill+0x1e>
 80036d6:	2100      	movs	r1, #0
 80036d8:	e000      	b.n	80036dc <ssd1306_Fill+0x20>
 80036da:	21ff      	movs	r1, #255	; 0xff
 80036dc:	4a08      	ldr	r2, [pc, #32]	; (8003700 <ssd1306_Fill+0x44>)
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	18d3      	adds	r3, r2, r3
 80036e2:	1c0a      	adds	r2, r1, #0
 80036e4:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	3301      	adds	r3, #1
 80036ea:	60fb      	str	r3, [r7, #12]
 80036ec:	68fa      	ldr	r2, [r7, #12]
 80036ee:	2382      	movs	r3, #130	; 0x82
 80036f0:	011b      	lsls	r3, r3, #4
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d3eb      	bcc.n	80036ce <ssd1306_Fill+0x12>
    }
}
 80036f6:	46c0      	nop			; (mov r8, r8)
 80036f8:	46c0      	nop			; (mov r8, r8)
 80036fa:	46bd      	mov	sp, r7
 80036fc:	b004      	add	sp, #16
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	20000028 	.word	0x20000028

08003704 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800370a:	1dfb      	adds	r3, r7, #7
 800370c:	2200      	movs	r2, #0
 800370e:	701a      	strb	r2, [r3, #0]
 8003710:	e01a      	b.n	8003748 <ssd1306_UpdateScreen+0x44>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8003712:	1dfb      	adds	r3, r7, #7
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	3b50      	subs	r3, #80	; 0x50
 8003718:	b2db      	uxtb	r3, r3
 800371a:	0018      	movs	r0, r3
 800371c:	f7ff ff2c 	bl	8003578 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8003720:	2000      	movs	r0, #0
 8003722:	f7ff ff29 	bl	8003578 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8003726:	2010      	movs	r0, #16
 8003728:	f7ff ff26 	bl	8003578 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 800372c:	1dfb      	adds	r3, r7, #7
 800372e:	781b      	ldrb	r3, [r3, #0]
 8003730:	01da      	lsls	r2, r3, #7
 8003732:	4b0a      	ldr	r3, [pc, #40]	; (800375c <ssd1306_UpdateScreen+0x58>)
 8003734:	18d3      	adds	r3, r2, r3
 8003736:	2180      	movs	r1, #128	; 0x80
 8003738:	0018      	movs	r0, r3
 800373a:	f7ff ff37 	bl	80035ac <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800373e:	1dfb      	adds	r3, r7, #7
 8003740:	781a      	ldrb	r2, [r3, #0]
 8003742:	1dfb      	adds	r3, r7, #7
 8003744:	3201      	adds	r2, #1
 8003746:	701a      	strb	r2, [r3, #0]
 8003748:	1dfb      	adds	r3, r7, #7
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	2b0f      	cmp	r3, #15
 800374e:	d9e0      	bls.n	8003712 <ssd1306_UpdateScreen+0xe>
    }
}
 8003750:	46c0      	nop			; (mov r8, r8)
 8003752:	46c0      	nop			; (mov r8, r8)
 8003754:	46bd      	mov	sp, r7
 8003756:	b002      	add	sp, #8
 8003758:	bd80      	pop	{r7, pc}
 800375a:	46c0      	nop			; (mov r8, r8)
 800375c:	20000028 	.word	0x20000028

08003760 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	0002      	movs	r2, r0
 8003768:	1dfb      	adds	r3, r7, #7
 800376a:	701a      	strb	r2, [r3, #0]
    const uint8_t kSetContrastControlRegister = 0x81;
 800376c:	210f      	movs	r1, #15
 800376e:	187b      	adds	r3, r7, r1
 8003770:	2281      	movs	r2, #129	; 0x81
 8003772:	701a      	strb	r2, [r3, #0]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8003774:	187b      	adds	r3, r7, r1
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	0018      	movs	r0, r3
 800377a:	f7ff fefd 	bl	8003578 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800377e:	1dfb      	adds	r3, r7, #7
 8003780:	781b      	ldrb	r3, [r3, #0]
 8003782:	0018      	movs	r0, r3
 8003784:	f7ff fef8 	bl	8003578 <ssd1306_WriteCommand>
}
 8003788:	46c0      	nop			; (mov r8, r8)
 800378a:	46bd      	mov	sp, r7
 800378c:	b004      	add	sp, #16
 800378e:	bd80      	pop	{r7, pc}

08003790 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	0002      	movs	r2, r0
 8003798:	1dfb      	adds	r3, r7, #7
 800379a:	701a      	strb	r2, [r3, #0]
    uint8_t value;
    if (on) {
 800379c:	1dfb      	adds	r3, r7, #7
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d007      	beq.n	80037b4 <ssd1306_SetDisplayOn+0x24>
        value = 0xAF;   // Display on
 80037a4:	230f      	movs	r3, #15
 80037a6:	18fb      	adds	r3, r7, r3
 80037a8:	22af      	movs	r2, #175	; 0xaf
 80037aa:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 1;
 80037ac:	4b0a      	ldr	r3, [pc, #40]	; (80037d8 <ssd1306_SetDisplayOn+0x48>)
 80037ae:	2201      	movs	r2, #1
 80037b0:	715a      	strb	r2, [r3, #5]
 80037b2:	e006      	b.n	80037c2 <ssd1306_SetDisplayOn+0x32>
    } else {
        value = 0xAE;   // Display off
 80037b4:	230f      	movs	r3, #15
 80037b6:	18fb      	adds	r3, r7, r3
 80037b8:	22ae      	movs	r2, #174	; 0xae
 80037ba:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 0;
 80037bc:	4b06      	ldr	r3, [pc, #24]	; (80037d8 <ssd1306_SetDisplayOn+0x48>)
 80037be:	2200      	movs	r2, #0
 80037c0:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80037c2:	230f      	movs	r3, #15
 80037c4:	18fb      	adds	r3, r7, r3
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	0018      	movs	r0, r3
 80037ca:	f7ff fed5 	bl	8003578 <ssd1306_WriteCommand>
}
 80037ce:	46c0      	nop			; (mov r8, r8)
 80037d0:	46bd      	mov	sp, r7
 80037d2:	b004      	add	sp, #16
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	46c0      	nop			; (mov r8, r8)
 80037d8:	20000848 	.word	0x20000848

080037dc <__libc_init_array>:
 80037dc:	b570      	push	{r4, r5, r6, lr}
 80037de:	2600      	movs	r6, #0
 80037e0:	4d0c      	ldr	r5, [pc, #48]	; (8003814 <__libc_init_array+0x38>)
 80037e2:	4c0d      	ldr	r4, [pc, #52]	; (8003818 <__libc_init_array+0x3c>)
 80037e4:	1b64      	subs	r4, r4, r5
 80037e6:	10a4      	asrs	r4, r4, #2
 80037e8:	42a6      	cmp	r6, r4
 80037ea:	d109      	bne.n	8003800 <__libc_init_array+0x24>
 80037ec:	2600      	movs	r6, #0
 80037ee:	f000 f821 	bl	8003834 <_init>
 80037f2:	4d0a      	ldr	r5, [pc, #40]	; (800381c <__libc_init_array+0x40>)
 80037f4:	4c0a      	ldr	r4, [pc, #40]	; (8003820 <__libc_init_array+0x44>)
 80037f6:	1b64      	subs	r4, r4, r5
 80037f8:	10a4      	asrs	r4, r4, #2
 80037fa:	42a6      	cmp	r6, r4
 80037fc:	d105      	bne.n	800380a <__libc_init_array+0x2e>
 80037fe:	bd70      	pop	{r4, r5, r6, pc}
 8003800:	00b3      	lsls	r3, r6, #2
 8003802:	58eb      	ldr	r3, [r5, r3]
 8003804:	4798      	blx	r3
 8003806:	3601      	adds	r6, #1
 8003808:	e7ee      	b.n	80037e8 <__libc_init_array+0xc>
 800380a:	00b3      	lsls	r3, r6, #2
 800380c:	58eb      	ldr	r3, [r5, r3]
 800380e:	4798      	blx	r3
 8003810:	3601      	adds	r6, #1
 8003812:	e7f2      	b.n	80037fa <__libc_init_array+0x1e>
 8003814:	0800387c 	.word	0x0800387c
 8003818:	0800387c 	.word	0x0800387c
 800381c:	0800387c 	.word	0x0800387c
 8003820:	08003880 	.word	0x08003880

08003824 <memset>:
 8003824:	0003      	movs	r3, r0
 8003826:	1882      	adds	r2, r0, r2
 8003828:	4293      	cmp	r3, r2
 800382a:	d100      	bne.n	800382e <memset+0xa>
 800382c:	4770      	bx	lr
 800382e:	7019      	strb	r1, [r3, #0]
 8003830:	3301      	adds	r3, #1
 8003832:	e7f9      	b.n	8003828 <memset+0x4>

08003834 <_init>:
 8003834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003836:	46c0      	nop			; (mov r8, r8)
 8003838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800383a:	bc08      	pop	{r3}
 800383c:	469e      	mov	lr, r3
 800383e:	4770      	bx	lr

08003840 <_fini>:
 8003840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003842:	46c0      	nop			; (mov r8, r8)
 8003844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003846:	bc08      	pop	{r3}
 8003848:	469e      	mov	lr, r3
 800384a:	4770      	bx	lr
