
Pro3E_RT_Mikrocotroller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c60  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000066c  08004d20  08004d20  00014d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800538c  0800538c  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  0800538c  0800538c  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800538c  0800538c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800538c  0800538c  0001538c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005390  08005390  00015390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005394  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000093c  20000078  0800540c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009b4  0800540c  000209b4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010caf  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025ab  00000000  00000000  00030d4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f68  00000000  00000000  00033300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e38  00000000  00000000  00034268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011de0  00000000  00000000  000350a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001148a  00000000  00000000  00046e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006a9ae  00000000  00000000  0005830a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c2cb8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b18  00000000  00000000  000c2d0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000078 	.word	0x20000078
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004d08 	.word	0x08004d08

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000007c 	.word	0x2000007c
 8000104:	08004d08 	.word	0x08004d08

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000234:	b5b0      	push	{r4, r5, r7, lr}
 8000236:	b088      	sub	sp, #32
 8000238:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800023a:	f000 fce5 	bl	8000c08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800023e:	f000 f859 	bl	80002f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000242:	f000 fa03 	bl	800064c <MX_GPIO_Init>
  MX_ADC_Init();
 8000246:	f000 f8b3 	bl	80003b0 <MX_ADC_Init>
  MX_TIM1_Init();
 800024a:	f000 f94d 	bl	80004e8 <MX_TIM1_Init>
  MX_I2C1_Init();
 800024e:	f000 f90b 	bl	8000468 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  init_vcnl4040();
 8000252:	f000 fa7b 	bl	800074c <init_vcnl4040>
  uint16_t pwm_value = 0;
 8000256:	231e      	movs	r3, #30
 8000258:	18fb      	adds	r3, r7, r3
 800025a:	2200      	movs	r2, #0
 800025c:	801a      	strh	r2, [r3, #0]
  uint16_t step = 0;
 800025e:	231c      	movs	r3, #28
 8000260:	18fb      	adds	r3, r7, r3
 8000262:	2200      	movs	r2, #0
 8000264:	801a      	strh	r2, [r3, #0]
  uint16_t prox = 0;
 8000266:	231a      	movs	r3, #26
 8000268:	18fb      	adds	r3, r7, r3
 800026a:	2200      	movs	r2, #0
 800026c:	801a      	strh	r2, [r3, #0]
  int32_t CH1_DC = 0;
 800026e:	2300      	movs	r3, #0
 8000270:	617b      	str	r3, [r7, #20]
  char text[20];

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000272:	4b1c      	ldr	r3, [pc, #112]	; (80002e4 <main+0xb0>)
 8000274:	210c      	movs	r1, #12
 8000276:	0018      	movs	r0, r3
 8000278:	f002 fe66 	bl	8002f48 <HAL_TIM_PWM_Start>

  ssd1306_Init();
 800027c:	f003 fe9a 	bl	8003fb4 <ssd1306_Init>
  ssd1306_SetDisplayOn(1);
 8000280:	2001      	movs	r0, #1
 8000282:	f004 f8af 	bl	80043e4 <ssd1306_SetDisplayOn>
  ssd1306_Fill(White);
 8000286:	2001      	movs	r0, #1
 8000288:	f003 ff02 	bl	8004090 <ssd1306_Fill>

	  /*
	   * OLED
	   */
	  static int n = 0;
	  snprintf(text, sizeof(text), "Test: %d", n++);
 800028c:	4b16      	ldr	r3, [pc, #88]	; (80002e8 <main+0xb4>)
 800028e:	681a      	ldr	r2, [r3, #0]
 8000290:	1c51      	adds	r1, r2, #1
 8000292:	4b15      	ldr	r3, [pc, #84]	; (80002e8 <main+0xb4>)
 8000294:	6019      	str	r1, [r3, #0]
 8000296:	4915      	ldr	r1, [pc, #84]	; (80002ec <main+0xb8>)
 8000298:	0038      	movs	r0, r7
 800029a:	0013      	movs	r3, r2
 800029c:	000a      	movs	r2, r1
 800029e:	2114      	movs	r1, #20
 80002a0:	f004 f914 	bl	80044cc <sniprintf>
	  oled_print(text, 1, Black);
 80002a4:	003b      	movs	r3, r7
 80002a6:	2200      	movs	r2, #0
 80002a8:	2101      	movs	r1, #1
 80002aa:	0018      	movs	r0, r3
 80002ac:	f000 faec 	bl	8000888 <oled_print>

	  /*
	   * VCNL4040
	   */
	  //get Proximity
	  prox = getProximity();
 80002b0:	251a      	movs	r5, #26
 80002b2:	197c      	adds	r4, r7, r5
 80002b4:	f003 fd5b 	bl	8003d6e <getProximity>
 80002b8:	0003      	movs	r3, r0
 80002ba:	8023      	strh	r3, [r4, #0]
	  snprintf(text, sizeof(text), "Dist: %d", prox);
 80002bc:	197b      	adds	r3, r7, r5
 80002be:	881b      	ldrh	r3, [r3, #0]
 80002c0:	4a0b      	ldr	r2, [pc, #44]	; (80002f0 <main+0xbc>)
 80002c2:	0038      	movs	r0, r7
 80002c4:	2114      	movs	r1, #20
 80002c6:	f004 f901 	bl	80044cc <sniprintf>
	  oled_print(text, 2, Black);
 80002ca:	003b      	movs	r3, r7
 80002cc:	2200      	movs	r2, #0
 80002ce:	2102      	movs	r1, #2
 80002d0:	0018      	movs	r0, r3
 80002d2:	f000 fad9 	bl	8000888 <oled_print>





	  HAL_Delay(500);
 80002d6:	23fa      	movs	r3, #250	; 0xfa
 80002d8:	005b      	lsls	r3, r3, #1
 80002da:	0018      	movs	r0, r3
 80002dc:	f000 fcf8 	bl	8000cd0 <HAL_Delay>
  {
 80002e0:	e7d4      	b.n	800028c <main+0x58>
 80002e2:	46c0      	nop			; (mov r8, r8)
 80002e4:	20000918 	.word	0x20000918
 80002e8:	20000094 	.word	0x20000094
 80002ec:	08004d20 	.word	0x08004d20
 80002f0:	08004d2c 	.word	0x08004d2c

080002f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002f4:	b590      	push	{r4, r7, lr}
 80002f6:	b097      	sub	sp, #92	; 0x5c
 80002f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002fa:	2428      	movs	r4, #40	; 0x28
 80002fc:	193b      	adds	r3, r7, r4
 80002fe:	0018      	movs	r0, r3
 8000300:	2330      	movs	r3, #48	; 0x30
 8000302:	001a      	movs	r2, r3
 8000304:	2100      	movs	r1, #0
 8000306:	f004 f8d9 	bl	80044bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800030a:	2318      	movs	r3, #24
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	0018      	movs	r0, r3
 8000310:	2310      	movs	r3, #16
 8000312:	001a      	movs	r2, r3
 8000314:	2100      	movs	r1, #0
 8000316:	f004 f8d1 	bl	80044bc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800031a:	1d3b      	adds	r3, r7, #4
 800031c:	0018      	movs	r0, r3
 800031e:	2314      	movs	r3, #20
 8000320:	001a      	movs	r2, r3
 8000322:	2100      	movs	r1, #0
 8000324:	f004 f8ca 	bl	80044bc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8000328:	0021      	movs	r1, r4
 800032a:	187b      	adds	r3, r7, r1
 800032c:	2212      	movs	r2, #18
 800032e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000330:	187b      	adds	r3, r7, r1
 8000332:	2201      	movs	r2, #1
 8000334:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000336:	187b      	adds	r3, r7, r1
 8000338:	2201      	movs	r2, #1
 800033a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800033c:	187b      	adds	r3, r7, r1
 800033e:	2210      	movs	r2, #16
 8000340:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000342:	187b      	adds	r3, r7, r1
 8000344:	2210      	movs	r2, #16
 8000346:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000348:	187b      	adds	r3, r7, r1
 800034a:	2200      	movs	r2, #0
 800034c:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800034e:	187b      	adds	r3, r7, r1
 8000350:	0018      	movs	r0, r3
 8000352:	f002 f821 	bl	8002398 <HAL_RCC_OscConfig>
 8000356:	1e03      	subs	r3, r0, #0
 8000358:	d001      	beq.n	800035e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800035a:	f000 fab9 	bl	80008d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800035e:	2118      	movs	r1, #24
 8000360:	187b      	adds	r3, r7, r1
 8000362:	2207      	movs	r2, #7
 8000364:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000366:	187b      	adds	r3, r7, r1
 8000368:	2200      	movs	r2, #0
 800036a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800036c:	187b      	adds	r3, r7, r1
 800036e:	2200      	movs	r2, #0
 8000370:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000372:	187b      	adds	r3, r7, r1
 8000374:	2200      	movs	r2, #0
 8000376:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000378:	187b      	adds	r3, r7, r1
 800037a:	2100      	movs	r1, #0
 800037c:	0018      	movs	r0, r3
 800037e:	f002 fb29 	bl	80029d4 <HAL_RCC_ClockConfig>
 8000382:	1e03      	subs	r3, r0, #0
 8000384:	d001      	beq.n	800038a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000386:	f000 faa3 	bl	80008d0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800038a:	1d3b      	adds	r3, r7, #4
 800038c:	2220      	movs	r2, #32
 800038e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000390:	1d3b      	adds	r3, r7, #4
 8000392:	2200      	movs	r2, #0
 8000394:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000396:	1d3b      	adds	r3, r7, #4
 8000398:	0018      	movs	r0, r3
 800039a:	f002 fc4f 	bl	8002c3c <HAL_RCCEx_PeriphCLKConfig>
 800039e:	1e03      	subs	r3, r0, #0
 80003a0:	d001      	beq.n	80003a6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80003a2:	f000 fa95 	bl	80008d0 <Error_Handler>
  }
}
 80003a6:	46c0      	nop			; (mov r8, r8)
 80003a8:	46bd      	mov	sp, r7
 80003aa:	b017      	add	sp, #92	; 0x5c
 80003ac:	bd90      	pop	{r4, r7, pc}
	...

080003b0 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b084      	sub	sp, #16
 80003b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003b6:	1d3b      	adds	r3, r7, #4
 80003b8:	0018      	movs	r0, r3
 80003ba:	230c      	movs	r3, #12
 80003bc:	001a      	movs	r2, r3
 80003be:	2100      	movs	r1, #0
 80003c0:	f004 f87c 	bl	80044bc <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80003c4:	4b26      	ldr	r3, [pc, #152]	; (8000460 <MX_ADC_Init+0xb0>)
 80003c6:	4a27      	ldr	r2, [pc, #156]	; (8000464 <MX_ADC_Init+0xb4>)
 80003c8:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80003ca:	4b25      	ldr	r3, [pc, #148]	; (8000460 <MX_ADC_Init+0xb0>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80003d0:	4b23      	ldr	r3, [pc, #140]	; (8000460 <MX_ADC_Init+0xb0>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003d6:	4b22      	ldr	r3, [pc, #136]	; (8000460 <MX_ADC_Init+0xb0>)
 80003d8:	2200      	movs	r2, #0
 80003da:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80003dc:	4b20      	ldr	r3, [pc, #128]	; (8000460 <MX_ADC_Init+0xb0>)
 80003de:	2201      	movs	r2, #1
 80003e0:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003e2:	4b1f      	ldr	r3, [pc, #124]	; (8000460 <MX_ADC_Init+0xb0>)
 80003e4:	2204      	movs	r2, #4
 80003e6:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80003e8:	4b1d      	ldr	r3, [pc, #116]	; (8000460 <MX_ADC_Init+0xb0>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80003ee:	4b1c      	ldr	r3, [pc, #112]	; (8000460 <MX_ADC_Init+0xb0>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80003f4:	4b1a      	ldr	r3, [pc, #104]	; (8000460 <MX_ADC_Init+0xb0>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80003fa:	4b19      	ldr	r3, [pc, #100]	; (8000460 <MX_ADC_Init+0xb0>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000400:	4b17      	ldr	r3, [pc, #92]	; (8000460 <MX_ADC_Init+0xb0>)
 8000402:	22c2      	movs	r2, #194	; 0xc2
 8000404:	32ff      	adds	r2, #255	; 0xff
 8000406:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000408:	4b15      	ldr	r3, [pc, #84]	; (8000460 <MX_ADC_Init+0xb0>)
 800040a:	2200      	movs	r2, #0
 800040c:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 800040e:	4b14      	ldr	r3, [pc, #80]	; (8000460 <MX_ADC_Init+0xb0>)
 8000410:	2224      	movs	r2, #36	; 0x24
 8000412:	2100      	movs	r1, #0
 8000414:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000416:	4b12      	ldr	r3, [pc, #72]	; (8000460 <MX_ADC_Init+0xb0>)
 8000418:	2201      	movs	r2, #1
 800041a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800041c:	4b10      	ldr	r3, [pc, #64]	; (8000460 <MX_ADC_Init+0xb0>)
 800041e:	0018      	movs	r0, r3
 8000420:	f000 fc7a 	bl	8000d18 <HAL_ADC_Init>
 8000424:	1e03      	subs	r3, r0, #0
 8000426:	d001      	beq.n	800042c <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000428:	f000 fa52 	bl	80008d0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800042c:	1d3b      	adds	r3, r7, #4
 800042e:	2200      	movs	r2, #0
 8000430:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000432:	1d3b      	adds	r3, r7, #4
 8000434:	2280      	movs	r2, #128	; 0x80
 8000436:	0152      	lsls	r2, r2, #5
 8000438:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800043a:	1d3b      	adds	r3, r7, #4
 800043c:	2280      	movs	r2, #128	; 0x80
 800043e:	0552      	lsls	r2, r2, #21
 8000440:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000442:	1d3a      	adds	r2, r7, #4
 8000444:	4b06      	ldr	r3, [pc, #24]	; (8000460 <MX_ADC_Init+0xb0>)
 8000446:	0011      	movs	r1, r2
 8000448:	0018      	movs	r0, r3
 800044a:	f000 fda5 	bl	8000f98 <HAL_ADC_ConfigChannel>
 800044e:	1e03      	subs	r3, r0, #0
 8000450:	d001      	beq.n	8000456 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8000452:	f000 fa3d 	bl	80008d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000456:	46c0      	nop			; (mov r8, r8)
 8000458:	46bd      	mov	sp, r7
 800045a:	b004      	add	sp, #16
 800045c:	bd80      	pop	{r7, pc}
 800045e:	46c0      	nop			; (mov r8, r8)
 8000460:	20000960 	.word	0x20000960
 8000464:	40012400 	.word	0x40012400

08000468 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800046c:	4b1b      	ldr	r3, [pc, #108]	; (80004dc <MX_I2C1_Init+0x74>)
 800046e:	4a1c      	ldr	r2, [pc, #112]	; (80004e0 <MX_I2C1_Init+0x78>)
 8000470:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000472:	4b1a      	ldr	r3, [pc, #104]	; (80004dc <MX_I2C1_Init+0x74>)
 8000474:	4a1b      	ldr	r2, [pc, #108]	; (80004e4 <MX_I2C1_Init+0x7c>)
 8000476:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 120;
 8000478:	4b18      	ldr	r3, [pc, #96]	; (80004dc <MX_I2C1_Init+0x74>)
 800047a:	2278      	movs	r2, #120	; 0x78
 800047c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800047e:	4b17      	ldr	r3, [pc, #92]	; (80004dc <MX_I2C1_Init+0x74>)
 8000480:	2201      	movs	r2, #1
 8000482:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000484:	4b15      	ldr	r3, [pc, #84]	; (80004dc <MX_I2C1_Init+0x74>)
 8000486:	2200      	movs	r2, #0
 8000488:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800048a:	4b14      	ldr	r3, [pc, #80]	; (80004dc <MX_I2C1_Init+0x74>)
 800048c:	2200      	movs	r2, #0
 800048e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000490:	4b12      	ldr	r3, [pc, #72]	; (80004dc <MX_I2C1_Init+0x74>)
 8000492:	2200      	movs	r2, #0
 8000494:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000496:	4b11      	ldr	r3, [pc, #68]	; (80004dc <MX_I2C1_Init+0x74>)
 8000498:	2200      	movs	r2, #0
 800049a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800049c:	4b0f      	ldr	r3, [pc, #60]	; (80004dc <MX_I2C1_Init+0x74>)
 800049e:	2200      	movs	r2, #0
 80004a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80004a2:	4b0e      	ldr	r3, [pc, #56]	; (80004dc <MX_I2C1_Init+0x74>)
 80004a4:	0018      	movs	r0, r3
 80004a6:	f001 f8af 	bl	8001608 <HAL_I2C_Init>
 80004aa:	1e03      	subs	r3, r0, #0
 80004ac:	d001      	beq.n	80004b2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80004ae:	f000 fa0f 	bl	80008d0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80004b2:	4b0a      	ldr	r3, [pc, #40]	; (80004dc <MX_I2C1_Init+0x74>)
 80004b4:	2100      	movs	r1, #0
 80004b6:	0018      	movs	r0, r3
 80004b8:	f001 fed6 	bl	8002268 <HAL_I2CEx_ConfigAnalogFilter>
 80004bc:	1e03      	subs	r3, r0, #0
 80004be:	d001      	beq.n	80004c4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80004c0:	f000 fa06 	bl	80008d0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80004c4:	4b05      	ldr	r3, [pc, #20]	; (80004dc <MX_I2C1_Init+0x74>)
 80004c6:	2100      	movs	r1, #0
 80004c8:	0018      	movs	r0, r3
 80004ca:	f001 ff19 	bl	8002300 <HAL_I2CEx_ConfigDigitalFilter>
 80004ce:	1e03      	subs	r3, r0, #0
 80004d0:	d001      	beq.n	80004d6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80004d2:	f000 f9fd 	bl	80008d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80004d6:	46c0      	nop			; (mov r8, r8)
 80004d8:	46bd      	mov	sp, r7
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	200008cc 	.word	0x200008cc
 80004e0:	40005400 	.word	0x40005400
 80004e4:	2000090e 	.word	0x2000090e

080004e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b096      	sub	sp, #88	; 0x58
 80004ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004ee:	2348      	movs	r3, #72	; 0x48
 80004f0:	18fb      	adds	r3, r7, r3
 80004f2:	0018      	movs	r0, r3
 80004f4:	2310      	movs	r3, #16
 80004f6:	001a      	movs	r2, r3
 80004f8:	2100      	movs	r1, #0
 80004fa:	f003 ffdf 	bl	80044bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004fe:	2340      	movs	r3, #64	; 0x40
 8000500:	18fb      	adds	r3, r7, r3
 8000502:	0018      	movs	r0, r3
 8000504:	2308      	movs	r3, #8
 8000506:	001a      	movs	r2, r3
 8000508:	2100      	movs	r1, #0
 800050a:	f003 ffd7 	bl	80044bc <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800050e:	2324      	movs	r3, #36	; 0x24
 8000510:	18fb      	adds	r3, r7, r3
 8000512:	0018      	movs	r0, r3
 8000514:	231c      	movs	r3, #28
 8000516:	001a      	movs	r2, r3
 8000518:	2100      	movs	r1, #0
 800051a:	f003 ffcf 	bl	80044bc <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800051e:	1d3b      	adds	r3, r7, #4
 8000520:	0018      	movs	r0, r3
 8000522:	2320      	movs	r3, #32
 8000524:	001a      	movs	r2, r3
 8000526:	2100      	movs	r1, #0
 8000528:	f003 ffc8 	bl	80044bc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800052c:	4b45      	ldr	r3, [pc, #276]	; (8000644 <MX_TIM1_Init+0x15c>)
 800052e:	4a46      	ldr	r2, [pc, #280]	; (8000648 <MX_TIM1_Init+0x160>)
 8000530:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000532:	4b44      	ldr	r3, [pc, #272]	; (8000644 <MX_TIM1_Init+0x15c>)
 8000534:	2200      	movs	r2, #0
 8000536:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000538:	4b42      	ldr	r3, [pc, #264]	; (8000644 <MX_TIM1_Init+0x15c>)
 800053a:	2200      	movs	r2, #0
 800053c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 800053e:	4b41      	ldr	r3, [pc, #260]	; (8000644 <MX_TIM1_Init+0x15c>)
 8000540:	22fa      	movs	r2, #250	; 0xfa
 8000542:	0092      	lsls	r2, r2, #2
 8000544:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000546:	4b3f      	ldr	r3, [pc, #252]	; (8000644 <MX_TIM1_Init+0x15c>)
 8000548:	2200      	movs	r2, #0
 800054a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800054c:	4b3d      	ldr	r3, [pc, #244]	; (8000644 <MX_TIM1_Init+0x15c>)
 800054e:	2200      	movs	r2, #0
 8000550:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000552:	4b3c      	ldr	r3, [pc, #240]	; (8000644 <MX_TIM1_Init+0x15c>)
 8000554:	2280      	movs	r2, #128	; 0x80
 8000556:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000558:	4b3a      	ldr	r3, [pc, #232]	; (8000644 <MX_TIM1_Init+0x15c>)
 800055a:	0018      	movs	r0, r3
 800055c:	f002 fc4c 	bl	8002df8 <HAL_TIM_Base_Init>
 8000560:	1e03      	subs	r3, r0, #0
 8000562:	d001      	beq.n	8000568 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 8000564:	f000 f9b4 	bl	80008d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000568:	2148      	movs	r1, #72	; 0x48
 800056a:	187b      	adds	r3, r7, r1
 800056c:	2280      	movs	r2, #128	; 0x80
 800056e:	0152      	lsls	r2, r2, #5
 8000570:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000572:	187a      	adds	r2, r7, r1
 8000574:	4b33      	ldr	r3, [pc, #204]	; (8000644 <MX_TIM1_Init+0x15c>)
 8000576:	0011      	movs	r1, r2
 8000578:	0018      	movs	r0, r3
 800057a:	f002 fe5d 	bl	8003238 <HAL_TIM_ConfigClockSource>
 800057e:	1e03      	subs	r3, r0, #0
 8000580:	d001      	beq.n	8000586 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000582:	f000 f9a5 	bl	80008d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000586:	4b2f      	ldr	r3, [pc, #188]	; (8000644 <MX_TIM1_Init+0x15c>)
 8000588:	0018      	movs	r0, r3
 800058a:	f002 fc85 	bl	8002e98 <HAL_TIM_PWM_Init>
 800058e:	1e03      	subs	r3, r0, #0
 8000590:	d001      	beq.n	8000596 <MX_TIM1_Init+0xae>
  {
    Error_Handler();
 8000592:	f000 f99d 	bl	80008d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000596:	2140      	movs	r1, #64	; 0x40
 8000598:	187b      	adds	r3, r7, r1
 800059a:	2200      	movs	r2, #0
 800059c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800059e:	187b      	adds	r3, r7, r1
 80005a0:	2200      	movs	r2, #0
 80005a2:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80005a4:	187a      	adds	r2, r7, r1
 80005a6:	4b27      	ldr	r3, [pc, #156]	; (8000644 <MX_TIM1_Init+0x15c>)
 80005a8:	0011      	movs	r1, r2
 80005aa:	0018      	movs	r0, r3
 80005ac:	f003 fa48 	bl	8003a40 <HAL_TIMEx_MasterConfigSynchronization>
 80005b0:	1e03      	subs	r3, r0, #0
 80005b2:	d001      	beq.n	80005b8 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 80005b4:	f000 f98c 	bl	80008d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005b8:	2124      	movs	r1, #36	; 0x24
 80005ba:	187b      	adds	r3, r7, r1
 80005bc:	2260      	movs	r2, #96	; 0x60
 80005be:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80005c0:	187b      	adds	r3, r7, r1
 80005c2:	2200      	movs	r2, #0
 80005c4:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005c6:	187b      	adds	r3, r7, r1
 80005c8:	2200      	movs	r2, #0
 80005ca:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005cc:	187b      	adds	r3, r7, r1
 80005ce:	2200      	movs	r2, #0
 80005d0:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80005d2:	187b      	adds	r3, r7, r1
 80005d4:	2200      	movs	r2, #0
 80005d6:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80005d8:	187b      	adds	r3, r7, r1
 80005da:	2200      	movs	r2, #0
 80005dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80005de:	1879      	adds	r1, r7, r1
 80005e0:	4b18      	ldr	r3, [pc, #96]	; (8000644 <MX_TIM1_Init+0x15c>)
 80005e2:	220c      	movs	r2, #12
 80005e4:	0018      	movs	r0, r3
 80005e6:	f002 fd61 	bl	80030ac <HAL_TIM_PWM_ConfigChannel>
 80005ea:	1e03      	subs	r3, r0, #0
 80005ec:	d001      	beq.n	80005f2 <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 80005ee:	f000 f96f 	bl	80008d0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80005f2:	1d3b      	adds	r3, r7, #4
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80005f8:	1d3b      	adds	r3, r7, #4
 80005fa:	2200      	movs	r2, #0
 80005fc:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80005fe:	1d3b      	adds	r3, r7, #4
 8000600:	2200      	movs	r2, #0
 8000602:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000604:	1d3b      	adds	r3, r7, #4
 8000606:	2200      	movs	r2, #0
 8000608:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	2200      	movs	r2, #0
 800060e:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000610:	1d3b      	adds	r3, r7, #4
 8000612:	2280      	movs	r2, #128	; 0x80
 8000614:	0192      	lsls	r2, r2, #6
 8000616:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000618:	1d3b      	adds	r3, r7, #4
 800061a:	2200      	movs	r2, #0
 800061c:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800061e:	1d3a      	adds	r2, r7, #4
 8000620:	4b08      	ldr	r3, [pc, #32]	; (8000644 <MX_TIM1_Init+0x15c>)
 8000622:	0011      	movs	r1, r2
 8000624:	0018      	movs	r0, r3
 8000626:	f003 fa63 	bl	8003af0 <HAL_TIMEx_ConfigBreakDeadTime>
 800062a:	1e03      	subs	r3, r0, #0
 800062c:	d001      	beq.n	8000632 <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 800062e:	f000 f94f 	bl	80008d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000632:	4b04      	ldr	r3, [pc, #16]	; (8000644 <MX_TIM1_Init+0x15c>)
 8000634:	0018      	movs	r0, r3
 8000636:	f000 fa29 	bl	8000a8c <HAL_TIM_MspPostInit>

}
 800063a:	46c0      	nop			; (mov r8, r8)
 800063c:	46bd      	mov	sp, r7
 800063e:	b016      	add	sp, #88	; 0x58
 8000640:	bd80      	pop	{r7, pc}
 8000642:	46c0      	nop			; (mov r8, r8)
 8000644:	20000918 	.word	0x20000918
 8000648:	40012c00 	.word	0x40012c00

0800064c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800064c:	b590      	push	{r4, r7, lr}
 800064e:	b089      	sub	sp, #36	; 0x24
 8000650:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000652:	240c      	movs	r4, #12
 8000654:	193b      	adds	r3, r7, r4
 8000656:	0018      	movs	r0, r3
 8000658:	2314      	movs	r3, #20
 800065a:	001a      	movs	r2, r3
 800065c:	2100      	movs	r1, #0
 800065e:	f003 ff2d 	bl	80044bc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000662:	4b36      	ldr	r3, [pc, #216]	; (800073c <MX_GPIO_Init+0xf0>)
 8000664:	695a      	ldr	r2, [r3, #20]
 8000666:	4b35      	ldr	r3, [pc, #212]	; (800073c <MX_GPIO_Init+0xf0>)
 8000668:	2180      	movs	r1, #128	; 0x80
 800066a:	0309      	lsls	r1, r1, #12
 800066c:	430a      	orrs	r2, r1
 800066e:	615a      	str	r2, [r3, #20]
 8000670:	4b32      	ldr	r3, [pc, #200]	; (800073c <MX_GPIO_Init+0xf0>)
 8000672:	695a      	ldr	r2, [r3, #20]
 8000674:	2380      	movs	r3, #128	; 0x80
 8000676:	031b      	lsls	r3, r3, #12
 8000678:	4013      	ands	r3, r2
 800067a:	60bb      	str	r3, [r7, #8]
 800067c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800067e:	4b2f      	ldr	r3, [pc, #188]	; (800073c <MX_GPIO_Init+0xf0>)
 8000680:	695a      	ldr	r2, [r3, #20]
 8000682:	4b2e      	ldr	r3, [pc, #184]	; (800073c <MX_GPIO_Init+0xf0>)
 8000684:	2180      	movs	r1, #128	; 0x80
 8000686:	0289      	lsls	r1, r1, #10
 8000688:	430a      	orrs	r2, r1
 800068a:	615a      	str	r2, [r3, #20]
 800068c:	4b2b      	ldr	r3, [pc, #172]	; (800073c <MX_GPIO_Init+0xf0>)
 800068e:	695a      	ldr	r2, [r3, #20]
 8000690:	2380      	movs	r3, #128	; 0x80
 8000692:	029b      	lsls	r3, r3, #10
 8000694:	4013      	ands	r3, r2
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800069a:	4b28      	ldr	r3, [pc, #160]	; (800073c <MX_GPIO_Init+0xf0>)
 800069c:	695a      	ldr	r2, [r3, #20]
 800069e:	4b27      	ldr	r3, [pc, #156]	; (800073c <MX_GPIO_Init+0xf0>)
 80006a0:	2180      	movs	r1, #128	; 0x80
 80006a2:	02c9      	lsls	r1, r1, #11
 80006a4:	430a      	orrs	r2, r1
 80006a6:	615a      	str	r2, [r3, #20]
 80006a8:	4b24      	ldr	r3, [pc, #144]	; (800073c <MX_GPIO_Init+0xf0>)
 80006aa:	695a      	ldr	r2, [r3, #20]
 80006ac:	2380      	movs	r3, #128	; 0x80
 80006ae:	02db      	lsls	r3, r3, #11
 80006b0:	4013      	ands	r3, r2
 80006b2:	603b      	str	r3, [r7, #0]
 80006b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_11
 80006b6:	4922      	ldr	r1, [pc, #136]	; (8000740 <MX_GPIO_Init+0xf4>)
 80006b8:	4b22      	ldr	r3, [pc, #136]	; (8000744 <MX_GPIO_Init+0xf8>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	0018      	movs	r0, r3
 80006be:	f000 ff85 	bl	80015cc <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80006c2:	193b      	adds	r3, r7, r4
 80006c4:	221f      	movs	r2, #31
 80006c6:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006c8:	193b      	adds	r3, r7, r4
 80006ca:	2200      	movs	r2, #0
 80006cc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ce:	193b      	adds	r3, r7, r4
 80006d0:	2200      	movs	r2, #0
 80006d2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006d4:	193b      	adds	r3, r7, r4
 80006d6:	4a1c      	ldr	r2, [pc, #112]	; (8000748 <MX_GPIO_Init+0xfc>)
 80006d8:	0019      	movs	r1, r3
 80006da:	0010      	movs	r0, r2
 80006dc:	f000 fe06 	bl	80012ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB11
                           PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_11
 80006e0:	193b      	adds	r3, r7, r4
 80006e2:	4a17      	ldr	r2, [pc, #92]	; (8000740 <MX_GPIO_Init+0xf4>)
 80006e4:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e6:	193b      	adds	r3, r7, r4
 80006e8:	2201      	movs	r2, #1
 80006ea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ec:	193b      	adds	r3, r7, r4
 80006ee:	2200      	movs	r2, #0
 80006f0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f2:	193b      	adds	r3, r7, r4
 80006f4:	2200      	movs	r2, #0
 80006f6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006f8:	193b      	adds	r3, r7, r4
 80006fa:	4a12      	ldr	r2, [pc, #72]	; (8000744 <MX_GPIO_Init+0xf8>)
 80006fc:	0019      	movs	r1, r3
 80006fe:	0010      	movs	r0, r2
 8000700:	f000 fdf4 	bl	80012ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000704:	0021      	movs	r1, r4
 8000706:	187b      	adds	r3, r7, r1
 8000708:	22e0      	movs	r2, #224	; 0xe0
 800070a:	0212      	lsls	r2, r2, #8
 800070c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800070e:	187b      	adds	r3, r7, r1
 8000710:	2202      	movs	r2, #2
 8000712:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000714:	187b      	adds	r3, r7, r1
 8000716:	2200      	movs	r2, #0
 8000718:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800071a:	187b      	adds	r3, r7, r1
 800071c:	2203      	movs	r2, #3
 800071e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8000720:	187b      	adds	r3, r7, r1
 8000722:	2200      	movs	r2, #0
 8000724:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000726:	187b      	adds	r3, r7, r1
 8000728:	4a06      	ldr	r2, [pc, #24]	; (8000744 <MX_GPIO_Init+0xf8>)
 800072a:	0019      	movs	r1, r3
 800072c:	0010      	movs	r0, r2
 800072e:	f000 fddd 	bl	80012ec <HAL_GPIO_Init>

}
 8000732:	46c0      	nop			; (mov r8, r8)
 8000734:	46bd      	mov	sp, r7
 8000736:	b009      	add	sp, #36	; 0x24
 8000738:	bd90      	pop	{r4, r7, pc}
 800073a:	46c0      	nop			; (mov r8, r8)
 800073c:	40021000 	.word	0x40021000
 8000740:	00001807 	.word	0x00001807
 8000744:	48000400 	.word	0x48000400
 8000748:	48000800 	.word	0x48000800

0800074c <init_vcnl4040>:

/* USER CODE BEGIN 4 */
void init_vcnl4040(void){
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
	//if (getID() != 0x0186) return (false); //Check default ID value
	setLEDCurrent(50); //Max IR LED current
 8000750:	2032      	movs	r0, #50	; 0x32
 8000752:	f003 fac0 	bl	8003cd6 <setLEDCurrent>
	setIRDutyCycle(40); //Set to highest duty cycle
 8000756:	2028      	movs	r0, #40	; 0x28
 8000758:	f003 fa28 	bl	8003bac <setIRDutyCycle>
	setProxIntegrationTime(8); //Set to max integration
 800075c:	2008      	movs	r0, #8
 800075e:	f003 fa54 	bl	8003c0a <setProxIntegrationTime>
	setProxResolution(16); //Set to 16-bit output
 8000762:	2010      	movs	r0, #16
 8000764:	f003 fa90 	bl	8003c88 <setProxResolution>
	enableSmartPersistance(); //Turn on smart presistance
 8000768:	f003 faaa 	bl	8003cc0 <enableSmartPersistance>
	powerOnProximity(); //Turn on prox sensing
 800076c:	f003 fa81 	bl	8003c72 <powerOnProximity>

	 //send_command_vcnl4040(VCNL4040_ADDR,VCNL4040_PS_CONF2,(0b00001011)<<8); //enable 16-bit PS
	 //Default -> more to add for specific funcions
}
 8000770:	46c0      	nop			; (mov r8, r8)
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
	...

08000778 <readCommand>:
	return(HAL_I2C_Master_Transmit(&hi2c1, address, buf ,4, HAL_MAX_DELAY));
}


uint16_t readCommand(uint8_t commandCode)
{
 8000778:	b5f0      	push	{r4, r5, r6, r7, lr}
 800077a:	b087      	sub	sp, #28
 800077c:	af02      	add	r7, sp, #8
 800077e:	0002      	movs	r2, r0
 8000780:	1dfb      	adds	r3, r7, #7
 8000782:	701a      	strb	r2, [r3, #0]
	uint8_t data;
	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(&hi2c1, VCNL4040_ADDR, &commandCode, 1, HAL_MAX_DELAY);
 8000784:	2360      	movs	r3, #96	; 0x60
 8000786:	b299      	uxth	r1, r3
 8000788:	250f      	movs	r5, #15
 800078a:	197c      	adds	r4, r7, r5
 800078c:	1dfa      	adds	r2, r7, #7
 800078e:	4815      	ldr	r0, [pc, #84]	; (80007e4 <readCommand+0x6c>)
 8000790:	2301      	movs	r3, #1
 8000792:	425b      	negs	r3, r3
 8000794:	9300      	str	r3, [sp, #0]
 8000796:	2301      	movs	r3, #1
 8000798:	f000 ffcc 	bl	8001734 <HAL_I2C_Master_Transmit>
 800079c:	0003      	movs	r3, r0
 800079e:	7023      	strb	r3, [r4, #0]

   if (ret != HAL_OK) //Send a restart command. Do not release bus.
 80007a0:	197b      	adds	r3, r7, r5
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <readCommand+0x34>
    {
      return (0); //Sensor did not ACK
 80007a8:	2300      	movs	r3, #0
 80007aa:	e017      	b.n	80007dc <readCommand+0x64>
    }
    ret = HAL_I2C_Master_Receive(&hi2c1, VCNL4040_ADDR, &data, 2, HAL_MAX_DELAY);
 80007ac:	2360      	movs	r3, #96	; 0x60
 80007ae:	b299      	uxth	r1, r3
 80007b0:	250f      	movs	r5, #15
 80007b2:	197c      	adds	r4, r7, r5
 80007b4:	260e      	movs	r6, #14
 80007b6:	19ba      	adds	r2, r7, r6
 80007b8:	480a      	ldr	r0, [pc, #40]	; (80007e4 <readCommand+0x6c>)
 80007ba:	2301      	movs	r3, #1
 80007bc:	425b      	negs	r3, r3
 80007be:	9300      	str	r3, [sp, #0]
 80007c0:	2302      	movs	r3, #2
 80007c2:	f001 f8bf 	bl	8001944 <HAL_I2C_Master_Receive>
 80007c6:	0003      	movs	r3, r0
 80007c8:	7023      	strb	r3, [r4, #0]
    if(ret == HAL_OK)
 80007ca:	197b      	adds	r3, r7, r5
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d103      	bne.n	80007da <readCommand+0x62>
    {
    	return(data);
 80007d2:	19bb      	adds	r3, r7, r6
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	b29b      	uxth	r3, r3
 80007d8:	e000      	b.n	80007dc <readCommand+0x64>
    }
     return (0); //Sensor did not respond
 80007da:	2300      	movs	r3, #0
}
 80007dc:	0018      	movs	r0, r3
 80007de:	46bd      	mov	sp, r7
 80007e0:	b005      	add	sp, #20
 80007e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007e4:	200008cc 	.word	0x200008cc

080007e8 <writeCommand>:

bool writeCommand(uint8_t commandCode, uint16_t value)
{
 80007e8:	b5b0      	push	{r4, r5, r7, lr}
 80007ea:	b086      	sub	sp, #24
 80007ec:	af02      	add	r7, sp, #8
 80007ee:	0002      	movs	r2, r0
 80007f0:	1dfb      	adds	r3, r7, #7
 80007f2:	701a      	strb	r2, [r3, #0]
 80007f4:	1d3b      	adds	r3, r7, #4
 80007f6:	1c0a      	adds	r2, r1, #0
 80007f8:	801a      	strh	r2, [r3, #0]
	uint8_t	LSB =  (value & 0xFF);
 80007fa:	1d3b      	adds	r3, r7, #4
 80007fc:	881b      	ldrh	r3, [r3, #0]
 80007fe:	b2da      	uxtb	r2, r3
 8000800:	240e      	movs	r4, #14
 8000802:	193b      	adds	r3, r7, r4
 8000804:	701a      	strb	r2, [r3, #0]
	uint8_t MSB = (value >> 8);
 8000806:	1d3b      	adds	r3, r7, #4
 8000808:	881b      	ldrh	r3, [r3, #0]
 800080a:	0a1b      	lsrs	r3, r3, #8
 800080c:	b29b      	uxth	r3, r3
 800080e:	b2da      	uxtb	r2, r3
 8000810:	250d      	movs	r5, #13
 8000812:	197b      	adds	r3, r7, r5
 8000814:	701a      	strb	r2, [r3, #0]

   HAL_I2C_Master_Transmit(&hi2c1, VCNL4040_ADDR, &commandCode, 1, HAL_MAX_DELAY);
 8000816:	2360      	movs	r3, #96	; 0x60
 8000818:	b299      	uxth	r1, r3
 800081a:	1dfa      	adds	r2, r7, #7
 800081c:	4819      	ldr	r0, [pc, #100]	; (8000884 <writeCommand+0x9c>)
 800081e:	2301      	movs	r3, #1
 8000820:	425b      	negs	r3, r3
 8000822:	9300      	str	r3, [sp, #0]
 8000824:	2301      	movs	r3, #1
 8000826:	f000 ff85 	bl	8001734 <HAL_I2C_Master_Transmit>
   HAL_I2C_Master_Transmit(&hi2c1, VCNL4040_ADDR, &LSB, 1, HAL_MAX_DELAY);
 800082a:	2360      	movs	r3, #96	; 0x60
 800082c:	b299      	uxth	r1, r3
 800082e:	193a      	adds	r2, r7, r4
 8000830:	4814      	ldr	r0, [pc, #80]	; (8000884 <writeCommand+0x9c>)
 8000832:	2301      	movs	r3, #1
 8000834:	425b      	negs	r3, r3
 8000836:	9300      	str	r3, [sp, #0]
 8000838:	2301      	movs	r3, #1
 800083a:	f000 ff7b 	bl	8001734 <HAL_I2C_Master_Transmit>
   HAL_I2C_Master_Transmit(&hi2c1, VCNL4040_ADDR, &MSB, 1, HAL_MAX_DELAY);
 800083e:	2360      	movs	r3, #96	; 0x60
 8000840:	b299      	uxth	r1, r3
 8000842:	197a      	adds	r2, r7, r5
 8000844:	480f      	ldr	r0, [pc, #60]	; (8000884 <writeCommand+0x9c>)
 8000846:	2301      	movs	r3, #1
 8000848:	425b      	negs	r3, r3
 800084a:	9300      	str	r3, [sp, #0]
 800084c:	2301      	movs	r3, #1
 800084e:	f000 ff71 	bl	8001734 <HAL_I2C_Master_Transmit>
   HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(&hi2c1, VCNL4040_ADDR, &commandCode, 1, HAL_MAX_DELAY);
 8000852:	2360      	movs	r3, #96	; 0x60
 8000854:	b299      	uxth	r1, r3
 8000856:	250f      	movs	r5, #15
 8000858:	197c      	adds	r4, r7, r5
 800085a:	1dfa      	adds	r2, r7, #7
 800085c:	4809      	ldr	r0, [pc, #36]	; (8000884 <writeCommand+0x9c>)
 800085e:	2301      	movs	r3, #1
 8000860:	425b      	negs	r3, r3
 8000862:	9300      	str	r3, [sp, #0]
 8000864:	2301      	movs	r3, #1
 8000866:	f000 ff65 	bl	8001734 <HAL_I2C_Master_Transmit>
 800086a:	0003      	movs	r3, r0
 800086c:	7023      	strb	r3, [r4, #0]
   if(ret != HAL_OK){
 800086e:	197b      	adds	r3, r7, r5
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <writeCommand+0x92>
	   return (false); //Sensor did not ACK
 8000876:	2300      	movs	r3, #0
 8000878:	e000      	b.n	800087c <writeCommand+0x94>
   }
   return true;
 800087a:	2301      	movs	r3, #1
}
 800087c:	0018      	movs	r0, r3
 800087e:	46bd      	mov	sp, r7
 8000880:	b004      	add	sp, #16
 8000882:	bdb0      	pop	{r4, r5, r7, pc}
 8000884:	200008cc 	.word	0x200008cc

08000888 <oled_print>:
void user_pwm_setvalue(uint16_t value)
{

}

void oled_print(char text[], uint32_t line, SSD1306_COLOR color){
 8000888:	b580      	push	{r7, lr}
 800088a:	b084      	sub	sp, #16
 800088c:	af00      	add	r7, sp, #0
 800088e:	60f8      	str	r0, [r7, #12]
 8000890:	60b9      	str	r1, [r7, #8]
 8000892:	1dfb      	adds	r3, r7, #7
 8000894:	701a      	strb	r2, [r3, #0]
	  ssd1306_SetCursor(OLED_BORDER_OFFSET, (line-1)*OLED_LINE_HEIGHT+OLED_BORDER_OFFSET);
 8000896:	68bb      	ldr	r3, [r7, #8]
 8000898:	b2db      	uxtb	r3, r3
 800089a:	1c1a      	adds	r2, r3, #0
 800089c:	0092      	lsls	r2, r2, #2
 800089e:	18d3      	adds	r3, r2, r3
 80008a0:	18db      	adds	r3, r3, r3
 80008a2:	b2db      	uxtb	r3, r3
 80008a4:	3b05      	subs	r3, #5
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	0019      	movs	r1, r3
 80008aa:	2005      	movs	r0, #5
 80008ac:	f003 fd68 	bl	8004380 <ssd1306_SetCursor>
	  ssd1306_WriteString(text,  Font_6x8, color);
 80008b0:	1dfb      	adds	r3, r7, #7
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	4a05      	ldr	r2, [pc, #20]	; (80008cc <oled_print+0x44>)
 80008b6:	68f8      	ldr	r0, [r7, #12]
 80008b8:	6811      	ldr	r1, [r2, #0]
 80008ba:	6852      	ldr	r2, [r2, #4]
 80008bc:	f003 fd36 	bl	800432c <ssd1306_WriteString>
	  ssd1306_UpdateScreen();
 80008c0:	f003 fc0a 	bl	80040d8 <ssd1306_UpdateScreen>
}
 80008c4:	46c0      	nop			; (mov r8, r8)
 80008c6:	46bd      	mov	sp, r7
 80008c8:	b004      	add	sp, #16
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	2000000c 	.word	0x2000000c

080008d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d4:	b672      	cpsid	i
}
 80008d6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008d8:	e7fe      	b.n	80008d8 <Error_Handler+0x8>
	...

080008dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008e2:	4b0f      	ldr	r3, [pc, #60]	; (8000920 <HAL_MspInit+0x44>)
 80008e4:	699a      	ldr	r2, [r3, #24]
 80008e6:	4b0e      	ldr	r3, [pc, #56]	; (8000920 <HAL_MspInit+0x44>)
 80008e8:	2101      	movs	r1, #1
 80008ea:	430a      	orrs	r2, r1
 80008ec:	619a      	str	r2, [r3, #24]
 80008ee:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <HAL_MspInit+0x44>)
 80008f0:	699b      	ldr	r3, [r3, #24]
 80008f2:	2201      	movs	r2, #1
 80008f4:	4013      	ands	r3, r2
 80008f6:	607b      	str	r3, [r7, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008fa:	4b09      	ldr	r3, [pc, #36]	; (8000920 <HAL_MspInit+0x44>)
 80008fc:	69da      	ldr	r2, [r3, #28]
 80008fe:	4b08      	ldr	r3, [pc, #32]	; (8000920 <HAL_MspInit+0x44>)
 8000900:	2180      	movs	r1, #128	; 0x80
 8000902:	0549      	lsls	r1, r1, #21
 8000904:	430a      	orrs	r2, r1
 8000906:	61da      	str	r2, [r3, #28]
 8000908:	4b05      	ldr	r3, [pc, #20]	; (8000920 <HAL_MspInit+0x44>)
 800090a:	69da      	ldr	r2, [r3, #28]
 800090c:	2380      	movs	r3, #128	; 0x80
 800090e:	055b      	lsls	r3, r3, #21
 8000910:	4013      	ands	r3, r2
 8000912:	603b      	str	r3, [r7, #0]
 8000914:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000916:	46c0      	nop			; (mov r8, r8)
 8000918:	46bd      	mov	sp, r7
 800091a:	b002      	add	sp, #8
 800091c:	bd80      	pop	{r7, pc}
 800091e:	46c0      	nop			; (mov r8, r8)
 8000920:	40021000 	.word	0x40021000

08000924 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000924:	b590      	push	{r4, r7, lr}
 8000926:	b08b      	sub	sp, #44	; 0x2c
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092c:	2414      	movs	r4, #20
 800092e:	193b      	adds	r3, r7, r4
 8000930:	0018      	movs	r0, r3
 8000932:	2314      	movs	r3, #20
 8000934:	001a      	movs	r2, r3
 8000936:	2100      	movs	r1, #0
 8000938:	f003 fdc0 	bl	80044bc <memset>
  if(hadc->Instance==ADC1)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a19      	ldr	r2, [pc, #100]	; (80009a8 <HAL_ADC_MspInit+0x84>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d12b      	bne.n	800099e <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000946:	4b19      	ldr	r3, [pc, #100]	; (80009ac <HAL_ADC_MspInit+0x88>)
 8000948:	699a      	ldr	r2, [r3, #24]
 800094a:	4b18      	ldr	r3, [pc, #96]	; (80009ac <HAL_ADC_MspInit+0x88>)
 800094c:	2180      	movs	r1, #128	; 0x80
 800094e:	0089      	lsls	r1, r1, #2
 8000950:	430a      	orrs	r2, r1
 8000952:	619a      	str	r2, [r3, #24]
 8000954:	4b15      	ldr	r3, [pc, #84]	; (80009ac <HAL_ADC_MspInit+0x88>)
 8000956:	699a      	ldr	r2, [r3, #24]
 8000958:	2380      	movs	r3, #128	; 0x80
 800095a:	009b      	lsls	r3, r3, #2
 800095c:	4013      	ands	r3, r2
 800095e:	613b      	str	r3, [r7, #16]
 8000960:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000962:	4b12      	ldr	r3, [pc, #72]	; (80009ac <HAL_ADC_MspInit+0x88>)
 8000964:	695a      	ldr	r2, [r3, #20]
 8000966:	4b11      	ldr	r3, [pc, #68]	; (80009ac <HAL_ADC_MspInit+0x88>)
 8000968:	2180      	movs	r1, #128	; 0x80
 800096a:	0289      	lsls	r1, r1, #10
 800096c:	430a      	orrs	r2, r1
 800096e:	615a      	str	r2, [r3, #20]
 8000970:	4b0e      	ldr	r3, [pc, #56]	; (80009ac <HAL_ADC_MspInit+0x88>)
 8000972:	695a      	ldr	r2, [r3, #20]
 8000974:	2380      	movs	r3, #128	; 0x80
 8000976:	029b      	lsls	r3, r3, #10
 8000978:	4013      	ands	r3, r2
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800097e:	193b      	adds	r3, r7, r4
 8000980:	2201      	movs	r2, #1
 8000982:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000984:	193b      	adds	r3, r7, r4
 8000986:	2203      	movs	r2, #3
 8000988:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	193b      	adds	r3, r7, r4
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000990:	193a      	adds	r2, r7, r4
 8000992:	2390      	movs	r3, #144	; 0x90
 8000994:	05db      	lsls	r3, r3, #23
 8000996:	0011      	movs	r1, r2
 8000998:	0018      	movs	r0, r3
 800099a:	f000 fca7 	bl	80012ec <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800099e:	46c0      	nop			; (mov r8, r8)
 80009a0:	46bd      	mov	sp, r7
 80009a2:	b00b      	add	sp, #44	; 0x2c
 80009a4:	bd90      	pop	{r4, r7, pc}
 80009a6:	46c0      	nop			; (mov r8, r8)
 80009a8:	40012400 	.word	0x40012400
 80009ac:	40021000 	.word	0x40021000

080009b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009b0:	b590      	push	{r4, r7, lr}
 80009b2:	b08b      	sub	sp, #44	; 0x2c
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b8:	2414      	movs	r4, #20
 80009ba:	193b      	adds	r3, r7, r4
 80009bc:	0018      	movs	r0, r3
 80009be:	2314      	movs	r3, #20
 80009c0:	001a      	movs	r2, r3
 80009c2:	2100      	movs	r1, #0
 80009c4:	f003 fd7a 	bl	80044bc <memset>
  if(hi2c->Instance==I2C1)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a1c      	ldr	r2, [pc, #112]	; (8000a40 <HAL_I2C_MspInit+0x90>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d132      	bne.n	8000a38 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d2:	4b1c      	ldr	r3, [pc, #112]	; (8000a44 <HAL_I2C_MspInit+0x94>)
 80009d4:	695a      	ldr	r2, [r3, #20]
 80009d6:	4b1b      	ldr	r3, [pc, #108]	; (8000a44 <HAL_I2C_MspInit+0x94>)
 80009d8:	2180      	movs	r1, #128	; 0x80
 80009da:	02c9      	lsls	r1, r1, #11
 80009dc:	430a      	orrs	r2, r1
 80009de:	615a      	str	r2, [r3, #20]
 80009e0:	4b18      	ldr	r3, [pc, #96]	; (8000a44 <HAL_I2C_MspInit+0x94>)
 80009e2:	695a      	ldr	r2, [r3, #20]
 80009e4:	2380      	movs	r3, #128	; 0x80
 80009e6:	02db      	lsls	r3, r3, #11
 80009e8:	4013      	ands	r3, r2
 80009ea:	613b      	str	r3, [r7, #16]
 80009ec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80009ee:	193b      	adds	r3, r7, r4
 80009f0:	22c0      	movs	r2, #192	; 0xc0
 80009f2:	0092      	lsls	r2, r2, #2
 80009f4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009f6:	0021      	movs	r1, r4
 80009f8:	187b      	adds	r3, r7, r1
 80009fa:	2212      	movs	r2, #18
 80009fc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	187b      	adds	r3, r7, r1
 8000a00:	2200      	movs	r2, #0
 8000a02:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a04:	187b      	adds	r3, r7, r1
 8000a06:	2203      	movs	r2, #3
 8000a08:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000a0a:	187b      	adds	r3, r7, r1
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a10:	187b      	adds	r3, r7, r1
 8000a12:	4a0d      	ldr	r2, [pc, #52]	; (8000a48 <HAL_I2C_MspInit+0x98>)
 8000a14:	0019      	movs	r1, r3
 8000a16:	0010      	movs	r0, r2
 8000a18:	f000 fc68 	bl	80012ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a1c:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <HAL_I2C_MspInit+0x94>)
 8000a1e:	69da      	ldr	r2, [r3, #28]
 8000a20:	4b08      	ldr	r3, [pc, #32]	; (8000a44 <HAL_I2C_MspInit+0x94>)
 8000a22:	2180      	movs	r1, #128	; 0x80
 8000a24:	0389      	lsls	r1, r1, #14
 8000a26:	430a      	orrs	r2, r1
 8000a28:	61da      	str	r2, [r3, #28]
 8000a2a:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <HAL_I2C_MspInit+0x94>)
 8000a2c:	69da      	ldr	r2, [r3, #28]
 8000a2e:	2380      	movs	r3, #128	; 0x80
 8000a30:	039b      	lsls	r3, r3, #14
 8000a32:	4013      	ands	r3, r2
 8000a34:	60fb      	str	r3, [r7, #12]
 8000a36:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a38:	46c0      	nop			; (mov r8, r8)
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	b00b      	add	sp, #44	; 0x2c
 8000a3e:	bd90      	pop	{r4, r7, pc}
 8000a40:	40005400 	.word	0x40005400
 8000a44:	40021000 	.word	0x40021000
 8000a48:	48000400 	.word	0x48000400

08000a4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a0a      	ldr	r2, [pc, #40]	; (8000a84 <HAL_TIM_Base_MspInit+0x38>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d10d      	bne.n	8000a7a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a5e:	4b0a      	ldr	r3, [pc, #40]	; (8000a88 <HAL_TIM_Base_MspInit+0x3c>)
 8000a60:	699a      	ldr	r2, [r3, #24]
 8000a62:	4b09      	ldr	r3, [pc, #36]	; (8000a88 <HAL_TIM_Base_MspInit+0x3c>)
 8000a64:	2180      	movs	r1, #128	; 0x80
 8000a66:	0109      	lsls	r1, r1, #4
 8000a68:	430a      	orrs	r2, r1
 8000a6a:	619a      	str	r2, [r3, #24]
 8000a6c:	4b06      	ldr	r3, [pc, #24]	; (8000a88 <HAL_TIM_Base_MspInit+0x3c>)
 8000a6e:	699a      	ldr	r2, [r3, #24]
 8000a70:	2380      	movs	r3, #128	; 0x80
 8000a72:	011b      	lsls	r3, r3, #4
 8000a74:	4013      	ands	r3, r2
 8000a76:	60fb      	str	r3, [r7, #12]
 8000a78:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000a7a:	46c0      	nop			; (mov r8, r8)
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	b004      	add	sp, #16
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	46c0      	nop			; (mov r8, r8)
 8000a84:	40012c00 	.word	0x40012c00
 8000a88:	40021000 	.word	0x40021000

08000a8c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a8c:	b590      	push	{r4, r7, lr}
 8000a8e:	b089      	sub	sp, #36	; 0x24
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a94:	240c      	movs	r4, #12
 8000a96:	193b      	adds	r3, r7, r4
 8000a98:	0018      	movs	r0, r3
 8000a9a:	2314      	movs	r3, #20
 8000a9c:	001a      	movs	r2, r3
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	f003 fd0c 	bl	80044bc <memset>
  if(htim->Instance==TIM1)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a16      	ldr	r2, [pc, #88]	; (8000b04 <HAL_TIM_MspPostInit+0x78>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d125      	bne.n	8000afa <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aae:	4b16      	ldr	r3, [pc, #88]	; (8000b08 <HAL_TIM_MspPostInit+0x7c>)
 8000ab0:	695a      	ldr	r2, [r3, #20]
 8000ab2:	4b15      	ldr	r3, [pc, #84]	; (8000b08 <HAL_TIM_MspPostInit+0x7c>)
 8000ab4:	2180      	movs	r1, #128	; 0x80
 8000ab6:	0289      	lsls	r1, r1, #10
 8000ab8:	430a      	orrs	r2, r1
 8000aba:	615a      	str	r2, [r3, #20]
 8000abc:	4b12      	ldr	r3, [pc, #72]	; (8000b08 <HAL_TIM_MspPostInit+0x7c>)
 8000abe:	695a      	ldr	r2, [r3, #20]
 8000ac0:	2380      	movs	r3, #128	; 0x80
 8000ac2:	029b      	lsls	r3, r3, #10
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	60bb      	str	r3, [r7, #8]
 8000ac8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000aca:	193b      	adds	r3, r7, r4
 8000acc:	2280      	movs	r2, #128	; 0x80
 8000ace:	0112      	lsls	r2, r2, #4
 8000ad0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad2:	0021      	movs	r1, r4
 8000ad4:	187b      	adds	r3, r7, r1
 8000ad6:	2202      	movs	r2, #2
 8000ad8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	187b      	adds	r3, r7, r1
 8000adc:	2200      	movs	r2, #0
 8000ade:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae0:	187b      	adds	r3, r7, r1
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000ae6:	187b      	adds	r3, r7, r1
 8000ae8:	2202      	movs	r2, #2
 8000aea:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aec:	187a      	adds	r2, r7, r1
 8000aee:	2390      	movs	r3, #144	; 0x90
 8000af0:	05db      	lsls	r3, r3, #23
 8000af2:	0011      	movs	r1, r2
 8000af4:	0018      	movs	r0, r3
 8000af6:	f000 fbf9 	bl	80012ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000afa:	46c0      	nop			; (mov r8, r8)
 8000afc:	46bd      	mov	sp, r7
 8000afe:	b009      	add	sp, #36	; 0x24
 8000b00:	bd90      	pop	{r4, r7, pc}
 8000b02:	46c0      	nop			; (mov r8, r8)
 8000b04:	40012c00 	.word	0x40012c00
 8000b08:	40021000 	.word	0x40021000

08000b0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b10:	e7fe      	b.n	8000b10 <NMI_Handler+0x4>

08000b12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b12:	b580      	push	{r7, lr}
 8000b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b16:	e7fe      	b.n	8000b16 <HardFault_Handler+0x4>

08000b18 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b1c:	46c0      	nop			; (mov r8, r8)
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}

08000b22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b22:	b580      	push	{r7, lr}
 8000b24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b26:	46c0      	nop			; (mov r8, r8)
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b30:	f000 f8b2 	bl	8000c98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b34:	46c0      	nop			; (mov r8, r8)
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
	...

08000b3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b086      	sub	sp, #24
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b44:	4a14      	ldr	r2, [pc, #80]	; (8000b98 <_sbrk+0x5c>)
 8000b46:	4b15      	ldr	r3, [pc, #84]	; (8000b9c <_sbrk+0x60>)
 8000b48:	1ad3      	subs	r3, r2, r3
 8000b4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b50:	4b13      	ldr	r3, [pc, #76]	; (8000ba0 <_sbrk+0x64>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d102      	bne.n	8000b5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b58:	4b11      	ldr	r3, [pc, #68]	; (8000ba0 <_sbrk+0x64>)
 8000b5a:	4a12      	ldr	r2, [pc, #72]	; (8000ba4 <_sbrk+0x68>)
 8000b5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b5e:	4b10      	ldr	r3, [pc, #64]	; (8000ba0 <_sbrk+0x64>)
 8000b60:	681a      	ldr	r2, [r3, #0]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	18d3      	adds	r3, r2, r3
 8000b66:	693a      	ldr	r2, [r7, #16]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	d207      	bcs.n	8000b7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b6c:	f003 fc60 	bl	8004430 <__errno>
 8000b70:	0003      	movs	r3, r0
 8000b72:	220c      	movs	r2, #12
 8000b74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b76:	2301      	movs	r3, #1
 8000b78:	425b      	negs	r3, r3
 8000b7a:	e009      	b.n	8000b90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b7c:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <_sbrk+0x64>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b82:	4b07      	ldr	r3, [pc, #28]	; (8000ba0 <_sbrk+0x64>)
 8000b84:	681a      	ldr	r2, [r3, #0]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	18d2      	adds	r2, r2, r3
 8000b8a:	4b05      	ldr	r3, [pc, #20]	; (8000ba0 <_sbrk+0x64>)
 8000b8c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000b8e:	68fb      	ldr	r3, [r7, #12]
}
 8000b90:	0018      	movs	r0, r3
 8000b92:	46bd      	mov	sp, r7
 8000b94:	b006      	add	sp, #24
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	20004000 	.word	0x20004000
 8000b9c:	00000400 	.word	0x00000400
 8000ba0:	20000098 	.word	0x20000098
 8000ba4:	200009b8 	.word	0x200009b8

08000ba8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000bac:	46c0      	nop			; (mov r8, r8)
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
	...

08000bb4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bb4:	480d      	ldr	r0, [pc, #52]	; (8000bec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bb6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bb8:	480d      	ldr	r0, [pc, #52]	; (8000bf0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bba:	490e      	ldr	r1, [pc, #56]	; (8000bf4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bbc:	4a0e      	ldr	r2, [pc, #56]	; (8000bf8 <LoopForever+0xe>)
  movs r3, #0
 8000bbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bc0:	e002      	b.n	8000bc8 <LoopCopyDataInit>

08000bc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bc6:	3304      	adds	r3, #4

08000bc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bcc:	d3f9      	bcc.n	8000bc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bce:	4a0b      	ldr	r2, [pc, #44]	; (8000bfc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bd0:	4c0b      	ldr	r4, [pc, #44]	; (8000c00 <LoopForever+0x16>)
  movs r3, #0
 8000bd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bd4:	e001      	b.n	8000bda <LoopFillZerobss>

08000bd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd8:	3204      	adds	r2, #4

08000bda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bdc:	d3fb      	bcc.n	8000bd6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000bde:	f7ff ffe3 	bl	8000ba8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000be2:	f003 fc2b 	bl	800443c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000be6:	f7ff fb25 	bl	8000234 <main>

08000bea <LoopForever>:

LoopForever:
    b LoopForever
 8000bea:	e7fe      	b.n	8000bea <LoopForever>
  ldr   r0, =_estack
 8000bec:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000bf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bf4:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000bf8:	08005394 	.word	0x08005394
  ldr r2, =_sbss
 8000bfc:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000c00:	200009b4 	.word	0x200009b4

08000c04 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c04:	e7fe      	b.n	8000c04 <ADC1_IRQHandler>
	...

08000c08 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c0c:	4b07      	ldr	r3, [pc, #28]	; (8000c2c <HAL_Init+0x24>)
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <HAL_Init+0x24>)
 8000c12:	2110      	movs	r1, #16
 8000c14:	430a      	orrs	r2, r1
 8000c16:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000c18:	2003      	movs	r0, #3
 8000c1a:	f000 f809 	bl	8000c30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c1e:	f7ff fe5d 	bl	80008dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c22:	2300      	movs	r3, #0
}
 8000c24:	0018      	movs	r0, r3
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	46c0      	nop			; (mov r8, r8)
 8000c2c:	40022000 	.word	0x40022000

08000c30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c30:	b590      	push	{r4, r7, lr}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c38:	4b14      	ldr	r3, [pc, #80]	; (8000c8c <HAL_InitTick+0x5c>)
 8000c3a:	681c      	ldr	r4, [r3, #0]
 8000c3c:	4b14      	ldr	r3, [pc, #80]	; (8000c90 <HAL_InitTick+0x60>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	0019      	movs	r1, r3
 8000c42:	23fa      	movs	r3, #250	; 0xfa
 8000c44:	0098      	lsls	r0, r3, #2
 8000c46:	f7ff fa69 	bl	800011c <__udivsi3>
 8000c4a:	0003      	movs	r3, r0
 8000c4c:	0019      	movs	r1, r3
 8000c4e:	0020      	movs	r0, r4
 8000c50:	f7ff fa64 	bl	800011c <__udivsi3>
 8000c54:	0003      	movs	r3, r0
 8000c56:	0018      	movs	r0, r3
 8000c58:	f000 fb3b 	bl	80012d2 <HAL_SYSTICK_Config>
 8000c5c:	1e03      	subs	r3, r0, #0
 8000c5e:	d001      	beq.n	8000c64 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000c60:	2301      	movs	r3, #1
 8000c62:	e00f      	b.n	8000c84 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	2b03      	cmp	r3, #3
 8000c68:	d80b      	bhi.n	8000c82 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c6a:	6879      	ldr	r1, [r7, #4]
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	425b      	negs	r3, r3
 8000c70:	2200      	movs	r2, #0
 8000c72:	0018      	movs	r0, r3
 8000c74:	f000 fb18 	bl	80012a8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c78:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <HAL_InitTick+0x64>)
 8000c7a:	687a      	ldr	r2, [r7, #4]
 8000c7c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	e000      	b.n	8000c84 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000c82:	2301      	movs	r3, #1
}
 8000c84:	0018      	movs	r0, r3
 8000c86:	46bd      	mov	sp, r7
 8000c88:	b003      	add	sp, #12
 8000c8a:	bd90      	pop	{r4, r7, pc}
 8000c8c:	20000000 	.word	0x20000000
 8000c90:	20000008 	.word	0x20000008
 8000c94:	20000004 	.word	0x20000004

08000c98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c9c:	4b05      	ldr	r3, [pc, #20]	; (8000cb4 <HAL_IncTick+0x1c>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	001a      	movs	r2, r3
 8000ca2:	4b05      	ldr	r3, [pc, #20]	; (8000cb8 <HAL_IncTick+0x20>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	18d2      	adds	r2, r2, r3
 8000ca8:	4b03      	ldr	r3, [pc, #12]	; (8000cb8 <HAL_IncTick+0x20>)
 8000caa:	601a      	str	r2, [r3, #0]
}
 8000cac:	46c0      	nop			; (mov r8, r8)
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	46c0      	nop			; (mov r8, r8)
 8000cb4:	20000008 	.word	0x20000008
 8000cb8:	200009a0 	.word	0x200009a0

08000cbc <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000cc0:	4b02      	ldr	r3, [pc, #8]	; (8000ccc <HAL_GetTick+0x10>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
}
 8000cc4:	0018      	movs	r0, r3
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	46c0      	nop			; (mov r8, r8)
 8000ccc:	200009a0 	.word	0x200009a0

08000cd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cd8:	f7ff fff0 	bl	8000cbc <HAL_GetTick>
 8000cdc:	0003      	movs	r3, r0
 8000cde:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	3301      	adds	r3, #1
 8000ce8:	d005      	beq.n	8000cf6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cea:	4b0a      	ldr	r3, [pc, #40]	; (8000d14 <HAL_Delay+0x44>)
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	001a      	movs	r2, r3
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	189b      	adds	r3, r3, r2
 8000cf4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000cf6:	46c0      	nop			; (mov r8, r8)
 8000cf8:	f7ff ffe0 	bl	8000cbc <HAL_GetTick>
 8000cfc:	0002      	movs	r2, r0
 8000cfe:	68bb      	ldr	r3, [r7, #8]
 8000d00:	1ad3      	subs	r3, r2, r3
 8000d02:	68fa      	ldr	r2, [r7, #12]
 8000d04:	429a      	cmp	r2, r3
 8000d06:	d8f7      	bhi.n	8000cf8 <HAL_Delay+0x28>
  {
  }
}
 8000d08:	46c0      	nop			; (mov r8, r8)
 8000d0a:	46c0      	nop			; (mov r8, r8)
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	b004      	add	sp, #16
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	46c0      	nop			; (mov r8, r8)
 8000d14:	20000008 	.word	0x20000008

08000d18 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d20:	230f      	movs	r3, #15
 8000d22:	18fb      	adds	r3, r7, r3
 8000d24:	2200      	movs	r2, #0
 8000d26:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d101      	bne.n	8000d36 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8000d32:	2301      	movs	r3, #1
 8000d34:	e125      	b.n	8000f82 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d10a      	bne.n	8000d54 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	2200      	movs	r2, #0
 8000d42:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2234      	movs	r2, #52	; 0x34
 8000d48:	2100      	movs	r1, #0
 8000d4a:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	0018      	movs	r0, r3
 8000d50:	f7ff fde8 	bl	8000924 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d58:	2210      	movs	r2, #16
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	d000      	beq.n	8000d60 <HAL_ADC_Init+0x48>
 8000d5e:	e103      	b.n	8000f68 <HAL_ADC_Init+0x250>
 8000d60:	230f      	movs	r3, #15
 8000d62:	18fb      	adds	r3, r7, r3
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d000      	beq.n	8000d6c <HAL_ADC_Init+0x54>
 8000d6a:	e0fd      	b.n	8000f68 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	689b      	ldr	r3, [r3, #8]
 8000d72:	2204      	movs	r2, #4
 8000d74:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000d76:	d000      	beq.n	8000d7a <HAL_ADC_Init+0x62>
 8000d78:	e0f6      	b.n	8000f68 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d7e:	4a83      	ldr	r2, [pc, #524]	; (8000f8c <HAL_ADC_Init+0x274>)
 8000d80:	4013      	ands	r3, r2
 8000d82:	2202      	movs	r2, #2
 8000d84:	431a      	orrs	r2, r3
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	689b      	ldr	r3, [r3, #8]
 8000d90:	2203      	movs	r2, #3
 8000d92:	4013      	ands	r3, r2
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	d112      	bne.n	8000dbe <HAL_ADC_Init+0xa6>
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	2201      	movs	r2, #1
 8000da0:	4013      	ands	r3, r2
 8000da2:	2b01      	cmp	r3, #1
 8000da4:	d009      	beq.n	8000dba <HAL_ADC_Init+0xa2>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	68da      	ldr	r2, [r3, #12]
 8000dac:	2380      	movs	r3, #128	; 0x80
 8000dae:	021b      	lsls	r3, r3, #8
 8000db0:	401a      	ands	r2, r3
 8000db2:	2380      	movs	r3, #128	; 0x80
 8000db4:	021b      	lsls	r3, r3, #8
 8000db6:	429a      	cmp	r2, r3
 8000db8:	d101      	bne.n	8000dbe <HAL_ADC_Init+0xa6>
 8000dba:	2301      	movs	r3, #1
 8000dbc:	e000      	b.n	8000dc0 <HAL_ADC_Init+0xa8>
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d116      	bne.n	8000df2 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	68db      	ldr	r3, [r3, #12]
 8000dca:	2218      	movs	r2, #24
 8000dcc:	4393      	bics	r3, r2
 8000dce:	0019      	movs	r1, r3
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	689a      	ldr	r2, [r3, #8]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	430a      	orrs	r2, r1
 8000dda:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	691b      	ldr	r3, [r3, #16]
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	0899      	lsrs	r1, r3, #2
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	685a      	ldr	r2, [r3, #4]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	430a      	orrs	r2, r1
 8000df0:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	68da      	ldr	r2, [r3, #12]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4964      	ldr	r1, [pc, #400]	; (8000f90 <HAL_ADC_Init+0x278>)
 8000dfe:	400a      	ands	r2, r1
 8000e00:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	7e1b      	ldrb	r3, [r3, #24]
 8000e06:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	7e5b      	ldrb	r3, [r3, #25]
 8000e0c:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000e0e:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	7e9b      	ldrb	r3, [r3, #26]
 8000e14:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000e16:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e1c:	2b01      	cmp	r3, #1
 8000e1e:	d002      	beq.n	8000e26 <HAL_ADC_Init+0x10e>
 8000e20:	2380      	movs	r3, #128	; 0x80
 8000e22:	015b      	lsls	r3, r3, #5
 8000e24:	e000      	b.n	8000e28 <HAL_ADC_Init+0x110>
 8000e26:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000e28:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000e2e:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	691b      	ldr	r3, [r3, #16]
 8000e34:	2b02      	cmp	r3, #2
 8000e36:	d101      	bne.n	8000e3c <HAL_ADC_Init+0x124>
 8000e38:	2304      	movs	r3, #4
 8000e3a:	e000      	b.n	8000e3e <HAL_ADC_Init+0x126>
 8000e3c:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8000e3e:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2124      	movs	r1, #36	; 0x24
 8000e44:	5c5b      	ldrb	r3, [r3, r1]
 8000e46:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000e48:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000e4a:	68ba      	ldr	r2, [r7, #8]
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	7edb      	ldrb	r3, [r3, #27]
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d115      	bne.n	8000e84 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	7e9b      	ldrb	r3, [r3, #26]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d105      	bne.n	8000e6c <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	2280      	movs	r2, #128	; 0x80
 8000e64:	0252      	lsls	r2, r2, #9
 8000e66:	4313      	orrs	r3, r2
 8000e68:	60bb      	str	r3, [r7, #8]
 8000e6a:	e00b      	b.n	8000e84 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e70:	2220      	movs	r2, #32
 8000e72:	431a      	orrs	r2, r3
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	431a      	orrs	r2, r3
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	69da      	ldr	r2, [r3, #28]
 8000e88:	23c2      	movs	r3, #194	; 0xc2
 8000e8a:	33ff      	adds	r3, #255	; 0xff
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	d007      	beq.n	8000ea0 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	68ba      	ldr	r2, [r7, #8]
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	68d9      	ldr	r1, [r3, #12]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	68ba      	ldr	r2, [r7, #8]
 8000eac:	430a      	orrs	r2, r1
 8000eae:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000eb4:	2380      	movs	r3, #128	; 0x80
 8000eb6:	055b      	lsls	r3, r3, #21
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d01b      	beq.n	8000ef4 <HAL_ADC_Init+0x1dc>
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d017      	beq.n	8000ef4 <HAL_ADC_Init+0x1dc>
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ec8:	2b02      	cmp	r3, #2
 8000eca:	d013      	beq.n	8000ef4 <HAL_ADC_Init+0x1dc>
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ed0:	2b03      	cmp	r3, #3
 8000ed2:	d00f      	beq.n	8000ef4 <HAL_ADC_Init+0x1dc>
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ed8:	2b04      	cmp	r3, #4
 8000eda:	d00b      	beq.n	8000ef4 <HAL_ADC_Init+0x1dc>
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ee0:	2b05      	cmp	r3, #5
 8000ee2:	d007      	beq.n	8000ef4 <HAL_ADC_Init+0x1dc>
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ee8:	2b06      	cmp	r3, #6
 8000eea:	d003      	beq.n	8000ef4 <HAL_ADC_Init+0x1dc>
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ef0:	2b07      	cmp	r3, #7
 8000ef2:	d112      	bne.n	8000f1a <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	695a      	ldr	r2, [r3, #20]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	2107      	movs	r1, #7
 8000f00:	438a      	bics	r2, r1
 8000f02:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	6959      	ldr	r1, [r3, #20]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f0e:	2207      	movs	r2, #7
 8000f10:	401a      	ands	r2, r3
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	430a      	orrs	r2, r1
 8000f18:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	4a1c      	ldr	r2, [pc, #112]	; (8000f94 <HAL_ADC_Init+0x27c>)
 8000f22:	4013      	ands	r3, r2
 8000f24:	68ba      	ldr	r2, [r7, #8]
 8000f26:	429a      	cmp	r2, r3
 8000f28:	d10b      	bne.n	8000f42 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f34:	2203      	movs	r2, #3
 8000f36:	4393      	bics	r3, r2
 8000f38:	2201      	movs	r2, #1
 8000f3a:	431a      	orrs	r2, r3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000f40:	e01c      	b.n	8000f7c <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f46:	2212      	movs	r2, #18
 8000f48:	4393      	bics	r3, r2
 8000f4a:	2210      	movs	r2, #16
 8000f4c:	431a      	orrs	r2, r3
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f56:	2201      	movs	r2, #1
 8000f58:	431a      	orrs	r2, r3
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8000f5e:	230f      	movs	r3, #15
 8000f60:	18fb      	adds	r3, r7, r3
 8000f62:	2201      	movs	r2, #1
 8000f64:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000f66:	e009      	b.n	8000f7c <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f6c:	2210      	movs	r2, #16
 8000f6e:	431a      	orrs	r2, r3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8000f74:	230f      	movs	r3, #15
 8000f76:	18fb      	adds	r3, r7, r3
 8000f78:	2201      	movs	r2, #1
 8000f7a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000f7c:	230f      	movs	r3, #15
 8000f7e:	18fb      	adds	r3, r7, r3
 8000f80:	781b      	ldrb	r3, [r3, #0]
}
 8000f82:	0018      	movs	r0, r3
 8000f84:	46bd      	mov	sp, r7
 8000f86:	b004      	add	sp, #16
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	46c0      	nop			; (mov r8, r8)
 8000f8c:	fffffefd 	.word	0xfffffefd
 8000f90:	fffe0219 	.word	0xfffe0219
 8000f94:	833fffe7 	.word	0x833fffe7

08000f98 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fa2:	230f      	movs	r3, #15
 8000fa4:	18fb      	adds	r3, r7, r3
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8000faa:	2300      	movs	r3, #0
 8000fac:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fb2:	2380      	movs	r3, #128	; 0x80
 8000fb4:	055b      	lsls	r3, r3, #21
 8000fb6:	429a      	cmp	r2, r3
 8000fb8:	d011      	beq.n	8000fde <HAL_ADC_ConfigChannel+0x46>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d00d      	beq.n	8000fde <HAL_ADC_ConfigChannel+0x46>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fc6:	2b02      	cmp	r3, #2
 8000fc8:	d009      	beq.n	8000fde <HAL_ADC_ConfigChannel+0x46>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fce:	2b03      	cmp	r3, #3
 8000fd0:	d005      	beq.n	8000fde <HAL_ADC_ConfigChannel+0x46>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fd6:	2b04      	cmp	r3, #4
 8000fd8:	d001      	beq.n	8000fde <HAL_ADC_ConfigChannel+0x46>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2234      	movs	r2, #52	; 0x34
 8000fe2:	5c9b      	ldrb	r3, [r3, r2]
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d101      	bne.n	8000fec <HAL_ADC_ConfigChannel+0x54>
 8000fe8:	2302      	movs	r3, #2
 8000fea:	e0bb      	b.n	8001164 <HAL_ADC_ConfigChannel+0x1cc>
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2234      	movs	r2, #52	; 0x34
 8000ff0:	2101      	movs	r1, #1
 8000ff2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	689b      	ldr	r3, [r3, #8]
 8000ffa:	2204      	movs	r2, #4
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	d000      	beq.n	8001002 <HAL_ADC_ConfigChannel+0x6a>
 8001000:	e09f      	b.n	8001142 <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	4a59      	ldr	r2, [pc, #356]	; (800116c <HAL_ADC_ConfigChannel+0x1d4>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d100      	bne.n	800100e <HAL_ADC_ConfigChannel+0x76>
 800100c:	e077      	b.n	80010fe <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	2201      	movs	r2, #1
 800101a:	409a      	lsls	r2, r3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	430a      	orrs	r2, r1
 8001022:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001028:	2380      	movs	r3, #128	; 0x80
 800102a:	055b      	lsls	r3, r3, #21
 800102c:	429a      	cmp	r2, r3
 800102e:	d037      	beq.n	80010a0 <HAL_ADC_ConfigChannel+0x108>
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001034:	2b01      	cmp	r3, #1
 8001036:	d033      	beq.n	80010a0 <HAL_ADC_ConfigChannel+0x108>
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800103c:	2b02      	cmp	r3, #2
 800103e:	d02f      	beq.n	80010a0 <HAL_ADC_ConfigChannel+0x108>
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001044:	2b03      	cmp	r3, #3
 8001046:	d02b      	beq.n	80010a0 <HAL_ADC_ConfigChannel+0x108>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800104c:	2b04      	cmp	r3, #4
 800104e:	d027      	beq.n	80010a0 <HAL_ADC_ConfigChannel+0x108>
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001054:	2b05      	cmp	r3, #5
 8001056:	d023      	beq.n	80010a0 <HAL_ADC_ConfigChannel+0x108>
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800105c:	2b06      	cmp	r3, #6
 800105e:	d01f      	beq.n	80010a0 <HAL_ADC_ConfigChannel+0x108>
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001064:	2b07      	cmp	r3, #7
 8001066:	d01b      	beq.n	80010a0 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	689a      	ldr	r2, [r3, #8]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	695b      	ldr	r3, [r3, #20]
 8001072:	2107      	movs	r1, #7
 8001074:	400b      	ands	r3, r1
 8001076:	429a      	cmp	r2, r3
 8001078:	d012      	beq.n	80010a0 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	695a      	ldr	r2, [r3, #20]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	2107      	movs	r1, #7
 8001086:	438a      	bics	r2, r1
 8001088:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	6959      	ldr	r1, [r3, #20]
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	689b      	ldr	r3, [r3, #8]
 8001094:	2207      	movs	r2, #7
 8001096:	401a      	ands	r2, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	430a      	orrs	r2, r1
 800109e:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	2b10      	cmp	r3, #16
 80010a6:	d003      	beq.n	80010b0 <HAL_ADC_ConfigChannel+0x118>
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2b11      	cmp	r3, #17
 80010ae:	d152      	bne.n	8001156 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80010b0:	4b2f      	ldr	r3, [pc, #188]	; (8001170 <HAL_ADC_ConfigChannel+0x1d8>)
 80010b2:	6819      	ldr	r1, [r3, #0]
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	2b10      	cmp	r3, #16
 80010ba:	d102      	bne.n	80010c2 <HAL_ADC_ConfigChannel+0x12a>
 80010bc:	2380      	movs	r3, #128	; 0x80
 80010be:	041b      	lsls	r3, r3, #16
 80010c0:	e001      	b.n	80010c6 <HAL_ADC_ConfigChannel+0x12e>
 80010c2:	2380      	movs	r3, #128	; 0x80
 80010c4:	03db      	lsls	r3, r3, #15
 80010c6:	4a2a      	ldr	r2, [pc, #168]	; (8001170 <HAL_ADC_ConfigChannel+0x1d8>)
 80010c8:	430b      	orrs	r3, r1
 80010ca:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	2b10      	cmp	r3, #16
 80010d2:	d140      	bne.n	8001156 <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80010d4:	4b27      	ldr	r3, [pc, #156]	; (8001174 <HAL_ADC_ConfigChannel+0x1dc>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4927      	ldr	r1, [pc, #156]	; (8001178 <HAL_ADC_ConfigChannel+0x1e0>)
 80010da:	0018      	movs	r0, r3
 80010dc:	f7ff f81e 	bl	800011c <__udivsi3>
 80010e0:	0003      	movs	r3, r0
 80010e2:	001a      	movs	r2, r3
 80010e4:	0013      	movs	r3, r2
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	189b      	adds	r3, r3, r2
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80010ee:	e002      	b.n	80010f6 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	3b01      	subs	r3, #1
 80010f4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80010f6:	68bb      	ldr	r3, [r7, #8]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d1f9      	bne.n	80010f0 <HAL_ADC_ConfigChannel+0x158>
 80010fc:	e02b      	b.n	8001156 <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2101      	movs	r1, #1
 800110a:	4099      	lsls	r1, r3
 800110c:	000b      	movs	r3, r1
 800110e:	43d9      	mvns	r1, r3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	400a      	ands	r2, r1
 8001116:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	2b10      	cmp	r3, #16
 800111e:	d003      	beq.n	8001128 <HAL_ADC_ConfigChannel+0x190>
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	2b11      	cmp	r3, #17
 8001126:	d116      	bne.n	8001156 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001128:	4b11      	ldr	r3, [pc, #68]	; (8001170 <HAL_ADC_ConfigChannel+0x1d8>)
 800112a:	6819      	ldr	r1, [r3, #0]
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2b10      	cmp	r3, #16
 8001132:	d101      	bne.n	8001138 <HAL_ADC_ConfigChannel+0x1a0>
 8001134:	4a11      	ldr	r2, [pc, #68]	; (800117c <HAL_ADC_ConfigChannel+0x1e4>)
 8001136:	e000      	b.n	800113a <HAL_ADC_ConfigChannel+0x1a2>
 8001138:	4a11      	ldr	r2, [pc, #68]	; (8001180 <HAL_ADC_ConfigChannel+0x1e8>)
 800113a:	4b0d      	ldr	r3, [pc, #52]	; (8001170 <HAL_ADC_ConfigChannel+0x1d8>)
 800113c:	400a      	ands	r2, r1
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	e009      	b.n	8001156 <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001146:	2220      	movs	r2, #32
 8001148:	431a      	orrs	r2, r3
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 800114e:	230f      	movs	r3, #15
 8001150:	18fb      	adds	r3, r7, r3
 8001152:	2201      	movs	r2, #1
 8001154:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2234      	movs	r2, #52	; 0x34
 800115a:	2100      	movs	r1, #0
 800115c:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800115e:	230f      	movs	r3, #15
 8001160:	18fb      	adds	r3, r7, r3
 8001162:	781b      	ldrb	r3, [r3, #0]
}
 8001164:	0018      	movs	r0, r3
 8001166:	46bd      	mov	sp, r7
 8001168:	b004      	add	sp, #16
 800116a:	bd80      	pop	{r7, pc}
 800116c:	00001001 	.word	0x00001001
 8001170:	40012708 	.word	0x40012708
 8001174:	20000000 	.word	0x20000000
 8001178:	000f4240 	.word	0x000f4240
 800117c:	ff7fffff 	.word	0xff7fffff
 8001180:	ffbfffff 	.word	0xffbfffff

08001184 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001184:	b590      	push	{r4, r7, lr}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	0002      	movs	r2, r0
 800118c:	6039      	str	r1, [r7, #0]
 800118e:	1dfb      	adds	r3, r7, #7
 8001190:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001192:	1dfb      	adds	r3, r7, #7
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	2b7f      	cmp	r3, #127	; 0x7f
 8001198:	d828      	bhi.n	80011ec <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800119a:	4a2f      	ldr	r2, [pc, #188]	; (8001258 <__NVIC_SetPriority+0xd4>)
 800119c:	1dfb      	adds	r3, r7, #7
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	b25b      	sxtb	r3, r3
 80011a2:	089b      	lsrs	r3, r3, #2
 80011a4:	33c0      	adds	r3, #192	; 0xc0
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	589b      	ldr	r3, [r3, r2]
 80011aa:	1dfa      	adds	r2, r7, #7
 80011ac:	7812      	ldrb	r2, [r2, #0]
 80011ae:	0011      	movs	r1, r2
 80011b0:	2203      	movs	r2, #3
 80011b2:	400a      	ands	r2, r1
 80011b4:	00d2      	lsls	r2, r2, #3
 80011b6:	21ff      	movs	r1, #255	; 0xff
 80011b8:	4091      	lsls	r1, r2
 80011ba:	000a      	movs	r2, r1
 80011bc:	43d2      	mvns	r2, r2
 80011be:	401a      	ands	r2, r3
 80011c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	019b      	lsls	r3, r3, #6
 80011c6:	22ff      	movs	r2, #255	; 0xff
 80011c8:	401a      	ands	r2, r3
 80011ca:	1dfb      	adds	r3, r7, #7
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	0018      	movs	r0, r3
 80011d0:	2303      	movs	r3, #3
 80011d2:	4003      	ands	r3, r0
 80011d4:	00db      	lsls	r3, r3, #3
 80011d6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011d8:	481f      	ldr	r0, [pc, #124]	; (8001258 <__NVIC_SetPriority+0xd4>)
 80011da:	1dfb      	adds	r3, r7, #7
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	b25b      	sxtb	r3, r3
 80011e0:	089b      	lsrs	r3, r3, #2
 80011e2:	430a      	orrs	r2, r1
 80011e4:	33c0      	adds	r3, #192	; 0xc0
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80011ea:	e031      	b.n	8001250 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011ec:	4a1b      	ldr	r2, [pc, #108]	; (800125c <__NVIC_SetPriority+0xd8>)
 80011ee:	1dfb      	adds	r3, r7, #7
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	0019      	movs	r1, r3
 80011f4:	230f      	movs	r3, #15
 80011f6:	400b      	ands	r3, r1
 80011f8:	3b08      	subs	r3, #8
 80011fa:	089b      	lsrs	r3, r3, #2
 80011fc:	3306      	adds	r3, #6
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	18d3      	adds	r3, r2, r3
 8001202:	3304      	adds	r3, #4
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	1dfa      	adds	r2, r7, #7
 8001208:	7812      	ldrb	r2, [r2, #0]
 800120a:	0011      	movs	r1, r2
 800120c:	2203      	movs	r2, #3
 800120e:	400a      	ands	r2, r1
 8001210:	00d2      	lsls	r2, r2, #3
 8001212:	21ff      	movs	r1, #255	; 0xff
 8001214:	4091      	lsls	r1, r2
 8001216:	000a      	movs	r2, r1
 8001218:	43d2      	mvns	r2, r2
 800121a:	401a      	ands	r2, r3
 800121c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	019b      	lsls	r3, r3, #6
 8001222:	22ff      	movs	r2, #255	; 0xff
 8001224:	401a      	ands	r2, r3
 8001226:	1dfb      	adds	r3, r7, #7
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	0018      	movs	r0, r3
 800122c:	2303      	movs	r3, #3
 800122e:	4003      	ands	r3, r0
 8001230:	00db      	lsls	r3, r3, #3
 8001232:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001234:	4809      	ldr	r0, [pc, #36]	; (800125c <__NVIC_SetPriority+0xd8>)
 8001236:	1dfb      	adds	r3, r7, #7
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	001c      	movs	r4, r3
 800123c:	230f      	movs	r3, #15
 800123e:	4023      	ands	r3, r4
 8001240:	3b08      	subs	r3, #8
 8001242:	089b      	lsrs	r3, r3, #2
 8001244:	430a      	orrs	r2, r1
 8001246:	3306      	adds	r3, #6
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	18c3      	adds	r3, r0, r3
 800124c:	3304      	adds	r3, #4
 800124e:	601a      	str	r2, [r3, #0]
}
 8001250:	46c0      	nop			; (mov r8, r8)
 8001252:	46bd      	mov	sp, r7
 8001254:	b003      	add	sp, #12
 8001256:	bd90      	pop	{r4, r7, pc}
 8001258:	e000e100 	.word	0xe000e100
 800125c:	e000ed00 	.word	0xe000ed00

08001260 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	1e5a      	subs	r2, r3, #1
 800126c:	2380      	movs	r3, #128	; 0x80
 800126e:	045b      	lsls	r3, r3, #17
 8001270:	429a      	cmp	r2, r3
 8001272:	d301      	bcc.n	8001278 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001274:	2301      	movs	r3, #1
 8001276:	e010      	b.n	800129a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001278:	4b0a      	ldr	r3, [pc, #40]	; (80012a4 <SysTick_Config+0x44>)
 800127a:	687a      	ldr	r2, [r7, #4]
 800127c:	3a01      	subs	r2, #1
 800127e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001280:	2301      	movs	r3, #1
 8001282:	425b      	negs	r3, r3
 8001284:	2103      	movs	r1, #3
 8001286:	0018      	movs	r0, r3
 8001288:	f7ff ff7c 	bl	8001184 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800128c:	4b05      	ldr	r3, [pc, #20]	; (80012a4 <SysTick_Config+0x44>)
 800128e:	2200      	movs	r2, #0
 8001290:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001292:	4b04      	ldr	r3, [pc, #16]	; (80012a4 <SysTick_Config+0x44>)
 8001294:	2207      	movs	r2, #7
 8001296:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001298:	2300      	movs	r3, #0
}
 800129a:	0018      	movs	r0, r3
 800129c:	46bd      	mov	sp, r7
 800129e:	b002      	add	sp, #8
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	46c0      	nop			; (mov r8, r8)
 80012a4:	e000e010 	.word	0xe000e010

080012a8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	60b9      	str	r1, [r7, #8]
 80012b0:	607a      	str	r2, [r7, #4]
 80012b2:	210f      	movs	r1, #15
 80012b4:	187b      	adds	r3, r7, r1
 80012b6:	1c02      	adds	r2, r0, #0
 80012b8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80012ba:	68ba      	ldr	r2, [r7, #8]
 80012bc:	187b      	adds	r3, r7, r1
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	b25b      	sxtb	r3, r3
 80012c2:	0011      	movs	r1, r2
 80012c4:	0018      	movs	r0, r3
 80012c6:	f7ff ff5d 	bl	8001184 <__NVIC_SetPriority>
}
 80012ca:	46c0      	nop			; (mov r8, r8)
 80012cc:	46bd      	mov	sp, r7
 80012ce:	b004      	add	sp, #16
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b082      	sub	sp, #8
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	0018      	movs	r0, r3
 80012de:	f7ff ffbf 	bl	8001260 <SysTick_Config>
 80012e2:	0003      	movs	r3, r0
}
 80012e4:	0018      	movs	r0, r3
 80012e6:	46bd      	mov	sp, r7
 80012e8:	b002      	add	sp, #8
 80012ea:	bd80      	pop	{r7, pc}

080012ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b086      	sub	sp, #24
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012f6:	2300      	movs	r3, #0
 80012f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012fa:	e14f      	b.n	800159c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2101      	movs	r1, #1
 8001302:	697a      	ldr	r2, [r7, #20]
 8001304:	4091      	lsls	r1, r2
 8001306:	000a      	movs	r2, r1
 8001308:	4013      	ands	r3, r2
 800130a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d100      	bne.n	8001314 <HAL_GPIO_Init+0x28>
 8001312:	e140      	b.n	8001596 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	2203      	movs	r2, #3
 800131a:	4013      	ands	r3, r2
 800131c:	2b01      	cmp	r3, #1
 800131e:	d005      	beq.n	800132c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	2203      	movs	r2, #3
 8001326:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001328:	2b02      	cmp	r3, #2
 800132a:	d130      	bne.n	800138e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	2203      	movs	r2, #3
 8001338:	409a      	lsls	r2, r3
 800133a:	0013      	movs	r3, r2
 800133c:	43da      	mvns	r2, r3
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	4013      	ands	r3, r2
 8001342:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	68da      	ldr	r2, [r3, #12]
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	409a      	lsls	r2, r3
 800134e:	0013      	movs	r3, r2
 8001350:	693a      	ldr	r2, [r7, #16]
 8001352:	4313      	orrs	r3, r2
 8001354:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	693a      	ldr	r2, [r7, #16]
 800135a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001362:	2201      	movs	r2, #1
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	409a      	lsls	r2, r3
 8001368:	0013      	movs	r3, r2
 800136a:	43da      	mvns	r2, r3
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	4013      	ands	r3, r2
 8001370:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	091b      	lsrs	r3, r3, #4
 8001378:	2201      	movs	r2, #1
 800137a:	401a      	ands	r2, r3
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	409a      	lsls	r2, r3
 8001380:	0013      	movs	r3, r2
 8001382:	693a      	ldr	r2, [r7, #16]
 8001384:	4313      	orrs	r3, r2
 8001386:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	2203      	movs	r2, #3
 8001394:	4013      	ands	r3, r2
 8001396:	2b03      	cmp	r3, #3
 8001398:	d017      	beq.n	80013ca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	68db      	ldr	r3, [r3, #12]
 800139e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	005b      	lsls	r3, r3, #1
 80013a4:	2203      	movs	r2, #3
 80013a6:	409a      	lsls	r2, r3
 80013a8:	0013      	movs	r3, r2
 80013aa:	43da      	mvns	r2, r3
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	4013      	ands	r3, r2
 80013b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	689a      	ldr	r2, [r3, #8]
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	409a      	lsls	r2, r3
 80013bc:	0013      	movs	r3, r2
 80013be:	693a      	ldr	r2, [r7, #16]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	693a      	ldr	r2, [r7, #16]
 80013c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	2203      	movs	r2, #3
 80013d0:	4013      	ands	r3, r2
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d123      	bne.n	800141e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	08da      	lsrs	r2, r3, #3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	3208      	adds	r2, #8
 80013de:	0092      	lsls	r2, r2, #2
 80013e0:	58d3      	ldr	r3, [r2, r3]
 80013e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	2207      	movs	r2, #7
 80013e8:	4013      	ands	r3, r2
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	220f      	movs	r2, #15
 80013ee:	409a      	lsls	r2, r3
 80013f0:	0013      	movs	r3, r2
 80013f2:	43da      	mvns	r2, r3
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	4013      	ands	r3, r2
 80013f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	691a      	ldr	r2, [r3, #16]
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	2107      	movs	r1, #7
 8001402:	400b      	ands	r3, r1
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	409a      	lsls	r2, r3
 8001408:	0013      	movs	r3, r2
 800140a:	693a      	ldr	r2, [r7, #16]
 800140c:	4313      	orrs	r3, r2
 800140e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	08da      	lsrs	r2, r3, #3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	3208      	adds	r2, #8
 8001418:	0092      	lsls	r2, r2, #2
 800141a:	6939      	ldr	r1, [r7, #16]
 800141c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	2203      	movs	r2, #3
 800142a:	409a      	lsls	r2, r3
 800142c:	0013      	movs	r3, r2
 800142e:	43da      	mvns	r2, r3
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	4013      	ands	r3, r2
 8001434:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	2203      	movs	r2, #3
 800143c:	401a      	ands	r2, r3
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	409a      	lsls	r2, r3
 8001444:	0013      	movs	r3, r2
 8001446:	693a      	ldr	r2, [r7, #16]
 8001448:	4313      	orrs	r3, r2
 800144a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	693a      	ldr	r2, [r7, #16]
 8001450:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685a      	ldr	r2, [r3, #4]
 8001456:	23c0      	movs	r3, #192	; 0xc0
 8001458:	029b      	lsls	r3, r3, #10
 800145a:	4013      	ands	r3, r2
 800145c:	d100      	bne.n	8001460 <HAL_GPIO_Init+0x174>
 800145e:	e09a      	b.n	8001596 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001460:	4b54      	ldr	r3, [pc, #336]	; (80015b4 <HAL_GPIO_Init+0x2c8>)
 8001462:	699a      	ldr	r2, [r3, #24]
 8001464:	4b53      	ldr	r3, [pc, #332]	; (80015b4 <HAL_GPIO_Init+0x2c8>)
 8001466:	2101      	movs	r1, #1
 8001468:	430a      	orrs	r2, r1
 800146a:	619a      	str	r2, [r3, #24]
 800146c:	4b51      	ldr	r3, [pc, #324]	; (80015b4 <HAL_GPIO_Init+0x2c8>)
 800146e:	699b      	ldr	r3, [r3, #24]
 8001470:	2201      	movs	r2, #1
 8001472:	4013      	ands	r3, r2
 8001474:	60bb      	str	r3, [r7, #8]
 8001476:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001478:	4a4f      	ldr	r2, [pc, #316]	; (80015b8 <HAL_GPIO_Init+0x2cc>)
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	089b      	lsrs	r3, r3, #2
 800147e:	3302      	adds	r3, #2
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	589b      	ldr	r3, [r3, r2]
 8001484:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	2203      	movs	r2, #3
 800148a:	4013      	ands	r3, r2
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	220f      	movs	r2, #15
 8001490:	409a      	lsls	r2, r3
 8001492:	0013      	movs	r3, r2
 8001494:	43da      	mvns	r2, r3
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	4013      	ands	r3, r2
 800149a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	2390      	movs	r3, #144	; 0x90
 80014a0:	05db      	lsls	r3, r3, #23
 80014a2:	429a      	cmp	r2, r3
 80014a4:	d013      	beq.n	80014ce <HAL_GPIO_Init+0x1e2>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4a44      	ldr	r2, [pc, #272]	; (80015bc <HAL_GPIO_Init+0x2d0>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d00d      	beq.n	80014ca <HAL_GPIO_Init+0x1de>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a43      	ldr	r2, [pc, #268]	; (80015c0 <HAL_GPIO_Init+0x2d4>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d007      	beq.n	80014c6 <HAL_GPIO_Init+0x1da>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a42      	ldr	r2, [pc, #264]	; (80015c4 <HAL_GPIO_Init+0x2d8>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d101      	bne.n	80014c2 <HAL_GPIO_Init+0x1d6>
 80014be:	2303      	movs	r3, #3
 80014c0:	e006      	b.n	80014d0 <HAL_GPIO_Init+0x1e4>
 80014c2:	2305      	movs	r3, #5
 80014c4:	e004      	b.n	80014d0 <HAL_GPIO_Init+0x1e4>
 80014c6:	2302      	movs	r3, #2
 80014c8:	e002      	b.n	80014d0 <HAL_GPIO_Init+0x1e4>
 80014ca:	2301      	movs	r3, #1
 80014cc:	e000      	b.n	80014d0 <HAL_GPIO_Init+0x1e4>
 80014ce:	2300      	movs	r3, #0
 80014d0:	697a      	ldr	r2, [r7, #20]
 80014d2:	2103      	movs	r1, #3
 80014d4:	400a      	ands	r2, r1
 80014d6:	0092      	lsls	r2, r2, #2
 80014d8:	4093      	lsls	r3, r2
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	4313      	orrs	r3, r2
 80014de:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80014e0:	4935      	ldr	r1, [pc, #212]	; (80015b8 <HAL_GPIO_Init+0x2cc>)
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	089b      	lsrs	r3, r3, #2
 80014e6:	3302      	adds	r3, #2
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	693a      	ldr	r2, [r7, #16]
 80014ec:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014ee:	4b36      	ldr	r3, [pc, #216]	; (80015c8 <HAL_GPIO_Init+0x2dc>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	43da      	mvns	r2, r3
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	4013      	ands	r3, r2
 80014fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685a      	ldr	r2, [r3, #4]
 8001502:	2380      	movs	r3, #128	; 0x80
 8001504:	025b      	lsls	r3, r3, #9
 8001506:	4013      	ands	r3, r2
 8001508:	d003      	beq.n	8001512 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	4313      	orrs	r3, r2
 8001510:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001512:	4b2d      	ldr	r3, [pc, #180]	; (80015c8 <HAL_GPIO_Init+0x2dc>)
 8001514:	693a      	ldr	r2, [r7, #16]
 8001516:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001518:	4b2b      	ldr	r3, [pc, #172]	; (80015c8 <HAL_GPIO_Init+0x2dc>)
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	43da      	mvns	r2, r3
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	4013      	ands	r3, r2
 8001526:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685a      	ldr	r2, [r3, #4]
 800152c:	2380      	movs	r3, #128	; 0x80
 800152e:	029b      	lsls	r3, r3, #10
 8001530:	4013      	ands	r3, r2
 8001532:	d003      	beq.n	800153c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001534:	693a      	ldr	r2, [r7, #16]
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	4313      	orrs	r3, r2
 800153a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800153c:	4b22      	ldr	r3, [pc, #136]	; (80015c8 <HAL_GPIO_Init+0x2dc>)
 800153e:	693a      	ldr	r2, [r7, #16]
 8001540:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001542:	4b21      	ldr	r3, [pc, #132]	; (80015c8 <HAL_GPIO_Init+0x2dc>)
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	43da      	mvns	r2, r3
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	4013      	ands	r3, r2
 8001550:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	685a      	ldr	r2, [r3, #4]
 8001556:	2380      	movs	r3, #128	; 0x80
 8001558:	035b      	lsls	r3, r3, #13
 800155a:	4013      	ands	r3, r2
 800155c:	d003      	beq.n	8001566 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	4313      	orrs	r3, r2
 8001564:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001566:	4b18      	ldr	r3, [pc, #96]	; (80015c8 <HAL_GPIO_Init+0x2dc>)
 8001568:	693a      	ldr	r2, [r7, #16]
 800156a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800156c:	4b16      	ldr	r3, [pc, #88]	; (80015c8 <HAL_GPIO_Init+0x2dc>)
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	43da      	mvns	r2, r3
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	4013      	ands	r3, r2
 800157a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685a      	ldr	r2, [r3, #4]
 8001580:	2380      	movs	r3, #128	; 0x80
 8001582:	039b      	lsls	r3, r3, #14
 8001584:	4013      	ands	r3, r2
 8001586:	d003      	beq.n	8001590 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001588:	693a      	ldr	r2, [r7, #16]
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	4313      	orrs	r3, r2
 800158e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001590:	4b0d      	ldr	r3, [pc, #52]	; (80015c8 <HAL_GPIO_Init+0x2dc>)
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	3301      	adds	r3, #1
 800159a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	40da      	lsrs	r2, r3
 80015a4:	1e13      	subs	r3, r2, #0
 80015a6:	d000      	beq.n	80015aa <HAL_GPIO_Init+0x2be>
 80015a8:	e6a8      	b.n	80012fc <HAL_GPIO_Init+0x10>
  } 
}
 80015aa:	46c0      	nop			; (mov r8, r8)
 80015ac:	46c0      	nop			; (mov r8, r8)
 80015ae:	46bd      	mov	sp, r7
 80015b0:	b006      	add	sp, #24
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	40021000 	.word	0x40021000
 80015b8:	40010000 	.word	0x40010000
 80015bc:	48000400 	.word	0x48000400
 80015c0:	48000800 	.word	0x48000800
 80015c4:	48000c00 	.word	0x48000c00
 80015c8:	40010400 	.word	0x40010400

080015cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	0008      	movs	r0, r1
 80015d6:	0011      	movs	r1, r2
 80015d8:	1cbb      	adds	r3, r7, #2
 80015da:	1c02      	adds	r2, r0, #0
 80015dc:	801a      	strh	r2, [r3, #0]
 80015de:	1c7b      	adds	r3, r7, #1
 80015e0:	1c0a      	adds	r2, r1, #0
 80015e2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015e4:	1c7b      	adds	r3, r7, #1
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d004      	beq.n	80015f6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015ec:	1cbb      	adds	r3, r7, #2
 80015ee:	881a      	ldrh	r2, [r3, #0]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015f4:	e003      	b.n	80015fe <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015f6:	1cbb      	adds	r3, r7, #2
 80015f8:	881a      	ldrh	r2, [r3, #0]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015fe:	46c0      	nop			; (mov r8, r8)
 8001600:	46bd      	mov	sp, r7
 8001602:	b002      	add	sp, #8
 8001604:	bd80      	pop	{r7, pc}
	...

08001608 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d101      	bne.n	800161a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e082      	b.n	8001720 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2241      	movs	r2, #65	; 0x41
 800161e:	5c9b      	ldrb	r3, [r3, r2]
 8001620:	b2db      	uxtb	r3, r3
 8001622:	2b00      	cmp	r3, #0
 8001624:	d107      	bne.n	8001636 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2240      	movs	r2, #64	; 0x40
 800162a:	2100      	movs	r1, #0
 800162c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	0018      	movs	r0, r3
 8001632:	f7ff f9bd 	bl	80009b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2241      	movs	r2, #65	; 0x41
 800163a:	2124      	movs	r1, #36	; 0x24
 800163c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2101      	movs	r1, #1
 800164a:	438a      	bics	r2, r1
 800164c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685a      	ldr	r2, [r3, #4]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4934      	ldr	r1, [pc, #208]	; (8001728 <HAL_I2C_Init+0x120>)
 8001658:	400a      	ands	r2, r1
 800165a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	689a      	ldr	r2, [r3, #8]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4931      	ldr	r1, [pc, #196]	; (800172c <HAL_I2C_Init+0x124>)
 8001668:	400a      	ands	r2, r1
 800166a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	2b01      	cmp	r3, #1
 8001672:	d108      	bne.n	8001686 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	689a      	ldr	r2, [r3, #8]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2180      	movs	r1, #128	; 0x80
 800167e:	0209      	lsls	r1, r1, #8
 8001680:	430a      	orrs	r2, r1
 8001682:	609a      	str	r2, [r3, #8]
 8001684:	e007      	b.n	8001696 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	689a      	ldr	r2, [r3, #8]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2184      	movs	r1, #132	; 0x84
 8001690:	0209      	lsls	r1, r1, #8
 8001692:	430a      	orrs	r2, r1
 8001694:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	68db      	ldr	r3, [r3, #12]
 800169a:	2b02      	cmp	r3, #2
 800169c:	d104      	bne.n	80016a8 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	2280      	movs	r2, #128	; 0x80
 80016a4:	0112      	lsls	r2, r2, #4
 80016a6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	685a      	ldr	r2, [r3, #4]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	491f      	ldr	r1, [pc, #124]	; (8001730 <HAL_I2C_Init+0x128>)
 80016b4:	430a      	orrs	r2, r1
 80016b6:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	68da      	ldr	r2, [r3, #12]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	491a      	ldr	r1, [pc, #104]	; (800172c <HAL_I2C_Init+0x124>)
 80016c4:	400a      	ands	r2, r1
 80016c6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	691a      	ldr	r2, [r3, #16]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	695b      	ldr	r3, [r3, #20]
 80016d0:	431a      	orrs	r2, r3
 80016d2:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	430a      	orrs	r2, r1
 80016e0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	69d9      	ldr	r1, [r3, #28]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6a1a      	ldr	r2, [r3, #32]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	430a      	orrs	r2, r1
 80016f0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2101      	movs	r1, #1
 80016fe:	430a      	orrs	r2, r1
 8001700:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2200      	movs	r2, #0
 8001706:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2241      	movs	r2, #65	; 0x41
 800170c:	2120      	movs	r1, #32
 800170e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2200      	movs	r2, #0
 8001714:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2242      	movs	r2, #66	; 0x42
 800171a:	2100      	movs	r1, #0
 800171c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800171e:	2300      	movs	r3, #0
}
 8001720:	0018      	movs	r0, r3
 8001722:	46bd      	mov	sp, r7
 8001724:	b002      	add	sp, #8
 8001726:	bd80      	pop	{r7, pc}
 8001728:	f0ffffff 	.word	0xf0ffffff
 800172c:	ffff7fff 	.word	0xffff7fff
 8001730:	02008000 	.word	0x02008000

08001734 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001734:	b590      	push	{r4, r7, lr}
 8001736:	b089      	sub	sp, #36	; 0x24
 8001738:	af02      	add	r7, sp, #8
 800173a:	60f8      	str	r0, [r7, #12]
 800173c:	0008      	movs	r0, r1
 800173e:	607a      	str	r2, [r7, #4]
 8001740:	0019      	movs	r1, r3
 8001742:	230a      	movs	r3, #10
 8001744:	18fb      	adds	r3, r7, r3
 8001746:	1c02      	adds	r2, r0, #0
 8001748:	801a      	strh	r2, [r3, #0]
 800174a:	2308      	movs	r3, #8
 800174c:	18fb      	adds	r3, r7, r3
 800174e:	1c0a      	adds	r2, r1, #0
 8001750:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	2241      	movs	r2, #65	; 0x41
 8001756:	5c9b      	ldrb	r3, [r3, r2]
 8001758:	b2db      	uxtb	r3, r3
 800175a:	2b20      	cmp	r3, #32
 800175c:	d000      	beq.n	8001760 <HAL_I2C_Master_Transmit+0x2c>
 800175e:	e0e7      	b.n	8001930 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	2240      	movs	r2, #64	; 0x40
 8001764:	5c9b      	ldrb	r3, [r3, r2]
 8001766:	2b01      	cmp	r3, #1
 8001768:	d101      	bne.n	800176e <HAL_I2C_Master_Transmit+0x3a>
 800176a:	2302      	movs	r3, #2
 800176c:	e0e1      	b.n	8001932 <HAL_I2C_Master_Transmit+0x1fe>
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	2240      	movs	r2, #64	; 0x40
 8001772:	2101      	movs	r1, #1
 8001774:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001776:	f7ff faa1 	bl	8000cbc <HAL_GetTick>
 800177a:	0003      	movs	r3, r0
 800177c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800177e:	2380      	movs	r3, #128	; 0x80
 8001780:	0219      	lsls	r1, r3, #8
 8001782:	68f8      	ldr	r0, [r7, #12]
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	9300      	str	r3, [sp, #0]
 8001788:	2319      	movs	r3, #25
 800178a:	2201      	movs	r2, #1
 800178c:	f000 fb96 	bl	8001ebc <I2C_WaitOnFlagUntilTimeout>
 8001790:	1e03      	subs	r3, r0, #0
 8001792:	d001      	beq.n	8001798 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e0cc      	b.n	8001932 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	2241      	movs	r2, #65	; 0x41
 800179c:	2121      	movs	r1, #33	; 0x21
 800179e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	2242      	movs	r2, #66	; 0x42
 80017a4:	2110      	movs	r1, #16
 80017a6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	2200      	movs	r2, #0
 80017ac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	2208      	movs	r2, #8
 80017b8:	18ba      	adds	r2, r7, r2
 80017ba:	8812      	ldrh	r2, [r2, #0]
 80017bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	2200      	movs	r2, #0
 80017c2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	2bff      	cmp	r3, #255	; 0xff
 80017cc:	d911      	bls.n	80017f2 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	22ff      	movs	r2, #255	; 0xff
 80017d2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017d8:	b2da      	uxtb	r2, r3
 80017da:	2380      	movs	r3, #128	; 0x80
 80017dc:	045c      	lsls	r4, r3, #17
 80017de:	230a      	movs	r3, #10
 80017e0:	18fb      	adds	r3, r7, r3
 80017e2:	8819      	ldrh	r1, [r3, #0]
 80017e4:	68f8      	ldr	r0, [r7, #12]
 80017e6:	4b55      	ldr	r3, [pc, #340]	; (800193c <HAL_I2C_Master_Transmit+0x208>)
 80017e8:	9300      	str	r3, [sp, #0]
 80017ea:	0023      	movs	r3, r4
 80017ec:	f000 fd06 	bl	80021fc <I2C_TransferConfig>
 80017f0:	e075      	b.n	80018de <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017f6:	b29a      	uxth	r2, r3
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001800:	b2da      	uxtb	r2, r3
 8001802:	2380      	movs	r3, #128	; 0x80
 8001804:	049c      	lsls	r4, r3, #18
 8001806:	230a      	movs	r3, #10
 8001808:	18fb      	adds	r3, r7, r3
 800180a:	8819      	ldrh	r1, [r3, #0]
 800180c:	68f8      	ldr	r0, [r7, #12]
 800180e:	4b4b      	ldr	r3, [pc, #300]	; (800193c <HAL_I2C_Master_Transmit+0x208>)
 8001810:	9300      	str	r3, [sp, #0]
 8001812:	0023      	movs	r3, r4
 8001814:	f000 fcf2 	bl	80021fc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001818:	e061      	b.n	80018de <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800181a:	697a      	ldr	r2, [r7, #20]
 800181c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	0018      	movs	r0, r3
 8001822:	f000 fb8a 	bl	8001f3a <I2C_WaitOnTXISFlagUntilTimeout>
 8001826:	1e03      	subs	r3, r0, #0
 8001828:	d001      	beq.n	800182e <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e081      	b.n	8001932 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001832:	781a      	ldrb	r2, [r3, #0]
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800183e:	1c5a      	adds	r2, r3, #1
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001848:	b29b      	uxth	r3, r3
 800184a:	3b01      	subs	r3, #1
 800184c:	b29a      	uxth	r2, r3
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001856:	3b01      	subs	r3, #1
 8001858:	b29a      	uxth	r2, r3
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001862:	b29b      	uxth	r3, r3
 8001864:	2b00      	cmp	r3, #0
 8001866:	d03a      	beq.n	80018de <HAL_I2C_Master_Transmit+0x1aa>
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800186c:	2b00      	cmp	r3, #0
 800186e:	d136      	bne.n	80018de <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001870:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001872:	68f8      	ldr	r0, [r7, #12]
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	9300      	str	r3, [sp, #0]
 8001878:	0013      	movs	r3, r2
 800187a:	2200      	movs	r2, #0
 800187c:	2180      	movs	r1, #128	; 0x80
 800187e:	f000 fb1d 	bl	8001ebc <I2C_WaitOnFlagUntilTimeout>
 8001882:	1e03      	subs	r3, r0, #0
 8001884:	d001      	beq.n	800188a <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e053      	b.n	8001932 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800188e:	b29b      	uxth	r3, r3
 8001890:	2bff      	cmp	r3, #255	; 0xff
 8001892:	d911      	bls.n	80018b8 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	22ff      	movs	r2, #255	; 0xff
 8001898:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800189e:	b2da      	uxtb	r2, r3
 80018a0:	2380      	movs	r3, #128	; 0x80
 80018a2:	045c      	lsls	r4, r3, #17
 80018a4:	230a      	movs	r3, #10
 80018a6:	18fb      	adds	r3, r7, r3
 80018a8:	8819      	ldrh	r1, [r3, #0]
 80018aa:	68f8      	ldr	r0, [r7, #12]
 80018ac:	2300      	movs	r3, #0
 80018ae:	9300      	str	r3, [sp, #0]
 80018b0:	0023      	movs	r3, r4
 80018b2:	f000 fca3 	bl	80021fc <I2C_TransferConfig>
 80018b6:	e012      	b.n	80018de <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018bc:	b29a      	uxth	r2, r3
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018c6:	b2da      	uxtb	r2, r3
 80018c8:	2380      	movs	r3, #128	; 0x80
 80018ca:	049c      	lsls	r4, r3, #18
 80018cc:	230a      	movs	r3, #10
 80018ce:	18fb      	adds	r3, r7, r3
 80018d0:	8819      	ldrh	r1, [r3, #0]
 80018d2:	68f8      	ldr	r0, [r7, #12]
 80018d4:	2300      	movs	r3, #0
 80018d6:	9300      	str	r3, [sp, #0]
 80018d8:	0023      	movs	r3, r4
 80018da:	f000 fc8f 	bl	80021fc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018e2:	b29b      	uxth	r3, r3
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d198      	bne.n	800181a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018e8:	697a      	ldr	r2, [r7, #20]
 80018ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	0018      	movs	r0, r3
 80018f0:	f000 fb62 	bl	8001fb8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80018f4:	1e03      	subs	r3, r0, #0
 80018f6:	d001      	beq.n	80018fc <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e01a      	b.n	8001932 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	2220      	movs	r2, #32
 8001902:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	685a      	ldr	r2, [r3, #4]
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	490c      	ldr	r1, [pc, #48]	; (8001940 <HAL_I2C_Master_Transmit+0x20c>)
 8001910:	400a      	ands	r2, r1
 8001912:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2241      	movs	r2, #65	; 0x41
 8001918:	2120      	movs	r1, #32
 800191a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	2242      	movs	r2, #66	; 0x42
 8001920:	2100      	movs	r1, #0
 8001922:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	2240      	movs	r2, #64	; 0x40
 8001928:	2100      	movs	r1, #0
 800192a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800192c:	2300      	movs	r3, #0
 800192e:	e000      	b.n	8001932 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8001930:	2302      	movs	r3, #2
  }
}
 8001932:	0018      	movs	r0, r3
 8001934:	46bd      	mov	sp, r7
 8001936:	b007      	add	sp, #28
 8001938:	bd90      	pop	{r4, r7, pc}
 800193a:	46c0      	nop			; (mov r8, r8)
 800193c:	80002000 	.word	0x80002000
 8001940:	fe00e800 	.word	0xfe00e800

08001944 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001944:	b590      	push	{r4, r7, lr}
 8001946:	b089      	sub	sp, #36	; 0x24
 8001948:	af02      	add	r7, sp, #8
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	0008      	movs	r0, r1
 800194e:	607a      	str	r2, [r7, #4]
 8001950:	0019      	movs	r1, r3
 8001952:	230a      	movs	r3, #10
 8001954:	18fb      	adds	r3, r7, r3
 8001956:	1c02      	adds	r2, r0, #0
 8001958:	801a      	strh	r2, [r3, #0]
 800195a:	2308      	movs	r3, #8
 800195c:	18fb      	adds	r3, r7, r3
 800195e:	1c0a      	adds	r2, r1, #0
 8001960:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	2241      	movs	r2, #65	; 0x41
 8001966:	5c9b      	ldrb	r3, [r3, r2]
 8001968:	b2db      	uxtb	r3, r3
 800196a:	2b20      	cmp	r3, #32
 800196c:	d000      	beq.n	8001970 <HAL_I2C_Master_Receive+0x2c>
 800196e:	e0e8      	b.n	8001b42 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	2240      	movs	r2, #64	; 0x40
 8001974:	5c9b      	ldrb	r3, [r3, r2]
 8001976:	2b01      	cmp	r3, #1
 8001978:	d101      	bne.n	800197e <HAL_I2C_Master_Receive+0x3a>
 800197a:	2302      	movs	r3, #2
 800197c:	e0e2      	b.n	8001b44 <HAL_I2C_Master_Receive+0x200>
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	2240      	movs	r2, #64	; 0x40
 8001982:	2101      	movs	r1, #1
 8001984:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001986:	f7ff f999 	bl	8000cbc <HAL_GetTick>
 800198a:	0003      	movs	r3, r0
 800198c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800198e:	2380      	movs	r3, #128	; 0x80
 8001990:	0219      	lsls	r1, r3, #8
 8001992:	68f8      	ldr	r0, [r7, #12]
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	9300      	str	r3, [sp, #0]
 8001998:	2319      	movs	r3, #25
 800199a:	2201      	movs	r2, #1
 800199c:	f000 fa8e 	bl	8001ebc <I2C_WaitOnFlagUntilTimeout>
 80019a0:	1e03      	subs	r3, r0, #0
 80019a2:	d001      	beq.n	80019a8 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e0cd      	b.n	8001b44 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	2241      	movs	r2, #65	; 0x41
 80019ac:	2122      	movs	r1, #34	; 0x22
 80019ae:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	2242      	movs	r2, #66	; 0x42
 80019b4:	2110      	movs	r1, #16
 80019b6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	2200      	movs	r2, #0
 80019bc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	687a      	ldr	r2, [r7, #4]
 80019c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	2208      	movs	r2, #8
 80019c8:	18ba      	adds	r2, r7, r2
 80019ca:	8812      	ldrh	r2, [r2, #0]
 80019cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	2200      	movs	r2, #0
 80019d2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019d8:	b29b      	uxth	r3, r3
 80019da:	2bff      	cmp	r3, #255	; 0xff
 80019dc:	d911      	bls.n	8001a02 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	22ff      	movs	r2, #255	; 0xff
 80019e2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019e8:	b2da      	uxtb	r2, r3
 80019ea:	2380      	movs	r3, #128	; 0x80
 80019ec:	045c      	lsls	r4, r3, #17
 80019ee:	230a      	movs	r3, #10
 80019f0:	18fb      	adds	r3, r7, r3
 80019f2:	8819      	ldrh	r1, [r3, #0]
 80019f4:	68f8      	ldr	r0, [r7, #12]
 80019f6:	4b55      	ldr	r3, [pc, #340]	; (8001b4c <HAL_I2C_Master_Receive+0x208>)
 80019f8:	9300      	str	r3, [sp, #0]
 80019fa:	0023      	movs	r3, r4
 80019fc:	f000 fbfe 	bl	80021fc <I2C_TransferConfig>
 8001a00:	e076      	b.n	8001af0 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a06:	b29a      	uxth	r2, r3
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a10:	b2da      	uxtb	r2, r3
 8001a12:	2380      	movs	r3, #128	; 0x80
 8001a14:	049c      	lsls	r4, r3, #18
 8001a16:	230a      	movs	r3, #10
 8001a18:	18fb      	adds	r3, r7, r3
 8001a1a:	8819      	ldrh	r1, [r3, #0]
 8001a1c:	68f8      	ldr	r0, [r7, #12]
 8001a1e:	4b4b      	ldr	r3, [pc, #300]	; (8001b4c <HAL_I2C_Master_Receive+0x208>)
 8001a20:	9300      	str	r3, [sp, #0]
 8001a22:	0023      	movs	r3, r4
 8001a24:	f000 fbea 	bl	80021fc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001a28:	e062      	b.n	8001af0 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a2a:	697a      	ldr	r2, [r7, #20]
 8001a2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	0018      	movs	r0, r3
 8001a32:	f000 fafd 	bl	8002030 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001a36:	1e03      	subs	r3, r0, #0
 8001a38:	d001      	beq.n	8001a3e <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e082      	b.n	8001b44 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a48:	b2d2      	uxtb	r2, r2
 8001a4a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a50:	1c5a      	adds	r2, r3, #1
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a5a:	3b01      	subs	r3, #1
 8001a5c:	b29a      	uxth	r2, r3
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	3b01      	subs	r3, #1
 8001a6a:	b29a      	uxth	r2, r3
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d03a      	beq.n	8001af0 <HAL_I2C_Master_Receive+0x1ac>
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d136      	bne.n	8001af0 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001a82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a84:	68f8      	ldr	r0, [r7, #12]
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	9300      	str	r3, [sp, #0]
 8001a8a:	0013      	movs	r3, r2
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	2180      	movs	r1, #128	; 0x80
 8001a90:	f000 fa14 	bl	8001ebc <I2C_WaitOnFlagUntilTimeout>
 8001a94:	1e03      	subs	r3, r0, #0
 8001a96:	d001      	beq.n	8001a9c <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e053      	b.n	8001b44 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aa0:	b29b      	uxth	r3, r3
 8001aa2:	2bff      	cmp	r3, #255	; 0xff
 8001aa4:	d911      	bls.n	8001aca <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	22ff      	movs	r2, #255	; 0xff
 8001aaa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ab0:	b2da      	uxtb	r2, r3
 8001ab2:	2380      	movs	r3, #128	; 0x80
 8001ab4:	045c      	lsls	r4, r3, #17
 8001ab6:	230a      	movs	r3, #10
 8001ab8:	18fb      	adds	r3, r7, r3
 8001aba:	8819      	ldrh	r1, [r3, #0]
 8001abc:	68f8      	ldr	r0, [r7, #12]
 8001abe:	2300      	movs	r3, #0
 8001ac0:	9300      	str	r3, [sp, #0]
 8001ac2:	0023      	movs	r3, r4
 8001ac4:	f000 fb9a 	bl	80021fc <I2C_TransferConfig>
 8001ac8:	e012      	b.n	8001af0 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ace:	b29a      	uxth	r2, r3
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ad8:	b2da      	uxtb	r2, r3
 8001ada:	2380      	movs	r3, #128	; 0x80
 8001adc:	049c      	lsls	r4, r3, #18
 8001ade:	230a      	movs	r3, #10
 8001ae0:	18fb      	adds	r3, r7, r3
 8001ae2:	8819      	ldrh	r1, [r3, #0]
 8001ae4:	68f8      	ldr	r0, [r7, #12]
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	9300      	str	r3, [sp, #0]
 8001aea:	0023      	movs	r3, r4
 8001aec:	f000 fb86 	bl	80021fc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001af4:	b29b      	uxth	r3, r3
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d197      	bne.n	8001a2a <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001afa:	697a      	ldr	r2, [r7, #20]
 8001afc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	0018      	movs	r0, r3
 8001b02:	f000 fa59 	bl	8001fb8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001b06:	1e03      	subs	r3, r0, #0
 8001b08:	d001      	beq.n	8001b0e <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e01a      	b.n	8001b44 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2220      	movs	r2, #32
 8001b14:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	685a      	ldr	r2, [r3, #4]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	490b      	ldr	r1, [pc, #44]	; (8001b50 <HAL_I2C_Master_Receive+0x20c>)
 8001b22:	400a      	ands	r2, r1
 8001b24:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	2241      	movs	r2, #65	; 0x41
 8001b2a:	2120      	movs	r1, #32
 8001b2c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2242      	movs	r2, #66	; 0x42
 8001b32:	2100      	movs	r1, #0
 8001b34:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2240      	movs	r2, #64	; 0x40
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	e000      	b.n	8001b44 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8001b42:	2302      	movs	r3, #2
  }
}
 8001b44:	0018      	movs	r0, r3
 8001b46:	46bd      	mov	sp, r7
 8001b48:	b007      	add	sp, #28
 8001b4a:	bd90      	pop	{r4, r7, pc}
 8001b4c:	80002400 	.word	0x80002400
 8001b50:	fe00e800 	.word	0xfe00e800

08001b54 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b54:	b590      	push	{r4, r7, lr}
 8001b56:	b089      	sub	sp, #36	; 0x24
 8001b58:	af02      	add	r7, sp, #8
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	000c      	movs	r4, r1
 8001b5e:	0010      	movs	r0, r2
 8001b60:	0019      	movs	r1, r3
 8001b62:	230a      	movs	r3, #10
 8001b64:	18fb      	adds	r3, r7, r3
 8001b66:	1c22      	adds	r2, r4, #0
 8001b68:	801a      	strh	r2, [r3, #0]
 8001b6a:	2308      	movs	r3, #8
 8001b6c:	18fb      	adds	r3, r7, r3
 8001b6e:	1c02      	adds	r2, r0, #0
 8001b70:	801a      	strh	r2, [r3, #0]
 8001b72:	1dbb      	adds	r3, r7, #6
 8001b74:	1c0a      	adds	r2, r1, #0
 8001b76:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2241      	movs	r2, #65	; 0x41
 8001b7c:	5c9b      	ldrb	r3, [r3, r2]
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	2b20      	cmp	r3, #32
 8001b82:	d000      	beq.n	8001b86 <HAL_I2C_Mem_Write+0x32>
 8001b84:	e10c      	b.n	8001da0 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d004      	beq.n	8001b96 <HAL_I2C_Mem_Write+0x42>
 8001b8c:	232c      	movs	r3, #44	; 0x2c
 8001b8e:	18fb      	adds	r3, r7, r3
 8001b90:	881b      	ldrh	r3, [r3, #0]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d105      	bne.n	8001ba2 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2280      	movs	r2, #128	; 0x80
 8001b9a:	0092      	lsls	r2, r2, #2
 8001b9c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e0ff      	b.n	8001da2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	2240      	movs	r2, #64	; 0x40
 8001ba6:	5c9b      	ldrb	r3, [r3, r2]
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d101      	bne.n	8001bb0 <HAL_I2C_Mem_Write+0x5c>
 8001bac:	2302      	movs	r3, #2
 8001bae:	e0f8      	b.n	8001da2 <HAL_I2C_Mem_Write+0x24e>
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2240      	movs	r2, #64	; 0x40
 8001bb4:	2101      	movs	r1, #1
 8001bb6:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001bb8:	f7ff f880 	bl	8000cbc <HAL_GetTick>
 8001bbc:	0003      	movs	r3, r0
 8001bbe:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001bc0:	2380      	movs	r3, #128	; 0x80
 8001bc2:	0219      	lsls	r1, r3, #8
 8001bc4:	68f8      	ldr	r0, [r7, #12]
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	9300      	str	r3, [sp, #0]
 8001bca:	2319      	movs	r3, #25
 8001bcc:	2201      	movs	r2, #1
 8001bce:	f000 f975 	bl	8001ebc <I2C_WaitOnFlagUntilTimeout>
 8001bd2:	1e03      	subs	r3, r0, #0
 8001bd4:	d001      	beq.n	8001bda <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e0e3      	b.n	8001da2 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2241      	movs	r2, #65	; 0x41
 8001bde:	2121      	movs	r1, #33	; 0x21
 8001be0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2242      	movs	r2, #66	; 0x42
 8001be6:	2140      	movs	r1, #64	; 0x40
 8001be8:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2200      	movs	r2, #0
 8001bee:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001bf4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	222c      	movs	r2, #44	; 0x2c
 8001bfa:	18ba      	adds	r2, r7, r2
 8001bfc:	8812      	ldrh	r2, [r2, #0]
 8001bfe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	2200      	movs	r2, #0
 8001c04:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001c06:	1dbb      	adds	r3, r7, #6
 8001c08:	881c      	ldrh	r4, [r3, #0]
 8001c0a:	2308      	movs	r3, #8
 8001c0c:	18fb      	adds	r3, r7, r3
 8001c0e:	881a      	ldrh	r2, [r3, #0]
 8001c10:	230a      	movs	r3, #10
 8001c12:	18fb      	adds	r3, r7, r3
 8001c14:	8819      	ldrh	r1, [r3, #0]
 8001c16:	68f8      	ldr	r0, [r7, #12]
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	9301      	str	r3, [sp, #4]
 8001c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c1e:	9300      	str	r3, [sp, #0]
 8001c20:	0023      	movs	r3, r4
 8001c22:	f000 f8c5 	bl	8001db0 <I2C_RequestMemoryWrite>
 8001c26:	1e03      	subs	r3, r0, #0
 8001c28:	d005      	beq.n	8001c36 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2240      	movs	r2, #64	; 0x40
 8001c2e:	2100      	movs	r1, #0
 8001c30:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e0b5      	b.n	8001da2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	2bff      	cmp	r3, #255	; 0xff
 8001c3e:	d911      	bls.n	8001c64 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	22ff      	movs	r2, #255	; 0xff
 8001c44:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c4a:	b2da      	uxtb	r2, r3
 8001c4c:	2380      	movs	r3, #128	; 0x80
 8001c4e:	045c      	lsls	r4, r3, #17
 8001c50:	230a      	movs	r3, #10
 8001c52:	18fb      	adds	r3, r7, r3
 8001c54:	8819      	ldrh	r1, [r3, #0]
 8001c56:	68f8      	ldr	r0, [r7, #12]
 8001c58:	2300      	movs	r3, #0
 8001c5a:	9300      	str	r3, [sp, #0]
 8001c5c:	0023      	movs	r3, r4
 8001c5e:	f000 facd 	bl	80021fc <I2C_TransferConfig>
 8001c62:	e012      	b.n	8001c8a <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c68:	b29a      	uxth	r2, r3
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c72:	b2da      	uxtb	r2, r3
 8001c74:	2380      	movs	r3, #128	; 0x80
 8001c76:	049c      	lsls	r4, r3, #18
 8001c78:	230a      	movs	r3, #10
 8001c7a:	18fb      	adds	r3, r7, r3
 8001c7c:	8819      	ldrh	r1, [r3, #0]
 8001c7e:	68f8      	ldr	r0, [r7, #12]
 8001c80:	2300      	movs	r3, #0
 8001c82:	9300      	str	r3, [sp, #0]
 8001c84:	0023      	movs	r3, r4
 8001c86:	f000 fab9 	bl	80021fc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c8a:	697a      	ldr	r2, [r7, #20]
 8001c8c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	0018      	movs	r0, r3
 8001c92:	f000 f952 	bl	8001f3a <I2C_WaitOnTXISFlagUntilTimeout>
 8001c96:	1e03      	subs	r3, r0, #0
 8001c98:	d001      	beq.n	8001c9e <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e081      	b.n	8001da2 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca2:	781a      	ldrb	r2, [r3, #0]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cae:	1c5a      	adds	r2, r3, #1
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cb8:	b29b      	uxth	r3, r3
 8001cba:	3b01      	subs	r3, #1
 8001cbc:	b29a      	uxth	r2, r3
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cc6:	3b01      	subs	r3, #1
 8001cc8:	b29a      	uxth	r2, r3
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d03a      	beq.n	8001d4e <HAL_I2C_Mem_Write+0x1fa>
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d136      	bne.n	8001d4e <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001ce0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ce2:	68f8      	ldr	r0, [r7, #12]
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	9300      	str	r3, [sp, #0]
 8001ce8:	0013      	movs	r3, r2
 8001cea:	2200      	movs	r2, #0
 8001cec:	2180      	movs	r1, #128	; 0x80
 8001cee:	f000 f8e5 	bl	8001ebc <I2C_WaitOnFlagUntilTimeout>
 8001cf2:	1e03      	subs	r3, r0, #0
 8001cf4:	d001      	beq.n	8001cfa <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e053      	b.n	8001da2 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	2bff      	cmp	r3, #255	; 0xff
 8001d02:	d911      	bls.n	8001d28 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	22ff      	movs	r2, #255	; 0xff
 8001d08:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d0e:	b2da      	uxtb	r2, r3
 8001d10:	2380      	movs	r3, #128	; 0x80
 8001d12:	045c      	lsls	r4, r3, #17
 8001d14:	230a      	movs	r3, #10
 8001d16:	18fb      	adds	r3, r7, r3
 8001d18:	8819      	ldrh	r1, [r3, #0]
 8001d1a:	68f8      	ldr	r0, [r7, #12]
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	9300      	str	r3, [sp, #0]
 8001d20:	0023      	movs	r3, r4
 8001d22:	f000 fa6b 	bl	80021fc <I2C_TransferConfig>
 8001d26:	e012      	b.n	8001d4e <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d2c:	b29a      	uxth	r2, r3
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d36:	b2da      	uxtb	r2, r3
 8001d38:	2380      	movs	r3, #128	; 0x80
 8001d3a:	049c      	lsls	r4, r3, #18
 8001d3c:	230a      	movs	r3, #10
 8001d3e:	18fb      	adds	r3, r7, r3
 8001d40:	8819      	ldrh	r1, [r3, #0]
 8001d42:	68f8      	ldr	r0, [r7, #12]
 8001d44:	2300      	movs	r3, #0
 8001d46:	9300      	str	r3, [sp, #0]
 8001d48:	0023      	movs	r3, r4
 8001d4a:	f000 fa57 	bl	80021fc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d198      	bne.n	8001c8a <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d58:	697a      	ldr	r2, [r7, #20]
 8001d5a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	0018      	movs	r0, r3
 8001d60:	f000 f92a 	bl	8001fb8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001d64:	1e03      	subs	r3, r0, #0
 8001d66:	d001      	beq.n	8001d6c <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e01a      	b.n	8001da2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2220      	movs	r2, #32
 8001d72:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	685a      	ldr	r2, [r3, #4]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	490b      	ldr	r1, [pc, #44]	; (8001dac <HAL_I2C_Mem_Write+0x258>)
 8001d80:	400a      	ands	r2, r1
 8001d82:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2241      	movs	r2, #65	; 0x41
 8001d88:	2120      	movs	r1, #32
 8001d8a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2242      	movs	r2, #66	; 0x42
 8001d90:	2100      	movs	r1, #0
 8001d92:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2240      	movs	r2, #64	; 0x40
 8001d98:	2100      	movs	r1, #0
 8001d9a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	e000      	b.n	8001da2 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8001da0:	2302      	movs	r3, #2
  }
}
 8001da2:	0018      	movs	r0, r3
 8001da4:	46bd      	mov	sp, r7
 8001da6:	b007      	add	sp, #28
 8001da8:	bd90      	pop	{r4, r7, pc}
 8001daa:	46c0      	nop			; (mov r8, r8)
 8001dac:	fe00e800 	.word	0xfe00e800

08001db0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001db0:	b5b0      	push	{r4, r5, r7, lr}
 8001db2:	b086      	sub	sp, #24
 8001db4:	af02      	add	r7, sp, #8
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	000c      	movs	r4, r1
 8001dba:	0010      	movs	r0, r2
 8001dbc:	0019      	movs	r1, r3
 8001dbe:	250a      	movs	r5, #10
 8001dc0:	197b      	adds	r3, r7, r5
 8001dc2:	1c22      	adds	r2, r4, #0
 8001dc4:	801a      	strh	r2, [r3, #0]
 8001dc6:	2308      	movs	r3, #8
 8001dc8:	18fb      	adds	r3, r7, r3
 8001dca:	1c02      	adds	r2, r0, #0
 8001dcc:	801a      	strh	r2, [r3, #0]
 8001dce:	1dbb      	adds	r3, r7, #6
 8001dd0:	1c0a      	adds	r2, r1, #0
 8001dd2:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001dd4:	1dbb      	adds	r3, r7, #6
 8001dd6:	881b      	ldrh	r3, [r3, #0]
 8001dd8:	b2da      	uxtb	r2, r3
 8001dda:	2380      	movs	r3, #128	; 0x80
 8001ddc:	045c      	lsls	r4, r3, #17
 8001dde:	197b      	adds	r3, r7, r5
 8001de0:	8819      	ldrh	r1, [r3, #0]
 8001de2:	68f8      	ldr	r0, [r7, #12]
 8001de4:	4b23      	ldr	r3, [pc, #140]	; (8001e74 <I2C_RequestMemoryWrite+0xc4>)
 8001de6:	9300      	str	r3, [sp, #0]
 8001de8:	0023      	movs	r3, r4
 8001dea:	f000 fa07 	bl	80021fc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001dee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001df0:	6a39      	ldr	r1, [r7, #32]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	0018      	movs	r0, r3
 8001df6:	f000 f8a0 	bl	8001f3a <I2C_WaitOnTXISFlagUntilTimeout>
 8001dfa:	1e03      	subs	r3, r0, #0
 8001dfc:	d001      	beq.n	8001e02 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e033      	b.n	8001e6a <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001e02:	1dbb      	adds	r3, r7, #6
 8001e04:	881b      	ldrh	r3, [r3, #0]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d107      	bne.n	8001e1a <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001e0a:	2308      	movs	r3, #8
 8001e0c:	18fb      	adds	r3, r7, r3
 8001e0e:	881b      	ldrh	r3, [r3, #0]
 8001e10:	b2da      	uxtb	r2, r3
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	629a      	str	r2, [r3, #40]	; 0x28
 8001e18:	e019      	b.n	8001e4e <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001e1a:	2308      	movs	r3, #8
 8001e1c:	18fb      	adds	r3, r7, r3
 8001e1e:	881b      	ldrh	r3, [r3, #0]
 8001e20:	0a1b      	lsrs	r3, r3, #8
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	b2da      	uxtb	r2, r3
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e2e:	6a39      	ldr	r1, [r7, #32]
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	0018      	movs	r0, r3
 8001e34:	f000 f881 	bl	8001f3a <I2C_WaitOnTXISFlagUntilTimeout>
 8001e38:	1e03      	subs	r3, r0, #0
 8001e3a:	d001      	beq.n	8001e40 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e014      	b.n	8001e6a <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001e40:	2308      	movs	r3, #8
 8001e42:	18fb      	adds	r3, r7, r3
 8001e44:	881b      	ldrh	r3, [r3, #0]
 8001e46:	b2da      	uxtb	r2, r3
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001e4e:	6a3a      	ldr	r2, [r7, #32]
 8001e50:	68f8      	ldr	r0, [r7, #12]
 8001e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e54:	9300      	str	r3, [sp, #0]
 8001e56:	0013      	movs	r3, r2
 8001e58:	2200      	movs	r2, #0
 8001e5a:	2180      	movs	r1, #128	; 0x80
 8001e5c:	f000 f82e 	bl	8001ebc <I2C_WaitOnFlagUntilTimeout>
 8001e60:	1e03      	subs	r3, r0, #0
 8001e62:	d001      	beq.n	8001e68 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e000      	b.n	8001e6a <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	0018      	movs	r0, r3
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	b004      	add	sp, #16
 8001e70:	bdb0      	pop	{r4, r5, r7, pc}
 8001e72:	46c0      	nop			; (mov r8, r8)
 8001e74:	80002000 	.word	0x80002000

08001e78 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	699b      	ldr	r3, [r3, #24]
 8001e86:	2202      	movs	r2, #2
 8001e88:	4013      	ands	r3, r2
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d103      	bne.n	8001e96 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2200      	movs	r2, #0
 8001e94:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	699b      	ldr	r3, [r3, #24]
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d007      	beq.n	8001eb4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	699a      	ldr	r2, [r3, #24]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2101      	movs	r1, #1
 8001eb0:	430a      	orrs	r2, r1
 8001eb2:	619a      	str	r2, [r3, #24]
  }
}
 8001eb4:	46c0      	nop			; (mov r8, r8)
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	b002      	add	sp, #8
 8001eba:	bd80      	pop	{r7, pc}

08001ebc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	603b      	str	r3, [r7, #0]
 8001ec8:	1dfb      	adds	r3, r7, #7
 8001eca:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ecc:	e021      	b.n	8001f12 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	d01e      	beq.n	8001f12 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ed4:	f7fe fef2 	bl	8000cbc <HAL_GetTick>
 8001ed8:	0002      	movs	r2, r0
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	683a      	ldr	r2, [r7, #0]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d302      	bcc.n	8001eea <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d113      	bne.n	8001f12 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eee:	2220      	movs	r2, #32
 8001ef0:	431a      	orrs	r2, r3
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2241      	movs	r2, #65	; 0x41
 8001efa:	2120      	movs	r1, #32
 8001efc:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2242      	movs	r2, #66	; 0x42
 8001f02:	2100      	movs	r1, #0
 8001f04:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2240      	movs	r2, #64	; 0x40
 8001f0a:	2100      	movs	r1, #0
 8001f0c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e00f      	b.n	8001f32 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	699b      	ldr	r3, [r3, #24]
 8001f18:	68ba      	ldr	r2, [r7, #8]
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	68ba      	ldr	r2, [r7, #8]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	425a      	negs	r2, r3
 8001f22:	4153      	adcs	r3, r2
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	001a      	movs	r2, r3
 8001f28:	1dfb      	adds	r3, r7, #7
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d0ce      	beq.n	8001ece <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001f30:	2300      	movs	r3, #0
}
 8001f32:	0018      	movs	r0, r3
 8001f34:	46bd      	mov	sp, r7
 8001f36:	b004      	add	sp, #16
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b084      	sub	sp, #16
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	60f8      	str	r0, [r7, #12]
 8001f42:	60b9      	str	r1, [r7, #8]
 8001f44:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001f46:	e02b      	b.n	8001fa0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	68b9      	ldr	r1, [r7, #8]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	0018      	movs	r0, r3
 8001f50:	f000 f8da 	bl	8002108 <I2C_IsAcknowledgeFailed>
 8001f54:	1e03      	subs	r3, r0, #0
 8001f56:	d001      	beq.n	8001f5c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e029      	b.n	8001fb0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	3301      	adds	r3, #1
 8001f60:	d01e      	beq.n	8001fa0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f62:	f7fe feab 	bl	8000cbc <HAL_GetTick>
 8001f66:	0002      	movs	r2, r0
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	68ba      	ldr	r2, [r7, #8]
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d302      	bcc.n	8001f78 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d113      	bne.n	8001fa0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f7c:	2220      	movs	r2, #32
 8001f7e:	431a      	orrs	r2, r3
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2241      	movs	r2, #65	; 0x41
 8001f88:	2120      	movs	r1, #32
 8001f8a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2242      	movs	r2, #66	; 0x42
 8001f90:	2100      	movs	r1, #0
 8001f92:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2240      	movs	r2, #64	; 0x40
 8001f98:	2100      	movs	r1, #0
 8001f9a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e007      	b.n	8001fb0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	699b      	ldr	r3, [r3, #24]
 8001fa6:	2202      	movs	r2, #2
 8001fa8:	4013      	ands	r3, r2
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d1cc      	bne.n	8001f48 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001fae:	2300      	movs	r3, #0
}
 8001fb0:	0018      	movs	r0, r3
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	b004      	add	sp, #16
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	60f8      	str	r0, [r7, #12]
 8001fc0:	60b9      	str	r1, [r7, #8]
 8001fc2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001fc4:	e028      	b.n	8002018 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	68b9      	ldr	r1, [r7, #8]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	0018      	movs	r0, r3
 8001fce:	f000 f89b 	bl	8002108 <I2C_IsAcknowledgeFailed>
 8001fd2:	1e03      	subs	r3, r0, #0
 8001fd4:	d001      	beq.n	8001fda <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e026      	b.n	8002028 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fda:	f7fe fe6f 	bl	8000cbc <HAL_GetTick>
 8001fde:	0002      	movs	r2, r0
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	68ba      	ldr	r2, [r7, #8]
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d302      	bcc.n	8001ff0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d113      	bne.n	8002018 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff4:	2220      	movs	r2, #32
 8001ff6:	431a      	orrs	r2, r3
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2241      	movs	r2, #65	; 0x41
 8002000:	2120      	movs	r1, #32
 8002002:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2242      	movs	r2, #66	; 0x42
 8002008:	2100      	movs	r1, #0
 800200a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2240      	movs	r2, #64	; 0x40
 8002010:	2100      	movs	r1, #0
 8002012:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e007      	b.n	8002028 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	699b      	ldr	r3, [r3, #24]
 800201e:	2220      	movs	r2, #32
 8002020:	4013      	ands	r3, r2
 8002022:	2b20      	cmp	r3, #32
 8002024:	d1cf      	bne.n	8001fc6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002026:	2300      	movs	r3, #0
}
 8002028:	0018      	movs	r0, r3
 800202a:	46bd      	mov	sp, r7
 800202c:	b004      	add	sp, #16
 800202e:	bd80      	pop	{r7, pc}

08002030 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800203c:	e055      	b.n	80020ea <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	68b9      	ldr	r1, [r7, #8]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	0018      	movs	r0, r3
 8002046:	f000 f85f 	bl	8002108 <I2C_IsAcknowledgeFailed>
 800204a:	1e03      	subs	r3, r0, #0
 800204c:	d001      	beq.n	8002052 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e053      	b.n	80020fa <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	699b      	ldr	r3, [r3, #24]
 8002058:	2220      	movs	r2, #32
 800205a:	4013      	ands	r3, r2
 800205c:	2b20      	cmp	r3, #32
 800205e:	d129      	bne.n	80020b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	699b      	ldr	r3, [r3, #24]
 8002066:	2204      	movs	r2, #4
 8002068:	4013      	ands	r3, r2
 800206a:	2b04      	cmp	r3, #4
 800206c:	d105      	bne.n	800207a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002076:	2300      	movs	r3, #0
 8002078:	e03f      	b.n	80020fa <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	2220      	movs	r2, #32
 8002080:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	685a      	ldr	r2, [r3, #4]
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	491d      	ldr	r1, [pc, #116]	; (8002104 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800208e:	400a      	ands	r2, r1
 8002090:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2200      	movs	r2, #0
 8002096:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2241      	movs	r2, #65	; 0x41
 800209c:	2120      	movs	r1, #32
 800209e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2242      	movs	r2, #66	; 0x42
 80020a4:	2100      	movs	r1, #0
 80020a6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2240      	movs	r2, #64	; 0x40
 80020ac:	2100      	movs	r1, #0
 80020ae:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e022      	b.n	80020fa <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020b4:	f7fe fe02 	bl	8000cbc <HAL_GetTick>
 80020b8:	0002      	movs	r2, r0
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	68ba      	ldr	r2, [r7, #8]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d302      	bcc.n	80020ca <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d10f      	bne.n	80020ea <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ce:	2220      	movs	r2, #32
 80020d0:	431a      	orrs	r2, r3
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2241      	movs	r2, #65	; 0x41
 80020da:	2120      	movs	r1, #32
 80020dc:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2240      	movs	r2, #64	; 0x40
 80020e2:	2100      	movs	r1, #0
 80020e4:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e007      	b.n	80020fa <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	699b      	ldr	r3, [r3, #24]
 80020f0:	2204      	movs	r2, #4
 80020f2:	4013      	ands	r3, r2
 80020f4:	2b04      	cmp	r3, #4
 80020f6:	d1a2      	bne.n	800203e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	0018      	movs	r0, r3
 80020fc:	46bd      	mov	sp, r7
 80020fe:	b004      	add	sp, #16
 8002100:	bd80      	pop	{r7, pc}
 8002102:	46c0      	nop			; (mov r8, r8)
 8002104:	fe00e800 	.word	0xfe00e800

08002108 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	60b9      	str	r1, [r7, #8]
 8002112:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	699b      	ldr	r3, [r3, #24]
 800211a:	2210      	movs	r2, #16
 800211c:	4013      	ands	r3, r2
 800211e:	2b10      	cmp	r3, #16
 8002120:	d164      	bne.n	80021ec <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	685a      	ldr	r2, [r3, #4]
 8002128:	2380      	movs	r3, #128	; 0x80
 800212a:	049b      	lsls	r3, r3, #18
 800212c:	401a      	ands	r2, r3
 800212e:	2380      	movs	r3, #128	; 0x80
 8002130:	049b      	lsls	r3, r3, #18
 8002132:	429a      	cmp	r2, r3
 8002134:	d02b      	beq.n	800218e <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	685a      	ldr	r2, [r3, #4]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2180      	movs	r1, #128	; 0x80
 8002142:	01c9      	lsls	r1, r1, #7
 8002144:	430a      	orrs	r2, r1
 8002146:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002148:	e021      	b.n	800218e <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	3301      	adds	r3, #1
 800214e:	d01e      	beq.n	800218e <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002150:	f7fe fdb4 	bl	8000cbc <HAL_GetTick>
 8002154:	0002      	movs	r2, r0
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	68ba      	ldr	r2, [r7, #8]
 800215c:	429a      	cmp	r2, r3
 800215e:	d302      	bcc.n	8002166 <I2C_IsAcknowledgeFailed+0x5e>
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d113      	bne.n	800218e <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216a:	2220      	movs	r2, #32
 800216c:	431a      	orrs	r2, r3
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2241      	movs	r2, #65	; 0x41
 8002176:	2120      	movs	r1, #32
 8002178:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2242      	movs	r2, #66	; 0x42
 800217e:	2100      	movs	r1, #0
 8002180:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2240      	movs	r2, #64	; 0x40
 8002186:	2100      	movs	r1, #0
 8002188:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e02f      	b.n	80021ee <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	699b      	ldr	r3, [r3, #24]
 8002194:	2220      	movs	r2, #32
 8002196:	4013      	ands	r3, r2
 8002198:	2b20      	cmp	r3, #32
 800219a:	d1d6      	bne.n	800214a <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2210      	movs	r2, #16
 80021a2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2220      	movs	r2, #32
 80021aa:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	0018      	movs	r0, r3
 80021b0:	f7ff fe62 	bl	8001e78 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	685a      	ldr	r2, [r3, #4]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	490e      	ldr	r1, [pc, #56]	; (80021f8 <I2C_IsAcknowledgeFailed+0xf0>)
 80021c0:	400a      	ands	r2, r1
 80021c2:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c8:	2204      	movs	r2, #4
 80021ca:	431a      	orrs	r2, r3
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2241      	movs	r2, #65	; 0x41
 80021d4:	2120      	movs	r1, #32
 80021d6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2242      	movs	r2, #66	; 0x42
 80021dc:	2100      	movs	r1, #0
 80021de:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2240      	movs	r2, #64	; 0x40
 80021e4:	2100      	movs	r1, #0
 80021e6:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e000      	b.n	80021ee <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	0018      	movs	r0, r3
 80021f0:	46bd      	mov	sp, r7
 80021f2:	b004      	add	sp, #16
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	46c0      	nop			; (mov r8, r8)
 80021f8:	fe00e800 	.word	0xfe00e800

080021fc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80021fc:	b590      	push	{r4, r7, lr}
 80021fe:	b085      	sub	sp, #20
 8002200:	af00      	add	r7, sp, #0
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	0008      	movs	r0, r1
 8002206:	0011      	movs	r1, r2
 8002208:	607b      	str	r3, [r7, #4]
 800220a:	240a      	movs	r4, #10
 800220c:	193b      	adds	r3, r7, r4
 800220e:	1c02      	adds	r2, r0, #0
 8002210:	801a      	strh	r2, [r3, #0]
 8002212:	2009      	movs	r0, #9
 8002214:	183b      	adds	r3, r7, r0
 8002216:	1c0a      	adds	r2, r1, #0
 8002218:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	6a3a      	ldr	r2, [r7, #32]
 8002222:	0d51      	lsrs	r1, r2, #21
 8002224:	2280      	movs	r2, #128	; 0x80
 8002226:	00d2      	lsls	r2, r2, #3
 8002228:	400a      	ands	r2, r1
 800222a:	490e      	ldr	r1, [pc, #56]	; (8002264 <I2C_TransferConfig+0x68>)
 800222c:	430a      	orrs	r2, r1
 800222e:	43d2      	mvns	r2, r2
 8002230:	401a      	ands	r2, r3
 8002232:	0011      	movs	r1, r2
 8002234:	193b      	adds	r3, r7, r4
 8002236:	881b      	ldrh	r3, [r3, #0]
 8002238:	059b      	lsls	r3, r3, #22
 800223a:	0d9a      	lsrs	r2, r3, #22
 800223c:	183b      	adds	r3, r7, r0
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	0418      	lsls	r0, r3, #16
 8002242:	23ff      	movs	r3, #255	; 0xff
 8002244:	041b      	lsls	r3, r3, #16
 8002246:	4003      	ands	r3, r0
 8002248:	431a      	orrs	r2, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	431a      	orrs	r2, r3
 800224e:	6a3b      	ldr	r3, [r7, #32]
 8002250:	431a      	orrs	r2, r3
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	430a      	orrs	r2, r1
 8002258:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 800225a:	46c0      	nop			; (mov r8, r8)
 800225c:	46bd      	mov	sp, r7
 800225e:	b005      	add	sp, #20
 8002260:	bd90      	pop	{r4, r7, pc}
 8002262:	46c0      	nop			; (mov r8, r8)
 8002264:	03ff63ff 	.word	0x03ff63ff

08002268 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2241      	movs	r2, #65	; 0x41
 8002276:	5c9b      	ldrb	r3, [r3, r2]
 8002278:	b2db      	uxtb	r3, r3
 800227a:	2b20      	cmp	r3, #32
 800227c:	d138      	bne.n	80022f0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2240      	movs	r2, #64	; 0x40
 8002282:	5c9b      	ldrb	r3, [r3, r2]
 8002284:	2b01      	cmp	r3, #1
 8002286:	d101      	bne.n	800228c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002288:	2302      	movs	r3, #2
 800228a:	e032      	b.n	80022f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2240      	movs	r2, #64	; 0x40
 8002290:	2101      	movs	r1, #1
 8002292:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2241      	movs	r2, #65	; 0x41
 8002298:	2124      	movs	r1, #36	; 0x24
 800229a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	2101      	movs	r1, #1
 80022a8:	438a      	bics	r2, r1
 80022aa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4911      	ldr	r1, [pc, #68]	; (80022fc <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80022b8:	400a      	ands	r2, r1
 80022ba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	6819      	ldr	r1, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	683a      	ldr	r2, [r7, #0]
 80022c8:	430a      	orrs	r2, r1
 80022ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2101      	movs	r1, #1
 80022d8:	430a      	orrs	r2, r1
 80022da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2241      	movs	r2, #65	; 0x41
 80022e0:	2120      	movs	r1, #32
 80022e2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2240      	movs	r2, #64	; 0x40
 80022e8:	2100      	movs	r1, #0
 80022ea:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80022ec:	2300      	movs	r3, #0
 80022ee:	e000      	b.n	80022f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80022f0:	2302      	movs	r3, #2
  }
}
 80022f2:	0018      	movs	r0, r3
 80022f4:	46bd      	mov	sp, r7
 80022f6:	b002      	add	sp, #8
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	46c0      	nop			; (mov r8, r8)
 80022fc:	ffffefff 	.word	0xffffefff

08002300 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2241      	movs	r2, #65	; 0x41
 800230e:	5c9b      	ldrb	r3, [r3, r2]
 8002310:	b2db      	uxtb	r3, r3
 8002312:	2b20      	cmp	r3, #32
 8002314:	d139      	bne.n	800238a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2240      	movs	r2, #64	; 0x40
 800231a:	5c9b      	ldrb	r3, [r3, r2]
 800231c:	2b01      	cmp	r3, #1
 800231e:	d101      	bne.n	8002324 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002320:	2302      	movs	r3, #2
 8002322:	e033      	b.n	800238c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2240      	movs	r2, #64	; 0x40
 8002328:	2101      	movs	r1, #1
 800232a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2241      	movs	r2, #65	; 0x41
 8002330:	2124      	movs	r1, #36	; 0x24
 8002332:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2101      	movs	r1, #1
 8002340:	438a      	bics	r2, r1
 8002342:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	4a11      	ldr	r2, [pc, #68]	; (8002394 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002350:	4013      	ands	r3, r2
 8002352:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	021b      	lsls	r3, r3, #8
 8002358:	68fa      	ldr	r2, [r7, #12]
 800235a:	4313      	orrs	r3, r2
 800235c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	68fa      	ldr	r2, [r7, #12]
 8002364:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2101      	movs	r1, #1
 8002372:	430a      	orrs	r2, r1
 8002374:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2241      	movs	r2, #65	; 0x41
 800237a:	2120      	movs	r1, #32
 800237c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2240      	movs	r2, #64	; 0x40
 8002382:	2100      	movs	r1, #0
 8002384:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002386:	2300      	movs	r3, #0
 8002388:	e000      	b.n	800238c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800238a:	2302      	movs	r3, #2
  }
}
 800238c:	0018      	movs	r0, r3
 800238e:	46bd      	mov	sp, r7
 8002390:	b004      	add	sp, #16
 8002392:	bd80      	pop	{r7, pc}
 8002394:	fffff0ff 	.word	0xfffff0ff

08002398 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b088      	sub	sp, #32
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d101      	bne.n	80023aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e305      	b.n	80029b6 <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	2201      	movs	r2, #1
 80023b0:	4013      	ands	r3, r2
 80023b2:	d100      	bne.n	80023b6 <HAL_RCC_OscConfig+0x1e>
 80023b4:	e08d      	b.n	80024d2 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80023b6:	4bc5      	ldr	r3, [pc, #788]	; (80026cc <HAL_RCC_OscConfig+0x334>)
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	220c      	movs	r2, #12
 80023bc:	4013      	ands	r3, r2
 80023be:	2b04      	cmp	r3, #4
 80023c0:	d00e      	beq.n	80023e0 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023c2:	4bc2      	ldr	r3, [pc, #776]	; (80026cc <HAL_RCC_OscConfig+0x334>)
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	220c      	movs	r2, #12
 80023c8:	4013      	ands	r3, r2
 80023ca:	2b08      	cmp	r3, #8
 80023cc:	d116      	bne.n	80023fc <HAL_RCC_OscConfig+0x64>
 80023ce:	4bbf      	ldr	r3, [pc, #764]	; (80026cc <HAL_RCC_OscConfig+0x334>)
 80023d0:	685a      	ldr	r2, [r3, #4]
 80023d2:	23c0      	movs	r3, #192	; 0xc0
 80023d4:	025b      	lsls	r3, r3, #9
 80023d6:	401a      	ands	r2, r3
 80023d8:	2380      	movs	r3, #128	; 0x80
 80023da:	025b      	lsls	r3, r3, #9
 80023dc:	429a      	cmp	r2, r3
 80023de:	d10d      	bne.n	80023fc <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023e0:	4bba      	ldr	r3, [pc, #744]	; (80026cc <HAL_RCC_OscConfig+0x334>)
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	2380      	movs	r3, #128	; 0x80
 80023e6:	029b      	lsls	r3, r3, #10
 80023e8:	4013      	ands	r3, r2
 80023ea:	d100      	bne.n	80023ee <HAL_RCC_OscConfig+0x56>
 80023ec:	e070      	b.n	80024d0 <HAL_RCC_OscConfig+0x138>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d000      	beq.n	80023f8 <HAL_RCC_OscConfig+0x60>
 80023f6:	e06b      	b.n	80024d0 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e2dc      	b.n	80029b6 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	2b01      	cmp	r3, #1
 8002402:	d107      	bne.n	8002414 <HAL_RCC_OscConfig+0x7c>
 8002404:	4bb1      	ldr	r3, [pc, #708]	; (80026cc <HAL_RCC_OscConfig+0x334>)
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	4bb0      	ldr	r3, [pc, #704]	; (80026cc <HAL_RCC_OscConfig+0x334>)
 800240a:	2180      	movs	r1, #128	; 0x80
 800240c:	0249      	lsls	r1, r1, #9
 800240e:	430a      	orrs	r2, r1
 8002410:	601a      	str	r2, [r3, #0]
 8002412:	e02f      	b.n	8002474 <HAL_RCC_OscConfig+0xdc>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d10c      	bne.n	8002436 <HAL_RCC_OscConfig+0x9e>
 800241c:	4bab      	ldr	r3, [pc, #684]	; (80026cc <HAL_RCC_OscConfig+0x334>)
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	4baa      	ldr	r3, [pc, #680]	; (80026cc <HAL_RCC_OscConfig+0x334>)
 8002422:	49ab      	ldr	r1, [pc, #684]	; (80026d0 <HAL_RCC_OscConfig+0x338>)
 8002424:	400a      	ands	r2, r1
 8002426:	601a      	str	r2, [r3, #0]
 8002428:	4ba8      	ldr	r3, [pc, #672]	; (80026cc <HAL_RCC_OscConfig+0x334>)
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	4ba7      	ldr	r3, [pc, #668]	; (80026cc <HAL_RCC_OscConfig+0x334>)
 800242e:	49a9      	ldr	r1, [pc, #676]	; (80026d4 <HAL_RCC_OscConfig+0x33c>)
 8002430:	400a      	ands	r2, r1
 8002432:	601a      	str	r2, [r3, #0]
 8002434:	e01e      	b.n	8002474 <HAL_RCC_OscConfig+0xdc>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	2b05      	cmp	r3, #5
 800243c:	d10e      	bne.n	800245c <HAL_RCC_OscConfig+0xc4>
 800243e:	4ba3      	ldr	r3, [pc, #652]	; (80026cc <HAL_RCC_OscConfig+0x334>)
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	4ba2      	ldr	r3, [pc, #648]	; (80026cc <HAL_RCC_OscConfig+0x334>)
 8002444:	2180      	movs	r1, #128	; 0x80
 8002446:	02c9      	lsls	r1, r1, #11
 8002448:	430a      	orrs	r2, r1
 800244a:	601a      	str	r2, [r3, #0]
 800244c:	4b9f      	ldr	r3, [pc, #636]	; (80026cc <HAL_RCC_OscConfig+0x334>)
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	4b9e      	ldr	r3, [pc, #632]	; (80026cc <HAL_RCC_OscConfig+0x334>)
 8002452:	2180      	movs	r1, #128	; 0x80
 8002454:	0249      	lsls	r1, r1, #9
 8002456:	430a      	orrs	r2, r1
 8002458:	601a      	str	r2, [r3, #0]
 800245a:	e00b      	b.n	8002474 <HAL_RCC_OscConfig+0xdc>
 800245c:	4b9b      	ldr	r3, [pc, #620]	; (80026cc <HAL_RCC_OscConfig+0x334>)
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	4b9a      	ldr	r3, [pc, #616]	; (80026cc <HAL_RCC_OscConfig+0x334>)
 8002462:	499b      	ldr	r1, [pc, #620]	; (80026d0 <HAL_RCC_OscConfig+0x338>)
 8002464:	400a      	ands	r2, r1
 8002466:	601a      	str	r2, [r3, #0]
 8002468:	4b98      	ldr	r3, [pc, #608]	; (80026cc <HAL_RCC_OscConfig+0x334>)
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	4b97      	ldr	r3, [pc, #604]	; (80026cc <HAL_RCC_OscConfig+0x334>)
 800246e:	4999      	ldr	r1, [pc, #612]	; (80026d4 <HAL_RCC_OscConfig+0x33c>)
 8002470:	400a      	ands	r2, r1
 8002472:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d014      	beq.n	80024a6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800247c:	f7fe fc1e 	bl	8000cbc <HAL_GetTick>
 8002480:	0003      	movs	r3, r0
 8002482:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002484:	e008      	b.n	8002498 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002486:	f7fe fc19 	bl	8000cbc <HAL_GetTick>
 800248a:	0002      	movs	r2, r0
 800248c:	69bb      	ldr	r3, [r7, #24]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	2b64      	cmp	r3, #100	; 0x64
 8002492:	d901      	bls.n	8002498 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002494:	2303      	movs	r3, #3
 8002496:	e28e      	b.n	80029b6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002498:	4b8c      	ldr	r3, [pc, #560]	; (80026cc <HAL_RCC_OscConfig+0x334>)
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	2380      	movs	r3, #128	; 0x80
 800249e:	029b      	lsls	r3, r3, #10
 80024a0:	4013      	ands	r3, r2
 80024a2:	d0f0      	beq.n	8002486 <HAL_RCC_OscConfig+0xee>
 80024a4:	e015      	b.n	80024d2 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a6:	f7fe fc09 	bl	8000cbc <HAL_GetTick>
 80024aa:	0003      	movs	r3, r0
 80024ac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ae:	e008      	b.n	80024c2 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024b0:	f7fe fc04 	bl	8000cbc <HAL_GetTick>
 80024b4:	0002      	movs	r2, r0
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b64      	cmp	r3, #100	; 0x64
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e279      	b.n	80029b6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024c2:	4b82      	ldr	r3, [pc, #520]	; (80026cc <HAL_RCC_OscConfig+0x334>)
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	2380      	movs	r3, #128	; 0x80
 80024c8:	029b      	lsls	r3, r3, #10
 80024ca:	4013      	ands	r3, r2
 80024cc:	d1f0      	bne.n	80024b0 <HAL_RCC_OscConfig+0x118>
 80024ce:	e000      	b.n	80024d2 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024d0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2202      	movs	r2, #2
 80024d8:	4013      	ands	r3, r2
 80024da:	d100      	bne.n	80024de <HAL_RCC_OscConfig+0x146>
 80024dc:	e06c      	b.n	80025b8 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80024de:	4b7b      	ldr	r3, [pc, #492]	; (80026cc <HAL_RCC_OscConfig+0x334>)
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	220c      	movs	r2, #12
 80024e4:	4013      	ands	r3, r2
 80024e6:	d00e      	beq.n	8002506 <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80024e8:	4b78      	ldr	r3, [pc, #480]	; (80026cc <HAL_RCC_OscConfig+0x334>)
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	220c      	movs	r2, #12
 80024ee:	4013      	ands	r3, r2
 80024f0:	2b08      	cmp	r3, #8
 80024f2:	d11f      	bne.n	8002534 <HAL_RCC_OscConfig+0x19c>
 80024f4:	4b75      	ldr	r3, [pc, #468]	; (80026cc <HAL_RCC_OscConfig+0x334>)
 80024f6:	685a      	ldr	r2, [r3, #4]
 80024f8:	23c0      	movs	r3, #192	; 0xc0
 80024fa:	025b      	lsls	r3, r3, #9
 80024fc:	401a      	ands	r2, r3
 80024fe:	2380      	movs	r3, #128	; 0x80
 8002500:	021b      	lsls	r3, r3, #8
 8002502:	429a      	cmp	r2, r3
 8002504:	d116      	bne.n	8002534 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002506:	4b71      	ldr	r3, [pc, #452]	; (80026cc <HAL_RCC_OscConfig+0x334>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2202      	movs	r2, #2
 800250c:	4013      	ands	r3, r2
 800250e:	d005      	beq.n	800251c <HAL_RCC_OscConfig+0x184>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	2b01      	cmp	r3, #1
 8002516:	d001      	beq.n	800251c <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e24c      	b.n	80029b6 <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800251c:	4b6b      	ldr	r3, [pc, #428]	; (80026cc <HAL_RCC_OscConfig+0x334>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	22f8      	movs	r2, #248	; 0xf8
 8002522:	4393      	bics	r3, r2
 8002524:	0019      	movs	r1, r3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	691b      	ldr	r3, [r3, #16]
 800252a:	00da      	lsls	r2, r3, #3
 800252c:	4b67      	ldr	r3, [pc, #412]	; (80026cc <HAL_RCC_OscConfig+0x334>)
 800252e:	430a      	orrs	r2, r1
 8002530:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002532:	e041      	b.n	80025b8 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d024      	beq.n	8002586 <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800253c:	4b63      	ldr	r3, [pc, #396]	; (80026cc <HAL_RCC_OscConfig+0x334>)
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	4b62      	ldr	r3, [pc, #392]	; (80026cc <HAL_RCC_OscConfig+0x334>)
 8002542:	2101      	movs	r1, #1
 8002544:	430a      	orrs	r2, r1
 8002546:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002548:	f7fe fbb8 	bl	8000cbc <HAL_GetTick>
 800254c:	0003      	movs	r3, r0
 800254e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002550:	e008      	b.n	8002564 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002552:	f7fe fbb3 	bl	8000cbc <HAL_GetTick>
 8002556:	0002      	movs	r2, r0
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	2b02      	cmp	r3, #2
 800255e:	d901      	bls.n	8002564 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e228      	b.n	80029b6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002564:	4b59      	ldr	r3, [pc, #356]	; (80026cc <HAL_RCC_OscConfig+0x334>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2202      	movs	r2, #2
 800256a:	4013      	ands	r3, r2
 800256c:	d0f1      	beq.n	8002552 <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800256e:	4b57      	ldr	r3, [pc, #348]	; (80026cc <HAL_RCC_OscConfig+0x334>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	22f8      	movs	r2, #248	; 0xf8
 8002574:	4393      	bics	r3, r2
 8002576:	0019      	movs	r1, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	691b      	ldr	r3, [r3, #16]
 800257c:	00da      	lsls	r2, r3, #3
 800257e:	4b53      	ldr	r3, [pc, #332]	; (80026cc <HAL_RCC_OscConfig+0x334>)
 8002580:	430a      	orrs	r2, r1
 8002582:	601a      	str	r2, [r3, #0]
 8002584:	e018      	b.n	80025b8 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002586:	4b51      	ldr	r3, [pc, #324]	; (80026cc <HAL_RCC_OscConfig+0x334>)
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	4b50      	ldr	r3, [pc, #320]	; (80026cc <HAL_RCC_OscConfig+0x334>)
 800258c:	2101      	movs	r1, #1
 800258e:	438a      	bics	r2, r1
 8002590:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002592:	f7fe fb93 	bl	8000cbc <HAL_GetTick>
 8002596:	0003      	movs	r3, r0
 8002598:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800259a:	e008      	b.n	80025ae <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800259c:	f7fe fb8e 	bl	8000cbc <HAL_GetTick>
 80025a0:	0002      	movs	r2, r0
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e203      	b.n	80029b6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ae:	4b47      	ldr	r3, [pc, #284]	; (80026cc <HAL_RCC_OscConfig+0x334>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2202      	movs	r2, #2
 80025b4:	4013      	ands	r3, r2
 80025b6:	d1f1      	bne.n	800259c <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2208      	movs	r2, #8
 80025be:	4013      	ands	r3, r2
 80025c0:	d036      	beq.n	8002630 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	69db      	ldr	r3, [r3, #28]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d019      	beq.n	80025fe <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025ca:	4b40      	ldr	r3, [pc, #256]	; (80026cc <HAL_RCC_OscConfig+0x334>)
 80025cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025ce:	4b3f      	ldr	r3, [pc, #252]	; (80026cc <HAL_RCC_OscConfig+0x334>)
 80025d0:	2101      	movs	r1, #1
 80025d2:	430a      	orrs	r2, r1
 80025d4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025d6:	f7fe fb71 	bl	8000cbc <HAL_GetTick>
 80025da:	0003      	movs	r3, r0
 80025dc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025de:	e008      	b.n	80025f2 <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025e0:	f7fe fb6c 	bl	8000cbc <HAL_GetTick>
 80025e4:	0002      	movs	r2, r0
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e1e1      	b.n	80029b6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025f2:	4b36      	ldr	r3, [pc, #216]	; (80026cc <HAL_RCC_OscConfig+0x334>)
 80025f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f6:	2202      	movs	r2, #2
 80025f8:	4013      	ands	r3, r2
 80025fa:	d0f1      	beq.n	80025e0 <HAL_RCC_OscConfig+0x248>
 80025fc:	e018      	b.n	8002630 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025fe:	4b33      	ldr	r3, [pc, #204]	; (80026cc <HAL_RCC_OscConfig+0x334>)
 8002600:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002602:	4b32      	ldr	r3, [pc, #200]	; (80026cc <HAL_RCC_OscConfig+0x334>)
 8002604:	2101      	movs	r1, #1
 8002606:	438a      	bics	r2, r1
 8002608:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800260a:	f7fe fb57 	bl	8000cbc <HAL_GetTick>
 800260e:	0003      	movs	r3, r0
 8002610:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002612:	e008      	b.n	8002626 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002614:	f7fe fb52 	bl	8000cbc <HAL_GetTick>
 8002618:	0002      	movs	r2, r0
 800261a:	69bb      	ldr	r3, [r7, #24]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b02      	cmp	r3, #2
 8002620:	d901      	bls.n	8002626 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e1c7      	b.n	80029b6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002626:	4b29      	ldr	r3, [pc, #164]	; (80026cc <HAL_RCC_OscConfig+0x334>)
 8002628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262a:	2202      	movs	r2, #2
 800262c:	4013      	ands	r3, r2
 800262e:	d1f1      	bne.n	8002614 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2204      	movs	r2, #4
 8002636:	4013      	ands	r3, r2
 8002638:	d100      	bne.n	800263c <HAL_RCC_OscConfig+0x2a4>
 800263a:	e0b5      	b.n	80027a8 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 800263c:	201f      	movs	r0, #31
 800263e:	183b      	adds	r3, r7, r0
 8002640:	2200      	movs	r2, #0
 8002642:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002644:	4b21      	ldr	r3, [pc, #132]	; (80026cc <HAL_RCC_OscConfig+0x334>)
 8002646:	69da      	ldr	r2, [r3, #28]
 8002648:	2380      	movs	r3, #128	; 0x80
 800264a:	055b      	lsls	r3, r3, #21
 800264c:	4013      	ands	r3, r2
 800264e:	d110      	bne.n	8002672 <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002650:	4b1e      	ldr	r3, [pc, #120]	; (80026cc <HAL_RCC_OscConfig+0x334>)
 8002652:	69da      	ldr	r2, [r3, #28]
 8002654:	4b1d      	ldr	r3, [pc, #116]	; (80026cc <HAL_RCC_OscConfig+0x334>)
 8002656:	2180      	movs	r1, #128	; 0x80
 8002658:	0549      	lsls	r1, r1, #21
 800265a:	430a      	orrs	r2, r1
 800265c:	61da      	str	r2, [r3, #28]
 800265e:	4b1b      	ldr	r3, [pc, #108]	; (80026cc <HAL_RCC_OscConfig+0x334>)
 8002660:	69da      	ldr	r2, [r3, #28]
 8002662:	2380      	movs	r3, #128	; 0x80
 8002664:	055b      	lsls	r3, r3, #21
 8002666:	4013      	ands	r3, r2
 8002668:	60fb      	str	r3, [r7, #12]
 800266a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800266c:	183b      	adds	r3, r7, r0
 800266e:	2201      	movs	r2, #1
 8002670:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002672:	4b19      	ldr	r3, [pc, #100]	; (80026d8 <HAL_RCC_OscConfig+0x340>)
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	2380      	movs	r3, #128	; 0x80
 8002678:	005b      	lsls	r3, r3, #1
 800267a:	4013      	ands	r3, r2
 800267c:	d11a      	bne.n	80026b4 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800267e:	4b16      	ldr	r3, [pc, #88]	; (80026d8 <HAL_RCC_OscConfig+0x340>)
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	4b15      	ldr	r3, [pc, #84]	; (80026d8 <HAL_RCC_OscConfig+0x340>)
 8002684:	2180      	movs	r1, #128	; 0x80
 8002686:	0049      	lsls	r1, r1, #1
 8002688:	430a      	orrs	r2, r1
 800268a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800268c:	f7fe fb16 	bl	8000cbc <HAL_GetTick>
 8002690:	0003      	movs	r3, r0
 8002692:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002694:	e008      	b.n	80026a8 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002696:	f7fe fb11 	bl	8000cbc <HAL_GetTick>
 800269a:	0002      	movs	r2, r0
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	2b64      	cmp	r3, #100	; 0x64
 80026a2:	d901      	bls.n	80026a8 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e186      	b.n	80029b6 <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026a8:	4b0b      	ldr	r3, [pc, #44]	; (80026d8 <HAL_RCC_OscConfig+0x340>)
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	2380      	movs	r3, #128	; 0x80
 80026ae:	005b      	lsls	r3, r3, #1
 80026b0:	4013      	ands	r3, r2
 80026b2:	d0f0      	beq.n	8002696 <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d10f      	bne.n	80026dc <HAL_RCC_OscConfig+0x344>
 80026bc:	4b03      	ldr	r3, [pc, #12]	; (80026cc <HAL_RCC_OscConfig+0x334>)
 80026be:	6a1a      	ldr	r2, [r3, #32]
 80026c0:	4b02      	ldr	r3, [pc, #8]	; (80026cc <HAL_RCC_OscConfig+0x334>)
 80026c2:	2101      	movs	r1, #1
 80026c4:	430a      	orrs	r2, r1
 80026c6:	621a      	str	r2, [r3, #32]
 80026c8:	e036      	b.n	8002738 <HAL_RCC_OscConfig+0x3a0>
 80026ca:	46c0      	nop			; (mov r8, r8)
 80026cc:	40021000 	.word	0x40021000
 80026d0:	fffeffff 	.word	0xfffeffff
 80026d4:	fffbffff 	.word	0xfffbffff
 80026d8:	40007000 	.word	0x40007000
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d10c      	bne.n	80026fe <HAL_RCC_OscConfig+0x366>
 80026e4:	4bb6      	ldr	r3, [pc, #728]	; (80029c0 <HAL_RCC_OscConfig+0x628>)
 80026e6:	6a1a      	ldr	r2, [r3, #32]
 80026e8:	4bb5      	ldr	r3, [pc, #724]	; (80029c0 <HAL_RCC_OscConfig+0x628>)
 80026ea:	2101      	movs	r1, #1
 80026ec:	438a      	bics	r2, r1
 80026ee:	621a      	str	r2, [r3, #32]
 80026f0:	4bb3      	ldr	r3, [pc, #716]	; (80029c0 <HAL_RCC_OscConfig+0x628>)
 80026f2:	6a1a      	ldr	r2, [r3, #32]
 80026f4:	4bb2      	ldr	r3, [pc, #712]	; (80029c0 <HAL_RCC_OscConfig+0x628>)
 80026f6:	2104      	movs	r1, #4
 80026f8:	438a      	bics	r2, r1
 80026fa:	621a      	str	r2, [r3, #32]
 80026fc:	e01c      	b.n	8002738 <HAL_RCC_OscConfig+0x3a0>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	2b05      	cmp	r3, #5
 8002704:	d10c      	bne.n	8002720 <HAL_RCC_OscConfig+0x388>
 8002706:	4bae      	ldr	r3, [pc, #696]	; (80029c0 <HAL_RCC_OscConfig+0x628>)
 8002708:	6a1a      	ldr	r2, [r3, #32]
 800270a:	4bad      	ldr	r3, [pc, #692]	; (80029c0 <HAL_RCC_OscConfig+0x628>)
 800270c:	2104      	movs	r1, #4
 800270e:	430a      	orrs	r2, r1
 8002710:	621a      	str	r2, [r3, #32]
 8002712:	4bab      	ldr	r3, [pc, #684]	; (80029c0 <HAL_RCC_OscConfig+0x628>)
 8002714:	6a1a      	ldr	r2, [r3, #32]
 8002716:	4baa      	ldr	r3, [pc, #680]	; (80029c0 <HAL_RCC_OscConfig+0x628>)
 8002718:	2101      	movs	r1, #1
 800271a:	430a      	orrs	r2, r1
 800271c:	621a      	str	r2, [r3, #32]
 800271e:	e00b      	b.n	8002738 <HAL_RCC_OscConfig+0x3a0>
 8002720:	4ba7      	ldr	r3, [pc, #668]	; (80029c0 <HAL_RCC_OscConfig+0x628>)
 8002722:	6a1a      	ldr	r2, [r3, #32]
 8002724:	4ba6      	ldr	r3, [pc, #664]	; (80029c0 <HAL_RCC_OscConfig+0x628>)
 8002726:	2101      	movs	r1, #1
 8002728:	438a      	bics	r2, r1
 800272a:	621a      	str	r2, [r3, #32]
 800272c:	4ba4      	ldr	r3, [pc, #656]	; (80029c0 <HAL_RCC_OscConfig+0x628>)
 800272e:	6a1a      	ldr	r2, [r3, #32]
 8002730:	4ba3      	ldr	r3, [pc, #652]	; (80029c0 <HAL_RCC_OscConfig+0x628>)
 8002732:	2104      	movs	r1, #4
 8002734:	438a      	bics	r2, r1
 8002736:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d014      	beq.n	800276a <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002740:	f7fe fabc 	bl	8000cbc <HAL_GetTick>
 8002744:	0003      	movs	r3, r0
 8002746:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002748:	e009      	b.n	800275e <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800274a:	f7fe fab7 	bl	8000cbc <HAL_GetTick>
 800274e:	0002      	movs	r2, r0
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	4a9b      	ldr	r2, [pc, #620]	; (80029c4 <HAL_RCC_OscConfig+0x62c>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d901      	bls.n	800275e <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e12b      	b.n	80029b6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800275e:	4b98      	ldr	r3, [pc, #608]	; (80029c0 <HAL_RCC_OscConfig+0x628>)
 8002760:	6a1b      	ldr	r3, [r3, #32]
 8002762:	2202      	movs	r2, #2
 8002764:	4013      	ands	r3, r2
 8002766:	d0f0      	beq.n	800274a <HAL_RCC_OscConfig+0x3b2>
 8002768:	e013      	b.n	8002792 <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800276a:	f7fe faa7 	bl	8000cbc <HAL_GetTick>
 800276e:	0003      	movs	r3, r0
 8002770:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002772:	e009      	b.n	8002788 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002774:	f7fe faa2 	bl	8000cbc <HAL_GetTick>
 8002778:	0002      	movs	r2, r0
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	4a91      	ldr	r2, [pc, #580]	; (80029c4 <HAL_RCC_OscConfig+0x62c>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d901      	bls.n	8002788 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	e116      	b.n	80029b6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002788:	4b8d      	ldr	r3, [pc, #564]	; (80029c0 <HAL_RCC_OscConfig+0x628>)
 800278a:	6a1b      	ldr	r3, [r3, #32]
 800278c:	2202      	movs	r2, #2
 800278e:	4013      	ands	r3, r2
 8002790:	d1f0      	bne.n	8002774 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002792:	231f      	movs	r3, #31
 8002794:	18fb      	adds	r3, r7, r3
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	2b01      	cmp	r3, #1
 800279a:	d105      	bne.n	80027a8 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800279c:	4b88      	ldr	r3, [pc, #544]	; (80029c0 <HAL_RCC_OscConfig+0x628>)
 800279e:	69da      	ldr	r2, [r3, #28]
 80027a0:	4b87      	ldr	r3, [pc, #540]	; (80029c0 <HAL_RCC_OscConfig+0x628>)
 80027a2:	4989      	ldr	r1, [pc, #548]	; (80029c8 <HAL_RCC_OscConfig+0x630>)
 80027a4:	400a      	ands	r2, r1
 80027a6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2210      	movs	r2, #16
 80027ae:	4013      	ands	r3, r2
 80027b0:	d063      	beq.n	800287a <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	695b      	ldr	r3, [r3, #20]
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d12a      	bne.n	8002810 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80027ba:	4b81      	ldr	r3, [pc, #516]	; (80029c0 <HAL_RCC_OscConfig+0x628>)
 80027bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027be:	4b80      	ldr	r3, [pc, #512]	; (80029c0 <HAL_RCC_OscConfig+0x628>)
 80027c0:	2104      	movs	r1, #4
 80027c2:	430a      	orrs	r2, r1
 80027c4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80027c6:	4b7e      	ldr	r3, [pc, #504]	; (80029c0 <HAL_RCC_OscConfig+0x628>)
 80027c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027ca:	4b7d      	ldr	r3, [pc, #500]	; (80029c0 <HAL_RCC_OscConfig+0x628>)
 80027cc:	2101      	movs	r1, #1
 80027ce:	430a      	orrs	r2, r1
 80027d0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027d2:	f7fe fa73 	bl	8000cbc <HAL_GetTick>
 80027d6:	0003      	movs	r3, r0
 80027d8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80027da:	e008      	b.n	80027ee <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80027dc:	f7fe fa6e 	bl	8000cbc <HAL_GetTick>
 80027e0:	0002      	movs	r2, r0
 80027e2:	69bb      	ldr	r3, [r7, #24]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e0e3      	b.n	80029b6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80027ee:	4b74      	ldr	r3, [pc, #464]	; (80029c0 <HAL_RCC_OscConfig+0x628>)
 80027f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027f2:	2202      	movs	r2, #2
 80027f4:	4013      	ands	r3, r2
 80027f6:	d0f1      	beq.n	80027dc <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80027f8:	4b71      	ldr	r3, [pc, #452]	; (80029c0 <HAL_RCC_OscConfig+0x628>)
 80027fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027fc:	22f8      	movs	r2, #248	; 0xf8
 80027fe:	4393      	bics	r3, r2
 8002800:	0019      	movs	r1, r3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	699b      	ldr	r3, [r3, #24]
 8002806:	00da      	lsls	r2, r3, #3
 8002808:	4b6d      	ldr	r3, [pc, #436]	; (80029c0 <HAL_RCC_OscConfig+0x628>)
 800280a:	430a      	orrs	r2, r1
 800280c:	635a      	str	r2, [r3, #52]	; 0x34
 800280e:	e034      	b.n	800287a <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	695b      	ldr	r3, [r3, #20]
 8002814:	3305      	adds	r3, #5
 8002816:	d111      	bne.n	800283c <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002818:	4b69      	ldr	r3, [pc, #420]	; (80029c0 <HAL_RCC_OscConfig+0x628>)
 800281a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800281c:	4b68      	ldr	r3, [pc, #416]	; (80029c0 <HAL_RCC_OscConfig+0x628>)
 800281e:	2104      	movs	r1, #4
 8002820:	438a      	bics	r2, r1
 8002822:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002824:	4b66      	ldr	r3, [pc, #408]	; (80029c0 <HAL_RCC_OscConfig+0x628>)
 8002826:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002828:	22f8      	movs	r2, #248	; 0xf8
 800282a:	4393      	bics	r3, r2
 800282c:	0019      	movs	r1, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	699b      	ldr	r3, [r3, #24]
 8002832:	00da      	lsls	r2, r3, #3
 8002834:	4b62      	ldr	r3, [pc, #392]	; (80029c0 <HAL_RCC_OscConfig+0x628>)
 8002836:	430a      	orrs	r2, r1
 8002838:	635a      	str	r2, [r3, #52]	; 0x34
 800283a:	e01e      	b.n	800287a <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800283c:	4b60      	ldr	r3, [pc, #384]	; (80029c0 <HAL_RCC_OscConfig+0x628>)
 800283e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002840:	4b5f      	ldr	r3, [pc, #380]	; (80029c0 <HAL_RCC_OscConfig+0x628>)
 8002842:	2104      	movs	r1, #4
 8002844:	430a      	orrs	r2, r1
 8002846:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002848:	4b5d      	ldr	r3, [pc, #372]	; (80029c0 <HAL_RCC_OscConfig+0x628>)
 800284a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800284c:	4b5c      	ldr	r3, [pc, #368]	; (80029c0 <HAL_RCC_OscConfig+0x628>)
 800284e:	2101      	movs	r1, #1
 8002850:	438a      	bics	r2, r1
 8002852:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002854:	f7fe fa32 	bl	8000cbc <HAL_GetTick>
 8002858:	0003      	movs	r3, r0
 800285a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800285c:	e008      	b.n	8002870 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800285e:	f7fe fa2d 	bl	8000cbc <HAL_GetTick>
 8002862:	0002      	movs	r2, r0
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	2b02      	cmp	r3, #2
 800286a:	d901      	bls.n	8002870 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	e0a2      	b.n	80029b6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002870:	4b53      	ldr	r3, [pc, #332]	; (80029c0 <HAL_RCC_OscConfig+0x628>)
 8002872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002874:	2202      	movs	r2, #2
 8002876:	4013      	ands	r3, r2
 8002878:	d1f1      	bne.n	800285e <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a1b      	ldr	r3, [r3, #32]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d100      	bne.n	8002884 <HAL_RCC_OscConfig+0x4ec>
 8002882:	e097      	b.n	80029b4 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002884:	4b4e      	ldr	r3, [pc, #312]	; (80029c0 <HAL_RCC_OscConfig+0x628>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	220c      	movs	r2, #12
 800288a:	4013      	ands	r3, r2
 800288c:	2b08      	cmp	r3, #8
 800288e:	d100      	bne.n	8002892 <HAL_RCC_OscConfig+0x4fa>
 8002890:	e06b      	b.n	800296a <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a1b      	ldr	r3, [r3, #32]
 8002896:	2b02      	cmp	r3, #2
 8002898:	d14c      	bne.n	8002934 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800289a:	4b49      	ldr	r3, [pc, #292]	; (80029c0 <HAL_RCC_OscConfig+0x628>)
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	4b48      	ldr	r3, [pc, #288]	; (80029c0 <HAL_RCC_OscConfig+0x628>)
 80028a0:	494a      	ldr	r1, [pc, #296]	; (80029cc <HAL_RCC_OscConfig+0x634>)
 80028a2:	400a      	ands	r2, r1
 80028a4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a6:	f7fe fa09 	bl	8000cbc <HAL_GetTick>
 80028aa:	0003      	movs	r3, r0
 80028ac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028ae:	e008      	b.n	80028c2 <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028b0:	f7fe fa04 	bl	8000cbc <HAL_GetTick>
 80028b4:	0002      	movs	r2, r0
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e079      	b.n	80029b6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028c2:	4b3f      	ldr	r3, [pc, #252]	; (80029c0 <HAL_RCC_OscConfig+0x628>)
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	2380      	movs	r3, #128	; 0x80
 80028c8:	049b      	lsls	r3, r3, #18
 80028ca:	4013      	ands	r3, r2
 80028cc:	d1f0      	bne.n	80028b0 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028ce:	4b3c      	ldr	r3, [pc, #240]	; (80029c0 <HAL_RCC_OscConfig+0x628>)
 80028d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d2:	220f      	movs	r2, #15
 80028d4:	4393      	bics	r3, r2
 80028d6:	0019      	movs	r1, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028dc:	4b38      	ldr	r3, [pc, #224]	; (80029c0 <HAL_RCC_OscConfig+0x628>)
 80028de:	430a      	orrs	r2, r1
 80028e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80028e2:	4b37      	ldr	r3, [pc, #220]	; (80029c0 <HAL_RCC_OscConfig+0x628>)
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	4a3a      	ldr	r2, [pc, #232]	; (80029d0 <HAL_RCC_OscConfig+0x638>)
 80028e8:	4013      	ands	r3, r2
 80028ea:	0019      	movs	r1, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f4:	431a      	orrs	r2, r3
 80028f6:	4b32      	ldr	r3, [pc, #200]	; (80029c0 <HAL_RCC_OscConfig+0x628>)
 80028f8:	430a      	orrs	r2, r1
 80028fa:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028fc:	4b30      	ldr	r3, [pc, #192]	; (80029c0 <HAL_RCC_OscConfig+0x628>)
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	4b2f      	ldr	r3, [pc, #188]	; (80029c0 <HAL_RCC_OscConfig+0x628>)
 8002902:	2180      	movs	r1, #128	; 0x80
 8002904:	0449      	lsls	r1, r1, #17
 8002906:	430a      	orrs	r2, r1
 8002908:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800290a:	f7fe f9d7 	bl	8000cbc <HAL_GetTick>
 800290e:	0003      	movs	r3, r0
 8002910:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002912:	e008      	b.n	8002926 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002914:	f7fe f9d2 	bl	8000cbc <HAL_GetTick>
 8002918:	0002      	movs	r2, r0
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	2b02      	cmp	r3, #2
 8002920:	d901      	bls.n	8002926 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e047      	b.n	80029b6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002926:	4b26      	ldr	r3, [pc, #152]	; (80029c0 <HAL_RCC_OscConfig+0x628>)
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	2380      	movs	r3, #128	; 0x80
 800292c:	049b      	lsls	r3, r3, #18
 800292e:	4013      	ands	r3, r2
 8002930:	d0f0      	beq.n	8002914 <HAL_RCC_OscConfig+0x57c>
 8002932:	e03f      	b.n	80029b4 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002934:	4b22      	ldr	r3, [pc, #136]	; (80029c0 <HAL_RCC_OscConfig+0x628>)
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	4b21      	ldr	r3, [pc, #132]	; (80029c0 <HAL_RCC_OscConfig+0x628>)
 800293a:	4924      	ldr	r1, [pc, #144]	; (80029cc <HAL_RCC_OscConfig+0x634>)
 800293c:	400a      	ands	r2, r1
 800293e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002940:	f7fe f9bc 	bl	8000cbc <HAL_GetTick>
 8002944:	0003      	movs	r3, r0
 8002946:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002948:	e008      	b.n	800295c <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800294a:	f7fe f9b7 	bl	8000cbc <HAL_GetTick>
 800294e:	0002      	movs	r2, r0
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	2b02      	cmp	r3, #2
 8002956:	d901      	bls.n	800295c <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8002958:	2303      	movs	r3, #3
 800295a:	e02c      	b.n	80029b6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800295c:	4b18      	ldr	r3, [pc, #96]	; (80029c0 <HAL_RCC_OscConfig+0x628>)
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	2380      	movs	r3, #128	; 0x80
 8002962:	049b      	lsls	r3, r3, #18
 8002964:	4013      	ands	r3, r2
 8002966:	d1f0      	bne.n	800294a <HAL_RCC_OscConfig+0x5b2>
 8002968:	e024      	b.n	80029b4 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a1b      	ldr	r3, [r3, #32]
 800296e:	2b01      	cmp	r3, #1
 8002970:	d101      	bne.n	8002976 <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e01f      	b.n	80029b6 <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002976:	4b12      	ldr	r3, [pc, #72]	; (80029c0 <HAL_RCC_OscConfig+0x628>)
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800297c:	4b10      	ldr	r3, [pc, #64]	; (80029c0 <HAL_RCC_OscConfig+0x628>)
 800297e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002980:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002982:	697a      	ldr	r2, [r7, #20]
 8002984:	23c0      	movs	r3, #192	; 0xc0
 8002986:	025b      	lsls	r3, r3, #9
 8002988:	401a      	ands	r2, r3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298e:	429a      	cmp	r2, r3
 8002990:	d10e      	bne.n	80029b0 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	220f      	movs	r2, #15
 8002996:	401a      	ands	r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800299c:	429a      	cmp	r2, r3
 800299e:	d107      	bne.n	80029b0 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80029a0:	697a      	ldr	r2, [r7, #20]
 80029a2:	23f0      	movs	r3, #240	; 0xf0
 80029a4:	039b      	lsls	r3, r3, #14
 80029a6:	401a      	ands	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d001      	beq.n	80029b4 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e000      	b.n	80029b6 <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	0018      	movs	r0, r3
 80029b8:	46bd      	mov	sp, r7
 80029ba:	b008      	add	sp, #32
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	46c0      	nop			; (mov r8, r8)
 80029c0:	40021000 	.word	0x40021000
 80029c4:	00001388 	.word	0x00001388
 80029c8:	efffffff 	.word	0xefffffff
 80029cc:	feffffff 	.word	0xfeffffff
 80029d0:	ffc27fff 	.word	0xffc27fff

080029d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d101      	bne.n	80029e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e0b3      	b.n	8002b50 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029e8:	4b5b      	ldr	r3, [pc, #364]	; (8002b58 <HAL_RCC_ClockConfig+0x184>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2201      	movs	r2, #1
 80029ee:	4013      	ands	r3, r2
 80029f0:	683a      	ldr	r2, [r7, #0]
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d911      	bls.n	8002a1a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029f6:	4b58      	ldr	r3, [pc, #352]	; (8002b58 <HAL_RCC_ClockConfig+0x184>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	2201      	movs	r2, #1
 80029fc:	4393      	bics	r3, r2
 80029fe:	0019      	movs	r1, r3
 8002a00:	4b55      	ldr	r3, [pc, #340]	; (8002b58 <HAL_RCC_ClockConfig+0x184>)
 8002a02:	683a      	ldr	r2, [r7, #0]
 8002a04:	430a      	orrs	r2, r1
 8002a06:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a08:	4b53      	ldr	r3, [pc, #332]	; (8002b58 <HAL_RCC_ClockConfig+0x184>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	4013      	ands	r3, r2
 8002a10:	683a      	ldr	r2, [r7, #0]
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d001      	beq.n	8002a1a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e09a      	b.n	8002b50 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	2202      	movs	r2, #2
 8002a20:	4013      	ands	r3, r2
 8002a22:	d015      	beq.n	8002a50 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2204      	movs	r2, #4
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	d006      	beq.n	8002a3c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002a2e:	4b4b      	ldr	r3, [pc, #300]	; (8002b5c <HAL_RCC_ClockConfig+0x188>)
 8002a30:	685a      	ldr	r2, [r3, #4]
 8002a32:	4b4a      	ldr	r3, [pc, #296]	; (8002b5c <HAL_RCC_ClockConfig+0x188>)
 8002a34:	21e0      	movs	r1, #224	; 0xe0
 8002a36:	00c9      	lsls	r1, r1, #3
 8002a38:	430a      	orrs	r2, r1
 8002a3a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a3c:	4b47      	ldr	r3, [pc, #284]	; (8002b5c <HAL_RCC_ClockConfig+0x188>)
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	22f0      	movs	r2, #240	; 0xf0
 8002a42:	4393      	bics	r3, r2
 8002a44:	0019      	movs	r1, r3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	689a      	ldr	r2, [r3, #8]
 8002a4a:	4b44      	ldr	r3, [pc, #272]	; (8002b5c <HAL_RCC_ClockConfig+0x188>)
 8002a4c:	430a      	orrs	r2, r1
 8002a4e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2201      	movs	r2, #1
 8002a56:	4013      	ands	r3, r2
 8002a58:	d040      	beq.n	8002adc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d107      	bne.n	8002a72 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a62:	4b3e      	ldr	r3, [pc, #248]	; (8002b5c <HAL_RCC_ClockConfig+0x188>)
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	2380      	movs	r3, #128	; 0x80
 8002a68:	029b      	lsls	r3, r3, #10
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	d114      	bne.n	8002a98 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e06e      	b.n	8002b50 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d107      	bne.n	8002a8a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a7a:	4b38      	ldr	r3, [pc, #224]	; (8002b5c <HAL_RCC_ClockConfig+0x188>)
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	2380      	movs	r3, #128	; 0x80
 8002a80:	049b      	lsls	r3, r3, #18
 8002a82:	4013      	ands	r3, r2
 8002a84:	d108      	bne.n	8002a98 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e062      	b.n	8002b50 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a8a:	4b34      	ldr	r3, [pc, #208]	; (8002b5c <HAL_RCC_ClockConfig+0x188>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	2202      	movs	r2, #2
 8002a90:	4013      	ands	r3, r2
 8002a92:	d101      	bne.n	8002a98 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e05b      	b.n	8002b50 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a98:	4b30      	ldr	r3, [pc, #192]	; (8002b5c <HAL_RCC_ClockConfig+0x188>)
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	2203      	movs	r2, #3
 8002a9e:	4393      	bics	r3, r2
 8002aa0:	0019      	movs	r1, r3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685a      	ldr	r2, [r3, #4]
 8002aa6:	4b2d      	ldr	r3, [pc, #180]	; (8002b5c <HAL_RCC_ClockConfig+0x188>)
 8002aa8:	430a      	orrs	r2, r1
 8002aaa:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002aac:	f7fe f906 	bl	8000cbc <HAL_GetTick>
 8002ab0:	0003      	movs	r3, r0
 8002ab2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ab4:	e009      	b.n	8002aca <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ab6:	f7fe f901 	bl	8000cbc <HAL_GetTick>
 8002aba:	0002      	movs	r2, r0
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	4a27      	ldr	r2, [pc, #156]	; (8002b60 <HAL_RCC_ClockConfig+0x18c>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e042      	b.n	8002b50 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aca:	4b24      	ldr	r3, [pc, #144]	; (8002b5c <HAL_RCC_ClockConfig+0x188>)
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	220c      	movs	r2, #12
 8002ad0:	401a      	ands	r2, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d1ec      	bne.n	8002ab6 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002adc:	4b1e      	ldr	r3, [pc, #120]	; (8002b58 <HAL_RCC_ClockConfig+0x184>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	683a      	ldr	r2, [r7, #0]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d211      	bcs.n	8002b0e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aea:	4b1b      	ldr	r3, [pc, #108]	; (8002b58 <HAL_RCC_ClockConfig+0x184>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	2201      	movs	r2, #1
 8002af0:	4393      	bics	r3, r2
 8002af2:	0019      	movs	r1, r3
 8002af4:	4b18      	ldr	r3, [pc, #96]	; (8002b58 <HAL_RCC_ClockConfig+0x184>)
 8002af6:	683a      	ldr	r2, [r7, #0]
 8002af8:	430a      	orrs	r2, r1
 8002afa:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002afc:	4b16      	ldr	r3, [pc, #88]	; (8002b58 <HAL_RCC_ClockConfig+0x184>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2201      	movs	r2, #1
 8002b02:	4013      	ands	r3, r2
 8002b04:	683a      	ldr	r2, [r7, #0]
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d001      	beq.n	8002b0e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e020      	b.n	8002b50 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	2204      	movs	r2, #4
 8002b14:	4013      	ands	r3, r2
 8002b16:	d009      	beq.n	8002b2c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002b18:	4b10      	ldr	r3, [pc, #64]	; (8002b5c <HAL_RCC_ClockConfig+0x188>)
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	4a11      	ldr	r2, [pc, #68]	; (8002b64 <HAL_RCC_ClockConfig+0x190>)
 8002b1e:	4013      	ands	r3, r2
 8002b20:	0019      	movs	r1, r3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	68da      	ldr	r2, [r3, #12]
 8002b26:	4b0d      	ldr	r3, [pc, #52]	; (8002b5c <HAL_RCC_ClockConfig+0x188>)
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002b2c:	f000 f820 	bl	8002b70 <HAL_RCC_GetSysClockFreq>
 8002b30:	0001      	movs	r1, r0
 8002b32:	4b0a      	ldr	r3, [pc, #40]	; (8002b5c <HAL_RCC_ClockConfig+0x188>)
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	091b      	lsrs	r3, r3, #4
 8002b38:	220f      	movs	r2, #15
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	4a0a      	ldr	r2, [pc, #40]	; (8002b68 <HAL_RCC_ClockConfig+0x194>)
 8002b3e:	5cd3      	ldrb	r3, [r2, r3]
 8002b40:	000a      	movs	r2, r1
 8002b42:	40da      	lsrs	r2, r3
 8002b44:	4b09      	ldr	r3, [pc, #36]	; (8002b6c <HAL_RCC_ClockConfig+0x198>)
 8002b46:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002b48:	2003      	movs	r0, #3
 8002b4a:	f7fe f871 	bl	8000c30 <HAL_InitTick>
  
  return HAL_OK;
 8002b4e:	2300      	movs	r3, #0
}
 8002b50:	0018      	movs	r0, r3
 8002b52:	46bd      	mov	sp, r7
 8002b54:	b004      	add	sp, #16
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	40022000 	.word	0x40022000
 8002b5c:	40021000 	.word	0x40021000
 8002b60:	00001388 	.word	0x00001388
 8002b64:	fffff8ff 	.word	0xfffff8ff
 8002b68:	08004d58 	.word	0x08004d58
 8002b6c:	20000000 	.word	0x20000000

08002b70 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b70:	b590      	push	{r4, r7, lr}
 8002b72:	b08f      	sub	sp, #60	; 0x3c
 8002b74:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002b76:	2314      	movs	r3, #20
 8002b78:	18fb      	adds	r3, r7, r3
 8002b7a:	4a2c      	ldr	r2, [pc, #176]	; (8002c2c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b7c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002b7e:	c313      	stmia	r3!, {r0, r1, r4}
 8002b80:	6812      	ldr	r2, [r2, #0]
 8002b82:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002b84:	1d3b      	adds	r3, r7, #4
 8002b86:	4a2a      	ldr	r2, [pc, #168]	; (8002c30 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b88:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002b8a:	c313      	stmia	r3!, {r0, r1, r4}
 8002b8c:	6812      	ldr	r2, [r2, #0]
 8002b8e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b90:	2300      	movs	r3, #0
 8002b92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b94:	2300      	movs	r3, #0
 8002b96:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b98:	2300      	movs	r3, #0
 8002b9a:	637b      	str	r3, [r7, #52]	; 0x34
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002ba4:	4b23      	ldr	r3, [pc, #140]	; (8002c34 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bac:	220c      	movs	r2, #12
 8002bae:	4013      	ands	r3, r2
 8002bb0:	2b04      	cmp	r3, #4
 8002bb2:	d002      	beq.n	8002bba <HAL_RCC_GetSysClockFreq+0x4a>
 8002bb4:	2b08      	cmp	r3, #8
 8002bb6:	d003      	beq.n	8002bc0 <HAL_RCC_GetSysClockFreq+0x50>
 8002bb8:	e02f      	b.n	8002c1a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002bba:	4b1f      	ldr	r3, [pc, #124]	; (8002c38 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002bbc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002bbe:	e02f      	b.n	8002c20 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bc2:	0c9b      	lsrs	r3, r3, #18
 8002bc4:	220f      	movs	r2, #15
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	2214      	movs	r2, #20
 8002bca:	18ba      	adds	r2, r7, r2
 8002bcc:	5cd3      	ldrb	r3, [r2, r3]
 8002bce:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002bd0:	4b18      	ldr	r3, [pc, #96]	; (8002c34 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd4:	220f      	movs	r2, #15
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	1d3a      	adds	r2, r7, #4
 8002bda:	5cd3      	ldrb	r3, [r2, r3]
 8002bdc:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002bde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002be0:	23c0      	movs	r3, #192	; 0xc0
 8002be2:	025b      	lsls	r3, r3, #9
 8002be4:	401a      	ands	r2, r3
 8002be6:	2380      	movs	r3, #128	; 0x80
 8002be8:	025b      	lsls	r3, r3, #9
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d109      	bne.n	8002c02 <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002bee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002bf0:	4811      	ldr	r0, [pc, #68]	; (8002c38 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002bf2:	f7fd fa93 	bl	800011c <__udivsi3>
 8002bf6:	0003      	movs	r3, r0
 8002bf8:	001a      	movs	r2, r3
 8002bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfc:	4353      	muls	r3, r2
 8002bfe:	637b      	str	r3, [r7, #52]	; 0x34
 8002c00:	e008      	b.n	8002c14 <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002c02:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c04:	480c      	ldr	r0, [pc, #48]	; (8002c38 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002c06:	f7fd fa89 	bl	800011c <__udivsi3>
 8002c0a:	0003      	movs	r3, r0
 8002c0c:	001a      	movs	r2, r3
 8002c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c10:	4353      	muls	r3, r2
 8002c12:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c16:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002c18:	e002      	b.n	8002c20 <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c1a:	4b07      	ldr	r3, [pc, #28]	; (8002c38 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002c1c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002c1e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002c22:	0018      	movs	r0, r3
 8002c24:	46bd      	mov	sp, r7
 8002c26:	b00f      	add	sp, #60	; 0x3c
 8002c28:	bd90      	pop	{r4, r7, pc}
 8002c2a:	46c0      	nop			; (mov r8, r8)
 8002c2c:	08004d38 	.word	0x08004d38
 8002c30:	08004d48 	.word	0x08004d48
 8002c34:	40021000 	.word	0x40021000
 8002c38:	007a1200 	.word	0x007a1200

08002c3c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b086      	sub	sp, #24
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c44:	2300      	movs	r3, #0
 8002c46:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	2380      	movs	r3, #128	; 0x80
 8002c52:	025b      	lsls	r3, r3, #9
 8002c54:	4013      	ands	r3, r2
 8002c56:	d100      	bne.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002c58:	e08e      	b.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002c5a:	2017      	movs	r0, #23
 8002c5c:	183b      	adds	r3, r7, r0
 8002c5e:	2200      	movs	r2, #0
 8002c60:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c62:	4b5f      	ldr	r3, [pc, #380]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002c64:	69da      	ldr	r2, [r3, #28]
 8002c66:	2380      	movs	r3, #128	; 0x80
 8002c68:	055b      	lsls	r3, r3, #21
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	d110      	bne.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c6e:	4b5c      	ldr	r3, [pc, #368]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002c70:	69da      	ldr	r2, [r3, #28]
 8002c72:	4b5b      	ldr	r3, [pc, #364]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002c74:	2180      	movs	r1, #128	; 0x80
 8002c76:	0549      	lsls	r1, r1, #21
 8002c78:	430a      	orrs	r2, r1
 8002c7a:	61da      	str	r2, [r3, #28]
 8002c7c:	4b58      	ldr	r3, [pc, #352]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002c7e:	69da      	ldr	r2, [r3, #28]
 8002c80:	2380      	movs	r3, #128	; 0x80
 8002c82:	055b      	lsls	r3, r3, #21
 8002c84:	4013      	ands	r3, r2
 8002c86:	60bb      	str	r3, [r7, #8]
 8002c88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c8a:	183b      	adds	r3, r7, r0
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c90:	4b54      	ldr	r3, [pc, #336]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	2380      	movs	r3, #128	; 0x80
 8002c96:	005b      	lsls	r3, r3, #1
 8002c98:	4013      	ands	r3, r2
 8002c9a:	d11a      	bne.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c9c:	4b51      	ldr	r3, [pc, #324]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	4b50      	ldr	r3, [pc, #320]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002ca2:	2180      	movs	r1, #128	; 0x80
 8002ca4:	0049      	lsls	r1, r1, #1
 8002ca6:	430a      	orrs	r2, r1
 8002ca8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002caa:	f7fe f807 	bl	8000cbc <HAL_GetTick>
 8002cae:	0003      	movs	r3, r0
 8002cb0:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cb2:	e008      	b.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cb4:	f7fe f802 	bl	8000cbc <HAL_GetTick>
 8002cb8:	0002      	movs	r2, r0
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	2b64      	cmp	r3, #100	; 0x64
 8002cc0:	d901      	bls.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e087      	b.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cc6:	4b47      	ldr	r3, [pc, #284]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	2380      	movs	r3, #128	; 0x80
 8002ccc:	005b      	lsls	r3, r3, #1
 8002cce:	4013      	ands	r3, r2
 8002cd0:	d0f0      	beq.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002cd2:	4b43      	ldr	r3, [pc, #268]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002cd4:	6a1a      	ldr	r2, [r3, #32]
 8002cd6:	23c0      	movs	r3, #192	; 0xc0
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	4013      	ands	r3, r2
 8002cdc:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d034      	beq.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	685a      	ldr	r2, [r3, #4]
 8002ce8:	23c0      	movs	r3, #192	; 0xc0
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	4013      	ands	r3, r2
 8002cee:	68fa      	ldr	r2, [r7, #12]
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d02c      	beq.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002cf4:	4b3a      	ldr	r3, [pc, #232]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002cf6:	6a1b      	ldr	r3, [r3, #32]
 8002cf8:	4a3b      	ldr	r2, [pc, #236]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002cfe:	4b38      	ldr	r3, [pc, #224]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002d00:	6a1a      	ldr	r2, [r3, #32]
 8002d02:	4b37      	ldr	r3, [pc, #220]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002d04:	2180      	movs	r1, #128	; 0x80
 8002d06:	0249      	lsls	r1, r1, #9
 8002d08:	430a      	orrs	r2, r1
 8002d0a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d0c:	4b34      	ldr	r3, [pc, #208]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002d0e:	6a1a      	ldr	r2, [r3, #32]
 8002d10:	4b33      	ldr	r3, [pc, #204]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002d12:	4936      	ldr	r1, [pc, #216]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002d14:	400a      	ands	r2, r1
 8002d16:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002d18:	4b31      	ldr	r3, [pc, #196]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002d1a:	68fa      	ldr	r2, [r7, #12]
 8002d1c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2201      	movs	r2, #1
 8002d22:	4013      	ands	r3, r2
 8002d24:	d013      	beq.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d26:	f7fd ffc9 	bl	8000cbc <HAL_GetTick>
 8002d2a:	0003      	movs	r3, r0
 8002d2c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d2e:	e009      	b.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d30:	f7fd ffc4 	bl	8000cbc <HAL_GetTick>
 8002d34:	0002      	movs	r2, r0
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	4a2d      	ldr	r2, [pc, #180]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d901      	bls.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	e048      	b.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d44:	4b26      	ldr	r3, [pc, #152]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002d46:	6a1b      	ldr	r3, [r3, #32]
 8002d48:	2202      	movs	r2, #2
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	d0f0      	beq.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d4e:	4b24      	ldr	r3, [pc, #144]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002d50:	6a1b      	ldr	r3, [r3, #32]
 8002d52:	4a25      	ldr	r2, [pc, #148]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d54:	4013      	ands	r3, r2
 8002d56:	0019      	movs	r1, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685a      	ldr	r2, [r3, #4]
 8002d5c:	4b20      	ldr	r3, [pc, #128]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002d5e:	430a      	orrs	r2, r1
 8002d60:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d62:	2317      	movs	r3, #23
 8002d64:	18fb      	adds	r3, r7, r3
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d105      	bne.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d6c:	4b1c      	ldr	r3, [pc, #112]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002d6e:	69da      	ldr	r2, [r3, #28]
 8002d70:	4b1b      	ldr	r3, [pc, #108]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002d72:	4920      	ldr	r1, [pc, #128]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002d74:	400a      	ands	r2, r1
 8002d76:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	4013      	ands	r3, r2
 8002d80:	d009      	beq.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d82:	4b17      	ldr	r3, [pc, #92]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d86:	2203      	movs	r2, #3
 8002d88:	4393      	bics	r3, r2
 8002d8a:	0019      	movs	r1, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689a      	ldr	r2, [r3, #8]
 8002d90:	4b13      	ldr	r3, [pc, #76]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002d92:	430a      	orrs	r2, r1
 8002d94:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2220      	movs	r2, #32
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	d009      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002da0:	4b0f      	ldr	r3, [pc, #60]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da4:	2210      	movs	r2, #16
 8002da6:	4393      	bics	r3, r2
 8002da8:	0019      	movs	r1, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	68da      	ldr	r2, [r3, #12]
 8002dae:	4b0c      	ldr	r3, [pc, #48]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002db0:	430a      	orrs	r2, r1
 8002db2:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	2380      	movs	r3, #128	; 0x80
 8002dba:	029b      	lsls	r3, r3, #10
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	d009      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002dc0:	4b07      	ldr	r3, [pc, #28]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc4:	2280      	movs	r2, #128	; 0x80
 8002dc6:	4393      	bics	r3, r2
 8002dc8:	0019      	movs	r1, r3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	691a      	ldr	r2, [r3, #16]
 8002dce:	4b04      	ldr	r3, [pc, #16]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002dd0:	430a      	orrs	r2, r1
 8002dd2:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	0018      	movs	r0, r3
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	b006      	add	sp, #24
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	46c0      	nop			; (mov r8, r8)
 8002de0:	40021000 	.word	0x40021000
 8002de4:	40007000 	.word	0x40007000
 8002de8:	fffffcff 	.word	0xfffffcff
 8002dec:	fffeffff 	.word	0xfffeffff
 8002df0:	00001388 	.word	0x00001388
 8002df4:	efffffff 	.word	0xefffffff

08002df8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d101      	bne.n	8002e0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e042      	b.n	8002e90 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	223d      	movs	r2, #61	; 0x3d
 8002e0e:	5c9b      	ldrb	r3, [r3, r2]
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d107      	bne.n	8002e26 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	223c      	movs	r2, #60	; 0x3c
 8002e1a:	2100      	movs	r1, #0
 8002e1c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	0018      	movs	r0, r3
 8002e22:	f7fd fe13 	bl	8000a4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	223d      	movs	r2, #61	; 0x3d
 8002e2a:	2102      	movs	r1, #2
 8002e2c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	3304      	adds	r3, #4
 8002e36:	0019      	movs	r1, r3
 8002e38:	0010      	movs	r0, r2
 8002e3a:	f000 fad1 	bl	80033e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2246      	movs	r2, #70	; 0x46
 8002e42:	2101      	movs	r1, #1
 8002e44:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	223e      	movs	r2, #62	; 0x3e
 8002e4a:	2101      	movs	r1, #1
 8002e4c:	5499      	strb	r1, [r3, r2]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	223f      	movs	r2, #63	; 0x3f
 8002e52:	2101      	movs	r1, #1
 8002e54:	5499      	strb	r1, [r3, r2]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2240      	movs	r2, #64	; 0x40
 8002e5a:	2101      	movs	r1, #1
 8002e5c:	5499      	strb	r1, [r3, r2]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2241      	movs	r2, #65	; 0x41
 8002e62:	2101      	movs	r1, #1
 8002e64:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2242      	movs	r2, #66	; 0x42
 8002e6a:	2101      	movs	r1, #1
 8002e6c:	5499      	strb	r1, [r3, r2]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2243      	movs	r2, #67	; 0x43
 8002e72:	2101      	movs	r1, #1
 8002e74:	5499      	strb	r1, [r3, r2]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2244      	movs	r2, #68	; 0x44
 8002e7a:	2101      	movs	r1, #1
 8002e7c:	5499      	strb	r1, [r3, r2]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2245      	movs	r2, #69	; 0x45
 8002e82:	2101      	movs	r1, #1
 8002e84:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	223d      	movs	r2, #61	; 0x3d
 8002e8a:	2101      	movs	r1, #1
 8002e8c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e8e:	2300      	movs	r3, #0
}
 8002e90:	0018      	movs	r0, r3
 8002e92:	46bd      	mov	sp, r7
 8002e94:	b002      	add	sp, #8
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d101      	bne.n	8002eaa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e042      	b.n	8002f30 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	223d      	movs	r2, #61	; 0x3d
 8002eae:	5c9b      	ldrb	r3, [r3, r2]
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d107      	bne.n	8002ec6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	223c      	movs	r2, #60	; 0x3c
 8002eba:	2100      	movs	r1, #0
 8002ebc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	0018      	movs	r0, r3
 8002ec2:	f000 f839 	bl	8002f38 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	223d      	movs	r2, #61	; 0x3d
 8002eca:	2102      	movs	r1, #2
 8002ecc:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	3304      	adds	r3, #4
 8002ed6:	0019      	movs	r1, r3
 8002ed8:	0010      	movs	r0, r2
 8002eda:	f000 fa81 	bl	80033e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2246      	movs	r2, #70	; 0x46
 8002ee2:	2101      	movs	r1, #1
 8002ee4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	223e      	movs	r2, #62	; 0x3e
 8002eea:	2101      	movs	r1, #1
 8002eec:	5499      	strb	r1, [r3, r2]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	223f      	movs	r2, #63	; 0x3f
 8002ef2:	2101      	movs	r1, #1
 8002ef4:	5499      	strb	r1, [r3, r2]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2240      	movs	r2, #64	; 0x40
 8002efa:	2101      	movs	r1, #1
 8002efc:	5499      	strb	r1, [r3, r2]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2241      	movs	r2, #65	; 0x41
 8002f02:	2101      	movs	r1, #1
 8002f04:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2242      	movs	r2, #66	; 0x42
 8002f0a:	2101      	movs	r1, #1
 8002f0c:	5499      	strb	r1, [r3, r2]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2243      	movs	r2, #67	; 0x43
 8002f12:	2101      	movs	r1, #1
 8002f14:	5499      	strb	r1, [r3, r2]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2244      	movs	r2, #68	; 0x44
 8002f1a:	2101      	movs	r1, #1
 8002f1c:	5499      	strb	r1, [r3, r2]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2245      	movs	r2, #69	; 0x45
 8002f22:	2101      	movs	r1, #1
 8002f24:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	223d      	movs	r2, #61	; 0x3d
 8002f2a:	2101      	movs	r1, #1
 8002f2c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f2e:	2300      	movs	r3, #0
}
 8002f30:	0018      	movs	r0, r3
 8002f32:	46bd      	mov	sp, r7
 8002f34:	b002      	add	sp, #8
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002f40:	46c0      	nop			; (mov r8, r8)
 8002f42:	46bd      	mov	sp, r7
 8002f44:	b002      	add	sp, #8
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d108      	bne.n	8002f6a <HAL_TIM_PWM_Start+0x22>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	223e      	movs	r2, #62	; 0x3e
 8002f5c:	5c9b      	ldrb	r3, [r3, r2]
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	3b01      	subs	r3, #1
 8002f62:	1e5a      	subs	r2, r3, #1
 8002f64:	4193      	sbcs	r3, r2
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	e01f      	b.n	8002faa <HAL_TIM_PWM_Start+0x62>
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	2b04      	cmp	r3, #4
 8002f6e:	d108      	bne.n	8002f82 <HAL_TIM_PWM_Start+0x3a>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	223f      	movs	r2, #63	; 0x3f
 8002f74:	5c9b      	ldrb	r3, [r3, r2]
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	3b01      	subs	r3, #1
 8002f7a:	1e5a      	subs	r2, r3, #1
 8002f7c:	4193      	sbcs	r3, r2
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	e013      	b.n	8002faa <HAL_TIM_PWM_Start+0x62>
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	2b08      	cmp	r3, #8
 8002f86:	d108      	bne.n	8002f9a <HAL_TIM_PWM_Start+0x52>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2240      	movs	r2, #64	; 0x40
 8002f8c:	5c9b      	ldrb	r3, [r3, r2]
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	3b01      	subs	r3, #1
 8002f92:	1e5a      	subs	r2, r3, #1
 8002f94:	4193      	sbcs	r3, r2
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	e007      	b.n	8002faa <HAL_TIM_PWM_Start+0x62>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2241      	movs	r2, #65	; 0x41
 8002f9e:	5c9b      	ldrb	r3, [r3, r2]
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	3b01      	subs	r3, #1
 8002fa4:	1e5a      	subs	r2, r3, #1
 8002fa6:	4193      	sbcs	r3, r2
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d001      	beq.n	8002fb2 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e06e      	b.n	8003090 <HAL_TIM_PWM_Start+0x148>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d104      	bne.n	8002fc2 <HAL_TIM_PWM_Start+0x7a>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	223e      	movs	r2, #62	; 0x3e
 8002fbc:	2102      	movs	r1, #2
 8002fbe:	5499      	strb	r1, [r3, r2]
 8002fc0:	e013      	b.n	8002fea <HAL_TIM_PWM_Start+0xa2>
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	2b04      	cmp	r3, #4
 8002fc6:	d104      	bne.n	8002fd2 <HAL_TIM_PWM_Start+0x8a>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	223f      	movs	r2, #63	; 0x3f
 8002fcc:	2102      	movs	r1, #2
 8002fce:	5499      	strb	r1, [r3, r2]
 8002fd0:	e00b      	b.n	8002fea <HAL_TIM_PWM_Start+0xa2>
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	2b08      	cmp	r3, #8
 8002fd6:	d104      	bne.n	8002fe2 <HAL_TIM_PWM_Start+0x9a>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2240      	movs	r2, #64	; 0x40
 8002fdc:	2102      	movs	r1, #2
 8002fde:	5499      	strb	r1, [r3, r2]
 8002fe0:	e003      	b.n	8002fea <HAL_TIM_PWM_Start+0xa2>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2241      	movs	r2, #65	; 0x41
 8002fe6:	2102      	movs	r1, #2
 8002fe8:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	6839      	ldr	r1, [r7, #0]
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	0018      	movs	r0, r3
 8002ff4:	f000 fd00 	bl	80039f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a26      	ldr	r2, [pc, #152]	; (8003098 <HAL_TIM_PWM_Start+0x150>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d00e      	beq.n	8003020 <HAL_TIM_PWM_Start+0xd8>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a25      	ldr	r2, [pc, #148]	; (800309c <HAL_TIM_PWM_Start+0x154>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d009      	beq.n	8003020 <HAL_TIM_PWM_Start+0xd8>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a23      	ldr	r2, [pc, #140]	; (80030a0 <HAL_TIM_PWM_Start+0x158>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d004      	beq.n	8003020 <HAL_TIM_PWM_Start+0xd8>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a22      	ldr	r2, [pc, #136]	; (80030a4 <HAL_TIM_PWM_Start+0x15c>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d101      	bne.n	8003024 <HAL_TIM_PWM_Start+0xdc>
 8003020:	2301      	movs	r3, #1
 8003022:	e000      	b.n	8003026 <HAL_TIM_PWM_Start+0xde>
 8003024:	2300      	movs	r3, #0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d008      	beq.n	800303c <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2180      	movs	r1, #128	; 0x80
 8003036:	0209      	lsls	r1, r1, #8
 8003038:	430a      	orrs	r2, r1
 800303a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a15      	ldr	r2, [pc, #84]	; (8003098 <HAL_TIM_PWM_Start+0x150>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d009      	beq.n	800305a <HAL_TIM_PWM_Start+0x112>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a17      	ldr	r2, [pc, #92]	; (80030a8 <HAL_TIM_PWM_Start+0x160>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d004      	beq.n	800305a <HAL_TIM_PWM_Start+0x112>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a11      	ldr	r2, [pc, #68]	; (800309c <HAL_TIM_PWM_Start+0x154>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d111      	bne.n	800307e <HAL_TIM_PWM_Start+0x136>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	2207      	movs	r2, #7
 8003062:	4013      	ands	r3, r2
 8003064:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2b06      	cmp	r3, #6
 800306a:	d010      	beq.n	800308e <HAL_TIM_PWM_Start+0x146>
    {
      __HAL_TIM_ENABLE(htim);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2101      	movs	r1, #1
 8003078:	430a      	orrs	r2, r1
 800307a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800307c:	e007      	b.n	800308e <HAL_TIM_PWM_Start+0x146>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2101      	movs	r1, #1
 800308a:	430a      	orrs	r2, r1
 800308c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800308e:	2300      	movs	r3, #0
}
 8003090:	0018      	movs	r0, r3
 8003092:	46bd      	mov	sp, r7
 8003094:	b004      	add	sp, #16
 8003096:	bd80      	pop	{r7, pc}
 8003098:	40012c00 	.word	0x40012c00
 800309c:	40014000 	.word	0x40014000
 80030a0:	40014400 	.word	0x40014400
 80030a4:	40014800 	.word	0x40014800
 80030a8:	40000400 	.word	0x40000400

080030ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b086      	sub	sp, #24
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	60b9      	str	r1, [r7, #8]
 80030b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030b8:	2317      	movs	r3, #23
 80030ba:	18fb      	adds	r3, r7, r3
 80030bc:	2200      	movs	r2, #0
 80030be:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	223c      	movs	r2, #60	; 0x3c
 80030c4:	5c9b      	ldrb	r3, [r3, r2]
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d101      	bne.n	80030ce <HAL_TIM_PWM_ConfigChannel+0x22>
 80030ca:	2302      	movs	r3, #2
 80030cc:	e0ad      	b.n	800322a <HAL_TIM_PWM_ConfigChannel+0x17e>
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	223c      	movs	r2, #60	; 0x3c
 80030d2:	2101      	movs	r1, #1
 80030d4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2b0c      	cmp	r3, #12
 80030da:	d100      	bne.n	80030de <HAL_TIM_PWM_ConfigChannel+0x32>
 80030dc:	e076      	b.n	80031cc <HAL_TIM_PWM_ConfigChannel+0x120>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2b0c      	cmp	r3, #12
 80030e2:	d900      	bls.n	80030e6 <HAL_TIM_PWM_ConfigChannel+0x3a>
 80030e4:	e095      	b.n	8003212 <HAL_TIM_PWM_ConfigChannel+0x166>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2b08      	cmp	r3, #8
 80030ea:	d04e      	beq.n	800318a <HAL_TIM_PWM_ConfigChannel+0xde>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2b08      	cmp	r3, #8
 80030f0:	d900      	bls.n	80030f4 <HAL_TIM_PWM_ConfigChannel+0x48>
 80030f2:	e08e      	b.n	8003212 <HAL_TIM_PWM_ConfigChannel+0x166>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d003      	beq.n	8003102 <HAL_TIM_PWM_ConfigChannel+0x56>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2b04      	cmp	r3, #4
 80030fe:	d021      	beq.n	8003144 <HAL_TIM_PWM_ConfigChannel+0x98>
 8003100:	e087      	b.n	8003212 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	68ba      	ldr	r2, [r7, #8]
 8003108:	0011      	movs	r1, r2
 800310a:	0018      	movs	r0, r3
 800310c:	f000 f9de 	bl	80034cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	699a      	ldr	r2, [r3, #24]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	2108      	movs	r1, #8
 800311c:	430a      	orrs	r2, r1
 800311e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	699a      	ldr	r2, [r3, #24]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2104      	movs	r1, #4
 800312c:	438a      	bics	r2, r1
 800312e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	6999      	ldr	r1, [r3, #24]
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	691a      	ldr	r2, [r3, #16]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	430a      	orrs	r2, r1
 8003140:	619a      	str	r2, [r3, #24]
      break;
 8003142:	e06b      	b.n	800321c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	68ba      	ldr	r2, [r7, #8]
 800314a:	0011      	movs	r1, r2
 800314c:	0018      	movs	r0, r3
 800314e:	f000 fa45 	bl	80035dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	699a      	ldr	r2, [r3, #24]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2180      	movs	r1, #128	; 0x80
 800315e:	0109      	lsls	r1, r1, #4
 8003160:	430a      	orrs	r2, r1
 8003162:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	699a      	ldr	r2, [r3, #24]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4931      	ldr	r1, [pc, #196]	; (8003234 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003170:	400a      	ands	r2, r1
 8003172:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	6999      	ldr	r1, [r3, #24]
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	691b      	ldr	r3, [r3, #16]
 800317e:	021a      	lsls	r2, r3, #8
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	430a      	orrs	r2, r1
 8003186:	619a      	str	r2, [r3, #24]
      break;
 8003188:	e048      	b.n	800321c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	68ba      	ldr	r2, [r7, #8]
 8003190:	0011      	movs	r1, r2
 8003192:	0018      	movs	r0, r3
 8003194:	f000 faa6 	bl	80036e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	69da      	ldr	r2, [r3, #28]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	2108      	movs	r1, #8
 80031a4:	430a      	orrs	r2, r1
 80031a6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	69da      	ldr	r2, [r3, #28]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	2104      	movs	r1, #4
 80031b4:	438a      	bics	r2, r1
 80031b6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	69d9      	ldr	r1, [r3, #28]
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	691a      	ldr	r2, [r3, #16]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	430a      	orrs	r2, r1
 80031c8:	61da      	str	r2, [r3, #28]
      break;
 80031ca:	e027      	b.n	800321c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	68ba      	ldr	r2, [r7, #8]
 80031d2:	0011      	movs	r1, r2
 80031d4:	0018      	movs	r0, r3
 80031d6:	f000 fb0b 	bl	80037f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	69da      	ldr	r2, [r3, #28]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	2180      	movs	r1, #128	; 0x80
 80031e6:	0109      	lsls	r1, r1, #4
 80031e8:	430a      	orrs	r2, r1
 80031ea:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	69da      	ldr	r2, [r3, #28]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	490f      	ldr	r1, [pc, #60]	; (8003234 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80031f8:	400a      	ands	r2, r1
 80031fa:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	69d9      	ldr	r1, [r3, #28]
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	691b      	ldr	r3, [r3, #16]
 8003206:	021a      	lsls	r2, r3, #8
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	430a      	orrs	r2, r1
 800320e:	61da      	str	r2, [r3, #28]
      break;
 8003210:	e004      	b.n	800321c <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8003212:	2317      	movs	r3, #23
 8003214:	18fb      	adds	r3, r7, r3
 8003216:	2201      	movs	r2, #1
 8003218:	701a      	strb	r2, [r3, #0]
      break;
 800321a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	223c      	movs	r2, #60	; 0x3c
 8003220:	2100      	movs	r1, #0
 8003222:	5499      	strb	r1, [r3, r2]

  return status;
 8003224:	2317      	movs	r3, #23
 8003226:	18fb      	adds	r3, r7, r3
 8003228:	781b      	ldrb	r3, [r3, #0]
}
 800322a:	0018      	movs	r0, r3
 800322c:	46bd      	mov	sp, r7
 800322e:	b006      	add	sp, #24
 8003230:	bd80      	pop	{r7, pc}
 8003232:	46c0      	nop			; (mov r8, r8)
 8003234:	fffffbff 	.word	0xfffffbff

08003238 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003242:	230f      	movs	r3, #15
 8003244:	18fb      	adds	r3, r7, r3
 8003246:	2200      	movs	r2, #0
 8003248:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	223c      	movs	r2, #60	; 0x3c
 800324e:	5c9b      	ldrb	r3, [r3, r2]
 8003250:	2b01      	cmp	r3, #1
 8003252:	d101      	bne.n	8003258 <HAL_TIM_ConfigClockSource+0x20>
 8003254:	2302      	movs	r3, #2
 8003256:	e0bc      	b.n	80033d2 <HAL_TIM_ConfigClockSource+0x19a>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	223c      	movs	r2, #60	; 0x3c
 800325c:	2101      	movs	r1, #1
 800325e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	223d      	movs	r2, #61	; 0x3d
 8003264:	2102      	movs	r1, #2
 8003266:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	2277      	movs	r2, #119	; 0x77
 8003274:	4393      	bics	r3, r2
 8003276:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	4a58      	ldr	r2, [pc, #352]	; (80033dc <HAL_TIM_ConfigClockSource+0x1a4>)
 800327c:	4013      	ands	r3, r2
 800327e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	68ba      	ldr	r2, [r7, #8]
 8003286:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2280      	movs	r2, #128	; 0x80
 800328e:	0192      	lsls	r2, r2, #6
 8003290:	4293      	cmp	r3, r2
 8003292:	d040      	beq.n	8003316 <HAL_TIM_ConfigClockSource+0xde>
 8003294:	2280      	movs	r2, #128	; 0x80
 8003296:	0192      	lsls	r2, r2, #6
 8003298:	4293      	cmp	r3, r2
 800329a:	d900      	bls.n	800329e <HAL_TIM_ConfigClockSource+0x66>
 800329c:	e088      	b.n	80033b0 <HAL_TIM_ConfigClockSource+0x178>
 800329e:	2280      	movs	r2, #128	; 0x80
 80032a0:	0152      	lsls	r2, r2, #5
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d100      	bne.n	80032a8 <HAL_TIM_ConfigClockSource+0x70>
 80032a6:	e088      	b.n	80033ba <HAL_TIM_ConfigClockSource+0x182>
 80032a8:	2280      	movs	r2, #128	; 0x80
 80032aa:	0152      	lsls	r2, r2, #5
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d900      	bls.n	80032b2 <HAL_TIM_ConfigClockSource+0x7a>
 80032b0:	e07e      	b.n	80033b0 <HAL_TIM_ConfigClockSource+0x178>
 80032b2:	2b70      	cmp	r3, #112	; 0x70
 80032b4:	d018      	beq.n	80032e8 <HAL_TIM_ConfigClockSource+0xb0>
 80032b6:	d900      	bls.n	80032ba <HAL_TIM_ConfigClockSource+0x82>
 80032b8:	e07a      	b.n	80033b0 <HAL_TIM_ConfigClockSource+0x178>
 80032ba:	2b60      	cmp	r3, #96	; 0x60
 80032bc:	d04f      	beq.n	800335e <HAL_TIM_ConfigClockSource+0x126>
 80032be:	d900      	bls.n	80032c2 <HAL_TIM_ConfigClockSource+0x8a>
 80032c0:	e076      	b.n	80033b0 <HAL_TIM_ConfigClockSource+0x178>
 80032c2:	2b50      	cmp	r3, #80	; 0x50
 80032c4:	d03b      	beq.n	800333e <HAL_TIM_ConfigClockSource+0x106>
 80032c6:	d900      	bls.n	80032ca <HAL_TIM_ConfigClockSource+0x92>
 80032c8:	e072      	b.n	80033b0 <HAL_TIM_ConfigClockSource+0x178>
 80032ca:	2b40      	cmp	r3, #64	; 0x40
 80032cc:	d057      	beq.n	800337e <HAL_TIM_ConfigClockSource+0x146>
 80032ce:	d900      	bls.n	80032d2 <HAL_TIM_ConfigClockSource+0x9a>
 80032d0:	e06e      	b.n	80033b0 <HAL_TIM_ConfigClockSource+0x178>
 80032d2:	2b30      	cmp	r3, #48	; 0x30
 80032d4:	d063      	beq.n	800339e <HAL_TIM_ConfigClockSource+0x166>
 80032d6:	d86b      	bhi.n	80033b0 <HAL_TIM_ConfigClockSource+0x178>
 80032d8:	2b20      	cmp	r3, #32
 80032da:	d060      	beq.n	800339e <HAL_TIM_ConfigClockSource+0x166>
 80032dc:	d868      	bhi.n	80033b0 <HAL_TIM_ConfigClockSource+0x178>
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d05d      	beq.n	800339e <HAL_TIM_ConfigClockSource+0x166>
 80032e2:	2b10      	cmp	r3, #16
 80032e4:	d05b      	beq.n	800339e <HAL_TIM_ConfigClockSource+0x166>
 80032e6:	e063      	b.n	80033b0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6818      	ldr	r0, [r3, #0]
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	6899      	ldr	r1, [r3, #8]
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	685a      	ldr	r2, [r3, #4]
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	f000 fb5e 	bl	80039b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	2277      	movs	r2, #119	; 0x77
 8003308:	4313      	orrs	r3, r2
 800330a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	68ba      	ldr	r2, [r7, #8]
 8003312:	609a      	str	r2, [r3, #8]
      break;
 8003314:	e052      	b.n	80033bc <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6818      	ldr	r0, [r3, #0]
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	6899      	ldr	r1, [r3, #8]
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	685a      	ldr	r2, [r3, #4]
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	f000 fb47 	bl	80039b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	689a      	ldr	r2, [r3, #8]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2180      	movs	r1, #128	; 0x80
 8003336:	01c9      	lsls	r1, r1, #7
 8003338:	430a      	orrs	r2, r1
 800333a:	609a      	str	r2, [r3, #8]
      break;
 800333c:	e03e      	b.n	80033bc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6818      	ldr	r0, [r3, #0]
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	6859      	ldr	r1, [r3, #4]
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	001a      	movs	r2, r3
 800334c:	f000 faba 	bl	80038c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	2150      	movs	r1, #80	; 0x50
 8003356:	0018      	movs	r0, r3
 8003358:	f000 fb14 	bl	8003984 <TIM_ITRx_SetConfig>
      break;
 800335c:	e02e      	b.n	80033bc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6818      	ldr	r0, [r3, #0]
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	6859      	ldr	r1, [r3, #4]
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	001a      	movs	r2, r3
 800336c:	f000 fad8 	bl	8003920 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2160      	movs	r1, #96	; 0x60
 8003376:	0018      	movs	r0, r3
 8003378:	f000 fb04 	bl	8003984 <TIM_ITRx_SetConfig>
      break;
 800337c:	e01e      	b.n	80033bc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6818      	ldr	r0, [r3, #0]
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	6859      	ldr	r1, [r3, #4]
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	001a      	movs	r2, r3
 800338c:	f000 fa9a 	bl	80038c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	2140      	movs	r1, #64	; 0x40
 8003396:	0018      	movs	r0, r3
 8003398:	f000 faf4 	bl	8003984 <TIM_ITRx_SetConfig>
      break;
 800339c:	e00e      	b.n	80033bc <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	0019      	movs	r1, r3
 80033a8:	0010      	movs	r0, r2
 80033aa:	f000 faeb 	bl	8003984 <TIM_ITRx_SetConfig>
      break;
 80033ae:	e005      	b.n	80033bc <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80033b0:	230f      	movs	r3, #15
 80033b2:	18fb      	adds	r3, r7, r3
 80033b4:	2201      	movs	r2, #1
 80033b6:	701a      	strb	r2, [r3, #0]
      break;
 80033b8:	e000      	b.n	80033bc <HAL_TIM_ConfigClockSource+0x184>
      break;
 80033ba:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	223d      	movs	r2, #61	; 0x3d
 80033c0:	2101      	movs	r1, #1
 80033c2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	223c      	movs	r2, #60	; 0x3c
 80033c8:	2100      	movs	r1, #0
 80033ca:	5499      	strb	r1, [r3, r2]

  return status;
 80033cc:	230f      	movs	r3, #15
 80033ce:	18fb      	adds	r3, r7, r3
 80033d0:	781b      	ldrb	r3, [r3, #0]
}
 80033d2:	0018      	movs	r0, r3
 80033d4:	46bd      	mov	sp, r7
 80033d6:	b004      	add	sp, #16
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	46c0      	nop			; (mov r8, r8)
 80033dc:	ffff00ff 	.word	0xffff00ff

080033e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b084      	sub	sp, #16
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4a2f      	ldr	r2, [pc, #188]	; (80034b0 <TIM_Base_SetConfig+0xd0>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d003      	beq.n	8003400 <TIM_Base_SetConfig+0x20>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	4a2e      	ldr	r2, [pc, #184]	; (80034b4 <TIM_Base_SetConfig+0xd4>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d108      	bne.n	8003412 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2270      	movs	r2, #112	; 0x70
 8003404:	4393      	bics	r3, r2
 8003406:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	68fa      	ldr	r2, [r7, #12]
 800340e:	4313      	orrs	r3, r2
 8003410:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a26      	ldr	r2, [pc, #152]	; (80034b0 <TIM_Base_SetConfig+0xd0>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d013      	beq.n	8003442 <TIM_Base_SetConfig+0x62>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a25      	ldr	r2, [pc, #148]	; (80034b4 <TIM_Base_SetConfig+0xd4>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d00f      	beq.n	8003442 <TIM_Base_SetConfig+0x62>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a24      	ldr	r2, [pc, #144]	; (80034b8 <TIM_Base_SetConfig+0xd8>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d00b      	beq.n	8003442 <TIM_Base_SetConfig+0x62>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a23      	ldr	r2, [pc, #140]	; (80034bc <TIM_Base_SetConfig+0xdc>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d007      	beq.n	8003442 <TIM_Base_SetConfig+0x62>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a22      	ldr	r2, [pc, #136]	; (80034c0 <TIM_Base_SetConfig+0xe0>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d003      	beq.n	8003442 <TIM_Base_SetConfig+0x62>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a21      	ldr	r2, [pc, #132]	; (80034c4 <TIM_Base_SetConfig+0xe4>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d108      	bne.n	8003454 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	4a20      	ldr	r2, [pc, #128]	; (80034c8 <TIM_Base_SetConfig+0xe8>)
 8003446:	4013      	ands	r3, r2
 8003448:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	68db      	ldr	r3, [r3, #12]
 800344e:	68fa      	ldr	r2, [r7, #12]
 8003450:	4313      	orrs	r3, r2
 8003452:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2280      	movs	r2, #128	; 0x80
 8003458:	4393      	bics	r3, r2
 800345a:	001a      	movs	r2, r3
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	695b      	ldr	r3, [r3, #20]
 8003460:	4313      	orrs	r3, r2
 8003462:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	68fa      	ldr	r2, [r7, #12]
 8003468:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	689a      	ldr	r2, [r3, #8]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a0c      	ldr	r2, [pc, #48]	; (80034b0 <TIM_Base_SetConfig+0xd0>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d00b      	beq.n	800349a <TIM_Base_SetConfig+0xba>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a0d      	ldr	r2, [pc, #52]	; (80034bc <TIM_Base_SetConfig+0xdc>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d007      	beq.n	800349a <TIM_Base_SetConfig+0xba>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a0c      	ldr	r2, [pc, #48]	; (80034c0 <TIM_Base_SetConfig+0xe0>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d003      	beq.n	800349a <TIM_Base_SetConfig+0xba>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4a0b      	ldr	r2, [pc, #44]	; (80034c4 <TIM_Base_SetConfig+0xe4>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d103      	bne.n	80034a2 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	691a      	ldr	r2, [r3, #16]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2201      	movs	r2, #1
 80034a6:	615a      	str	r2, [r3, #20]
}
 80034a8:	46c0      	nop			; (mov r8, r8)
 80034aa:	46bd      	mov	sp, r7
 80034ac:	b004      	add	sp, #16
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	40012c00 	.word	0x40012c00
 80034b4:	40000400 	.word	0x40000400
 80034b8:	40002000 	.word	0x40002000
 80034bc:	40014000 	.word	0x40014000
 80034c0:	40014400 	.word	0x40014400
 80034c4:	40014800 	.word	0x40014800
 80034c8:	fffffcff 	.word	0xfffffcff

080034cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b086      	sub	sp, #24
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6a1b      	ldr	r3, [r3, #32]
 80034da:	2201      	movs	r2, #1
 80034dc:	4393      	bics	r3, r2
 80034de:	001a      	movs	r2, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6a1b      	ldr	r3, [r3, #32]
 80034e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	699b      	ldr	r3, [r3, #24]
 80034f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2270      	movs	r2, #112	; 0x70
 80034fa:	4393      	bics	r3, r2
 80034fc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2203      	movs	r2, #3
 8003502:	4393      	bics	r3, r2
 8003504:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68fa      	ldr	r2, [r7, #12]
 800350c:	4313      	orrs	r3, r2
 800350e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	2202      	movs	r2, #2
 8003514:	4393      	bics	r3, r2
 8003516:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	697a      	ldr	r2, [r7, #20]
 800351e:	4313      	orrs	r3, r2
 8003520:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a27      	ldr	r2, [pc, #156]	; (80035c4 <TIM_OC1_SetConfig+0xf8>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d00b      	beq.n	8003542 <TIM_OC1_SetConfig+0x76>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a26      	ldr	r2, [pc, #152]	; (80035c8 <TIM_OC1_SetConfig+0xfc>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d007      	beq.n	8003542 <TIM_OC1_SetConfig+0x76>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a25      	ldr	r2, [pc, #148]	; (80035cc <TIM_OC1_SetConfig+0x100>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d003      	beq.n	8003542 <TIM_OC1_SetConfig+0x76>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a24      	ldr	r2, [pc, #144]	; (80035d0 <TIM_OC1_SetConfig+0x104>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d10c      	bne.n	800355c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	2208      	movs	r2, #8
 8003546:	4393      	bics	r3, r2
 8003548:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	697a      	ldr	r2, [r7, #20]
 8003550:	4313      	orrs	r3, r2
 8003552:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	2204      	movs	r2, #4
 8003558:	4393      	bics	r3, r2
 800355a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	4a19      	ldr	r2, [pc, #100]	; (80035c4 <TIM_OC1_SetConfig+0xf8>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d00b      	beq.n	800357c <TIM_OC1_SetConfig+0xb0>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	4a18      	ldr	r2, [pc, #96]	; (80035c8 <TIM_OC1_SetConfig+0xfc>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d007      	beq.n	800357c <TIM_OC1_SetConfig+0xb0>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	4a17      	ldr	r2, [pc, #92]	; (80035cc <TIM_OC1_SetConfig+0x100>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d003      	beq.n	800357c <TIM_OC1_SetConfig+0xb0>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	4a16      	ldr	r2, [pc, #88]	; (80035d0 <TIM_OC1_SetConfig+0x104>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d111      	bne.n	80035a0 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	4a15      	ldr	r2, [pc, #84]	; (80035d4 <TIM_OC1_SetConfig+0x108>)
 8003580:	4013      	ands	r3, r2
 8003582:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	4a14      	ldr	r2, [pc, #80]	; (80035d8 <TIM_OC1_SetConfig+0x10c>)
 8003588:	4013      	ands	r3, r2
 800358a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	695b      	ldr	r3, [r3, #20]
 8003590:	693a      	ldr	r2, [r7, #16]
 8003592:	4313      	orrs	r3, r2
 8003594:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	699b      	ldr	r3, [r3, #24]
 800359a:	693a      	ldr	r2, [r7, #16]
 800359c:	4313      	orrs	r3, r2
 800359e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	693a      	ldr	r2, [r7, #16]
 80035a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	68fa      	ldr	r2, [r7, #12]
 80035aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	685a      	ldr	r2, [r3, #4]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	697a      	ldr	r2, [r7, #20]
 80035b8:	621a      	str	r2, [r3, #32]
}
 80035ba:	46c0      	nop			; (mov r8, r8)
 80035bc:	46bd      	mov	sp, r7
 80035be:	b006      	add	sp, #24
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	46c0      	nop			; (mov r8, r8)
 80035c4:	40012c00 	.word	0x40012c00
 80035c8:	40014000 	.word	0x40014000
 80035cc:	40014400 	.word	0x40014400
 80035d0:	40014800 	.word	0x40014800
 80035d4:	fffffeff 	.word	0xfffffeff
 80035d8:	fffffdff 	.word	0xfffffdff

080035dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b086      	sub	sp, #24
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a1b      	ldr	r3, [r3, #32]
 80035ea:	2210      	movs	r2, #16
 80035ec:	4393      	bics	r3, r2
 80035ee:	001a      	movs	r2, r3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a1b      	ldr	r3, [r3, #32]
 80035f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	699b      	ldr	r3, [r3, #24]
 8003604:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	4a2e      	ldr	r2, [pc, #184]	; (80036c4 <TIM_OC2_SetConfig+0xe8>)
 800360a:	4013      	ands	r3, r2
 800360c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	4a2d      	ldr	r2, [pc, #180]	; (80036c8 <TIM_OC2_SetConfig+0xec>)
 8003612:	4013      	ands	r3, r2
 8003614:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	021b      	lsls	r3, r3, #8
 800361c:	68fa      	ldr	r2, [r7, #12]
 800361e:	4313      	orrs	r3, r2
 8003620:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	2220      	movs	r2, #32
 8003626:	4393      	bics	r3, r2
 8003628:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	011b      	lsls	r3, r3, #4
 8003630:	697a      	ldr	r2, [r7, #20]
 8003632:	4313      	orrs	r3, r2
 8003634:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a24      	ldr	r2, [pc, #144]	; (80036cc <TIM_OC2_SetConfig+0xf0>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d10d      	bne.n	800365a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	2280      	movs	r2, #128	; 0x80
 8003642:	4393      	bics	r3, r2
 8003644:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	011b      	lsls	r3, r3, #4
 800364c:	697a      	ldr	r2, [r7, #20]
 800364e:	4313      	orrs	r3, r2
 8003650:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	2240      	movs	r2, #64	; 0x40
 8003656:	4393      	bics	r3, r2
 8003658:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a1b      	ldr	r2, [pc, #108]	; (80036cc <TIM_OC2_SetConfig+0xf0>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d00b      	beq.n	800367a <TIM_OC2_SetConfig+0x9e>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4a1a      	ldr	r2, [pc, #104]	; (80036d0 <TIM_OC2_SetConfig+0xf4>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d007      	beq.n	800367a <TIM_OC2_SetConfig+0x9e>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a19      	ldr	r2, [pc, #100]	; (80036d4 <TIM_OC2_SetConfig+0xf8>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d003      	beq.n	800367a <TIM_OC2_SetConfig+0x9e>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4a18      	ldr	r2, [pc, #96]	; (80036d8 <TIM_OC2_SetConfig+0xfc>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d113      	bne.n	80036a2 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	4a17      	ldr	r2, [pc, #92]	; (80036dc <TIM_OC2_SetConfig+0x100>)
 800367e:	4013      	ands	r3, r2
 8003680:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	4a16      	ldr	r2, [pc, #88]	; (80036e0 <TIM_OC2_SetConfig+0x104>)
 8003686:	4013      	ands	r3, r2
 8003688:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	695b      	ldr	r3, [r3, #20]
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	693a      	ldr	r2, [r7, #16]
 8003692:	4313      	orrs	r3, r2
 8003694:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	699b      	ldr	r3, [r3, #24]
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	693a      	ldr	r2, [r7, #16]
 800369e:	4313      	orrs	r3, r2
 80036a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	693a      	ldr	r2, [r7, #16]
 80036a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	68fa      	ldr	r2, [r7, #12]
 80036ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	685a      	ldr	r2, [r3, #4]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	697a      	ldr	r2, [r7, #20]
 80036ba:	621a      	str	r2, [r3, #32]
}
 80036bc:	46c0      	nop			; (mov r8, r8)
 80036be:	46bd      	mov	sp, r7
 80036c0:	b006      	add	sp, #24
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	ffff8fff 	.word	0xffff8fff
 80036c8:	fffffcff 	.word	0xfffffcff
 80036cc:	40012c00 	.word	0x40012c00
 80036d0:	40014000 	.word	0x40014000
 80036d4:	40014400 	.word	0x40014400
 80036d8:	40014800 	.word	0x40014800
 80036dc:	fffffbff 	.word	0xfffffbff
 80036e0:	fffff7ff 	.word	0xfffff7ff

080036e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b086      	sub	sp, #24
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a1b      	ldr	r3, [r3, #32]
 80036f2:	4a35      	ldr	r2, [pc, #212]	; (80037c8 <TIM_OC3_SetConfig+0xe4>)
 80036f4:	401a      	ands	r2, r3
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6a1b      	ldr	r3, [r3, #32]
 80036fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	69db      	ldr	r3, [r3, #28]
 800370a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2270      	movs	r2, #112	; 0x70
 8003710:	4393      	bics	r3, r2
 8003712:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2203      	movs	r2, #3
 8003718:	4393      	bics	r3, r2
 800371a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	68fa      	ldr	r2, [r7, #12]
 8003722:	4313      	orrs	r3, r2
 8003724:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	4a28      	ldr	r2, [pc, #160]	; (80037cc <TIM_OC3_SetConfig+0xe8>)
 800372a:	4013      	ands	r3, r2
 800372c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	021b      	lsls	r3, r3, #8
 8003734:	697a      	ldr	r2, [r7, #20]
 8003736:	4313      	orrs	r3, r2
 8003738:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4a24      	ldr	r2, [pc, #144]	; (80037d0 <TIM_OC3_SetConfig+0xec>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d10d      	bne.n	800375e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	4a23      	ldr	r2, [pc, #140]	; (80037d4 <TIM_OC3_SetConfig+0xf0>)
 8003746:	4013      	ands	r3, r2
 8003748:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	021b      	lsls	r3, r3, #8
 8003750:	697a      	ldr	r2, [r7, #20]
 8003752:	4313      	orrs	r3, r2
 8003754:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	4a1f      	ldr	r2, [pc, #124]	; (80037d8 <TIM_OC3_SetConfig+0xf4>)
 800375a:	4013      	ands	r3, r2
 800375c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a1b      	ldr	r2, [pc, #108]	; (80037d0 <TIM_OC3_SetConfig+0xec>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d00b      	beq.n	800377e <TIM_OC3_SetConfig+0x9a>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4a1c      	ldr	r2, [pc, #112]	; (80037dc <TIM_OC3_SetConfig+0xf8>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d007      	beq.n	800377e <TIM_OC3_SetConfig+0x9a>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a1b      	ldr	r2, [pc, #108]	; (80037e0 <TIM_OC3_SetConfig+0xfc>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d003      	beq.n	800377e <TIM_OC3_SetConfig+0x9a>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a1a      	ldr	r2, [pc, #104]	; (80037e4 <TIM_OC3_SetConfig+0x100>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d113      	bne.n	80037a6 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	4a19      	ldr	r2, [pc, #100]	; (80037e8 <TIM_OC3_SetConfig+0x104>)
 8003782:	4013      	ands	r3, r2
 8003784:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	4a18      	ldr	r2, [pc, #96]	; (80037ec <TIM_OC3_SetConfig+0x108>)
 800378a:	4013      	ands	r3, r2
 800378c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	695b      	ldr	r3, [r3, #20]
 8003792:	011b      	lsls	r3, r3, #4
 8003794:	693a      	ldr	r2, [r7, #16]
 8003796:	4313      	orrs	r3, r2
 8003798:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	699b      	ldr	r3, [r3, #24]
 800379e:	011b      	lsls	r3, r3, #4
 80037a0:	693a      	ldr	r2, [r7, #16]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	693a      	ldr	r2, [r7, #16]
 80037aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	68fa      	ldr	r2, [r7, #12]
 80037b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	685a      	ldr	r2, [r3, #4]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	697a      	ldr	r2, [r7, #20]
 80037be:	621a      	str	r2, [r3, #32]
}
 80037c0:	46c0      	nop			; (mov r8, r8)
 80037c2:	46bd      	mov	sp, r7
 80037c4:	b006      	add	sp, #24
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	fffffeff 	.word	0xfffffeff
 80037cc:	fffffdff 	.word	0xfffffdff
 80037d0:	40012c00 	.word	0x40012c00
 80037d4:	fffff7ff 	.word	0xfffff7ff
 80037d8:	fffffbff 	.word	0xfffffbff
 80037dc:	40014000 	.word	0x40014000
 80037e0:	40014400 	.word	0x40014400
 80037e4:	40014800 	.word	0x40014800
 80037e8:	ffffefff 	.word	0xffffefff
 80037ec:	ffffdfff 	.word	0xffffdfff

080037f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b086      	sub	sp, #24
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a1b      	ldr	r3, [r3, #32]
 80037fe:	4a28      	ldr	r2, [pc, #160]	; (80038a0 <TIM_OC4_SetConfig+0xb0>)
 8003800:	401a      	ands	r2, r3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a1b      	ldr	r3, [r3, #32]
 800380a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	69db      	ldr	r3, [r3, #28]
 8003816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	4a22      	ldr	r2, [pc, #136]	; (80038a4 <TIM_OC4_SetConfig+0xb4>)
 800381c:	4013      	ands	r3, r2
 800381e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	4a21      	ldr	r2, [pc, #132]	; (80038a8 <TIM_OC4_SetConfig+0xb8>)
 8003824:	4013      	ands	r3, r2
 8003826:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	021b      	lsls	r3, r3, #8
 800382e:	68fa      	ldr	r2, [r7, #12]
 8003830:	4313      	orrs	r3, r2
 8003832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	4a1d      	ldr	r2, [pc, #116]	; (80038ac <TIM_OC4_SetConfig+0xbc>)
 8003838:	4013      	ands	r3, r2
 800383a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	031b      	lsls	r3, r3, #12
 8003842:	693a      	ldr	r2, [r7, #16]
 8003844:	4313      	orrs	r3, r2
 8003846:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	4a19      	ldr	r2, [pc, #100]	; (80038b0 <TIM_OC4_SetConfig+0xc0>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d00b      	beq.n	8003868 <TIM_OC4_SetConfig+0x78>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	4a18      	ldr	r2, [pc, #96]	; (80038b4 <TIM_OC4_SetConfig+0xc4>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d007      	beq.n	8003868 <TIM_OC4_SetConfig+0x78>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	4a17      	ldr	r2, [pc, #92]	; (80038b8 <TIM_OC4_SetConfig+0xc8>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d003      	beq.n	8003868 <TIM_OC4_SetConfig+0x78>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	4a16      	ldr	r2, [pc, #88]	; (80038bc <TIM_OC4_SetConfig+0xcc>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d109      	bne.n	800387c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	4a15      	ldr	r2, [pc, #84]	; (80038c0 <TIM_OC4_SetConfig+0xd0>)
 800386c:	4013      	ands	r3, r2
 800386e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	695b      	ldr	r3, [r3, #20]
 8003874:	019b      	lsls	r3, r3, #6
 8003876:	697a      	ldr	r2, [r7, #20]
 8003878:	4313      	orrs	r3, r2
 800387a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	697a      	ldr	r2, [r7, #20]
 8003880:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	68fa      	ldr	r2, [r7, #12]
 8003886:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	685a      	ldr	r2, [r3, #4]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	693a      	ldr	r2, [r7, #16]
 8003894:	621a      	str	r2, [r3, #32]
}
 8003896:	46c0      	nop			; (mov r8, r8)
 8003898:	46bd      	mov	sp, r7
 800389a:	b006      	add	sp, #24
 800389c:	bd80      	pop	{r7, pc}
 800389e:	46c0      	nop			; (mov r8, r8)
 80038a0:	ffffefff 	.word	0xffffefff
 80038a4:	ffff8fff 	.word	0xffff8fff
 80038a8:	fffffcff 	.word	0xfffffcff
 80038ac:	ffffdfff 	.word	0xffffdfff
 80038b0:	40012c00 	.word	0x40012c00
 80038b4:	40014000 	.word	0x40014000
 80038b8:	40014400 	.word	0x40014400
 80038bc:	40014800 	.word	0x40014800
 80038c0:	ffffbfff 	.word	0xffffbfff

080038c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b086      	sub	sp, #24
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	60b9      	str	r1, [r7, #8]
 80038ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6a1b      	ldr	r3, [r3, #32]
 80038d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	6a1b      	ldr	r3, [r3, #32]
 80038da:	2201      	movs	r2, #1
 80038dc:	4393      	bics	r3, r2
 80038de:	001a      	movs	r2, r3
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	699b      	ldr	r3, [r3, #24]
 80038e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	22f0      	movs	r2, #240	; 0xf0
 80038ee:	4393      	bics	r3, r2
 80038f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	011b      	lsls	r3, r3, #4
 80038f6:	693a      	ldr	r2, [r7, #16]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	220a      	movs	r2, #10
 8003900:	4393      	bics	r3, r2
 8003902:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003904:	697a      	ldr	r2, [r7, #20]
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	4313      	orrs	r3, r2
 800390a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	693a      	ldr	r2, [r7, #16]
 8003910:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	697a      	ldr	r2, [r7, #20]
 8003916:	621a      	str	r2, [r3, #32]
}
 8003918:	46c0      	nop			; (mov r8, r8)
 800391a:	46bd      	mov	sp, r7
 800391c:	b006      	add	sp, #24
 800391e:	bd80      	pop	{r7, pc}

08003920 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b086      	sub	sp, #24
 8003924:	af00      	add	r7, sp, #0
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	60b9      	str	r1, [r7, #8]
 800392a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6a1b      	ldr	r3, [r3, #32]
 8003930:	2210      	movs	r2, #16
 8003932:	4393      	bics	r3, r2
 8003934:	001a      	movs	r2, r3
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	699b      	ldr	r3, [r3, #24]
 800393e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6a1b      	ldr	r3, [r3, #32]
 8003944:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	4a0d      	ldr	r2, [pc, #52]	; (8003980 <TIM_TI2_ConfigInputStage+0x60>)
 800394a:	4013      	ands	r3, r2
 800394c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	031b      	lsls	r3, r3, #12
 8003952:	697a      	ldr	r2, [r7, #20]
 8003954:	4313      	orrs	r3, r2
 8003956:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	22a0      	movs	r2, #160	; 0xa0
 800395c:	4393      	bics	r3, r2
 800395e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	011b      	lsls	r3, r3, #4
 8003964:	693a      	ldr	r2, [r7, #16]
 8003966:	4313      	orrs	r3, r2
 8003968:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	697a      	ldr	r2, [r7, #20]
 800396e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	693a      	ldr	r2, [r7, #16]
 8003974:	621a      	str	r2, [r3, #32]
}
 8003976:	46c0      	nop			; (mov r8, r8)
 8003978:	46bd      	mov	sp, r7
 800397a:	b006      	add	sp, #24
 800397c:	bd80      	pop	{r7, pc}
 800397e:	46c0      	nop			; (mov r8, r8)
 8003980:	ffff0fff 	.word	0xffff0fff

08003984 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2270      	movs	r2, #112	; 0x70
 8003998:	4393      	bics	r3, r2
 800399a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800399c:	683a      	ldr	r2, [r7, #0]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	2207      	movs	r2, #7
 80039a4:	4313      	orrs	r3, r2
 80039a6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	68fa      	ldr	r2, [r7, #12]
 80039ac:	609a      	str	r2, [r3, #8]
}
 80039ae:	46c0      	nop			; (mov r8, r8)
 80039b0:	46bd      	mov	sp, r7
 80039b2:	b004      	add	sp, #16
 80039b4:	bd80      	pop	{r7, pc}
	...

080039b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b086      	sub	sp, #24
 80039bc:	af00      	add	r7, sp, #0
 80039be:	60f8      	str	r0, [r7, #12]
 80039c0:	60b9      	str	r1, [r7, #8]
 80039c2:	607a      	str	r2, [r7, #4]
 80039c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	4a09      	ldr	r2, [pc, #36]	; (80039f4 <TIM_ETR_SetConfig+0x3c>)
 80039d0:	4013      	ands	r3, r2
 80039d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	021a      	lsls	r2, r3, #8
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	431a      	orrs	r2, r3
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	4313      	orrs	r3, r2
 80039e0:	697a      	ldr	r2, [r7, #20]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	697a      	ldr	r2, [r7, #20]
 80039ea:	609a      	str	r2, [r3, #8]
}
 80039ec:	46c0      	nop			; (mov r8, r8)
 80039ee:	46bd      	mov	sp, r7
 80039f0:	b006      	add	sp, #24
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	ffff00ff 	.word	0xffff00ff

080039f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b086      	sub	sp, #24
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	221f      	movs	r2, #31
 8003a08:	4013      	ands	r3, r2
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	409a      	lsls	r2, r3
 8003a0e:	0013      	movs	r3, r2
 8003a10:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6a1b      	ldr	r3, [r3, #32]
 8003a16:	697a      	ldr	r2, [r7, #20]
 8003a18:	43d2      	mvns	r2, r2
 8003a1a:	401a      	ands	r2, r3
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6a1a      	ldr	r2, [r3, #32]
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	211f      	movs	r1, #31
 8003a28:	400b      	ands	r3, r1
 8003a2a:	6879      	ldr	r1, [r7, #4]
 8003a2c:	4099      	lsls	r1, r3
 8003a2e:	000b      	movs	r3, r1
 8003a30:	431a      	orrs	r2, r3
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	621a      	str	r2, [r3, #32]
}
 8003a36:	46c0      	nop			; (mov r8, r8)
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	b006      	add	sp, #24
 8003a3c:	bd80      	pop	{r7, pc}
	...

08003a40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b084      	sub	sp, #16
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	223c      	movs	r2, #60	; 0x3c
 8003a4e:	5c9b      	ldrb	r3, [r3, r2]
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d101      	bne.n	8003a58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a54:	2302      	movs	r3, #2
 8003a56:	e041      	b.n	8003adc <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	223c      	movs	r2, #60	; 0x3c
 8003a5c:	2101      	movs	r1, #1
 8003a5e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	223d      	movs	r2, #61	; 0x3d
 8003a64:	2102      	movs	r1, #2
 8003a66:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2270      	movs	r2, #112	; 0x70
 8003a7c:	4393      	bics	r3, r2
 8003a7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	68fa      	ldr	r2, [r7, #12]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	68fa      	ldr	r2, [r7, #12]
 8003a90:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a13      	ldr	r2, [pc, #76]	; (8003ae4 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d009      	beq.n	8003ab0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a11      	ldr	r2, [pc, #68]	; (8003ae8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d004      	beq.n	8003ab0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a10      	ldr	r2, [pc, #64]	; (8003aec <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d10c      	bne.n	8003aca <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	2280      	movs	r2, #128	; 0x80
 8003ab4:	4393      	bics	r3, r2
 8003ab6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	68ba      	ldr	r2, [r7, #8]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	68ba      	ldr	r2, [r7, #8]
 8003ac8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	223d      	movs	r2, #61	; 0x3d
 8003ace:	2101      	movs	r1, #1
 8003ad0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	223c      	movs	r2, #60	; 0x3c
 8003ad6:	2100      	movs	r1, #0
 8003ad8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ada:	2300      	movs	r3, #0
}
 8003adc:	0018      	movs	r0, r3
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	b004      	add	sp, #16
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	40012c00 	.word	0x40012c00
 8003ae8:	40000400 	.word	0x40000400
 8003aec:	40014000 	.word	0x40014000

08003af0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b084      	sub	sp, #16
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003afa:	2300      	movs	r3, #0
 8003afc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	223c      	movs	r2, #60	; 0x3c
 8003b02:	5c9b      	ldrb	r3, [r3, r2]
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d101      	bne.n	8003b0c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003b08:	2302      	movs	r3, #2
 8003b0a:	e03e      	b.n	8003b8a <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	223c      	movs	r2, #60	; 0x3c
 8003b10:	2101      	movs	r1, #1
 8003b12:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	22ff      	movs	r2, #255	; 0xff
 8003b18:	4393      	bics	r3, r2
 8003b1a:	001a      	movs	r2, r3
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	4313      	orrs	r3, r2
 8003b22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	4a1b      	ldr	r2, [pc, #108]	; (8003b94 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8003b28:	401a      	ands	r2, r3
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	4a18      	ldr	r2, [pc, #96]	; (8003b98 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8003b36:	401a      	ands	r2, r3
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	4a16      	ldr	r2, [pc, #88]	; (8003b9c <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8003b44:	401a      	ands	r2, r3
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	4a13      	ldr	r2, [pc, #76]	; (8003ba0 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8003b52:	401a      	ands	r2, r3
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	691b      	ldr	r3, [r3, #16]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	4a11      	ldr	r2, [pc, #68]	; (8003ba4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8003b60:	401a      	ands	r2, r3
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	695b      	ldr	r3, [r3, #20]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	4a0e      	ldr	r2, [pc, #56]	; (8003ba8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8003b6e:	401a      	ands	r2, r3
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	69db      	ldr	r3, [r3, #28]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	68fa      	ldr	r2, [r7, #12]
 8003b7e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	223c      	movs	r2, #60	; 0x3c
 8003b84:	2100      	movs	r1, #0
 8003b86:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	0018      	movs	r0, r3
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	b004      	add	sp, #16
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	46c0      	nop			; (mov r8, r8)
 8003b94:	fffffcff 	.word	0xfffffcff
 8003b98:	fffffbff 	.word	0xfffffbff
 8003b9c:	fffff7ff 	.word	0xfffff7ff
 8003ba0:	ffffefff 	.word	0xffffefff
 8003ba4:	ffffdfff 	.word	0xffffdfff
 8003ba8:	ffffbfff 	.word	0xffffbfff

08003bac <setIRDutyCycle>:
//Set the duty cycle of the IR LED. The higher the duty
//ratio, the faster the response time achieved with higher power
//consumption. For example, PS_Duty = 1/320, peak IRED current = 100 mA,
//averaged current consumption is 100 mA/320 = 0.3125 mA.
void setIRDutyCycle(uint16_t dutyValue)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	0002      	movs	r2, r0
 8003bb4:	1dbb      	adds	r3, r7, #6
 8003bb6:	801a      	strh	r2, [r3, #0]
  if(dutyValue > 320 - 1) dutyValue = VCNL4040_PS_DUTY_320;
 8003bb8:	1dbb      	adds	r3, r7, #6
 8003bba:	881a      	ldrh	r2, [r3, #0]
 8003bbc:	23a0      	movs	r3, #160	; 0xa0
 8003bbe:	005b      	lsls	r3, r3, #1
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d303      	bcc.n	8003bcc <setIRDutyCycle+0x20>
 8003bc4:	22c0      	movs	r2, #192	; 0xc0
 8003bc6:	1dbb      	adds	r3, r7, #6
 8003bc8:	801a      	strh	r2, [r3, #0]
 8003bca:	e012      	b.n	8003bf2 <setIRDutyCycle+0x46>
  else if(dutyValue > 160 - 1) dutyValue = VCNL4040_PS_DUTY_160;
 8003bcc:	1dbb      	adds	r3, r7, #6
 8003bce:	881b      	ldrh	r3, [r3, #0]
 8003bd0:	2b9f      	cmp	r3, #159	; 0x9f
 8003bd2:	d903      	bls.n	8003bdc <setIRDutyCycle+0x30>
 8003bd4:	2280      	movs	r2, #128	; 0x80
 8003bd6:	1dbb      	adds	r3, r7, #6
 8003bd8:	801a      	strh	r2, [r3, #0]
 8003bda:	e00a      	b.n	8003bf2 <setIRDutyCycle+0x46>
  else if(dutyValue > 80 - 1) dutyValue = VCNL4040_PS_DUTY_80;
 8003bdc:	1dbb      	adds	r3, r7, #6
 8003bde:	881b      	ldrh	r3, [r3, #0]
 8003be0:	2b4f      	cmp	r3, #79	; 0x4f
 8003be2:	d903      	bls.n	8003bec <setIRDutyCycle+0x40>
 8003be4:	2240      	movs	r2, #64	; 0x40
 8003be6:	1dbb      	adds	r3, r7, #6
 8003be8:	801a      	strh	r2, [r3, #0]
 8003bea:	e002      	b.n	8003bf2 <setIRDutyCycle+0x46>
  else dutyValue = VCNL4040_PS_DUTY_40;
 8003bec:	2200      	movs	r2, #0
 8003bee:	1dbb      	adds	r3, r7, #6
 8003bf0:	801a      	strh	r2, [r3, #0]

  bitMask(VCNL4040_PS_CONF1, LOWER, VCNL4040_PS_DUTY_MASK, dutyValue);
 8003bf2:	223f      	movs	r2, #63	; 0x3f
 8003bf4:	1dbb      	adds	r3, r7, #6
 8003bf6:	881b      	ldrh	r3, [r3, #0]
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	2101      	movs	r1, #1
 8003bfc:	2003      	movs	r0, #3
 8003bfe:	f000 f94c 	bl	8003e9a <bitMask>
}
 8003c02:	46c0      	nop			; (mov r8, r8)
 8003c04:	46bd      	mov	sp, r7
 8003c06:	b002      	add	sp, #8
 8003c08:	bd80      	pop	{r7, pc}

08003c0a <setProxIntegrationTime>:
  bitMask(VCNL4040_ALS_CONF, LOWER, VCNL4040_ALS_IT_MASK, timeValue);
}

//Sets the integration time for the proximity sensor
void setProxIntegrationTime(uint8_t timeValue)
{
 8003c0a:	b580      	push	{r7, lr}
 8003c0c:	b082      	sub	sp, #8
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	0002      	movs	r2, r0
 8003c12:	1dfb      	adds	r3, r7, #7
 8003c14:	701a      	strb	r2, [r3, #0]
  if(timeValue > 8 - 1) timeValue = VCNL4040_PS_IT_8T;
 8003c16:	1dfb      	adds	r3, r7, #7
 8003c18:	781b      	ldrb	r3, [r3, #0]
 8003c1a:	2b07      	cmp	r3, #7
 8003c1c:	d903      	bls.n	8003c26 <setProxIntegrationTime+0x1c>
 8003c1e:	1dfb      	adds	r3, r7, #7
 8003c20:	220e      	movs	r2, #14
 8003c22:	701a      	strb	r2, [r3, #0]
 8003c24:	e01a      	b.n	8003c5c <setProxIntegrationTime+0x52>
  else if(timeValue > 4 - 1) timeValue = VCNL4040_PS_IT_4T;
 8003c26:	1dfb      	adds	r3, r7, #7
 8003c28:	781b      	ldrb	r3, [r3, #0]
 8003c2a:	2b03      	cmp	r3, #3
 8003c2c:	d903      	bls.n	8003c36 <setProxIntegrationTime+0x2c>
 8003c2e:	1dfb      	adds	r3, r7, #7
 8003c30:	220c      	movs	r2, #12
 8003c32:	701a      	strb	r2, [r3, #0]
 8003c34:	e012      	b.n	8003c5c <setProxIntegrationTime+0x52>
  else if(timeValue > 3 - 1) timeValue = VCNL4040_PS_IT_3T;
 8003c36:	1dfb      	adds	r3, r7, #7
 8003c38:	781b      	ldrb	r3, [r3, #0]
 8003c3a:	2b02      	cmp	r3, #2
 8003c3c:	d903      	bls.n	8003c46 <setProxIntegrationTime+0x3c>
 8003c3e:	1dfb      	adds	r3, r7, #7
 8003c40:	2208      	movs	r2, #8
 8003c42:	701a      	strb	r2, [r3, #0]
 8003c44:	e00a      	b.n	8003c5c <setProxIntegrationTime+0x52>
  else if(timeValue > 2 - 1) timeValue = VCNL4040_PS_IT_2T;
 8003c46:	1dfb      	adds	r3, r7, #7
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d903      	bls.n	8003c56 <setProxIntegrationTime+0x4c>
 8003c4e:	1dfb      	adds	r3, r7, #7
 8003c50:	2204      	movs	r2, #4
 8003c52:	701a      	strb	r2, [r3, #0]
 8003c54:	e002      	b.n	8003c5c <setProxIntegrationTime+0x52>
  else timeValue = VCNL4040_PS_IT_1T;
 8003c56:	1dfb      	adds	r3, r7, #7
 8003c58:	2200      	movs	r2, #0
 8003c5a:	701a      	strb	r2, [r3, #0]

  bitMask(VCNL4040_PS_CONF1, LOWER, VCNL4040_PS_IT_MASK, timeValue);
 8003c5c:	22f1      	movs	r2, #241	; 0xf1
 8003c5e:	1dfb      	adds	r3, r7, #7
 8003c60:	781b      	ldrb	r3, [r3, #0]
 8003c62:	2101      	movs	r1, #1
 8003c64:	2003      	movs	r0, #3
 8003c66:	f000 f918 	bl	8003e9a <bitMask>
}
 8003c6a:	46c0      	nop			; (mov r8, r8)
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	b002      	add	sp, #8
 8003c70:	bd80      	pop	{r7, pc}

08003c72 <powerOnProximity>:

//Power on the prox sensing portion of the device
void powerOnProximity(void)
{
 8003c72:	b580      	push	{r7, lr}
 8003c74:	af00      	add	r7, sp, #0
  bitMask(VCNL4040_PS_CONF1, LOWER, VCNL4040_PS_SD_MASK, VCNL4040_PS_SD_POWER_ON);
 8003c76:	22fe      	movs	r2, #254	; 0xfe
 8003c78:	2300      	movs	r3, #0
 8003c7a:	2101      	movs	r1, #1
 8003c7c:	2003      	movs	r0, #3
 8003c7e:	f000 f90c 	bl	8003e9a <bitMask>
}
 8003c82:	46c0      	nop			; (mov r8, r8)
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <setProxResolution>:
  bitMask(VCNL4040_PS_CONF1, LOWER, VCNL4040_PS_SD_MASK, VCNL4040_PS_SD_POWER_OFF);
}

//Sets the proximity resolution
void setProxResolution(uint8_t resolutionValue)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b082      	sub	sp, #8
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	0002      	movs	r2, r0
 8003c90:	1dfb      	adds	r3, r7, #7
 8003c92:	701a      	strb	r2, [r3, #0]
	if(resolutionValue > 16 - 1) resolutionValue = VCNL4040_PS_HD_16_BIT;
 8003c94:	1dfb      	adds	r3, r7, #7
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	2b0f      	cmp	r3, #15
 8003c9a:	d903      	bls.n	8003ca4 <setProxResolution+0x1c>
 8003c9c:	1dfb      	adds	r3, r7, #7
 8003c9e:	2208      	movs	r2, #8
 8003ca0:	701a      	strb	r2, [r3, #0]
 8003ca2:	e002      	b.n	8003caa <setProxResolution+0x22>
	else resolutionValue = VCNL4040_PS_HD_12_BIT;
 8003ca4:	1dfb      	adds	r3, r7, #7
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	701a      	strb	r2, [r3, #0]

  bitMask(VCNL4040_PS_CONF2, UPPER, VCNL4040_PS_HD_MASK, resolutionValue);
 8003caa:	22f7      	movs	r2, #247	; 0xf7
 8003cac:	1dfb      	adds	r3, r7, #7
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	2100      	movs	r1, #0
 8003cb2:	2003      	movs	r0, #3
 8003cb4:	f000 f8f1 	bl	8003e9a <bitMask>
}
 8003cb8:	46c0      	nop			; (mov r8, r8)
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	b002      	add	sp, #8
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <enableSmartPersistance>:
//Enable smart persistance
//To accelerate the PS response time, smart
//persistence prevents the misjudgment of proximity sensing
//but also keeps a fast response time.
void enableSmartPersistance(void)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	af00      	add	r7, sp, #0
  bitMask(VCNL4040_PS_CONF3, LOWER, VCNL4040_PS_SMART_PERS_MASK, VCNL4040_PS_SMART_PERS_ENABLE);
 8003cc4:	22ef      	movs	r2, #239	; 0xef
 8003cc6:	2302      	movs	r3, #2
 8003cc8:	2101      	movs	r1, #1
 8003cca:	2004      	movs	r0, #4
 8003ccc:	f000 f8e5 	bl	8003e9a <bitMask>
}
 8003cd0:	46c0      	nop			; (mov r8, r8)
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}

08003cd6 <setLEDCurrent>:
  bitMask(VCNL4040_PS_MS, UPPER, VCNL4040_PS_MS_MASK, VCNL4040_PS_MS_DISABLE);
}

//Set the IR LED sink current to one of 8 settings
void setLEDCurrent(uint8_t currentValue)
{
 8003cd6:	b580      	push	{r7, lr}
 8003cd8:	b082      	sub	sp, #8
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	0002      	movs	r2, r0
 8003cde:	1dfb      	adds	r3, r7, #7
 8003ce0:	701a      	strb	r2, [r3, #0]
	if(currentValue > 200 - 1) currentValue = VCNL4040_LED_200MA;
 8003ce2:	1dfb      	adds	r3, r7, #7
 8003ce4:	781b      	ldrb	r3, [r3, #0]
 8003ce6:	2bc7      	cmp	r3, #199	; 0xc7
 8003ce8:	d903      	bls.n	8003cf2 <setLEDCurrent+0x1c>
 8003cea:	1dfb      	adds	r3, r7, #7
 8003cec:	2207      	movs	r2, #7
 8003cee:	701a      	strb	r2, [r3, #0]
 8003cf0:	e032      	b.n	8003d58 <setLEDCurrent+0x82>
	else if(currentValue > 180 - 1) currentValue = VCNL4040_LED_180MA;
 8003cf2:	1dfb      	adds	r3, r7, #7
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	2bb3      	cmp	r3, #179	; 0xb3
 8003cf8:	d903      	bls.n	8003d02 <setLEDCurrent+0x2c>
 8003cfa:	1dfb      	adds	r3, r7, #7
 8003cfc:	2206      	movs	r2, #6
 8003cfe:	701a      	strb	r2, [r3, #0]
 8003d00:	e02a      	b.n	8003d58 <setLEDCurrent+0x82>
	else if(currentValue > 160 - 1) currentValue = VCNL4040_LED_160MA;
 8003d02:	1dfb      	adds	r3, r7, #7
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	2b9f      	cmp	r3, #159	; 0x9f
 8003d08:	d903      	bls.n	8003d12 <setLEDCurrent+0x3c>
 8003d0a:	1dfb      	adds	r3, r7, #7
 8003d0c:	2205      	movs	r2, #5
 8003d0e:	701a      	strb	r2, [r3, #0]
 8003d10:	e022      	b.n	8003d58 <setLEDCurrent+0x82>
	else if(currentValue > 140 - 1) currentValue = VCNL4040_LED_140MA;
 8003d12:	1dfb      	adds	r3, r7, #7
 8003d14:	781b      	ldrb	r3, [r3, #0]
 8003d16:	2b8b      	cmp	r3, #139	; 0x8b
 8003d18:	d903      	bls.n	8003d22 <setLEDCurrent+0x4c>
 8003d1a:	1dfb      	adds	r3, r7, #7
 8003d1c:	2204      	movs	r2, #4
 8003d1e:	701a      	strb	r2, [r3, #0]
 8003d20:	e01a      	b.n	8003d58 <setLEDCurrent+0x82>
	else if(currentValue > 120 - 1) currentValue = VCNL4040_LED_120MA;
 8003d22:	1dfb      	adds	r3, r7, #7
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	2b77      	cmp	r3, #119	; 0x77
 8003d28:	d903      	bls.n	8003d32 <setLEDCurrent+0x5c>
 8003d2a:	1dfb      	adds	r3, r7, #7
 8003d2c:	2203      	movs	r2, #3
 8003d2e:	701a      	strb	r2, [r3, #0]
 8003d30:	e012      	b.n	8003d58 <setLEDCurrent+0x82>
	else if(currentValue > 100 - 1) currentValue = VCNL4040_LED_100MA;
 8003d32:	1dfb      	adds	r3, r7, #7
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	2b63      	cmp	r3, #99	; 0x63
 8003d38:	d903      	bls.n	8003d42 <setLEDCurrent+0x6c>
 8003d3a:	1dfb      	adds	r3, r7, #7
 8003d3c:	2202      	movs	r2, #2
 8003d3e:	701a      	strb	r2, [r3, #0]
 8003d40:	e00a      	b.n	8003d58 <setLEDCurrent+0x82>
	else if(currentValue > 75 - 1) currentValue = VCNL4040_LED_75MA;
 8003d42:	1dfb      	adds	r3, r7, #7
 8003d44:	781b      	ldrb	r3, [r3, #0]
 8003d46:	2b4a      	cmp	r3, #74	; 0x4a
 8003d48:	d903      	bls.n	8003d52 <setLEDCurrent+0x7c>
 8003d4a:	1dfb      	adds	r3, r7, #7
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	701a      	strb	r2, [r3, #0]
 8003d50:	e002      	b.n	8003d58 <setLEDCurrent+0x82>
	else currentValue = VCNL4040_LED_50MA;
 8003d52:	1dfb      	adds	r3, r7, #7
 8003d54:	2200      	movs	r2, #0
 8003d56:	701a      	strb	r2, [r3, #0]

	bitMask(VCNL4040_PS_MS, UPPER, VCNL4040_LED_I_MASK, currentValue);
 8003d58:	22f8      	movs	r2, #248	; 0xf8
 8003d5a:	1dfb      	adds	r3, r7, #7
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	2100      	movs	r1, #0
 8003d60:	2004      	movs	r0, #4
 8003d62:	f000 f89a 	bl	8003e9a <bitMask>
}
 8003d66:	46c0      	nop			; (mov r8, r8)
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	b002      	add	sp, #8
 8003d6c:	bd80      	pop	{r7, pc}

08003d6e <getProximity>:
  writeCommand(VCNL4040_PS_THDL, threshold);
}

//Read the Proximity value
uint16_t getProximity()
{
 8003d6e:	b580      	push	{r7, lr}
 8003d70:	af00      	add	r7, sp, #0
  return (readCommand(VCNL4040_PS_DATA));
 8003d72:	2008      	movs	r0, #8
 8003d74:	f7fc fd00 	bl	8000778 <readCommand>
 8003d78:	0003      	movs	r3, r0
}
 8003d7a:	0018      	movs	r0, r3
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}

08003d80 <writeCommandLower>:
}
*/

//Given a command code (address) write to the lower byte without affecting the upper byte
bool writeCommandLower(uint8_t commandCode, uint8_t newValue)
{
 8003d80:	b5b0      	push	{r4, r5, r7, lr}
 8003d82:	b084      	sub	sp, #16
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	0002      	movs	r2, r0
 8003d88:	1dfb      	adds	r3, r7, #7
 8003d8a:	701a      	strb	r2, [r3, #0]
 8003d8c:	1dbb      	adds	r3, r7, #6
 8003d8e:	1c0a      	adds	r2, r1, #0
 8003d90:	701a      	strb	r2, [r3, #0]
  uint16_t commandValue = readCommand(commandCode);
 8003d92:	250e      	movs	r5, #14
 8003d94:	197c      	adds	r4, r7, r5
 8003d96:	1dfb      	adds	r3, r7, #7
 8003d98:	781b      	ldrb	r3, [r3, #0]
 8003d9a:	0018      	movs	r0, r3
 8003d9c:	f7fc fcec 	bl	8000778 <readCommand>
 8003da0:	0003      	movs	r3, r0
 8003da2:	8023      	strh	r3, [r4, #0]
  commandValue &= 0xFF00; //Remove lower 8 bits
 8003da4:	0028      	movs	r0, r5
 8003da6:	183b      	adds	r3, r7, r0
 8003da8:	183a      	adds	r2, r7, r0
 8003daa:	8812      	ldrh	r2, [r2, #0]
 8003dac:	21ff      	movs	r1, #255	; 0xff
 8003dae:	438a      	bics	r2, r1
 8003db0:	801a      	strh	r2, [r3, #0]
  commandValue |= (uint16_t)newValue; //Mask in
 8003db2:	1dbb      	adds	r3, r7, #6
 8003db4:	781b      	ldrb	r3, [r3, #0]
 8003db6:	b299      	uxth	r1, r3
 8003db8:	183b      	adds	r3, r7, r0
 8003dba:	183a      	adds	r2, r7, r0
 8003dbc:	8812      	ldrh	r2, [r2, #0]
 8003dbe:	430a      	orrs	r2, r1
 8003dc0:	801a      	strh	r2, [r3, #0]
  return (writeCommand(commandCode, commandValue));
 8003dc2:	183b      	adds	r3, r7, r0
 8003dc4:	881a      	ldrh	r2, [r3, #0]
 8003dc6:	1dfb      	adds	r3, r7, #7
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	0011      	movs	r1, r2
 8003dcc:	0018      	movs	r0, r3
 8003dce:	f7fc fd0b 	bl	80007e8 <writeCommand>
 8003dd2:	0003      	movs	r3, r0
}
 8003dd4:	0018      	movs	r0, r3
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	b004      	add	sp, #16
 8003dda:	bdb0      	pop	{r4, r5, r7, pc}

08003ddc <writeCommandUpper>:

//Given a command code (address) write to the upper byte without affecting the lower byte
bool writeCommandUpper(uint8_t commandCode, uint8_t newValue)
{
 8003ddc:	b5b0      	push	{r4, r5, r7, lr}
 8003dde:	b084      	sub	sp, #16
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	0002      	movs	r2, r0
 8003de4:	1dfb      	adds	r3, r7, #7
 8003de6:	701a      	strb	r2, [r3, #0]
 8003de8:	1dbb      	adds	r3, r7, #6
 8003dea:	1c0a      	adds	r2, r1, #0
 8003dec:	701a      	strb	r2, [r3, #0]
  uint16_t commandValue = readCommand(commandCode);
 8003dee:	250e      	movs	r5, #14
 8003df0:	197c      	adds	r4, r7, r5
 8003df2:	1dfb      	adds	r3, r7, #7
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	0018      	movs	r0, r3
 8003df8:	f7fc fcbe 	bl	8000778 <readCommand>
 8003dfc:	0003      	movs	r3, r0
 8003dfe:	8023      	strh	r3, [r4, #0]
  commandValue &= 0x00FF; //Remove upper 8 bits
 8003e00:	0028      	movs	r0, r5
 8003e02:	183b      	adds	r3, r7, r0
 8003e04:	183a      	adds	r2, r7, r0
 8003e06:	8812      	ldrh	r2, [r2, #0]
 8003e08:	21ff      	movs	r1, #255	; 0xff
 8003e0a:	400a      	ands	r2, r1
 8003e0c:	801a      	strh	r2, [r3, #0]
  commandValue |= (uint16_t)newValue << 8; //Mask in
 8003e0e:	1dbb      	adds	r3, r7, #6
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	021b      	lsls	r3, r3, #8
 8003e14:	b21a      	sxth	r2, r3
 8003e16:	183b      	adds	r3, r7, r0
 8003e18:	2100      	movs	r1, #0
 8003e1a:	5e5b      	ldrsh	r3, [r3, r1]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	b21a      	sxth	r2, r3
 8003e20:	183b      	adds	r3, r7, r0
 8003e22:	801a      	strh	r2, [r3, #0]
  return (writeCommand(commandCode, commandValue));
 8003e24:	183b      	adds	r3, r7, r0
 8003e26:	881a      	ldrh	r2, [r3, #0]
 8003e28:	1dfb      	adds	r3, r7, #7
 8003e2a:	781b      	ldrb	r3, [r3, #0]
 8003e2c:	0011      	movs	r1, r2
 8003e2e:	0018      	movs	r0, r3
 8003e30:	f7fc fcda 	bl	80007e8 <writeCommand>
 8003e34:	0003      	movs	r3, r0
}
 8003e36:	0018      	movs	r0, r3
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	b004      	add	sp, #16
 8003e3c:	bdb0      	pop	{r4, r5, r7, pc}

08003e3e <readCommandLower>:

//Given a command code (address) read the lower byte
uint8_t readCommandLower(uint8_t commandCode)
{
 8003e3e:	b5b0      	push	{r4, r5, r7, lr}
 8003e40:	b084      	sub	sp, #16
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	0002      	movs	r2, r0
 8003e46:	1dfb      	adds	r3, r7, #7
 8003e48:	701a      	strb	r2, [r3, #0]
  uint16_t commandValue = readCommand(commandCode);
 8003e4a:	250e      	movs	r5, #14
 8003e4c:	197c      	adds	r4, r7, r5
 8003e4e:	1dfb      	adds	r3, r7, #7
 8003e50:	781b      	ldrb	r3, [r3, #0]
 8003e52:	0018      	movs	r0, r3
 8003e54:	f7fc fc90 	bl	8000778 <readCommand>
 8003e58:	0003      	movs	r3, r0
 8003e5a:	8023      	strh	r3, [r4, #0]
  return (commandValue & 0xFF);
 8003e5c:	197b      	adds	r3, r7, r5
 8003e5e:	881b      	ldrh	r3, [r3, #0]
 8003e60:	b2db      	uxtb	r3, r3
}
 8003e62:	0018      	movs	r0, r3
 8003e64:	46bd      	mov	sp, r7
 8003e66:	b004      	add	sp, #16
 8003e68:	bdb0      	pop	{r4, r5, r7, pc}

08003e6a <readCommandUpper>:

//Given a command code (address) read the upper byte
uint8_t readCommandUpper(uint8_t commandCode)
{
 8003e6a:	b5b0      	push	{r4, r5, r7, lr}
 8003e6c:	b084      	sub	sp, #16
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	0002      	movs	r2, r0
 8003e72:	1dfb      	adds	r3, r7, #7
 8003e74:	701a      	strb	r2, [r3, #0]
  uint16_t commandValue = readCommand(commandCode);
 8003e76:	250e      	movs	r5, #14
 8003e78:	197c      	adds	r4, r7, r5
 8003e7a:	1dfb      	adds	r3, r7, #7
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	0018      	movs	r0, r3
 8003e80:	f7fc fc7a 	bl	8000778 <readCommand>
 8003e84:	0003      	movs	r3, r0
 8003e86:	8023      	strh	r3, [r4, #0]
  return (commandValue >> 8);
 8003e88:	197b      	adds	r3, r7, r5
 8003e8a:	881b      	ldrh	r3, [r3, #0]
 8003e8c:	0a1b      	lsrs	r3, r3, #8
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	b2db      	uxtb	r3, r3
}
 8003e92:	0018      	movs	r0, r3
 8003e94:	46bd      	mov	sp, r7
 8003e96:	b004      	add	sp, #16
 8003e98:	bdb0      	pop	{r4, r5, r7, pc}

08003e9a <bitMask>:
//commandHeight is used to select between the upper or lower byte of command register
//Example:
//Write dutyValue into PS_CONF1, lower byte, using the Duty_Mask
//bitMask(VCNL4040_PS_CONF1, LOWER, VCNL4040_PS_DUTY_MASK, dutyValue);
void bitMask(uint8_t commandAddress, bool commandHeight, uint8_t mask, uint8_t thing)
{
 8003e9a:	b5b0      	push	{r4, r5, r7, lr}
 8003e9c:	b084      	sub	sp, #16
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	0005      	movs	r5, r0
 8003ea2:	000c      	movs	r4, r1
 8003ea4:	0010      	movs	r0, r2
 8003ea6:	0019      	movs	r1, r3
 8003ea8:	1dfb      	adds	r3, r7, #7
 8003eaa:	1c2a      	adds	r2, r5, #0
 8003eac:	701a      	strb	r2, [r3, #0]
 8003eae:	1dbb      	adds	r3, r7, #6
 8003eb0:	1c22      	adds	r2, r4, #0
 8003eb2:	701a      	strb	r2, [r3, #0]
 8003eb4:	1d7b      	adds	r3, r7, #5
 8003eb6:	1c02      	adds	r2, r0, #0
 8003eb8:	701a      	strb	r2, [r3, #0]
 8003eba:	1d3b      	adds	r3, r7, #4
 8003ebc:	1c0a      	adds	r2, r1, #0
 8003ebe:	701a      	strb	r2, [r3, #0]
  // Grab current register context
  uint8_t registerContents;
  if (commandHeight == LOWER) registerContents = readCommandLower(commandAddress);
 8003ec0:	1dbb      	adds	r3, r7, #6
 8003ec2:	781b      	ldrb	r3, [r3, #0]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d009      	beq.n	8003edc <bitMask+0x42>
 8003ec8:	230f      	movs	r3, #15
 8003eca:	18fc      	adds	r4, r7, r3
 8003ecc:	1dfb      	adds	r3, r7, #7
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	0018      	movs	r0, r3
 8003ed2:	f7ff ffb4 	bl	8003e3e <readCommandLower>
 8003ed6:	0003      	movs	r3, r0
 8003ed8:	7023      	strb	r3, [r4, #0]
 8003eda:	e008      	b.n	8003eee <bitMask+0x54>
  else registerContents = readCommandUpper(commandAddress);
 8003edc:	230f      	movs	r3, #15
 8003ede:	18fc      	adds	r4, r7, r3
 8003ee0:	1dfb      	adds	r3, r7, #7
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	0018      	movs	r0, r3
 8003ee6:	f7ff ffc0 	bl	8003e6a <readCommandUpper>
 8003eea:	0003      	movs	r3, r0
 8003eec:	7023      	strb	r3, [r4, #0]

  // Zero-out the portions of the register we're interested in
  registerContents &= mask;
 8003eee:	200f      	movs	r0, #15
 8003ef0:	183b      	adds	r3, r7, r0
 8003ef2:	183a      	adds	r2, r7, r0
 8003ef4:	1d79      	adds	r1, r7, #5
 8003ef6:	7812      	ldrb	r2, [r2, #0]
 8003ef8:	7809      	ldrb	r1, [r1, #0]
 8003efa:	400a      	ands	r2, r1
 8003efc:	701a      	strb	r2, [r3, #0]

  // Mask in new thing
  registerContents |= thing;
 8003efe:	183b      	adds	r3, r7, r0
 8003f00:	1839      	adds	r1, r7, r0
 8003f02:	1d3a      	adds	r2, r7, #4
 8003f04:	7809      	ldrb	r1, [r1, #0]
 8003f06:	7812      	ldrb	r2, [r2, #0]
 8003f08:	430a      	orrs	r2, r1
 8003f0a:	701a      	strb	r2, [r3, #0]

  // Change contents
  if (commandHeight == LOWER) writeCommandLower(commandAddress, registerContents);
 8003f0c:	1dbb      	adds	r3, r7, #6
 8003f0e:	781b      	ldrb	r3, [r3, #0]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d008      	beq.n	8003f26 <bitMask+0x8c>
 8003f14:	183b      	adds	r3, r7, r0
 8003f16:	781a      	ldrb	r2, [r3, #0]
 8003f18:	1dfb      	adds	r3, r7, #7
 8003f1a:	781b      	ldrb	r3, [r3, #0]
 8003f1c:	0011      	movs	r1, r2
 8003f1e:	0018      	movs	r0, r3
 8003f20:	f7ff ff2e 	bl	8003d80 <writeCommandLower>
  else writeCommandUpper(commandAddress, registerContents);
}
 8003f24:	e008      	b.n	8003f38 <bitMask+0x9e>
  else writeCommandUpper(commandAddress, registerContents);
 8003f26:	230f      	movs	r3, #15
 8003f28:	18fb      	adds	r3, r7, r3
 8003f2a:	781a      	ldrb	r2, [r3, #0]
 8003f2c:	1dfb      	adds	r3, r7, #7
 8003f2e:	781b      	ldrb	r3, [r3, #0]
 8003f30:	0011      	movs	r1, r2
 8003f32:	0018      	movs	r0, r3
 8003f34:	f7ff ff52 	bl	8003ddc <writeCommandUpper>
}
 8003f38:	46c0      	nop			; (mov r8, r8)
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	b004      	add	sp, #16
 8003f3e:	bdb0      	pop	{r4, r5, r7, pc}

08003f40 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8003f40:	b580      	push	{r7, lr}
 8003f42:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8003f44:	46c0      	nop			; (mov r8, r8)
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
	...

08003f4c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b086      	sub	sp, #24
 8003f50:	af04      	add	r7, sp, #16
 8003f52:	0002      	movs	r2, r0
 8003f54:	1dfb      	adds	r3, r7, #7
 8003f56:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8003f58:	4808      	ldr	r0, [pc, #32]	; (8003f7c <ssd1306_WriteCommand+0x30>)
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	425b      	negs	r3, r3
 8003f5e:	9302      	str	r3, [sp, #8]
 8003f60:	2301      	movs	r3, #1
 8003f62:	9301      	str	r3, [sp, #4]
 8003f64:	1dfb      	adds	r3, r7, #7
 8003f66:	9300      	str	r3, [sp, #0]
 8003f68:	2301      	movs	r3, #1
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	2178      	movs	r1, #120	; 0x78
 8003f6e:	f7fd fdf1 	bl	8001b54 <HAL_I2C_Mem_Write>
}
 8003f72:	46c0      	nop			; (mov r8, r8)
 8003f74:	46bd      	mov	sp, r7
 8003f76:	b002      	add	sp, #8
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	46c0      	nop			; (mov r8, r8)
 8003f7c:	200008cc 	.word	0x200008cc

08003f80 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b086      	sub	sp, #24
 8003f84:	af04      	add	r7, sp, #16
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	4808      	ldr	r0, [pc, #32]	; (8003fb0 <ssd1306_WriteData+0x30>)
 8003f90:	2201      	movs	r2, #1
 8003f92:	4252      	negs	r2, r2
 8003f94:	9202      	str	r2, [sp, #8]
 8003f96:	9301      	str	r3, [sp, #4]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	9300      	str	r3, [sp, #0]
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	2240      	movs	r2, #64	; 0x40
 8003fa0:	2178      	movs	r1, #120	; 0x78
 8003fa2:	f7fd fdd7 	bl	8001b54 <HAL_I2C_Mem_Write>
}
 8003fa6:	46c0      	nop			; (mov r8, r8)
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	b002      	add	sp, #8
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	46c0      	nop			; (mov r8, r8)
 8003fb0:	200008cc 	.word	0x200008cc

08003fb4 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8003fb8:	f7ff ffc2 	bl	8003f40 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8003fbc:	2064      	movs	r0, #100	; 0x64
 8003fbe:	f7fc fe87 	bl	8000cd0 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8003fc2:	2000      	movs	r0, #0
 8003fc4:	f000 fa0e 	bl	80043e4 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8003fc8:	2020      	movs	r0, #32
 8003fca:	f7ff ffbf 	bl	8003f4c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8003fce:	2000      	movs	r0, #0
 8003fd0:	f7ff ffbc 	bl	8003f4c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8003fd4:	20b0      	movs	r0, #176	; 0xb0
 8003fd6:	f7ff ffb9 	bl	8003f4c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8003fda:	20c8      	movs	r0, #200	; 0xc8
 8003fdc:	f7ff ffb6 	bl	8003f4c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8003fe0:	2000      	movs	r0, #0
 8003fe2:	f7ff ffb3 	bl	8003f4c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8003fe6:	2010      	movs	r0, #16
 8003fe8:	f7ff ffb0 	bl	8003f4c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDC);
 8003fec:	20dc      	movs	r0, #220	; 0xdc
 8003fee:	f7ff ffad 	bl	8003f4c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //--set start line address - CHECK
 8003ff2:	2000      	movs	r0, #0
 8003ff4:	f7ff ffaa 	bl	8003f4c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8003ff8:	20ff      	movs	r0, #255	; 0xff
 8003ffa:	f000 f9db 	bl	80043b4 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8003ffe:	20a1      	movs	r0, #161	; 0xa1
 8004000:	f7ff ffa4 	bl	8003f4c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8004004:	20a6      	movs	r0, #166	; 0xa6
 8004006:	f7ff ffa1 	bl	8003f4c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 800400a:	20a8      	movs	r0, #168	; 0xa8
 800400c:	f7ff ff9e 	bl	8003f4c <ssd1306_WriteCommand>
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
#elif (SSD1306_HEIGHT == 128)
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
    ssd1306_WriteCommand(0x3F);
 8004010:	203f      	movs	r0, #63	; 0x3f
 8004012:	f7ff ff9b 	bl	8003f4c <ssd1306_WriteCommand>
//#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8004016:	20a4      	movs	r0, #164	; 0xa4
 8004018:	f7ff ff98 	bl	8003f4c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800401c:	20d3      	movs	r0, #211	; 0xd3
 800401e:	f7ff ff95 	bl	8003f4c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //-not offset
 8004022:	2022      	movs	r0, #34	; 0x22
 8004024:	f7ff ff92 	bl	8003f4c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8004028:	20d5      	movs	r0, #213	; 0xd5
 800402a:	f7ff ff8f 	bl	8003f4c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 800402e:	20f0      	movs	r0, #240	; 0xf0
 8004030:	f7ff ff8c 	bl	8003f4c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8004034:	20d9      	movs	r0, #217	; 0xd9
 8004036:	f7ff ff89 	bl	8003f4c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 800403a:	2022      	movs	r0, #34	; 0x22
 800403c:	f7ff ff86 	bl	8003f4c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8004040:	20da      	movs	r0, #218	; 0xda
 8004042:	f7ff ff83 	bl	8003f4c <ssd1306_WriteCommand>
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
#elif (SSD1306_HEIGHT == 128)
    ssd1306_WriteCommand(0x12);
#else
    ssd1306_WriteCommand(0x12);
 8004046:	2012      	movs	r0, #18
 8004048:	f7ff ff80 	bl	8003f4c <ssd1306_WriteCommand>
//#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800404c:	20db      	movs	r0, #219	; 0xdb
 800404e:	f7ff ff7d 	bl	8003f4c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8004052:	2020      	movs	r0, #32
 8004054:	f7ff ff7a 	bl	8003f4c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8004058:	208d      	movs	r0, #141	; 0x8d
 800405a:	f7ff ff77 	bl	8003f4c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 800405e:	2014      	movs	r0, #20
 8004060:	f7ff ff74 	bl	8003f4c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8004064:	2001      	movs	r0, #1
 8004066:	f000 f9bd 	bl	80043e4 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 800406a:	2000      	movs	r0, #0
 800406c:	f000 f810 	bl	8004090 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8004070:	f000 f832 	bl	80040d8 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8004074:	4b05      	ldr	r3, [pc, #20]	; (800408c <ssd1306_Init+0xd8>)
 8004076:	2200      	movs	r2, #0
 8004078:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800407a:	4b04      	ldr	r3, [pc, #16]	; (800408c <ssd1306_Init+0xd8>)
 800407c:	2200      	movs	r2, #0
 800407e:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8004080:	4b02      	ldr	r3, [pc, #8]	; (800408c <ssd1306_Init+0xd8>)
 8004082:	2201      	movs	r2, #1
 8004084:	711a      	strb	r2, [r3, #4]
}
 8004086:	46c0      	nop			; (mov r8, r8)
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}
 800408c:	200008bc 	.word	0x200008bc

08004090 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8004090:	b580      	push	{r7, lr}
 8004092:	b084      	sub	sp, #16
 8004094:	af00      	add	r7, sp, #0
 8004096:	0002      	movs	r2, r0
 8004098:	1dfb      	adds	r3, r7, #7
 800409a:	701a      	strb	r2, [r3, #0]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800409c:	2300      	movs	r3, #0
 800409e:	60fb      	str	r3, [r7, #12]
 80040a0:	e00e      	b.n	80040c0 <ssd1306_Fill+0x30>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80040a2:	1dfb      	adds	r3, r7, #7
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d101      	bne.n	80040ae <ssd1306_Fill+0x1e>
 80040aa:	2100      	movs	r1, #0
 80040ac:	e000      	b.n	80040b0 <ssd1306_Fill+0x20>
 80040ae:	21ff      	movs	r1, #255	; 0xff
 80040b0:	4a08      	ldr	r2, [pc, #32]	; (80040d4 <ssd1306_Fill+0x44>)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	18d3      	adds	r3, r2, r3
 80040b6:	1c0a      	adds	r2, r1, #0
 80040b8:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	3301      	adds	r3, #1
 80040be:	60fb      	str	r3, [r7, #12]
 80040c0:	68fa      	ldr	r2, [r7, #12]
 80040c2:	2382      	movs	r3, #130	; 0x82
 80040c4:	011b      	lsls	r3, r3, #4
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d3eb      	bcc.n	80040a2 <ssd1306_Fill+0x12>
    }
}
 80040ca:	46c0      	nop			; (mov r8, r8)
 80040cc:	46c0      	nop			; (mov r8, r8)
 80040ce:	46bd      	mov	sp, r7
 80040d0:	b004      	add	sp, #16
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	2000009c 	.word	0x2000009c

080040d8 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 80040d8:	b580      	push	{r7, lr}
 80040da:	b082      	sub	sp, #8
 80040dc:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80040de:	1dfb      	adds	r3, r7, #7
 80040e0:	2200      	movs	r2, #0
 80040e2:	701a      	strb	r2, [r3, #0]
 80040e4:	e01a      	b.n	800411c <ssd1306_UpdateScreen+0x44>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80040e6:	1dfb      	adds	r3, r7, #7
 80040e8:	781b      	ldrb	r3, [r3, #0]
 80040ea:	3b50      	subs	r3, #80	; 0x50
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	0018      	movs	r0, r3
 80040f0:	f7ff ff2c 	bl	8003f4c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 80040f4:	2000      	movs	r0, #0
 80040f6:	f7ff ff29 	bl	8003f4c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 80040fa:	2010      	movs	r0, #16
 80040fc:	f7ff ff26 	bl	8003f4c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8004100:	1dfb      	adds	r3, r7, #7
 8004102:	781b      	ldrb	r3, [r3, #0]
 8004104:	01da      	lsls	r2, r3, #7
 8004106:	4b0a      	ldr	r3, [pc, #40]	; (8004130 <ssd1306_UpdateScreen+0x58>)
 8004108:	18d3      	adds	r3, r2, r3
 800410a:	2180      	movs	r1, #128	; 0x80
 800410c:	0018      	movs	r0, r3
 800410e:	f7ff ff37 	bl	8003f80 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8004112:	1dfb      	adds	r3, r7, #7
 8004114:	781a      	ldrb	r2, [r3, #0]
 8004116:	1dfb      	adds	r3, r7, #7
 8004118:	3201      	adds	r2, #1
 800411a:	701a      	strb	r2, [r3, #0]
 800411c:	1dfb      	adds	r3, r7, #7
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	2b0f      	cmp	r3, #15
 8004122:	d9e0      	bls.n	80040e6 <ssd1306_UpdateScreen+0xe>
    }
}
 8004124:	46c0      	nop			; (mov r8, r8)
 8004126:	46c0      	nop			; (mov r8, r8)
 8004128:	46bd      	mov	sp, r7
 800412a:	b002      	add	sp, #8
 800412c:	bd80      	pop	{r7, pc}
 800412e:	46c0      	nop			; (mov r8, r8)
 8004130:	2000009c 	.word	0x2000009c

08004134 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8004134:	b590      	push	{r4, r7, lr}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
 800413a:	0004      	movs	r4, r0
 800413c:	0008      	movs	r0, r1
 800413e:	0011      	movs	r1, r2
 8004140:	1dfb      	adds	r3, r7, #7
 8004142:	1c22      	adds	r2, r4, #0
 8004144:	701a      	strb	r2, [r3, #0]
 8004146:	1dbb      	adds	r3, r7, #6
 8004148:	1c02      	adds	r2, r0, #0
 800414a:	701a      	strb	r2, [r3, #0]
 800414c:	1d7b      	adds	r3, r7, #5
 800414e:	1c0a      	adds	r2, r1, #0
 8004150:	701a      	strb	r2, [r3, #0]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8004152:	1dfb      	adds	r3, r7, #7
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	b25b      	sxtb	r3, r3
 8004158:	2b00      	cmp	r3, #0
 800415a:	db47      	blt.n	80041ec <ssd1306_DrawPixel+0xb8>
 800415c:	1dbb      	adds	r3, r7, #6
 800415e:	781b      	ldrb	r3, [r3, #0]
 8004160:	2b81      	cmp	r3, #129	; 0x81
 8004162:	d843      	bhi.n	80041ec <ssd1306_DrawPixel+0xb8>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8004164:	1d7b      	adds	r3, r7, #5
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	2b01      	cmp	r3, #1
 800416a:	d11e      	bne.n	80041aa <ssd1306_DrawPixel+0x76>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800416c:	1dfb      	adds	r3, r7, #7
 800416e:	781a      	ldrb	r2, [r3, #0]
 8004170:	1dbb      	adds	r3, r7, #6
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	08db      	lsrs	r3, r3, #3
 8004176:	b2d8      	uxtb	r0, r3
 8004178:	0003      	movs	r3, r0
 800417a:	01db      	lsls	r3, r3, #7
 800417c:	18d3      	adds	r3, r2, r3
 800417e:	4a1d      	ldr	r2, [pc, #116]	; (80041f4 <ssd1306_DrawPixel+0xc0>)
 8004180:	5cd3      	ldrb	r3, [r2, r3]
 8004182:	b25a      	sxtb	r2, r3
 8004184:	1dbb      	adds	r3, r7, #6
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	2107      	movs	r1, #7
 800418a:	400b      	ands	r3, r1
 800418c:	2101      	movs	r1, #1
 800418e:	4099      	lsls	r1, r3
 8004190:	000b      	movs	r3, r1
 8004192:	b25b      	sxtb	r3, r3
 8004194:	4313      	orrs	r3, r2
 8004196:	b259      	sxtb	r1, r3
 8004198:	1dfb      	adds	r3, r7, #7
 800419a:	781a      	ldrb	r2, [r3, #0]
 800419c:	0003      	movs	r3, r0
 800419e:	01db      	lsls	r3, r3, #7
 80041a0:	18d3      	adds	r3, r2, r3
 80041a2:	b2c9      	uxtb	r1, r1
 80041a4:	4a13      	ldr	r2, [pc, #76]	; (80041f4 <ssd1306_DrawPixel+0xc0>)
 80041a6:	54d1      	strb	r1, [r2, r3]
 80041a8:	e021      	b.n	80041ee <ssd1306_DrawPixel+0xba>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80041aa:	1dfb      	adds	r3, r7, #7
 80041ac:	781a      	ldrb	r2, [r3, #0]
 80041ae:	1dbb      	adds	r3, r7, #6
 80041b0:	781b      	ldrb	r3, [r3, #0]
 80041b2:	08db      	lsrs	r3, r3, #3
 80041b4:	b2d8      	uxtb	r0, r3
 80041b6:	0003      	movs	r3, r0
 80041b8:	01db      	lsls	r3, r3, #7
 80041ba:	18d3      	adds	r3, r2, r3
 80041bc:	4a0d      	ldr	r2, [pc, #52]	; (80041f4 <ssd1306_DrawPixel+0xc0>)
 80041be:	5cd3      	ldrb	r3, [r2, r3]
 80041c0:	b25b      	sxtb	r3, r3
 80041c2:	1dba      	adds	r2, r7, #6
 80041c4:	7812      	ldrb	r2, [r2, #0]
 80041c6:	2107      	movs	r1, #7
 80041c8:	400a      	ands	r2, r1
 80041ca:	2101      	movs	r1, #1
 80041cc:	4091      	lsls	r1, r2
 80041ce:	000a      	movs	r2, r1
 80041d0:	b252      	sxtb	r2, r2
 80041d2:	43d2      	mvns	r2, r2
 80041d4:	b252      	sxtb	r2, r2
 80041d6:	4013      	ands	r3, r2
 80041d8:	b259      	sxtb	r1, r3
 80041da:	1dfb      	adds	r3, r7, #7
 80041dc:	781a      	ldrb	r2, [r3, #0]
 80041de:	0003      	movs	r3, r0
 80041e0:	01db      	lsls	r3, r3, #7
 80041e2:	18d3      	adds	r3, r2, r3
 80041e4:	b2c9      	uxtb	r1, r1
 80041e6:	4a03      	ldr	r2, [pc, #12]	; (80041f4 <ssd1306_DrawPixel+0xc0>)
 80041e8:	54d1      	strb	r1, [r2, r3]
 80041ea:	e000      	b.n	80041ee <ssd1306_DrawPixel+0xba>
        return;
 80041ec:	46c0      	nop			; (mov r8, r8)
    }
}
 80041ee:	46bd      	mov	sp, r7
 80041f0:	b003      	add	sp, #12
 80041f2:	bd90      	pop	{r4, r7, pc}
 80041f4:	2000009c 	.word	0x2000009c

080041f8 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80041f8:	b590      	push	{r4, r7, lr}
 80041fa:	b089      	sub	sp, #36	; 0x24
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	0004      	movs	r4, r0
 8004200:	1d38      	adds	r0, r7, #4
 8004202:	6001      	str	r1, [r0, #0]
 8004204:	6042      	str	r2, [r0, #4]
 8004206:	0019      	movs	r1, r3
 8004208:	200f      	movs	r0, #15
 800420a:	183b      	adds	r3, r7, r0
 800420c:	1c22      	adds	r2, r4, #0
 800420e:	701a      	strb	r2, [r3, #0]
 8004210:	230e      	movs	r3, #14
 8004212:	18fb      	adds	r3, r7, r3
 8004214:	1c0a      	adds	r2, r1, #0
 8004216:	701a      	strb	r2, [r3, #0]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8004218:	183b      	adds	r3, r7, r0
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	2b1f      	cmp	r3, #31
 800421e:	d903      	bls.n	8004228 <ssd1306_WriteChar+0x30>
 8004220:	183b      	adds	r3, r7, r0
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	2b7e      	cmp	r3, #126	; 0x7e
 8004226:	d901      	bls.n	800422c <ssd1306_WriteChar+0x34>
        return 0;
 8004228:	2300      	movs	r3, #0
 800422a:	e078      	b.n	800431e <ssd1306_WriteChar+0x126>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800422c:	4b3e      	ldr	r3, [pc, #248]	; (8004328 <ssd1306_WriteChar+0x130>)
 800422e:	881b      	ldrh	r3, [r3, #0]
 8004230:	001a      	movs	r2, r3
 8004232:	1d3b      	adds	r3, r7, #4
 8004234:	781b      	ldrb	r3, [r3, #0]
 8004236:	18d3      	adds	r3, r2, r3
 8004238:	2b80      	cmp	r3, #128	; 0x80
 800423a:	dc07      	bgt.n	800424c <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 800423c:	4b3a      	ldr	r3, [pc, #232]	; (8004328 <ssd1306_WriteChar+0x130>)
 800423e:	885b      	ldrh	r3, [r3, #2]
 8004240:	001a      	movs	r2, r3
 8004242:	1d3b      	adds	r3, r7, #4
 8004244:	785b      	ldrb	r3, [r3, #1]
 8004246:	18d3      	adds	r3, r2, r3
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8004248:	2b82      	cmp	r3, #130	; 0x82
 800424a:	dd01      	ble.n	8004250 <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 800424c:	2300      	movs	r3, #0
 800424e:	e066      	b.n	800431e <ssd1306_WriteChar+0x126>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8004250:	2300      	movs	r3, #0
 8004252:	61fb      	str	r3, [r7, #28]
 8004254:	e051      	b.n	80042fa <ssd1306_WriteChar+0x102>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8004256:	1d3b      	adds	r3, r7, #4
 8004258:	685a      	ldr	r2, [r3, #4]
 800425a:	230f      	movs	r3, #15
 800425c:	18fb      	adds	r3, r7, r3
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	3b20      	subs	r3, #32
 8004262:	1d39      	adds	r1, r7, #4
 8004264:	7849      	ldrb	r1, [r1, #1]
 8004266:	434b      	muls	r3, r1
 8004268:	0019      	movs	r1, r3
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	18cb      	adds	r3, r1, r3
 800426e:	005b      	lsls	r3, r3, #1
 8004270:	18d3      	adds	r3, r2, r3
 8004272:	881b      	ldrh	r3, [r3, #0]
 8004274:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8004276:	2300      	movs	r3, #0
 8004278:	61bb      	str	r3, [r7, #24]
 800427a:	e035      	b.n	80042e8 <ssd1306_WriteChar+0xf0>
            if((b << j) & 0x8000)  {
 800427c:	697a      	ldr	r2, [r7, #20]
 800427e:	69bb      	ldr	r3, [r7, #24]
 8004280:	409a      	lsls	r2, r3
 8004282:	2380      	movs	r3, #128	; 0x80
 8004284:	021b      	lsls	r3, r3, #8
 8004286:	4013      	ands	r3, r2
 8004288:	d014      	beq.n	80042b4 <ssd1306_WriteChar+0xbc>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800428a:	4b27      	ldr	r3, [pc, #156]	; (8004328 <ssd1306_WriteChar+0x130>)
 800428c:	881b      	ldrh	r3, [r3, #0]
 800428e:	b2da      	uxtb	r2, r3
 8004290:	69bb      	ldr	r3, [r7, #24]
 8004292:	b2db      	uxtb	r3, r3
 8004294:	18d3      	adds	r3, r2, r3
 8004296:	b2d8      	uxtb	r0, r3
 8004298:	4b23      	ldr	r3, [pc, #140]	; (8004328 <ssd1306_WriteChar+0x130>)
 800429a:	885b      	ldrh	r3, [r3, #2]
 800429c:	b2da      	uxtb	r2, r3
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	18d3      	adds	r3, r2, r3
 80042a4:	b2d9      	uxtb	r1, r3
 80042a6:	230e      	movs	r3, #14
 80042a8:	18fb      	adds	r3, r7, r3
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	001a      	movs	r2, r3
 80042ae:	f7ff ff41 	bl	8004134 <ssd1306_DrawPixel>
 80042b2:	e016      	b.n	80042e2 <ssd1306_WriteChar+0xea>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80042b4:	4b1c      	ldr	r3, [pc, #112]	; (8004328 <ssd1306_WriteChar+0x130>)
 80042b6:	881b      	ldrh	r3, [r3, #0]
 80042b8:	b2da      	uxtb	r2, r3
 80042ba:	69bb      	ldr	r3, [r7, #24]
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	18d3      	adds	r3, r2, r3
 80042c0:	b2d8      	uxtb	r0, r3
 80042c2:	4b19      	ldr	r3, [pc, #100]	; (8004328 <ssd1306_WriteChar+0x130>)
 80042c4:	885b      	ldrh	r3, [r3, #2]
 80042c6:	b2da      	uxtb	r2, r3
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	18d3      	adds	r3, r2, r3
 80042ce:	b2d9      	uxtb	r1, r3
 80042d0:	230e      	movs	r3, #14
 80042d2:	18fb      	adds	r3, r7, r3
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	425a      	negs	r2, r3
 80042d8:	4153      	adcs	r3, r2
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	001a      	movs	r2, r3
 80042de:	f7ff ff29 	bl	8004134 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80042e2:	69bb      	ldr	r3, [r7, #24]
 80042e4:	3301      	adds	r3, #1
 80042e6:	61bb      	str	r3, [r7, #24]
 80042e8:	1d3b      	adds	r3, r7, #4
 80042ea:	781b      	ldrb	r3, [r3, #0]
 80042ec:	001a      	movs	r2, r3
 80042ee:	69bb      	ldr	r3, [r7, #24]
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d3c3      	bcc.n	800427c <ssd1306_WriteChar+0x84>
    for(i = 0; i < Font.FontHeight; i++) {
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	3301      	adds	r3, #1
 80042f8:	61fb      	str	r3, [r7, #28]
 80042fa:	1d3b      	adds	r3, r7, #4
 80042fc:	785b      	ldrb	r3, [r3, #1]
 80042fe:	001a      	movs	r2, r3
 8004300:	69fb      	ldr	r3, [r7, #28]
 8004302:	4293      	cmp	r3, r2
 8004304:	d3a7      	bcc.n	8004256 <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8004306:	4b08      	ldr	r3, [pc, #32]	; (8004328 <ssd1306_WriteChar+0x130>)
 8004308:	881a      	ldrh	r2, [r3, #0]
 800430a:	1d3b      	adds	r3, r7, #4
 800430c:	781b      	ldrb	r3, [r3, #0]
 800430e:	b29b      	uxth	r3, r3
 8004310:	18d3      	adds	r3, r2, r3
 8004312:	b29a      	uxth	r2, r3
 8004314:	4b04      	ldr	r3, [pc, #16]	; (8004328 <ssd1306_WriteChar+0x130>)
 8004316:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8004318:	230f      	movs	r3, #15
 800431a:	18fb      	adds	r3, r7, r3
 800431c:	781b      	ldrb	r3, [r3, #0]
}
 800431e:	0018      	movs	r0, r3
 8004320:	46bd      	mov	sp, r7
 8004322:	b009      	add	sp, #36	; 0x24
 8004324:	bd90      	pop	{r4, r7, pc}
 8004326:	46c0      	nop			; (mov r8, r8)
 8004328:	200008bc 	.word	0x200008bc

0800432c <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	1d38      	adds	r0, r7, #4
 8004336:	6001      	str	r1, [r0, #0]
 8004338:	6042      	str	r2, [r0, #4]
 800433a:	001a      	movs	r2, r3
 800433c:	1cfb      	adds	r3, r7, #3
 800433e:	701a      	strb	r2, [r3, #0]
    // Write until null-byte
    while (*str) {
 8004340:	e014      	b.n	800436c <ssd1306_WriteString+0x40>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	7818      	ldrb	r0, [r3, #0]
 8004346:	1cfb      	adds	r3, r7, #3
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	1d3a      	adds	r2, r7, #4
 800434c:	6811      	ldr	r1, [r2, #0]
 800434e:	6852      	ldr	r2, [r2, #4]
 8004350:	f7ff ff52 	bl	80041f8 <ssd1306_WriteChar>
 8004354:	0003      	movs	r3, r0
 8004356:	001a      	movs	r2, r3
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	781b      	ldrb	r3, [r3, #0]
 800435c:	429a      	cmp	r2, r3
 800435e:	d002      	beq.n	8004366 <ssd1306_WriteString+0x3a>
            // Char could not be written
            return *str;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	e008      	b.n	8004378 <ssd1306_WriteString+0x4c>
        }
        
        // Next char
        str++;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	3301      	adds	r3, #1
 800436a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d1e6      	bne.n	8004342 <ssd1306_WriteString+0x16>
    }
    
    // Everything ok
    return *str;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	781b      	ldrb	r3, [r3, #0]
}
 8004378:	0018      	movs	r0, r3
 800437a:	46bd      	mov	sp, r7
 800437c:	b004      	add	sp, #16
 800437e:	bd80      	pop	{r7, pc}

08004380 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8004380:	b580      	push	{r7, lr}
 8004382:	b082      	sub	sp, #8
 8004384:	af00      	add	r7, sp, #0
 8004386:	0002      	movs	r2, r0
 8004388:	1dfb      	adds	r3, r7, #7
 800438a:	701a      	strb	r2, [r3, #0]
 800438c:	1dbb      	adds	r3, r7, #6
 800438e:	1c0a      	adds	r2, r1, #0
 8004390:	701a      	strb	r2, [r3, #0]
    SSD1306.CurrentX = x;
 8004392:	1dfb      	adds	r3, r7, #7
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	b29a      	uxth	r2, r3
 8004398:	4b05      	ldr	r3, [pc, #20]	; (80043b0 <ssd1306_SetCursor+0x30>)
 800439a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 800439c:	1dbb      	adds	r3, r7, #6
 800439e:	781b      	ldrb	r3, [r3, #0]
 80043a0:	b29a      	uxth	r2, r3
 80043a2:	4b03      	ldr	r3, [pc, #12]	; (80043b0 <ssd1306_SetCursor+0x30>)
 80043a4:	805a      	strh	r2, [r3, #2]
}
 80043a6:	46c0      	nop			; (mov r8, r8)
 80043a8:	46bd      	mov	sp, r7
 80043aa:	b002      	add	sp, #8
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	46c0      	nop			; (mov r8, r8)
 80043b0:	200008bc 	.word	0x200008bc

080043b4 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b084      	sub	sp, #16
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	0002      	movs	r2, r0
 80043bc:	1dfb      	adds	r3, r7, #7
 80043be:	701a      	strb	r2, [r3, #0]
    const uint8_t kSetContrastControlRegister = 0x81;
 80043c0:	210f      	movs	r1, #15
 80043c2:	187b      	adds	r3, r7, r1
 80043c4:	2281      	movs	r2, #129	; 0x81
 80043c6:	701a      	strb	r2, [r3, #0]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80043c8:	187b      	adds	r3, r7, r1
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	0018      	movs	r0, r3
 80043ce:	f7ff fdbd 	bl	8003f4c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80043d2:	1dfb      	adds	r3, r7, #7
 80043d4:	781b      	ldrb	r3, [r3, #0]
 80043d6:	0018      	movs	r0, r3
 80043d8:	f7ff fdb8 	bl	8003f4c <ssd1306_WriteCommand>
}
 80043dc:	46c0      	nop			; (mov r8, r8)
 80043de:	46bd      	mov	sp, r7
 80043e0:	b004      	add	sp, #16
 80043e2:	bd80      	pop	{r7, pc}

080043e4 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b084      	sub	sp, #16
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	0002      	movs	r2, r0
 80043ec:	1dfb      	adds	r3, r7, #7
 80043ee:	701a      	strb	r2, [r3, #0]
    uint8_t value;
    if (on) {
 80043f0:	1dfb      	adds	r3, r7, #7
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d007      	beq.n	8004408 <ssd1306_SetDisplayOn+0x24>
        value = 0xAF;   // Display on
 80043f8:	230f      	movs	r3, #15
 80043fa:	18fb      	adds	r3, r7, r3
 80043fc:	22af      	movs	r2, #175	; 0xaf
 80043fe:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 1;
 8004400:	4b0a      	ldr	r3, [pc, #40]	; (800442c <ssd1306_SetDisplayOn+0x48>)
 8004402:	2201      	movs	r2, #1
 8004404:	715a      	strb	r2, [r3, #5]
 8004406:	e006      	b.n	8004416 <ssd1306_SetDisplayOn+0x32>
    } else {
        value = 0xAE;   // Display off
 8004408:	230f      	movs	r3, #15
 800440a:	18fb      	adds	r3, r7, r3
 800440c:	22ae      	movs	r2, #174	; 0xae
 800440e:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 0;
 8004410:	4b06      	ldr	r3, [pc, #24]	; (800442c <ssd1306_SetDisplayOn+0x48>)
 8004412:	2200      	movs	r2, #0
 8004414:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8004416:	230f      	movs	r3, #15
 8004418:	18fb      	adds	r3, r7, r3
 800441a:	781b      	ldrb	r3, [r3, #0]
 800441c:	0018      	movs	r0, r3
 800441e:	f7ff fd95 	bl	8003f4c <ssd1306_WriteCommand>
}
 8004422:	46c0      	nop			; (mov r8, r8)
 8004424:	46bd      	mov	sp, r7
 8004426:	b004      	add	sp, #16
 8004428:	bd80      	pop	{r7, pc}
 800442a:	46c0      	nop			; (mov r8, r8)
 800442c:	200008bc 	.word	0x200008bc

08004430 <__errno>:
 8004430:	4b01      	ldr	r3, [pc, #4]	; (8004438 <__errno+0x8>)
 8004432:	6818      	ldr	r0, [r3, #0]
 8004434:	4770      	bx	lr
 8004436:	46c0      	nop			; (mov r8, r8)
 8004438:	20000014 	.word	0x20000014

0800443c <__libc_init_array>:
 800443c:	b570      	push	{r4, r5, r6, lr}
 800443e:	2600      	movs	r6, #0
 8004440:	4d0c      	ldr	r5, [pc, #48]	; (8004474 <__libc_init_array+0x38>)
 8004442:	4c0d      	ldr	r4, [pc, #52]	; (8004478 <__libc_init_array+0x3c>)
 8004444:	1b64      	subs	r4, r4, r5
 8004446:	10a4      	asrs	r4, r4, #2
 8004448:	42a6      	cmp	r6, r4
 800444a:	d109      	bne.n	8004460 <__libc_init_array+0x24>
 800444c:	2600      	movs	r6, #0
 800444e:	f000 fc5b 	bl	8004d08 <_init>
 8004452:	4d0a      	ldr	r5, [pc, #40]	; (800447c <__libc_init_array+0x40>)
 8004454:	4c0a      	ldr	r4, [pc, #40]	; (8004480 <__libc_init_array+0x44>)
 8004456:	1b64      	subs	r4, r4, r5
 8004458:	10a4      	asrs	r4, r4, #2
 800445a:	42a6      	cmp	r6, r4
 800445c:	d105      	bne.n	800446a <__libc_init_array+0x2e>
 800445e:	bd70      	pop	{r4, r5, r6, pc}
 8004460:	00b3      	lsls	r3, r6, #2
 8004462:	58eb      	ldr	r3, [r5, r3]
 8004464:	4798      	blx	r3
 8004466:	3601      	adds	r6, #1
 8004468:	e7ee      	b.n	8004448 <__libc_init_array+0xc>
 800446a:	00b3      	lsls	r3, r6, #2
 800446c:	58eb      	ldr	r3, [r5, r3]
 800446e:	4798      	blx	r3
 8004470:	3601      	adds	r6, #1
 8004472:	e7f2      	b.n	800445a <__libc_init_array+0x1e>
 8004474:	0800538c 	.word	0x0800538c
 8004478:	0800538c 	.word	0x0800538c
 800447c:	0800538c 	.word	0x0800538c
 8004480:	08005390 	.word	0x08005390

08004484 <memcpy>:
 8004484:	2300      	movs	r3, #0
 8004486:	b510      	push	{r4, lr}
 8004488:	429a      	cmp	r2, r3
 800448a:	d100      	bne.n	800448e <memcpy+0xa>
 800448c:	bd10      	pop	{r4, pc}
 800448e:	5ccc      	ldrb	r4, [r1, r3]
 8004490:	54c4      	strb	r4, [r0, r3]
 8004492:	3301      	adds	r3, #1
 8004494:	e7f8      	b.n	8004488 <memcpy+0x4>

08004496 <memmove>:
 8004496:	b510      	push	{r4, lr}
 8004498:	4288      	cmp	r0, r1
 800449a:	d902      	bls.n	80044a2 <memmove+0xc>
 800449c:	188b      	adds	r3, r1, r2
 800449e:	4298      	cmp	r0, r3
 80044a0:	d303      	bcc.n	80044aa <memmove+0x14>
 80044a2:	2300      	movs	r3, #0
 80044a4:	e007      	b.n	80044b6 <memmove+0x20>
 80044a6:	5c8b      	ldrb	r3, [r1, r2]
 80044a8:	5483      	strb	r3, [r0, r2]
 80044aa:	3a01      	subs	r2, #1
 80044ac:	d2fb      	bcs.n	80044a6 <memmove+0x10>
 80044ae:	bd10      	pop	{r4, pc}
 80044b0:	5ccc      	ldrb	r4, [r1, r3]
 80044b2:	54c4      	strb	r4, [r0, r3]
 80044b4:	3301      	adds	r3, #1
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d1fa      	bne.n	80044b0 <memmove+0x1a>
 80044ba:	e7f8      	b.n	80044ae <memmove+0x18>

080044bc <memset>:
 80044bc:	0003      	movs	r3, r0
 80044be:	1882      	adds	r2, r0, r2
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d100      	bne.n	80044c6 <memset+0xa>
 80044c4:	4770      	bx	lr
 80044c6:	7019      	strb	r1, [r3, #0]
 80044c8:	3301      	adds	r3, #1
 80044ca:	e7f9      	b.n	80044c0 <memset+0x4>

080044cc <sniprintf>:
 80044cc:	b40c      	push	{r2, r3}
 80044ce:	b530      	push	{r4, r5, lr}
 80044d0:	4b17      	ldr	r3, [pc, #92]	; (8004530 <sniprintf+0x64>)
 80044d2:	000c      	movs	r4, r1
 80044d4:	681d      	ldr	r5, [r3, #0]
 80044d6:	b09d      	sub	sp, #116	; 0x74
 80044d8:	2900      	cmp	r1, #0
 80044da:	da08      	bge.n	80044ee <sniprintf+0x22>
 80044dc:	238b      	movs	r3, #139	; 0x8b
 80044de:	2001      	movs	r0, #1
 80044e0:	602b      	str	r3, [r5, #0]
 80044e2:	4240      	negs	r0, r0
 80044e4:	b01d      	add	sp, #116	; 0x74
 80044e6:	bc30      	pop	{r4, r5}
 80044e8:	bc08      	pop	{r3}
 80044ea:	b002      	add	sp, #8
 80044ec:	4718      	bx	r3
 80044ee:	2382      	movs	r3, #130	; 0x82
 80044f0:	466a      	mov	r2, sp
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	8293      	strh	r3, [r2, #20]
 80044f6:	2300      	movs	r3, #0
 80044f8:	9002      	str	r0, [sp, #8]
 80044fa:	9006      	str	r0, [sp, #24]
 80044fc:	4299      	cmp	r1, r3
 80044fe:	d000      	beq.n	8004502 <sniprintf+0x36>
 8004500:	1e4b      	subs	r3, r1, #1
 8004502:	9304      	str	r3, [sp, #16]
 8004504:	9307      	str	r3, [sp, #28]
 8004506:	2301      	movs	r3, #1
 8004508:	466a      	mov	r2, sp
 800450a:	425b      	negs	r3, r3
 800450c:	82d3      	strh	r3, [r2, #22]
 800450e:	0028      	movs	r0, r5
 8004510:	ab21      	add	r3, sp, #132	; 0x84
 8004512:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004514:	a902      	add	r1, sp, #8
 8004516:	9301      	str	r3, [sp, #4]
 8004518:	f000 f86e 	bl	80045f8 <_svfiprintf_r>
 800451c:	1c43      	adds	r3, r0, #1
 800451e:	da01      	bge.n	8004524 <sniprintf+0x58>
 8004520:	238b      	movs	r3, #139	; 0x8b
 8004522:	602b      	str	r3, [r5, #0]
 8004524:	2c00      	cmp	r4, #0
 8004526:	d0dd      	beq.n	80044e4 <sniprintf+0x18>
 8004528:	2300      	movs	r3, #0
 800452a:	9a02      	ldr	r2, [sp, #8]
 800452c:	7013      	strb	r3, [r2, #0]
 800452e:	e7d9      	b.n	80044e4 <sniprintf+0x18>
 8004530:	20000014 	.word	0x20000014

08004534 <__ssputs_r>:
 8004534:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004536:	688e      	ldr	r6, [r1, #8]
 8004538:	b085      	sub	sp, #20
 800453a:	0007      	movs	r7, r0
 800453c:	000c      	movs	r4, r1
 800453e:	9203      	str	r2, [sp, #12]
 8004540:	9301      	str	r3, [sp, #4]
 8004542:	429e      	cmp	r6, r3
 8004544:	d83c      	bhi.n	80045c0 <__ssputs_r+0x8c>
 8004546:	2390      	movs	r3, #144	; 0x90
 8004548:	898a      	ldrh	r2, [r1, #12]
 800454a:	00db      	lsls	r3, r3, #3
 800454c:	421a      	tst	r2, r3
 800454e:	d034      	beq.n	80045ba <__ssputs_r+0x86>
 8004550:	2503      	movs	r5, #3
 8004552:	6909      	ldr	r1, [r1, #16]
 8004554:	6823      	ldr	r3, [r4, #0]
 8004556:	1a5b      	subs	r3, r3, r1
 8004558:	9302      	str	r3, [sp, #8]
 800455a:	6963      	ldr	r3, [r4, #20]
 800455c:	9802      	ldr	r0, [sp, #8]
 800455e:	435d      	muls	r5, r3
 8004560:	0feb      	lsrs	r3, r5, #31
 8004562:	195d      	adds	r5, r3, r5
 8004564:	9b01      	ldr	r3, [sp, #4]
 8004566:	106d      	asrs	r5, r5, #1
 8004568:	3301      	adds	r3, #1
 800456a:	181b      	adds	r3, r3, r0
 800456c:	42ab      	cmp	r3, r5
 800456e:	d900      	bls.n	8004572 <__ssputs_r+0x3e>
 8004570:	001d      	movs	r5, r3
 8004572:	0553      	lsls	r3, r2, #21
 8004574:	d532      	bpl.n	80045dc <__ssputs_r+0xa8>
 8004576:	0029      	movs	r1, r5
 8004578:	0038      	movs	r0, r7
 800457a:	f000 fb15 	bl	8004ba8 <_malloc_r>
 800457e:	1e06      	subs	r6, r0, #0
 8004580:	d109      	bne.n	8004596 <__ssputs_r+0x62>
 8004582:	230c      	movs	r3, #12
 8004584:	603b      	str	r3, [r7, #0]
 8004586:	2340      	movs	r3, #64	; 0x40
 8004588:	2001      	movs	r0, #1
 800458a:	89a2      	ldrh	r2, [r4, #12]
 800458c:	4240      	negs	r0, r0
 800458e:	4313      	orrs	r3, r2
 8004590:	81a3      	strh	r3, [r4, #12]
 8004592:	b005      	add	sp, #20
 8004594:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004596:	9a02      	ldr	r2, [sp, #8]
 8004598:	6921      	ldr	r1, [r4, #16]
 800459a:	f7ff ff73 	bl	8004484 <memcpy>
 800459e:	89a3      	ldrh	r3, [r4, #12]
 80045a0:	4a14      	ldr	r2, [pc, #80]	; (80045f4 <__ssputs_r+0xc0>)
 80045a2:	401a      	ands	r2, r3
 80045a4:	2380      	movs	r3, #128	; 0x80
 80045a6:	4313      	orrs	r3, r2
 80045a8:	81a3      	strh	r3, [r4, #12]
 80045aa:	9b02      	ldr	r3, [sp, #8]
 80045ac:	6126      	str	r6, [r4, #16]
 80045ae:	18f6      	adds	r6, r6, r3
 80045b0:	6026      	str	r6, [r4, #0]
 80045b2:	6165      	str	r5, [r4, #20]
 80045b4:	9e01      	ldr	r6, [sp, #4]
 80045b6:	1aed      	subs	r5, r5, r3
 80045b8:	60a5      	str	r5, [r4, #8]
 80045ba:	9b01      	ldr	r3, [sp, #4]
 80045bc:	429e      	cmp	r6, r3
 80045be:	d900      	bls.n	80045c2 <__ssputs_r+0x8e>
 80045c0:	9e01      	ldr	r6, [sp, #4]
 80045c2:	0032      	movs	r2, r6
 80045c4:	9903      	ldr	r1, [sp, #12]
 80045c6:	6820      	ldr	r0, [r4, #0]
 80045c8:	f7ff ff65 	bl	8004496 <memmove>
 80045cc:	68a3      	ldr	r3, [r4, #8]
 80045ce:	2000      	movs	r0, #0
 80045d0:	1b9b      	subs	r3, r3, r6
 80045d2:	60a3      	str	r3, [r4, #8]
 80045d4:	6823      	ldr	r3, [r4, #0]
 80045d6:	199e      	adds	r6, r3, r6
 80045d8:	6026      	str	r6, [r4, #0]
 80045da:	e7da      	b.n	8004592 <__ssputs_r+0x5e>
 80045dc:	002a      	movs	r2, r5
 80045de:	0038      	movs	r0, r7
 80045e0:	f000 fb40 	bl	8004c64 <_realloc_r>
 80045e4:	1e06      	subs	r6, r0, #0
 80045e6:	d1e0      	bne.n	80045aa <__ssputs_r+0x76>
 80045e8:	0038      	movs	r0, r7
 80045ea:	6921      	ldr	r1, [r4, #16]
 80045ec:	f000 fa92 	bl	8004b14 <_free_r>
 80045f0:	e7c7      	b.n	8004582 <__ssputs_r+0x4e>
 80045f2:	46c0      	nop			; (mov r8, r8)
 80045f4:	fffffb7f 	.word	0xfffffb7f

080045f8 <_svfiprintf_r>:
 80045f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045fa:	b0a1      	sub	sp, #132	; 0x84
 80045fc:	9003      	str	r0, [sp, #12]
 80045fe:	001d      	movs	r5, r3
 8004600:	898b      	ldrh	r3, [r1, #12]
 8004602:	000f      	movs	r7, r1
 8004604:	0016      	movs	r6, r2
 8004606:	061b      	lsls	r3, r3, #24
 8004608:	d511      	bpl.n	800462e <_svfiprintf_r+0x36>
 800460a:	690b      	ldr	r3, [r1, #16]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d10e      	bne.n	800462e <_svfiprintf_r+0x36>
 8004610:	2140      	movs	r1, #64	; 0x40
 8004612:	f000 fac9 	bl	8004ba8 <_malloc_r>
 8004616:	6038      	str	r0, [r7, #0]
 8004618:	6138      	str	r0, [r7, #16]
 800461a:	2800      	cmp	r0, #0
 800461c:	d105      	bne.n	800462a <_svfiprintf_r+0x32>
 800461e:	230c      	movs	r3, #12
 8004620:	9a03      	ldr	r2, [sp, #12]
 8004622:	3801      	subs	r0, #1
 8004624:	6013      	str	r3, [r2, #0]
 8004626:	b021      	add	sp, #132	; 0x84
 8004628:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800462a:	2340      	movs	r3, #64	; 0x40
 800462c:	617b      	str	r3, [r7, #20]
 800462e:	2300      	movs	r3, #0
 8004630:	ac08      	add	r4, sp, #32
 8004632:	6163      	str	r3, [r4, #20]
 8004634:	3320      	adds	r3, #32
 8004636:	7663      	strb	r3, [r4, #25]
 8004638:	3310      	adds	r3, #16
 800463a:	76a3      	strb	r3, [r4, #26]
 800463c:	9507      	str	r5, [sp, #28]
 800463e:	0035      	movs	r5, r6
 8004640:	782b      	ldrb	r3, [r5, #0]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d001      	beq.n	800464a <_svfiprintf_r+0x52>
 8004646:	2b25      	cmp	r3, #37	; 0x25
 8004648:	d147      	bne.n	80046da <_svfiprintf_r+0xe2>
 800464a:	1bab      	subs	r3, r5, r6
 800464c:	9305      	str	r3, [sp, #20]
 800464e:	42b5      	cmp	r5, r6
 8004650:	d00c      	beq.n	800466c <_svfiprintf_r+0x74>
 8004652:	0032      	movs	r2, r6
 8004654:	0039      	movs	r1, r7
 8004656:	9803      	ldr	r0, [sp, #12]
 8004658:	f7ff ff6c 	bl	8004534 <__ssputs_r>
 800465c:	1c43      	adds	r3, r0, #1
 800465e:	d100      	bne.n	8004662 <_svfiprintf_r+0x6a>
 8004660:	e0ae      	b.n	80047c0 <_svfiprintf_r+0x1c8>
 8004662:	6962      	ldr	r2, [r4, #20]
 8004664:	9b05      	ldr	r3, [sp, #20]
 8004666:	4694      	mov	ip, r2
 8004668:	4463      	add	r3, ip
 800466a:	6163      	str	r3, [r4, #20]
 800466c:	782b      	ldrb	r3, [r5, #0]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d100      	bne.n	8004674 <_svfiprintf_r+0x7c>
 8004672:	e0a5      	b.n	80047c0 <_svfiprintf_r+0x1c8>
 8004674:	2201      	movs	r2, #1
 8004676:	2300      	movs	r3, #0
 8004678:	4252      	negs	r2, r2
 800467a:	6062      	str	r2, [r4, #4]
 800467c:	a904      	add	r1, sp, #16
 800467e:	3254      	adds	r2, #84	; 0x54
 8004680:	1852      	adds	r2, r2, r1
 8004682:	1c6e      	adds	r6, r5, #1
 8004684:	6023      	str	r3, [r4, #0]
 8004686:	60e3      	str	r3, [r4, #12]
 8004688:	60a3      	str	r3, [r4, #8]
 800468a:	7013      	strb	r3, [r2, #0]
 800468c:	65a3      	str	r3, [r4, #88]	; 0x58
 800468e:	2205      	movs	r2, #5
 8004690:	7831      	ldrb	r1, [r6, #0]
 8004692:	4854      	ldr	r0, [pc, #336]	; (80047e4 <_svfiprintf_r+0x1ec>)
 8004694:	f000 fa32 	bl	8004afc <memchr>
 8004698:	1c75      	adds	r5, r6, #1
 800469a:	2800      	cmp	r0, #0
 800469c:	d11f      	bne.n	80046de <_svfiprintf_r+0xe6>
 800469e:	6822      	ldr	r2, [r4, #0]
 80046a0:	06d3      	lsls	r3, r2, #27
 80046a2:	d504      	bpl.n	80046ae <_svfiprintf_r+0xb6>
 80046a4:	2353      	movs	r3, #83	; 0x53
 80046a6:	a904      	add	r1, sp, #16
 80046a8:	185b      	adds	r3, r3, r1
 80046aa:	2120      	movs	r1, #32
 80046ac:	7019      	strb	r1, [r3, #0]
 80046ae:	0713      	lsls	r3, r2, #28
 80046b0:	d504      	bpl.n	80046bc <_svfiprintf_r+0xc4>
 80046b2:	2353      	movs	r3, #83	; 0x53
 80046b4:	a904      	add	r1, sp, #16
 80046b6:	185b      	adds	r3, r3, r1
 80046b8:	212b      	movs	r1, #43	; 0x2b
 80046ba:	7019      	strb	r1, [r3, #0]
 80046bc:	7833      	ldrb	r3, [r6, #0]
 80046be:	2b2a      	cmp	r3, #42	; 0x2a
 80046c0:	d016      	beq.n	80046f0 <_svfiprintf_r+0xf8>
 80046c2:	0035      	movs	r5, r6
 80046c4:	2100      	movs	r1, #0
 80046c6:	200a      	movs	r0, #10
 80046c8:	68e3      	ldr	r3, [r4, #12]
 80046ca:	782a      	ldrb	r2, [r5, #0]
 80046cc:	1c6e      	adds	r6, r5, #1
 80046ce:	3a30      	subs	r2, #48	; 0x30
 80046d0:	2a09      	cmp	r2, #9
 80046d2:	d94e      	bls.n	8004772 <_svfiprintf_r+0x17a>
 80046d4:	2900      	cmp	r1, #0
 80046d6:	d111      	bne.n	80046fc <_svfiprintf_r+0x104>
 80046d8:	e017      	b.n	800470a <_svfiprintf_r+0x112>
 80046da:	3501      	adds	r5, #1
 80046dc:	e7b0      	b.n	8004640 <_svfiprintf_r+0x48>
 80046de:	4b41      	ldr	r3, [pc, #260]	; (80047e4 <_svfiprintf_r+0x1ec>)
 80046e0:	6822      	ldr	r2, [r4, #0]
 80046e2:	1ac0      	subs	r0, r0, r3
 80046e4:	2301      	movs	r3, #1
 80046e6:	4083      	lsls	r3, r0
 80046e8:	4313      	orrs	r3, r2
 80046ea:	002e      	movs	r6, r5
 80046ec:	6023      	str	r3, [r4, #0]
 80046ee:	e7ce      	b.n	800468e <_svfiprintf_r+0x96>
 80046f0:	9b07      	ldr	r3, [sp, #28]
 80046f2:	1d19      	adds	r1, r3, #4
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	9107      	str	r1, [sp, #28]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	db01      	blt.n	8004700 <_svfiprintf_r+0x108>
 80046fc:	930b      	str	r3, [sp, #44]	; 0x2c
 80046fe:	e004      	b.n	800470a <_svfiprintf_r+0x112>
 8004700:	425b      	negs	r3, r3
 8004702:	60e3      	str	r3, [r4, #12]
 8004704:	2302      	movs	r3, #2
 8004706:	4313      	orrs	r3, r2
 8004708:	6023      	str	r3, [r4, #0]
 800470a:	782b      	ldrb	r3, [r5, #0]
 800470c:	2b2e      	cmp	r3, #46	; 0x2e
 800470e:	d10a      	bne.n	8004726 <_svfiprintf_r+0x12e>
 8004710:	786b      	ldrb	r3, [r5, #1]
 8004712:	2b2a      	cmp	r3, #42	; 0x2a
 8004714:	d135      	bne.n	8004782 <_svfiprintf_r+0x18a>
 8004716:	9b07      	ldr	r3, [sp, #28]
 8004718:	3502      	adds	r5, #2
 800471a:	1d1a      	adds	r2, r3, #4
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	9207      	str	r2, [sp, #28]
 8004720:	2b00      	cmp	r3, #0
 8004722:	db2b      	blt.n	800477c <_svfiprintf_r+0x184>
 8004724:	9309      	str	r3, [sp, #36]	; 0x24
 8004726:	4e30      	ldr	r6, [pc, #192]	; (80047e8 <_svfiprintf_r+0x1f0>)
 8004728:	2203      	movs	r2, #3
 800472a:	0030      	movs	r0, r6
 800472c:	7829      	ldrb	r1, [r5, #0]
 800472e:	f000 f9e5 	bl	8004afc <memchr>
 8004732:	2800      	cmp	r0, #0
 8004734:	d006      	beq.n	8004744 <_svfiprintf_r+0x14c>
 8004736:	2340      	movs	r3, #64	; 0x40
 8004738:	1b80      	subs	r0, r0, r6
 800473a:	4083      	lsls	r3, r0
 800473c:	6822      	ldr	r2, [r4, #0]
 800473e:	3501      	adds	r5, #1
 8004740:	4313      	orrs	r3, r2
 8004742:	6023      	str	r3, [r4, #0]
 8004744:	7829      	ldrb	r1, [r5, #0]
 8004746:	2206      	movs	r2, #6
 8004748:	4828      	ldr	r0, [pc, #160]	; (80047ec <_svfiprintf_r+0x1f4>)
 800474a:	1c6e      	adds	r6, r5, #1
 800474c:	7621      	strb	r1, [r4, #24]
 800474e:	f000 f9d5 	bl	8004afc <memchr>
 8004752:	2800      	cmp	r0, #0
 8004754:	d03c      	beq.n	80047d0 <_svfiprintf_r+0x1d8>
 8004756:	4b26      	ldr	r3, [pc, #152]	; (80047f0 <_svfiprintf_r+0x1f8>)
 8004758:	2b00      	cmp	r3, #0
 800475a:	d125      	bne.n	80047a8 <_svfiprintf_r+0x1b0>
 800475c:	2207      	movs	r2, #7
 800475e:	9b07      	ldr	r3, [sp, #28]
 8004760:	3307      	adds	r3, #7
 8004762:	4393      	bics	r3, r2
 8004764:	3308      	adds	r3, #8
 8004766:	9307      	str	r3, [sp, #28]
 8004768:	6963      	ldr	r3, [r4, #20]
 800476a:	9a04      	ldr	r2, [sp, #16]
 800476c:	189b      	adds	r3, r3, r2
 800476e:	6163      	str	r3, [r4, #20]
 8004770:	e765      	b.n	800463e <_svfiprintf_r+0x46>
 8004772:	4343      	muls	r3, r0
 8004774:	0035      	movs	r5, r6
 8004776:	2101      	movs	r1, #1
 8004778:	189b      	adds	r3, r3, r2
 800477a:	e7a6      	b.n	80046ca <_svfiprintf_r+0xd2>
 800477c:	2301      	movs	r3, #1
 800477e:	425b      	negs	r3, r3
 8004780:	e7d0      	b.n	8004724 <_svfiprintf_r+0x12c>
 8004782:	2300      	movs	r3, #0
 8004784:	200a      	movs	r0, #10
 8004786:	001a      	movs	r2, r3
 8004788:	3501      	adds	r5, #1
 800478a:	6063      	str	r3, [r4, #4]
 800478c:	7829      	ldrb	r1, [r5, #0]
 800478e:	1c6e      	adds	r6, r5, #1
 8004790:	3930      	subs	r1, #48	; 0x30
 8004792:	2909      	cmp	r1, #9
 8004794:	d903      	bls.n	800479e <_svfiprintf_r+0x1a6>
 8004796:	2b00      	cmp	r3, #0
 8004798:	d0c5      	beq.n	8004726 <_svfiprintf_r+0x12e>
 800479a:	9209      	str	r2, [sp, #36]	; 0x24
 800479c:	e7c3      	b.n	8004726 <_svfiprintf_r+0x12e>
 800479e:	4342      	muls	r2, r0
 80047a0:	0035      	movs	r5, r6
 80047a2:	2301      	movs	r3, #1
 80047a4:	1852      	adds	r2, r2, r1
 80047a6:	e7f1      	b.n	800478c <_svfiprintf_r+0x194>
 80047a8:	ab07      	add	r3, sp, #28
 80047aa:	9300      	str	r3, [sp, #0]
 80047ac:	003a      	movs	r2, r7
 80047ae:	0021      	movs	r1, r4
 80047b0:	4b10      	ldr	r3, [pc, #64]	; (80047f4 <_svfiprintf_r+0x1fc>)
 80047b2:	9803      	ldr	r0, [sp, #12]
 80047b4:	e000      	b.n	80047b8 <_svfiprintf_r+0x1c0>
 80047b6:	bf00      	nop
 80047b8:	9004      	str	r0, [sp, #16]
 80047ba:	9b04      	ldr	r3, [sp, #16]
 80047bc:	3301      	adds	r3, #1
 80047be:	d1d3      	bne.n	8004768 <_svfiprintf_r+0x170>
 80047c0:	89bb      	ldrh	r3, [r7, #12]
 80047c2:	980d      	ldr	r0, [sp, #52]	; 0x34
 80047c4:	065b      	lsls	r3, r3, #25
 80047c6:	d400      	bmi.n	80047ca <_svfiprintf_r+0x1d2>
 80047c8:	e72d      	b.n	8004626 <_svfiprintf_r+0x2e>
 80047ca:	2001      	movs	r0, #1
 80047cc:	4240      	negs	r0, r0
 80047ce:	e72a      	b.n	8004626 <_svfiprintf_r+0x2e>
 80047d0:	ab07      	add	r3, sp, #28
 80047d2:	9300      	str	r3, [sp, #0]
 80047d4:	003a      	movs	r2, r7
 80047d6:	0021      	movs	r1, r4
 80047d8:	4b06      	ldr	r3, [pc, #24]	; (80047f4 <_svfiprintf_r+0x1fc>)
 80047da:	9803      	ldr	r0, [sp, #12]
 80047dc:	f000 f87c 	bl	80048d8 <_printf_i>
 80047e0:	e7ea      	b.n	80047b8 <_svfiprintf_r+0x1c0>
 80047e2:	46c0      	nop			; (mov r8, r8)
 80047e4:	08005358 	.word	0x08005358
 80047e8:	0800535e 	.word	0x0800535e
 80047ec:	08005362 	.word	0x08005362
 80047f0:	00000000 	.word	0x00000000
 80047f4:	08004535 	.word	0x08004535

080047f8 <_printf_common>:
 80047f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80047fa:	0015      	movs	r5, r2
 80047fc:	9301      	str	r3, [sp, #4]
 80047fe:	688a      	ldr	r2, [r1, #8]
 8004800:	690b      	ldr	r3, [r1, #16]
 8004802:	000c      	movs	r4, r1
 8004804:	9000      	str	r0, [sp, #0]
 8004806:	4293      	cmp	r3, r2
 8004808:	da00      	bge.n	800480c <_printf_common+0x14>
 800480a:	0013      	movs	r3, r2
 800480c:	0022      	movs	r2, r4
 800480e:	602b      	str	r3, [r5, #0]
 8004810:	3243      	adds	r2, #67	; 0x43
 8004812:	7812      	ldrb	r2, [r2, #0]
 8004814:	2a00      	cmp	r2, #0
 8004816:	d001      	beq.n	800481c <_printf_common+0x24>
 8004818:	3301      	adds	r3, #1
 800481a:	602b      	str	r3, [r5, #0]
 800481c:	6823      	ldr	r3, [r4, #0]
 800481e:	069b      	lsls	r3, r3, #26
 8004820:	d502      	bpl.n	8004828 <_printf_common+0x30>
 8004822:	682b      	ldr	r3, [r5, #0]
 8004824:	3302      	adds	r3, #2
 8004826:	602b      	str	r3, [r5, #0]
 8004828:	6822      	ldr	r2, [r4, #0]
 800482a:	2306      	movs	r3, #6
 800482c:	0017      	movs	r7, r2
 800482e:	401f      	ands	r7, r3
 8004830:	421a      	tst	r2, r3
 8004832:	d027      	beq.n	8004884 <_printf_common+0x8c>
 8004834:	0023      	movs	r3, r4
 8004836:	3343      	adds	r3, #67	; 0x43
 8004838:	781b      	ldrb	r3, [r3, #0]
 800483a:	1e5a      	subs	r2, r3, #1
 800483c:	4193      	sbcs	r3, r2
 800483e:	6822      	ldr	r2, [r4, #0]
 8004840:	0692      	lsls	r2, r2, #26
 8004842:	d430      	bmi.n	80048a6 <_printf_common+0xae>
 8004844:	0022      	movs	r2, r4
 8004846:	9901      	ldr	r1, [sp, #4]
 8004848:	9800      	ldr	r0, [sp, #0]
 800484a:	9e08      	ldr	r6, [sp, #32]
 800484c:	3243      	adds	r2, #67	; 0x43
 800484e:	47b0      	blx	r6
 8004850:	1c43      	adds	r3, r0, #1
 8004852:	d025      	beq.n	80048a0 <_printf_common+0xa8>
 8004854:	2306      	movs	r3, #6
 8004856:	6820      	ldr	r0, [r4, #0]
 8004858:	682a      	ldr	r2, [r5, #0]
 800485a:	68e1      	ldr	r1, [r4, #12]
 800485c:	2500      	movs	r5, #0
 800485e:	4003      	ands	r3, r0
 8004860:	2b04      	cmp	r3, #4
 8004862:	d103      	bne.n	800486c <_printf_common+0x74>
 8004864:	1a8d      	subs	r5, r1, r2
 8004866:	43eb      	mvns	r3, r5
 8004868:	17db      	asrs	r3, r3, #31
 800486a:	401d      	ands	r5, r3
 800486c:	68a3      	ldr	r3, [r4, #8]
 800486e:	6922      	ldr	r2, [r4, #16]
 8004870:	4293      	cmp	r3, r2
 8004872:	dd01      	ble.n	8004878 <_printf_common+0x80>
 8004874:	1a9b      	subs	r3, r3, r2
 8004876:	18ed      	adds	r5, r5, r3
 8004878:	2700      	movs	r7, #0
 800487a:	42bd      	cmp	r5, r7
 800487c:	d120      	bne.n	80048c0 <_printf_common+0xc8>
 800487e:	2000      	movs	r0, #0
 8004880:	e010      	b.n	80048a4 <_printf_common+0xac>
 8004882:	3701      	adds	r7, #1
 8004884:	68e3      	ldr	r3, [r4, #12]
 8004886:	682a      	ldr	r2, [r5, #0]
 8004888:	1a9b      	subs	r3, r3, r2
 800488a:	42bb      	cmp	r3, r7
 800488c:	ddd2      	ble.n	8004834 <_printf_common+0x3c>
 800488e:	0022      	movs	r2, r4
 8004890:	2301      	movs	r3, #1
 8004892:	9901      	ldr	r1, [sp, #4]
 8004894:	9800      	ldr	r0, [sp, #0]
 8004896:	9e08      	ldr	r6, [sp, #32]
 8004898:	3219      	adds	r2, #25
 800489a:	47b0      	blx	r6
 800489c:	1c43      	adds	r3, r0, #1
 800489e:	d1f0      	bne.n	8004882 <_printf_common+0x8a>
 80048a0:	2001      	movs	r0, #1
 80048a2:	4240      	negs	r0, r0
 80048a4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80048a6:	2030      	movs	r0, #48	; 0x30
 80048a8:	18e1      	adds	r1, r4, r3
 80048aa:	3143      	adds	r1, #67	; 0x43
 80048ac:	7008      	strb	r0, [r1, #0]
 80048ae:	0021      	movs	r1, r4
 80048b0:	1c5a      	adds	r2, r3, #1
 80048b2:	3145      	adds	r1, #69	; 0x45
 80048b4:	7809      	ldrb	r1, [r1, #0]
 80048b6:	18a2      	adds	r2, r4, r2
 80048b8:	3243      	adds	r2, #67	; 0x43
 80048ba:	3302      	adds	r3, #2
 80048bc:	7011      	strb	r1, [r2, #0]
 80048be:	e7c1      	b.n	8004844 <_printf_common+0x4c>
 80048c0:	0022      	movs	r2, r4
 80048c2:	2301      	movs	r3, #1
 80048c4:	9901      	ldr	r1, [sp, #4]
 80048c6:	9800      	ldr	r0, [sp, #0]
 80048c8:	9e08      	ldr	r6, [sp, #32]
 80048ca:	321a      	adds	r2, #26
 80048cc:	47b0      	blx	r6
 80048ce:	1c43      	adds	r3, r0, #1
 80048d0:	d0e6      	beq.n	80048a0 <_printf_common+0xa8>
 80048d2:	3701      	adds	r7, #1
 80048d4:	e7d1      	b.n	800487a <_printf_common+0x82>
	...

080048d8 <_printf_i>:
 80048d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048da:	b08b      	sub	sp, #44	; 0x2c
 80048dc:	9206      	str	r2, [sp, #24]
 80048de:	000a      	movs	r2, r1
 80048e0:	3243      	adds	r2, #67	; 0x43
 80048e2:	9307      	str	r3, [sp, #28]
 80048e4:	9005      	str	r0, [sp, #20]
 80048e6:	9204      	str	r2, [sp, #16]
 80048e8:	7e0a      	ldrb	r2, [r1, #24]
 80048ea:	000c      	movs	r4, r1
 80048ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80048ee:	2a78      	cmp	r2, #120	; 0x78
 80048f0:	d806      	bhi.n	8004900 <_printf_i+0x28>
 80048f2:	2a62      	cmp	r2, #98	; 0x62
 80048f4:	d808      	bhi.n	8004908 <_printf_i+0x30>
 80048f6:	2a00      	cmp	r2, #0
 80048f8:	d100      	bne.n	80048fc <_printf_i+0x24>
 80048fa:	e0c0      	b.n	8004a7e <_printf_i+0x1a6>
 80048fc:	2a58      	cmp	r2, #88	; 0x58
 80048fe:	d052      	beq.n	80049a6 <_printf_i+0xce>
 8004900:	0026      	movs	r6, r4
 8004902:	3642      	adds	r6, #66	; 0x42
 8004904:	7032      	strb	r2, [r6, #0]
 8004906:	e022      	b.n	800494e <_printf_i+0x76>
 8004908:	0010      	movs	r0, r2
 800490a:	3863      	subs	r0, #99	; 0x63
 800490c:	2815      	cmp	r0, #21
 800490e:	d8f7      	bhi.n	8004900 <_printf_i+0x28>
 8004910:	f7fb fbfa 	bl	8000108 <__gnu_thumb1_case_shi>
 8004914:	001f0016 	.word	0x001f0016
 8004918:	fff6fff6 	.word	0xfff6fff6
 800491c:	fff6fff6 	.word	0xfff6fff6
 8004920:	fff6001f 	.word	0xfff6001f
 8004924:	fff6fff6 	.word	0xfff6fff6
 8004928:	00a8fff6 	.word	0x00a8fff6
 800492c:	009a0036 	.word	0x009a0036
 8004930:	fff6fff6 	.word	0xfff6fff6
 8004934:	fff600b9 	.word	0xfff600b9
 8004938:	fff60036 	.word	0xfff60036
 800493c:	009efff6 	.word	0x009efff6
 8004940:	0026      	movs	r6, r4
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	3642      	adds	r6, #66	; 0x42
 8004946:	1d11      	adds	r1, r2, #4
 8004948:	6019      	str	r1, [r3, #0]
 800494a:	6813      	ldr	r3, [r2, #0]
 800494c:	7033      	strb	r3, [r6, #0]
 800494e:	2301      	movs	r3, #1
 8004950:	e0a7      	b.n	8004aa2 <_printf_i+0x1ca>
 8004952:	6808      	ldr	r0, [r1, #0]
 8004954:	6819      	ldr	r1, [r3, #0]
 8004956:	1d0a      	adds	r2, r1, #4
 8004958:	0605      	lsls	r5, r0, #24
 800495a:	d50b      	bpl.n	8004974 <_printf_i+0x9c>
 800495c:	680d      	ldr	r5, [r1, #0]
 800495e:	601a      	str	r2, [r3, #0]
 8004960:	2d00      	cmp	r5, #0
 8004962:	da03      	bge.n	800496c <_printf_i+0x94>
 8004964:	232d      	movs	r3, #45	; 0x2d
 8004966:	9a04      	ldr	r2, [sp, #16]
 8004968:	426d      	negs	r5, r5
 800496a:	7013      	strb	r3, [r2, #0]
 800496c:	4b61      	ldr	r3, [pc, #388]	; (8004af4 <_printf_i+0x21c>)
 800496e:	270a      	movs	r7, #10
 8004970:	9303      	str	r3, [sp, #12]
 8004972:	e032      	b.n	80049da <_printf_i+0x102>
 8004974:	680d      	ldr	r5, [r1, #0]
 8004976:	601a      	str	r2, [r3, #0]
 8004978:	0641      	lsls	r1, r0, #25
 800497a:	d5f1      	bpl.n	8004960 <_printf_i+0x88>
 800497c:	b22d      	sxth	r5, r5
 800497e:	e7ef      	b.n	8004960 <_printf_i+0x88>
 8004980:	680d      	ldr	r5, [r1, #0]
 8004982:	6819      	ldr	r1, [r3, #0]
 8004984:	1d08      	adds	r0, r1, #4
 8004986:	6018      	str	r0, [r3, #0]
 8004988:	062e      	lsls	r6, r5, #24
 800498a:	d501      	bpl.n	8004990 <_printf_i+0xb8>
 800498c:	680d      	ldr	r5, [r1, #0]
 800498e:	e003      	b.n	8004998 <_printf_i+0xc0>
 8004990:	066d      	lsls	r5, r5, #25
 8004992:	d5fb      	bpl.n	800498c <_printf_i+0xb4>
 8004994:	680d      	ldr	r5, [r1, #0]
 8004996:	b2ad      	uxth	r5, r5
 8004998:	4b56      	ldr	r3, [pc, #344]	; (8004af4 <_printf_i+0x21c>)
 800499a:	270a      	movs	r7, #10
 800499c:	9303      	str	r3, [sp, #12]
 800499e:	2a6f      	cmp	r2, #111	; 0x6f
 80049a0:	d117      	bne.n	80049d2 <_printf_i+0xfa>
 80049a2:	2708      	movs	r7, #8
 80049a4:	e015      	b.n	80049d2 <_printf_i+0xfa>
 80049a6:	3145      	adds	r1, #69	; 0x45
 80049a8:	700a      	strb	r2, [r1, #0]
 80049aa:	4a52      	ldr	r2, [pc, #328]	; (8004af4 <_printf_i+0x21c>)
 80049ac:	9203      	str	r2, [sp, #12]
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	6821      	ldr	r1, [r4, #0]
 80049b2:	ca20      	ldmia	r2!, {r5}
 80049b4:	601a      	str	r2, [r3, #0]
 80049b6:	0608      	lsls	r0, r1, #24
 80049b8:	d550      	bpl.n	8004a5c <_printf_i+0x184>
 80049ba:	07cb      	lsls	r3, r1, #31
 80049bc:	d502      	bpl.n	80049c4 <_printf_i+0xec>
 80049be:	2320      	movs	r3, #32
 80049c0:	4319      	orrs	r1, r3
 80049c2:	6021      	str	r1, [r4, #0]
 80049c4:	2710      	movs	r7, #16
 80049c6:	2d00      	cmp	r5, #0
 80049c8:	d103      	bne.n	80049d2 <_printf_i+0xfa>
 80049ca:	2320      	movs	r3, #32
 80049cc:	6822      	ldr	r2, [r4, #0]
 80049ce:	439a      	bics	r2, r3
 80049d0:	6022      	str	r2, [r4, #0]
 80049d2:	0023      	movs	r3, r4
 80049d4:	2200      	movs	r2, #0
 80049d6:	3343      	adds	r3, #67	; 0x43
 80049d8:	701a      	strb	r2, [r3, #0]
 80049da:	6863      	ldr	r3, [r4, #4]
 80049dc:	60a3      	str	r3, [r4, #8]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	db03      	blt.n	80049ea <_printf_i+0x112>
 80049e2:	2204      	movs	r2, #4
 80049e4:	6821      	ldr	r1, [r4, #0]
 80049e6:	4391      	bics	r1, r2
 80049e8:	6021      	str	r1, [r4, #0]
 80049ea:	2d00      	cmp	r5, #0
 80049ec:	d102      	bne.n	80049f4 <_printf_i+0x11c>
 80049ee:	9e04      	ldr	r6, [sp, #16]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d00c      	beq.n	8004a0e <_printf_i+0x136>
 80049f4:	9e04      	ldr	r6, [sp, #16]
 80049f6:	0028      	movs	r0, r5
 80049f8:	0039      	movs	r1, r7
 80049fa:	f7fb fc15 	bl	8000228 <__aeabi_uidivmod>
 80049fe:	9b03      	ldr	r3, [sp, #12]
 8004a00:	3e01      	subs	r6, #1
 8004a02:	5c5b      	ldrb	r3, [r3, r1]
 8004a04:	7033      	strb	r3, [r6, #0]
 8004a06:	002b      	movs	r3, r5
 8004a08:	0005      	movs	r5, r0
 8004a0a:	429f      	cmp	r7, r3
 8004a0c:	d9f3      	bls.n	80049f6 <_printf_i+0x11e>
 8004a0e:	2f08      	cmp	r7, #8
 8004a10:	d109      	bne.n	8004a26 <_printf_i+0x14e>
 8004a12:	6823      	ldr	r3, [r4, #0]
 8004a14:	07db      	lsls	r3, r3, #31
 8004a16:	d506      	bpl.n	8004a26 <_printf_i+0x14e>
 8004a18:	6863      	ldr	r3, [r4, #4]
 8004a1a:	6922      	ldr	r2, [r4, #16]
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	dc02      	bgt.n	8004a26 <_printf_i+0x14e>
 8004a20:	2330      	movs	r3, #48	; 0x30
 8004a22:	3e01      	subs	r6, #1
 8004a24:	7033      	strb	r3, [r6, #0]
 8004a26:	9b04      	ldr	r3, [sp, #16]
 8004a28:	1b9b      	subs	r3, r3, r6
 8004a2a:	6123      	str	r3, [r4, #16]
 8004a2c:	9b07      	ldr	r3, [sp, #28]
 8004a2e:	0021      	movs	r1, r4
 8004a30:	9300      	str	r3, [sp, #0]
 8004a32:	9805      	ldr	r0, [sp, #20]
 8004a34:	9b06      	ldr	r3, [sp, #24]
 8004a36:	aa09      	add	r2, sp, #36	; 0x24
 8004a38:	f7ff fede 	bl	80047f8 <_printf_common>
 8004a3c:	1c43      	adds	r3, r0, #1
 8004a3e:	d135      	bne.n	8004aac <_printf_i+0x1d4>
 8004a40:	2001      	movs	r0, #1
 8004a42:	4240      	negs	r0, r0
 8004a44:	b00b      	add	sp, #44	; 0x2c
 8004a46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a48:	2220      	movs	r2, #32
 8004a4a:	6809      	ldr	r1, [r1, #0]
 8004a4c:	430a      	orrs	r2, r1
 8004a4e:	6022      	str	r2, [r4, #0]
 8004a50:	0022      	movs	r2, r4
 8004a52:	2178      	movs	r1, #120	; 0x78
 8004a54:	3245      	adds	r2, #69	; 0x45
 8004a56:	7011      	strb	r1, [r2, #0]
 8004a58:	4a27      	ldr	r2, [pc, #156]	; (8004af8 <_printf_i+0x220>)
 8004a5a:	e7a7      	b.n	80049ac <_printf_i+0xd4>
 8004a5c:	0648      	lsls	r0, r1, #25
 8004a5e:	d5ac      	bpl.n	80049ba <_printf_i+0xe2>
 8004a60:	b2ad      	uxth	r5, r5
 8004a62:	e7aa      	b.n	80049ba <_printf_i+0xe2>
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	680d      	ldr	r5, [r1, #0]
 8004a68:	1d10      	adds	r0, r2, #4
 8004a6a:	6949      	ldr	r1, [r1, #20]
 8004a6c:	6018      	str	r0, [r3, #0]
 8004a6e:	6813      	ldr	r3, [r2, #0]
 8004a70:	062e      	lsls	r6, r5, #24
 8004a72:	d501      	bpl.n	8004a78 <_printf_i+0x1a0>
 8004a74:	6019      	str	r1, [r3, #0]
 8004a76:	e002      	b.n	8004a7e <_printf_i+0x1a6>
 8004a78:	066d      	lsls	r5, r5, #25
 8004a7a:	d5fb      	bpl.n	8004a74 <_printf_i+0x19c>
 8004a7c:	8019      	strh	r1, [r3, #0]
 8004a7e:	2300      	movs	r3, #0
 8004a80:	9e04      	ldr	r6, [sp, #16]
 8004a82:	6123      	str	r3, [r4, #16]
 8004a84:	e7d2      	b.n	8004a2c <_printf_i+0x154>
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	1d11      	adds	r1, r2, #4
 8004a8a:	6019      	str	r1, [r3, #0]
 8004a8c:	6816      	ldr	r6, [r2, #0]
 8004a8e:	2100      	movs	r1, #0
 8004a90:	0030      	movs	r0, r6
 8004a92:	6862      	ldr	r2, [r4, #4]
 8004a94:	f000 f832 	bl	8004afc <memchr>
 8004a98:	2800      	cmp	r0, #0
 8004a9a:	d001      	beq.n	8004aa0 <_printf_i+0x1c8>
 8004a9c:	1b80      	subs	r0, r0, r6
 8004a9e:	6060      	str	r0, [r4, #4]
 8004aa0:	6863      	ldr	r3, [r4, #4]
 8004aa2:	6123      	str	r3, [r4, #16]
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	9a04      	ldr	r2, [sp, #16]
 8004aa8:	7013      	strb	r3, [r2, #0]
 8004aaa:	e7bf      	b.n	8004a2c <_printf_i+0x154>
 8004aac:	6923      	ldr	r3, [r4, #16]
 8004aae:	0032      	movs	r2, r6
 8004ab0:	9906      	ldr	r1, [sp, #24]
 8004ab2:	9805      	ldr	r0, [sp, #20]
 8004ab4:	9d07      	ldr	r5, [sp, #28]
 8004ab6:	47a8      	blx	r5
 8004ab8:	1c43      	adds	r3, r0, #1
 8004aba:	d0c1      	beq.n	8004a40 <_printf_i+0x168>
 8004abc:	6823      	ldr	r3, [r4, #0]
 8004abe:	079b      	lsls	r3, r3, #30
 8004ac0:	d415      	bmi.n	8004aee <_printf_i+0x216>
 8004ac2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ac4:	68e0      	ldr	r0, [r4, #12]
 8004ac6:	4298      	cmp	r0, r3
 8004ac8:	dabc      	bge.n	8004a44 <_printf_i+0x16c>
 8004aca:	0018      	movs	r0, r3
 8004acc:	e7ba      	b.n	8004a44 <_printf_i+0x16c>
 8004ace:	0022      	movs	r2, r4
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	9906      	ldr	r1, [sp, #24]
 8004ad4:	9805      	ldr	r0, [sp, #20]
 8004ad6:	9e07      	ldr	r6, [sp, #28]
 8004ad8:	3219      	adds	r2, #25
 8004ada:	47b0      	blx	r6
 8004adc:	1c43      	adds	r3, r0, #1
 8004ade:	d0af      	beq.n	8004a40 <_printf_i+0x168>
 8004ae0:	3501      	adds	r5, #1
 8004ae2:	68e3      	ldr	r3, [r4, #12]
 8004ae4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ae6:	1a9b      	subs	r3, r3, r2
 8004ae8:	42ab      	cmp	r3, r5
 8004aea:	dcf0      	bgt.n	8004ace <_printf_i+0x1f6>
 8004aec:	e7e9      	b.n	8004ac2 <_printf_i+0x1ea>
 8004aee:	2500      	movs	r5, #0
 8004af0:	e7f7      	b.n	8004ae2 <_printf_i+0x20a>
 8004af2:	46c0      	nop			; (mov r8, r8)
 8004af4:	08005369 	.word	0x08005369
 8004af8:	0800537a 	.word	0x0800537a

08004afc <memchr>:
 8004afc:	b2c9      	uxtb	r1, r1
 8004afe:	1882      	adds	r2, r0, r2
 8004b00:	4290      	cmp	r0, r2
 8004b02:	d101      	bne.n	8004b08 <memchr+0xc>
 8004b04:	2000      	movs	r0, #0
 8004b06:	4770      	bx	lr
 8004b08:	7803      	ldrb	r3, [r0, #0]
 8004b0a:	428b      	cmp	r3, r1
 8004b0c:	d0fb      	beq.n	8004b06 <memchr+0xa>
 8004b0e:	3001      	adds	r0, #1
 8004b10:	e7f6      	b.n	8004b00 <memchr+0x4>
	...

08004b14 <_free_r>:
 8004b14:	b570      	push	{r4, r5, r6, lr}
 8004b16:	0005      	movs	r5, r0
 8004b18:	2900      	cmp	r1, #0
 8004b1a:	d010      	beq.n	8004b3e <_free_r+0x2a>
 8004b1c:	1f0c      	subs	r4, r1, #4
 8004b1e:	6823      	ldr	r3, [r4, #0]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	da00      	bge.n	8004b26 <_free_r+0x12>
 8004b24:	18e4      	adds	r4, r4, r3
 8004b26:	0028      	movs	r0, r5
 8004b28:	f000 f8d4 	bl	8004cd4 <__malloc_lock>
 8004b2c:	4a1d      	ldr	r2, [pc, #116]	; (8004ba4 <_free_r+0x90>)
 8004b2e:	6813      	ldr	r3, [r2, #0]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d105      	bne.n	8004b40 <_free_r+0x2c>
 8004b34:	6063      	str	r3, [r4, #4]
 8004b36:	6014      	str	r4, [r2, #0]
 8004b38:	0028      	movs	r0, r5
 8004b3a:	f000 f8d3 	bl	8004ce4 <__malloc_unlock>
 8004b3e:	bd70      	pop	{r4, r5, r6, pc}
 8004b40:	42a3      	cmp	r3, r4
 8004b42:	d908      	bls.n	8004b56 <_free_r+0x42>
 8004b44:	6821      	ldr	r1, [r4, #0]
 8004b46:	1860      	adds	r0, r4, r1
 8004b48:	4283      	cmp	r3, r0
 8004b4a:	d1f3      	bne.n	8004b34 <_free_r+0x20>
 8004b4c:	6818      	ldr	r0, [r3, #0]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	1841      	adds	r1, r0, r1
 8004b52:	6021      	str	r1, [r4, #0]
 8004b54:	e7ee      	b.n	8004b34 <_free_r+0x20>
 8004b56:	001a      	movs	r2, r3
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d001      	beq.n	8004b62 <_free_r+0x4e>
 8004b5e:	42a3      	cmp	r3, r4
 8004b60:	d9f9      	bls.n	8004b56 <_free_r+0x42>
 8004b62:	6811      	ldr	r1, [r2, #0]
 8004b64:	1850      	adds	r0, r2, r1
 8004b66:	42a0      	cmp	r0, r4
 8004b68:	d10b      	bne.n	8004b82 <_free_r+0x6e>
 8004b6a:	6820      	ldr	r0, [r4, #0]
 8004b6c:	1809      	adds	r1, r1, r0
 8004b6e:	1850      	adds	r0, r2, r1
 8004b70:	6011      	str	r1, [r2, #0]
 8004b72:	4283      	cmp	r3, r0
 8004b74:	d1e0      	bne.n	8004b38 <_free_r+0x24>
 8004b76:	6818      	ldr	r0, [r3, #0]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	1841      	adds	r1, r0, r1
 8004b7c:	6011      	str	r1, [r2, #0]
 8004b7e:	6053      	str	r3, [r2, #4]
 8004b80:	e7da      	b.n	8004b38 <_free_r+0x24>
 8004b82:	42a0      	cmp	r0, r4
 8004b84:	d902      	bls.n	8004b8c <_free_r+0x78>
 8004b86:	230c      	movs	r3, #12
 8004b88:	602b      	str	r3, [r5, #0]
 8004b8a:	e7d5      	b.n	8004b38 <_free_r+0x24>
 8004b8c:	6821      	ldr	r1, [r4, #0]
 8004b8e:	1860      	adds	r0, r4, r1
 8004b90:	4283      	cmp	r3, r0
 8004b92:	d103      	bne.n	8004b9c <_free_r+0x88>
 8004b94:	6818      	ldr	r0, [r3, #0]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	1841      	adds	r1, r0, r1
 8004b9a:	6021      	str	r1, [r4, #0]
 8004b9c:	6063      	str	r3, [r4, #4]
 8004b9e:	6054      	str	r4, [r2, #4]
 8004ba0:	e7ca      	b.n	8004b38 <_free_r+0x24>
 8004ba2:	46c0      	nop			; (mov r8, r8)
 8004ba4:	200008c4 	.word	0x200008c4

08004ba8 <_malloc_r>:
 8004ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004baa:	2303      	movs	r3, #3
 8004bac:	1ccd      	adds	r5, r1, #3
 8004bae:	439d      	bics	r5, r3
 8004bb0:	3508      	adds	r5, #8
 8004bb2:	0006      	movs	r6, r0
 8004bb4:	2d0c      	cmp	r5, #12
 8004bb6:	d21f      	bcs.n	8004bf8 <_malloc_r+0x50>
 8004bb8:	250c      	movs	r5, #12
 8004bba:	42a9      	cmp	r1, r5
 8004bbc:	d81e      	bhi.n	8004bfc <_malloc_r+0x54>
 8004bbe:	0030      	movs	r0, r6
 8004bc0:	f000 f888 	bl	8004cd4 <__malloc_lock>
 8004bc4:	4925      	ldr	r1, [pc, #148]	; (8004c5c <_malloc_r+0xb4>)
 8004bc6:	680a      	ldr	r2, [r1, #0]
 8004bc8:	0014      	movs	r4, r2
 8004bca:	2c00      	cmp	r4, #0
 8004bcc:	d11a      	bne.n	8004c04 <_malloc_r+0x5c>
 8004bce:	4f24      	ldr	r7, [pc, #144]	; (8004c60 <_malloc_r+0xb8>)
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d104      	bne.n	8004be0 <_malloc_r+0x38>
 8004bd6:	0021      	movs	r1, r4
 8004bd8:	0030      	movs	r0, r6
 8004bda:	f000 f869 	bl	8004cb0 <_sbrk_r>
 8004bde:	6038      	str	r0, [r7, #0]
 8004be0:	0029      	movs	r1, r5
 8004be2:	0030      	movs	r0, r6
 8004be4:	f000 f864 	bl	8004cb0 <_sbrk_r>
 8004be8:	1c43      	adds	r3, r0, #1
 8004bea:	d12b      	bne.n	8004c44 <_malloc_r+0x9c>
 8004bec:	230c      	movs	r3, #12
 8004bee:	0030      	movs	r0, r6
 8004bf0:	6033      	str	r3, [r6, #0]
 8004bf2:	f000 f877 	bl	8004ce4 <__malloc_unlock>
 8004bf6:	e003      	b.n	8004c00 <_malloc_r+0x58>
 8004bf8:	2d00      	cmp	r5, #0
 8004bfa:	dade      	bge.n	8004bba <_malloc_r+0x12>
 8004bfc:	230c      	movs	r3, #12
 8004bfe:	6033      	str	r3, [r6, #0]
 8004c00:	2000      	movs	r0, #0
 8004c02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c04:	6823      	ldr	r3, [r4, #0]
 8004c06:	1b5b      	subs	r3, r3, r5
 8004c08:	d419      	bmi.n	8004c3e <_malloc_r+0x96>
 8004c0a:	2b0b      	cmp	r3, #11
 8004c0c:	d903      	bls.n	8004c16 <_malloc_r+0x6e>
 8004c0e:	6023      	str	r3, [r4, #0]
 8004c10:	18e4      	adds	r4, r4, r3
 8004c12:	6025      	str	r5, [r4, #0]
 8004c14:	e003      	b.n	8004c1e <_malloc_r+0x76>
 8004c16:	6863      	ldr	r3, [r4, #4]
 8004c18:	42a2      	cmp	r2, r4
 8004c1a:	d10e      	bne.n	8004c3a <_malloc_r+0x92>
 8004c1c:	600b      	str	r3, [r1, #0]
 8004c1e:	0030      	movs	r0, r6
 8004c20:	f000 f860 	bl	8004ce4 <__malloc_unlock>
 8004c24:	0020      	movs	r0, r4
 8004c26:	2207      	movs	r2, #7
 8004c28:	300b      	adds	r0, #11
 8004c2a:	1d23      	adds	r3, r4, #4
 8004c2c:	4390      	bics	r0, r2
 8004c2e:	1ac2      	subs	r2, r0, r3
 8004c30:	4298      	cmp	r0, r3
 8004c32:	d0e6      	beq.n	8004c02 <_malloc_r+0x5a>
 8004c34:	1a1b      	subs	r3, r3, r0
 8004c36:	50a3      	str	r3, [r4, r2]
 8004c38:	e7e3      	b.n	8004c02 <_malloc_r+0x5a>
 8004c3a:	6053      	str	r3, [r2, #4]
 8004c3c:	e7ef      	b.n	8004c1e <_malloc_r+0x76>
 8004c3e:	0022      	movs	r2, r4
 8004c40:	6864      	ldr	r4, [r4, #4]
 8004c42:	e7c2      	b.n	8004bca <_malloc_r+0x22>
 8004c44:	2303      	movs	r3, #3
 8004c46:	1cc4      	adds	r4, r0, #3
 8004c48:	439c      	bics	r4, r3
 8004c4a:	42a0      	cmp	r0, r4
 8004c4c:	d0e1      	beq.n	8004c12 <_malloc_r+0x6a>
 8004c4e:	1a21      	subs	r1, r4, r0
 8004c50:	0030      	movs	r0, r6
 8004c52:	f000 f82d 	bl	8004cb0 <_sbrk_r>
 8004c56:	1c43      	adds	r3, r0, #1
 8004c58:	d1db      	bne.n	8004c12 <_malloc_r+0x6a>
 8004c5a:	e7c7      	b.n	8004bec <_malloc_r+0x44>
 8004c5c:	200008c4 	.word	0x200008c4
 8004c60:	200008c8 	.word	0x200008c8

08004c64 <_realloc_r>:
 8004c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c66:	0007      	movs	r7, r0
 8004c68:	000d      	movs	r5, r1
 8004c6a:	0016      	movs	r6, r2
 8004c6c:	2900      	cmp	r1, #0
 8004c6e:	d105      	bne.n	8004c7c <_realloc_r+0x18>
 8004c70:	0011      	movs	r1, r2
 8004c72:	f7ff ff99 	bl	8004ba8 <_malloc_r>
 8004c76:	0004      	movs	r4, r0
 8004c78:	0020      	movs	r0, r4
 8004c7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c7c:	2a00      	cmp	r2, #0
 8004c7e:	d103      	bne.n	8004c88 <_realloc_r+0x24>
 8004c80:	f7ff ff48 	bl	8004b14 <_free_r>
 8004c84:	0034      	movs	r4, r6
 8004c86:	e7f7      	b.n	8004c78 <_realloc_r+0x14>
 8004c88:	f000 f834 	bl	8004cf4 <_malloc_usable_size_r>
 8004c8c:	002c      	movs	r4, r5
 8004c8e:	42b0      	cmp	r0, r6
 8004c90:	d2f2      	bcs.n	8004c78 <_realloc_r+0x14>
 8004c92:	0031      	movs	r1, r6
 8004c94:	0038      	movs	r0, r7
 8004c96:	f7ff ff87 	bl	8004ba8 <_malloc_r>
 8004c9a:	1e04      	subs	r4, r0, #0
 8004c9c:	d0ec      	beq.n	8004c78 <_realloc_r+0x14>
 8004c9e:	0029      	movs	r1, r5
 8004ca0:	0032      	movs	r2, r6
 8004ca2:	f7ff fbef 	bl	8004484 <memcpy>
 8004ca6:	0029      	movs	r1, r5
 8004ca8:	0038      	movs	r0, r7
 8004caa:	f7ff ff33 	bl	8004b14 <_free_r>
 8004cae:	e7e3      	b.n	8004c78 <_realloc_r+0x14>

08004cb0 <_sbrk_r>:
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	b570      	push	{r4, r5, r6, lr}
 8004cb4:	4d06      	ldr	r5, [pc, #24]	; (8004cd0 <_sbrk_r+0x20>)
 8004cb6:	0004      	movs	r4, r0
 8004cb8:	0008      	movs	r0, r1
 8004cba:	602b      	str	r3, [r5, #0]
 8004cbc:	f7fb ff3e 	bl	8000b3c <_sbrk>
 8004cc0:	1c43      	adds	r3, r0, #1
 8004cc2:	d103      	bne.n	8004ccc <_sbrk_r+0x1c>
 8004cc4:	682b      	ldr	r3, [r5, #0]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d000      	beq.n	8004ccc <_sbrk_r+0x1c>
 8004cca:	6023      	str	r3, [r4, #0]
 8004ccc:	bd70      	pop	{r4, r5, r6, pc}
 8004cce:	46c0      	nop			; (mov r8, r8)
 8004cd0:	200009a4 	.word	0x200009a4

08004cd4 <__malloc_lock>:
 8004cd4:	b510      	push	{r4, lr}
 8004cd6:	4802      	ldr	r0, [pc, #8]	; (8004ce0 <__malloc_lock+0xc>)
 8004cd8:	f000 f814 	bl	8004d04 <__retarget_lock_acquire_recursive>
 8004cdc:	bd10      	pop	{r4, pc}
 8004cde:	46c0      	nop			; (mov r8, r8)
 8004ce0:	200009ac 	.word	0x200009ac

08004ce4 <__malloc_unlock>:
 8004ce4:	b510      	push	{r4, lr}
 8004ce6:	4802      	ldr	r0, [pc, #8]	; (8004cf0 <__malloc_unlock+0xc>)
 8004ce8:	f000 f80d 	bl	8004d06 <__retarget_lock_release_recursive>
 8004cec:	bd10      	pop	{r4, pc}
 8004cee:	46c0      	nop			; (mov r8, r8)
 8004cf0:	200009ac 	.word	0x200009ac

08004cf4 <_malloc_usable_size_r>:
 8004cf4:	1f0b      	subs	r3, r1, #4
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	1f18      	subs	r0, r3, #4
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	da01      	bge.n	8004d02 <_malloc_usable_size_r+0xe>
 8004cfe:	580b      	ldr	r3, [r1, r0]
 8004d00:	18c0      	adds	r0, r0, r3
 8004d02:	4770      	bx	lr

08004d04 <__retarget_lock_acquire_recursive>:
 8004d04:	4770      	bx	lr

08004d06 <__retarget_lock_release_recursive>:
 8004d06:	4770      	bx	lr

08004d08 <_init>:
 8004d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d0a:	46c0      	nop			; (mov r8, r8)
 8004d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d0e:	bc08      	pop	{r3}
 8004d10:	469e      	mov	lr, r3
 8004d12:	4770      	bx	lr

08004d14 <_fini>:
 8004d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d16:	46c0      	nop			; (mov r8, r8)
 8004d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d1a:	bc08      	pop	{r3}
 8004d1c:	469e      	mov	lr, r3
 8004d1e:	4770      	bx	lr
